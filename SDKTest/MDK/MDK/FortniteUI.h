
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

/// dependency: BlueprintContext
/// dependency: CommonUI
/// dependency: CoreUObject
/// dependency: Engine
/// dependency: EpicCMSUIFramework
/// dependency: FortniteGame
/// dependency: UMG

/// Class /Script/FortniteUI.AthenaAccountContext
/// Size: 0x0000 (0x000028 - 0x000028)
class UAthenaAccountContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaAccountContext.SimulateBattleBookPurchase
	// void SimulateBattleBookPurchase(int32_t NumLevelsToPurchase, int32_t& BonusLevelsGranted, bool& bOverLimit);             // [0x2b5a860] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaAccountContext.ShouldReplaceBattleStarsWithAlternateReward
	// bool ShouldReplaceBattleStarsWithAlternateReward();                                                                      // [0x2b5a810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaAccountContext.IsAtMaxBattlePassTier
	// bool IsAtMaxBattlePassTier();                                                                                            // [0x2b59920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaAccountContext.GetCurrentSeasonNumber
	// int32_t GetCurrentSeasonNumber();                                                                                        // [0x2b58dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaAccountContext.GetCurrentSeasonName
	// FText GetCurrentSeasonName();                                                                                            // [0x2b58d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaAccountContext.GetCurrentSeasonDefinition
	// UAthenaSeasonItemDefinition* GetCurrentSeasonDefinition();                                                               // [0x2b58d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaAccountContext.GetBattleBookPurchaseLimit
	// void GetBattleBookPurchaseLimit(int32_t& MaxNumLevelsPossibleToPurchase, int32_t& BonusLevelsGranted);                   // [0x2b58a40] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaAwardAlertBase
/// Size: 0x0008 (0x000208 - 0x000210)
class UAthenaAwardAlertBase : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(UAthenaPlayerViewModel*)                   PlayerVM                                                    OFFSET(get<T>, {0x208, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaAwardAlertBase.SetDataSource
	// void SetDataSource(UAthenaPlayerViewModel* PlayerViewModel);                                                             // [0x2b5a2a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaAwardAlertBase.OnAwardGranted
	// void OnAwardGranted(UFortAwardItemDefinition* AwardDefinition);                                                          // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortChallengeBundleCategoryInfo
/// Size: 0x0030 (0x000028 - 0x000058)
class UFortChallengeBundleCategoryInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UFortChallengeBundleScheduleItem*)         BundleSchedule                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<UFortChallengeBundleScheduleDefinition*>) BundleScheduleDefinitions                             OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<UFortChallengeBundleInfo*>)         BundleInfos                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(AFortPlayerController*)                    FortPC                                                      OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortChallengeBundleCategoryInfo.GetNumberOfBundles
	// int32_t GetNumberOfBundles();                                                                                            // [0x2b58ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleCategoryInfo.GetFirstScheduleDefinition
	// UFortChallengeBundleScheduleDefinition* GetFirstScheduleDefinition();                                                    // [0x2b58eb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleCategoryInfo.GetChallengeBundleInfos
	// TArray<UFortChallengeBundleInfo*> GetChallengeBundleInfos();                                                             // [0x2b58be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortChallengeBundleInfo
/// Size: 0x0030 (0x000028 - 0x000058)
class UFortChallengeBundleInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(UFortChallengeBundleItem*)                 BundleItem                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(UFortChallengeBundleItemDefinition*)       BundleDefinition                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UFortChallengeBundleCategoryInfo*)         BundleCategoryInfo                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(UFortChallengeBundleScheduleDefinition*)   BundleScheduleDefinition                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(EChallengeScheduleUnlockType)              BundleUnlockType                                            OFFSET(get<T>, {0x48, 1, 0, 0})
	DMember(int32_t)                                   BundleUnlockValue                                           OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	CMember(AFortPlayerController*)                    FortPC                                                      OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortChallengeBundleInfo.IsUnlocked
	// bool IsUnlocked(FText& LockedReason);                                                                                    // [0x2b59b90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleInfo.IsRewardThresholdAchieved
	// bool IsRewardThresholdAchieved();                                                                                        // [0x2b59ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleInfo.IsCompleted
	// bool IsCompleted();                                                                                                      // [0x2b599b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleInfo.HasQuestReward
	// bool HasQuestReward(UFortItemDefinition* ItemDef, int32_t& OutRecievedCount, int32_t& OutTotalCount);                    // [0x2b597d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleInfo.GetRewardItem
	// UFortItem* GetRewardItem();                                                                                              // [0x2b59210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleInfo.GetQuests
	// void GetQuests(UFortQuestManager* QuestManager, TArray<UFortQuestItem*>& OwnedQuests, TArray<UFortQuestItemDefinition*>& UnownedQuests); // [0x2b590b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleInfo.GetOwningBundleCategoryInfo
	// UFortChallengeBundleCategoryInfo* GetOwningBundleCategoryInfo();                                                         // [0x2b59020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleInfo.GetBundleDefinition
	// UFortChallengeBundleItemDefinition* GetBundleDefinition();                                                               // [0x2b58b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleInfo.GetAchievedCount
	// void GetAchievedCount(int32_t& OutTotalAchievedCount, int32_t& OutTotalRequiredCount, float& OutAchievedPercent, float& OutThresholdPercent); // [0x2b58870] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortChallengeBundleTreeItemWidget
/// Size: 0x0018 (0x000800 - 0x000818)
class UFortChallengeBundleTreeItemWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	CMember(TWeakObjectPtr<UObject*>)                  ScheduleOrBundle                                            OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortChallengeBundleTreeItemWidget.SetupAsChallengeBundleSchedule
	// void SetupAsChallengeBundleSchedule(UFortChallengeBundleCategoryInfo* Schedule);                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortChallengeBundleTreeItemWidget.SetupAsChallengeBundle
	// void SetupAsChallengeBundle(UFortChallengeBundleInfo* Bundle);                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortChallengeBundleTreeItemWidget.OnBundleUpdated
	// void OnBundleUpdated();                                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortChallengeBundleTreeItemWidget.HandleBundleUpdated
	// void HandleBundleUpdated();                                                                                              // [0x2b59290] Final|Native|Private 
	// Function /Script/FortniteUI.FortChallengeBundleTreeItemWidget.GetChallengeBundleInfo
	// UFortChallengeBundleInfo* GetChallengeBundleInfo();                                                                      // [0x2b58b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleTreeItemWidget.ExpansionChanged
	// void ExpansionChanged(bool bExpanded);                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortChallengeBundleWidget
/// Size: 0x0010 (0x0003C0 - 0x0003D0)
class UFortChallengeBundleWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(UFortChallengeBundleInfo*)                 ChallengeBundleInfo                                         OFFSET(get<T>, {0x3C0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortChallengeBundleWidget.Setup
	// void Setup(UFortChallengeBundleInfo* Info);                                                                              // [0x2b5a6d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortChallengeBundleWidget.OnSetup
	// void OnSetup();                                                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortChallengeBundleWidget.OnBundleUpdated
	// void OnBundleUpdated();                                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortChallengeBundleWidget.MoveToPrevBundle
	// void MoveToPrevBundle();                                                                                                 // [0x2b59d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortChallengeBundleWidget.MoveToNextBundle
	// void MoveToNextBundle();                                                                                                 // [0x2b59d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortChallengeBundleWidget.HasSiblingBundles
	// bool HasSiblingBundles();                                                                                                // [0x2b598f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortChallengeBundleWidget.HandleBundleUpdated
	// void HandleBundleUpdated();                                                                                              // [0x2b592b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortChallengeBundleWidget.GetChallengeBundleInfo
	// UFortChallengeBundleInfo* GetChallengeBundleInfo();                                                                      // [0x2b58bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortActivatablePanel
/// Size: 0x0030 (0x0003C0 - 0x0003F0)
class UFortActivatablePanel : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	DMember(bool)                                      bIsPushedOnToContentPanelStack                              OFFSET(get<bool>, {0x3C0, 1, 0, 0})
	DMember(bool)                                      bIsAlreadyOnContentPanelStack                               OFFSET(get<bool>, {0x3C1, 1, 0, 0})
	CMember(EInputPriority)                            InputPriority                                               OFFSET(get<T>, {0x3C2, 1, 0, 0})
	CMember(UClass*)                                   MoreInfoPopupMenuClass                                      OFFSET(get<T>, {0x3C8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortActivatablePanel.RestoreScrollWidget
	// void RestoreScrollWidget(UWidget* FallbackWidget);                                                                       // [0x2b6d440] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortActivatablePanel.RestoreCenterWidget
	// void RestoreCenterWidget(UWidget* FallbackWidget);                                                                       // [0x2b6d3c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaChallengeBundleScheduleScreenBase
/// Size: 0x0070 (0x0003F0 - 0x000460)
class UAthenaChallengeBundleScheduleScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(TMap<FName, UFortChallengeBundleCategoryInfo*>) ScheduleCategoryCache                                  OFFSET(get<T>, {0x400, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaChallengeBundleScheduleScreenBase.OnChallengesChanged
	// void OnChallengesChanged();                                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaChallengeBundleScheduleScreenBase.GetChallengeCategoryInfos
	// void GetChallengeCategoryInfos(TArray<UFortChallengeBundleCategoryInfo*>& OutCategoryInfos);                             // [0x2b58c60] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortHUDElementWidget
/// Size: 0x0028 (0x000210 - 0x000238)
class UFortHUDElementWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	SMember(FGameplayTagContainer)                     HUDElementTag                                               OFFSET(getStruct<T>, {0x210, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHUDElementWidget.OnVisibilitySetEvent
	// void OnVisibilitySetEvent(ESlateVisibility InVisibility);                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortHUDElementWidget.HandleOnHUDResetToDefaults
	// void HandleOnHUDResetToDefaults();                                                                                       // [0x2baad30] Final|Native|Protected 
	// Function /Script/FortniteUI.FortHUDElementWidget.HandleOnHUDElementVisibilityChanged
	// void HandleOnHUDElementVisibilityChanged(FGameplayTagContainer& HiddenHUDElementTags);                                   // [0x2baac70] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteUI.AthenaCompassBase
/// Size: 0x01A8 (0x000238 - 0x0003E0)
class UAthenaCompassBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(UMaterialInstanceDynamic*)                 CompassMaterial                                             OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TArray<FSlateBrush>)                       MarkerBrushes                                               OFFSET(get<T>, {0x240, 16, 0, 0})
	SMember(FSlateBrush)                               HeadingIndicatorBrush                                       OFFSET(getStruct<T>, {0x250, 136, 0, 0})
	SMember(FSlateBrush)                               StormIndicatorBrush                                         OFFSET(getStruct<T>, {0x2D8, 136, 0, 0})
	DMember(float)                                     MarkerVerticalOffset                                        OFFSET(get<float>, {0x360, 4, 0, 0})
	CMember(UAthenaPlayerViewModel*)                   VM                                                          OFFSET(get<T>, {0x368, 8, 0, 0})
	SMember(FSlateFontInfo)                            HeadingFont                                                 OFFSET(getStruct<T>, {0x370, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaCompassBase.BindToModel
	// void BindToModel(UAthenaPlayerViewModel* ViewModel);                                                                     // [0x2b584d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemPickerBase
/// Size: 0x0068 (0x000210 - 0x000278)
class UFortItemPickerBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(UMulticastDelegate)                        OnSelectionChangedEvent                                     OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSelectionCommittedEvent                                   OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemHoveredEvent                                          OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemUnhovered                                             OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(UFortItemTileView*)                        PickerTileView                                              OFFSET(get<T>, {0x250, 8, 0, 0})
	DMember(bool)                                      bConfirmSelectionIfAlreadySelectedAfterOneClick             OFFSET(get<bool>, {0x258, 1, 0, 0})
	CMember(UObject*)                                  NewlySelectedItem                                           OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x268, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemPickerBase.TryCommitSelectedItem
	// bool TryCommitSelectedItem();                                                                                            // [0x2bbc580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemPickerBase.SetSelectedItem
	// void SetSelectedItem(UFortItem* ItemToSelect);                                                                           // [0x2bbc320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemPickerBase.SetSelectedIndex
	// bool SetSelectedIndex(int32_t Index);                                                                                    // [0x2bbc290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemPickerBase.OnItemSelectionEvent__DelegateSignature
	// void OnItemSelectionEvent__DelegateSignature(UFortItem* SelectedItem);                                                   // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortItemPickerBase.HandlePickerTileDestroyed
	// void HandlePickerTileDestroyed(UUserWidget* Widget);                                                                     // [0x2bbb080] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemPickerBase.HandlePickerTileCreated
	// void HandlePickerTileCreated(UUserWidget* Widget);                                                                       // [0x2bbb000] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemPickerBase.HandlePickerItemSelected
	// void HandlePickerItemSelected(UObject* ObjectWhoseSelectionChanged, bool bIsSelected);                                   // [0x2bbaf30] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemPickerBase.HandlePickerItemHovered
	// void HandlePickerItemHovered(UObject* ObjectOfHoveredTile);                                                              // [0x2bbaeb0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemPickerBase.HandlePickerItemDoubleClicked
	// void HandlePickerItemDoubleClicked(UObject* ObjectOfClickedTile);                                                        // [0x2bbae30] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemPickerBase.HandlePickerItemClicked
	// void HandlePickerItemClicked(UObject* ObjectOfClickedTile);                                                              // [0x2bbadb0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemPickerBase.GetSelectedItem
	// UFortItem* GetSelectedItem();                                                                                            // [0x2bbacc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemPickerBase.GetIndexForItem
	// int32_t GetIndexForItem(UObject* Item);                                                                                  // [0x2bbaa90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemPickerBase.ClearSelection
	// void ClearSelection();                                                                                                   // [0x2bba9e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemPickerBase.CenterSelectedItemTileWidget
	// void CenterSelectedItemTileWidget();                                                                                     // [0x2bba980] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemPickerBase.CanItemBeComitted
	// bool CanItemBeComitted(UFortItem* ItemToCommit);                                                                         // [0x2bba8f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaCustomizationPicker
/// Size: 0x0058 (0x000278 - 0x0002D0)
class UAthenaCustomizationPicker : public UFortItemPickerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(UMulticastDelegate)                        OnCosmeticSelectionSaving                                   OFFSET(get<T>, {0x278, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCosmeticSelectionSaved                                    OFFSET(get<T>, {0x288, 16, 0, 0})
	CMember(EAthenaCustomizationCategory)              CustomizeCategory                                           OFFSET(get<T>, {0x2A8, 1, 0, 0})
	DMember(int32_t)                                   SubslotIndex                                                OFFSET(get<int32_t>, {0x2AC, 4, 0, 0})
	DMember(bool)                                      bCommitingSelection                                         OFFSET(get<bool>, {0x2B0, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaCustomizationPicker.OnCosmeticChangeSaveEvent__DelegateSignature
	// void OnCosmeticChangeSaveEvent__DelegateSignature();                                                                     // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.AthenaCustomizationPicker.HandleSelectedItemHasChanged
	// void HandleSelectedItemHasChanged(bool ItemChanged, bool AmmoChanged, bool IngredientsChanged);                          // [0x2b59460] Final|Native|Protected 
	// Function /Script/FortniteUI.AthenaCustomizationPicker.EndCustomizationCategory
	// void EndCustomizationCategory();                                                                                         // [0x2b586b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaCustomizationPicker.BeginCustomizationCategory
	// void BeginCustomizationCategory(EAthenaCustomizationCategory Category, int32_t SubslotToEdit);                           // [0x2b583f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemTileButton
/// Size: 0x0030 (0x000800 - 0x000830)
class UFortItemTileButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
	CMember(UFortMultiSizeItemCard*)                   ItemWidget                                                  OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                Item                                                        OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(EFortItemCardSize)                         ItemCardSize                                                OFFSET(get<T>, {0x818, 1, 0, 0})
	DMember(bool)                                      IsRewardCard                                                OFFSET(get<bool>, {0x819, 1, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x820, 16, 0, 0})
};

/// Class /Script/FortniteUI.FortItemPickerButton
/// Size: 0x0000 (0x000830 - 0x000830)
class UFortItemPickerButton : public UFortItemTileButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
};

/// Class /Script/FortniteUI.AthenaCustomizationPickerTileButton
/// Size: 0x0008 (0x000830 - 0x000838)
class UAthenaCustomizationPickerTileButton : public UFortItemPickerButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2104;

public:
};

/// Class /Script/FortniteUI.AthenaCustomizationScreenBase
/// Size: 0x0050 (0x0003F0 - 0x000440)
class UAthenaCustomizationScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(UAthenaCustomizationPicker*)               SelectionPicker                                             OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UFortItemView*)                            ItemViewObject                                              OFFSET(get<T>, {0x400, 8, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewZoomOutInputAction                                  OFFSET(getStruct<T>, {0x408, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewZoomInInputAction                                   OFFSET(getStruct<T>, {0x418, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewRotateInputAction                                   OFFSET(getStruct<T>, {0x428, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaCustomizationScreenBase.ShiftItemsVariantOption
	// void ShiftItemsVariantOption(UAthenaCosmeticAccountItem* Item, int32_t VariantChannelIndex);                             // [0x2b5a750] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaCustomizationScreenBase.OnVaultItemsViewed
	// void OnVaultItemsViewed(TArray<UFortItem*>& Items);                                                                      // [0x2b59f20] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.AthenaCustomizationScreenBase.GetWidgetForFramingViewedItem
	// UWidget* GetWidgetForFramingViewedItem();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaCustomizationScreenBase.GetFavoriteItemForCategory
	// UFortItem* GetFavoriteItemForCategory(EAthenaCustomizationCategory CustomizationType, int32_t SubslotIndex);             // [0x2b58df0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaCustomizationSlotSelectorButton
/// Size: 0x0020 (0x000800 - 0x000820)
class UAthenaCustomizationSlotSelectorButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:
	CMember(EAthenaCustomizationCategory)              CustomizationType                                           OFFSET(get<T>, {0x800, 1, 0, 0})
	DMember(int32_t)                                   SubslotIndex                                                OFFSET(get<int32_t>, {0x804, 4, 0, 0})
	CMember(UFortMultiSizeItemCard*)                   ItemWidget                                                  OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaCustomizationSlotSelectorButton.SetCustomizationType
	// void SetCustomizationType(EAthenaCustomizationCategory NewType, int32_t InSubslotIndex);                                 // [0x2b5a1e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.BacchusHUDElement
/// Size: 0x0048 (0x000238 - 0x000280)
class UBacchusHUDElement : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	DMember(bool)                                      bIsInLayoutMode                                             OFFSET(get<bool>, {0x240, 1, 0, 0})
	SMember(FGameplayTag)                              VisualType                                                  OFFSET(getStruct<T>, {0x248, 8, 0, 0})
	SMember(FText)                                     WidgetName                                                  OFFSET(getStruct<T>, {0x250, 24, 0, 0})
	DMember(bool)                                      bAlwaysShow                                                 OFFSET(get<bool>, {0x268, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnInBuildMode                                               OFFSET(get<T>, {0x269, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnInCombatMode                                              OFFSET(get<T>, {0x26A, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnInEditMode                                                OFFSET(get<T>, {0x26B, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      IsFreeFalling                                               OFFSET(get<T>, {0x26C, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      IsGliding                                                   OFFSET(get<T>, {0x26D, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      CanOpenChute                                                OFFSET(get<T>, {0x26E, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      InLockedBus                                                 OFFSET(get<T>, {0x26F, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      InUnlockedBus                                               OFFSET(get<T>, {0x270, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnTargeting                                                 OFFSET(get<T>, {0x271, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnUsingScopeTargeting                                       OFFSET(get<T>, {0x272, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnCanTarget                                                 OFFSET(get<T>, {0x273, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnCanUseScopeTargeting                                      OFFSET(get<T>, {0x274, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnCrouching                                                 OFFSET(get<T>, {0x275, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnCanUseSecondaryAbility                                    OFFSET(get<T>, {0x276, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnDBNO                                                      OFFSET(get<T>, {0x277, 1, 0, 0})
	CMember(EBacchusHUDStateType)                      OnControllingRCPawn                                         OFFSET(get<T>, {0x278, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.BacchusHUDElement.OnHUDStateUpdate
	// void OnHUDStateUpdate(FFortHUDState& NewState);                                                                          // [0x2b69b60] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.BacchusHUDElement.BP_GetMobileVisualType
	// FGameplayTag BP_GetMobileVisualType();                                                                                   // [0x2b68bc0] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/FortniteUI.AthenaEquippedItemBase
/// Size: 0x0018 (0x000280 - 0x000298)
class UAthenaEquippedItemBase : public UBacchusHUDElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(EEquippedWeaponDisplay)                    CurrentMode                                                 OFFSET(get<T>, {0x280, 1, 0, 0})
	CMember(UAthenaPlayerViewModel*)                   VM                                                          OFFSET(get<T>, {0x288, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaEquippedItemBase.WeaponTypeChanged
	// void WeaponTypeChanged(EEquippedWeaponDisplay Mode);                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.UtilityItemTypeChanged
	// void UtilityItemTypeChanged(AFortWeapon* Weapon, UFortWeaponItemDefinition* Item);                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.UtilityItemCountChanged
	// void UtilityItemCountChanged(int32_t Remaining);                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.SetViewModel
	// void SetViewModel(UAthenaPlayerViewModel* ViewModel);                                                                    // [0x2b5a650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.ResourceTypeChanged
	// void ResourceTypeChanged(UFortResourceItemDefinition* Item, int32_t ResourceCount);                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.ResourceCountChanged
	// void ResourceCountChanged(int32_t ResourceCount);                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.OnWorldItemsChanged
	// void OnWorldItemsChanged();                                                                                              // [0x2b5a090] Final|Native|Protected 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.OnWeaponChanged
	// void OnWeaponChanged(AFortWeapon* NewWeapon, AFortWeapon* PrevWeapon);                                                   // [0x2b59fd0] Final|Native|Protected 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.OnPawnChanged
	// void OnPawnChanged();                                                                                                    // [0x2b59f00] Final|Native|Protected 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.OnLocalAmmoChanged
	// void OnLocalAmmoChanged(int32_t LocalCount, int32_t LocalRemaining);                                                     // [0x2b59e40] Final|Native|Protected 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.OnBuildingMaterialChanged
	// void OnBuildingMaterialChanged();                                                                                        // [0x2b59f00] Final|Native|Protected 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.HasAmmoChanged
	// void HasAmmoChanged(bool bHasAmmo);                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.AmmoTypeChanged
	// void AmmoTypeChanged(AFortWeaponRanged* RangedWeapon, UFortWorldItemDefinition* Item);                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaEquippedItemBase.AmmoChanged
	// void AmmoChanged(int32_t MagazineAmmoCount, int32_t BackupAmmoCount, int32_t TotalRemaining);                            // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaEventGamesBase
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class UAthenaEventGamesBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
};

/// Class /Script/FortniteUI.AthenaGameOverScreenBase
/// Size: 0x0010 (0x0003F0 - 0x000400)
class UAthenaGameOverScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaGameOverScreenBase.RequestRefreshInput
	// void RequestRefreshInput();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaGameOverScreenBase.GoToBoss
	// void GoToBoss();                                                                                                         // [0x2b59270] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaGameOverScreenBase.CanShowGoToBoss
	// bool CanShowGoToBoss();                                                                                                  // [0x2b585b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaGamePhaseWidgetBase
/// Size: 0x0020 (0x000238 - 0x000258)
class UAthenaGamePhaseWidgetBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(UMaterialInterface*)                       StormComingFontMaterial                                     OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(float)                                     StormComingWarningTime                                      OFFSET(get<float>, {0x240, 4, 0, 0})
	CMember(UTextBlock*)                               TimeText                                                    OFFSET(get<T>, {0x248, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaGamePhaseWidgetBase.OnGamePhaseStepChanged
	// void OnGamePhaseStepChanged(EAthenaGamePhaseStep GamePhaseStep);                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaGamePhaseWidgetBase.HandleGamePhaseStepChanged
	// void HandleGamePhaseStepChanged(EAthenaGamePhaseStep GamePhaseStep);                                                     // [0x2b59350] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortUIStateWidget_NUI
/// Size: 0x0020 (0x0003C0 - 0x0003E0)
class UFortUIStateWidget_NUI : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(TArray<FContentPushState>)                 StackStates                                                 OFFSET(get<T>, {0x3C8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.SetFrontEndVisibility
	// void SetFrontEndVisibility(bool bHideHeader, bool bHideFooter, bool bHideChatWidget);                                    // [0x2c06860] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.RequestOpenSocialMenu
	// void RequestOpenSocialMenu();                                                                                            // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.PushContentWidgetInternal
	// void PushContentWidgetInternal(UWidget* Widget, FContentPushState State);                                                // [0x2c06570] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.PushContentWidgetAdvanced
	// void PushContentWidgetAdvanced(UWidget* Widget, bool bHideHeader, bool bHideFooter, bool bHideChatWidget);               // [0x2c06410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.PushContentWidget
	// void PushContentWidget(UWidget* Widget);                                                                                 // [0x2c06390] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.PopContentWidgetInternal
	// UWidget* PopContentWidgetInternal(FContentPushState State);                                                              // [0x2c062e0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.PopContentWidget
	// UWidget* PopContentWidget();                                                                                             // [0x2c062b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.PopAllContentWidgets
	// void PopAllContentWidgets();                                                                                             // [0x2c06290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.OnFrontEndVisibilityUpdated
	// void OnFrontEndVisibilityUpdated(bool bHideHeader, bool bHideFooter, bool bHideChatWidget);                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.OnExitState
	// void OnExitState(EFortUIState NextUIState);                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_NUI.OnEnterState
	// void OnEnterState(EFortUIState PreviousUIState);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaHUDBase
/// Size: 0x0000 (0x0003E0 - 0x0003E0)
class UAthenaHUDBase : public UFortUIStateWidget_NUI
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaHUDBase.ViewModelChanged
	// void ViewModelChanged(UAthenaPlayerViewModel* ViewModel);                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaHUDBase.SetFullScreenMapVisibility
	// void SetFullScreenMapVisibility(bool bIsVisible);                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaHUDBase.OnPlaylistExtensionWidgetCreated
	// void OnPlaylistExtensionWidgetCreated(EPlaylistUIExtensionSlot ExtensionSlot, UUserWidget* Widget);                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaHUDBase.OnHUDScaleChanged
	// void OnHUDScaleChanged(float HUDScale);                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaHUDContext
/// Size: 0x01C8 (0x000028 - 0x0001F0)
class UAthenaHUDContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(UMulticastDelegate)                        OnLocalPlayerWon                                            OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalTeamWon                                              OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerKilledPlayer                                   OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerDBNOStateChanged                               OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnUIGameplayCue                                             OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnViewTargetHealthChanged                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnViewTargetHealthMaxChanged                                OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnViewTargetShieldChanged                                   OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnViewTargetShieldMaxChanged                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnViewTargetDBNOChanged                                     OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerBeginSkydiving                                 OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSquadMembersChanged                                       OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSquadMemberKillsChanged                                   OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAthenaAutoFireChanged                                     OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnClientSettingsShowViewersChanged                          OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAthenaGamePhaseChanged                                    OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerFiredWeapon                                         OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLowPerformanceMode                                        OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPTTStateChange                                            OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCanPTTChange                                              OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(UMulticastDelegate)                        ShowMobilePickerDelegate                                    OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlaylistUIExtensionChanged                                OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInventoryItemSelected                                     OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInventorySwapStarted                                      OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInventorySwapComplete                                     OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(TWeakObjectPtr<UWidget*>)                  MoveButtonWidgetPtr                                         OFFSET(get<T>, {0x1C0, 8, 0, 0})
	DMember(bool)                                      bMoveButtonMode                                             OFFSET(get<bool>, {0x1C8, 1, 0, 0})
	DMember(bool)                                      bPendingAttachToHUD                                         OFFSET(get<bool>, {0x1C9, 1, 0, 0})
	CMember(UFortGameUIExtenderAthena*)                PlaylistUIExtender                                          OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                LastSelectedInventoryItem                                   OFFSET(get<T>, {0x1D8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaHUDContext.UseTapToShoot
	// bool UseTapToShoot();                                                                                                    // [0x2b5ad60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.UseOrRleoadFromHUDStop
	// void UseOrRleoadFromHUDStop();                                                                                           // [0x2b5ad40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.UseOrRleoadFromHUDStart
	// void UseOrRleoadFromHUDStart();                                                                                          // [0x2b5ad20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.UpdateSelectedWidgetMoveOffsetVector
	// void UpdateSelectedWidgetMoveOffsetVector(FVector2D& VectorOffset, float fMoveScale);                                    // [0x2b5ac50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.TakeMovementInputFromHUD
	// void TakeMovementInputFromHUD(FVector MoveVector, bool bTrySprint);                                                      // [0x2b5ab70] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.TakeLookInputFromHUD
	// void TakeLookInputFromHUD(FRotator LookRotator);                                                                         // [0x2b5aae0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.TakeItemSelectionInputFromHUD
	// void TakeItemSelectionInputFromHUD(int32_t SlotIdx, bool bReloadOrUseIfAlreadySelected);                                 // [0x2b5aa20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.StopTargettingFromHUD
	// void StopTargettingFromHUD();                                                                                            // [0x2b5aa00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.StartOrFinishSwap
	// void StartOrFinishSwap(int32_t SlotIndex);                                                                               // [0x2b5a980] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.ShowMobilePicker
	// void ShowMobilePicker();                                                                                                 // [0x2b5a840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.SetTargetingToggleable
	// void SetTargetingToggleable(bool bNewValue);                                                                             // [0x2b5a5c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.SetSelectWidgetToMoveMode
	// void SetSelectWidgetToMoveMode(bool bSet);                                                                               // [0x2b5a4b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.SetSelectedInventoryItem
	// void SetSelectedInventoryItem(UFortItem* Item);                                                                          // [0x2b5a540] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.SetResourceMaterial
	// void SetResourceMaterial(TEnumAsByte<EFortResourceType> NewMaterial);                                                    // [0x2b5a430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.SetPTTState
	// void SetPTTState(EPTTState NewPushToTalkState);                                                                          // [0x2b5a3b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.SetLockOnStickCoords
	// void SetLockOnStickCoords(FVector2D& LockOnCoords);                                                                      // [0x2b5a320] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.SetAutoFireFromReticleMode
	// bool SetAutoFireFromReticleMode(bool bAutoFireOn);                                                                       // [0x2b5a150] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.SelectWidgetToMove
	// void SelectWidgetToMove(UWidget* Widget);                                                                                // [0x2b5a0d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.ReloadFromHUD
	// void ReloadFromHUD();                                                                                                    // [0x2b5a0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.OnHitMapLocation
	// void OnHitMapLocation(FVector2D MapCoords);                                                                              // [0x2b59dc0] Final|Native|Public|HasDefaults|BlueprintCallable|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.OnClientSettingUpdatedShowViewers
	// void OnClientSettingUpdatedShowViewers();                                                                                // [0x2b59d90] Final|Native|Public  
	// Function /Script/FortniteUI.AthenaHUDContext.MapMoveFromHUD
	// void MapMoveFromHUD(FVector2D Delta);                                                                                    // [0x2b59cd0] Final|Native|Public|HasDefaults|BlueprintCallable|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsUsingScope
	// bool IsUsingScope();                                                                                                     // [0x2b59ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsUsingAutoFire
	// bool IsUsingAutoFire();                                                                                                  // [0x2b59c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsTargeting
	// bool IsTargeting();                                                                                                      // [0x2b59b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsSwapping
	// bool IsSwapping();                                                                                                       // [0x2b59b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsShowViewerCountEnabled
	// bool IsShowViewerCountEnabled();                                                                                         // [0x2b59b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsMovingSelectedWidget
	// bool IsMovingSelectedWidget();                                                                                           // [0x2b59aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsInSelectWidgetToMoveMode
	// bool IsInSelectWidgetToMoveMode();                                                                                       // [0x2b59a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsInBuildMode
	// bool IsInBuildMode();                                                                                                    // [0x2b59a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsCurrentWeaponFiring
	// bool IsCurrentWeaponFiring();                                                                                            // [0x2b59a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsCrouching
	// bool IsCrouching();                                                                                                      // [0x2b599e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsAutoRunEnabled
	// bool IsAutoRunEnabled();                                                                                                 // [0x2b59980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.IsAutoFireFromReticleModeEnabled
	// bool IsAutoFireFromReticleModeEnabled();                                                                                 // [0x2b59950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.HasWifi
	// bool HasWifi();                                                                                                          // [0x2b73870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.HasLockOnTarget
	// bool HasLockOnTarget();                                                                                                  // [0x2b597a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.HasAutofireTarget
	// bool HasAutofireTarget();                                                                                                // [0x2b59770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.HandleUIGameplayCue
	// void HandleUIGameplayCue(FName CueName, TEnumAsByte<EGameplayCueEvent> EventType, FGameplayCueParameters& Parameters);   // [0x2b59580] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.AthenaHUDContext.HandleLocalPlayerDBNOStateChanged
	// void HandleLocalPlayerDBNOStateChanged(bool bIsDBNO);                                                                    // [0x2b593d0] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaHUDContext.HandleLocalPlayerBeginSkydiving
	// void HandleLocalPlayerBeginSkydiving();                                                                                  // [0x1257830] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaHUDContext.HandleGamePhaseChange
	// void HandleGamePhaseChange(EAthenaGamePhaseStep NewGamePhase);                                                           // [0x2b592d0] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaHUDContext.GetSelectedInventoryItem
	// UFortItem* GetSelectedInventoryItem();                                                                                   // [0x2b59240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.GetPTTState
	// EPTTState GetPTTState();                                                                                                 // [0x2b59050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.GetPlaylistUIExtender
	// UFortGameUIExtenderAthena* GetPlaylistUIExtender();                                                                      // [0x2b59080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.GetLocalTime
	// void GetLocalTime(int32_t& Hours, int32_t& Minutes);                                                                     // [0x2b58f10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.GetInLowPerformanceMode
	// bool GetInLowPerformanceMode();                                                                                          // [0x2b58ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.GetCanPTT
	// bool GetCanPTT();                                                                                                        // [0x2b58b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.GetBatteryLevel
	// float GetBatteryLevel();                                                                                                 // [0x2b58a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.FireFromHUDStop
	// void FireFromHUDStop();                                                                                                  // [0x2b58850] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.FireFromHUDStart
	// void FireFromHUDStart();                                                                                                 // [0x2b58830] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.ExecuteActionNameFromHUDWithEventType
	// void ExecuteActionNameFromHUDWithEventType(FName ActionName, TEnumAsByte<EInputEvent> KeyEvent);                         // [0x2b58770] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.ExecuteActionNameFromHUD
	// void ExecuteActionNameFromHUD(FName ActionName);                                                                         // [0x2b586f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.EndUseFromHUD
	// void EndUseFromHUD();                                                                                                    // [0x2b586d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.EnableAutoRunFromHUD
	// void EnableAutoRunFromHUD(bool bEnable);                                                                                 // [0x2b58620] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.CycleQuickbar
	// void CycleQuickbar();                                                                                                    // [0x2b58600] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.CanCurrentWeaponAutoFireFromReticle
	// bool CanCurrentWeaponAutoFireFromReticle();                                                                              // [0x2b58580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.CancelSwap
	// void CancelSwap();                                                                                                       // [0x2b585e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDContext.CanAutoRun
	// bool CanAutoRun();                                                                                                       // [0x2b58550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaHUDContext.BeginUseFromHUD
	// void BeginUseFromHUD();                                                                                                  // [0x2b584b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaHUDGamePhaseChangingBase
/// Size: 0x0008 (0x000238 - 0x000240)
class UAthenaHUDGamePhaseChangingBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaHUDGamePhaseChangingBase.UpdateMessaging
	// void UpdateMessaging(EAthenaGamePhaseStep Step, FText& MESSAGE, FText& TimeText);                                        // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaHUDGamePhaseChangingBase.HandleGamePhaseStepChanged
	// void HandleGamePhaseStepChanged(EAthenaGamePhaseStep Step);                                                              // [0x2b5f280] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaHUDGamePhaseChangingBase.GamePhaseStepChanged
	// void GamePhaseStepChanged(EAthenaGamePhaseStep Step);                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaHUDInputWidget
/// Size: 0x0000 (0x000210 - 0x000210)
class UAthenaHUDInputWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FortniteUI.AthenaHUDPlayerActionAlertBase
/// Size: 0x0020 (0x000238 - 0x000258)
class UAthenaHUDPlayerActionAlertBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(AFortPlayerPawnAthena*)                    LastPlayerPawn                                              OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(bool)                                      bReadyForNextAlert                                          OFFSET(get<bool>, {0x240, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaHUDPlayerActionAlertBase.RequestNextAlert
	// void RequestNextAlert();                                                                                                 // [0x2b5f8a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaHUDPlayerActionAlertBase.AlertPlayer
	// void AlertPlayer(EAthenaPlayerActionAlert Alert, FText& DetailText);                                                     // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaIndicatorLayerBase
/// Size: 0x0020 (0x000208 - 0x000228)
class UAthenaIndicatorLayerBase : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UAthenaPlayerViewModel*)                   PlayerVM                                                    OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(USlateVectorArtData*)                      TeamIndicatorMesh                                           OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaIndicatorLayerBase.SquadIndicatorsChanged
	// void SquadIndicatorsChanged(TArray<AFortPlayerStateAthena*>& PlayerStates);                                              // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaIndicatorLayerBase.SetDataSource
	// void SetDataSource(UAthenaPlayerViewModel* PlayerViewModel);                                                             // [0x2b5f8c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaIndicatorLayerBase.GetSquadMembers
	// TArray<AFortPlayerStateAthena*> GetSquadMembers();                                                                       // [0x2b5f070] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaIndicatorLayerBase.GetPlayerViewModel
	// UAthenaPlayerViewModel* GetPlayerViewModel();                                                                            // [0x2b5f040] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.AthenaInventoryEquipButtonBase
/// Size: 0x0018 (0x000800 - 0x000818)
class UAthenaInventoryEquipButtonBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	CMember(UFortMultiSizeItemCard*)                   ItemWidget                                                  OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(UWidget*)                                  EmptyImage                                                  OFFSET(get<T>, {0x808, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x810, 4, 0, 0})
};

/// Class /Script/FortniteUI.AthenaInventoryFortItemTileButtonBase
/// Size: 0x0000 (0x000830 - 0x000830)
class UAthenaInventoryFortItemTileButtonBase : public UFortItemTileButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
};

/// Class /Script/FortniteUI.AthenaInventoryPanelBase
/// Size: 0x0050 (0x0003F0 - 0x000440)
class UAthenaInventoryPanelBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(UFortItemTileView*)                        ResourceView                                                OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UFortItemTileView*)                        AmmoView                                                    OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UCommonButtonGroup*)                       EquipButtonGroup                                            OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.RequestEquip
	// void RequestEquip(UFortItem* Item);                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.HandleTileViewItemSelected
	// void HandleTileViewItemSelected(UObject* Item, bool bIsSelected);                                                        // [0x2b5f600] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.HandleQuickBarChangedBP
	// void HandleQuickBarChangedBP(EFortQuickBars QuickBarType);                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.HandleInventoryItemSelected
	// void HandleInventoryItemSelected(UFortItem* Item);                                                                       // [0x2b5f480] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.HandleInventoryItemHovered
	// void HandleInventoryItemHovered(UObject* Item);                                                                          // [0x2b5f400] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.HandleInventoryItemDoubleClicked
	// void HandleInventoryItemDoubleClicked(UObject* Item);                                                                    // [0x2b5f380] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.HandleInventoryItemClicked
	// void HandleInventoryItemClicked(UObject* Item);                                                                          // [0x2b5f300] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.HandleCursorModeChangedBP
	// void HandleCursorModeChangedBP(bool bCursorModeEnabled, FName ActionName, UUserWidget* CursorModeContentWidget);         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.HandleCursorModeChanged
	// void HandleCursorModeChanged(bool bCursorModeEnabled, FName ActionName, UUserWidget* CursorModeContentWidget);           // [0x2b5f180] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.GetTileViewForItem
	// UFortItemTileView* GetTileViewForItem(UFortItem* Item);                                                                  // [0x2b5f0f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.FocusTileView
	// void FocusTileView(UFortItemTileView* TileView);                                                                         // [0x2b5ef60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.AttemptToUpdateFocus
	// void AttemptToUpdateFocus();                                                                                             // [0x2b5ef20] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaInventoryPanelBase.AdvanceSelection
	// void AdvanceSelection(UFortItemTileView* TileView);                                                                      // [0x2b5eea0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaJetpackFuelGauge
/// Size: 0x0010 (0x000210 - 0x000220)
class UAthenaJetpackFuelGauge : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(UImage*)                                   FuelGaugeProgressImage                                      OFFSET(get<T>, {0x210, 8, 0, 0})
};

/// Class /Script/FortniteUI.AthenaLeaderboardScreenBase
/// Size: 0x0100 (0x0003F0 - 0x0004F0)
class UAthenaLeaderboardScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	CMember(UFortTabListWidgetBase*)                   LeaderboardTabList                                          OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UCommonRotator*)                           MatchRotator                                                OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UCommonRotator*)                           LeaderboardTypeRotator                                      OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UCommonTextBlock*)                         ResetTimeText                                               OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UCommonTextBlock*)                         RefreshTimeText                                             OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonBorder*)                            BorderLocalUserFocus                                        OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(UDataTable*)                               LeaderboardDisplayData                                      OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(TMap<FName, UCommonButton*>)               ActiveTabButtons                                            OFFSET(get<T>, {0x428, 80, 0, 0})
	CMember(TArray<UFortLeaderboardRowProxyInstance*>) RowProxies                                                  OFFSET(get<T>, {0x478, 16, 0, 0})
	CMember(TArray<UFortLeaderboardRowProxyInstance*>) RowProxiesFreeList                                          OFFSET(get<T>, {0x488, 16, 0, 0})
	CMember(UFortLeaderboardRowProxyInstance*)         LocalUserRowProxy                                           OFFSET(get<T>, {0x498, 8, 0, 0})
	SMember(FLeaderboardFilter)                        CurrentLeaderboardFilter                                    OFFSET(getStruct<T>, {0x4A0, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.OnUpdateTabButtonText
	// void OnUpdateTabButtonText(UCommonButton* Button, FAthenaPlaylistLeaderboardData& PlaylistTabData);                      // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.OnUpdateListHeader
	// void OnUpdateListHeader(FAthenaPlaylistLeaderboardData& PlaylistTabData);                                                // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.OnUpdateLeaderboardListUI
	// void OnUpdateLeaderboardListUI(bool bWasSuccessful, UFortLeaderboardRowProxyInstance* LocalUserRow, FText& QueryErrorStr); // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.OnQueryStarted
	// void OnQueryStarted();                                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.OnQueryFinished
	// void OnQueryFinished();                                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.OnMatchTypeChanged
	// void OnMatchTypeChanged(int32_t MatchTypeIndex);                                                                         // [0x2b5f800] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.OnFriendsFilterChanged
	// void OnFriendsFilterChanged(int32_t FriendsFilterIndex);                                                                 // [0x2b5f780] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.OnActiveLeaderboardTabChanged
	// void OnActiveLeaderboardTabChanged(int32_t ActiveWidgetIndex);                                                           // [0x2b5f700] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaLeaderboardScreenBase.CanShowFriendsOnlyLeaderboard
	// bool CanShowFriendsOnlyLeaderboard();                                                                                    // [0x2b73870] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortActorIndicatorWidget
/// Size: 0x0038 (0x000238 - 0x000270)
class UFortActorIndicatorWidget : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(AActor*)                                   IndicatedActor                                              OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UPrimitiveComponent*)                      IndicatedActorComponent                                     OFFSET(get<T>, {0x248, 8, 0, 0})
	SMember(FVector)                                   RelativeLocation                                            OFFSET(getStruct<T>, {0x250, 12, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(bool)                                      bClampOnScreen                                              OFFSET(get<bool>, {0x260, 1, 0, 0})
	DMember(bool)                                      bShowClampToScreenArrow                                     OFFSET(get<bool>, {0x261, 1, 0, 0})
	DMember(bool)                                      bUseScreenSpacePosition                                     OFFSET(get<bool>, {0x262, 1, 0, 0})
	SMember(FVector2D)                                 ScreenSpaceRelativeOffset                                   OFFSET(getStruct<T>, {0x264, 8, 0, 0})
};

/// Class /Script/FortniteUI.AthenaLevelBarBase
/// Size: 0x0000 (0x000270 - 0x000270)
class UAthenaLevelBarBase : public UFortActorIndicatorWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/FortniteUI.AthenaLobbyBase
/// Size: 0x0070 (0x0003F0 - 0x000460)
class UAthenaLobbyBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(UOverlay*)                                 OverlayMain                                                 OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(UFriendCodeShareButtonBase*)               FriendCodeFrontEndShareButton                               OFFSET(get<T>, {0x458, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaLobbyBase.ShowHighlightSummary
	// void ShowHighlightSummary();                                                                                             // [0x2b5fac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaLobbyBase.ShowDailyNews
	// void ShowDailyNews();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.ShowAthenaStoreToast
	// void ShowAthenaStoreToast();                                                                                             // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.ShouldShowHeadlessReminder
	// void ShouldShowHeadlessReminder(bool bShouldShow);                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.OnUpdateSocialImportButtonText
	// void OnUpdateSocialImportButtonText(FText& NewText);                                                                     // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.OnPlayerClicked
	// void OnPlayerClicked(int32_t PlayerIndex);                                                                               // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.OnNavigationUp
	// void OnNavigationUp();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.OnNavigationRight
	// void OnNavigationRight();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.OnNavigationLeft
	// void OnNavigationLeft();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.OnEndCursorOverPlayer
	// void OnEndCursorOverPlayer(int32_t PlayerIndex);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaLobbyBase.OnBeginCursorOverPlayer
	// void OnBeginCursorOverPlayer(int32_t PlayerIndex);                                                                       // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortViewModel
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortViewModel : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteUI.FortPlayerViewModel
/// Size: 0x02C8 (0x000028 - 0x0002F0)
class UFortPlayerViewModel : public UFortViewModel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
};

/// Class /Script/FortniteUI.AthenaPlayerViewModel
/// Size: 0x0160 (0x0002F0 - 0x000450)
class UAthenaPlayerViewModel : public UFortPlayerViewModel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
};

/// Class /Script/FortniteUI.AthenaLocalPlayerViewModel
/// Size: 0x0010 (0x000450 - 0x000460)
class UAthenaLocalPlayerViewModel : public UAthenaPlayerViewModel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(AFortPlayerControllerAthena*)              PlayerController                                            OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(APlayerState*)                             PlayerState                                                 OFFSET(get<T>, {0x450, 8, 0, 0})
};

/// Class /Script/FortniteUI.AthenaLootStoreScreenBase
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class UAthenaLootStoreScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
};

/// Class /Script/FortniteUI.AthenaMapLayer
/// Size: 0x0018 (0x000100 - 0x000118)
class UAthenaMapLayer : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(ULocalPlayer*)                             LocalPlayer                                                 OFFSET(get<T>, {0x110, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaMapLayer.SetLocalPlayer
	// void SetLocalPlayer(ULocalPlayer* LocalPlayer);                                                                          // [0x2b5f9c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaMapLayer.FlashPlayerIcon
	// void FlashPlayerIcon();                                                                                                  // [0x2b5ef40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaMatchReadyDesktopPopup
/// Size: 0x0078 (0x000208 - 0x000280)
class UAthenaMatchReadyDesktopPopup : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaMatchReadyDesktopPopup.UserDismissedDialog
	// void UserDismissedDialog(bool bBringToFront);                                                                            // [0x2b5fae0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaPartyBar
/// Size: 0x0018 (0x000210 - 0x000228)
class UAthenaPartyBar : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UMulticastDelegate)                        OnHelperTextChanged                                         OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UCommonDynamicEntryBox*)                   EntryBox_PartyMembers                                       OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/FortniteUI.AthenaPartyMemberBase
/// Size: 0x0160 (0x000800 - 0x000960)
class UAthenaPartyMemberBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2400;

public:
	CMember(UTexture2D*)                               MutedBrush                                                  OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(UTexture2D*)                               TalkingBrush                                                OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(UTexture2D*)                               NotTalkingBrush                                             OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(AFortPlayerStateAthena*)                   AthenaPS                                                    OFFSET(get<T>, {0x820, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          MemberUniqueId                                              OFFSET(getStruct<T>, {0x830, 40, 0, 0})
	SMember(FUniqueNetIdRepl)                          ConsoleUniqueId                                             OFFSET(getStruct<T>, {0x858, 40, 0, 0})
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x880, 16, 0, 0})
	CMember(UImage*)                                   Image_LeaderIcon                                            OFFSET(get<T>, {0x910, 8, 0, 0})
	CMember(UImage*)                                   Image_Speaker                                               OFFSET(get<T>, {0x918, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_PlayerName                                             OFFSET(get<T>, {0x920, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_KillCount                                              OFFSET(get<T>, {0x928, 8, 0, 0})
	CMember(UVerticalBox*)                             VBox_PartyManagement                                        OFFSET(get<T>, {0x930, 8, 0, 0})
	CMember(UCommonButton*)                            Button_PromoteToLeader                                      OFFSET(get<T>, {0x938, 8, 0, 0})
	CMember(UCommonButton*)                            Button_RemoveFromParty                                      OFFSET(get<T>, {0x940, 8, 0, 0})
	CMember(UHorizontalBox*)                           HBox_KillCount                                              OFFSET(get<T>, {0x948, 8, 0, 0})
	CMember(UWidgetSwitcher*)                          Switcher_MemberState                                        OFFSET(get<T>, {0x950, 8, 0, 0})
	CMember(UImage*)                                   Image_Platform                                              OFFSET(get<T>, {0x958, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaPartyMemberBase.SetBannerIconAndColor
	// void SetBannerIconAndColor(FString IconId, FString ColorId);                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPartyMemberBase.OpenPartyFinder
	// void OpenPartyFinder();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPartyMemberBase.HandleRemoveFromPartyClicked
	// void HandleRemoveFromPartyClicked(UCommonButton* ClickedButton);                                                         // [0x2b5f580] Final|Native|Protected 
	// Function /Script/FortniteUI.AthenaPartyMemberBase.HandlePromoteClicked
	// void HandlePromoteClicked(UCommonButton* ClickedButton);                                                                 // [0x2b5f500] Final|Native|Protected 
};

/// Class /Script/FortniteUI.AthenaPickingLayer
/// Size: 0x0000 (0x000210 - 0x000210)
class UAthenaPickingLayer : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FortniteUI.AthenaPlayerHitPointBarBase
/// Size: 0x0020 (0x000208 - 0x000228)
class UAthenaPlayerHitPointBarBase : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UAthenaPlayerViewModel*)                   PlayerVM                                                    OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(EHealthBarType)                            BarType                                                     OFFSET(get<T>, {0x210, 1, 0, 0})
	DMember(float)                                     ValueCurrent                                                OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     ValueLast                                                   OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     ValueMax                                                    OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     LastToCurrentUpdateRate                                     OFFSET(get<float>, {0x220, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaPlayerHitPointBarBase.SetDataSource
	// void SetDataSource(UAthenaPlayerViewModel* PlayerViewModel);                                                             // [0x2b5f940] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaPlayerHitPointBarBase.OnValueChangedWithReason
	// void OnValueChangedWithReason(float Value, EFortHitPointModificationReason Reason);                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerHitPointBarBase.OnMaxValueChanged
	// void OnMaxValueChanged(float Value);                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerHitPointBarBase.OnDeltaChanged
	// void OnDeltaChanged();                                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerHitPointBarBase.OnDBNOStateChanged
	// void OnDBNOStateChanged(bool IsDBNO);                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerHitPointBarBase.GetLastValuePercentage
	// float GetLastValuePercentage();                                                                                          // [0x2b5f010] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaPlayerHitPointBarBase.GetCurrentValuePercentage
	// float GetCurrentValuePercentage();                                                                                       // [0x2b5efe0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.AthenaPlayerIndicatorBase
/// Size: 0x0008 (0x000270 - 0x000278)
class UAthenaPlayerIndicatorBase : public UFortActorIndicatorWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(AFortPlayerStateAthena*)                   PlayerState                                                 OFFSET(get<T>, {0x270, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaPlayerIndicatorBase.TalkingStateChanged
	// void TalkingStateChanged(bool bTalking);                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerIndicatorBase.ShowCallout
	// void ShowCallout(ETeamMemberState Callout);                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerIndicatorBase.RefreshCurrentPawn
	// void RefreshCurrentPawn();                                                                                               // [0x2b5f880] Final|Native|Protected 
	// Function /Script/FortniteUI.AthenaPlayerIndicatorBase.PlayerNameChanged
	// void PlayerNameChanged(FString PlayerName);                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerIndicatorBase.MapIndicatorPositionChanged
	// void MapIndicatorPositionChanged();                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerIndicatorBase.DBNOStateChanged
	// void DBNOStateChanged(bool bDBNO);                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerIndicatorBase.BeingRevivedStateChanged
	// void BeingRevivedStateChanged(bool bReviving);                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaPlayerInfoBase
/// Size: 0x0010 (0x000238 - 0x000248)
class UAthenaPlayerInfoBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(AFortPlayerStateAthena*)                   PlayerState                                                 OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(int32_t)                                   SquadMemberIndex                                            OFFSET(get<int32_t>, {0x240, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.TalkingStateChanged
	// void TalkingStateChanged(bool bTalking);                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.SetPlayerState
	// void SetPlayerState(AFortPlayerStateAthena* InPlayerState);                                                              // [0x2b5fa40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.PlayerPlatformChanged
	// void PlayerPlatformChanged(FString CurrentPlatform);                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.PlayerNameChanged
	// void PlayerNameChanged(FString PlayerName);                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.MutedStateChanged
	// void MutedStateChanged(bool Muted);                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.MapIndicatorPositionChanged
	// void MapIndicatorPositionChanged();                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.IsPlayerOnPC
	// bool IsPlayerOnPC();                                                                                                     // [0x2b5f6d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.HitPointsChanged
	// void HitPointsChanged(float HealthPercent, float ShieldPercent);                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.DisconnectedStateChanged
	// void DisconnectedStateChanged(bool Disconnected);                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.DeadStateChanged
	// void DeadStateChanged(bool DeadStateChanged);                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.DBNOStateChanged
	// void DBNOStateChanged(bool bDBNO);                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaPlayerInfoBase.BeingRevivedStateChanged
	// void BeingRevivedStateChanged(bool bReviving);                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaPlayerKillsBase
/// Size: 0x0008 (0x000238 - 0x000240)
class UAthenaPlayerKillsBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(UTextBlock*)                               KillsText                                                   OFFSET(get<T>, {0x238, 8, 0, 0})
};

/// Class /Script/FortniteUI.AthenaPlayersLeftBase
/// Size: 0x0018 (0x000238 - 0x000250)
class UAthenaPlayersLeftBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaPlayersLeftBase.SetPlayersLeftText
	// void SetPlayersLeftText(FText& PlayersText);                                                                             // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaPlayerVitalityBarBase
/// Size: 0x0008 (0x000208 - 0x000210)
class UAthenaPlayerVitalityBarBase : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(UAthenaPlayerViewModel*)                   PlayerVM                                                    OFFSET(get<T>, {0x208, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaPlayerVitalityBarBase.SetDataSource
	// void SetDataSource(UAthenaPlayerViewModel* PlayerViewModel);                                                             // [0x2b645c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaPostMatchScreenBase
/// Size: 0x0000 (0x000270 - 0x000270)
class UAthenaPostMatchScreenBase : public UFortActorIndicatorWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/FortniteUI.AthenaProfileStatBox
/// Size: 0x0028 (0x000148 - 0x000170)
class UAthenaProfileStatBox : public USizeBox
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(UMulticastDelegate)                        OnStatViewChanged                                           OFFSET(get<T>, {0x148, 16, 0, 0})
	DMember(bool)                                      bRespectParentStatView                                      OFFSET(get<bool>, {0x158, 1, 0, 0})
	CMember(UAthenaBaseStatView*)                      StatView                                                    OFFSET(get<T>, {0x160, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaProfileStatBox.SetStatView
	// void SetStatView(UAthenaBaseStatView* InStatView, bool RespectParentStatView);                                           // [0x2b646c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatBox.OnStatViewChanged__DelegateSignature
	// void OnStatViewChanged__DelegateSignature(UAthenaBaseStatView* StatView);                                                // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.AthenaProfileStatBox.GetStatStyle
	// FFortUIStatStyle GetStatStyle(FGameplayTag& InStat);                                                                     // [0x2b63cc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaProfileStatBox.GetBaseStatView
	// UAthenaBaseStatView* GetBaseStatView();                                                                                  // [0x2b637e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaBaseStatView
/// Size: 0x0000 (0x000028 - 0x000028)
class UAthenaBaseStatView : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaBaseStatView.GetStat
	// float GetStat(FGameplayTag& InStat);                                                                                     // [0x2b63c20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.AthenaWeaponStatView
/// Size: 0x0010 (0x000028 - 0x000038)
class UAthenaWeaponStatView : public UAthenaBaseStatView
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaWeaponStatView.GetWeaponDefinition
	// UFortWeaponItemDefinition* GetWeaponDefinition();                                                                        // [0x2b63f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.AthenaMatchStatView
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UAthenaMatchStatView : public UAthenaBaseStatView
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TArray<UAthenaWeaponStatView*>)            WeaponStatViews                                             OFFSET(get<T>, {0xC8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaMatchStatView.GetWeaponViews
	// TArray<UAthenaWeaponStatView*> GetWeaponViews();                                                                         // [0x2b63fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaMatchStatView.GetWeaponViewHighestStat
	// UAthenaWeaponStatView* GetWeaponViewHighestStat(FGameplayTag& InStat);                                                   // [0x2b63f30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaMatchStatView.GetSortedWeaponViews
	// TArray<UAthenaWeaponStatView*> GetSortedWeaponViews(FGameplayTag& InStat);                                               // [0x2b63b40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaMatchStatView.GetMatchID
	// FString GetMatchID();                                                                                                    // [0x2b63a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaMatchStatView.GetMatchEndTime
	// FDateTime GetMatchEndTime();                                                                                             // [0x2b63a10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.AthenaMatchSetStatView
/// Size: 0x0020 (0x0000D8 - 0x0000F8)
class UAthenaMatchSetStatView : public UAthenaMatchStatView
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(UAthenaSeasonStats*)                       OwningSeason                                                OFFSET(get<T>, {0xD8, 8, 0, 0})
	SMember(FName)                                     PlaylistId                                                  OFFSET(getStruct<T>, {0xE0, 8, 0, 0})
	CMember(TArray<UAthenaMatchStatView*>)             BestMatches                                                 OFFSET(get<T>, {0xE8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaMatchSetStatView.GetOwningSeason
	// UAthenaSeasonStats* GetOwningSeason();                                                                                   // [0x2b63a90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaMatchSetStatView.GetBestMatchViews
	// TArray<UAthenaMatchStatView*> GetBestMatchViews();                                                                       // [0x2b63810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.AthenaProfileStatContext
/// Size: 0x0018 (0x000028 - 0x000040)
class UAthenaProfileStatContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(UMulticastDelegate)                        OnStatsProfileLoaded                                        OFFSET(get<T>, {0x28, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaProfileStatContext.OnAthenaStatsProfileLoaded__DelegateSignature
	// void OnAthenaStatsProfileLoaded__DelegateSignature(UFortMcpProfileAthenaStats* StatProfile);                             // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.AthenaProfileStatContext.CreateMatchViews
	// TArray<UAthenaMatchStatView*> CreateMatchViews(TArray<FAthenaMatchStats>& InRecentMatches);                              // [0x2b63550] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatContext.CreateMatchStatView
	// UAthenaMatchSetStatView* CreateMatchStatView(UAthenaSeasonStats* StatSet, FName Bucket);                                 // [0x2b63490] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatContext.CreateCurrentMatchStatView
	// UAthenaMatchStatView* CreateCurrentMatchStatView();                                                                      // [0x2b63460] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaProfileStatListWidgetBase
/// Size: 0x0010 (0x000800 - 0x000810)
class UAthenaProfileStatListWidgetBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(UAthenaProfileStatBox*)                    ProfileStatBox                                              OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaProfileStatListWidgetBase.OnStatChanged
	// void OnStatChanged();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatListWidgetBase.HandleStatViewChanged
	// void HandleStatViewChanged(UAthenaBaseStatView* StatView);                                                               // [0x2b64050] Final|Native|Private 
};

/// Class /Script/FortniteUI.AthenaProfileStatsBase
/// Size: 0x0060 (0x0003C0 - 0x000420)
class UAthenaProfileStatsBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(UAthenaProfileStatBox*)                    ProfileStatBox                                              OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(TArray<UAthenaSeasonStats*>)               StatSets                                                    OFFSET(get<T>, {0x3C8, 16, 0, 0})
	CMember(UAthenaSeasonStats*)                       CurrentViewedStatSet                                        OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(UAthenaMatchStatView*)                     CurrentStatView                                             OFFSET(get<T>, {0x3E0, 8, 0, 0})
	SMember(FName)                                     CurrentPlaylist                                             OFFSET(getStruct<T>, {0x3E8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaProfileStatsBase.Setup
	// void Setup(FUniqueNetIdRepl& InUniqueId);                                                                                // [0x2b64860] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.PrevStatSet
	// void PrevStatSet();                                                                                                      // [0x2b64350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.OnStatSetChanged
	// void OnStatSetChanged();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.OnStartFetchingData
	// void OnStartFetchingData();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.OnProfileLoaded
	// void OnProfileLoaded(UFortMcpProfileAthenaStats* ProfileAthenaStats);                                                    // [0x2b641c0] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.OnNoData
	// void OnNoData();                                                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.OnDataRecieved
	// void OnDataRecieved();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.NumStatSets
	// int32_t NumStatSets();                                                                                                   // [0x2b64190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.NextStatSet
	// void NextStatSet();                                                                                                      // [0x2b64170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.NextPlaylist
	// void NextPlaylist();                                                                                                     // [0x2b64150] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.GetUniqueID
	// FUniqueNetIdRepl GetUniqueID();                                                                                          // [0x2b63da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.GetCurrentStatSet
	// UAthenaSeasonStats* GetCurrentStatSet();                                                                                 // [0x2b63910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaProfileStatsBase.GetCurrentPlaylistName
	// FText GetCurrentPlaylistName();                                                                                          // [0x2b63890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase
/// Size: 0x0040 (0x0003C0 - 0x000400)
class UAthenaProfileStatsRecentMatchesBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(TArray<UAthenaMatchStatView*>)             RecentMatches                                               OFFSET(get<T>, {0x3C0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase.Setup
	// void Setup(FUniqueNetIdRepl& InUniqueId);                                                                                // [0x2b64960] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase.OnStartFetchingData
	// void OnStartFetchingData();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase.OnRecentMatcheChanged
	// void OnRecentMatcheChanged();                                                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase.OnProfileLoaded
	// void OnProfileLoaded(UFortMcpProfileAthenaStats* ProfileAthenaStats);                                                    // [0x2b64240] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase.OnNoData
	// void OnNoData();                                                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase.OnDataRecieved
	// void OnDataRecieved();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase.GetUniqueID
	// FUniqueNetIdRepl GetUniqueID();                                                                                          // [0x2b63e50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaProfileStatsRecentMatchesBase.GetRecentMatches
	// TArray<UAthenaMatchStatView*> GetRecentMatches();                                                                        // [0x2b63ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.AthenaProfileStatWidgetBase
/// Size: 0x0010 (0x000210 - 0x000220)
class UAthenaProfileStatWidgetBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FGameplayTag)                              Stat                                                        OFFSET(getStruct<T>, {0x210, 8, 0, 0})
	CMember(UAthenaProfileStatBox*)                    ProfileStatBox                                              OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaProfileStatWidgetBase.SetStatView
	// void SetStatView(UAthenaBaseStatView* InStatView, bool RespectParentStatView);                                           // [0x2b64790] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatWidgetBase.SetAsStat
	// void SetAsStat(FGameplayTag& InStat);                                                                                    // [0x2b64530] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaProfileStatWidgetBase.OnStatChanged
	// void OnStatChanged();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaProfileStatWidgetBase.HandleStatViewChanged
	// void HandleStatViewChanged(UAthenaBaseStatView* StatView);                                                               // [0x2b640d0] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaProfileStatWidgetBase.CreateWeaponGroupData
	// TArray<FStatGroupData> CreateWeaponGroupData(int32_t MaxToReturn, bool bIncludeOtherCategory, bool bPercentages);        // [0x2b63670] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaRemotePlayerViewModel
/// Size: 0x0000 (0x000450 - 0x000450)
class UAthenaRemotePlayerViewModel : public UAthenaPlayerViewModel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
};

/// Class /Script/FortniteUI.AthenaReplayBrowserEntryWidget
/// Size: 0x0010 (0x000800 - 0x000810)
class UAthenaReplayBrowserEntryWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(UObject*)                                  ReplayBrowserEntryObject                                    OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaReplayBrowserEntryWidget.OnReplayBrowserEntryDataSet
	// void OnReplayBrowserEntryDataSet();                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserEntryWidget.GetDateTimeText
	// FText GetDateTimeText(FDateTime DateTime);                                                                               // [0x2b63940] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.AthenaReplayBrowserRowProxyInstance
/// Size: 0x0090 (0x000028 - 0x0000B8)
class UAthenaReplayBrowserRowProxyInstance : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FAthenaReplayBrowserRowData)               RowData                                                     OFFSET(getStruct<T>, {0x28, 144, 0, 0})
};

/// Class /Script/FortniteUI.AthenaReplayBrowserScreenBase
/// Size: 0x0030 (0x0003F0 - 0x000420)
class UAthenaReplayBrowserScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(TArray<UAthenaReplayBrowserRowProxyInstance*>) RowProxies                                              OFFSET(get<T>, {0x3F0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.ShowErrorDialog
	// void ShowErrorDialog(FText& Title, FText& MESSAGE);                                                                      // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.SaveAndRenameReplay
	// void SaveAndRenameReplay(UAthenaReplayBrowserRowProxyInstance* RowProxy, FString NewReplayName);                         // [0x2b64450] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.RenameReplay
	// void RenameReplay(UAthenaReplayBrowserRowProxyInstance* RowProxy, FString NewReplayName);                                // [0x2b64370] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.PlayReplay
	// void PlayReplay(UAthenaReplayBrowserRowProxyInstance* RowProxy);                                                         // [0x2b642c0] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.OnSaveFailed
	// void OnSaveFailed(FText& Reason);                                                                                        // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.OnRowsUpdated
	// void OnRowsUpdated();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.OnReplayEnumerationStart
	// void OnReplayEnumerationStart();                                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.OnReplayEnumerationFinish
	// void OnReplayEnumerationFinish();                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.OnRenameFailed
	// void OnRenameFailed(FText& Reason);                                                                                      // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.OnPlayFailed
	// void OnPlayFailed(FText& Reason);                                                                                        // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.OnDeleteFailed
	// void OnDeleteFailed(FText& Reason);                                                                                      // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.OnCorruptReplayFound
	// void OnCorruptReplayFound(FText& Info);                                                                                  // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.DoesReplayFolderExist
	// bool DoesReplayFolderExist();                                                                                            // [0x2b637b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.DeleteReplay
	// void DeleteReplay(UAthenaReplayBrowserRowProxyInstance* RowProxy);                                                       // [0x2b820c0] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaReplayBrowserScreenBase.BrowseToReplayFolder
	// void BrowseToReplayFolder();                                                                                             // [0x2b63440] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaResourcesBase
/// Size: 0x0000 (0x000238 - 0x000238)
class UAthenaResourcesBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/FortniteUI.AthenaSeasonStatusWidget
/// Size: 0x0000 (0x000210 - 0x000210)
class UAthenaSeasonStatusWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FortniteUI.AthenaSpectatorHitPointBarBase
/// Size: 0x0020 (0x000210 - 0x000230)
class UAthenaSpectatorHitPointBarBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(ESpectatorHealthBarType)                   BarType                                                     OFFSET(get<T>, {0x210, 1, 0, 0})
	DMember(float)                                     ValueCurrent                                                OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     ValueLast                                                   OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     LastToCurrentUpdateRate                                     OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(bool)                                      bIsDBNO                                                     OFFSET(get<bool>, {0x220, 1, 0, 0})
	CMember(AFortPlayerStateAthena*)                   PlayerState                                                 OFFSET(get<T>, {0x228, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaSpectatorHitPointBarBase.SetPlayerState
	// void SetPlayerState(AFortPlayerStateAthena* InPlayerState);                                                              // [0x2b64640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaSpectatorHitPointBarBase.OnValueLastChanged
	// void OnValueLastChanged();                                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaSpectatorHitPointBarBase.OnValueCurrentChanged
	// void OnValueCurrentChanged();                                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaSpectatorHitPointBarBase.OnDBNOChanged
	// void OnDBNOChanged();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaSpectatorPlayerListEntryWidget
/// Size: 0x0010 (0x000800 - 0x000810)
class UAthenaSpectatorPlayerListEntryWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(UAthenaSpectatorPlayerListRowData*)        PlayerListRowData                                           OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaSpectatorPlayerListEntryWidget.OnEntryDataSet
	// void OnEntryDataSet();                                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaSpectatorPlayerListScreenBase
/// Size: 0x0010 (0x000210 - 0x000220)
class UAthenaSpectatorPlayerListScreenBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(TArray<UAthenaSpectatorPlayerListRowData*>) RowDataArray                                               OFFSET(get<T>, {0x210, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaSpectatorPlayerListScreenBase.UpdateListUI
	// void UpdateListUI();                                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaSpectatorPlayerListScreenBase.OnPlayerDied
	// void OnPlayerDied(AFortPlayerState* NewlyDeadPlayer);                                                                    // [0x2b69ea0] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaSpectatorPlayerListScreenBase.OnPlayerBecameRelevant
	// void OnPlayerBecameRelevant(AFortPlayerState* NewlyRelevantPlayer);                                                      // [0x2b69e20] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaSpectatorPlayerListScreenBase.OnPlayerBecameIrrelevant
	// void OnPlayerBecameIrrelevant(AFortPlayerState* NewlyIrrelevantPlayer);                                                  // [0x2b69da0] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaSpectatorPlayerListScreenBase.OnFollowedPlayerChanged
	// void OnFollowedPlayerChanged(AFortPlayerControllerSpectating* SpectatorPC, AFortPlayerState* NewFollowedPlayer);         // [0x2b69aa0] Final|Native|Private 
	// Function /Script/FortniteUI.AthenaSpectatorPlayerListScreenBase.ClearPlayers
	// void ClearPlayers();                                                                                                     // [0x2b68c30] Final|Native|Private 
};

/// Class /Script/FortniteUI.AthenaSpectatorScoreboardEntryWidget
/// Size: 0x0010 (0x000800 - 0x000810)
class UAthenaSpectatorScoreboardEntryWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(UAthenaSpectatorScoreboardRowData*)        ScoreboardEntryObject                                       OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaSpectatorScoreboardEntryWidget.OnEntryDataSet
	// void OnEntryDataSet();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.AthenaSpectatorScoreboardScreenBase
/// Size: 0x0068 (0x000210 - 0x000278)
class UAthenaSpectatorScoreboardScreenBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(TArray<UAthenaSpectatorScoreboardRowData*>) RowDataArray                                               OFFSET(get<T>, {0x210, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaSpectatorScoreboardScreenBase.UpdateListUI
	// void UpdateListUI();                                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaSpectatorScoreboardScreenBase.ForceUpdate
	// void ForceUpdate();                                                                                                      // [0x2b68cf0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaStatsScreenBase
/// Size: 0x00A0 (0x0003F0 - 0x000490)
class UAthenaStatsScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(UCommonTabListWidget*)                     StatsTabList                                                OFFSET(get<T>, {0x3F0, 8, 0, 0})
	DMember(int32_t)                                   CurrentPlaylistId                                           OFFSET(get<int32_t>, {0x3F8, 4, 0, 0})
	DMember(bool)                                      bWasLastQuerySuccessful                                     OFFSET(get<bool>, {0x3FC, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.AthenaStatsScreenBase.OnTabSelected
	// void OnTabSelected(FName TabName);                                                                                       // [0x2b69f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.OnQueryStarted
	// void OnQueryStarted();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.OnQueryFinished
	// void OnQueryFinished(bool bWasSuccessful);                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.GetWinsTag
	// FString GetWinsTag();                                                                                                    // [0x2b69540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.GetThirdTierPlaceTag
	// FString GetThirdTierPlaceTag();                                                                                          // [0x2b694c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.GetStatValue
	// int32_t GetStatValue(FString BaseGameplayTag);                                                                           // [0x2b69410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.GetStatGameplayTag
	// FString GetStatGameplayTag(FString BaseStatName);                                                                        // [0x2b69320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.GetSecondTierPlaceTag
	// FString GetSecondTierPlaceTag();                                                                                         // [0x2b692a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.GetLastUpdateTime
	// FText GetLastUpdateTime();                                                                                               // [0x2b68df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.AthenaStatsScreenBase.FormatStatValueAsElapsedTime
	// FText FormatStatValueAsElapsedTime(FTimespan& ValueAsTimespan);                                                          // [0x2b68d10] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteUI.AthenaTeamAliveCountBase
/// Size: 0x0018 (0x000238 - 0x000250)
class UAthenaTeamAliveCountBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:


	/// Functions
	// Function /Script/FortniteUI.AthenaTeamAliveCountBase.SetTeamSlotData
	// void SetTeamSlotData(int32_t TeamIdx, FAthenaTeamCountSlotData& TeamSlotData);                                           // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.BacchusButton
/// Size: 0x0050 (0x000280 - 0x0002D0)
class UBacchusButton : public UBacchusHUDElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(TEnumAsByte<EButtonClickMethod>)           ClickMethod                                                 OFFSET(get<T>, {0x280, 1, 0, 0})
	CMember(TEnumAsByte<EButtonTouchMethod>)           TouchMethod                                                 OFFSET(get<T>, {0x281, 1, 0, 0})
	DMember(float)                                     ButtonSize                                                  OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     ButtonDisplayScale                                          OFFSET(get<float>, {0x288, 4, 0, 0})
	SMember(FText)                                     ButtonSizeName                                              OFFSET(getStruct<T>, {0x290, 24, 0, 0})
	SMember(FText)                                     ButtonDisplayScaleName                                      OFFSET(getStruct<T>, {0x2A8, 24, 0, 0})
	CMember(UButton*)                                  InternalButton                                              OFFSET(get<T>, {0x2C0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.BacchusButton.SetButtonSprite
	// void SetButtonSprite(UPaperSprite* NewSprite);                                                                           // [0x2b6a370] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.BacchusButton.SetButtonSize
	// void SetButtonSize(float NewButtonSize);                                                                                 // [0x2b6a2f0] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.BacchusButton.SetButtonDisplayScale
	// void SetButtonDisplayScale(float NewDisplayScale);                                                                       // [0x2b6a270] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.BacchusButton.OnClicked
	// void OnClicked();                                                                                                        // [0x2bf9370] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.BacchusDPICustomScalingRule
/// Size: 0x0000 (0x000028 - 0x000028)
class UBacchusDPICustomScalingRule : public UDPICustomScalingRule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteUI.BacchusHUDLayoutToolPanel
/// Size: 0x0080 (0x0003C0 - 0x000440)
class UBacchusHUDLayoutToolPanel : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(UHUDLayoutToolButtonLayer*)                ButtonLayer                                                 OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(UHUDLayoutToolPanZoomWidget*)              ZoomWidget                                                  OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(UImage*)                                   Background                                                  OFFSET(get<T>, {0x3D0, 8, 0, 0})
	SMember(FBackgroundColors)                         CombatColors                                                OFFSET(getStruct<T>, {0x3D8, 48, 0, 0})
	SMember(FBackgroundColors)                         BuildColors                                                 OFFSET(getStruct<T>, {0x408, 48, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 BackgroundMID                                               OFFSET(get<T>, {0x438, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.BacchusHUDLayoutToolPanel.OnBuildMode
	// void OnBuildMode(bool bNewlyInBuildMode);                                                                                // [0x2b69a10] Final|Native|Protected 
};

/// Class /Script/FortniteUI.BacchusQuickbar
/// Size: 0x0000 (0x000280 - 0x000280)
class UBacchusQuickbar : public UBacchusHUDElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
};

/// Class /Script/FortniteUI.CarmineHUDBase
/// Size: 0x0030 (0x000208 - 0x000238)
class UCarmineHUDBase : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:


	/// Functions
	// Function /Script/FortniteUI.CarmineHUDBase.OnBossHealthBarChanged
	// void OnBossHealthBarChanged(FAthenaBossHealthData& BossData);                                                            // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.CarmineUIExtenderBase
/// Size: 0x0008 (0x000030 - 0x000038)
class UCarmineUIExtenderBase : public UFortGameUIExtenderAthena
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      bShowGoToBossCommand                                        OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Class /Script/FortniteUI.CMSContext
/// Size: 0x0118 (0x000028 - 0x000140)
class UCMSContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:


	/// Functions
	// Function /Script/FortniteUI.CMSContext.MarkNewsAsViewed
	// void MarkNewsAsViewed();                                                                                                 // [0x2b699f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.CMSContext.IsNewNewsAvailable
	// bool IsNewNewsAvailable();                                                                                               // [0x2b699c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.CMSContext.GetLatestNews
	// FAthenaNews GetLatestNews();                                                                                             // [0x2b68ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.CMSContext.GetLatestEmergencyNotice
	// FAthenaNewsEntry GetLatestEmergencyNotice();                                                                             // [0x2b68e70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.CommonTagVisibilityWidget
/// Size: 0x0048 (0x000118 - 0x000160)
class UCommonTagVisibilityWidget : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FGameplayTagContainer)                     HUDElementTag                                               OFFSET(getStruct<T>, {0x118, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.CommonTagVisibilityWidget.OnVisibilitySetEvent
	// void OnVisibilitySetEvent(ESlateVisibility InVisibility);                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.CommonTagVisibilityWidget.Initialize
	// void Initialize(ULocalPlayer* OwningLocalPlayer, APlayerController* OwningPlayerController);                             // [0x2b69900] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.CommonTagVisibilityWidget.HandleOnHUDResetToDefaults
	// void HandleOnHUDResetToDefaults();                                                                                       // [0x2b697d0] Final|Native|Protected 
	// Function /Script/FortniteUI.CommonTagVisibilityWidget.HandleOnHUDElementVisibilityChanged
	// void HandleOnHUDElementVisibilityChanged(FGameplayTagContainer& HiddenHUDElementTags);                                   // [0x2b69710] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteUI.EmergencyNoticeBase
/// Size: 0x0000 (0x000210 - 0x000210)
class UEmergencyNoticeBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:


	/// Functions
	// Function /Script/FortniteUI.EmergencyNoticeBase.ShowNotice
	// void ShowNotice(FText& Title, FText& Body);                                                                              // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.EmergencyNoticeBase.HideNotice
	// void HideNotice();                                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortAbilitySystemContext
/// Size: 0x0050 (0x000028 - 0x000078)
class UFortAbilitySystemContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:


	/// Functions
	// Function /Script/FortniteUI.FortAbilitySystemContext.RemoveDelegatesFromWidget
	// void RemoveDelegatesFromWidget(UWidget* Widget);                                                                         // [0x2b6a170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAbilitySystemContext.RegisterForAttributeChanged
	// void RegisterForAttributeChanged(UWidget* Widget, UAbilitySystemComponent* ASC, FGameplayAttribute Attribute, DelegateProperty Callback); // [0x2b69fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAbilitySystemContext.HasMatchingGameplayTag
	// bool HasMatchingGameplayTag(FGameplayTag TagToCheck);                                                                    // [0x2b69870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortAccountLinkingWindow
/// Size: 0x0020 (0x0003F0 - 0x000410)
class UFortAccountLinkingWindow : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
};

/// Class /Script/FortniteUI.FortAsyncAction_WebCreateEpicAccountAndLink
/// Size: 0x0040 (0x000028 - 0x000068)
class UFortAsyncAction_WebCreateEpicAccountAndLink : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(UMulticastDelegate)                        OnAccountCreatedAndLinked                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAccountCreatedButNotLinked                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAccountNotCreated                                         OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(bool)                                      bAccountLinked                                              OFFSET(get<bool>, {0x60, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAsyncAction_WebCreateEpicAccountAndLink.WebCreateEpicAccountAndLink
	// UFortAsyncAction_WebCreateEpicAccountAndLink* WebCreateEpicAccountAndLink(UObject* InWorldContextObject);                // [0x2b6a580] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAsyncAction_CreateHeadlessAccount
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortAsyncAction_CreateHeadlessAccount : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UMulticastDelegate)                        OnAccountCreated                                            OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAccountNotCreated                                         OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAsyncAction_CreateHeadlessAccount.CreateHeadlessAccount
	// UFortAsyncAction_CreateHeadlessAccount* CreateHeadlessAccount(UObject* InWorldContextObject);                            // [0x2b68c50] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAccountNotFound
/// Size: 0x0060 (0x000210 - 0x000270)
class UFortAccountNotFound : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(URichTextBlock*)                           Text_Desc                                                   OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Back                                                 OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Web                                                  OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAccountNotFound.HandleWebButtonClicked
	// void HandleWebButtonClicked(UCommonButton* Button);                                                                      // [0x2b697f0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortAccountNotFound.HandleBackButtonClicked
	// void HandleBackButtonClicked(UCommonButton* Button);                                                                     // [0x2b695c0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortOptionsTab
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortOptionsTab : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(UMulticastDelegate)                        OnTabSettingChanged                                         OFFSET(get<T>, {0x210, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortOptionsTab.UpdateOptionsTab
	// void UpdateOptionsTab();                                                                                                 // [0x154a140] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortOptionsTab.IsXboxPlatform
	// bool IsXboxPlatform();                                                                                                   // [0x2bd2ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsTab.IsSwitchPlatform
	// bool IsSwitchPlatform();                                                                                                 // [0x2bd2ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsTab.IsPS4Platform
	// bool IsPS4Platform();                                                                                                    // [0x2bd2ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsTab.IsAthena
	// bool IsAthena();                                                                                                         // [0x2bd2a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsTab.CenterOnTab
	// void CenterOnTab();                                                                                                      // [0x154a140] Event|Protected|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortAccountOptions
/// Size: 0x0000 (0x000220 - 0x000220)
class UFortAccountOptions : public UFortOptionsTab
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/FortniteUI.FortAccountStatsContext
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortAccountStatsContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortAccountStatsContext.CanShowAccountStats
	// bool CanShowAccountStats();                                                                                              // [0x2b68c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortAccountWidgetBase
/// Size: 0x0038 (0x000210 - 0x000248)
class UFortAccountWidgetBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:


	/// Functions
	// Function /Script/FortniteUI.FortAccountWidgetBase.OnAccountInfoChanged
	// void OnAccountInfoChanged(FFortPublicAccountInfo& Result);                                                               // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortAccountWidgetBase.HandleCurrentlyViewedAccountInfoChanged
	// void HandleCurrentlyViewedAccountInfoChanged(FFortPublicAccountInfo NewInfo);                                            // [0x2b69640] Final|Native|Protected 
	// Function /Script/FortniteUI.FortAccountWidgetBase.GetSeasonBannerInfo
	// FAthenaSeasonBannerLevel GetSeasonBannerInfo(int32_t Level);                                                             // [0x2b691a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAccountWidgetBase.GetNextSeasonReward
	// bool GetNextSeasonReward(FFortItemQuantityPair& Reward, int32_t& RewardLevel);                                           // [0x2b69090] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAccountWidgetBase.GetNextSeasonChaseReward
	// bool GetNextSeasonChaseReward(FFortItemQuantityPair& Reward, int32_t& RewardLevel, int32_t StartingLevel);               // [0x2b68f30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortUserWidget
/// Size: 0x0010 (0x000208 - 0x000218)
class UFortUserWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	DMember(bool)                                      bConsumePointerInput                                        OFFSET(get<bool>, {0x210, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUserWidget.AddStoreCheatMenu
	// void AddStoreCheatMenu();                                                                                                // [0x114da70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUserWidget.AddGrantCheatMenu
	// void AddGrantCheatMenu(FString TemplateId, FString InstanceId);                                                          // [0x2c09a50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortActionHandlerPanel
/// Size: 0x0028 (0x000218 - 0x000240)
class UFortActionHandlerPanel : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(bool)                                      bAutoActivate                                               OFFSET(get<bool>, {0x218, 1, 0, 0})
	CMember(EFortPlayerControllerProcessing)           PlayerControllerProcessing                                  OFFSET(get<T>, {0x219, 1, 0, 0})
	DMember(bool)                                      bIsActive                                                   OFFSET(get<bool>, {0x21A, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortActionHandlerPanel.SetOnPanelDeactivated
	// void SetOnPanelDeactivated(DelegateProperty& OnDeactivatedHandler);                                                      // [0x2b6a4c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortActionHandlerPanel.SetOnPanelActivated
	// void SetOnPanelActivated(DelegateProperty& OnActivatedHandler);                                                          // [0x2b6a400] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortActionHandlerPanel.RemoveOnPanelDeactivated
	// void RemoveOnPanelDeactivated(UObject* BoundObject);                                                                     // [0x2b6a1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortActionHandlerPanel.OnHandleAction
	// void OnHandleAction(FEventReply& Result, bool& bPassThrough);                                                            // [0x2b69c00] Native|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortActionHandlerPanel.DeactivateActionHandler
	// void DeactivateActionHandler();                                                                                          // [0x2b68cd0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortActionHandlerPanel.ActivateActionHandler
	// void ActivateActionHandler();                                                                                            // [0x2b68ba0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortActorCanvas
/// Size: 0x0050 (0x000118 - 0x000168)
class UFortActorCanvas : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FGameplayTagContainer)                     DefaultHUDElementTags                                       OFFSET(getStruct<T>, {0x118, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortActorCanvas.OnHUDElementVisibilityChanged
	// void OnHUDElementVisibilityChanged(FGameplayTagContainer& HiddenHUDElementTags);                                         // [0x2b6d2c0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortActorCanvas.AddActorIndicator
	// UFortActorCanvasSlot* AddActorIndicator(UFortActorIndicatorWidget* Indicator);                                           // [0x2b6cc30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortActorCanvasSlot
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortActorCanvasSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x38, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x39, 1, 0, 0})
	DMember(bool)                                      bCanAutoRemove                                              OFFSET(get<bool>, {0x3A, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortActorCanvasSlot.SetVerticalAlignment
	// void SetVerticalAlignment(TEnumAsByte<EVerticalAlignment> InVerticalAlignment);                                          // [0x2b6d9e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortActorCanvasSlot.SetHorizontalAlignment
	// void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);                                    // [0x2b6d550] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortActorCanvasSlot.SetCanAutoRemove
	// void SetCanAutoRemove(bool bAllowAutoRemove);                                                                            // [0x2b6d4c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAlterationButtonWidget
/// Size: 0x0008 (0x000800 - 0x000808)
class UFortAlterationButtonWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2056;

public:
	CMember(UFortAlterationInfo*)                      AlterationInfo                                              OFFSET(get<T>, {0x800, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAlterationButtonWidget.Setup
	// void Setup(UFortAlterationInfo* InAlterationInfo);                                                                       // [0x2b6da60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationButtonWidget.OnSetup
	// void OnSetup();                                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationButtonWidget.GetAlterationInfo
	// UFortAlterationInfo* GetAlterationInfo();                                                                                // [0x2711ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortAlterationModScreenBase
/// Size: 0x0030 (0x0003C0 - 0x0003F0)
class UFortAlterationModScreenBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(UFortAlterationsWidget*)                   AlterationsToEdit                                           OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(UFortAlterationOptionsBase*)               AlterationSlotOptions                                       OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(UFortItemDetailsHostPanel*)                ItemInspectionMainItemDetailsHostPanel                      OFFSET(get<T>, {0x3D0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAlterationModScreenBase.SetItemForAlterationsModding
	// void SetItemForAlterationsModding(UFortAlterableItem* InAlterableItem);                                                  // [0x2b6d7a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAlterationOption
/// Size: 0x0038 (0x000800 - 0x000838)
class UFortAlterationOption : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2104;

public:
	SMember(FAlterationOption)                         AlterationOption                                            OFFSET(getStruct<T>, {0x800, 56, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAlterationOption.Setup
	// void Setup(FAlterationOption& InAlterationOption);                                                                       // [0x2b6dae0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationOption.OnSetup
	// void OnSetup();                                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationOption.GetRequiredIngredients
	// TArray<FFortItemQuantityPair> GetRequiredIngredients();                                                                  // [0x2b6ceb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAlterationOption.GetAlterationDefinition
	// UFortAlterationItemDefinition* GetAlterationDefinition();                                                                // [0x2b6cdf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortAlterationOptionsBase
/// Size: 0x00F0 (0x000210 - 0x000300)
class UFortAlterationOptionsBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(UClass*)                                   AlterationOptionClass                                       OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(UFortAlterableItem*)                       Item                                                        OFFSET(get<T>, {0x288, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x290, 4, 0, 0})
	DMember(bool)                                      bUpgradeOptionExists                                        OFFSET(get<bool>, {0x294, 1, 0, 0})
	SMember(FAlterationOption)                         UpgradeOption                                               OFFSET(getStruct<T>, {0x298, 56, 0, 0})
	CMember(TArray<FAlterationOption>)                 RespecOptions                                               OFFSET(get<T>, {0x2D0, 16, 0, 0})
	CMember(UCommonButtonGroup*)                       AlterationOptionButtons                                     OFFSET(get<T>, {0x2E0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAlterationOptionsBase.SetItem
	// void SetItem(UFortAlterableItem* InItem, int32_t InSlotIndex, bool bSelectionRequired);                                  // [0x2b6d5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationOptionsBase.ProcessAlterationOptions
	// void ProcessAlterationOptions();                                                                                         // [0x2b6d380] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationOptionsBase.OnItemChanged
	// void OnItemChanged();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationOptionsBase.OnIngredientsChanged
	// void OnIngredientsChanged(TArray<FFortItemQuantityPair>& RequiredIngredients);                                           // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationOptionsBase.OnGenerateOption
	// void OnGenerateOption(EFortAlterationOptionType OptionType, UFortAlterationOption* OptionWidget);                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationOptionsBase.HandleAlterationsOptionSelected
	// void HandleAlterationsOptionSelected(UCommonButton* AlterationOptionButton, int32_t GroupIndex);                         // [0x2b6d020] Final|Native|Public  
	// Function /Script/FortniteUI.FortAlterationOptionsBase.HandleAlterationsOptionHovered
	// void HandleAlterationsOptionHovered(UCommonButton* AlterationOptionButton, int32_t GroupIndex);                          // [0x2b6d020] Final|Native|Public  
	// Function /Script/FortniteUI.FortAlterationOptionsBase.HandleAlterationOptionConfirmed
	// void HandleAlterationOptionConfirmed(UCommonButton* AlterationOptionButton, int32_t GroupIndex);                         // [0x2b6cf60] Final|Native|Public  
	// Function /Script/FortniteUI.FortAlterationOptionsBase.DoAlterationOptionsExist
	// bool DoAlterationOptionsExist(EFortAlterationOptionType OptionType);                                                     // [0x2b6cd60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAlterationOptionsBase.ConfirmSelection
	// void ConfirmSelection();                                                                                                 // [0x2b6cd40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAlterationInfo
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortAlterationInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(UFortAlterationItemDefinition*)            AlterationDef                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   RequiredMinLevel                                            OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      bIsUpgrade                                                  OFFSET(get<bool>, {0x3C, 1, 0, 0})
	DMember(int32_t)                                   CurrentItemLevel                                            OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      bUnlockedByEvolution                                        OFFSET(get<bool>, {0x44, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAlterationInfo.IsAlterationUnlocked
	// bool IsAlterationUnlocked();                                                                                             // [0x2b6d210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAlterationInfo.IsAlterationHighlighted
	// bool IsAlterationHighlighted();                                                                                          // [0x2b6d1e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAlterationInfo.GetSlotIndex
	// int32_t GetSlotIndex();                                                                                                  // [0x2b6cf30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAlterationInfo.GetRequiredLevel
	// int32_t GetRequiredLevel();                                                                                              // [0x2662690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAlterationInfo.GetRarity
	// EFortRarity GetRarity();                                                                                                 // [0x2b6ce80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAlterationInfo.GetAlterationDefintion
	// UFortAlterationItemDefinition* GetAlterationDefintion();                                                                 // [0x2b6ce20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortAlterationsWidget
/// Size: 0x0120 (0x000210 - 0x000330)
class UFortAlterationsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	CMember(UFortItem*)                                Item                                                        OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(EFortAlterationWidgetState)                State                                                       OFFSET(get<T>, {0x218, 1, 0, 0})
	CMember(UFortItem*)                                ItemToCompareWith                                           OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UCommonTextBlock*)                         EmptyText                                                   OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAlterationsWidget.SetupInteractionEvents
	// void SetupInteractionEvents(UFortAlterationButtonWidget* Buttion);                                                       // [0x2b6dc60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationsWidget.SetState
	// void SetState(EFortAlterationWidgetState InState);                                                                       // [0x2b6d8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationsWidget.SetItemToCompareWith
	// void SetItemToCompareWith(UFortItem* InItem);                                                                            // [0x2b6d820] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationsWidget.SetItem
	// void SetItem(UFortItem* InItem, bool bInPreviewNewAlterations);                                                          // [0x2b6d6d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationsWidget.ProcessAlterations
	// void ProcessAlterations();                                                                                               // [0x2b6d3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationsWidget.OnStateChanged
	// void OnStateChanged();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationsWidget.OnItemToCompareWithChanged
	// void OnItemToCompareWithChanged();                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationsWidget.OnItemChanged
	// void OnItemChanged();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationsWidget.OnGenerateAlteration
	// void OnGenerateAlteration(UFortAlterationInfo* AlterationInfo);                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationsWidget.HandleAlterationsSlotSelected
	// void HandleAlterationsSlotSelected(UCommonButton* AlterationButton);                                                     // [0x2b6d160] Final|Native|Public  
	// Function /Script/FortniteUI.FortAlterationsWidget.HandleAlterationsSlotHovered
	// void HandleAlterationsSlotHovered(UCommonButton* AlterationButton);                                                      // [0x2b6d0e0] Final|Native|Public  
};

/// Class /Script/FortniteUI.FortAlterationWidget
/// Size: 0x0008 (0x000210 - 0x000218)
class UFortAlterationWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	CMember(UFortAlterationInfo*)                      AlterationInfo                                              OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAlterationWidget.Setup
	// void Setup(UFortAlterationInfo* InAlterationInfo);                                                                       // [0x2b6dbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAlterationWidget.OnSetup
	// void OnSetup();                                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAlterationWidget.GetAlterationInfo
	// UFortAlterationInfo* GetAlterationInfo();                                                                                // [0x2b6ce50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortAnnouncementWidget
/// Size: 0x0008 (0x000210 - 0x000218)
class UFortAnnouncementWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	CMember(AFortClientAnnouncement*)                  BoundAnnouncement                                           OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAnnouncementWidget.UpdateWidgetData
	// void UpdateWidgetData(AFortClientAnnouncement* Announcement);                                                            // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAnnouncementWidget.BindUpdateEvents
	// void BindUpdateEvents(AFortClientAnnouncement* Announcement);                                                            // [0x2b6ccc0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAnnouncementWidget.AnnouncementStopped
	// void AnnouncementStopped(AFortClientAnnouncement* Announcement);                                                         // [0x154a140] BlueprintCosmetic|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortArmoryScreen
/// Size: 0x0000 (0x0003C0 - 0x0003C0)
class UFortArmoryScreen : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
};

/// Class /Script/FortniteUI.FortAsyncAction_LoadCurrentSubgameProfiles
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortAsyncAction_LoadCurrentSubgameProfiles : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UMulticastDelegate)                        OnSuccess                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFailure                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(AFortPlayerController*)                    PlayerController                                            OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAsyncAction_LoadCurrentSubgameProfiles.LoadCurrentSubgameProfiles
	// UFortAsyncAction_LoadCurrentSubgameProfiles* LoadCurrentSubgameProfiles(AFortPlayerController* PlayerController);        // [0x2b6d240] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAsyncAction_SetUIState
/// Size: 0x0020 (0x000028 - 0x000048)
class UFortAsyncAction_SetUIState : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UMulticastDelegate)                        OnStateEntered                                              OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x38, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAsyncAction_SetUIState.SetUIState
	// UFortAsyncAction_SetUIState* SetUIState(UObject* InWorldContextObject, EFortUIState DesiredState);                       // [0x2b6d920] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAsyncAction_ShowAdvancedLatentConfirmation_NUI
/// Size: 0x0198 (0x000028 - 0x0001C0)
class UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	CMember(UMulticastDelegate)                        DialogResult                                                OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FFortDialogDescription_NUI)                Description                                                 OFFSET(getStruct<T>, {0x40, 384, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAsyncAction_ShowAdvancedLatentConfirmation_NUI.ShowAdvancedLatentActionConfirmation
	// UFortAsyncAction_ShowAdvancedLatentConfirmation_NUI* ShowAdvancedLatentActionConfirmation(UObject* InWorldContextObject, FSlateBrush Icon, FText Title, FText MESSAGE, TArray<FConfirmationDialogAction>& ConfirmButtonInputActions, FName& DeclineButtonInputAction, UWidget* AdditionalContent, UWidget* LeftAdditionalContent); // [0x2b6dce0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAsyncAction_ShowConfirmation
/// Size: 0x0198 (0x000028 - 0x0001C0)
class UFortAsyncAction_ShowConfirmation : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 448;

public:
	CMember(UMulticastDelegate)                        OnConfirmed                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDeclined                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTimedOut                                                  OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FFortDialogDescription)                    Description                                                 OFFSET(getStruct<T>, {0x60, 352, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAsyncAction_ShowConfirmation.ShowConfirmationDialog
	// UFortAsyncAction_ShowConfirmation* ShowConfirmationDialog(UObject* InWorldContextObject, FText Title, FText MESSAGE, FText ConfirmButtonText, FText DeclineButtonText, UFortUserWidget* InAdditionalContent, float InDisplayTime); // [0x2b6e110] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAsyncAction_ShowConfirmation_NUI
/// Size: 0x01A8 (0x000028 - 0x0001D0)
class UFortAsyncAction_ShowConfirmation_NUI : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(UMulticastDelegate)                        DialogResult                                                OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FFortDialogDescription_NUI)                Description                                                 OFFSET(getStruct<T>, {0x40, 384, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAsyncAction_ShowConfirmation_NUI.ShowSimpleConfirmationDialog_NUI
	// UFortAsyncAction_ShowConfirmation_NUI* ShowSimpleConfirmationDialog_NUI(UObject* InWorldContextObject, FSlateBrush Icon, FText Title, FText MESSAGE, bool bShowConfirm, bool bShowDecline, UWidget* AdditionalContent, UWidget* LeftAdditionalContent); // [0x2b6ec30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAsyncAction_ShowConfirmation_NUI.ShowSimpleConfirmationDialog_CustomInput
	// UFortAsyncAction_ShowConfirmation_NUI* ShowSimpleConfirmationDialog_CustomInput(UObject* InWorldContextObject, FSlateBrush Icon, FText Title, FText MESSAGE, FName ConfirmAction, FName DeclineAction, UWidget* AdditionalContent, UWidget* LeftAdditionalContent); // [0x2b6e860] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAsyncAction_ShowConfirmation_NUI.ShowConfirmationDialog_NUI
	// UFortAsyncAction_ShowConfirmation_NUI* ShowConfirmationDialog_NUI(UObject* InWorldContextObject, FSlateBrush Icon, FText Title, FText MESSAGE, TArray<FConfirmationDialogAction>& ConfirmButtonInputActions, FName& DeclineButtonInputAction, UWidget* AdditionalContent, UWidget* LeftAdditionalContent); // [0x2b6e430] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAsyncAction_ShowPartyDialog
/// Size: 0x0388 (0x000028 - 0x0003B0)
class UFortAsyncAction_ShowPartyDialog : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(UObject*)                                  WorldContextObject                                          OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FFortDialogDescription_NUI)                Description                                                 OFFSET(getStruct<T>, {0x30, 384, 0, 0})
	SMember(FFortTeamMemberInfo)                       TeamMemberInfo                                              OFFSET(getStruct<T>, {0x1B0, 504, 0, 0})
	CMember(ULocalPlayer*)                             LocalPlayer                                                 OFFSET(get<T>, {0x3A8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAsyncAction_ShowPartyDialog.ShowPartyMemberManageDialog
	// UFortAsyncAction_ShowPartyDialog* ShowPartyMemberManageDialog(UObject* InWorldContextObject, FFortTeamMemberInfo& TeamMemberInfo, ULocalPlayer* LocalPlayer, UUserWidget* LeftAdditionalContent); // [0x2b736e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAsyncAction_ShowPartyDialog.ShowPartyLeaderManageDialog
	// UFortAsyncAction_ShowPartyDialog* ShowPartyLeaderManageDialog(UObject* InWorldContextObject, FFortTeamMemberInfo& TeamMemberInfo, ULocalPlayer* LocalPlayer, UUserWidget* LeftAdditionalContent); // [0x2b73550] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAthenaMatchmakingOptions
/// Size: 0x0040 (0x0003F0 - 0x000430)
class UFortAthenaMatchmakingOptions : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(UClass*)                                   TileItemClass                                               OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UScrollBox*)                               StandardGameModeBox                                         OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UScrollBox*)                               LTMGameModeBox                                              OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UCommonButton*)                            TeamFillButton                                              OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UCommonButton*)                            RankedButton                                                OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonButtonGroup*)                       MatchmakingTileGroup                                        OFFSET(get<T>, {0x418, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.UpdateMatchmakingButtonsBP
	// void UpdateMatchmakingButtonsBP(bool IsPartyLeader, bool IsMatchmaking, bool PlaylistSupportsPartySize, bool PlaylistIsTeam); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.SetSquadFillText
	// void SetSquadFillText(bool InCurrentSquadFill);                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.SetRepresentedPlaylist
	// void SetRepresentedPlaylist(UFortPlaylistAthena* PlaylistToRepresent);                                                   // [0x2b731f0] Final|Native|Private 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.RepresentedPlaylistChanged
	// void RepresentedPlaylistChanged(UFortPlaylistAthena* NewRepresentedPlaylist);                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.OnTileDoubleClicked
	// void OnTileDoubleClicked(UCommonButton* ButtonClicked);                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.OnPlaylistNameChanged
	// void OnPlaylistNameChanged(FName NewPlaylistName);                                                                       // [0x2b728c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.InputTypeChanged
	// void InputTypeChanged(ECommonInputType CurrentInputType);                                                                // [0x2b72780] Final|Native|Private 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.HandleRankedButtonClicked
	// void HandleRankedButtonClicked(UCommonButton* Button);                                                                   // [0x2b5f400] Final|Native|Private 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.HandleFillButtonClicked
	// void HandleFillButtonClicked(UCommonButton* Button);                                                                     // [0x2b72650] Final|Native|Private 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.HandleButtonGroupSelectionChanged
	// void HandleButtonGroupSelectionChanged(UCommonButton* Button, int32_t Index);                                            // [0x2b72410] Final|Native|Private 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.CloseMatchmakingOptions
	// void CloseMatchmakingOptions();                                                                                          // [0x2b71a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAthenaMatchmakingOptions.AcceptedPlaylist
	// void AcceptedPlaylist();                                                                                                 // [0x2b717c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAthenaMatchmakingTile
/// Size: 0x0010 (0x000800 - 0x000810)
class UFortAthenaMatchmakingTile : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(UEpicCMSImage*)                            GameModeImage                                               OFFSET(get<T>, {0x800, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAthenaMatchmakingTile.UpdateTileAvailability
	// void UpdateTileAvailability(bool Available);                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingTile.TilePlaylistSetAsMatchmakingPlaylist
	// void TilePlaylistSetAsMatchmakingPlaylist();                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingTile.SetTileSize
	// void SetTileSize(bool UseLargeSize);                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingTile.SetDefaultImage
	// void SetDefaultImage();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingTile.PlaylistChanged
	// void PlaylistChanged(UFortPlaylistAthena* PlaylistToRepresent);                                                          // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortAthenaMatchmakingWidget
/// Size: 0x00B8 (0x000210 - 0x0002C8)
class UFortAthenaMatchmakingWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(UClass*)                                   DefaultMissionGen                                           OFFSET(get<T>, {0x210, 8, 0, 0})
	SMember(FName)                                     CurrentPlaylistName                                         OFFSET(getStruct<T>, {0x218, 8, 0, 0})
	CMember(UFortPlaylistAthena*)                      CurrentPlaylistObj                                          OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bCurrentSquadFill                                           OFFSET(get<bool>, {0x228, 1, 0, 0})
	CMember(UWidget*)                                  SpinnerAndTextContainer                                     OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UCommonButton*)                            PlayButton                                                  OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UCommonButton*)                            CancelButton                                                OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UCommonButton*)                            StartMatchButton                                            OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(UCommonTextBlock*)                         MatchmakingHeaderText                                       OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(UCommonTextBlock*)                         MatchmakingMessageText                                      OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(UCommonBorder*)                            NewModeBorder                                               OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.SetSquadFillText
	// void SetSquadFillText(bool InCurrentSquadFill);                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.PlaylistChanged
	// void PlaylistChanged(UFortPlaylistAthena* NewPlaylist);                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.OnSetPlayButtonText
	// void OnSetPlayButtonText(FText& PlayButtonText);                                                                         // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.OnSetCancelButtonText
	// void OnSetCancelButtonText(FText& CancelButtonText);                                                                     // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.OnPlayButtonUpdated
	// void OnPlayButtonUpdated(bool bShowPlayButton);                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.OnPlayButtonPressed
	// void OnPlayButtonPressed();                                                                                              // [0x2b728a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.OnCancelButtonPressed
	// void OnCancelButtonPressed();                                                                                            // [0x2b72880] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.OnAvailablePlaylistsUpdated
	// void OnAvailablePlaylistsUpdated();                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.HandleStartMatchButtonClicked
	// void HandleStartMatchButtonClicked(UCommonButton* Button);                                                               // [0x2b726d0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.GetDefaultPlaylists
	// void GetDefaultPlaylists(TArray<UFortPlaylistAthena*>& DefaultPlaylists);                                                // [0x2b71de0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.GetCurrentPartySize
	// int32_t GetCurrentPartySize();                                                                                           // [0x2b71db0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortAthenaMatchmakingWidget.GetActivePlaylists
	// TArray<UFortPlaylistAthena*> GetActivePlaylists();                                                                       // [0x2b71ab0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAthenaNewsWidget
/// Size: 0x0048 (0x000210 - 0x000258)
class UFortAthenaNewsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(UCommonTextBlock*)                         Title1                                                      OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Body1                                                       OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UEpicCMSImage*)                            Image1                                                      OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Title2                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Body2                                                       OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UEpicCMSImage*)                            Image2                                                      OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Title3                                                      OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Body3                                                       OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(UEpicCMSImage*)                            Image3                                                      OFFSET(get<T>, {0x250, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortAthenaTabsScreenBase
/// Size: 0x0060 (0x0003F0 - 0x000450)
class UFortAthenaTabsScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(TMap<EFortUIFeature, FName>)               FeaturesTabsMap                                             OFFSET(get<T>, {0x3F0, 80, 0, 0})
	CMember(UFortTabListWidgetBase*)                   TopTabList                                                  OFFSET(get<T>, {0x440, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAthenaTabsScreenBase.ShowReplayBrowser
	// void ShowReplayBrowser();                                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortAthenaTabsScreenBase.HandleFeatureStateChanged
	// void HandleFeatureStateChanged(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason Reason); // [0x2b72550] Final|Native|Protected 
	// Function /Script/FortniteUI.FortAthenaTabsScreenBase.HandleFeatureNavigateRequest
	// void HandleFeatureNavigateRequest(EFortUIFeature Feature);                                                               // [0x2b724d0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortAthenaTabsScreenBase.CanShowSeasonShopTab
	// bool CanShowSeasonShopTab();                                                                                             // [0x2b73870] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAthenaTabsScreenBase.CanShowPrototypeTab
	// bool CanShowPrototypeTab(FName TabNameID);                                                                               // [0x2b717e0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortAttributeList
/// Size: 0x0018 (0x000218 - 0x000230)
class UFortAttributeList : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(UClass*)                                   AttributeItemClass                                          OFFSET(get<T>, {0x218, 8, 0, 0})
	DMember(bool)                                      bHoverEnabledOnElements                                     OFFSET(get<bool>, {0x220, 1, 0, 0})
	CMember(UVerticalBox*)                             AttributeContainer                                          OFFSET(get<T>, {0x228, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAttributeList.SetPreviewData
	// void SetPreviewData(TArray<FFortDisplayAttribute>& Data);                                                                // [0x2b72fd0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeList.SetData
	// TArray<FFortDisplayAttribute> SetData(TArray<FFortDisplayAttribute>& Data);                                              // [0x2b729d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeList.ClearPreviewData
	// void ClearPreviewData();                                                                                                 // [0x2b719d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeList.Clear
	// void Clear();                                                                                                            // [0x2b71970] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAttributeList_NUI
/// Size: 0x0030 (0x000210 - 0x000240)
class UFortAttributeList_NUI : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(UClass*)                                   AttributeItemClass                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	DMember(bool)                                      bHoverEnabledOnElements                                     OFFSET(get<bool>, {0x218, 1, 0, 0})
	CMember(TArray<UFortAttributeListItem_NUI*>)       ShownAttributeWidgets                                       OFFSET(get<T>, {0x220, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAttributeList_NUI.SetPreviewData
	// void SetPreviewData(TArray<FFortDisplayAttribute>& Data);                                                                // [0x2b730a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeList_NUI.SetData
	// void SetData(TArray<FFortDisplayAttribute>& Data);                                                                       // [0x2b72af0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeList_NUI.OnRemoveShownAttributeListItem
	// void OnRemoveShownAttributeListItem(UFortAttributeListItem_NUI* AttributeListItemWidget, int32_t AtIndex);               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeList_NUI.OnClearShownAttributes
	// void OnClearShownAttributes();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeList_NUI.OnAddShownAttributeListItem
	// void OnAddShownAttributeListItem(UFortAttributeListItem_NUI* AttributeListItemWidget);                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeList_NUI.ClearPreviewData
	// void ClearPreviewData();                                                                                                 // [0x2b719f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAttributeListItem
/// Size: 0x00E8 (0x000208 - 0x0002F0)
class UFortAttributeListItem : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	DMember(bool)                                      bHoverEnabled                                               OFFSET(get<bool>, {0x208, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAttributeListItem.ValueChanged
	// void ValueChanged(float Delta);                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeListItem.SetPreviewAttribute
	// void SetPreviewAttribute(FFortDisplayAttribute& InPreviewAttribute);                                                     // [0x2b72e10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeListItem.SetDisplayAttribute
	// bool SetDisplayAttribute(FFortDisplayAttribute& InDisplayAttribute, FFortDisplayAttribute& DeltaAttribute);              // [0x2b72bc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeListItem.PreviewStarted
	// void PreviewStarted();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeListItem.PreviewEnded
	// void PreviewEnded();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeListItem.GetDisplayPreviewCopy
	// void GetDisplayPreviewCopy(FFortDisplayAttribute& OutPreviewAttribute);                                                  // [0x2b72080] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAttributeListItem.GetDisplayAttributeCopy
	// void GetDisplayAttributeCopy(FFortDisplayAttribute& OutDisplayAttribute);                                                // [0x2b71ec0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAttributeListItem.GetCurrentAttributeCopy
	// void GetCurrentAttributeCopy(FFortDisplayAttribute& OutDisplayAttribute);                                                // [0x2b71bf0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAttributeListItem.DisplayAttributeChanged
	// void DisplayAttributeChanged();                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeListItem.ClearPreview
	// void ClearPreview();                                                                                                     // [0x2b71990] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAttributeListItem_NUI
/// Size: 0x00F8 (0x000210 - 0x000308)
class UFortAttributeListItem_NUI : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	DMember(bool)                                      bHoverEnabled                                               OFFSET(get<bool>, {0x218, 1, 0, 0})
	SMember(FGameplayTag)                              StatTag                                                     OFFSET(getStruct<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.ValueChanged
	// void ValueChanged(float Delta);                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.SetPreviewAttribute
	// void SetPreviewAttribute(FFortDisplayAttribute& InPreviewAttribute);                                                     // [0x2b72ef0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.SetDisplayAttribute
	// void SetDisplayAttribute(FFortDisplayAttribute& InDisplayAttribute);                                                     // [0x2b72d30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.PreviewStarted
	// void PreviewStarted();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.PreviewEnded
	// void PreviewEnded();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.HasPreviewAttribute
	// bool HasPreviewAttribute();                                                                                              // [0x2b72750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.GetDisplayPreviewCopy
	// void GetDisplayPreviewCopy(FFortDisplayAttribute& OutPreviewAttribute);                                                  // [0x2b72160] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.GetDisplayAttributeCopy
	// void GetDisplayAttributeCopy(FFortDisplayAttribute& OutDisplayAttribute);                                                // [0x2b71fa0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.GetCurrentAttributeCopy
	// void GetCurrentAttributeCopy(FFortDisplayAttribute& OutDisplayAttribute);                                                // [0x2b71cd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.DisplayAttributeChanged
	// void DisplayAttributeChanged();                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortAttributeListItem_NUI.ClearPreview
	// void ClearPreview();                                                                                                     // [0x2b719b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAudioOptions
/// Size: 0x0000 (0x000220 - 0x000220)
class UFortAudioOptions : public UFortOptionsTab
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:


	/// Functions
	// Function /Script/FortniteUI.FortAudioOptions.SoundFXVolumeChanged
	// void SoundFXVolumeChanged(float NewValue);                                                                               // [0x2b738a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.ShowQuality
	// bool ShowQuality();                                                                                                      // [0x2b73870] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.ShowChatVolume
	// bool ShowChatVolume();                                                                                                   // [0x2b73870] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.ShowAllowGameVolumeWhenMinimized
	// bool ShowAllowGameVolumeWhenMinimized();                                                                                 // [0x2b73870] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.SetVoiceChatPTTEnabled
	// void SetVoiceChatPTTEnabled(bool bNewValue);                                                                             // [0x2b734c0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.SetVoiceChatInputDevice
	// void SetVoiceChatInputDevice(FString NewDevice);                                                                         // [0x2b73420] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.SetVoiceChatEnabled
	// void SetVoiceChatEnabled(bool bNewValue);                                                                                // [0x2b73390] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.SetVoiceChat3DEnabled
	// void SetVoiceChat3DEnabled(bool bNewValue);                                                                              // [0x2b73300] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.SetSubtitlesEnabled
	// void SetSubtitlesEnabled(bool bNewValue);                                                                                // [0x2b73270] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.SetQuality
	// void SetQuality(int32_t NewQuality);                                                                                     // [0x2b73170] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.SetAllowGameVolumeWhenMinimized
	// void SetAllowGameVolumeWhenMinimized(bool bNewValue);                                                                    // [0x2b72940] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.MusicVolumeChanged
	// void MusicVolumeChanged(float NewValue);                                                                                 // [0x2b72800] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.IsUsingCustomVoiceChatInputDevice
	// bool IsUsingCustomVoiceChatInputDevice();                                                                                // [0x2bd2ad0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.GetVoiceChatPTTEnabled
	// bool GetVoiceChatPTTEnabled();                                                                                           // [0x2b723e0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetVoiceChatInputDevice
	// FString GetVoiceChatInputDevice();                                                                                       // [0x2b72360] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.GetVoiceChatEnabled
	// bool GetVoiceChatEnabled();                                                                                              // [0x2b72330] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetVoiceChat3DEnabled
	// bool GetVoiceChat3DEnabled();                                                                                            // [0x2b72300] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetSubtitlesEnabled
	// bool GetSubtitlesEnabled();                                                                                              // [0x2b722d0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetSoundFXVolumeValue
	// float GetSoundFXVolumeValue();                                                                                           // [0x2b722a0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetQuality
	// int32_t GetQuality();                                                                                                    // [0x2b72270] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetMusicVolumeValue
	// float GetMusicVolumeValue();                                                                                             // [0x2b72240] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetDialogVolumeValue
	// float GetDialogVolumeValue();                                                                                            // [0x2b71e90] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetCinematicsVolume
	// float GetCinematicsVolume();                                                                                             // [0x2b71bc0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetChatVolumeValue
	// float GetChatVolumeValue();                                                                                              // [0x2b71b90] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.GetAvailableVoiceChatInputDevices
	// TArray<FString> GetAvailableVoiceChatInputDevices();                                                                     // [0x2b71b10] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.GetAllowGameVolumeWhenMinimized
	// bool GetAllowGameVolumeWhenMinimized();                                                                                  // [0x2b71ae0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortAudioOptions.DialogVolumeChanged
	// void DialogVolumeChanged(float NewValue);                                                                                // [0x2b71a30] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.CinematicsVolumeChanged
	// void CinematicsVolumeChanged(float NewValue);                                                                            // [0x2b718f0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortAudioOptions.ChatVolumeChanged
	// void ChatVolumeChanged(float NewValue);                                                                                  // [0x2b71870] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortAutorunLockZone
/// Size: 0x0008 (0x000238 - 0x000240)
class UFortAutorunLockZone : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(bool)                                      bIsInZone                                                   OFFSET(get<bool>, {0x238, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortAutorunLockZone.OnInZoneChanged
	// void OnInZoneChanged(bool bNewIsInZone);                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortBangWrapper
/// Size: 0x0040 (0x000118 - 0x000158)
class UFortBangWrapper : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(EFortBangSize)                             Size                                                        OFFSET(get<T>, {0x120, 1, 0, 0})
	SMember(FVector2D)                                 Offset                                                      OFFSET(getStruct<T>, {0x124, 8, 0, 0})
	CMember(EFortBangType)                             BangType                                                    OFFSET(get<T>, {0x12C, 1, 0, 0})
	SMember(FName)                                     TutorialNameID                                              OFFSET(getStruct<T>, {0x130, 8, 0, 0})
	CMember(EFortTutorialGlowType)                     TutorialGlowType                                            OFFSET(get<T>, {0x138, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortBangWrapper.SetBangVisibility
	// void SetBangVisibility(bool InVisible);                                                                                  // [0x2b77bd0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortBangWrapper_NUI
/// Size: 0x0018 (0x000210 - 0x000228)
class UFortBangWrapper_NUI : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(EFortBangType)                             BangType                                                    OFFSET(get<T>, {0x218, 1, 0, 0})
	SMember(FName)                                     TutorialNameID                                              OFFSET(getStruct<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortBangWrapper_NUI.UnregisterTutorialNameID
	// void UnregisterTutorialNameID();                                                                                         // [0x2b78530] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBangWrapper_NUI.SetTutorialNameID
	// void SetTutorialNameID(FName InTutorialNameID);                                                                          // [0x2b784b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBangWrapper_NUI.SetBangType
	// void SetBangType(EFortBangType NewBangType);                                                                             // [0x2b77b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBangWrapper_NUI.SetBangStateBP
	// void SetBangStateBP(bool bEnabled, int32_t Count);                                                                       // [0x2b77a90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBangWrapper_NUI.OnStopCallout
	// void OnStopCallout();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortBangWrapper_NUI.OnStartCallout
	// void OnStartCallout();                                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortBangWrapper_NUI.OnBangStateChanged
	// void OnBangStateChanged(bool bEnabled, int32_t Count);                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortBannerSelectorBase
/// Size: 0x0070 (0x0003C0 - 0x000430)
class UFortBannerSelectorBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(UEditableText*)                            BannerName                                                  OFFSET(get<T>, {0x3C0, 8, 0, 0})
	DMember(int32_t)                                   BannerNameMaxLength                                         OFFSET(get<int32_t>, {0x3C8, 4, 0, 0})
	CMember(UBorder*)                                  ErrorBorder                                                 OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(UCommonTextBlock*)                         ErrorText                                                   OFFSET(get<T>, {0x3D8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortBannerSelectorBase.UpdateErrorText
	// void UpdateErrorText(FText& ErrorMessageText);                                                                           // [0x2b78550] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortBannerSelectorBase.OnHomebaseNameCommitSucceeded
	// void OnHomebaseNameCommitSucceeded();                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortBannerSelectorBase.OnHomebaseNameCommitFailed
	// void OnHomebaseNameCommitFailed();                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortBannerSelectorBase.IsPlayerNameValid
	// void IsPlayerNameValid(FText& PlayerName, bool& OutIsValid, FText& OutErrorText);                                        // [0x2b77390] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBannerSelectorBase.HasIllegalChars
	// bool HasIllegalChars(FString NewBannerName);                                                                             // [0x2b772b0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBannerSelectorBase.HandleBannerNameChanged
	// void HandleBannerNameChanged(FText& Text);                                                                               // [0x2b771e0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortBannerSelectorBase.CompleteHomebaseName
	// void CompleteHomebaseName();                                                                                             // [0x2b76860] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBannerSelectorBase.CompleteHomebaseBannerSelection
	// void CompleteHomebaseBannerSelection();                                                                                  // [0x2b76840] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortButtonStyle
/// Size: 0x1A00 (0x000028 - 0x001A28)
class UFortButtonStyle : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 6696;

public:
	SMember(FFortStateStyle)                           NormalBase                                                  OFFSET(getStruct<T>, {0x28, 848, 0, 0})
	SMember(FFortStateStyle)                           NormalHovered                                               OFFSET(getStruct<T>, {0x378, 848, 0, 0})
	SMember(FFortStateStyle)                           NormalPressed                                               OFFSET(getStruct<T>, {0x6C8, 848, 0, 0})
	SMember(FFortStateStyle)                           SelectedBase                                                OFFSET(getStruct<T>, {0xA18, 848, 0, 0})
	SMember(FFortStateStyle)                           SelectedHovered                                             OFFSET(getStruct<T>, {0xD68, 848, 0, 0})
	SMember(FFortStateStyle)                           SelectedPressed                                             OFFSET(getStruct<T>, {0x10B8, 848, 0, 0})
	SMember(FFortStateStyle)                           Disabled                                                    OFFSET(getStruct<T>, {0x1408, 848, 0, 0})
	SMember(FFortMultiSizeMargin)                      ButtonPadding                                               OFFSET(getStruct<T>, {0x1758, 96, 0, 0})
	SMember(FFortMultiSizeFont)                        Font                                                        OFFSET(getStruct<T>, {0x17B8, 480, 0, 0})
	SMember(FFortMultiSizeMargin)                      CustomPadding                                               OFFSET(getStruct<T>, {0x1998, 96, 0, 0})
	SMember(FSlateSound)                               PressedSlateSound                                           OFFSET(getStruct<T>, {0x19F8, 24, 0, 0})
	SMember(FSlateSound)                               HoveredSlateSound                                           OFFSET(getStruct<T>, {0x1A10, 24, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortButtonStyle.GetMarginBySizeFromMultiSizeMargin
	// FMargin GetMarginBySizeFromMultiSizeMargin(FFortMultiSizeMargin& MultiSizeMargin, TEnumAsByte<EFortBrushSize> Size);     // [0x2b77010] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortButtonStyle.GetFontBySizeFromMultiSizeFont
	// FSlateFontInfo GetFontBySizeFromMultiSizeFont(FFortMultiSizeFont& MultiSizeFont, TEnumAsByte<EFortBrushSize> Size);      // [0x2b76e90] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortButtonStyle.GetFontBySize
	// FSlateFontInfo GetFontBySize(TEnumAsByte<EFortBrushSize> Size);                                                          // [0x2b76dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortButtonStyle.GetCustomPaddingBySize
	// FMargin GetCustomPaddingBySize(TEnumAsByte<EFortBrushSize> Size);                                                        // [0x2b76d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortButtonStyle.GetButtonPaddingBySize
	// FMargin GetButtonPaddingBySize(TEnumAsByte<EFortBrushSize> Size);                                                        // [0x2b76af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortButtonStyle.GetBrushBySizeFromMultiSizeBrush
	// FSlateBrush GetBrushBySizeFromMultiSizeBrush(FFortMultiSizeBrush& MultiSizeBrush, TEnumAsByte<EFortBrushSize> Size);     // [0x2b76920] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortBaseButton
/// Size: 0x05C8 (0x000218 - 0x0007E0)
class UFortBaseButton : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2016;

public:
	CMember(UMulticastDelegate)                        EnabledChanged                                              OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UMulticastDelegate)                        SelectedChanged                                             OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(UMulticastDelegate)                        ButtonClicked                                               OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(EFortBangSize)                             BangSize                                                    OFFSET(get<T>, {0x250, 1, 0, 0})
	SMember(FVector2D)                                 BangOffset                                                  OFFSET(getStruct<T>, {0x254, 8, 0, 0})
	CMember(EFortBangType)                             BangType                                                    OFFSET(get<T>, {0x25C, 1, 0, 0})
	SMember(FName)                                     TutorialNameID                                              OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	CMember(EFortTutorialGlowType)                     TutorialGlowType                                            OFFSET(get<T>, {0x268, 1, 0, 0})
	CMember(UClass*)                                   Style                                                       OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               BrushSize                                                   OFFSET(get<T>, {0x278, 1, 0, 0})
	SMember(FSlateSound)                               PressedSlateSoundOverride                                   OFFSET(getStruct<T>, {0x280, 24, 0, 0})
	SMember(FSlateSound)                               HoveredSlateSoundOverride                                   OFFSET(getStruct<T>, {0x298, 24, 0, 0})
	DMember(bool)                                      bSelectable                                                 OFFSET(get<bool>, {0x2B0, 1, 0, 0})
	SMember(FName)                                     SelectionGroup                                              OFFSET(getStruct<T>, {0x2B8, 8, 0, 0})
	DMember(bool)                                      bToggleable                                                 OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      bClickable                                                  OFFSET(get<bool>, {0x2C1, 1, 0, 0})
	CMember(TEnumAsByte<EButtonClickMethod>)           ClickMethod                                                 OFFSET(get<T>, {0x2C2, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortBaseButton.SetStyle
	// void SetStyle(UClass* InStyle);                                                                                          // [0x2b78430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.SetSelectionGroup
	// void SetSelectionGroup(FName InSelectionGroup);                                                                          // [0x2b783b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.SetSelected
	// void SetSelected(bool InSelected);                                                                                       // [0x2b78320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.SetHovered
	// void SetHovered(bool InHovered);                                                                                         // [0x2b78090] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.SetClickMethod
	// void SetClickMethod(TEnumAsByte<EButtonClickMethod> InClickMethod);                                                      // [0x2b77d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.SetClickable
	// void SetClickable(bool InClickable);                                                                                     // [0x2b77df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.SetBrushSize
	// void SetBrushSize(TEnumAsByte<EFortBrushSize> InSize);                                                                   // [0x2b77cf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.SetBangVisibility
	// void SetBangVisibility(bool bVisible);                                                                                   // [0x2b77c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.OnButtonClicked
	// void OnButtonClicked();                                                                                                  // [0x2b775d0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortBaseButton.GetStyle
	// UFortButtonStyle* GetStyle();                                                                                            // [0x2b771b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseButton.GetSelectionGroupIndex
	// int32_t GetSelectionGroupIndex();                                                                                        // [0x2b77180] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseButton.GetSelected
	// bool GetSelected();                                                                                                      // [0x2b77150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseButton.GetCurrentStateStyle
	// FFortStateStyle GetCurrentStateStyle();                                                                                  // [0x2b76c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseButton.GetCurrentFont
	// FSlateFontInfo GetCurrentFont();                                                                                         // [0x2b76c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseButton.GetCurrentCustomPadding
	// FMargin GetCurrentCustomPadding();                                                                                       // [0x2b76bc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseButton.GetCurrentButtonPadding
	// FMargin GetCurrentButtonPadding();                                                                                       // [0x2b76b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseButton.ForceClick
	// void ForceClick();                                                                                                       // [0x2b775d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortBluGloCounter
/// Size: 0x0008 (0x000218 - 0x000220)
class UFortBluGloCounter : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:


	/// Functions
	// Function /Script/FortniteUI.FortBluGloCounter.OnBluGloQuantityChanged
	// void OnBluGloQuantityChanged(int32_t Quantity);                                                                          // [0x2b77540] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortBorderStyleList
/// Size: 0x0008 (0x000210 - 0x000218)
class UFortBorderStyleList : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	SMember(FName)                                     BordersPath                                                 OFFSET(getStruct<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortBorderStyleList.GetBorderStyles
	// TArray<UClass*> GetBorderStyles();                                                                                       // [0x2b768a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortButtonInternalWidget
/// Size: 0x0018 (0x000420 - 0x000438)
class UFortButtonInternalWidget : public UButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1080;

public:
	DMember(bool)                                      IsClickable                                                 OFFSET(get<bool>, {0x420, 1, 0, 0})
};

/// Class /Script/FortniteUI.FortCampaignMap
/// Size: 0x0140 (0x000210 - 0x000350)
class UFortCampaignMap : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FFortSwipeDetector)                        SwipeDetector                                               OFFSET(getStruct<T>, {0x210, 320, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCampaignMap.OnSwipeRight
	// void OnSwipeRight();                                                                                                     // [0x2b77a70] Final|Native|Private 
	// Function /Script/FortniteUI.FortCampaignMap.OnSwipeLeft
	// void OnSwipeLeft();                                                                                                      // [0x2b77a50] Final|Native|Private 
	// Function /Script/FortniteUI.FortCampaignMap.OnShowPreviousPage
	// void OnShowPreviousPage();                                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortCampaignMap.OnShowNextPage
	// void OnShowNextPage();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortCapturePointWidget
/// Size: 0x0010 (0x000218 - 0x000228)
class UFortCapturePointWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:


	/// Functions
	// Function /Script/FortniteUI.FortCapturePointWidget.OnCapturePointDataChanged
	// void OnCapturePointDataChanged(bool bActivated, bool bLocked, float CapturePercentage, TEnumAsByte<ECaptureState> CaptureState, TEnumAsByte<EFortTeam> ControllingTeam); // [0x2b775f0] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortChatContainer
/// Size: 0x0018 (0x000218 - 0x000230)
class UFortChatContainer : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	DMember(bool)                                      MinimizeEnabled                                             OFFSET(get<bool>, {0x218, 1, 0, 0})
	DMember(bool)                                      AutoReleaseFocus                                            OFFSET(get<bool>, {0x219, 1, 0, 0})
	DMember(bool)                                      AllowEmotes                                                 OFFSET(get<bool>, {0x21A, 1, 0, 0})
	DMember(float)                                     ListFadeTime                                                OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(int32_t)                                   MinimizedChatMessageNum                                     OFFSET(get<int32_t>, {0x220, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortChatContainer.SetNativeWidgetHost
	// void SetNativeWidgetHost(UNativeWidgetHost* InNativeWidgetHost);                                                         // [0x2b78120] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortChatContainer.AttachChatWindowToNativeWidget
	// void AttachChatWindowToNativeWidget();                                                                                   // [0x2b76820] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortChatWidget
/// Size: 0x0048 (0x000110 - 0x000158)
class UFortChatWidget : public UNativeWidgetHost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(bool)                                      MinimizeEnabled                                             OFFSET(get<bool>, {0x110, 1, 0, 0})
	DMember(bool)                                      AutoReleaseFocus                                            OFFSET(get<bool>, {0x111, 1, 0, 0})
	DMember(bool)                                      AllowEmotes                                                 OFFSET(get<bool>, {0x112, 1, 0, 0})
	DMember(float)                                     ListFadeTime                                                OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(int32_t)                                   MinimizedChatMessageNum                                     OFFSET(get<int32_t>, {0x118, 4, 0, 0})
	DMember(bool)                                      ThrottleChat                                                OFFSET(get<bool>, {0x11C, 1, 0, 0})
	DMember(float)                                     ThrottleTicketTime                                          OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(int32_t)                                   ThrottleTicketCount                                         OFFSET(get<int32_t>, {0x124, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnChatEnteredEvent                                          OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnUserListChanged                                           OFFSET(get<T>, {0x138, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortChatWidget.SetControllerActionBrush
	// void SetControllerActionBrush(FSlateBrush SlateBrush);                                                                   // [0x2b77e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortChatWidget.FocusChatEntry
	// void FocusChatEntry();                                                                                                   // [0x2b76880] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortCheatMenuFactory
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortCheatMenuFactory : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortCheatMenuFactory.AddStoreCheatMenu
	// void AddStoreCheatMenu(UCommonUserWidget* Widget);                                                                       // [0x2b767b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortCheatMenuFactory.AddGrantCheatMenu
	// void AddGrantCheatMenu(UCommonUserWidget* Widget, FString TemplateId, FString InstanceId);                               // [0x2b76690] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortCollectionBookGenericRewardWidget
/// Size: 0x0018 (0x000210 - 0x000228)
class UFortCollectionBookGenericRewardWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	DMember(bool)                                      bUpdateVisibilityBasedOnRewardExistence                     OFFSET(get<bool>, {0x210, 1, 1, 0})
	CMember(ESlateVisibility)                          VisibilityWhenNoRewardSpecified                             OFFSET(get<T>, {0x214, 1, 0, 0})
	CMember(ESlateVisibility)                          VisibilityWhenRewardSpecified                               OFFSET(get<T>, {0x215, 1, 0, 0})
	CMember(UFortCollectionBookRewardCardWidget*)      RewardCardWidget                                            OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(ECollectionBookRewardStatus)               RewardStatus                                                OFFSET(get<T>, {0x220, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookGenericRewardWidget.SetRewardStatus
	// void SetRewardStatus(ECollectionBookRewardStatus Status);                                                                // [0x2b781a0] Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortCollectionBookGenericRewardWidget.SetRewards
	// void SetRewards(FFortRewardInfo& Rewards);                                                                               // [0x2b78220] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortCollectionBookGenericRewardWidget.SetCurrentItemToDisplay
	// void SetCurrentItemToDisplay(UFortItem* ItemToDisplay);                                                                  // [0x2b78000] Native|Protected     
	// Function /Script/FortniteUI.FortCollectionBookGenericRewardWidget.OnRewardStatusChanged
	// void OnRewardStatusChanged(ECollectionBookRewardStatus NewStatus);                                                       // [0x2b779d0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookGenericRewardWidget.HasRewards
	// bool HasRewards();                                                                                                       // [0x2b77360] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortCollectionBookGenericRewardWidget.GetRewardStatus
	// ECollectionBookRewardStatus GetRewardStatus();                                                                           // [0x2b77120] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortCollectionBookGenericRewardWidget.ClearRewards
	// void ClearRewards();                                                                                                     // [0x2ff9f0] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortCollectionBookOverviewWidget
/// Size: 0x0048 (0x000210 - 0x000258)
class UFortCollectionBookOverviewWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(UMulticastDelegate)                        OnCollectionBookPageSelected                                OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCollectionBookPageClicked                                 OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UCommonTreeView*)                          PageTreeViewWidget                                          OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(TArray<UFortCollectionBookCategory*>)      CategoryObjectPool                                          OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(UFortCollectionBookPage*)                  LastSelectedPage                                            OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(UFortCollectionBookCategory*)              LastSelectedCategory                                        OFFSET(get<T>, {0x250, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookOverviewWidget.OnPageItemSelected
	// void OnPageItemSelected(UObject* Item, bool bSelected);                                                                  // [0x2b77900] Native|Protected     
	// Function /Script/FortniteUI.FortCollectionBookOverviewWidget.OnPageItemClicked
	// void OnPageItemClicked(UObject* Item);                                                                                   // [0x2b77870] Native|Protected     
	// Function /Script/FortniteUI.FortCollectionBookOverviewWidget.OnGetChildrenForPageCategory
	// TArray<UObject*> OnGetChildrenForPageCategory(UObject* CategoryObject);                                                  // [0x2b77790] Native|Protected     
	// Function /Script/FortniteUI.FortCollectionBookOverviewWidget.OnDeactivated
	// void OnDeactivated();                                                                                                    // [0x2b87720] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookOverviewWidget.OnActivated
	// void OnActivated();                                                                                                      // [0x2b7aa60] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortCollectionBookPageCompletionRewardWidget
/// Size: 0x0000 (0x000228 - 0x000228)
class UFortCollectionBookPageCompletionRewardWidget : public UFortCollectionBookGenericRewardWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
};

/// Class /Script/FortniteUI.FortCollectionBookPageDetailsWidget
/// Size: 0x0070 (0x000210 - 0x000280)
class UFortCollectionBookPageDetailsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(UCommonTextBlock*)                         PageCompletionText                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UFortMaterialProgressBar*)                 ProgressBar                                                 OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UFortCollectionBookPageCompletionRewardWidget*) PageRewardWidget                                       OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UCommonButton*)                            RewardDetailsButton                                         OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UFortCollectionBookPage*)                  DetailsPage                                                 OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UClass*)                                   RewardDetailsModalWidgetClass                               OFFSET(get<T>, {0x238, 40, 0, 0})
	SMember(FText)                                     ModalTitle                                                  OFFSET(getStruct<T>, {0x260, 24, 0, 0})
	CMember(UFortCollectionBookRewardModalWidget*)     RewardDetailsModalWidget                                    OFFSET(get<T>, {0x278, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookPageDetailsWidget.OnSlotItemComplete
	// void OnSlotItemComplete(UFortAccountItem* SlottedItem, FName SlotId);                                                    // [0x2b7ba10] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookPageDetailsWidget.OnRewardDetailsButtonClicked
	// void OnRewardDetailsButtonClicked(UCommonButton* ClickedButton);                                                         // [0x2b7b630] Final|Native|Private 
	// Function /Script/FortniteUI.FortCollectionBookPageDetailsWidget.OnPageProgressionUpdated
	// void OnPageProgressionUpdated(int32_t TotalFilledSlots, int32_t TotalSlots, EFortCollectionBookState State);             // [0x2b7b530] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPageDetailsWidget.OnDetailsPageChanged
	// void OnDetailsPageChanged(UFortCollectionBookPage* InNewDetailsPage);                                                    // [0x2b87b00] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPageDetailsWidget.HandleRewardDetailsModalWidgetDeactivated
	// void HandleRewardDetailsModalWidgetDeactivated(UCommonActivatablePanel* DeactivatedPanel);                               // [0x2b7ab20] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortCollectionBookPageListWidget
/// Size: 0x0030 (0x000800 - 0x000830)
class UFortCollectionBookPageListWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
	CMember(UCommonTextBlock*)                         PageNameWidget                                              OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(UCommonNumericTextBlock*)                  AvailableSlotsWidget                                        OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(UCommonTextBlock*)                         PageCompletionWidget                                        OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(TWeakObjectPtr<UObject*>)                  AssociatedPageOrCategory                                    OFFSET(get<T>, {0x820, 8, 0, 0})
	DMember(bool)                                      bIsExpanded                                                 OFFSET(get<bool>, {0x828, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookPageListWidget.SetupAsPage
	// void SetupAsPage(UFortCollectionBookPage* Page);                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPageListWidget.SetupAsCategory
	// void SetupAsCategory(UFortCollectionBookCategory* Category);                                                             // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPageListWidget.OnSlotItemComplete
	// void OnSlotItemComplete(UFortAccountItem* SlottedItem, FName SlotId);                                                    // [0x2b7bad0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookPageListWidget.OnPageDetailsUpdated
	// void OnPageDetailsUpdated(int32_t AvailableSlots, int32_t FilledSlots, int32_t TotalSlots, EFortCollectionBookState State); // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPageListWidget.OnExpansionChanged
	// void OnExpansionChanged(bool bExpanded);                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPageListWidget.OnCategoryDetailsUpdated
	// void OnCategoryDetailsUpdated(int32_t AvailableSlots, int32_t FilledSlots, int32_t TotalSlots);                          // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortCollectionBookPicker
/// Size: 0x0020 (0x000278 - 0x000298)
class UFortCollectionBookPicker : public UFortItemPickerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UMulticastDelegate)                        OnSlotItemConfirmationCompleteEvent                         OFFSET(get<T>, {0x278, 16, 0, 0})
	CMember(UFortAccountItem*)                         CurrentSlottedItem                                          OFFSET(get<T>, {0x290, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookPicker.SlotItemConfirmationComplete
	// void SlotItemConfirmationComplete(UFortItem* CommittedItem, FFortDialogExternalLatentActionHandle LatentActionHandle);   // [0x2b7c300] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortCollectionBookPicker.OnSlotItemConfirmed__DelegateSignature
	// void OnSlotItemConfirmed__DelegateSignature(UFortItem* ItemToSlot, FName SlotId, FFortDialogExternalLatentActionHandle LatentActionHandle); // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortCollectionBookPicker.GetCurrentSlottedItem
	// UFortAccountItem* GetCurrentSlottedItem();                                                                               // [0x26408f0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortCollectionBookPrimaryPanel
/// Size: 0x00C0 (0x0003C0 - 0x000480)
class UFortCollectionBookPrimaryPanel : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(UMulticastDelegate)                        OnCollectionBookPageSelectedDelegate                        OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCollectionBookPageClickedDelegate                         OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCollectionBookSectionClickedDelegate                      OFFSET(get<T>, {0x3E0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       BackActionRowHandle                                         OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       SummonInfoPanelActionRowHandle                              OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	CMember(UFortCollectionBookOverviewWidget*)        OverviewWidget                                              OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonTileView*)                          SectionTileViewWidget                                       OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(ECollectionBookPrimaryNavTarget)           CurrentNavTarget                                            OFFSET(get<T>, {0x420, 1, 0, 0})
	CMember(UFortCollectionBookSection*)               LastClickedSection                                          OFFSET(get<T>, {0x428, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookPrimaryPanel.OnSummonInfoPanelExecuted
	// void OnSummonInfoPanelExecuted(bool& bPassThrough);                                                                      // [0x2b7bfe0] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPrimaryPanel.OnInputMethodChanged
	// void OnInputMethodChanged(ECommonInputType CurrentInputType);                                                            // [0x2b7b120] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookPrimaryPanel.OnCollectionBookSectionClicked
	// void OnCollectionBookSectionClicked(UFortCollectionBookSection* ClickedSection);                                         // [0x2b7b010] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPrimaryPanel.OnCollectionBookPageSelected
	// void OnCollectionBookPageSelected(UFortCollectionBookPage* SelectedPage);                                                // [0x2b820c0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPrimaryPanel.OnCollectionBookPageClicked
	// void OnCollectionBookPageClicked(UFortCollectionBookPage* ClickedPage);                                                  // [0x2b82030] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookPrimaryPanel.OnBackActionExecuted
	// void OnBackActionExecuted(bool& bPassThrough);                                                                           // [0x2b7acd0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortCollectionBookPrimaryPanel.HandleSectionTileClicked
	// void HandleSectionTileClicked(UObject* Item);                                                                            // [0x2b7ac20] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortCollectionBookProgressionRewardDetailInspectWidget
/// Size: 0x0018 (0x000210 - 0x000228)
class UFortCollectionBookProgressionRewardDetailInspectWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UCommonNumericTextBlock*)                  LevelTextWidget                                             OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UFortRewardInfoWidget*)                    RewardWidget                                                OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookProgressionRewardDetailInspectWidget.SetAssociatedLevel
	// void SetAssociatedLevel(int32_t Level);                                                                                  // [0x2b7c080] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortCollectionBookProgressionRewardDetailInspectWidget.OnXPRequiredChanged
	// void OnXPRequiredChanged(int32_t NewXPRequired);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookProgressionRewardDetailInspectWidget.GetXPRequired
	// int32_t GetXPRequired();                                                                                                 // [0x2b7aa80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortCollectionBookProgressionRewardsModalWidget
/// Size: 0x0070 (0x0003F0 - 0x000460)
class UFortCollectionBookProgressionRewardsModalWidget : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(UClass*)                                   RewardWidgetClass                                           OFFSET(get<T>, {0x3F0, 40, 0, 0})
	SMember(FMargin)                                   RewardWidgetPadding                                         OFFSET(getStruct<T>, {0x418, 16, 0, 0})
	DMember(int32_t)                                   NumRewardsToShow                                            OFFSET(get<int32_t>, {0x428, 4, 0, 0})
	CMember(UVerticalBox*)                             RewardBoxWidget                                             OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(UVerticalBox*)                             MajorRewardBoxWidget                                        OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(UCommonTextBlock*)                         XPTextWidget                                                OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(UCommonNumericTextBlock*)                  LevelTextWidget                                             OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(UCommonButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x450, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookProgressionRewardsModalWidget.OnSelectedButtonChanged
	// void OnSelectedButtonChanged(UCommonButton* SelectedButton, int32_t ButtonIndex);                                        // [0x2b7b7c0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookProgressionRewardsModalWidget.OnLevelProgressionSet
	// void OnLevelProgressionSet(int32_t CurrentLevel, float NextLvlPct);                                                      // [0x2b7b340] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookProgressionRewardsModalWidget.OnInputMethodChanged
	// void OnInputMethodChanged(bool bUsingGamepad);                                                                           // [0x2b7b1a0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookProgressionRewardsModalWidget.InspectItemBP
	// void InspectItemBP(UFortItem* Item);                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortCollectionBookProgressionRewardsPreviewWidget
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortCollectionBookProgressionRewardsPreviewWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(UFortCollectionBookProgressionRewardWidget*) NextRewardWidget                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UFortCollectionBookProgressionRewardWidget*) NextMajorRewardWidget                                     OFFSET(get<T>, {0x218, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortCollectionBookProgressionRewardWidget
/// Size: 0x0010 (0x000228 - 0x000238)
class UFortCollectionBookProgressionRewardWidget : public UFortCollectionBookGenericRewardWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(UCommonNumericTextBlock*)                  LevelTextWidget                                             OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UCommonTextBlock*)                         DisplayNameWidget                                           OFFSET(get<T>, {0x230, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookProgressionRewardWidget.SetAssociatedLevel
	// void SetAssociatedLevel(int32_t Level);                                                                                  // [0x2b7c100] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortCollectionBookProgressWidget
/// Size: 0x0060 (0x000210 - 0x000270)
class UFortCollectionBookProgressWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	DMember(int32_t)                                   CachedXPLevel                                               OFFSET(get<int32_t>, {0x210, 4, 0, 0})
	DMember(float)                                     CachedXPCompletionPct                                       OFFSET(get<float>, {0x214, 4, 0, 0})
	CMember(UClass*)                                   RewardDetailsModalWidgetClass                               OFFSET(get<T>, {0x218, 40, 0, 0})
	CMember(UFortCollectionBookProgressionRewardsPreviewWidget*) ProgressionRewardsPreviewWidget                   OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UCommonTextBlock*)                         XPTextWidget                                                OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(UCommonNumericTextBlock*)                  LevelTextWidget                                             OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(UCommonButton*)                            DetailsButtonWidget                                         OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(UFortCollectionBookPageDetailsWidget*)     PageDetailsWidget                                           OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(UFortCollectionBookProgressionRewardsModalWidget*) DetailsModalWidget                                  OFFSET(get<T>, {0x268, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookProgressWidget.OnSlottedItemOperationComplete
	// void OnSlottedItemOperationComplete(UFortAccountItem* ItemSlotted, FName SlotId);                                        // [0x2b7be60] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookProgressWidget.OnDetailsButtonClicked
	// void OnDetailsButtonClicked(UCommonButton* ClickedButton);                                                               // [0x2b7b0a0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookProgressWidget.OnCollectionBookPreviewXPChange
	// void OnCollectionBookPreviewXPChange(float PreviewCompletionPct);                                                        // [0x2b7af90] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookProgressWidget.OnCollectionBookPageSelected
	// void OnCollectionBookPageSelected(UFortCollectionBookPage* SelectedPage);                                                // [0x2b7af00] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookProgressWidget.OnCollectionBookLevelProgressionChanged
	// void OnCollectionBookLevelProgressionChanged(float NewCompletionPct);                                                    // [0x2b7ae80] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookProgressWidget.OnCollectionBookLevelChanged
	// void OnCollectionBookLevelChanged(int32_t NewLevel);                                                                     // [0x2b7adf0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookProgressWidget.HandleDetailsModalWidgetDeactivated
	// void HandleDetailsModalWidgetDeactivated(UCommonActivatablePanel* DeactivatedPanel);                                     // [0x2b7aaa0] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortCollectionBookRecycleSlotResultsWidget
/// Size: 0x0018 (0x000210 - 0x000228)
class UFortCollectionBookRecycleSlotResultsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UPanelWidget*)                             RecycleResultsWidget                                        OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(EFortItemCardSize)                         ItemCardSize                                                OFFSET(get<T>, {0x218, 1, 0, 0})
	CMember(UFortAccountItem*)                         ItemToRecycle                                               OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookRecycleSlotResultsWidget.SetCurrentItemToRecycle
	// void SetCurrentItemToRecycle(UFortAccountItem* InItemToRecycle);                                                         // [0x2b7c180] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortCollectionBookRewardCardWidget
/// Size: 0x0080 (0x000210 - 0x000290)
class UFortCollectionBookRewardCardWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(UMulticastDelegate)                        OnDisplayedItemChangedEvent                                 OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UFortMultiSizeItemCard*)                   ItemCardWidget                                              OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UWidget*)                                  MultiItemRewardOverlay                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UWidget*)                                  ChoiceRewardOverlay                                         OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(float)                                     UpdateCardInterval                                          OFFSET(get<float>, {0x238, 4, 0, 0})
	CMember(EFortItemCardSize)                         ItemCardSize                                                OFFSET(get<T>, {0x23C, 1, 0, 0})
	DMember(bool)                                      bDisplayAsRewardCard                                        OFFSET(get<bool>, {0x23D, 1, 0, 0})
	SMember(FFortRewardInfo)                           RepresentedRewards                                          OFFSET(getStruct<T>, {0x240, 48, 0, 0})
	CMember(TArray<UFortItem*>)                        DummyItems                                                  OFFSET(get<T>, {0x270, 16, 0, 0})
	SMember(FTimerHandle)                              UpdateCardTimer                                             OFFSET(getStruct<T>, {0x280, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookRewardCardWidget.SetRewards
	// void SetRewards(FFortRewardInfo& Rewards);                                                                               // [0x2b7c200] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortCollectionBookRewardCardWidget.OnDisplayedItemChangedEvent__DelegateSignature
	// void OnDisplayedItemChangedEvent__DelegateSignature(UFortItem* DisplayedItem);                                           // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortCollectionBookRewardCardWidget.HasRewards
	// bool HasRewards();                                                                                                       // [0x2b7aca0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortCollectionBookRewardCardWidget.ClearRewards
	// void ClearRewards();                                                                                                     // [0x2b7aa60] Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortCollectionBookRewardModalWidget
/// Size: 0x0050 (0x0003C0 - 0x000410)
class UFortCollectionBookRewardModalWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UCommonTextBlock*)                         TitleWidget                                                 OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(UFortRewardInfoWidget*)                    RewardWidget                                                OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(UFortMaterialProgressBar*)                 ProgressBar                                                 OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(UCommonTextBlock*)                         ProgressTextWidget                                          OFFSET(get<T>, {0x3D8, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortCollectionBookSectionCompletionRewardWidget
/// Size: 0x0058 (0x000228 - 0x000280)
class UFortCollectionBookSectionCompletionRewardWidget : public UFortCollectionBookGenericRewardWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(UCommonButton*)                            RewardDetailsButton                                         OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UClass*)                                   RewardDetailsModalWidgetClass                               OFFSET(get<T>, {0x230, 40, 0, 0})
	SMember(FText)                                     ModalTitle                                                  OFFSET(getStruct<T>, {0x258, 24, 0, 0})
	CMember(UFortCollectionBookRewardModalWidget*)     RewardDetailsModalWidget                                    OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(UFortCollectionBookSection*)               Section                                                     OFFSET(get<T>, {0x278, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookSectionCompletionRewardWidget.OnRewardDetailsButtonClicked
	// void OnRewardDetailsButtonClicked(UCommonButton* ClickedButton);                                                         // [0x2b7b6b0] Final|Native|Private 
	// Function /Script/FortniteUI.FortCollectionBookSectionCompletionRewardWidget.HandleRewardDetailsModalWidgetDeactivated
	// void HandleRewardDetailsModalWidgetDeactivated(UCommonActivatablePanel* DeactivatedPanel);                               // [0x2b7aba0] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortCollectionBookSectionPanel
/// Size: 0x0150 (0x0003C0 - 0x000510)
class UFortCollectionBookSectionPanel : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1296;

public:
	CMember(UMulticastDelegate)                        OnSectionCloseRequest                                       OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPreviewXPChangeEvent                                      OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(UCommonTextBlock*)                         SectionNameTextWidget                                       OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(UFortCollectionBookSlotView*)              SlotViewWidget                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(UFortCollectionBookPicker*)                SlotItemPicker                                              OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UWidget*)                                  ContextOverlayWidget                                        OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UTextBlock*)                               ContextTextWidget                                           OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UFortCollectionBookSectionCompletionRewardWidget*) SectionRewardWidget                                 OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UWidget*)                                  ItemAcquisitionSourceContainerWidget                        OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonTextBlock*)                         ItemAcquisitionSourceDescWidget                             OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(UCommonTextBlock*)                         ItemAcquisitionSourceDesc2Widget                            OFFSET(get<T>, {0x420, 8, 0, 0})
	SMember(FDataTableRowHandle)                       BackActionRowHandle                                         OFFSET(getStruct<T>, {0x428, 16, 0, 0})
	SMember(FDataTableRowHandle)                       CloseActionRowHandle                                        OFFSET(getStruct<T>, {0x438, 16, 0, 0})
	SMember(FDataTableRowHandle)                       SlotItemActionRowHandle                                     OFFSET(getStruct<T>, {0x448, 16, 0, 0})
	SMember(FDataTableRowHandle)                       InspectItemActionRowHandle                                  OFFSET(getStruct<T>, {0x458, 16, 0, 0})
	SMember(FDataTableRowHandle)                       InspectCollectionBookItemActionRowHandle                    OFFSET(getStruct<T>, {0x468, 16, 0, 0})
	SMember(FDataTableRowHandle)                       InspectPreviewItemActionRowHandle                           OFFSET(getStruct<T>, {0x478, 16, 0, 0})
	SMember(FDataTableRowHandle)                       OpenPickerActionRowHandle                                   OFFSET(getStruct<T>, {0x488, 16, 0, 0})
	SMember(FDataTableRowHandle)                       LogAllowedItemsActionRowHandle                              OFFSET(getStruct<T>, {0x498, 16, 0, 0})
	CMember(ECollectionBookSectionNavTarget)           CurrentNavTarget                                            OFFSET(get<T>, {0x4A8, 1, 0, 0})
	CMember(UFortCollectionBookSection*)               AssociatedSection                                           OFFSET(get<T>, {0x4B0, 8, 0, 0})
	DMember(bool)                                      bHasSummonedInspectPanel                                    OFFSET(get<bool>, {0x4B8, 1, 0, 0})
	SMember(FFortDialogExternalLatentActionHandle)     SlotConfirmationDialogLatentHandle                          OFFSET(getStruct<T>, {0x4BC, 4, 0, 0})
	CMember(UMulticastDelegate)                        OnShowItemDetailEvent                                       OFFSET(get<T>, {0x4C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSlotItemConfirmEvent                                      OFFSET(get<T>, {0x4D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInspectItemEvent                                          OFFSET(get<T>, {0x4E0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSlottedItemOperationComplete
	// void OnSlottedItemOperationComplete(UFortAccountItem* SlottedItem, FName SlotId);                                        // [0x2b7bf20] Final|Native|Private 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSlotPickerItemSelected
	// void OnSlotPickerItemSelected(UFortItem* SelectedItem);                                                                  // [0x2b7bde0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSlotPickerItemHovered
	// void OnSlotPickerItemHovered(UFortItem* HoveredItem);                                                                    // [0x2b7bd60] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSlotItemConfirmationCompleted
	// void OnSlotItemConfirmationCompleted(UFortItem* SelectedItem, FName SlotId, FFortDialogExternalLatentActionHandle LatentActionHandle); // [0x2b7bc50] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSlotItemComplete
	// void OnSlotItemComplete(UFortAccountItem* SlottedItem, FName SlotId);                                                    // [0x2b7bb90] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSlotItemActionExecuted
	// void OnSlotItemActionExecuted(bool& bPassThrough);                                                                       // [0x2b7b980] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSlotButtonSelected
	// void OnSlotButtonSelected(UFortCollectionBookSlotButton* SlotButton);                                                    // [0x2b7b900] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSlotButtonCommitted
	// void OnSlotButtonCommitted(UFortCollectionBookSlotButton* SlotButton);                                                   // [0x2b7b880] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnSectionChanged
	// void OnSectionChanged(UFortCollectionBookSection* Section);                                                              // [0x2b7b730] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnOpenPickerActionExecuted
	// void OnOpenPickerActionExecuted(bool& bPassThrough);                                                                     // [0x2b7b4a0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnLogAllowedItemsActionExecuted
	// void OnLogAllowedItemsActionExecuted(bool& bPassThrough);                                                                // [0x2b7b410] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnItemInspectAction__DelegateSignature
	// void OnItemInspectAction__DelegateSignature(UFortItem* SelectedItem, bool EnableItemActions, bool IsPlaceholderItem);    // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnItemAction__DelegateSignature
	// void OnItemAction__DelegateSignature(UFortItem* SelectedItem);                                                           // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnInspectActionExecuted
	// void OnInspectActionExecuted(bool& bPassThrough);                                                                        // [0x2b7b2b0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnInputMethodChanged
	// void OnInputMethodChanged(ECommonInputType CurrentInputType);                                                            // [0x2b7b230] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookSectionPanel.OnBackActionExecuted
	// void OnBackActionExecuted(bool& bPassThrough);                                                                           // [0x2b7ad60] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteUI.FortCollectionBookSectionTileWidget
/// Size: 0x0078 (0x000800 - 0x000878)
class UFortCollectionBookSectionTileWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2168;

public:
	CMember(UClass*)                                   SlotWidgetClass                                             OFFSET(get<T>, {0x808, 40, 0, 0})
	SMember(FMargin)                                   SlotWidgetPadding                                           OFFSET(getStruct<T>, {0x830, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         SlotWidgetHorizontalAlignment                               OFFSET(get<T>, {0x840, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           SlotWidgetVerticalAlignment                                 OFFSET(get<T>, {0x841, 1, 0, 0})
	DMember(int32_t)                                   MaxNumSlotsSupported                                        OFFSET(get<int32_t>, {0x844, 4, 0, 0})
	CMember(UHorizontalBox*)                           SlotBoxWidget                                               OFFSET(get<T>, {0x848, 8, 0, 0})
	CMember(UCommonTextBlock*)                         SectionNameWidget                                           OFFSET(get<T>, {0x850, 8, 0, 0})
	CMember(UFortCollectionBookGenericRewardWidget*)   SectionRewardWidget                                         OFFSET(get<T>, {0x858, 8, 0, 0})
	CMember(UFortCollectionBookSection*)               AssociatedSection                                           OFFSET(get<T>, {0x860, 8, 0, 0})
	CMember(TArray<UFortCollectionBookSlotWidget*>)    SlotWidgets                                                 OFFSET(get<T>, {0x868, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookSectionTileWidget.OnSectionSlotUpdate
	// void OnSectionSlotUpdate(int32_t NumFilledSlots, int32_t NumSlots, EFortCollectionBookState SectionState);               // [0x2b82300] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookSectionTileWidget.OnItemSlotted
	// void OnItemSlotted(UFortAccountItem* ItemSlotted, FName SlotId);                                                         // [0x2b821b0] Native|Protected     
};

/// Class /Script/FortniteUI.FortCollectionBookSlotButton
/// Size: 0x0008 (0x000800 - 0x000808)
class UFortCollectionBookSlotButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2056;

public:
	CMember(UFortCollectionBookSlotWidget*)            CollectionBookSlotWidget                                    OFFSET(get<T>, {0x800, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookSlotButton.OnSlottedItemUpdated
	// void OnSlottedItemUpdated();                                                                                             // [0x2b82730] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortCollectionBookSlotDetailsWidget
/// Size: 0x0000 (0x000210 - 0x000210)
class UFortCollectionBookSlotDetailsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FortniteUI.FortCollectionBookSlotView
/// Size: 0x0150 (0x000210 - 0x000360)
class UFortCollectionBookSlotView : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(UClass*)                                   CollectionBookButtonClass                                   OFFSET(get<T>, {0x210, 40, 0, 0})
	CMember(UHorizontalBox*)                           CollectionBookButtonBox                                     OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UFortCommittableButtonGroup*)              CollectionBookSlotButtonGroup                               OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(TArray<UFortCollectionBookSlotButton*>)    CollectionBookSlotButtons                                   OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(UFortCollectionBookSection*)               AssociatedSection                                           OFFSET(get<T>, {0x258, 8, 0, 0})
	DMember(bool)                                      bSendOnSlotCommittedEventOnMouseClick                       OFFSET(get<bool>, {0x260, 1, 0, 0})
	DMember(bool)                                      bCommitSelectedItemsOnClick                                 OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(int32_t)                                   PreviousSelectedButtonIdx                                   OFFSET(get<int32_t>, {0x354, 4, 0, 0})
	DMember(int32_t)                                   CurrentSelectedButtonIdx                                    OFFSET(get<int32_t>, {0x358, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookSlotView.OnSlotButtonCommitted
	// void OnSlotButtonCommitted(UCommonButton* CommittedButton, int32_t ButtonIdx);                                           // [0x2b825a0] Native|Protected     
	// Function /Script/FortniteUI.FortCollectionBookSlotView.OnSlotButtonClicked
	// void OnSlotButtonClicked(UCommonButton* ClickedButton, int32_t ButtonIdx);                                               // [0x2b824d0] Native|Protected     
	// Function /Script/FortniteUI.FortCollectionBookSlotView.OnSelectedSlotButtonChanged
	// void OnSelectedSlotButtonChanged(UCommonButton* SelectedButton, int32_t ButtonIdx);                                      // [0x2b82400] Native|Protected     
};

/// Class /Script/FortniteUI.FortCollectionBookSlotWidget
/// Size: 0x0128 (0x000210 - 0x000338)
class UFortCollectionBookSlotWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(EFortItemCardSize)                         ItemCardSize                                                OFFSET(get<T>, {0x220, 1, 0, 0})
	DMember(bool)                                      bIsRewardCard                                               OFFSET(get<bool>, {0x221, 1, 0, 0})
	CMember(UFortMultiSizeItemCard*)                   ItemCardWidget                                              OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UWidget*)                                  UnslottedOverlayWidget                                      OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UWidget*)                                  ReadyToSlotOverlayWidget                                    OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UWidget*)                                  UnslottedButReadyOverlayWidget                              OFFSET(get<T>, {0x240, 8, 0, 0})
	SMember(FName)                                     SlotRowName                                                 OFFSET(getStruct<T>, {0x248, 8, 0, 0})
	SMember(FText)                                     ItemAvailableToSlotText                                     OFFSET(getStruct<T>, {0x250, 24, 0, 0})
	SMember(FText)                                     NoItemsAvailableToSlotText                                  OFFSET(getStruct<T>, {0x268, 24, 0, 0})
	SMember(FText)                                     HigherQualityItemsAvailableToSlotAndUpgradeAvailableText    OFFSET(getStruct<T>, {0x280, 24, 0, 0})
	SMember(FText)                                     HigherQualityItemsAvailableToSlotAndEvolveAvailableText     OFFSET(getStruct<T>, {0x298, 24, 0, 0})
	SMember(FText)                                     HigherQualityItemsAvailableToSlotText                       OFFSET(getStruct<T>, {0x2B0, 24, 0, 0})
	SMember(FText)                                     ItemInSlotFullyUpgradedText                                 OFFSET(getStruct<T>, {0x2C8, 24, 0, 0})
	SMember(FText)                                     ItemInSlotCanBeUpgradedText                                 OFFSET(getStruct<T>, {0x2E0, 24, 0, 0})
	SMember(FText)                                     ItemInSlotCanBeEvolvedText                                  OFFSET(getStruct<T>, {0x2F8, 24, 0, 0})
	CMember(UFortItem*)                                SlottedItemRepresentation                                   OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookSlotWidget.OnSlottedItemOperationComplete
	// void OnSlottedItemOperationComplete(UFortAccountItem* ItemSlotted, FName SlotId);                                        // [0x2b82670] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookSlotWidget.OnItemDestroyed
	// void OnItemDestroyed();                                                                                                  // [0x2b82190] Final|Native|Private 
	// Function /Script/FortniteUI.FortCollectionBookSlotWidget.OnItemCardUpdated
	// void OnItemCardUpdated();                                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookSlotWidget.IsItemSlotted
	// bool IsItemSlotted();                                                                                                    // [0x2b81df0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortCollectionBookSlotWidget.HasItemsToSlot
	// bool HasItemsToSlot();                                                                                                   // [0x2b81c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortCollectionBookSlotWidget.GetSlotRowName
	// FName GetSlotRowName();                                                                                                  // [0x2b816e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortCollectionBookSlotWidget.GetNumItemsToSlot
	// int32_t GetNumItemsToSlot();                                                                                             // [0x2b80f60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortCollectionBookSlotWidget.FortCollectionBookSlottedItemUpdatedDelegate__DelegateSignature
	// void FortCollectionBookSlottedItemUpdatedDelegate__DelegateSignature();                                                  // [0x154a140] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FortniteUI.FortCollectionBookWidget
/// Size: 0x0030 (0x0003F0 - 0x000420)
class UFortCollectionBookWidget : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(UFortCollectionBookProgressWidget*)        ProgressWidget                                              OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UCommonWidgetSwitcher*)                    MainWidgetSwitcher                                          OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UFortCollectionBookPrimaryPanel*)          PrimaryPanelWidget                                          OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UFortCollectionBookSectionPanel*)          SectionPanelWidget                                          OFFSET(get<T>, {0x408, 8, 0, 0})
	DMember(int32_t)                                   PrimaryPanelIdx                                             OFFSET(get<int32_t>, {0x410, 4, 0, 0})
	DMember(int32_t)                                   SectionPanelIdx                                             OFFSET(get<int32_t>, {0x414, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCollectionBookWidget.OnPreviewXPChangeRequest
	// void OnPreviewXPChangeRequest(int32_t XPChange);                                                                         // [0x2b82280] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookWidget.OnCollectionBookSectionCloseRequest
	// void OnCollectionBookSectionCloseRequest();                                                                              // [0x2b82150] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCollectionBookWidget.OnCollectionBookSectionClicked
	// void OnCollectionBookSectionClicked(UFortCollectionBookSection* ClickedSection);                                         // [0x2b7b010] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookWidget.OnCollectionBookPageSelected
	// void OnCollectionBookPageSelected(UFortCollectionBookPage* SelectedPage);                                                // [0x2b820c0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortCollectionBookWidget.OnCollectionBookPageClicked
	// void OnCollectionBookPageClicked(UFortCollectionBookPage* ClickedPage);                                                  // [0x2b82030] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortCommittableButtonGroup
/// Size: 0x0010 (0x000098 - 0x0000A8)
class UFortCommittableButtonGroup : public UCommonButtonGroup
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(UMulticastDelegate)                        OnButtonCommitted                                           OFFSET(get<T>, {0x98, 16, 0, 0})
};

/// Class /Script/FortniteUI.FortMultiSizeImage
/// Size: 0x0358 (0x000100 - 0x000458)
class UFortMultiSizeImage : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1112;

public:
	SMember(FFortMultiSizeBrush)                       MultiSizeBrush                                              OFFSET(getStruct<T>, {0x100, 816, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               BrushSize                                                   OFFSET(get<T>, {0x430, 1, 0, 0})
	SMember(FLinearColor)                              ColorAndOpacity                                             OFFSET(getStruct<T>, {0x434, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMultiSizeImage.SetMultiSizeBrush
	// void SetMultiSizeBrush(FFortMultiSizeBrush& MultiSizeBrush);                                                             // [0x2bc95a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortMultiSizeImage.SetColorAndOpacity
	// void SetColorAndOpacity(FLinearColor& Color);                                                                            // [0x2bc9490] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortMultiSizeImage.SetBrushSize
	// void SetBrushSize(TEnumAsByte<EFortBrushSize> BrushSize);                                                                // [0x2bc9390] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortComparisonResultIndicator
/// Size: 0x0008 (0x000458 - 0x000460)
class UFortComparisonResultIndicator : public UFortMultiSizeImage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	DMember(bool)                                      bShouldCollapseWhenNotShown                                 OFFSET(get<bool>, {0x458, 1, 0, 0})
	CMember(EFortBuffState)                            ComparisonResult                                            OFFSET(get<T>, {0x459, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortComparisonResultIndicator.SetComparisonResult
	// void SetComparisonResult(EFortBuffState ComparisonResult);                                                               // [0x2b828a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortCraftingBarWidget
/// Size: 0x0028 (0x000238 - 0x000260)
class UFortCraftingBarWidget : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(UCommonTextBlock*)                         CraftingText                                                OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UProgressBar*)                             CraftingProgressBar                                         OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     CompletedRemainVisibleTime                                  OFFSET(get<float>, {0x248, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortCraftingBarWidget.SetHideCraftingBar
	// void SetHideCraftingBar(bool bInHideCraftBar);                                                                           // [0x2b82920] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortCraftingBarWidget.OnCompletedSetHidden
	// void OnCompletedSetHidden();                                                                                             // [0x2b82170] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCraftingBarWidget.HandlePlayerStoppedCrafting
	// void HandlePlayerStoppedCrafting(bool bSuccess, EFortCraftFailCause CraftFailureCause);                                  // [0x2b81b30] Final|Native|Protected 
	// Function /Script/FortniteUI.FortCraftingBarWidget.HandlePlayerStartedCrafting
	// void HandlePlayerStartedCrafting();                                                                                      // [0x2b81b10] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortDailyRewards
/// Size: 0x0010 (0x0003F0 - 0x000400)
class UFortDailyRewards : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:


	/// Functions
	// Function /Script/FortniteUI.FortDailyRewards.TryGetDailyRewardsData
	// bool TryGetDailyRewardsData(FFortDailyRewardsData& OutDailyRewardsData, int32_t ItemCardsPerSchedule, int32_t MinEpicRewards); // [0x2b82b90] Final|Native|Private|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortDailyRewards.SetupDailyRewards
	// void SetupDailyRewards();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDailyRewards.FinishedClaiming
	// void FinishedClaiming();                                                                                                 // [0x2b80370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortDailyRewards.ClaimResultReceived
	// void ClaimResultReceived(TArray<FFortItemInstanceQuantityPair>& Loot);                                                   // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortDailyRewardsItem
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortDailyRewardsItem : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FFortDailyRewardsItemData)                 ItemData                                                    OFFSET(getStruct<T>, {0x210, 16, 0, 0})
};

/// Class /Script/FortniteUI.FortDailyRewardsSchedule
/// Size: 0x0098 (0x000210 - 0x0002A8)
class UFortDailyRewardsSchedule : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	SMember(FFortDailyRewardsScheduleData)             ScheduleData                                                OFFSET(getStruct<T>, {0x210, 152, 0, 0})
};

/// Class /Script/FortniteUI.FortDefenderConfigPanel
/// Size: 0x0030 (0x0003C0 - 0x0003F0)
class UFortDefenderConfigPanel : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                SelectedDefenderItem                                        OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                SelectedWeaponItem                                          OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                SelectedAmmoItem                                            OFFSET(get<T>, {0x3D0, 8, 0, 0})
	DMember(int32_t)                                   SelectedAmmoQuantity                                        OFFSET(get<int32_t>, {0x3D8, 4, 0, 0})
	CMember(TWeakObjectPtr<ABuildingTrapDefender*>)    DefenderTrap                                                OFFSET(get<T>, {0x3DC, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortDefenderConfigPanel.UnsummonDefender
	// bool UnsummonDefender();                                                                                                 // [0x2b82ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.SpawnDefender
	// bool SpawnDefender();                                                                                                    // [0x2b82b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.IsWeaponSelectionValid
	// bool IsWeaponSelectionValid();                                                                                           // [0x2b81fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.HasWeaponForSelectedDefender
	// bool HasWeaponForSelectedDefender();                                                                                     // [0x2b81d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.HasAnyDefenders
	// bool HasAnyDefenders();                                                                                                  // [0x2b81bf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.GetSourceSchematic
	// UFortSchematicItemDefinition* GetSourceSchematic(UFortWorldItemDefinition* ItemDefUsedForCrafting);                      // [0x2b81740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.GetDefenderPawnWeaponItem
	// UFortWorldItem* GetDefenderPawnWeaponItem(AFortAIPawn* DefenderPawn);                                                    // [0x2b806e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.GetCompatibleAmmoDef
	// UFortWorldItemDefinition* GetCompatibleAmmoDef();                                                                        // [0x2b80680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.GetCompatibleAmmo
	// UFortWorldItem* GetCompatibleAmmo();                                                                                     // [0x2b80650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.GetAmmoCountFromPlayer
	// int32_t GetAmmoCountFromPlayer(UFortWorldItemDefinition* AmmoItemDef);                                                   // [0x2b80420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderConfigPanel.GetAmmoCountFromDefender
	// int32_t GetAmmoCountFromDefender(UFortWorldItemDefinition* AmmoItemDef);                                                 // [0x2b80390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortDefenderItemTileButton
/// Size: 0x0000 (0x000830 - 0x000830)
class UFortDefenderItemTileButton : public UFortItemPickerButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:


	/// Functions
	// Function /Script/FortniteUI.FortDefenderItemTileButton.HandleEquipSlotChanged
	// void HandleEquipSlotChanged(int32_t EquipSlot);                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemTileView
/// Size: 0x0120 (0x0002F0 - 0x000410)
class UFortItemTileView : public UCommonTileView
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	SMember(FFortItemFilterDefinition)                 Filter                                                      OFFSET(getStruct<T>, {0x2F0, 96, 0, 0})
	SMember(FFortItemSorterDefinition)                 Sorter                                                      OFFSET(getStruct<T>, {0x350, 80, 0, 0})
	DMember(bool)                                      bShouldShowNullItemTile                                     OFFSET(get<bool>, {0x3A0, 1, 0, 0})
	DMember(bool)                                      bAutomaticallyLoadItemDetails                               OFFSET(get<bool>, {0x3A1, 1, 0, 0})
	CMember(EItemTileViewDisplayType)                  DisplayType                                                 OFFSET(get<T>, {0x3A2, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnInventoryUpdatedEvent                                     OFFSET(get<T>, {0x3A8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    ItemsForTileView                                            OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x3E0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemTileView.ShowNullItemTile
	// void ShowNullItemTile();                                                                                                 // [0x2bbc560] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTileView.SetSorter
	// void SetSorter(FFortItemSorterDefinition& Sorter);                                                                       // [0x2bbc430] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTileView.SetItemViewContext
	// void SetItemViewContext(TScriptInterface<Class> ItemViewContext);                                                        // [0x2bbbf50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTileView.SetFilterAndSorter
	// void SetFilterAndSorter(FFortItemFilterDefinition& Filter, FFortItemSorterDefinition& Sorter);                           // [0x2bbb510] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTileView.SetFilter
	// void SetFilter(FFortItemFilterDefinition& Filter);                                                                       // [0x2bbb3f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTileView.RefreshSort
	// void RefreshSort();                                                                                                      // [0x2bbb250] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTileView.RefreshFilterAndSort
	// void RefreshFilterAndSort();                                                                                             // [0x2bbb230] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTileView.OnInventoryUpdated__DelegateSignature
	// void OnInventoryUpdated__DelegateSignature();                                                                            // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortItemTileView.HideNullItemTile
	// void HideNullItemTile();                                                                                                 // [0x2bbb100] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTileView.HandleItemWidgetCreated
	// void HandleItemWidgetCreated(UUserWidget* Widget);                                                                       // [0x2601fd0] Native|Protected     
	// Function /Script/FortniteUI.FortItemTileView.ContainsItem
	// bool ContainsItem(UFortItem* Item);                                                                                      // [0x2bbaa00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemTileView.CenterSelectedItemTileWidget
	// void CenterSelectedItemTileWidget();                                                                                     // [0x2bba9a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortDefenderItemTileView
/// Size: 0x0000 (0x000410 - 0x000410)
class UFortDefenderItemTileView : public UFortItemTileView
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
};

/// Class /Script/FortniteUI.FortDefenderSlotButton
/// Size: 0x0000 (0x000800 - 0x000800)
class UFortDefenderSlotButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2048;

public:
};

/// Class /Script/FortniteUI.FortDefenderSlotItemPicker
/// Size: 0x0008 (0x000278 - 0x000280)
class UFortDefenderSlotItemPicker : public UFortItemPickerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(EFortDefenderSlotType)                     DefenderSlotType                                            OFFSET(get<T>, {0x278, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortDefenderSlotItemPicker.PopulateDefenderSlotItems
	// void PopulateDefenderSlotItems(UFortDefenderItem* DefenderItem);                                                         // [0x2b82800] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortDefenderSlotItemPicker.HandleItemWidgetCreated
	// void HandleItemWidgetCreated(UUserWidget* ItemWidget);                                                                   // [0x2b81a90] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortDefenderSlotView
/// Size: 0x0000 (0x000210 - 0x000210)
class UFortDefenderSlotView : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FortniteUI.FortDefenderSlotWidget
/// Size: 0x0000 (0x000210 - 0x000210)
class UFortDefenderSlotWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FortniteUI.FortSquadSelectorButton
/// Size: 0x0020 (0x000800 - 0x000820)
class UFortSquadSelectorButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:
	CMember(UClass*)                                   SquadManagementScreenType                                   OFFSET(get<T>, {0x810, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadSelectorButton.TryGetStaticSquadDataBP
	// bool TryGetStaticSquadDataBP(FHomebaseSquad& OutSquadData);                                                              // [0x2bee8a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSelectorButton.SetIdOfSquadToManageBP
	// void SetIdOfSquadToManageBP(FName& SquadId);                                                                             // [0x2bee570] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSelectorButton.HandleSquadChangedBP
	// void HandleSquadChangedBP();                                                                                             // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSelectorButton.HandleDifferentSquadSetBP
	// void HandleDifferentSquadSetBP();                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSelectorButton.GetIdOfSquadToManageBP
	// FName GetIdOfSquadToManageBP();                                                                                          // [0x2bed520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortDefenderSquadSelectorButton
/// Size: 0x0000 (0x000820 - 0x000820)
class UFortDefenderSquadSelectorButton : public UFortSquadSelectorButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:


	/// Functions
	// Function /Script/FortniteUI.FortDefenderSquadSelectorButton.TryGetTheaterUniqueId
	// bool TryGetTheaterUniqueId(FString& OutTheaterUniqueId, bool& OutIsUnlocked);                                            // [0x2b82d90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDefenderSquadSelectorButton.TryGetPowerLevel
	// bool TryGetPowerLevel(int32_t& OutPowerLevel);                                                                           // [0x2b82cf0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortDirectAcquisitionOfferInfo
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortDirectAcquisitionOfferInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(UFortMtxOfferData*)                        OfferDisplayAsset                                           OFFSET(get<T>, {0x40, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.OfferHasDenyRequirements
	// bool OfferHasDenyRequirements();                                                                                         // [0x2b82000] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.IsUnique
	// bool IsUnique();                                                                                                         // [0x2b81fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.IsRefundable
	// bool IsRefundable();                                                                                                     // [0x2b81f70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.IsPriceInRealMoney
	// bool IsPriceInRealMoney(int32_t PriceIndex);                                                                             // [0x2b81ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.IsPriceInMTX
	// bool IsPriceInMTX(int32_t PriceIndex);                                                                                   // [0x2b81e50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.IsLockedByRequirement
	// bool IsLockedByRequirement();                                                                                            // [0x2b81e20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.IsGiftable
	// bool IsGiftable();                                                                                                       // [0x2b81dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.IsExclusive
	// bool IsExclusive();                                                                                                      // [0x2b81d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.HasRequirement
	// bool HasRequirement(FText& RequirementText);                                                                             // [0x2b81c80] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.HasDisplayAsset
	// bool HasDisplayAsset();                                                                                                  // [0x2b81c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetTotalQuantity
	// int32_t GetTotalQuantity();                                                                                              // [0x2b818c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetTileImage
	// FSlateBrush GetTileImage();                                                                                              // [0x2b81810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetStorefrontName
	// FName GetStorefrontName();                                                                                               // [0x2b817d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetSortPriority
	// int32_t GetSortPriority();                                                                                               // [0x2b81710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetShortDescription
	// FText GetShortDescription();                                                                                             // [0x2b81660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetSaleType
	// TEnumAsByte<ECatalogSaleType> GetSaleType(int32_t PriceIndex);                                                           // [0x2b815d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetSaleText
	// FText GetSaleText(int32_t PriceIndex);                                                                                   // [0x2b814f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetSalePrice
	// bool GetSalePrice(int32_t PriceIndex, FText& SalePrice);                                                                 // [0x2b813d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetRequirementTypeAtIndex
	// ECatalogRequirementType GetRequirementTypeAtIndex(int32_t RequirementIndex);                                             // [0x2b81340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetRequirementMinQuantityAtIndex
	// int32_t GetRequirementMinQuantityAtIndex(int32_t RequirementIndex);                                                      // [0x2b812b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetRequirementIdAtIndex
	// FString GetRequirementIdAtIndex(int32_t RequirementIndex);                                                               // [0x2b811e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetQuantityRemaining
	// int32_t GetQuantityRemaining();                                                                                          // [0x2b811b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetPriceItem
	// UFortAccountItemDefinition* GetPriceItem(int32_t PriceIndex, int32_t& RequiredItemCount);                                // [0x2b810e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetOfferId
	// FString GetOfferId();                                                                                                    // [0x2b81030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetOfferDisplayAsset
	// UFortMtxOfferData* GetOfferDisplayAsset();                                                                               // [0x2b81000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetOffer
	// FCatalogOffer GetOffer();                                                                                                // [0x2b80fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetNumRequirements
	// int32_t GetNumRequirements();                                                                                            // [0x2b80f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetNormalPrice
	// FText GetNormalPrice(int32_t PriceIndex);                                                                                // [0x2b80e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetName
	// FText GetName();                                                                                                         // [0x2b80e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetMetaAsBool
	// bool GetMetaAsBool(FString MetaTag);                                                                                     // [0x2b80d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetItemTypeText
	// FText GetItemTypeText();                                                                                                 // [0x2b80cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetItemQuantity
	// int32_t GetItemQuantity(FString TemplateId);                                                                             // [0x2b80c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetItemOfferCount
	// int32_t GetItemOfferCount(FString TemplateId);                                                                           // [0x2b80b70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetGrantedItemDefinitions
	// void GetGrantedItemDefinitions(TArray<UFortAccountItemDefinition*>& GrantedItems);                                       // [0x2b80ac0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetGradient
	// FFortMtxGradient GetGradient();                                                                                          // [0x2b80a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetFortStoreOfferType
	// EFortMtxStoreOfferType GetFortStoreOfferType();                                                                          // [0x2b80a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetFortStoreOfferCategory
	// FString GetFortStoreOfferCategory();                                                                                     // [0x2b809d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetForcedGiftBoxTemplateId
	// FString GetForcedGiftBoxTemplateId();                                                                                    // [0x2b80950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetFirstGrantQuantity
	// int32_t GetFirstGrantQuantity();                                                                                         // [0x2b80920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetFirstGrantItemDefinition
	// UFortAccountItemDefinition* GetFirstGrantItemDefinition();                                                               // [0x2b808f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetDetailsImage
	// FSlateBrush GetDetailsImage();                                                                                           // [0x2b80840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetDetailsAttributes
	// TArray<FFortMtxDetailsAttribute> GetDetailsAttributes();                                                                 // [0x2b807f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetDescription
	// FText GetDescription();                                                                                                  // [0x2b80770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetCurrencyItemDefinition
	// UFortAccountItemDefinition* GetCurrencyItemDefinition();                                                                 // [0x2b806b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetCategoryText
	// FText GetCategoryText();                                                                                                 // [0x2b805d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetBonusQuantity
	// int32_t GetBonusQuantity();                                                                                              // [0x2b805a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetBaseQuantity
	// int32_t GetBaseQuantity();                                                                                               // [0x2b80570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetBannerOverrideTag
	// FString GetBannerOverrideTag();                                                                                          // [0x2b804f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.GetBackground
	// FLinearColor GetBackground();                                                                                            // [0x2b804b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferInfo.CreatePreviewItem
	// UFortAccountItem* CreatePreviewItem();                                                                                   // [0x2b80340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase
/// Size: 0x0018 (0x000800 - 0x000818)
class UFortDirectAcquisitionOfferWidgetBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	CMember(TArray<UFortDirectAcquisitionOfferInfo*>)  GroupedOffers                                               OFFSET(get<T>, {0x800, 16, 0, 0})
	CMember(UFortDirectAcquisitionOfferInfo*)          OfferData                                                   OFFSET(get<T>, {0x810, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase.SetupOffer
	// void SetupOffer(UFortDirectAcquisitionOfferInfo* InOfferData);                                                           // [0x2b82ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase.RemoveAllOffers
	// void RemoveAllOffers();                                                                                                  // [0x2b82880] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase.OnUpdateStatus
	// void OnUpdateStatus();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase.OnOfferSet
	// void OnOfferSet();                                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase.OnOfferAdded
	// void OnOfferAdded();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase.HandleCurrentlyViewedAccountInfoChanged
	// void HandleCurrentlyViewedAccountInfoChanged(FFortPublicAccountInfo NewInfo);                                            // [0x2b819c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase.GetOfferInfo
	// UFortDirectAcquisitionOfferInfo* GetOfferInfo();                                                                         // [0x2b810b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferWidgetBase.AddOffer
	// void AddOffer(UFortDirectAcquisitionOfferInfo* InOfferData);                                                             // [0x2b802a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase
/// Size: 0x00B0 (0x0003F0 - 0x0004A0)
class UFortDirectAcquisitionOfferDetailsWidgetBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(TArray<UFortDirectAcquisitionOfferInfo*>)  PagedItems                                                  OFFSET(get<T>, {0x440, 16, 0, 0})
	CMember(UFortDirectAcquisitionOfferInfo*)          OfferData                                                   OFFSET(get<T>, {0x450, 8, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewZoomOutInputAction                                  OFFSET(getStruct<T>, {0x458, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewZoomInInputAction                                   OFFSET(getStruct<T>, {0x468, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewRotateInputAction                                   OFFSET(getStruct<T>, {0x478, 16, 0, 0})
	CMember(UFortGiftingOptionsPanel*)                 GiftingOptions                                              OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(UFortItemView*)                            ItemViewObject                                              OFFSET(get<T>, {0x490, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.SetupOffer
	// void SetupOffer(UFortDirectAcquisitionOfferInfo* InOfferData);                                                           // [0x2b82a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.SetPagedItems
	// void SetPagedItems(TArray<UFortDirectAcquisitionOfferInfo*>& InPagedItems);                                              // [0x2b829b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.PurchaseAmountRight
	// void PurchaseAmountRight();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.PurchaseAmountLeft
	// void PurchaseAmountLeft();                                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.OnVaultItemsViewed
	// void OnVaultItemsViewed(TArray<UFortItem*>& Items);                                                                      // [0x2b82750] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.OnUpdateStatus
	// void OnUpdateStatus();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.OnOfferSet
	// void OnOfferSet();                                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.OnCancelGifting
	// void OnCancelGifting();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.HandleCurrentlyViewedAccountInfoChanged
	// void HandleCurrentlyViewedAccountInfoChanged(FFortPublicAccountInfo NewInfo);                                            // [0x2b818f0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.GetWidgetForFramingViewedItem
	// UWidget* GetWidgetForFramingViewedItem();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.GetOfferInfo
	// UFortDirectAcquisitionOfferInfo* GetOfferInfo();                                                                         // [0x1188af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionOfferDetailsWidgetBase.AutoEquip
	// void AutoEquip();                                                                                                        // [0x2b80320] Final|Native|Public|BlueprintCallable|Const 
};

/// Class /Script/FortniteUI.FortDirectAcquisitionWidgetBase
/// Size: 0x0060 (0x0003F0 - 0x000450)
class UFortDirectAcquisitionWidgetBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(TArray<FString>)                           StorefrontNames                                             OFFSET(get<T>, {0x3F0, 16, 0, 0})
	DMember(bool)                                      bShowIneligible                                             OFFSET(get<bool>, {0x400, 1, 0, 0})
	CMember(TArray<UFortDirectAcquisitionOfferInfo*>)  AcquisitionOfferData                                        OFFSET(get<T>, {0x408, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.TriggerRefresh
	// void TriggerRefresh();                                                                                                   // [0x2b87de0] Final|Native|Private 
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.SetStorefrontNames
	// void SetStorefrontNames(TArray<FString>& InStorefrontNames);                                                             // [0x2b87c10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.OnStartReadingOffers
	// void OnStartReadingOffers();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.OnOffersGenerated
	// void OnOffersGenerated();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.NoOffersAvailable
	// void NoOffersAvailable();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.GetWeeklyStoreEndDate
	// FDateTime GetWeeklyStoreEndDate();                                                                                       // [0x2b86ce0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.GetSeasonStoreEndDate
	// FDateTime GetSeasonStoreEndDate();                                                                                       // [0x2b86880] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.GetDailyStoreEndDate
	// FDateTime GetDailyStoreEndDate();                                                                                        // [0x2b86400] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortDirectAcquisitionWidgetBase.GenerateOfferWidget
	// void GenerateOfferWidget(UFortDirectAcquisitionOfferInfo* OfferData);                                                    // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortDisplayNameWidget
/// Size: 0x00A0 (0x0003C0 - 0x000460)
class UFortDisplayNameWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	SMember(FText)                                     ButtonDisableReason                                         OFFSET(getStruct<T>, {0x400, 24, 0, 0})
	SMember(FText)                                     NameTakenText                                               OFFSET(getStruct<T>, {0x418, 24, 0, 0})
	SMember(FText)                                     NameInvalidFormatText                                       OFFSET(getStruct<T>, {0x430, 24, 0, 0})
	CMember(UCommonButton*)                            Button_Enter                                                OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Error                                                  OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(UEditableText*)                            EditText_DisplayName                                        OFFSET(get<T>, {0x458, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortDisplayNameWidget.UpdateSignInButton
	// void UpdateSignInButton(FText& Text);                                                                                    // [0x2b87e40] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortDisplayNameWidget.HandleTextCommitted
	// void HandleTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                            // [0x2b87470] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortDisplayNameWidget.HandleOKSelected
	// void HandleOKSelected(UCommonButton* Button);                                                                            // [0x2b87320] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortErrorWindow
/// Size: 0x0020 (0x0003F0 - 0x000410)
class UFortErrorWindow : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UClass*)                                   ErrorEntryClass                                             OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(TArray<UCommonUserWidget*>)                ErrorEntriesPool                                            OFFSET(get<T>, {0x3F8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortErrorWindow.PutErrorEntries
	// void PutErrorEntries(TArray<UCommonUserWidget*>& ErrorEntries);                                                          // [0x2b87820] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortErrorWindow.GetErrorEntry
	// UCommonUserWidget* GetErrorEntry();                                                                                      // [0x2b86440] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortErrorWindow.DismissErrors
	// void DismissErrors(TArray<FFortErrorInfo> ErrorInfos);                                                                   // [0x2b86240] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortEulaWidget
/// Size: 0x0070 (0x0003C0 - 0x000430)
class UFortEulaWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(UFortRichTextBlock*)                       Text_Description                                            OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UScrollBox*)                               ScrollBox_License                                           OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Confirm                                              OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Decline                                              OFFSET(get<T>, {0x420, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortEulaWidget.HandleDeclineClicked
	// void HandleDeclineClicked(UCommonButton* Button);                                                                        // [0x2b87000] Final|Native|Protected 
	// Function /Script/FortniteUI.FortEulaWidget.HandleConfirmClicked
	// void HandleConfirmClicked(UCommonButton* Button);                                                                        // [0x2b86f80] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortSimpleItemConditionIconIndicator
/// Size: 0x0008 (0x000458 - 0x000460)
class UFortSimpleItemConditionIconIndicator : public UFortMultiSizeImage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	DMember(bool)                                      bShouldCollapseWhenConditionIsFalse                         OFFSET(get<bool>, {0x458, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSimpleItemConditionIconIndicator.ShouldCollapseWhenConditionIsFalse
	// void ShouldCollapseWhenConditionIsFalse(bool Value);                                                                     // [0x2be04b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSimpleItemConditionIconIndicator.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* ItemToRepresent);                                                                     // [0x2bdfe60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSimpleItemConditionIconIndicator.GetItemToRepresent
	// UFortItem* GetItemToRepresent();                                                                                         // [0x2bdf2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortEvolveIndicator
/// Size: 0x0000 (0x000460 - 0x000460)
class UFortEvolveIndicator : public UFortSimpleItemConditionIconIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
};

/// Class /Script/FortniteUI.FortExpeditionBuildSquadWidget
/// Size: 0x0060 (0x0003C0 - 0x000420)
class UFortExpeditionBuildSquadWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(TWeakObjectPtr<UFortExpeditionItem*>)      Item                                                        OFFSET(get<T>, {0x3C0, 8, 0, 0})
	SMember(FName)                                     CurrentSquadId                                              OFFSET(getStruct<T>, {0x3C8, 8, 0, 0})
	CMember(UFortSquadSlotsView*)                      ExpeditionSquadSlotsView                                    OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(UFortSquadSlotDetailsPanel*)               ExpeditionSquadSlotDetails                                  OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(UFortSquadSlotItemPicker*)                 ExpeditionSquadSlotPicker                                   OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(UFortItemViewContext_ExpeditionSquadSlotsView*) ItemViewContext_ExpeditionSlotsView                    OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(UFortItemViewContext_ExpeditionSquadSlotItemPicker*) ItemViewContext_ExpeditionSlotItemPicker          OFFSET(get<T>, {0x3F0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.StartExpedition
	// bool StartExpedition();                                                                                                  // [0x2b87ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.SetData
	// void SetData(UFortExpeditionItem* InItem);                                                                               // [0x2b82030] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.SetCurrentSquadId
	// void SetCurrentSquadId(FName SquadId);                                                                                   // [0x2b87a00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.OnStartExpeditionCompleted
	// void OnStartExpeditionCompleted();                                                                                       // [0x11545e0] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.OnRequestClosePicker
	// void OnRequestClosePicker();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.OnRefreshBuildSquadWidget
	// void OnRefreshBuildSquadWidget();                                                                                        // [0x2bfa230] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.IsSquadSlotLocked
	// bool IsSquadSlotLocked(int32_t SlotIndex);                                                                               // [0x2b87690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.IsExpeditionValidToStart
	// bool IsExpeditionValidToStart();                                                                                         // [0x2b87590] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.HandleStartExpeditionCompleted
	// void HandleStartExpeditionCompleted(UFortExpeditionItem* Expedition, bool bSucceeded);                                   // [0x2b873a0] Final|Native|Private 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.HandleDifferentSquadSlotSelected
	// void HandleDifferentSquadSlotSelected(int32_t SquadSlotIndex);                                                           // [0x2b87080] Final|Native|Private 
	// Function /Script/FortniteUI.FortExpeditionBuildSquadWidget.ClearTemporaryExpeditionSquadState
	// void ClearTemporaryExpeditionSquadState(bool bPreviewOnly);                                                              // [0x2b861b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortExpeditionDetailsWidget
/// Size: 0x0040 (0x000210 - 0x000250)
class UFortExpeditionDetailsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(TWeakObjectPtr<UFortExpeditionItem*>)      Item                                                        OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UFortSquadSlotsView*)                      ExpeditionSquadSlotsView                                    OFFSET(get<T>, {0x218, 8, 0, 0})
	SMember(FName)                                     CurrentSquadId                                              OFFSET(getStruct<T>, {0x220, 8, 0, 0})
	CMember(UFortItemViewContext_ExpeditionSquadSlotsView*) ItemViewContext_ExpeditionSlotsView                    OFFSET(get<T>, {0x228, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionDetailsWidget.SetData
	// void SetData(UFortExpeditionItem* InItem);                                                                               // [0x2b87b00] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionDetailsWidget.SetCurrentSquadId
	// void SetCurrentSquadId(FName SquadId);                                                                                   // [0x2b87a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionDetailsWidget.OnAbandonExpeditionCompleted
	// void OnAbandonExpeditionCompleted();                                                                                     // [0x2b87720] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionDetailsWidget.HandleAbandonExpeditionCompleted
	// void HandleAbandonExpeditionCompleted(UFortExpeditionItem* Expedition, bool bSuccess);                                   // [0x2b86d20] Final|Native|Private 
	// Function /Script/FortniteUI.FortExpeditionDetailsWidget.AbandonExpedition
	// void AbandonExpedition();                                                                                                // [0x2b85be0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortExpeditionExpiresWidget
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortExpeditionExpiresWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(TWeakObjectPtr<UFortExpeditionItem*>)      Item                                                        OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionExpiresWidget.SetData
	// void SetData(UFortExpeditionItem* InItem);                                                                               // [0x2b87b00] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionExpiresWidget.OnExpeditionExpirationUpdated
	// void OnExpeditionExpirationUpdated();                                                                                    // [0x2b87720] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortExpeditionListItemWidget
/// Size: 0x0018 (0x000800 - 0x000818)
class UFortExpeditionListItemWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	CMember(TWeakObjectPtr<UFortExpeditionItem*>)      Item                                                        OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionListItemWidget.OnItemChanged
	// void OnItemChanged();                                                                                                    // [0x2b877e0] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortExpeditionListViewWidget
/// Size: 0x0038 (0x000210 - 0x000248)
class UFortExpeditionListViewWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(UMulticastDelegate)                        OnExpeditionSelected                                        OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnExpeditionListViewRefreshed                               OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UCommonListView*)                          ExpeditionListView                                          OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FName)                                     CurrentTabNameId                                            OFFSET(getStruct<T>, {0x238, 8, 0, 0})
	CMember(EFortExpeditionListSort)                   SortType                                                    OFFSET(get<T>, {0x240, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionListViewWidget.SetExpeditionListSortType
	// void SetExpeditionListSortType(EFortExpeditionListSort InSortType);                                                      // [0x2b87b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionListViewWidget.HandleListItemSelected
	// void HandleListItemSelected(UObject* Item, bool bSelected);                                                              // [0x2b87250] Final|Native|Protected 
	// Function /Script/FortniteUI.FortExpeditionListViewWidget.GetExpeditionListSortName
	// FText GetExpeditionListSortName();                                                                                       // [0x2b86470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortExpeditionMasterWidget
/// Size: 0x0080 (0x0003C0 - 0x000440)
class UFortExpeditionMasterWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
};

/// Class /Script/FortniteUI.FortExpeditionOverviewWidget
/// Size: 0x0028 (0x000210 - 0x000238)
class UFortExpeditionOverviewWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(UClass*)                                   TabButtonType                                               OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(TArray<FExpeditionTabInfo>)                TabListRegistrationInfo                                     OFFSET(get<T>, {0x218, 16, 0, 0})
	CMember(UFortTabListWidgetBase*)                   ExpeditionTabList                                           OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UFortExpeditionListViewWidget*)            ExpeditionListView                                          OFFSET(get<T>, {0x230, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionOverviewWidget.UpdateExpeditionTabs
	// void UpdateExpeditionTabs();                                                                                             // [0x2b87e20] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionOverviewWidget.OnExpeditionTabSelected
	// void OnExpeditionTabSelected(FName& TabNameID);                                                                          // [0x2b87740] Native|Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionOverviewWidget.OnExpeditionOverviewRefresh
	// void OnExpeditionOverviewRefresh();                                                                                      // [0x2b7aa60] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionOverviewWidget.HandleExpeditionTabSelected
	// void HandleExpeditionTabSelected(FName TabNameID);                                                                       // [0x2b871d0] Final|Native|Private 
	// Function /Script/FortniteUI.FortExpeditionOverviewWidget.HandleExpeditionTabButtonCreated
	// void HandleExpeditionTabButtonCreated(FName TabNameID, UCommonButton* TabButton);                                        // [0x2b87110] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortExpeditionPickVehicleWidget
/// Size: 0x0010 (0x0003C0 - 0x0003D0)
class UFortExpeditionPickVehicleWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(TWeakObjectPtr<UFortExpeditionItem*>)      Item                                                        OFFSET(get<T>, {0x3C0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionPickVehicleWidget.SetData
	// void SetData(UFortExpeditionItem* InItem);                                                                               // [0x2b7b730] Native|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortExpeditionReturnsWidget
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortExpeditionReturnsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(TWeakObjectPtr<UFortExpeditionItem*>)      Item                                                        OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionReturnsWidget.SetData
	// void SetData(UFortExpeditionItem* InItem);                                                                               // [0x2b87b00] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionReturnsWidget.OnExpeditionInProgressUpdated
	// void OnExpeditionInProgressUpdated();                                                                                    // [0x2b87720] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortExpeditionRewardsWidget
/// Size: 0x0028 (0x000210 - 0x000238)
class UFortExpeditionRewardsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(UMulticastDelegate)                        OnAllExpeditionsCollected                                   OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UCommonTileView*)                          RewardsTileView                                             OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bPendingCollection                                          OFFSET(get<bool>, {0x228, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionRewardsWidget.RefreshRewardsUI
	// void RefreshRewardsUI(UFortExpeditionItem* Expedition, bool bExpeditionSucceeded, TArray<FFortItemInstanceQuantityPair>& Rewards); // [0x2b878d0] Native|Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionRewardsWidget.ProcessNextReward
	// void ProcessNextReward();                                                                                                // [0x2b87800] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionRewardsWidget.HandleCollectionExpeditionCompleted
	// void HandleCollectionExpeditionCompleted(bool bMcpSuccess, UFortExpeditionItem* Expedition, bool bExpeditionSuccess, TArray<FFortItemInstanceQuantityPair>& Rewards); // [0x2b86df0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteUI.FortExpeditionSummaryWidget
/// Size: 0x0058 (0x000210 - 0x000268)
class UFortExpeditionSummaryWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	DMember(int32_t)                                   AvailableExpeditions                                        OFFSET(get<int32_t>, {0x210, 4, 0, 0})
	DMember(int32_t)                                   CompletedExpeditions                                        OFFSET(get<int32_t>, {0x214, 4, 0, 0})
	DMember(int32_t)                                   LandVehiclesTotal                                           OFFSET(get<int32_t>, {0x218, 4, 0, 0})
	DMember(int32_t)                                   LandVehiclesAvailable                                       OFFSET(get<int32_t>, {0x21C, 4, 0, 0})
	DMember(int32_t)                                   AirVehiclesTotal                                            OFFSET(get<int32_t>, {0x220, 4, 0, 0})
	DMember(int32_t)                                   AirVehiclesAvailable                                        OFFSET(get<int32_t>, {0x224, 4, 0, 0})
	DMember(int32_t)                                   SeaVehiclesTotal                                            OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(int32_t)                                   SeaVehiclesAvailable                                        OFFSET(get<int32_t>, {0x22C, 4, 0, 0})
	DMember(int32_t)                                   LandExpeditionsTotal                                        OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	DMember(int32_t)                                   LandExpeditionsAvailable                                    OFFSET(get<int32_t>, {0x234, 4, 0, 0})
	DMember(int32_t)                                   AirExpeditionsTotal                                         OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	DMember(int32_t)                                   AirExpeditionsAvailable                                     OFFSET(get<int32_t>, {0x23C, 4, 0, 0})
	DMember(int32_t)                                   SeaExpeditionsTotal                                         OFFSET(get<int32_t>, {0x240, 4, 0, 0})
	DMember(int32_t)                                   SeaExpeditionsAvailable                                     OFFSET(get<int32_t>, {0x244, 4, 0, 0})
	CMember(TArray<UFortExpeditionItem*>)              InProgressExpeditions                                       OFFSET(get<T>, {0x248, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionSummaryWidget.UnbindInventoryDelegates
	// void UnbindInventoryDelegates();                                                                                         // [0x2b87e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionSummaryWidget.OnRefreshSummaryWidget
	// void OnRefreshSummaryWidget();                                                                                           // [0x2b87720] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortExpeditionSummaryWidget.BindInventoryDelegates
	// void BindInventoryDelegates();                                                                                           // [0x2b85dc0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortExpeditionUtilities
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortExpeditionUtilities : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortExpeditionUtilities.TotalUnseenExpeditionsForTab
	// int32_t TotalUnseenExpeditionsForTab(UWidget* Widget, FName& TabNameID);                                                 // [0x2b87d10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.IsSquadOnExpedition
	// bool IsSquadOnExpedition(UWidget* Widget, FName& SquadId);                                                               // [0x2b875c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.GetVehicleTagRequiredForExpedition
	// FGameplayTag GetVehicleTagRequiredForExpedition(UFortExpeditionItem* Expedition);                                        // [0x2b86c50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.GetVehicleTagFromSquadId
	// bool GetVehicleTagFromSquadId(FName& SquadId, FGameplayTag& OutFoundVehicleTag);                                         // [0x2b86b60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.GetTotalExpeditionVehiclesAvailable
	// void GetTotalExpeditionVehiclesAvailable(UWidget* Widget, AFortPlayerController* FortPC, int32_t& OutLandVehicles, int32_t& OutLandVehiclesAvailable, int32_t& OutSeaVehicles, int32_t& OutSeaVehiclesAvailable, int32_t& OutAirVehicles, int32_t& OutAirVehiclesAvailable); // [0x2b868c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.GetMatchedCriteriaTags
	// void GetMatchedCriteriaTags(UFortExpeditionItem* Expedition, TArray<UFortItem*>& SlottedItems, TArray<FGameplayTag>& OutMatchedCriteria); // [0x2b86730] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.GetExpeditionSquadsThatMatchRequirements
	// bool GetExpeditionSquadsThatMatchRequirements(FGameplayTagContainer& RequirementTags, AFortPlayerController* FortPC, TArray<FName>& OutExpeditionSquadIds); // [0x2b865c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.GetExpeditionSquadPower
	// float GetExpeditionSquadPower(AFortPlayerController* FortPC, FName& SquadId);                                            // [0x2b864f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.GetAllExpeditionSquadIds
	// void GetAllExpeditionSquadIds(TArray<FName>& OutExpeditionSquadIds);                                                     // [0x2b86360] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.CalculateTotalPower
	// float CalculateTotalPower(AFortPlayerController* FortPC, UFortExpeditionItem* Expedition, FName& SquadId, TArray<UFortItem*>& SlottedItems); // [0x2b86040] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.CalculateGlobalAndItemRatingModValuesBP
	// void CalculateGlobalAndItemRatingModValuesBP(UFortExpeditionItem* Expedition, TArray<UFortItem*>& SlottedItems, float& GlobalPowerMod, TArray<float>& SlottedItemMods); // [0x2b85eb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.CalculateExpeditionPercentageChanceForSuccess
	// float CalculateExpeditionPercentageChanceForSuccess(UFortExpeditionItem* Expedition, float TotalPower);                  // [0x2b85de0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.AreExpeditionsUnlocked
	// bool AreExpeditionsUnlocked(UObject* WorldContextObject, FUniqueNetIdRepl& UniqueId);                                    // [0x2b85c80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortExpeditionUtilities.AreAnyExpeditionsComplete
	// bool AreAnyExpeditionsComplete(UWidget* Widget);                                                                         // [0x2b85c00] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortExpeditionVehicleTileItemWidget
/// Size: 0x0010 (0x000800 - 0x000810)
class UFortExpeditionVehicleTileItemWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(TWeakObjectPtr<UObject*>)                  SquadId                                                     OFFSET(get<T>, {0x808, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortFavoriteIndicator
/// Size: 0x0000 (0x000460 - 0x000460)
class UFortFavoriteIndicator : public UFortSimpleItemConditionIconIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
};

/// Class /Script/FortniteUI.FortMobileShareButton
/// Size: 0x0030 (0x000800 - 0x000830)
class UFortMobileShareButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:


	/// Functions
	// Function /Script/FortniteUI.FortMobileShareButton.SetShareParams
	// void SetShareParams(FString URL, FText& Description);                                                                    // [0x2bc4980] Final|Native|Public|HasOutParms 
	// Function /Script/FortniteUI.FortMobileShareButton.OnOSImageEnumSet
	// void OnOSImageEnumSet(EFortFortMobileShareButtonOS OSType);                                                              // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortFriendCodeEntryBase
/// Size: 0x0070 (0x000830 - 0x0008A0)
class UFortFriendCodeEntryBase : public UFortMobileShareButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2208;

public:
	SMember(FFriendCode)                               FriendCode                                                  OFFSET(getStruct<T>, {0x830, 32, 0, 0})
	CMember(UCommonTextBlock*)                         LinkDataTextBox                                             OFFSET(get<T>, {0x850, 8, 0, 0})
	SMember(FString)                                   DebugName                                                   OFFSET(getStruct<T>, {0x858, 16, 0, 0})
	DMember(int32_t)                                   LengthOfCode                                                OFFSET(get<int32_t>, {0x868, 4, 0, 0})
	SMember(FText)                                     SharedMessage                                               OFFSET(getStruct<T>, {0x870, 24, 0, 0})
	SMember(FText)                                     SharedMessageNoInvite                                       OFFSET(getStruct<T>, {0x888, 24, 0, 0})
};

/// Class /Script/FortniteUI.FortFriendCodeListBase
/// Size: 0x0030 (0x0003F0 - 0x000420)
class UFortFriendCodeListBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(TArray<FFriendCode>)                       BacchusFriendCodes                                          OFFSET(get<T>, {0x3F0, 16, 0, 0})
	CMember(UClass*)                                   FriendCodeEntryClass                                        OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UCommonDynamicEntryBox*)                   EntryBox_FriendCodes                                        OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(URichTextBlock*)                           WarningText                                                 OFFSET(get<T>, {0x410, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortFriendCodeListBase.JustDesc
	// void JustDesc();                                                                                                         // [0x2b8dbb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFriendCodeListBase.DescAndURL
	// void DescAndURL();                                                                                                       // [0x2b8b670] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFriendCodeListBase.CloseAndPopDialog
	// void CloseAndPopDialog();                                                                                                // [0x2b8b650] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortFrontEndContext
/// Size: 0x02D8 (0x000028 - 0x000300)
class UFortFrontEndContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(UMulticastDelegate)                        OnFrontEndCameraChanged                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyBackgroundChanged                                    OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAthenaPlaylistsChanged                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyEmptyPlayerClicked                                   OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerGadgetsClicked                                 OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerPadHovered                                     OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerPadUnhovered                                   OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerHovered                                        OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerUnhovered                                      OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerSelected                                       OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerUnselected                                     OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPartySuggestionAccepted                                   OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerTalkingChanged                                 OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayerMutingChanged                                  OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLobbyPlayersStoppedTalking                                OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterPinClicked                                         OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSetPreviewedSceneTheater                                  OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterSelected                                           OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterDataChanged                                        OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterTileClicked                                        OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterTileUnselected                                     OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterTileDoubleClicked                                  OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterTileFocused                                        OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterTileUnfocused                                      OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnVaultItemViewed                                           OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnVaultItemsViewed                                          OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerLoggedIn                                            OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerLoggedOut                                           OFFSET(get<T>, {0x1E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMainTabSelected                                           OFFSET(get<T>, {0x1F0, 16, 0, 0})
	SMember(FFortFrontEndFeatureStruct)                Features                                                    OFFSET(getStruct<T>, {0x208, 216, 0, 0})
	SMember(FFortSavedModeLoadout)                     CachedModeLoadout                                           OFFSET(getStruct<T>, {0x2E0, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortFrontEndContext.ViewVaultItemsFromOffer
	// void ViewVaultItemsFromOffer(FCatalogOffer& CatalogOffer, bool bIgnoreCurrentlyEquppedFavorites);                        // [0x2b8ea80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.ViewVaultItems
	// void ViewVaultItems(TArray<UFortItem*>& ItemsToView, bool bIgnoreCurrentlyEquppedFavorites);                             // [0x2b8e980] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.ViewVaultItemFromDefinition
	// void ViewVaultItemFromDefinition(UFortItemDefinition* ItemToViewDefinition, bool bIgnoreCurrentlyEquppedFavorites);      // [0x2b8e8b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.ViewVaultItem
	// void ViewVaultItem(UFortItem* ItemToView, bool bIgnoreCurrentlyEquppedFavorites);                                        // [0x2b8e7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.UpdateNewAccountItemBangCounts
	// void UpdateNewAccountItemBangCounts(UFortInventoryContext* InventoryContext);                                            // [0x2b8e760] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.TryGetAttributeInfo
	// bool TryGetAttributeInfo(FGameplayAttribute& GameplayAttribute, FFortAttributeInfo& OutAttribute);                       // [0x2b8e5c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.SkipInitialBenchmark
	// void SkipInitialBenchmark();                                                                                             // [0x2b8e5a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.ShowAthenaStoreNewItemBang
	// void ShowAthenaStoreNewItemBang();                                                                                       // [0x2b8e580] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.ShouldShowLoginMessage
	// bool ShouldShowLoginMessage();                                                                                           // [0x2b8e550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.ShouldRunInitialBenchmark
	// bool ShouldRunInitialBenchmark();                                                                                        // [0x2b8e520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.SetSelectedTheater
	// void SetSelectedTheater(FString TheaterId);                                                                              // [0x2b8e480] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SetSeenLoginMessage
	// void SetSeenLoginMessage();                                                                                              // [0x2b8e460] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SetPersonalHeroChoice
	// void SetPersonalHeroChoice(UFortHero* Hero, FDisplayManagerVariantData VariantData);                                     // [0x2b8e340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SetHeroChoice
	// void SetHeroChoice(int32_t PartyMemberIndex, UFortHero* Hero, FDisplayManagerVariantData VariantData);                   // [0x2b8e1d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SetFrontEndVisibility
	// void SetFrontEndVisibility(bool bHideHeader, bool bHideFooter, bool bHideChatWidget);                                    // [0x2b8e0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SetFrontEndCamera
	// void SetFrontEndCamera(EFrontEndCamera NewState);                                                                        // [0x2b8e030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SendPlayQuestAnalytic
	// void SendPlayQuestAnalytic(UFortQuestItem* QuestItem);                                                                   // [0x2b8dfb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SendFrontendEnteredEvent
	// void SendFrontendEnteredEvent();                                                                                         // [0x114da70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SelectTileForQuest
	// bool SelectTileForQuest(UFortQuestItem* QuestItem, float& OutCriticalMissionDifficultyOverrideMin, float& OutCriticalMissionDifficultyOverrideMax); // [0x2b8de90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SelectGadgetForSlot
	// void SelectGadgetForSlot(int32_t Slot, UFortItemDefinition* GadgetDefinition);                                           // [0x2b8ddd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SelectDefaultTheaterTile
	// void SelectDefaultTheaterTile();                                                                                         // [0x2b8ddb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.SelectDefaultTheater
	// void SelectDefaultTheater();                                                                                             // [0x2b8dd90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.RunBenchmarkAndApplyBestSettings
	// void RunBenchmarkAndApplyBestSettings();                                                                                 // [0x2b8dd70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.PushContentWidget_Adv
	// void PushContentWidget_Adv(UWidget* Widget, bool bHideHeader, bool bHideFooter, bool bHideChatWidget);                   // [0x2b8dc10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.PlayLevelUpEffect
	// void PlayLevelUpEffect();                                                                                                // [0x2b8dbf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.PlayEvolutionEffect
	// void PlayEvolutionEffect();                                                                                              // [0x2b8dbd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.IsActiveTileMissionValid
	// bool IsActiveTileMissionValid();                                                                                         // [0x2b8db80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.Is4PlayerTile
	// bool Is4PlayerTile(AFortTheaterMapTile* Tile);                                                                           // [0x2b8daf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.HideAthenaStoreNewItemBang
	// void HideAthenaStoreNewItemBang();                                                                                       // [0x2b8dad0] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetVariantDataForMemberIndex
	// FDisplayManagerVariantData GetVariantDataForMemberIndex(int32_t MemberIndex);                                            // [0x2b8d9e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.GetUITestingClass
	// UClass* GetUITestingClass();                                                                                             // [0x2b8d9b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetTileMissionDetails
	// bool GetTileMissionDetails(AFortTheaterMapTile* Tile, FFortMissionDetails& MissionDetails);                              // [0x2b8d8b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetTheaterType
	// EFortTheaterType GetTheaterType(FString TheaterId);                                                                      // [0x2b8d800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetTheaterRegionCount
	// int32_t GetTheaterRegionCount(FString TheaterId);                                                                        // [0x2b8d750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetTheaterName
	// FText GetTheaterName(FString TheaterId);                                                                                 // [0x2b8d660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetTheaterData
	// bool GetTheaterData(FString TheaterId, FFortTheaterMapData& OutTheaterData);                                             // [0x2b8d4e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetSelectedTheaterId
	// FString GetSelectedTheaterId();                                                                                          // [0x2b8d460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetSelectedTheaterData
	// bool GetSelectedTheaterData(FFortTheaterMapData& OutTheaterData);                                                        // [0x2b8d330] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetSelectableGadgets
	// void GetSelectableGadgets(TArray<UFortWorldItem*>& SelectableGadgets, TArray<UFortWorldItem*>& LastSelectedGadgets);     // [0x2b8d210] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.GetReturnToFrontendBehavior
	// EFortReturnToFrontendBehavior GetReturnToFrontendBehavior();                                                             // [0x2b8d1e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetRequirementText
	// FText GetRequirementText(FFortRequirementsInfo& InRequirements);                                                         // [0x2b8d0d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetRecommendedTeamDifficulties
	// TArray<FGameDifficultyInfo> GetRecommendedTeamDifficulties();                                                            // [0x2b8d080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetRecommendedDifficultyIndexesInAvailableDifficulties
	// TArray<int32_t> GetRecommendedDifficultyIndexesInAvailableDifficulties(bool bIncludeMissionAlertTiles);                  // [0x2b8cfa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetPrefabActorForCurrentDisplayedItem
	// AActor* GetPrefabActorForCurrentDisplayedItem();                                                                         // [0x2b8cf70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.GetOutpostStructureUpgradeCost
	// void GetOutpostStructureUpgradeCost(int32_t TheaterSlot, int32_t UpgradeLevel, UFortOutpostItemDefinition* OutpostStructure, TArray<FFortItemQuantityPair>& OutWorldItems, TArray<FFortItemQuantityPair>& OutAccountItems); // [0x2b8cd60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetOutpostStructureMaxLevel
	// int32_t GetOutpostStructureMaxLevel(int32_t TheaterSlot, UFortOutpostItemDefinition* OutpostStructure);                  // [0x2b8cca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetOutpostCoreLevelByTheaterId
	// bool GetOutpostCoreLevelByTheaterId(FString TheaterId, int32_t& OutCoreLevel);                                           // [0x2b8cba0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetOutpostCoreLevelByItemDefinition
	// bool GetOutpostCoreLevelByItemDefinition(UFortOutpostItemDefinition* OutpostCoreItemDef, int32_t& OutCoreLevel);         // [0x2b8cad0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetMeshForCurrentDisplayedItem
	// UMeshComponent* GetMeshForCurrentDisplayedItem();                                                                        // [0x2b8caa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.GetMCPRegion
	// FText GetMCPRegion();                                                                                                    // [0x2b8c910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetMaxAvailableDifficulty
	// FGameDifficultyInfo GetMaxAvailableDifficulty(bool bIncludeMissionAlertTiles);                                           // [0x2b8c990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetLobbyBackgroundLevelName
	// FName GetLobbyBackgroundLevelName();                                                                                     // [0x2b8c8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetItemFromItemQuantityPair
	// UFortItemDefinition* GetItemFromItemQuantityPair(FFortItemQuantityPair& InPair);                                         // [0x2b8c810] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetHeroPlayerPawnForCurrentDisplayedItem
	// AFortPlayerPawn* GetHeroPlayerPawnForCurrentDisplayedItem();                                                             // [0x2b8c7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.GetHeroPlayerPawnByIndex
	// AFortPlayerPawn* GetHeroPlayerPawnByIndex(int32_t PartyMemberIndex);                                                     // [0x2b8c750] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.GetHarvestingToolForLevel
	// UFortWorldItemDefinition* GetHarvestingToolForLevel(int32_t TheaterSlot, int32_t InHarvestingOptimizerLevel);            // [0x2b8c690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFrontEndCamera
	// EFrontEndCamera GetFrontEndCamera();                                                                                     // [0x2b8c660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFocusedTile
	// AFortTheaterMapTile* GetFocusedTile();                                                                                   // [0x2b8c630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFocusedOrActiveTileMissionDetails
	// bool GetFocusedOrActiveTileMissionDetails(FFortMissionDetails& MissionDetails);                                          // [0x2b8c570] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFocusedOrActiveTile
	// AFortTheaterMapTile* GetFocusedOrActiveTile();                                                                           // [0x2b8c540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFeatureStateReasonText
	// FText GetFeatureStateReasonText(EFortFrontEndFeatureStateReason Reason);                                                 // [0x2b8c470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFeatureState
	// void GetFeatureState(EFortFrontEndFeature Feature, EFortFrontEndFeatureState& OutFeatureState, EFortFrontEndFeatureStateReason& OutReason); // [0x2b8c350] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFabricatorStoredGooAmount
	// int32_t GetFabricatorStoredGooAmount(int32_t TheaterSlot);                                                               // [0x2b8c2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFabricatorIncomingGooAmount
	// int32_t GetFabricatorIncomingGooAmount(int32_t TheaterSlot);                                                             // [0x2b8c2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetFabricatorDisintegrationSecondsRemaining
	// int32_t GetFabricatorDisintegrationSecondsRemaining(int32_t TheaterSlot);                                                // [0x2b8c2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetDesiredPlayButtonCamera
	// EFrontEndCamera GetDesiredPlayButtonCamera();                                                                            // [0x2b8c290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetDefenderSquadIDByTheaterID
	// FName GetDefenderSquadIDByTheaterID(FString TheaterId);                                                                  // [0x2b8c1e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetCurrentTheaterName
	// FText GetCurrentTheaterName();                                                                                           // [0x2b8c160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetAvailableDifficulties
	// TArray<FGameDifficultyInfo> GetAvailableDifficulties(bool bIncludeMissionAlertTiles);                                    // [0x2b8c0b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetAvailableAthenaPlaylists
	// TArray<UAthenaCustomPlaylistEvent*> GetAvailableAthenaPlaylists();                                                       // [0x2b8c030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetAttributeIcon
	// FFortMultiSizeBrush GetAttributeIcon(FFortAttributeInfo& InAttribute, FGameplayTagContainer InRequiredTags);             // [0x2b8be40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetAttributeDisplayName
	// FText GetAttributeDisplayName(FFortAttributeInfo& InAttribute, FGameplayTagContainer InRequiredTags);                    // [0x2b8bc60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetAttributeDescription
	// FText GetAttributeDescription(FFortAttributeInfo& InAttribute, FGameplayTagContainer InRequiredTags);                    // [0x2b8ba80] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetAllTheaterData
	// bool GetAllTheaterData(TArray<FFortTheaterMapData>& OutAllTheaterData);                                                  // [0x2b8b9a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetActiveTileMissionDetails
	// bool GetActiveTileMissionDetails(FFortMissionDetails& MissionDetails);                                                   // [0x2b8b8e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetActiveTile
	// AFortTheaterMapTile* GetActiveTile();                                                                                    // [0x2b8b8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.GetAccountLevelUpRewards
	// void GetAccountLevelUpRewards(TArray<FFortItemQuantityPair>& Rewards, int32_t AccountLevel);                             // [0x2b8b790] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.ForceSetFeatureState
	// void ForceSetFeatureState(EFortFrontEndFeature Feature, EFortFrontEndFeatureState State, EFortFrontEndFeatureStateReason Reason); // [0x2b8b690] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.ClearSelectedTheater
	// void ClearSelectedTheater();                                                                                             // [0x2b8b630] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.CanShowLockerSlotType
	// bool CanShowLockerSlotType(EAthenaCustomizationCategory SlotType);                                                       // [0x2b8b5a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.CanFindTileForQuest
	// bool CanFindTileForQuest(UFortQuestItem* QuestItem);                                                                     // [0x2b8b510] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.CanCompleteQuestInFocusedOrActiveTileMission
	// bool CanCompleteQuestInFocusedOrActiveTileMission(UFortQuestItem* QuestItem);                                            // [0x2b8b480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.CanCompleteQuestInActiveTileMission
	// bool CanCompleteQuestInActiveTileMission(UFortQuestItem* QuestItem);                                                     // [0x2b8b3f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortFrontEndContext.BroadcastMainTabSelected
	// void BroadcastMainTabSelected(FName TabName);                                                                            // [0x2b8b370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.BindToFeatureStateAndInitialize
	// void BindToFeatureStateAndInitialize(EFortFrontEndFeature Feature, DelegateProperty Delegate);                           // [0x2b8b280] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortFrontEndContext.AreProfilesAvailableToWIFE
	// bool AreProfilesAvailableToWIFE();                                                                                       // [0x2b8b250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortGameFeedbackBase
/// Size: 0x00A0 (0x0003F0 - 0x000490)
class UFortGameFeedbackBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(UEditableText*)                            SubjectEditable                                             OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UMultiLineEditableText*)                   BodyEditable                                                OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UCommonButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGameFeedbackBase.SubmitFeedback
	// void SubmitFeedback();                                                                                                   // [0x2b97fe0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameFeedbackBase.OnSelectionButtonChanged
	// void OnSelectionButtonChanged(UCommonButton* SelectedButton, int32_t ButtonIndex);                                       // [0x2b96810] Final|Native|Private 
	// Function /Script/FortniteUI.FortGameFeedbackBase.OnInitiateDebugInfoForFeedbackComplete
	// void OnInitiateDebugInfoForFeedbackComplete();                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortGameFeedbackBase.InitiateDebugInfoForFeedback
	// void InitiateDebugInfoForFeedback();                                                                                     // [0x2b96250] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameFeedbackBase.CancelFeedback
	// void CancelFeedback();                                                                                                   // [0x2b937f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameFeedbackBase.AddButtonWithFeedbackType
	// void AddButtonWithFeedbackType(UCommonButton* Button, EFortUIGameFeedbackType GameFeedbackType);                         // [0x2b932e0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortGameOptions
/// Size: 0x0038 (0x000220 - 0x000258)
class UFortGameOptions : public UFortOptionsTab
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	DMember(float)                                     MinGammaValue                                               OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     MaxGammaValue                                               OFFSET(get<float>, {0x224, 4, 0, 0})
	CMember(TArray<UFortSettingInfo*>)                 TabSettingsData                                             OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(TArray<UFortHUDVisibilityData*>)           HUDData                                                     OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(UCommonListView*)                          OptionsListView                                             OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(UCommonListView*)                          HUDCommonListView                                           OFFSET(get<T>, {0x250, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGameOptions.UpdatePossibleLanguages
	// void UpdatePossibleLanguages();                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortGameOptions.UpdateHUDSettings
	// void UpdateHUDSettings(FGameplayTag HUDMapping, bool NewVisibility);                                                     // [0x2b983c0] Final|Native|Private|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortGameOptions.UpdateGammaSettings
	// void UpdateGammaSettings(float GammaValue);                                                                              // [0x2b98340] Final|Native|Private|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortGameOptions.SetIgnoreGamepadInput
	// void SetIgnoreGamepadInput(bool bIgnore);                                                                                // [0x2b979a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.SetHearingImpairedMode
	// void SetHearingImpairedMode(bool bHearingImpaired);                                                                      // [0x2b97910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.SetControllerPlatform
	// void SetControllerPlatform(FString InControllerPlatform);                                                                // [0x2b97690] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.SetColorBlindStrength
	// void SetColorBlindStrength(float InColorBlindStrength);                                                                  // [0x2b97590] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.SetColorBlindMode
	// void SetColorBlindMode(EColorBlindMode InMode);                                                                          // [0x2b97510] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.IsHearingImpairedFeatureAvailable
	// bool IsHearingImpairedFeatureAvailable();                                                                                // [0x2b96640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.Initialize
	// bool Initialize();                                                                                                       // [0x2b96220] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.HandleGamePadToggleMode
	// void HandleGamePadToggleMode();                                                                                          // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortGameOptions.GetOptionsListWidget
	// UWidget* GetOptionsListWidget(UObject* Item);                                                                            // [0x2b95660] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.GetIgnoreGamepadInput
	// bool GetIgnoreGamepadInput();                                                                                            // [0x2b94e30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.GetHUDSettings
	// bool GetHUDSettings(FGameplayTag HUDMapping);                                                                            // [0x2b94d70] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.GetHUDListWidget
	// UWidget* GetHUDListWidget(UObject* Item);                                                                                // [0x2b94ce0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.GetHearingImpairedMode
	// bool GetHearingImpairedMode();                                                                                           // [0x2b94e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.GetGammaSettings
	// float GetGammaSettings();                                                                                                // [0x2b94cb0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.GetDefaultGammaSettings
	// float GetDefaultGammaSettings();                                                                                         // [0x2b94940] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.GetControllerPlatform
	// FString GetControllerPlatform();                                                                                         // [0x2b94740] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.GetColorBlindStrength
	// float GetColorBlindStrength();                                                                                           // [0x2b94550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.GetColorBlindMode
	// EColorBlindMode GetColorBlindMode();                                                                                     // [0x2b94520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGameOptions.ConstructSettingList
	// void ConstructSettingList();                                                                                             // [0x2b93a90] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.ConstructHUDTagList
	// void ConstructHUDTagList();                                                                                              // [0x2b93a70] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortGameOptions.CanIgnoreGamepadInput
	// bool CanIgnoreGamepadInput();                                                                                            // [0x2b73870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortInputOptions
/// Size: 0x0028 (0x000220 - 0x000248)
class UFortInputOptions : public UFortOptionsTab
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(TArray<UFortOptionsMenuInputData*>)        InputData                                                   OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UCommonListView*)                          InputCommonListView                                         OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UCommonTextBlock*)                         TooltipDisplay                                              OFFSET(get<T>, {0x238, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortInputOptions.HandleUsingGamepadChanged
	// void HandleUsingGamepadChanged(ECommonInputType bNewInputType);                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortInputOptions.GetListWidget
	// UWidget* GetListWidget(UObject* Item);                                                                                   // [0x2ba9530] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortInputOptions.GetBindedKeyNameBP
	// FText GetBindedKeyNameBP(int32_t KeyBind, bool IsPrimary);                                                               // [0x2ba8690] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInputOptions.ConstructKeyBindList
	// void ConstructKeyBindList();                                                                                             // [0x2b7aa60] Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortInputOptions.ChangeBinding
	// void ChangeBinding(bool IsPrimarySlot, int32_t Input, FKey NewKey);                                                      // [0x2ba79b0] Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortGamepadInputOptions
/// Size: 0x0000 (0x000248 - 0x000248)
class UFortGamepadInputOptions : public UFortInputOptions
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:


	/// Functions
	// Function /Script/FortniteUI.FortGamepadInputOptions.SetControllerPlatform
	// void SetControllerPlatform(FString InControllerPlatform);                                                                // [0x2b97690] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGamepadInputOptions.ResetCustomGamepadToDefault
	// void ResetCustomGamepadToDefault();                                                                                      // [0x2b96ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGamepadInputOptions.IsCustomGamepadConfig
	// bool IsCustomGamepadConfig(FString ConfigName);                                                                          // [0x2b964d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGamepadInputOptions.HasCustomGamepadBindingChanges
	// bool HasCustomGamepadBindingChanges();                                                                                   // [0x2b96170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGamepadInputOptions.HandleGamePadToggleMode
	// void HandleGamePadToggleMode();                                                                                          // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortGamepadInputOptions.GetControllerPlatform
	// FString GetControllerPlatform();                                                                                         // [0x2b947c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGamepadInputOptions.EnableAnalogCursor
	// void EnableAnalogCursor();                                                                                               // [0x2b93db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGamepadInputOptions.DisableAnalogCursor
	// void DisableAnalogCursor();                                                                                              // [0x2b93b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGamepadInputOptions.ConstructKeyBindList
	// void ConstructKeyBindList();                                                                                             // [0x2b7aa60] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortGamepadInputOptions.ChangeBinding
	// void ChangeBinding(bool IsPrimarySlot, int32_t Input, FKey NewKey);                                                      // [0x2ba79b0] Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortGiftBoxButton
/// Size: 0x0018 (0x000800 - 0x000818)
class UFortGiftBoxButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	CMember(UFortGiftBoxItemDefinition*)               GiftBoxDefinition                                           OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(UCommonLazyImage*)                         Image_Gift                                                  OFFSET(get<T>, {0x810, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGiftBoxButton.PlayGiftSelectedAnimation
	// void PlayGiftSelectedAnimation(bool bIsSelected);                                                                        // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortGiftingOptionsPanel
/// Size: 0x0150 (0x000210 - 0x000360)
class UFortGiftingOptionsPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(TArray<UFortGiftBoxItemDefinition*>)       GiftBoxes                                                   OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(TArray<UFortGiftBoxItemDefinition*>)       GiftBoxItemDefs                                             OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(UFortGiftBoxButton*)                       GiftBoxButton                                               OFFSET(get<T>, {0x288, 8, 0, 0})
	SMember(FText)                                     DefaultGiftMessage                                          OFFSET(getStruct<T>, {0x290, 24, 0, 0})
	DMember(int32_t)                                   PersonalizedMessageLength                                   OFFSET(get<int32_t>, {0x2A8, 4, 0, 0})
	CMember(TArray<UFortUserDetails*>)                 UserDetailArray                                             OFFSET(get<T>, {0x2E0, 16, 0, 0})
	CMember(UCommonListView*)                          ListView_Friends                                            OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(UCommonTileView*)                          TileView_GiftBoxes                                          OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_FriendCount                                            OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Price                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_FinalPrice                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_GiftCount                                              OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Cancel                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Continue                                             OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(UCommonButton*)                            Button_BackToFriends                                        OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(UEditableText*)                            EditableText_Message                                        OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_CharCount                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(UImage*)                                   Image_RecipientCurrency                                     OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(UImage*)                                   Image_GiftCurrency                                          OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Send                                                 OFFSET(get<T>, {0x358, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.ShowFriendSelection
	// void ShowFriendSelection();                                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.SetOffer
	// void SetOffer(UFortDirectAcquisitionOfferInfo* OfferInfo);                                                               // [0x2b97b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.HandleSendClicked
	// void HandleSendClicked(UCommonButton* Button);                                                                           // [0x2b96010] Final|Native|Protected 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.HandleMessageChanged
	// void HandleMessageChanged(FText& Text);                                                                                  // [0x2b95f40] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.HandleContinueClicked
	// void HandleContinueClicked(UCommonButton* Button);                                                                       // [0x2b95ec0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.HandleCancelSelected
	// void HandleCancelSelected(UCommonButton* Button);                                                                        // [0x2b695c0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.HandleBackToFriendsSelected
	// void HandleBackToFriendsSelected(UCommonButton* Button);                                                                 // [0x2b95e40] Final|Native|Protected 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.GiftSentCallback
	// void GiftSentCallback(bool bSuccess, TArray<FString>& IneligableAccounts);                                               // [0x2b95d20] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.DynamicItemCreated
	// void DynamicItemCreated(UUserWidget* Widget);                                                                            // [0x2b93d30] Final|Native|Protected 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.DynamicHandleGiftboxSelected
	// void DynamicHandleGiftboxSelected(UObject* SelectedItem);                                                                // [0x2b93cb0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.DynamicHandleFriendSelected
	// void DynamicHandleFriendSelected(UObject* SelectedItem);                                                                 // [0x2b93c30] Final|Native|Protected 
	// Function /Script/FortniteUI.FortGiftingOptionsPanel.AllowGiftWrapSelection
	// void AllowGiftWrapSelection(bool bIsAllowed);                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortUserDetails
/// Size: 0x0040 (0x000028 - 0x000068)
class UFortUserDetails : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/FortniteUI.FortGiftingUserItem
/// Size: 0x0020 (0x000800 - 0x000820)
class UFortGiftingUserItem : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:
	CMember(UFortUserDetails*)                         ItemData                                                    OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_DisplayName                                            OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Alias                                                  OFFSET(get<T>, {0x818, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGiftingUserItem.SetSelectionState
	// void SetSelectionState(ESelectionState NewState, bool bAnimateOnSelect);                                                 // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortGlobalUIContext
/// Size: 0x03C8 (0x000028 - 0x0003F0)
class UFortGlobalUIContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(UMulticastDelegate)                        SubGameChanged                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnKeybindsChanged                                           OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputActionHoldStarted                                    OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInputActionHoldStopped                                    OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTeamPowerChanged                                          OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(UMulticastDelegate)                        DragAndDropStartedDelegate                                  OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        DragAndDropEndedDelegate                                    OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnScoreReportChanged                                        OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnContextHelpChanged                                        OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemReceivedNotificationShown                             OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInventoryUpdated                                          OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemReceivedFlowUpdated                                   OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnGraphNodeDrillDown                                        OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnGraphNodeSelected                                         OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQueryFortBackendVersionComplete                           OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLoadingScreenVisibilityChanged                            OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerControllerConnectionChanged                    OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(TMap<FName, UFortUIMessageManager*>)       MessageManagersByName                                       OFFSET(get<T>, {0x1C8, 80, 0, 0})
	CMember(TMap<EFortUIFeature, FFortUIFeatureStruct>) Features                                                   OFFSET(get<T>, {0x218, 80, 0, 0})
	CMember(UAthenaMatchReadyDesktopPopup*)            AthenaMatchReadyNotificationWidget                          OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(UFortHelpItem*)                            ActiveContextSpecificHelpItem                               OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(bool)                                      bIsUIVisible                                                OFFSET(get<bool>, {0x378, 1, 0, 0})
	DMember(bool)                                      bShowRateWidget                                             OFFSET(get<bool>, {0x379, 1, 0, 0})
	DMember(bool)                                      bItemReceivedFlowActive                                     OFFSET(get<bool>, {0x37A, 1, 0, 0})
	CMember(TArray<UFortItemReceivedWidgetBase*>)      RegisteredItemReceivedWidgets                               OFFSET(get<T>, {0x380, 16, 0, 0})
	SMember(FText)                                     FeedbackTitle                                               OFFSET(getStruct<T>, {0x390, 24, 0, 0})
	SMember(FDateTime)                                 FirstLoginTime                                              OFFSET(getStruct<T>, {0x3A8, 8, 0, 0})
	SMember(FTimerHandle)                              AddictionMsgTimer                                           OFFSET(getStruct<T>, {0x3B0, 8, 0, 0})
	SMember(FUniqueNetIdRepl)                          CurrentLocalPlayerUniqueNetId                               OFFSET(getStruct<T>, {0x3B8, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGlobalUIContext.UnregisterToReceiveNotifications
	// void UnregisterToReceiveNotifications(EFortNotificationQueueType NotificationQueueType);                                 // [0x2b982c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.UnregisterScriptedAction
	// void UnregisterScriptedAction(UClass* ScriptedAction);                                                                   // [0x2b98240] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.UnregisterItemReceivedWidget
	// bool UnregisterItemReceivedWidget(UFortItemReceivedWidgetBase* WidgetToUnregster);                                       // [0x2b981b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.UnbindToFeatureState
	// void UnbindToFeatureState(EFortUIFeature Feature, DelegateProperty Delegate);                                            // [0x2b980c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.TriggerUIFeedbackEvent
	// void TriggerUIFeedbackEvent(FName EventName);                                                                            // [0x2b98040] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.TriggerNewQuestStickies
	// void TriggerNewQuestStickies();                                                                                          // [0x2b98020] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.TriggerCompletedQuestStickies
	// void TriggerCompletedQuestStickies();                                                                                    // [0x2b98000] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ShowWebURL
	// bool ShowWebURL(FString URL, EFortUrlType URLType);                                                                      // [0x2b97ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ShowConsoleAccountPicker
	// void ShowConsoleAccountPicker(int32_t ControllerIndex, DelegateProperty& CompletionDelegate);                            // [0x2b97df0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ShowBang
	// void ShowBang(EFortBangType Type);                                                                                       // [0x2b97d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ShowAthenaMatchReadyExternalNotificationWindow
	// void ShowAthenaMatchReadyExternalNotificationWindow();                                                                   // [0x2b97d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ShouldShowRateWidget
	// bool ShouldShowRateWidget();                                                                                             // [0x2b97d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.ShouldCloseMenuOnEscape
	// bool ShouldCloseMenuOnEscape();                                                                                          // [0x2b73870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetUpGiftReceivedCallbacks
	// void SetUpGiftReceivedCallbacks();                                                                                       // [0x2b97d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetSubGame
	// void SetSubGame(ESubGame SubGame);                                                                                       // [0x2b97c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetRatingWidgetFeedbackTitle
	// void SetRatingWidgetFeedbackTitle(FText& Title);                                                                         // [0x2b97bc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetItemReceivedFlowActive
	// void SetItemReceivedFlowActive(bool bFlowActive);                                                                        // [0x2b97ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetInputMode
	// void SetInputMode(EFortInputMode InMode);                                                                                // [0x2b97a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetCurrentInputPresetName
	// void SetCurrentInputPresetName(FString InputPresetName);                                                                 // [0x2b97820] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetCurrentCustomInputTemplatePresetName
	// void SetCurrentCustomInputTemplatePresetName(FString InputPresetName);                                                   // [0x2b97730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetContextHelpItem
	// void SetContextHelpItem(UFortHelpItem* ContextSpecificHelpItem);                                                         // [0x2b97610] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SetBangFromCount
	// void SetBangFromCount(EFortBangType Type, int32_t Count);                                                                // [0x2b97450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SendUINavigationAnalytic
	// void SendUINavigationAnalytic(FString Destination, bool bUserInitiated);                                                 // [0x2b97370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SendLeaveZoneAnalytic
	// void SendLeaveZoneAnalytic();                                                                                            // [0x2b97350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.SendExperienceRatingAnalytic
	// void SendExperienceRatingAnalytic(FString RatingType, FString FeedbackSentBy, FText& RatingQuestion, int32_t& StarCount, FString GameSessionID, FString Comment); // [0x2b970d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.RunLauncherWithOptions
	// void RunLauncherWithOptions(FString Options);                                                                            // [0x2b97030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ReturnToSubGameSelect
	// void ReturnToSubGameSelect();                                                                                            // [0x2b97010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.RemoveNotification
	// void RemoveNotification(EFortNotificationQueueType NotificationQueueType, FFortDialogDescription& NotificationDescription); // [0x2b96ee0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.RegisterToReceiveNotifications
	// void RegisterToReceiveNotifications(EFortNotificationQueueType NotificationQueueType, DelegateProperty InOnNotificationAvailable); // [0x2b96df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.RegisterScriptedActions
	// void RegisterScriptedActions(TArray<UClass*> ScriptedActions);                                                           // [0x2b96d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.RegisterScriptedAction
	// void RegisterScriptedAction(UClass* ScriptedAction);                                                                     // [0x2b96c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.RegisterItemReceivedWidget
	// void RegisterItemReceivedWidget(UFortItemReceivedWidgetBase* WidgetToRegister);                                          // [0x2b96c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.QuitGame
	// void QuitGame();                                                                                                         // [0x2b96bf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.QueryGameBackendVersion
	// void QueryGameBackendVersion();                                                                                          // [0x2b96bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ProcessNotificationResult
	// void ProcessNotificationResult(EFortDialogResult InResult, FFortDialogDescription& NotificationDescription);             // [0x2b96ac0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ProcessConfirmationResult
	// void ProcessConfirmationResult(EFortDialogResult InResult, FName InResultName, FFortDialogDescription_NUI& ConfirmationDescription, bool bWaitingForLatentAction, FFortDialogExternalLatentActionHandle& WaitingDialogHandle); // [0x2b968d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.OnQueryFortBackendVersionDelegate__DelegateSignature
	// void OnQueryFortBackendVersionDelegate__DelegateSignature(FFortBackendVersion FortBackendVersion);                       // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortGlobalUIContext.OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature
	// void OnLocalPlayerControllerConnectionChangedDelegate__DelegateSignature(bool bConnected);                               // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortGlobalUIContext.OnLoadingScreenVisibilityChangedDelegate__DelegateSignature
	// void OnLoadingScreenVisibilityChangedDelegate__DelegateSignature(bool IsVisible);                                        // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortGlobalUIContext.Logout
	// void Logout();                                                                                                           // [0x2b967f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsUsingGamepad
	// bool IsUsingGamepad();                                                                                                   // [0x2b967c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsUIVisible
	// bool IsUIVisible();                                                                                                      // [0x2b96790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsPlaylistEnabled
	// bool IsPlaylistEnabled(FName PlaylistName);                                                                              // [0x2b96700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsPendingLogout
	// bool IsPendingLogout();                                                                                                  // [0x2b966d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsMobileApp
	// bool IsMobileApp();                                                                                                      // [0x2bd2ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsInZone
	// bool IsInZone();                                                                                                         // [0x2b966a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsInOutpostZone
	// bool IsInOutpostZone();                                                                                                  // [0x2b96670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsHUDVisible
	// bool IsHUDVisible();                                                                                                     // [0x2b96610] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsGamepadAttached
	// bool IsGamepadAttached();                                                                                                // [0x2b73870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsDesktopPlatform
	// bool IsDesktopPlatform();                                                                                                // [0x2b73870] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsCustomGamepadConfig
	// bool IsCustomGamepadConfig(int32_t ConfigIndex);                                                                         // [0x2b96580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsCurrentlyShowingLoadingScreen
	// bool IsCurrentlyShowingLoadingScreen();                                                                                  // [0x2b964a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsBluGloEnabled
	// bool IsBluGloEnabled();                                                                                                  // [0x2b96470] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsBattleRoyaleMatchmakingEnabled
	// bool IsBattleRoyaleMatchmakingEnabled();                                                                                 // [0x2b96440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.IsAllContentInstalled
	// bool IsAllContentInstalled();                                                                                            // [0x2b96410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.InputActionHoldStopped
	// void InputActionHoldStopped(FName InputActionName, bool bCompletedSuccessfully);                                         // [0x2b96340] Final|Native|Public  
	// Function /Script/FortniteUI.FortGlobalUIContext.InputActionHoldStarted
	// void InputActionHoldStarted(FName InputActionName, float HoldDuration);                                                  // [0x2b96270] Final|Native|Public  
	// Function /Script/FortniteUI.FortGlobalUIContext.HideBang
	// void HideBang(EFortBangType Type);                                                                                       // [0x2b961a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.HasCompletedOnboardingObjective
	// bool HasCompletedOnboardingObjective(FDataTableRowHandle& Objective);                                                    // [0x2b960c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.HasAccesstoMultipleSubGames
	// bool HasAccesstoMultipleSubGames();                                                                                      // [0x2b96090] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetWatermark
	// FString GetWatermark();                                                                                                  // [0x2b95ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetUseActionName
	// FName GetUseActionName();                                                                                                // [0x2b95c60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetTrapPickerActionName
	// FName GetTrapPickerActionName();                                                                                         // [0x2b95c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetTrapConfirmActionName
	// FName GetTrapConfirmActionName();                                                                                        // [0x2b95be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetTopLevelHelpItems
	// void GetTopLevelHelpItems(TArray<UFortHelpItem*>& ActiveHelpEntries);                                                    // [0x2b95b30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetSwitchQuickBarActionName
	// FName GetSwitchQuickBarActionName();                                                                                     // [0x2b95af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetSubGame
	// ESubGame GetSubGame();                                                                                                   // [0x2b95ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetSessionId
	// FString GetSessionId();                                                                                                  // [0x2b95a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetSeasonalEventManager
	// UFortSeasonalEventManager* GetSeasonalEventManager();                                                                    // [0x2b95a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetScoreReport
	// UFortUIScoreReport* GetScoreReport();                                                                                    // [0x2b959e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetRotatePrimitiveClockwiseActionName
	// FName GetRotatePrimitiveClockwiseActionName();                                                                           // [0x2b959a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetQuestManager
	// UFortQuestManager* GetQuestManager(ESubGame SubGame);                                                                    // [0x2b95910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetPlatformDisplayName
	// FText GetPlatformDisplayName();                                                                                          // [0x2b95890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetPickerConfirmActionName
	// FName GetPickerConfirmActionName(EFortPickerMode PickerMode);                                                            // [0x2b95800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetPickerCancelActionName
	// FName GetPickerCancelActionName(EFortPickerMode PickerMode);                                                             // [0x2b95770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetPerformBuildingImprovementInteractionActionName
	// FName GetPerformBuildingImprovementInteractionActionName();                                                              // [0x2b95730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetPerformBuildingEditInteractionActionName
	// FName GetPerformBuildingEditInteractionActionName();                                                                     // [0x2b956f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetNextNotification
	// bool GetNextNotification(EFortNotificationQueueType NotificationQueueType, FFortDialogDescription& NotificationDescription); // [0x2b95550] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetMessageManager
	// UFortUIMessageManager* GetMessageManager(FName ManagerName, bool& bCreatedNew);                                          // [0x2b95480] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetLastMissionRewardReport
	// UFortUIRewardReport* GetLastMissionRewardReport();                                                                       // [0x2b95450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetLastMissionInfo
	// void GetLastMissionInfo(FFortLastMissionInfo& LastMissionInfo);                                                          // [0x2b95390] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetLastGameSummaryInfo
	// FGameSummaryInfo GetLastGameSummaryInfo();                                                                               // [0x2b95300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetKeyTextForAction
	// FText GetKeyTextForAction(FName Action, FText& ButtonActionType, bool bUseAbbreviatedText);                              // [0x2b95140] Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetKeyForAction
	// FKey GetKeyForAction(FName Action, bool bForceGamepadKey);                                                               // [0x2b95040] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetItemReceivedFlowActive
	// bool GetItemReceivedFlowActive();                                                                                        // [0x2b95010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetInputPriority
	// int32_t GetInputPriority(EInputPriority Priority);                                                                       // [0x2b94f80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetInputDetailsForAction
	// bool GetInputDetailsForAction(FName Action, FFortInputActionDetails& InputActionDetails);                                // [0x2b94e60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetGadget2ActionName
	// FName GetGadget2ActionName();                                                                                            // [0x2b94c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetGadget1ActionName
	// FName GetGadget1ActionName();                                                                                            // [0x2b94c30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetFireActionName
	// FName GetFireActionName();                                                                                               // [0x2b94bf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetFeedbackTitle
	// FText GetFeedbackTitle();                                                                                                // [0x2b94b60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetFeatureStateReasonText
	// FText GetFeatureStateReasonText(EFortUIFeatureStateReason Reason);                                                       // [0x2b94a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetFeatureState
	// void GetFeatureState(EFortUIFeature Feature, EFortUIFeatureState& OutFeatureState, EFortUIFeatureStateReason& OutReason); // [0x2b94970] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetCurrentInputPresetName
	// FString GetCurrentInputPresetName();                                                                                     // [0x2b948c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetCurrentCustomInputTemplatePresetName
	// FString GetCurrentCustomInputTemplatePresetName();                                                                       // [0x2b94840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetConningXpModifierMessage
	// FText GetConningXpModifierMessage(int32_t TotalSkillPoints, int32_t ContentDifficulty);                                  // [0x2b94640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetConningDifficultyXpModifier
	// float GetConningDifficultyXpModifier(int32_t TotalSkillPoints, int32_t ContentDifficulty);                               // [0x2b94580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetCollectionBookManager
	// UFortCollectionBookManager* GetCollectionBookManager();                                                                  // [0x2b944f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetChangeMaterialActionName
	// FName GetChangeMaterialActionName();                                                                                     // [0x2b944b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetBuildConfirmActionName
	// FName GetBuildConfirmActionName();                                                                                       // [0x2b94470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetBackendName
	// FString GetBackendName();                                                                                                // [0x2b943f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetAthenaCodeOfConductURL
	// FString GetAthenaCodeOfConductURL();                                                                                     // [0x2b94370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetAllPlayerInputPresetNamesForSubGame
	// void GetAllPlayerInputPresetNamesForSubGame(ESubGame SubGame, TArray<FString>& InputPresetNames, TArray<FText>& InputPresetFriendlyNames); // [0x2b941a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetAllPlayerInputPresetNames
	// void GetAllPlayerInputPresetNames(TArray<FString>& InputPresetNames, TArray<FText>& InputPresetFriendlyNames);           // [0x2b94010] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetAccountGameplayRestrictionText
	// FText GetAccountGameplayRestrictionText();                                                                               // [0x2b93f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetAbility3ActionName
	// FName GetAbility3ActionName();                                                                                           // [0x2b93f50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetAbility2ActionName
	// FName GetAbility2ActionName();                                                                                           // [0x2b93f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.GetAbility1ActionName
	// FName GetAbility1ActionName();                                                                                           // [0x2b93ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.ForceSetFeatureState
	// void ForceSetFeatureState(EFortUIFeature Feature, EFortUIFeatureState ForcedState, EFortUIFeatureStateReason Reason);    // [0x2b93dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.DisplayStateContent
	// void DisplayStateContent(bool bDisplay);                                                                                 // [0x2b93ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.CopyToClipboard
	// void CopyToClipboard(FString ClipboardText);                                                                             // [0x2b93ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ContentInstallationProgress
	// float ContentInstallationProgress();                                                                                     // [0x2b93ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.CloseExternalNotificationWindowIfOpen
	// void CloseExternalNotificationWindowIfOpen();                                                                            // [0x2b93a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ClearSelectionGroup
	// void ClearSelectionGroup(FName SelectionGroup);                                                                          // [0x2b939d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ClearRatingWidgetInfo
	// void ClearRatingWidgetInfo();                                                                                            // [0x2b939b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ClearLastMissionReports
	// void ClearLastMissionReports();                                                                                          // [0x2b93990] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.ClearLastGameSummaryInfo
	// void ClearLastGameSummaryInfo();                                                                                         // [0x2b93970] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.ClearForceSetFeatureState
	// void ClearForceSetFeatureState(EFortUIFeature Feature);                                                                  // [0x2b938f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.CheckFlag
	// void CheckFlag(FString FlagName, EFlagStatus& OutStatus);                                                                // [0x2b93810] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.CanPlay
	// bool CanPlay(ESubGame SubGame, FText& DenialReason);                                                                     // [0x2b936d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.CanMatchmake
	// bool CanMatchmake(ESubGame SubGame, FText& DenialReason);                                                                // [0x2b935b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.BroadcastItemReceivedNotificationShown
	// void BroadcastItemReceivedNotificationShown(bool IsActive);                                                              // [0x2b93520] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.BindToFeatureStateAndInitialize
	// void BindToFeatureStateAndInitialize(EFortUIFeature Feature, DelegateProperty Delegate);                                 // [0x2b93430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.AutoSelectSubGame
	// bool AutoSelectSubGame();                                                                                                // [0x2b93400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGlobalUIContext.AllowQuit
	// bool AllowQuit();                                                                                                        // [0x2b933d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortGlobalUIContext.AllowLogout
	// bool AllowLogout();                                                                                                      // [0x2b933a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortGridWidgetBase
/// Size: 0x0148 (0x000118 - 0x000260)
class UFortGridWidgetBase : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(UClass*)                                   ClearWidgetType                                             OFFSET(get<T>, {0x118, 8, 0, 0})
	DMember(float)                                     TileWidth                                                   OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     TileHeight                                                  OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(int32_t)                                   TilesAcross                                                 OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	DMember(int32_t)                                   TilesDown                                                   OFFSET(get<int32_t>, {0x12C, 4, 0, 0})
	DMember(bool)                                      bShrinkToFit                                                OFFSET(get<bool>, {0x130, 1, 0, 0})
	DMember(float)                                     PeekOverflowTilePercentage                                  OFFSET(get<float>, {0x134, 4, 0, 0})
	SMember(FMargin)                                   TilePadding                                                 OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	SMember(FSlateBrush)                               GridBackground                                              OFFSET(getStruct<T>, {0x148, 136, 0, 0})
	SMember(FMargin)                                   GridBackgroundPadding                                       OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})
	CMember(TArray<UObject*>)                          DataProvider                                                OFFSET(get<T>, {0x1E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTileGenerated                                             OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTileClicked                                               OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMouseEnterTile                                            OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMouseLeaveTile                                            OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UClass*)                                   TileWidgetType                                              OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(EGridSortKind)                             SortKind                                                    OFFSET(get<T>, {0x238, 1, 0, 0})
	DMember(bool)                                      bReversed                                                   OFFSET(get<bool>, {0x239, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGridWidgetBase.SetTileWidth
	// void SetTileWidth(float Width);                                                                                          // [0x2b9c7d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridWidgetBase.SetTilesDown
	// void SetTilesDown(int32_t Down);                                                                                         // [0x2b9c8d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridWidgetBase.SetTilesAcross
	// void SetTilesAcross(int32_t Across);                                                                                     // [0x2b9c850] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridWidgetBase.SetTilePadding
	// void SetTilePadding(FMargin Padding);                                                                                    // [0x2b9c740] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridWidgetBase.SetTileHeight
	// void SetTileHeight(float Height);                                                                                        // [0x2b9c6c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridWidgetBase.SetPeekOverflowTilePercentage
	// void SetPeekOverflowTilePercentage(float Percent);                                                                       // [0x2b9c640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridWidgetBase.SetDataProvider
	// void SetDataProvider(TArray<UObject*>& Data);                                                                            // [0x2b9c500] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridWidgetBase.SetClearWidgetType
	// void SetClearWidgetType(UClass* InClearWidgetType);                                                                      // [0x2b9c3d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridWidgetBase.GetTiles
	// TArray<UFortGridPickerTile*> GetTiles();                                                                                 // [0x2b9bcd0] Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortGridWidgetBase.GetTileForObject
	// UFortGridPickerTile* GetTileForObject(UObject* Object);                                                                  // [0x2b9bc30] Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortGridPickerButton
/// Size: 0x0048 (0x000260 - 0x0002A8)
class UFortGridPickerButton : public UFortGridWidgetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(TEnumAsByte<EMenuPlacement>)               GridPlacement                                               OFFSET(get<T>, {0x260, 1, 0, 0})
	CMember(UFortGridPickerGrid*)                      GridWidget                                                  OFFSET(get<T>, {0x268, 8, 0, 0})
	DMember(bool)                                      bCloseOnTileClicked                                         OFFSET(get<bool>, {0x270, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnGridPickerOpenChanged                                     OFFSET(get<T>, {0x288, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGridPickerButton.SetIsOpen
	// void SetIsOpen(bool ShouldBeOpen);                                                                                       // [0x2b9c5b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridPickerButton.OnIsGridPickerOpenChanged__DelegateSignature
	// void OnIsGridPickerOpenChanged__DelegateSignature(bool IsOpen);                                                          // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortGridPickerButton.OnButtonClicked
	// void OnButtonClicked();                                                                                                  // [0x2b9c020] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortGridPickerButton.CreateGridWidget__DelegateSignature
	// UFortGridPickerGrid* CreateGridWidget__DelegateSignature();                                                              // [0x154a140] Public|Delegate      
};

/// Class /Script/FortniteUI.FortGridPickerGrid
/// Size: 0x0000 (0x000218 - 0x000218)
class UFortGridPickerGrid : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
};

/// Class /Script/FortniteUI.FortGridPickerTile
/// Size: 0x0010 (0x000218 - 0x000228)
class UFortGridPickerTile : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UObject*)                                  Data                                                        OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UFortGridWidgetBase*)                      Owner                                                       OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortGridPickerTile.SetData
	// void SetData(UObject* InData);                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortGridPickerTile.OnMouseLeave
	// void OnMouseLeave(FPointerEvent& MouseEvent);                                                                            // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortGridPickerTile.OnMouseEnter
	// void OnMouseEnter(FGeometry MyGeometry, FPointerEvent& MouseEvent);                                                      // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortGridPickerTile.OnClicked
	// void OnClicked();                                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortGridPickerTile.ForwardClicked
	// void ForwardClicked();                                                                                                   // [0x2b9ab30] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortGridWidget
/// Size: 0x0010 (0x000260 - 0x000270)
class UFortGridWidget : public UFortGridWidgetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
};

/// Class /Script/FortniteUI.FortHaveInviteSelect
/// Size: 0x0050 (0x0003C0 - 0x000410)
class UFortHaveInviteSelect : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UCommonButton*)                            Button_Yes                                                  OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UCommonButton*)                            Button_No                                                   OFFSET(get<T>, {0x408, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHaveInviteSelect.HandleYesClicked
	// void HandleYesClicked(UCommonButton* Button);                                                                            // [0x2b9bea0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortHaveInviteSelect.HandleNoClicked
	// void HandleNoClicked(UCommonButton* Button);                                                                             // [0x2b9be20] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortHealthWarningBase
/// Size: 0x0060 (0x0003C0 - 0x000420)
class UFortHealthWarningBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	DMember(float)                                     ShowTimeLength                                              OFFSET(get<float>, {0x408, 4, 0, 0})
	CMember(UCommonTextBlock*)                         Text_HealthWarning                                          OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UHorizontalBox*)                           HBox_RatingsIcons                                           OFFSET(get<T>, {0x418, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortHelpTreeItemBase
/// Size: 0x0018 (0x000800 - 0x000818)
class UFortHelpTreeItemBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	CMember(UFortHelpItem*)                            HelpItem                                                    OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHelpTreeItemBase.OnHelpItemSet
	// void OnHelpItemSet();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortHelpTreeItemBase.ExpansionChanged
	// void ExpansionChanged(bool bExpanded);                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortHeroManagementContext
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UFortHeroManagementContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(UMulticastDelegate)                        OnPlayerDataUpdated                                         OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMcpHeroDeleteResponse                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMcpHeroCreateResponse                                     OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCurrentHeroChanged                                        OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMcpAbilityChangeRequestResponse                           OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMcpAbilityChangeRequestSent                               OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAbilitySelectionRolledBack                                OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAvailableAbilityPointsChanged                             OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHeroStatsChanged                                          OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(UFortHero*)                                CurrentHero                                                 OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(UFortHero*)                                HeroBeingDeleted                                            OFFSET(get<T>, {0xC8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHeroManagementContext.SetHeroName
	// bool SetHeroName(FString NewName);                                                                                       // [0x1201ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.SetCurrentHero
	// bool SetCurrentHero(FString HeroId);                                                                                     // [0x2b9c450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.RequestSetTraitDepthFromID
	// bool RequestSetTraitDepthFromID(FString HeroId, int32_t TraitIdx, int32_t Depth);                                        // [0x2b9c2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.RequestSetTraitDepth
	// bool RequestSetTraitDepth(int32_t TraitIdx, int32_t Depth);                                                              // [0x2b9c1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.RequestCreateHero
	// bool RequestCreateHero(UFortHeroType* HeroType, FString Name, TEnumAsByte<EFortCustomGender> Gender);                    // [0x2b9c0d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.RedeemPrevAbilityFromID
	// bool RedeemPrevAbilityFromID(FString HeroId, int32_t TraitIdx);                                                          // [0x2b9a8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.RedeemPrevAbility
	// bool RedeemPrevAbility(int32_t TraitIdx);                                                                                // [0x2b9c040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.RedeemAllAbilitiesFromID
	// void RedeemAllAbilitiesFromID(FString HeroId);                                                                           // [0x114dc50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.RedeemAllAbilities
	// bool RedeemAllAbilities();                                                                                               // [0x2bd2ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.PurchaseNextAbilityFromID
	// bool PurchaseNextAbilityFromID(FString HeroId, int32_t TraitIdx);                                                        // [0x2b9a8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.PurchaseNextAbility
	// bool PurchaseNextAbility(int32_t TraitIdx);                                                                              // [0x2b9c040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.MarkHeroAsSeen
	// void MarkHeroAsSeen(FString HeroId);                                                                                     // [0x2b9bf80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.IsSkillTreeUnlocked
	// bool IsSkillTreeUnlocked();                                                                                              // [0x2b9bf50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.IsShowingStatsScreen
	// bool IsShowingStatsScreen();                                                                                             // [0x2b9bf20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.IsCreateHeroEnabled
	// bool IsCreateHeroEnabled();                                                                                              // [0x2bd2ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetTraitDepthFromID
	// int32_t GetTraitDepthFromID(FString HeroId, int32_t TraitIdx);                                                           // [0x2b9b9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetTraitDepth
	// bool GetTraitDepth(int32_t TraitIdx, int32_t& Depth);                                                                    // [0x2b9bd50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetNumUnspentAbilityPointsFromID
	// int32_t GetNumUnspentAbilityPointsFromID(FString HeroId);                                                                // [0x2b9bb80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetNumUnspentAbilityPoints
	// bool GetNumUnspentAbilityPoints(int32_t& NumAbilityPoints);                                                              // [0x2b9bae0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetNumHeroTraits
	// int32_t GetNumHeroTraits();                                                                                              // [0x11b70f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetNextAbilityCostFromID
	// int32_t GetNextAbilityCostFromID(FString HeroId, int32_t TraitIdx);                                                      // [0x2b9b9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetNextAbilityCost
	// int32_t GetNextAbilityCost(int32_t TraitIdx);                                                                            // [0x2b8c2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetMaxNameLength
	// int32_t GetMaxNameLength();                                                                                              // [0x2b9b9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetHeroDataFromID
	// FHeroUIData GetHeroDataFromID(FString HeroId);                                                                           // [0x2b9b900] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetHeroData
	// bool GetHeroData(FHeroUIData& HeroData);                                                                                 // [0x2b9b850] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetDisplayStats
	// void GetDisplayStats(TArray<FFortGameplayEffectModifierDescription>& Stats);                                             // [0x2b9b740] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetCurrentHeroID
	// bool GetCurrentHeroID(FString& HeroId);                                                                                  // [0x2b9b680] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetCoreAbilities
	// TArray<UFortAbilityKit*> GetCoreAbilities();                                                                             // [0x2b9b600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetAttributeValuesArrayFromID
	// bool GetAttributeValuesArrayFromID(FString HeroId, TArray<FGameplayAttribute> Attributes, TArray<float>& Values, bool bUseProxy); // [0x2b9b370] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetAttributeValuesArray
	// bool GetAttributeValuesArray(TArray<FGameplayAttribute> Attributes, TArray<float>& Values, bool bUseProxy);              // [0x2b9b140] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetAttributeValueFromID
	// float GetAttributeValueFromID(FString HeroId, FGameplayAttribute& Attribute, bool bUseProxy);                            // [0x2b9afd0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetAttributeValue
	// float GetAttributeValue(FGameplayAttribute& Attribute, bool bUseProxy);                                                  // [0x2b9aed0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetAllHeroIDs
	// TArray<FString> GetAllHeroIDs();                                                                                         // [0x2b9ae50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetAbilitySystemComponent
	// UFortAbilitySystemComponent* GetAbilitySystemComponent();                                                                // [0x2b9ae20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetAbilityCostFromID
	// int32_t GetAbilityCostFromID(FString HeroId, int32_t TraitIdx, int32_t TraitDepth);                                      // [0x2b9ad00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GetAbilityCost
	// int32_t GetAbilityCost(int32_t TraitIdx, int32_t TraitDepth);                                                            // [0x2b9ac40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.GenerateRandomHeroName
	// void GenerateRandomHeroName(UDataTable* NameTable, FString& Name);                                                       // [0x2b9ab50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.FocusOnHero
	// void FocusOnHero(FString HeroId);                                                                                        // [0x2b9aa40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.CheckHeroNameValidity
	// ENameStatus CheckHeroNameValidity(FString Name);                                                                         // [0x2b9a990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.CanRedeemAllAbilities
	// bool CanRedeemAllAbilities();                                                                                            // [0x2bd2ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.CanModifyTraitDepthFromID
	// bool CanModifyTraitDepthFromID(FString HeroId, int32_t TraitIdx);                                                        // [0x2b9a8a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.CanModifyTraitDepth
	// bool CanModifyTraitDepth(int32_t TraitIdx);                                                                              // [0x2b9c040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroManagementContext.CanAffordNextAbilityFromID
	// bool CanAffordNextAbilityFromID(FString HeroId, int32_t TraitIdx);                                                       // [0x2b9a8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.CanAffordNextAbility
	// bool CanAffordNextAbility(int32_t TraitIdx);                                                                             // [0x2b9c040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.CanAffordAbilityFromID
	// bool CanAffordAbilityFromID(FString HeroId, int32_t TraitIdx, int32_t TraitDepth);                                       // [0x2b9c2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroManagementContext.CanAffordAbility
	// bool CanAffordAbility(int32_t TraitIdx, int32_t TraitDepth);                                                             // [0x2b9c1f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSquadStatDetailsWidget
/// Size: 0x0030 (0x000210 - 0x000240)
class UFortSquadStatDetailsWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
};

/// Class /Script/FortniteUI.FortHeroSquadBonusPerksWidgetBase
/// Size: 0x0010 (0x000240 - 0x000250)
class UFortHeroSquadBonusPerksWidgetBase : public UFortSquadStatDetailsWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(UFortPerkWidget_NUI*)                      SupportBonusPerkWidget                                      OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UFortPerkWidget_NUI*)                      TacticalBonusPerkWidget                                     OFFSET(get<T>, {0x248, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortSquadManagementScreenBase
/// Size: 0x0110 (0x0003F0 - 0x000500)
class UFortSquadManagementScreenBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	CMember(UFortSquadStatsWidgetBase*)                SquadStatsWidget                                            OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UFortSquadSlotsView*)                      SquadSlotsView                                              OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UFortSquadSlotDetailsPanel*)               SelectedSlotDetailsPanel                                    OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UFortSquadSlotItemPicker*)                 SelectedSlotItemPicker                                      OFFSET(get<T>, {0x418, 8, 0, 0})
	SMember(FDataTableRowHandle)                       InspectInputActionRowHandle                                 OFFSET(getStruct<T>, {0x420, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ManageInputActionRowHandle                                  OFFSET(getStruct<T>, {0x430, 16, 0, 0})
	SMember(FDataTableRowHandle)                       BackInputActionRowHandle                                    OFFSET(getStruct<T>, {0x440, 16, 0, 0})
	SMember(FDataTableRowHandle)                       InventoryInputActionRowHandle                               OFFSET(getStruct<T>, {0x450, 16, 0, 0})
	SMember(FDataTableRowHandle)                       InventoryCloseInputActionRowHandle                          OFFSET(getStruct<T>, {0x460, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ClosePickerInputActionRowHandle                             OFFSET(getStruct<T>, {0x470, 16, 0, 0})
	SMember(FDataTableRowHandle)                       SelectPickerSlotActionRowHandle                             OFFSET(getStruct<T>, {0x480, 16, 0, 0})
	SMember(FDataTableRowHandle)                       CyclePickerSortActionRowHandle                              OFFSET(getStruct<T>, {0x490, 16, 0, 0})
	SMember(FDataTableRowHandle)                       PreviousSquadActionRowHandle                                OFFSET(getStruct<T>, {0x4A0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       NextSquadActionRowHandle                                    OFFSET(getStruct<T>, {0x4B0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ClearAllActionRowHandle                                     OFFSET(getStruct<T>, {0x4C0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       AutoSlotActionRowHandle                                     OFFSET(getStruct<T>, {0x4D0, 16, 0, 0})
	CMember(UFortItemViewContext_SquadSlotsView*)      ItemViewContext_SquadSlotsView                              OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(UFortItemViewContext_SquadSlotItemPicker*) ItemViewContext_SquadSlotItemPicker                         OFFSET(get<T>, {0x4F8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.TryGetStaticSquadDataBP
	// bool TryGetStaticSquadDataBP(FHomebaseSquad& OutSquadData);                                                              // [0x2bea1d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.TryGetSquadTeamAttribute
	// bool TryGetSquadTeamAttribute(FGameplayAttribute& OutGameplayAttribute);                                                 // [0x2bea110] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.TryGetSquadMainAttribute
	// bool TryGetSquadMainAttribute(FGameplayAttribute& OutGameplayAttribute);                                                 // [0x2bea050] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.TryGetAttributeValueFromSquad
	// bool TryGetAttributeValueFromSquad(float& OutValue, FGameplayAttribute& Attribute);                                      // [0x2be9ea0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.SetIdOfSquadToManageBP
	// void SetIdOfSquadToManageBP(FName& SquadId);                                                                             // [0x2be9c80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.SelectSquadWithOffset
	// void SelectSquadWithOffset(int32_t Offset);                                                                              // [0x2be97b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.SelectPreviousSquad
	// void SelectPreviousSquad();                                                                                              // [0x2be9790] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.SelectNextSquad
	// void SelectNextSquad();                                                                                                  // [0x2be9770] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.NavigateToSquadSlot
	// void NavigateToSquadSlot(int32_t SquadSlotIndex);                                                                        // [0x2be96f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleViewInAll
	// void HandleViewInAll(int32_t SquadSlotIndex);                                                                            // [0x2be95e0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleSquadStateChanged
	// void HandleSquadStateChanged();                                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleSquadSlotPickerShown
	// void HandleSquadSlotPickerShown();                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleSquadSlotPickerHidden
	// void HandleSquadSlotPickerHidden();                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleSelectPickerSlotInputAction
	// void HandleSelectPickerSlotInputAction();                                                                                // [0x2be95c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandlePreviousSquadInputAction
	// void HandlePreviousSquadInputAction();                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandlePickerSelectionCommitted
	// void HandlePickerSelectionCommitted(UFortItem* CommittedItem);                                                           // [0x2be9540] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandlePickerSelectionChanged
	// void HandlePickerSelectionChanged(UFortItem* SelectedItem);                                                              // [0x2be94c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleOpenSquadSlot
	// void HandleOpenSquadSlot(int32_t SquadSlotIndex);                                                                        // [0x2be9440] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleNextSquadInputAction
	// void HandleNextSquadInputAction();                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleManageInputAction
	// void HandleManageInputAction();                                                                                          // [0x2be9420] Final|Native|Protected 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleInventoryInputAction
	// void HandleInventoryInputAction();                                                                                       // [0x2be9400] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleInspectInputAction
	// void HandleInspectInputAction();                                                                                         // [0x2be93e0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleDifferentSquadSlotSelected
	// void HandleDifferentSquadSlotSelected(int32_t SquadSlotIndex);                                                           // [0x2be9350] Native|Protected     
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleDifferentSquadSetBP
	// void HandleDifferentSquadSetBP();                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleCyclePickerSortInputAction
	// void HandleCyclePickerSortInputAction();                                                                                 // [0x2be9330] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleClosePickerInputAction
	// void HandleClosePickerInputAction();                                                                                     // [0x2be9310] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.HandleBackInputAction
	// void HandleBackInputAction();                                                                                            // [0x2be92f0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.GetIdOfSquadToManageBP
	// FName GetIdOfSquadToManageBP();                                                                                          // [0x2be9000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadManagementScreenBase.ClearSquad
	// void ClearSquad();                                                                                                       // [0x2be8cf0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortHeroSquadManagementScreen
/// Size: 0x0020 (0x000500 - 0x000520)
class UFortHeroSquadManagementScreen : public UFortSquadManagementScreenBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
	SMember(FDataTableRowHandle)                       ManageDefendersInputActionRowHandle                         OFFSET(getStruct<T>, {0x500, 16, 0, 0})
	CMember(UFortHeroSquadBonusPerksWidgetBase*)       BonusPerksWidget                                            OFFSET(get<T>, {0x510, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHeroSquadManagementScreen.PlayFeedbackForSlottingPerson
	// void PlayFeedbackForSlottingPerson(UFortCharacter* Character, int32_t SlotIndex);                                        // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortIconWithLabel
/// Size: 0x0020 (0x000100 - 0x000120)
class UFortIconWithLabel : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	DMember(bool)                                      ShouldShowIcon                                              OFFSET(get<bool>, {0x100, 1, 0, 0})
	DMember(bool)                                      ShouldCollapseIconWhenNotShown                              OFFSET(get<bool>, {0x101, 1, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               IconBrushSize                                               OFFSET(get<T>, {0x102, 1, 0, 0})
	DMember(bool)                                      ShouldShowLabel                                             OFFSET(get<bool>, {0x103, 1, 0, 0})
	CMember(UClass*)                                   LabelTextStyle                                              OFFSET(get<T>, {0x108, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortHeroSupportPerkIndicator
/// Size: 0x0010 (0x000120 - 0x000130)
class UFortHeroSupportPerkIndicator : public UFortIconWithLabel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(EFortSupportBonusType)                     SupportTypeToRepresent                                      OFFSET(get<T>, {0x128, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHeroSupportPerkIndicator.SetSupportTypeToRepresent
	// void SetSupportTypeToRepresent(EFortSupportBonusType SupportTypeToRepresent);                                            // [0x2ba4040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroSupportPerkIndicator.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* ItemToRepresent);                                                                     // [0x2ba3d90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortHeroSupportPerkWidget
/// Size: 0x0358 (0x000208 - 0x000560)
class UFortHeroSupportPerkWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
	CMember(TWeakObjectPtr<UFortHero*>)                HeroToRepresent                                             OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(EFortSupportBonusType)                     SupportTypeToRepresent                                      OFFSET(get<T>, {0x210, 1, 0, 0})
	CMember(EFortSupportPerkWidgetState)               SupportPerkWidgetState                                      OFFSET(get<T>, {0x211, 1, 0, 0})
	CMember(UFortMultiSizeImage*)                      PerkImage                                                   OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UCommonTextBlock*)                         NameText                                                    OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UCommonTextBlock*)                         DescriptionText                                             OFFSET(get<T>, {0x228, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.SetSupportTypeToRepresent
	// void SetSupportTypeToRepresent(EFortSupportBonusType InSupportTypeToRepresent);                                          // [0x2ba40c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.SetState
	// void SetState(EFortSupportPerkWidgetState InState);                                                                      // [0x2ba3fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.SetHeroToRepresent
	// void SetHeroToRepresent(UFortHero* InHeroToRepresent);                                                                   // [0x2ba3c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.OnSupportTypeUpdated
	// void OnSupportTypeUpdated();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.OnStateChanged
	// void OnStateChanged();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.OnHeroUpdated
	// void OnHeroUpdated();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.IsPerkUnlocked
	// bool IsPerkUnlocked();                                                                                                   // [0x2ba37f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.IsPerkInCorrectSlot
	// bool IsPerkInCorrectSlot();                                                                                              // [0x2ba37c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.IsPerkHighlighted
	// bool IsPerkHighlighted();                                                                                                // [0x2ba3790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.IsPerkEmpty
	// bool IsPerkEmpty();                                                                                                      // [0x2ba3760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.IsPerkActive
	// bool IsPerkActive();                                                                                                     // [0x2ba3730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHeroSupportPerkWidget.IsHeroInSupportSlot
	// bool IsHeroInSupportSlot();                                                                                              // [0x2ba3570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortHomebaseNodeItemUtilities
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortHomebaseNodeItemUtilities : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.TryGetHomebaseNodeState
	// bool TryGetHomebaseNodeState(UWidget* Widget, FName NodeID, FHomebaseNodeState& OutNodeState);                           // [0x2ba4190] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.IsSquadSlotUnseen
	// bool IsSquadSlotUnseen(AFortPlayerController* FortPC, FName& SquadId, int32_t SquadSlot);                                // [0x2ba3850] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.IsHomebaseNodeItemUnseenForTagContainer
	// bool IsHomebaseNodeItemUnseenForTagContainer(AFortPlayerController* FortPC, FGameplayTagContainer& Tags);                // [0x2ba35a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodePageNames
	// void GetHomebaseNodePageNames(TArray<FName>& NodePages);                                                                 // [0x2ba22d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodeItems
	// void GetHomebaseNodeItems(AFortPlayerController* FortPC, TArray<UFortHomebaseNodeItem*>& NodeItems);                     // [0x2ba21f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodeItemNameForTagContainer
	// FName GetHomebaseNodeItemNameForTagContainer(AFortPlayerController* FortPC, FGameplayTagContainer& Tags);                // [0x2ba20e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodeItemForTagContainer
	// UFortHomebaseNodeItem* GetHomebaseNodeItemForTagContainer(AFortPlayerController* FortPC, FGameplayTagContainer& Tags);   // [0x2ba1fe0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodeItemForSquadSlot
	// UFortHomebaseNodeItem* GetHomebaseNodeItemForSquadSlot(AFortPlayerController* FortPC, FName& SquadId, int32_t SquadSlot); // [0x2ba1ed0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.GetHomebaseNodeItem
	// UFortHomebaseNodeItem* GetHomebaseNodeItem(AFortPlayerController* FortPC, FName& NodeID);                                // [0x2ba1e00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.AreAnyHomebaseNodeItemsUnseenForSquadType
	// bool AreAnyHomebaseNodeItemsUnseenForSquadType(AFortPlayerController* FortPC, EFortHomebaseSquadType SquadType);         // [0x2ba1220] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseNodeItemUtilities.AreAnyHomebaseNodeItemsUnseenForSquadId
	// bool AreAnyHomebaseNodeItemsUnseenForSquadId(AFortPlayerController* FortPC, FName& SquadId);                             // [0x2ba1150] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortHomebaseUIContext
/// Size: 0x0070 (0x000028 - 0x000098)
class UFortHomebaseUIContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(UMulticastDelegate)                        OnSquadSlotChanged                                          OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEarlyGameFinished                                         OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnNodePurchased                                             OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UDataTable*)                               SquadIconDataTableAsset                                     OFFSET(get<T>, {0x58, 40, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHomebaseUIContext.SetShowHeroHeadAccessoriesForLocalPlayer
	// void SetShowHeroHeadAccessoriesForLocalPlayer(bool bShow);                                                               // [0x2ba3f30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseUIContext.SetShowHeroBackpackForLocalPlayer
	// void SetShowHeroBackpackForLocalPlayer(bool bShow);                                                                      // [0x2ba3ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHomebaseUIContext.OnSquadSlotChanged__DelegateSignature
	// void OnSquadSlotChanged__DelegateSignature(FName SquadName, int32_t SlotIndex);                                          // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortHomebaseUIContext.OnNodesPurchased__DelegateSignature
	// void OnNodesPurchased__DelegateSignature(FName NodeID);                                                                  // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortHomebaseUIContext.IsInEarlyGame
	// bool IsInEarlyGame();                                                                                                    // [0x2ba36d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.IsAnySquadSlotUnlocked
	// bool IsAnySquadSlotUnlocked(FName SquadId);                                                                              // [0x2ba34e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetWorkerSetBonusEffectModifiers
	// void GetWorkerSetBonusEffectModifiers(FGameplayTag& SetBonusTag, TArray<FFortAttributeModifierDisplayData>& OutModifiers); // [0x2ba3110] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetTotalNodesInSkillTreePage
	// int32_t GetTotalNodesInSkillTreePage(FName PageId);                                                                      // [0x2ba3080] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetSquadIcon
	// FFortMultiSizeBrush GetSquadIcon(FName SquadId);                                                                         // [0x2ba2ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetShowHeroHeadAccessoriesForLocalPlayer
	// bool GetShowHeroHeadAccessoriesForLocalPlayer();                                                                         // [0x2ba2e90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetShowHeroBackpackForLocalPlayer
	// bool GetShowHeroBackpackForLocalPlayer();                                                                                // [0x2ba2e60] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetRootSkillTreePageId
	// FName GetRootSkillTreePageId();                                                                                          // [0x2ba2df0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetRootSkillTreeNodeId
	// FName GetRootSkillTreeNodeId();                                                                                          // [0x2ba2db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetQuestNodeColour
	// FSlateColor GetQuestNodeColour();                                                                                        // [0x2ba2d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetNumOwnedNodesInSkillTreePage
	// int32_t GetNumOwnedNodesInSkillTreePage(FName PageId);                                                                   // [0x2ba2c30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetNodeTagBonusesForDisplay
	// bool GetNodeTagBonusesForDisplay(FName NodeID, TArray<FFortTagUIData>& OutGrantedTagsUIData);                            // [0x2ba2ae0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetNodeDescription
	// bool GetNodeDescription(FName NodeID, FText& OutDescription);                                                            // [0x2ba29c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetNodeAttributeBonusesForDisplay
	// bool GetNodeAttributeBonusesForDisplay(FName NodeID, TArray<FFortDisplayAttribute>& OutDisplayAttributes);               // [0x2ba28a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetLocalPlayerHasHeroHeadAccessories
	// bool GetLocalPlayerHasHeroHeadAccessories();                                                                             // [0x2ba26d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetLocalPlayerHasHeroBackpack
	// bool GetLocalPlayerHasHeroBackpack();                                                                                    // [0x2ba26a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetItemsInSquad
	// TArray<UFortItem*> GetItemsInSquad(FName SquadId, bool bRemoveEmptySquadSlots);                                          // [0x2ba2460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetItemInSquadSlot
	// UFortItem* GetItemInSquadSlot(FName SquadName, int32_t SlotIndex);                                                       // [0x2ba23a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetEarlyGameRootSkillTreePageId
	// FName GetEarlyGameRootSkillTreePageId();                                                                                 // [0x2ba1bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetEarlyGameRootSkillTreeNodeId
	// FName GetEarlyGameRootSkillTreeNodeId();                                                                                 // [0x2ba1b70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetEarlyGameNodeProgressionState
	// void GetEarlyGameNodeProgressionState(int32_t& OutOwnedNodeCount, int32_t& OutRequiredNodeCountToLeaveEarlyGame);        // [0x2ba1a90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHomebaseUIContext.GetEarlyGameNodePageId
	// FName GetEarlyGameNodePageId();                                                                                          // [0x2ba1bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortHomeCMSScreenBase
/// Size: 0x0010 (0x000450 - 0x000460)
class UFortHomeCMSScreenBase : public UEpicCMSScreenBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(UWidgetSwitcher*)                          LayoutSwitcher                                              OFFSET(get<T>, {0x450, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHomeCMSScreenBase.OnTilesLoaded
	// void OnTilesLoaded();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortHomeCMSScreenBase.AreTilesLoaded
	// bool AreTilesLoaded();                                                                                                   // [0x2ba13e0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortHUDCenterPopupMessageWidget
/// Size: 0x0038 (0x000210 - 0x000248)
class UFortHUDCenterPopupMessageWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(UClass*)                                   CenterPopupModalWidgetClass                                 OFFSET(get<T>, {0x210, 40, 0, 0})
	CMember(UCommonActivatablePanel*)                  CenterPopupModalWidget                                      OFFSET(get<T>, {0x240, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHUDCenterPopupMessageWidget.UpdateState
	// void UpdateState();                                                                                                      // [0x2ba42a0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDCenterPopupMessageWidget.OnModalDisplayed
	// void OnModalDisplayed(ECenterPopupMessageStateEnum NewState, UCommonActivatablePanel* ModalPopup);                       // [0x154a140] BlueprintCosmetic|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortHUDCenterPopupMessageWidget.GetCenterPopupMessageState
	// ECenterPopupMessageStateEnum GetCenterPopupMessageState();                                                               // [0x2ba16f0] Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortHUDContext
/// Size: 0x05C8 (0x000028 - 0x0005F0)
class UFortHUDContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1520;

public:
	CMember(UMulticastDelegate)                        OnCursorModeChanging                                        OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCursorModeChanged                                         OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMgmtMenuTabChangeRequested                                OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnIndicatorModeChanged                                      OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnContextualReticleChanged                                  OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnBuildingFocused                                           OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFocusedBuildingStateChanged                               OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFocusedBuildingHealthChanged                              OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFocusedBuildingRepairCostChanged                          OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFocusedBuildingAttachedTrapDurabilityChanged              OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFocusedBuildingAttachedTrapChanged                        OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDamagedResourceBuilding                                   OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerCanInteract                                         OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnInteractUpdated                                           OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPlayerTargetingChanged                                    OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnScoreChanged                                              OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnScoreStatChanged                                          OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnZoneCompleted                                             OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPawnSet                                                   OFFSET(get<T>, {0x150, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDamageReceived                                            OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnUnableToPerformAction                                     OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerMaxHealthChanged                               OFFSET(get<T>, {0x180, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerHealthChanged                                  OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerDied                                           OFFSET(get<T>, {0x1A0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerSpawned                                        OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerRevived                                        OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerKillsChanged                                   OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerPlaceChanged                                   OFFSET(get<T>, {0x1E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerViewTargetChanged                              OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerMaxShieldChanged                               OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerShieldChanged                                  OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerMaxStaminaChanged                              OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnLocalPlayerStaminaChanged                                 OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnToggleScoreboard                                          OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEndOfDayRecap                                             OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWaveCombatStart                                           OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWaveBasedModifiersApplied                                 OFFSET(get<T>, {0x270, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnActiveGameplayModifiersChanged                            OFFSET(get<T>, {0x280, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHordeTierInitialized                                      OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHordeTierComplete                                         OFFSET(get<T>, {0x2A0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHordeWaveComplete                                         OFFSET(get<T>, {0x2B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnBuildingMaterialCycled                                    OFFSET(get<T>, {0x2C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHighlightsCountChanged                                    OFFSET(get<T>, {0x2D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnUIResetRequired                                           OFFSET(get<T>, {0x2E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHUDStateRefreshed                                         OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWeaponEquippedDelegate                                    OFFSET(get<T>, {0x300, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAbilityDecisionWindowStackUpdated                         OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemCollectorChanged                                      OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTotalQuantumChanged                                       OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAllFOBCoresAdded                                          OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWorldDaysElapsedChanged                                   OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnNumSurvivorsRescuedChanged                                OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEarnedBadgesChanged                                       OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPotentialBadgesChanged                                    OFFSET(get<T>, {0x380, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionManagerCreated                                     OFFSET(get<T>, {0x390, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionsUpdated                                           OFFSET(get<T>, {0x3A0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFocusedMissionChanged                                     OFFSET(get<T>, {0x3B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTheaterUniqueIDChanged                                    OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnZoneDifficultyInfoRowChanged                              OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDifficultyIncreaseRewardTierChanged                       OFFSET(get<T>, {0x3E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDifficultyIncreaseRewardsChanged                          OFFSET(get<T>, {0x3F0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionGeneratorChanged                                   OFFSET(get<T>, {0x400, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionRewardsChanged                                     OFFSET(get<T>, {0x410, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPointOfInterestAdded                                      OFFSET(get<T>, {0x420, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPointOfInterestRemoved                                    OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHUDElementVisibilityChanged                               OFFSET(get<T>, {0x4B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnDebugHUDObjectiveHeightChangedDelegate                    OFFSET(get<T>, {0x4D0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnBuildModeChanged                                          OFFSET(get<T>, {0x4E0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPersonalVehicleModeChanged                                OFFSET(get<T>, {0x4F0, 16, 0, 0})
	DMember(bool)                                      bDebugHudObjectiveHeight                                    OFFSET(get<bool>, {0x500, 1, 0, 0})
	DMember(bool)                                      bPendingAttachToHUD                                         OFFSET(get<bool>, {0x501, 1, 0, 0})
	CMember(AFortPlayerState*)                         OwningPlayerState                                           OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(ABuildingActor*)                           CurFocusedBuilding                                          OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(ABuildingTrap*)                            CurFocusedTrap                                              OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(ABuildingActor*)                           PendingFocusBuilding                                        OFFSET(get<T>, {0x528, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHUDContext.UpdateTrapAttachedToBuilding
	// void UpdateTrapAttachedToBuilding();                                                                                     // [0x2ba42c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.ToggleFullScreenMap
	// void ToggleFullScreenMap();                                                                                              // [0x2ba4170] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortHUDContext.ShouldOnlyShowNextPrevBuildingSlotKeybinds
	// bool ShouldOnlyShowNextPrevBuildingSlotKeybinds();                                                                       // [0x2ba4140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.SetPreparingMgmtMenu
	// void SetPreparingMgmtMenu(bool bPreparing);                                                                              // [0x2ba3e10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.SetIndicatorsState
	// void SetIndicatorsState(EFortIndicatorState NewState);                                                                   // [0x2ba3d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.SetIndicatorsAllowed
	// void SetIndicatorsAllowed(bool bIndicatorsAllowed);                                                                      // [0x2ba3c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.SetHUDElementVisibility
	// void SetHUDElementVisibility(FGameplayTagContainer& HUDElementTags, bool bHideElements);                                 // [0x2ba3af0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.SetCursorModeLocked
	// void SetCursorModeLocked(bool bLocked);                                                                                  // [0x2ba3a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.RequestMgmtMenuTab
	// void RequestMgmtMenuTab(FName TabName);                                                                                  // [0x2ba39e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.RemovePointOfInterest
	// void RemovePointOfInterest(AActor* PointOfInterest);                                                                     // [0x2ba3960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.IsPreparingMgmtMenu
	// bool IsPreparingMgmtMenu();                                                                                              // [0x2ba3820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.IsInEditMode
	// bool IsInEditMode();                                                                                                     // [0x2ba3700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.IsInCursorMode
	// bool IsInCursorMode();                                                                                                   // [0x2ba36a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.HandlePersonalVehicleModeChanged
	// void HandlePersonalVehicleModeChanged(bool bEnteredVehicle);                                                             // [0x2ba3450] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.HandleLocalPlayerViewTargetChanged
	// void HandleLocalPlayerViewTargetChanged();                                                                               // [0x2ba3430] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.HandleLocalPlayerPlaceChanged
	// void HandleLocalPlayerPlaceChanged();                                                                                    // [0x2ba3410] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.HandleLocalPlayerKillsChanged
	// void HandleLocalPlayerKillsChanged();                                                                                    // [0x2ba33f0] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.HandleLocalPawnSpawned
	// void HandleLocalPawnSpawned();                                                                                           // [0x2ba33d0] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.HandleLocalPawnRevived
	// void HandleLocalPawnRevived();                                                                                           // [0x2ba33b0] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.HandleLocalPawnDied
	// void HandleLocalPawnDied(FFortPlayerDeathReport& DeathReport);                                                           // [0x2ba32f0] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.FortHUDContext.HandleFocusedBuildingHealthChanged
	// void HandleFocusedBuildingHealthChanged();                                                                               // [0x2ba32d0] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.HandleBuildingModeChanged
	// void HandleBuildingModeChanged(bool bEntering);                                                                          // [0x2ba3240] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.GetTimeToDelayEndOfDayZoneWidgetDisplay
	// float GetTimeToDelayEndOfDayZoneWidgetDisplay();                                                                         // [0x2ba3050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetTeamCornerstone
	// AFortPvPBaseCornerstone* GetTeamCornerstone(TEnumAsByte<EFortTeam> Team);                                                // [0x2ba2fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetScoreDisplayFactor
	// float GetScoreDisplayFactor();                                                                                           // [0x2ba2e30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetPotentialBadges
	// TArray<FFortBadgeCount> GetPotentialBadges();                                                                            // [0x2ba2cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetPlayerStateZone
	// AFortPlayerStateZone* GetPlayerStateZone();                                                                              // [0x2ba2cc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetNumAllowedDifficultyIncreases
	// int32_t GetNumAllowedDifficultyIncreases();                                                                              // [0x2ba2c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetMissionRewards
	// void GetMissionRewards(TArray<UFortItem*>& MissionRewards, TArray<UFortItem*>& MissionAlertRewards);                     // [0x2ba2780] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetMissionOverviewObjectives
	// TArray<FZoneLoadingScreenHeadingConfig> GetMissionOverviewObjectives();                                                  // [0x2ba2730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetMissionManager
	// AFortMissionManager* GetMissionManager();                                                                                // [0x2ba2700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetKillerVisualInfoFromDeathReport
	// FFortKillerVisualInfo GetKillerVisualInfoFromDeathReport(FFortPlayerDeathReport& DeathReport);                           // [0x2ba2570] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.GetIndicatorsState
	// EFortIndicatorState GetIndicatorsState();                                                                                // [0x2ba2370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetGameStateZone
	// AFortGameStateZone* GetGameStateZone();                                                                                  // [0x2ba1dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetFocusedMission
	// AFortMission* GetFocusedMission();                                                                                       // [0x2ba1da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetFocusedBuildingInfo
	// bool GetFocusedBuildingInfo(FFortFocusedBuildingInfo& OutBuildingInfo);                                                  // [0x2ba1c70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetEarnedBadges
	// TArray<FEarnedBadgeEntry> GetEarnedBadges();                                                                             // [0x2ba1bf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetDifficultyIncreaseRewardsTier
	// int32_t GetDifficultyIncreaseRewardsTier();                                                                              // [0x2ba1a60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetDifficultyIncreaseRewardsDifference
	// void GetDifficultyIncreaseRewardsDifference(int32_t BaseDifficultyIncreaseTier, int32_t ComparedDifficultyIncreaseTier, TArray<FFortItemDelta>& RewardDeltaInfo); // [0x2ba1940] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetDifficultyIncreaseRewards
	// void GetDifficultyIncreaseRewards(int32_t DifficultyIncreaseTier, TArray<FFortItemDelta>& DifficultyIncreaseRewards);    // [0x2ba1860] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetCurrentHUDState
	// FFortHUDState GetCurrentHUDState();                                                                                      // [0x2ba1800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetCurrentHero
	// UFortHero* GetCurrentHero();                                                                                             // [0x2ba1830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetCurrentBasicMissionInfo
	// bool GetCurrentBasicMissionInfo(FFortBasicMissionInfo& BasicMissionInfo);                                                // [0x2ba1720] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.GetBluGloManager
	// AFortBluGloManager* GetBluGloManager();                                                                                  // [0x2ba16c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.ForwardOnWeaponEquipped
	// void ForwardOnWeaponEquipped(AFortWeapon* NewWeapon, AFortWeapon* PrevWeapon);                                           // [0x2ba15e0] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.ForwardOnNumSurvivorsRescuedChanged
	// void ForwardOnNumSurvivorsRescuedChanged(int32_t NumSurvivorsRescued);                                                   // [0x2ba1550] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.ForwardOnMissionsUpdated
	// void ForwardOnMissionsUpdated();                                                                                         // [0x2ba1520] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.ForwardOnAbilityDecisionWindowStackUpdated
	// void ForwardOnAbilityDecisionWindowStackUpdated();                                                                       // [0x2ba14f0] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDContext.EnterCursorMode
	// void EnterCursorMode(FName ActionName, UUserWidget* CursorModeWidget);                                                   // [0x2ba1430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.EnterCameraMode
	// void EnterCameraMode();                                                                                                  // [0x2ba1410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortHUDContext.AreIndicatorsEnabled
	// bool AreIndicatorsEnabled();                                                                                             // [0x2ba13b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.AreHUDElementsVisible
	// bool AreHUDElementsVisible(FGameplayTagContainer& HUDElementTags);                                                       // [0x2ba12e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortHUDContext.AddPointOfInterest
	// void AddPointOfInterest(AActor* PointOfInterest, FText DisplayText, UTexture2D* DisplayImage);                           // [0x2ba1000] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortHUDEquipProgressBase
/// Size: 0x0000 (0x000238 - 0x000238)
class UFortHUDEquipProgressBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/FortniteUI.FortHUDObjectiveSizeInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortHUDObjectiveSizeInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortHUDObjectiveSizeInterface.GetHeightEstimate
	// float GetHeightEstimate();                                                                                               // [0x2ba9120] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortHUDTargetUnderReticleWidget
/// Size: 0x0048 (0x000210 - 0x000258)
class UFortHUDTargetUnderReticleWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(TScriptInterface<Class>)                   Target                                                      OFFSET(get<T>, {0x210, 16, 0, 0})
	DMember(bool)                                      bKeepTargetUntilNewValidTarget                              OFFSET(get<bool>, {0x220, 1, 0, 0})
	SMember(FGameplayTagContainer)                     TargetRequiredTags                                          OFFSET(getStruct<T>, {0x228, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortHUDTargetUnderReticleWidget.OnTargetHealthChanged
	// void OnTargetHealthChanged();                                                                                            // [0x2ff9f0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortHUDTargetUnderReticleWidget.OnTargetDied
	// void OnTargetDied();                                                                                                     // [0x2b7aa60] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortHUDTargetUnderReticleWidget.OnTargetDestroyed
	// void OnTargetDestroyed();                                                                                                // [0x2b87720] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortHUDTargetUnderReticleWidget.OnTargetChanged
	// void OnTargetChanged();                                                                                                  // [0x2bfa4b0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortHUDTargetUnderReticleWidget.OnTargetActorDestroyed
	// void OnTargetActorDestroyed(AActor* DestroyedActor);                                                                     // [0x2bab5d0] Final|Native|Private 
	// Function /Script/FortniteUI.FortHUDTargetUnderReticleWidget.HandleOnHUDTargetUnderReticle
	// void HandleOnHUDTargetUnderReticle(TScriptInterface<Class>& NewTarget);                                                  // [0x2baad50] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortHUDTargetUnderReticleWidget.ClearTarget
	// void ClearTarget();                                                                                                      // [0x2ba7b10] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortHUDVisibilityData
/// Size: 0x0040 (0x000030 - 0x000070)
class UFortHUDVisibilityData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGameplayTag)                              HUDVisibilityGameplayTag                                    OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FText)                                     DisplayText                                                 OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     ToolTipText                                                 OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	DMember(bool)                                      Visible                                                     OFFSET(get<bool>, {0x68, 1, 0, 0})
};

/// Class /Script/FortniteUI.FortInfoWindow
/// Size: 0x0010 (0x0003F0 - 0x000400)
class UFortInfoWindow : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(UCommonListView*)                          InfoEntries                                                 OFFSET(get<T>, {0x3F0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortInfoWindow.GetListWidget
	// UWidget* GetListWidget(UObject* Item);                                                                                   // [0x2ba94a0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortInputReflector
/// Size: 0x0030 (0x000240 - 0x000270)
class UFortInputReflector : public UCommonInputReflector
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FDataTableRowHandle)                       MoreInfoActionData                                          OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	CMember(UCommonButton*)                            MoreInfoButton                                              OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(UMenuAnchor*)                              MoreInfoMenuAnchor                                          OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortActivatablePanel*>)    PanelRequestingMoreInfo                                     OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortInputReflector.OnInputActionTriggered
	// void OnInputActionTriggered(bool& bPassThrough);                                                                         // [0x2bab540] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.FortInputReflector.OnButtonClicked
	// void OnButtonClicked(UCommonButton* ClickedButton);                                                                      // [0x2bab4c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortInputReflector.GetPopupMenuWidget
	// UWidget* GetPopupMenuWidget();                                                                                           // [0x2ba9760] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortInventoryContext
/// Size: 0x0178 (0x000028 - 0x0001A0)
class UFortInventoryContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(UMulticastDelegate)                        OnMcpWorldItemsChanged                                      OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMcpOutpostItemsChanged                                    OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWorldItemListChanged                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnOutpostItemListChanged                                    OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemPickedUp                                              OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuickbarContentsChanged                                   OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuickbarSlotFocusChanged                                  OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuickbarSecondarySlotFocusChanged                         OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuickbarForceFullUpdate                                   OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWorldItemsChanged                                         OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPinnedSchematicsChanged                                   OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSchematicsLockedChanged                                   OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSchematicUnlocked                                         OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCraftItemStarted                                          OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCraftItemFailed                                           OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnVaultItemLimitStateChangedEvent                           OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TMap<UFortSchematicItemDefinition*, bool>) SchematicLockedStates                                       OFFSET(get<T>, {0x128, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortInventoryContext.WouldExceedMaxStackSize
	// bool WouldExceedMaxStackSize(UFortItemDefinition* ItemDefinition, int32_t QuantityToTest);                               // [0x2bab960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.UnlockSchematic
	// void UnlockSchematic(UFortSchematicItemDefinition* SchematicDefinition);                                                 // [0x2bab8e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.UnlockAllSchematics
	// void UnlockAllSchematics();                                                                                              // [0x2bab8c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.SortAccountItemArrayForTransmog
	// void SortAccountItemArrayForTransmog(TArray<UFortAccountItem*>& VaultItems, TArray<UFortAccountItem*>& SortedItems);     // [0x2bab7a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.SetSchematicPinned
	// bool SetSchematicPinned(UFortSchematicItem* Schematic, bool bEnabled);                                                   // [0x2bab6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.RemoveItemFromQuickBar
	// bool RemoveItemFromQuickBar(UFortItem* Item);                                                                            // [0x2bab650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.MakeItemQuantityPair
	// FFortItemQuantityPair MakeItemQuantityPair(UFortItemDefinition* ItemDefinition, int32_t ItemQuantity);                   // [0x2bab3c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.LockAllSchematics
	// void LockAllSchematics();                                                                                                // [0x2bab3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.IsTrapAvailableForBuilding
	// bool IsTrapAvailableForBuilding(ABuildingSMActor* Actor);                                                                // [0x2bab310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.IsSlotHidden
	// bool IsSlotHidden(EFortQuickBars InQuickBar, int32_t Slot);                                                              // [0x2bab250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.IsSchematicPinned
	// bool IsSchematicPinned(UFortSchematicItem* Schematic);                                                                   // [0x2bab1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.IsPickAxeEquipped
	// bool IsPickAxeEquipped();                                                                                                // [0x2bab190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.HasUnavailableItemsInStorage
	// bool HasUnavailableItemsInStorage();                                                                                     // [0x2bab160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.HasTrapReadyForBuilding
	// bool HasTrapReadyForBuilding(ABuildingSMActor* BuildingToAttachTo);                                                      // [0x2bab0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.HasRecyclingWarnings
	// bool HasRecyclingWarnings(UFortItem* Item);                                                                              // [0x2bab040] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.HasGameplayTagContainerExact
	// bool HasGameplayTagContainerExact(FGameplayTagContainer GameplayTagContainer);                                           // [0x2baaf60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.HasGameplayTagContainer
	// bool HasGameplayTagContainer(FGameplayTagContainer GameplayTagContainer);                                                // [0x2baae80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.HasEvolutions
	// bool HasEvolutions(UFortItem* Item);                                                                                     // [0x2baadf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetWorldItemListForDeployableBaseThePlayerIsIn
	// void GetWorldItemListForDeployableBaseThePlayerIsIn(TArray<UFortWorldItem*>& Items, FFortItemListFilter& FilterSettings); // [0x2baab50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetWorldItemList
	// void GetWorldItemList(TArray<UFortWorldItem*>& Items, FFortItemListFilter& FilterSettings);                              // [0x2baaa30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetVoucherResourceItemDefinition
	// UFortPersistentResourceItemDefinition* GetVoucherResourceItemDefinition();                                               // [0x2baaa00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetVaultItemLimitStatus
	// EVaultItemLimitStatus GetVaultItemLimitStatus();                                                                         // [0x308a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetVaultItemLimit
	// int32_t GetVaultItemLimit();                                                                                             // [0x2baa9d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetUserFriendlyTags
	// TArray<FText> GetUserFriendlyTags(UFortItem* Item);                                                                      // [0x2baa8e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetUpgradeItemRarityRecipeFromItemDefintion
	// FRecipe GetUpgradeItemRarityRecipeFromItemDefintion(UFortItemDefinition* ItemDefinition);                                // [0x2baa800] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.GetUnseenTransformKeys
	// void GetUnseenTransformKeys(EConversionControlKeyRequest RequestType, EInventoryContentSortType SortType, TArray<UFortAccountItem*>& TransformKeys); // [0x2baa6d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.GetTrapAttachTypeName
	// FText GetTrapAttachTypeName(ABuildingSMActor* Actor);                                                                    // [0x2baa5f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetTransmogSacrificeDataFromItemDefintion
	// bool GetTransmogSacrificeDataFromItemDefintion(UFortItemDefinition* ItemDefinition, FTransmogSacrifice& OutTransmogData); // [0x2baa500] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetTransformKeys
	// void GetTransformKeys(EConversionControlKeyRequest RequestType, EInventoryContentSortType SortType, TArray<UFortAccountItem*>& TransformKeys); // [0x2baa3d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.GetTotalItemQuantityByDefinition
	// int32_t GetTotalItemQuantityByDefinition(UFortItemDefinition* ItemDefinition);                                           // [0x2baa340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetTierText
	// FText GetTierText(TEnumAsByte<EFortItemTier> Tier);                                                                      // [0x2baa280] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetSupportBonusPerks
	// bool GetSupportBonusPerks(UFortHero* Hero, TArray<FFortUIPerk>& SupportBonusPerks);                                      // [0x2baa160] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetStorageOverflowFromAddingItem
	// int32_t GetStorageOverflowFromAddingItem(UFortWorldItem* Item, int32_t Count);                                           // [0x2baa0a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetStorageNumItems
	// int32_t GetStorageNumItems();                                                                                            // [0x2baa070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetStorageCapacity
	// int32_t GetStorageCapacity();                                                                                            // [0x2baa040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetShorthandItemStackCount
	// FText GetShorthandItemStackCount(int32_t Quantity, int32_t MiniumFractionalDigits, int32_t MaximumFractionalDigits);     // [0x2ba9f00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetSchematicResourceItemDefinition
	// UFortPersistentResourceItemDefinition* GetSchematicResourceItemDefinition();                                             // [0x2ba9ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetResourceItemMaxStackSize
	// int32_t GetResourceItemMaxStackSize(TEnumAsByte<EFortResourceType> ResourceType);                                        // [0x2ba9e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetResourceItemDefinition
	// UFortResourceItemDefinition* GetResourceItemDefinition(TEnumAsByte<EFortResourceType> ResourceType);                     // [0x2ba9db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetResourceIcon
	// UTexture2D* GetResourceIcon(TEnumAsByte<EFortResourceType> ResourceType);                                                // [0x2ba9d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetResourceCount
	// int32_t GetResourceCount(TEnumAsByte<EFortResourceType> ResourceType);                                                   // [0x2ba9c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetRecyclingWarningText
	// FText GetRecyclingWarningText(EItemRecyclingWarning Warning, bool WereAnyItemsAnimate);                                  // [0x2ba9b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetRecyclingCatalystDisplayName
	// FText GetRecyclingCatalystDisplayName(UFortItem* Item);                                                                  // [0x2ba9ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetRecycleRestrictionReasonText
	// FText GetRecycleRestrictionReasonText(EItemRecyclingRestrictionReason Reason);                                           // [0x2ba99f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetQuickBarSlottedItem
	// UFortItem* GetQuickBarSlottedItem(EFortQuickBars InQuickBar, int32_t Slot);                                              // [0x2ba9790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetQuickbarFocus
	// void GetQuickbarFocus(EFortQuickBars& OutQuickBar, int32_t& OutSlot, int32_t& OutSecondarySlot, int32_t& OutPreviousFocusedSlot); // [0x2ba9850] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetPinnedSchematicList
	// void GetPinnedSchematicList(TArray<UFortSchematicItem*>& PinnedItems);                                                   // [0x2ba96b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetPersonnelResourceItemDefinition
	// UFortPersistentResourceItemDefinition* GetPersonnelResourceItemDefinition();                                             // [0x2ba9680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetNumInInventory
	// int32_t GetNumInInventory(UFortItemDefinition* ItemDefinition, bool bIncludeReserved);                                   // [0x2ba95c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetItemTierRecyclingWarningThreshold
	// TEnumAsByte<EFortItemTier> GetItemTierRecyclingWarningThreshold();                                                       // [0x2ba9480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetItemRarityRecyclingWarningThreshold
	// EFortRarity GetItemRarityRecyclingWarningThreshold();                                                                    // [0x2ba9460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetItemLevelRecyclingWarningThreshold
	// int32_t GetItemLevelRecyclingWarningThreshold();                                                                         // [0x2ba9440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetItemInstancesByDefinition
	// void GetItemInstancesByDefinition(UFortItemDefinition* ItemDefinition, TArray<UFortItem*>& Items);                       // [0x2ba9350] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetHomebaseUnlockedTransmogKeys
	// void GetHomebaseUnlockedTransmogKeys(TArray<UFortAccountItem*>& TransmogKeys);                                           // [0x2ba92a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetHeroResourceItemDefinition
	// UFortPersistentResourceItemDefinition* GetHeroResourceItemDefinition();                                                  // [0x2ba9270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetHeroAbilityPerks
	// bool GetHeroAbilityPerks(UFortHero* Hero, TArray<FFortUIPerk>& HeroAbilityPerks);                                        // [0x2ba9150] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetGameplayTagByIndex
	// bool GetGameplayTagByIndex(FGameplayTagContainer GameplayTagContainer, int32_t Index, FGameplayTag& Result);             // [0x2ba8fb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.GetEvolveRestrictionReasonText
	// FText GetEvolveRestrictionReasonText(EItemEvolutionRestrictionReason Reason);                                            // [0x2ba8ef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetEquippedWeapon
	// AFortWeapon* GetEquippedWeapon();                                                                                        // [0x2ba8ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetDisassembleRestrictionReasonText
	// FText GetDisassembleRestrictionReasonText(EItemDisassembleRestrictionReason Reason);                                     // [0x2ba8e00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.GetDeployableBaseOverflowFromAddingItem
	// int32_t GetDeployableBaseOverflowFromAddingItem(UFortWorldItem* Item, int32_t Count);                                    // [0x2ba8d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetDeployableBaseItemCounts
	// void GetDeployableBaseItemCounts(int32_t& ItemsCount, int32_t& MaxItemsCount, int32_t& OverflowItemsCount);              // [0x2ba8c00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetCurrentResourceItemDefinition
	// UFortResourceItemDefinition* GetCurrentResourceItemDefinition();                                                         // [0x2ba8bd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetCurrentResourceCount
	// int32_t GetCurrentResourceCount();                                                                                       // [0x2ba8ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetCurrentAmmoItemDefinition
	// UFortWorldItemDefinition* GetCurrentAmmoItemDefinition();                                                                // [0x2ba8b70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetCountOfVaultLimitedItems
	// int32_t GetCountOfVaultLimitedItems();                                                                                   // [0x2ba8b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetCountOfHeroItems
	// int32_t GetCountOfHeroItems();                                                                                           // [0x2ba8b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetCoreItemsByType
	// void GetCoreItemsByType(EFortItemType ItemType, TArray<UFortAccountItem*>& Items);                                       // [0x2ba8a20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetCoreItemsByFilterType
	// void GetCoreItemsByFilterType(FString SearchText, EInventoryContentSortType SortType, EFortInventoryFilter SubType, TArray<UFortAccountItem*>& OutItemList); // [0x2ba8870] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetConversionRecipesFromItemDefintion
	// TArray<FRecipe> GetConversionRecipesFromItemDefintion(UFortItemDefinition* ItemDefinition);                              // [0x2ba87a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.GetBackpackOverflowFromAddingItem
	// int32_t GetBackpackOverflowFromAddingItem(UFortWorldItem* Item, int32_t Count);                                          // [0x2ba85d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetBackpackItemCounts
	// void GetBackpackItemCounts(int32_t& ItemsCount, int32_t& MaxItemsCount, int32_t& OverflowItemsCount);                    // [0x2ba8490] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetAccountItemsByType
	// void GetAccountItemsByType(EFortItemType ItemType, TArray<UFortAccountItem*>& Items);                                    // [0x2ba83a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.GetAccountItemsByFilterType
	// void GetAccountItemsByFilterType(FString SearchText, EInventoryContentSortType SortType, EFortInventoryFilter SubType, TArray<UFortAccountItem*>& OutItemList); // [0x2ba81f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.EquipItem
	// void EquipItem(UFortItem* Item);                                                                                         // [0x2ba8170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.EnumerateRecyclingWarningsForItems
	// void EnumerateRecyclingWarningsForItems(TArray<UFortItem*>& Items, TArray<EItemRecyclingWarning>& OutWarnings);          // [0x2ba8050] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.DropItemOnQuickBar
	// bool DropItemOnQuickBar(UFortItem* Item, EFortQuickBars TargetQuickbar, int32_t TargetSlot);                             // [0x2ba7f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.DropItem
	// void DropItem(UFortWorldItem* ItemBeingDropped, int32_t Quantity);                                                       // [0x2ba7e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.DoesItemMatchFilter
	// bool DoesItemMatchFilter(UFortItem* Item, FFortItemListFilter& FilterSettings);                                          // [0x2ba7d90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.DestroyWorldItem
	// void DestroyWorldItem(UFortItem* Item);                                                                                  // [0x2ba7d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.CraftSchematic
	// bool CraftSchematic(UFortSchematicItem* SchematicItem, EFortCraftFailCause& FailCause);                                  // [0x2ba7c40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.CraftAndSlotSchematic
	// bool CraftAndSlotSchematic(UFortSchematicItem* SchematicItem, int32_t PostCraftSlot, EFortCraftFailCause& FailCause);    // [0x2ba7b30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.CanUpgradeItemRarity
	// bool CanUpgradeItemRarity(UFortItem* Item, TArray<EItemEvolutionRestrictionReason>& OutRestrictionReasons);              // [0x2ba78b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.CanSwapItem
	// bool CanSwapItem(UFortItem* Item, EFortQuickBars TargetQuickbar, int32_t TargetSlot);                                    // [0x2ba77b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.CanRecycle
	// bool CanRecycle(UFortItem* Item, TArray<EItemRecyclingRestrictionReason>& OutRestrictionReasons);                        // [0x2ba76b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.CanPinSchematic
	// bool CanPinSchematic(UFortSchematicItem* Schematic);                                                                     // [0x2ba7620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.CanEvolve
	// bool CanEvolve(UFortItem* Item, TArray<EItemEvolutionRestrictionReason>& OutRestrictionReasons);                         // [0x2ba7520] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.CanDisassembleItem
	// bool CanDisassembleItem(UFortWorldItem* Item, TArray<EItemDisassembleRestrictionReason>& OutRestrictionReasons);         // [0x2ba7420] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.CanCraftSchematic
	// bool CanCraftSchematic(UFortSchematicItem* SchematicItem, EFortCraftFailCause& FailCause);                               // [0x2ba7350] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.AreRecipeRequirementsMet
	// bool AreRecipeRequirementsMet(TArray<FFortItemQuantityPair> RecipeCosts);                                                // [0x2ba7260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortInventoryContext.AreAnyItemsUnseenForInventoryFilter
	// bool AreAnyItemsUnseenForInventoryFilter(EFortFrontendInventoryFilter FilterType);                                       // [0x2ba71d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortInventoryContext.AreAnyItemsAnimate
	// bool AreAnyItemsAnimate(TArray<UFortItem*>& Items);                                                                      // [0x2ba7120] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortInventoryContext.ActivateItem
	// bool ActivateItem(UFortItem* Item);                                                                                      // [0x2ba7090] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortInventoryOverflowIndicator
/// Size: 0x0000 (0x000460 - 0x000460)
class UFortInventoryOverflowIndicator : public UFortSimpleItemConditionIconIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
};

/// Class /Script/FortniteUI.FortInviteRequest
/// Size: 0x0050 (0x000210 - 0x000260)
class UFortInviteRequest : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(UCommonButton*)                            Button_RequestInvite                                        OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Logout                                               OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortInviteRequest.HandleRequestInviteClicked
	// void HandleRequestInviteClicked(UCommonButton* Button);                                                                  // [0x2bae8f0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortInviteRequest.HandleLogoutClicked
	// void HandleLogoutClicked(UCommonButton* Button);                                                                         // [0x2b695c0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortItemWidget_NUI
/// Size: 0x0028 (0x000100 - 0x000128)
class UFortItemWidget_NUI : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x108, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemWidget_NUI.SetItemViewContext
	// void SetItemViewContext(TScriptInterface<Class> ItemViewContext);                                                        // [0x2bc0460] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemWidget_NUI.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* ItemToRepresent);                                                                     // [0x2bc0360] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemCardBase
/// Size: 0x0000 (0x000128 - 0x000128)
class UFortItemCardBase : public UFortItemWidget_NUI
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:


	/// Functions
	// Function /Script/FortniteUI.FortItemCardBase.PortBrushSize
	// EFortItemCardSize PortBrushSize(TEnumAsByte<EFortBrushSize>& BrushSize);                                                 // [0x2bae970] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemCardMaterialPooler
/// Size: 0x00F8 (0x000028 - 0x000120)
class UFortItemCardMaterialPooler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/FortniteUI.FortItemCardUtilities
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortItemCardUtilities : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortItemCardUtilities.GetCardDimensions
	// FVector2D GetCardDimensions(EFortItemType ItemType, EFortItemCardSize CardSize, bool IsReward, bool UseNewItemCardSizes); // [0x2bae7a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortItemCategoryIndicator
/// Size: 0x0010 (0x000120 - 0x000130)
class UFortItemCategoryIndicator : public UFortIconWithLabel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(EFortItemCategoryOrdinal)                  OrdinalOfCategoryToRepresent                                OFFSET(get<T>, {0x128, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemCategoryIndicator.SetOrdinalOfCategoryToRepresent
	// void SetOrdinalOfCategoryToRepresent(EFortItemCategoryOrdinal ItemCategoryOrdinal);                                      // [0x2baeb00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemCategoryIndicator.SetLabelColorOverride
	// void SetLabelColorOverride(FLinearColor InLabelColorOverride);                                                           // [0x2baea80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemCategoryIndicator.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* ItemToRepresent);                                                                     // [0x2baea00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemCategoryIndicator.ClearLabelColorOverride
	// void ClearLabelColorOverride();                                                                                          // [0x2bae780] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemCollectorWidget
/// Size: 0x0010 (0x000218 - 0x000228)
class UFortItemCollectorWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(ABuildingItemCollectorActor*)              ItemCollector                                               OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemCollectorWidget.OnItemCollectorValuesChanged
	// void OnItemCollectorValuesChanged(UFortWorldItemDefinition* InputItem, int32_t Goal, int32_t deposit, int32_t Captures); // [0x2bb2820] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemCollectorWidget.OnItemCollectorStateChanged
	// void OnItemCollectorStateChanged(EFortItemCollectorState ItemCollectorState);                                            // [0x2bb27a0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemCollectorWidget.OnItemCollectorChanged
	// void OnItemCollectorChanged(ABuildingItemCollectorActor* OutItemCollector);                                              // [0x2bf9be0] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemCooldownWidget
/// Size: 0x0090 (0x000210 - 0x0002A0)
class UFortItemCooldownWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UMulticastDelegate)                        OnCooldownStarted_Delegate                                  OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCooldownStopped_Delegate                                  OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UCommonTextBlock*)                         CooldownText                                                OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UImage*)                                   CooldownImage                                               OFFSET(get<T>, {0x238, 8, 0, 0})
	SMember(FName)                                     CooldownMaterialParameterName                               OFFSET(getStruct<T>, {0x240, 8, 0, 0})
	CMember(TArray<EFortItemCooldownType>)             CooldownTypesSupported                                      OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 CooldownPercentageMID                                       OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemCooldownWidget.SetItem
	// void SetItem(UFortWorldItem* InWorldItem);                                                                               // [0x2bb2f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemCooldownWidget.OnWorldItemDestroyed
	// void OnWorldItemDestroyed();                                                                                             // [0x2bb2a10] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemCooldownWidget.OnCooldownStopped
	// void OnCooldownStopped(EFortItemCooldownType CooldownType);                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemCooldownWidget.OnCooldownStarted
	// void OnCooldownStarted(EFortItemCooldownType CooldownType);                                                              // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemCountTextBlock
/// Size: 0x0018 (0x0002E0 - 0x0002F8)
class UFortItemCountTextBlock : public UCommonNumericTextBlock
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(EFortItemCountStyle)                       CountStyle                                                  OFFSET(get<T>, {0x2E8, 1, 0, 0})
	DMember(float)                                     ItemCountMaxInterpolateDuration                             OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     ItemCountMinInterpolateRate                                 OFFSET(get<float>, {0x2F0, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemCountTextBlock.SetOverrideValue
	// void SetOverrideValue(int32_t InOverrideValue);                                                                          // [0x2bb35a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemCountTextBlock.SetItemDefinition
	// void SetItemDefinition(UFortItemDefinition* InItemDefinition);                                                           // [0x2bb3000] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemCountTextBlock.SetCountStyle
	// void SetCountStyle(EFortItemCountStyle InCountStyle);                                                                    // [0x2bb2e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemCountTextBlock.InterpolateOverrideToValue
	// void InterpolateOverrideToValue(int32_t TargetValue, float MaximumInterpolationDuration, float MinimumChangeRate, float OutroOffset); // [0x2bb25c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemCountTextBlock.HandleItemCountChanged
	// void HandleItemCountChanged(UFortItemDefinition* Definition, int32_t Delta);                                             // [0x2bb20c0] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortItemDetailsActivatablePanel
/// Size: 0x0040 (0x0003C0 - 0x000400)
class UFortItemDetailsActivatablePanel : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToDetail                                                OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToCompareWith                                           OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItemManagementScreen*>) HostItemManagementScreen                                   OFFSET(get<T>, {0x3D0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemDetailsActivatablePanel.HandleDifferentItemToDetailSetBP
	// void HandleDifferentItemToDetailSetBP();                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailsActivatablePanel.HandleDifferentItemToCompareSetBP
	// void HandleDifferentItemToCompareSetBP();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailsActivatablePanel.HandleConsumeItemProgressChangedBP
	// void HandleConsumeItemProgressChangedBP();                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemDetailsModeActivatablePanel
/// Size: 0x0000 (0x000400 - 0x000400)
class UFortItemDetailsModeActivatablePanel : public UFortItemDetailsActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:


	/// Functions
	// Function /Script/FortniteUI.FortItemDetailsModeActivatablePanel.HandleOnActiveWidgetChanged
	// void HandleOnActiveWidgetChanged(UWidget* ActiveWidget, int32_t ActiveWidgetIndex);                                      // [0x2bb2500] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortItemCompareModeActivatablePanel
/// Size: 0x0010 (0x000400 - 0x000410)
class UFortItemCompareModeActivatablePanel : public UFortItemDetailsActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UFortItemManagementItemDetailsPanel*)      ComparisonModeLeftItemDetailsPanel                          OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UFortItemManagementItemDetailsPanel*)      ComparisonModeRightItemDetailsPanel                         OFFSET(get<T>, {0x400, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortItemMulchModeActivatablePanel
/// Size: 0x0010 (0x000400 - 0x000410)
class UFortItemMulchModeActivatablePanel : public UFortItemDetailsActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UFortItemManagementItemDetailsPanel*)      MulchModeItemDetailsPanel                                   OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UFortItemManagementMulchDetailsPanel*)     MulchDetailsPanel                                           OFFSET(get<T>, {0x400, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortItemDetailElementWidget
/// Size: 0x0048 (0x000210 - 0x000258)
class UFortItemDetailElementWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToDetail                                                OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToCompareWith                                           OFFSET(get<T>, {0x218, 8, 0, 0})
	DMember(bool)                                      bShouldPreviewUpgradingItem                                 OFFSET(get<bool>, {0x220, 1, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(EFortItemInspectionMode)                   CurrentInspectMode                                          OFFSET(get<T>, {0x238, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemDetailElementWidget.HandleShouldPreviewUpgradingItemChanged
	// void HandleShouldPreviewUpgradingItemChanged();                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailElementWidget.HandlePreDifferentItemToDetailSet
	// void HandlePreDifferentItemToDetailSet();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailElementWidget.HandlePreDifferentItemToCompareWithSet
	// void HandlePreDifferentItemToCompareWithSet();                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailElementWidget.HandlePostDifferentItemToDetailSet
	// void HandlePostDifferentItemToDetailSet();                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailElementWidget.HandlePostDifferentItemToCompareWithSet
	// void HandlePostDifferentItemToCompareWithSet();                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailElementWidget.HandleItemToDetailChangedBP
	// void HandleItemToDetailChangedBP();                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailElementWidget.HandleInspectModeChanged
	// void HandleInspectModeChanged();                                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemDetailsHostPanel
/// Size: 0x0068 (0x000210 - 0x000278)
class UFortItemDetailsHostPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToDetail                                                OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToCompareWith                                           OFFSET(get<T>, {0x218, 8, 0, 0})
	DMember(bool)                                      bShouldPreviewUpgradingItem                                 OFFSET(get<bool>, {0x220, 1, 0, 0})
	CMember(UScrollBox*)                               ScrollBox                                                   OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UNamedSlot*)                               DetailsContainerSlotWidget                                  OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UCommonBorder*)                            HighRarityBorder                                            OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(EFortItemInspectionMode)                   CurrentInspectMode                                          OFFSET(get<T>, {0x250, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.ShouldPreviewUpgradingItem
	// void ShouldPreviewUpgradingItem(bool Value);                                                                             // [0x2bb3760] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.SetScrollWidget
	// void SetScrollWidget();                                                                                                  // [0x2bb36a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.SetItemViewContext
	// void SetItemViewContext(TScriptInterface<Class>& ItemViewContext);                                                       // [0x2bb3480] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.SetItemToDetail
	// void SetItemToDetail(UFortItem* ItemToDetail);                                                                           // [0x2bb3200] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.SetItemToCompareWith
	// void SetItemToCompareWith(UFortItem* ItemToCompareWith);                                                                 // [0x2bb3100] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.SetInspectMode
	// void SetInspectMode(EFortItemInspectionMode InspectMode);                                                                // [0x2bb2e80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.HandleShouldPreviewUpgradingItemChangedBP
	// void HandleShouldPreviewUpgradingItemChangedBP();                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.HandleInspectModeChanged
	// void HandleInspectModeChanged();                                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.HandleDifferentItemToDetailSet
	// void HandleDifferentItemToDetailSet();                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailsHostPanel.HandleDifferentItemToCompareSet
	// void HandleDifferentItemToCompareSet();                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemDetailsPanel
/// Size: 0x0028 (0x000210 - 0x000238)
class UFortItemDetailsPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToDetail                                                OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToCompareWith                                           OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemDetailsPanel.SetItemToDetail
	// void SetItemToDetail(UFortItem* ItemToDetail);                                                                           // [0x2bb3280] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemDetailsPanel.SetItemToCompareWith
	// void SetItemToCompareWith(UFortItem* ItemToCompareWith);                                                                 // [0x2bb3180] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemDetailsPanel.HandleItemToDetailChanged
	// void HandleItemToDetailChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                          // [0x2bb22a0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemDetailsPanel.HandleItemToCompareWithChanged
	// void HandleItemToCompareWithChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                     // [0x2bb2180] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemDetailsPanel.HandleDifferentItemToDetailSet
	// void HandleDifferentItemToDetailSet();                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailsPanel.HandleDifferentItemToCompareSet
	// void HandleDifferentItemToCompareSet();                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemDetailsPanel.HandleCursorModeChanged
	// void HandleCursorModeChanged(bool bCursorModeEnabled, FName ActionName, UUserWidget* CustomWidget);                      // [0x2bb1fc0] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortItemDisplayNameText
/// Size: 0x0030 (0x000258 - 0x000288)
class UFortItemDisplayNameText : public UCommonTextBlock
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemDisplayNameText.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* ItemToRepresent);                                                                     // [0x2bb3300] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemIcon
/// Size: 0x00E8 (0x000100 - 0x0001E8)
class UFortItemIcon : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               BrushSize                                                   OFFSET(get<T>, {0x108, 1, 0, 0})
	SMember(FLinearColor)                              ColorAndOpacity                                             OFFSET(getStruct<T>, {0x10C, 16, 0, 0})
	DMember(bool)                                      bShadow                                                     OFFSET(get<bool>, {0x11C, 1, 0, 0})
	SMember(FLinearColor)                              ShadowColorAndOpacity                                       OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FSlateBrush)                               SmallPreviewImageBrush                                      OFFSET(getStruct<T>, {0x130, 136, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemIcon.SetShadowColorAndOpacity
	// void SetShadowColorAndOpacity(FLinearColor InColorAndOpacity);                                                           // [0x2bb36c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemIcon.SetOpacity
	// void SetOpacity(float InOpacity);                                                                                        // [0x2bb3520] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemIcon.SetItemDefinition
	// void SetItemDefinition(UFortItemDefinition* InItemDefinition);                                                           // [0x2bb3080] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemIcon.SetColorAndOpacity
	// void SetColorAndOpacity(FLinearColor InColorAndOpacity);                                                                 // [0x2bb2d80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemIcon.SetBrushSize
	// void SetBrushSize(TEnumAsByte<EFortBrushSize> InBrushSize);                                                              // [0x2bb2d00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemInfoWidget
/// Size: 0x0000 (0x000210 - 0x000210)
class UFortItemInfoWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:


	/// Functions
	// Function /Script/FortniteUI.FortItemInfoWidget.PopulateUsingItemDefinition
	// void PopulateUsingItemDefinition(UFortItemDefinition* NewItem);                                                          // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemInfoWidget.PopulateUsingItem
	// void PopulateUsingItem(UFortItem* NewItem);                                                                              // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemInspectionScreen
/// Size: 0x0070 (0x0003C0 - 0x000430)
class UFortItemInspectionScreen : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(EFortItemInspectionMode)                   CurrentInspectMode                                          OFFSET(get<T>, {0x3C8, 1, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                InspectedItem                                               OFFSET(get<T>, {0x3CC, 8, 0, 0})
	DMember(bool)                                      UpgradeAllowed                                              OFFSET(get<bool>, {0x3D4, 1, 0, 0})
	DMember(bool)                                      EvolveAllowed                                               OFFSET(get<bool>, {0x3D5, 1, 0, 0})
	DMember(bool)                                      FavoriteAllowed                                             OFFSET(get<bool>, {0x3D6, 1, 0, 0})
	DMember(bool)                                      RarityUpgradingAllowed                                      OFFSET(get<bool>, {0x3D7, 1, 0, 0})
	DMember(bool)                                      IsPreviewing                                                OFFSET(get<bool>, {0x3D8, 1, 0, 0})
	CMember(UFortItemInspectCycleWidget*)              CycleWidget                                                 OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(UFortItemView*)                            ItemViewObject                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(UFortLegacyItemView*)                      LegacyItemViewObject                                        OFFSET(get<T>, {0x3F0, 8, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewZoomOutInputAction                                  OFFSET(getStruct<T>, {0x3F8, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewZoomInInputAction                                   OFFSET(getStruct<T>, {0x408, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewRotateInputAction                                   OFFSET(getStruct<T>, {0x418, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemInspectionScreen.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* Item);                                                                                // [0x2bb3400] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectionScreen.SetInspectionMode
	// void SetInspectionMode(EFortItemInspectionMode NewInspectMode);                                                          // [0x2bb2f00] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectionScreen.OpenItemInspect
	// void OpenItemInspect(UFortItem* ItemToInspect, EFortItemInspectionMode Mode, bool ShouldAllowUpgrading, bool ShouldAllowEvolution, bool ShouldAllowFavorite, bool IsTemporaryItem, bool bAllowRarityUpgrading); // [0x2bb2a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectionScreen.OnVaultItemsViewed
	// void OnVaultItemsViewed(TArray<UFortItem*>& Items);                                                                      // [0x2bb2960] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.FortItemInspectionScreen.HandleItemToInspectDestroyedBP
	// void HandleItemToInspectDestroyedBP();                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemInspectionScreen.HandleItemToInspectDestroyed
	// void HandleItemToInspectDestroyed();                                                                                     // [0x2bb24e0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortItemInspectionScreen.HandleItemToInspectChangedBP
	// void HandleItemToInspectChangedBP();                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemInspectionScreen.HandleItemToInspectChanged
	// void HandleItemToInspectChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                         // [0x2bb23c0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortItemInspectionScreen.HandleIsPreviewingChanged
	// void HandleIsPreviewingChanged();                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemInspectionScreen.HandleDifferentItemToInspectSetBP
	// void HandleDifferentItemToInspectSetBP();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemInspectionScreen.HandleDifferentInspectionModeSetBP
	// void HandleDifferentInspectionModeSetBP();                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemInspectionScreen.GetWidgetForFramingViewedItem
	// UWidget* GetWidgetForFramingViewedItem();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemInspectionScreen.GetCycleWidget
	// UFortItemInspectCycleWidget* GetCycleWidget();                                                                           // [0x2bb1f10] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortItemInspectCycleWidget
/// Size: 0x0050 (0x000210 - 0x000260)
class UFortItemInspectCycleWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(UMulticastDelegate)                        OnItemToRepresentChanged                                    OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortItemTileView*>)        ItemTileView                                                OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FDataTableRowHandle)                       PreviousItemActionRowHandle                                 OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FDataTableRowHandle)                       NextItemActionRowHandle                                     OFFSET(getStruct<T>, {0x240, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemInspectCycleWidget.SetupActionHandlers
	// void SetupActionHandlers();                                                                                              // [0x2bb3740] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectCycleWidget.SetOwningItemInspectScreen
	// void SetOwningItemInspectScreen(UFortItemInspectionScreen* ItemInspect);                                                 // [0x2bb3620] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectCycleWidget.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* NewItemToRepresent);                                                                  // [0x2bb3380] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectCycleWidget.SelectPreviousItem
	// void SelectPreviousItem();                                                                                               // [0x2bb2ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectCycleWidget.SelectNextItem
	// void SelectNextItem();                                                                                                   // [0x2bb2cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectCycleWidget.SelectItemWithOffset
	// void SelectItemWithOffset(int32_t Offset);                                                                               // [0x2bb2c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemInspectCycleWidget.OnItemCycled
	// void OnItemCycled(UFortItem* OldItem, UFortItem* NewItem, int32_t OffsetFromPreviousItem);                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemInspectCycleWidget.GetItemWithOffset_BP
	// UFortItem* GetItemWithOffset_BP(int32_t IndexOffset);                                                                    // [0x2bb1f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortItemManagementCustomFilterModalWidget
/// Size: 0x0070 (0x0003F0 - 0x000460)
class UFortItemManagementCustomFilterModalWidget : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(TWeakObjectPtr<UFortItemManagementScreen*>) HostItemManagementScreen                                   OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(TArray<EFortInventoryCustomFilter>)        AvailableFilters                                            OFFSET(get<T>, {0x3F8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemManagementCustomFilterModalWidget.ToggleFilter
	// void ToggleFilter(EFortInventoryCustomFilter Filter);                                                                    // [0x2bb37f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementCustomFilterModalWidget.OnEndCommitCustomFilter
	// void OnEndCommitCustomFilter(bool bWasSuccessful);                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementCustomFilterModalWidget.OnCustomFilterSetUpdated
	// void OnCustomFilterSetUpdated();                                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementCustomFilterModalWidget.OnBeginCommitCustomFilter
	// void OnBeginCommitCustomFilter();                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementCustomFilterModalWidget.IsCustomFilterEnabled
	// bool IsCustomFilterEnabled(EFortInventoryCustomFilter Filter);                                                           // [0x2bb2710] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementCustomFilterModalWidget.EnableAllFilters
	// void EnableAllFilters();                                                                                                 // [0x2bb1ef0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementCustomFilterModalWidget.DisableAllFilters
	// void DisableAllFilters();                                                                                                // [0x2bb1ed0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementCustomFilterModalWidget.CommitCustomFilters
	// void CommitCustomFilters();                                                                                              // [0x2bb1eb0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemManagementInventoryPanel
/// Size: 0x0168 (0x000210 - 0x000378)
class UFortItemManagementInventoryPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	SMember(FName)                                     CurrentFilterName                                           OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	CMember(EInventoryContentSortType)                 CurrentSortType                                             OFFSET(get<T>, {0x268, 1, 0, 0})
	CMember(UClass*)                                   FilterTabButtonType                                         OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(UClass*)                                   FilterTabButtonStyle                                        OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TArray<FFortItemManagementInventoryFilterTabLabelInfo>) FilterTabLabelInfoArray                        OFFSET(get<T>, {0x280, 16, 0, 0})
	CMember(UFortTabListWidgetBase*)                   FilterTabList                                               OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(UCommonLoadGuard*)                         TileViewLoadGuard                                           OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(UFortItemTileView*)                        TileView                                                    OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(UPanelWidget*)                             CraftingPanel                                               OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(UCommonLoadGuard*)                         CraftingTileViewLoadGuard                                   OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(UFortItemTileView*)                        CraftingTileView                                            OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(UPanelWidget*)                             StoragePanel                                                OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(UCommonLoadGuard*)                         StorageTileViewLoadGuard                                    OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(UFortItemTileView*)                        StorageTileView                                             OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(UCommonTextBlock*)                         MulchRestrictionReasonText                                  OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(EFortItemCardSize)                         SmallTileSize                                               OFFSET(get<T>, {0x2E0, 1, 0, 0})
	CMember(EFortItemCardSize)                         LargeTileSize                                               OFFSET(get<T>, {0x2E1, 1, 0, 0})
	CMember(TWeakObjectPtr<UFortItemManagementScreen*>) HostItemManagementScreen                                   OFFSET(get<T>, {0x2E4, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.UpdateSchematicTiles
	// void UpdateSchematicTiles();                                                                                             // [0x2bb79d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.ToggleTileSize
	// void ToggleTileSize();                                                                                                   // [0x2bb7930] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.TogglePrioritizeFavorites
	// void TogglePrioritizeFavorites();                                                                                        // [0x2bb78f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.SwitchPanelFocus
	// void SwitchPanelFocus();                                                                                                 // [0x2bb7810] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.SetSortType
	// void SetSortType(EInventoryContentSortType SortType);                                                                    // [0x2bb7750] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.SetFilter
	// void SetFilter(FName FilterName);                                                                                        // [0x2bb7650] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.RefreshCraftingSort
	// void RefreshCraftingSort();                                                                                              // [0x2bb7580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.IsSwitchPanelAvailable
	// bool IsSwitchPanelAvailable();                                                                                           // [0x2bb7430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleSetOfItemsToMulchChangedBP
	// void HandleSetOfItemsToMulchChangedBP();                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleQuickBarChangedBP
	// void HandleQuickBarChangedBP(EFortQuickBars QuickBarType);                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleItemWidgetCreated
	// void HandleItemWidgetCreated(UUserWidget* ItemWidget);                                                                   // [0x2bb7200] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleInventoryUpdatedEvent
	// void HandleInventoryUpdatedEvent();                                                                                      // [0x2bb6fa0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleInventoryItemSelected
	// void HandleInventoryItemSelected(UObject* Item, bool bIsSelected);                                                       // [0x2bb6ed0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleInventoryItemHoverChanged
	// void HandleInventoryItemHoverChanged(UObject* Item);                                                                     // [0x2bb6e50] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleInventoryItemDoubleClicked
	// void HandleInventoryItemDoubleClicked(UObject* Item);                                                                    // [0x2bb6dd0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleInventoryItemClicked
	// void HandleInventoryItemClicked(UObject* Item);                                                                          // [0x2bb6d50] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleFilterTabSelected
	// void HandleFilterTabSelected(FName TabNameID);                                                                           // [0x2bb6cd0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleFilterTabButtonCreated
	// void HandleFilterTabButtonCreated(FName TabNameID, UCommonButton* TabButton);                                            // [0x2bb6c10] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleDifferentSortTypeSetBP
	// void HandleDifferentSortTypeSetBP();                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleDifferentItemManagementModeSetBP
	// void HandleDifferentItemManagementModeSetBP();                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleDifferentFrontendInventoryFilterSetBP
	// void HandleDifferentFrontendInventoryFilterSetBP();                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleDifferentFilterSetBP
	// void HandleDifferentFilterSetBP();                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleCustomInventoryFilterChanged
	// void HandleCustomInventoryFilterChanged();                                                                               // [0x2bb6bf0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleCursorModeChangedBP
	// void HandleCursorModeChangedBP(bool bCursorModeEnabled, FName ActionName, UUserWidget* CursorModeContentWidget);         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleCursorModeChanged
	// void HandleCursorModeChanged(bool bCursorModeEnabled, FName ActionName, UUserWidget* CursorModeContentWidget);           // [0x2bb6af0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.HandleCraftItemStarted
	// void HandleCraftItemStarted();                                                                                           // [0x2bb6ad0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.GetUpgradeItemDefinitionsForCurrentInventory
	// TArray<UFortItemDefinition*> GetUpgradeItemDefinitionsForCurrentInventory();                                             // [0x2bb6a30] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.GetSupportedSortTypesForCurrentInventory
	// TArray<EInventoryContentSortType> GetSupportedSortTypesForCurrentInventory();                                            // [0x2bb69b0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.GetShouldPrioritizeFavorites
	// bool GetShouldPrioritizeFavorites();                                                                                     // [0x2bb6950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.GetQualifiedFilterDisplayName
	// FText GetQualifiedFilterDisplayName();                                                                                   // [0x2bb68d0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.CycleSortType
	// void CycleSortType();                                                                                                    // [0x2bb6340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.AdvanceSelection
	// void AdvanceSelection();                                                                                                 // [0x2bb6090] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementInventoryPanel.AddItemStackToMulch
	// void AddItemStackToMulch(UFortItem* Item, int32_t Count);                                                                // [0x2bb5fd0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortPopupMenu
/// Size: 0x0000 (0x0003E0 - 0x0003E0)
class UFortPopupMenu : public UCommonPopupMenu
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
};

/// Class /Script/FortniteUI.FortItemManagementItemPopupMenu
/// Size: 0x0010 (0x0003E0 - 0x0003F0)
class UFortItemManagementItemPopupMenu : public UFortPopupMenu
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:


	/// Functions
	// Function /Script/FortniteUI.FortItemManagementItemPopupMenu.MulchItem
	// void MulchItem();                                                                                                        // [0x2bb7460] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementItemPopupMenu.HandleItemChanged
	// void HandleItemChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemPopupMenu.HandleCompareAction
	// void HandleCompareAction();                                                                                              // [0x2bb6ab0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementItemPopupMenu.GetHostButton
	// UFortItemManagementItemTileButton* GetHostButton();                                                                      // [0x2bb6600] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortItemManagementItemTileButton
/// Size: 0x0060 (0x000830 - 0x000890)
class UFortItemManagementItemTileButton : public UFortItemTileButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2192;

public:
	CMember(TWeakObjectPtr<UFortItemManagementScreen*>) HostItemManagementScreen                                   OFFSET(get<T>, {0x830, 8, 0, 0})
	DMember(bool)                                      HasTheItemToDetail                                          OFFSET(get<bool>, {0x838, 1, 0, 0})
	DMember(bool)                                      HasTheItemToCompareDetailsWith                              OFFSET(get<bool>, {0x839, 1, 0, 0})
	DMember(bool)                                      HasAnItemMarkedForMulching                                  OFFSET(get<bool>, {0x83A, 1, 0, 0})
	DMember(int32_t)                                   MulchCount                                                  OFFSET(get<int32_t>, {0x83C, 4, 0, 0})
	CMember(UOverlay*)                                 NotCraftableOverlay                                         OFFSET(get<T>, {0x840, 8, 0, 0})
	CMember(UMenuAnchor*)                              PopupMenuAnchor                                             OFFSET(get<T>, {0x848, 8, 0, 0})
	DMember(bool)                                      ShowCollectionBookIndicator                                 OFFSET(get<bool>, {0x850, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.OnSlotItemComplete
	// void OnSlotItemComplete(UFortAccountItem* SlottedItem, FName SlotId);                                                    // [0x2bb74c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.HandleShowCollectionBookIndicatorChanged
	// void HandleShowCollectionBookIndicatorChanged();                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.HandleItemMulchStateChanged
	// void HandleItemMulchStateChanged();                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.HandleItemChangedBP
	// void HandleItemChangedBP();                                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.HandleHasItemToDetailChanged
	// void HandleHasItemToDetailChanged();                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.HandleHasItemToCompareDetailsWithChanged
	// void HandleHasItemToCompareDetailsWithChanged();                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.HandleEquipSlotChanged
	// void HandleEquipSlotChanged(int32_t EquipSlot);                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.HandleDifferentItemManagementModeSetBP
	// void HandleDifferentItemManagementModeSetBP();                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.GetPopupMenu
	// UWidget* GetPopupMenu();                                                                                                 // [0x2bb68a0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementItemTileButton.GetItemManagementMode
	// EFortItemManagementMode GetItemManagementMode();                                                                         // [0x2bb66b0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortItemManagementItemDetailsPanel
/// Size: 0x0018 (0x000278 - 0x000290)
class UFortItemManagementItemDetailsPanel : public UFortItemDetailsHostPanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	DMember(bool)                                      HasItemMarkedForMulching                                    OFFSET(get<bool>, {0x278, 1, 0, 0})
	CMember(TWeakObjectPtr<UFortItemManagementScreen*>) HostItemManagementScreen                                   OFFSET(get<T>, {0x27C, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemManagementItemDetailsPanel.HandleHostSet
	// void HandleHostSet();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementItemDetailsPanel.HandleHasItemMarkedForMulchingChanged
	// void HandleHasItemMarkedForMulchingChanged();                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemManagementMulchDetailsPanel
/// Size: 0x0018 (0x000210 - 0x000228)
class UFortItemManagementMulchDetailsPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UFortItemQuantityListBase*)                ResourceList                                                OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItemManagementScreen*>) HostItemManagementScreen                                   OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemManagementMulchDetailsPanel.IsSpaceAvailableForMulch
	// bool IsSpaceAvailableForMulch();                                                                                         // [0x2bb7400] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementMulchDetailsPanel.HandleSetOfItemsToMulchChangedBP
	// void HandleSetOfItemsToMulchChangedBP();                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementMulchDetailsPanel.HandleHostSet
	// void HandleHostSet();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementMulchDetailsPanel.GetItemsToMulch
	// TArray<UFortItem*> GetItemsToMulch();                                                                                    // [0x2bb6770] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementMulchDetailsPanel.GetItemCountsToMulch
	// TArray<int32_t> GetItemCountsToMulch();                                                                                  // [0x2bb6630] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementMulchDetailsPanel.CommitMulch
	// void CommitMulch();                                                                                                      // [0x2bb6220] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemManagementModeDetailsPanel
/// Size: 0x0030 (0x000210 - 0x000240)
class UFortItemManagementModeDetailsPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(UCommonWidgetSwitcher*)                    ModeWidgetSwitcher                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UFortItemDetailsActivatablePanel*)         DetailsModeItemDetailsPanel                                 OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UFortItemDetailsActivatablePanel*)         ComparisonModeItemDetailsPanel                              OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UFortItemDetailsActivatablePanel*)         MulchModeItemDetailsPanel                                   OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItemManagementScreen*>) HostItemManagementScreen                                   OFFSET(get<T>, {0x230, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemManagementModeDetailsPanel.HandleHostSet
	// void HandleHostSet();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementModeDetailsPanel.HandleDifferentItemManagementModeSetBP
	// void HandleDifferentItemManagementModeSetBP();                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementModeDetailsPanel.GetItemManagementMode
	// EFortItemManagementMode GetItemManagementMode();                                                                         // [0x2bb66e0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortFrontendInventoryFilterFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortFrontendInventoryFilterFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortFrontendInventoryFilterFunctionLibrary.ToText
	// FText ToText(EFortFrontendInventoryFilter FrontendInventoryFilter);                                                      // [0x2bb7830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortItemManagementScreen
/// Size: 0x0450 (0x0003F0 - 0x000840)
class UFortItemManagementScreen : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2112;

public:
	CMember(UMulticastDelegate)                        OnItemViewRefreshed                                         OFFSET(get<T>, {0x3F0, 16, 0, 0})
	CMember(EFortItemManagementMode)                   Mode                                                        OFFSET(get<T>, {0x780, 1, 0, 0})
	CMember(EFortFrontendInventoryFilter)              FrontendInventoryFilter                                     OFFSET(get<T>, {0x781, 1, 0, 0})
	DMember(bool)                                      bReadOnlyModeWIFE                                           OFFSET(get<bool>, {0x782, 1, 0, 0})
	DMember(bool)                                      ConsumeItemRequestInProgress                                OFFSET(get<bool>, {0x783, 1, 0, 0})
	CMember(UFortItemManagementInventoryPanel*)        InventoryPanel                                              OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(UFortItemManagementModeDetailsPanel*)      ModeDetailsPanel                                            OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToDetail                                                OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(UClass*)                                   MulchConfirmationModalClass                                 OFFSET(get<T>, {0x7F8, 8, 0, 0})
	CMember(UClass*)                                   CustomFilterModalClass                                      OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(UFortMulchConfirmationModalWidget*)        MulchConfirmationModal                                      OFFSET(get<T>, {0x820, 8, 0, 0})
	CMember(UFortItemManagementCustomFilterModalWidget*) CustomFilterModal                                         OFFSET(get<T>, {0x828, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemManagementScreen.TransferItem
	// void TransferItem(UFortItem* Item);                                                                                      // [0x2bb7950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.ToggleShowCollectionBookIndicator
	// void ToggleShowCollectionBookIndicator();                                                                                // [0x2bb7910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.ShowMulchConfirmationModal
	// void ShowMulchConfirmationModal();                                                                                       // [0x2bb77f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.ShowCustomFilterModal
	// void ShowCustomFilterModal();                                                                                            // [0x2bb77d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.SetFrontendInventoryFilter
	// void SetFrontendInventoryFilter(EFortFrontendInventoryFilter FrontendInventoryFilter);                                   // [0x2bb76d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.SetConsumeItemRequestInProgress
	// void SetConsumeItemRequestInProgress(bool InProgress);                                                                   // [0x2bb75c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.RequestPopupMenuForSelectedItem
	// void RequestPopupMenuForSelectedItem();                                                                                  // [0x2bb75a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.NotifyPanelDeactivated
	// void NotifyPanelDeactivated();                                                                                           // [0x2bb74a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.NotifyPanelActivated
	// void NotifyPanelActivated();                                                                                             // [0x2bb7480] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.IsScreenWIFE
	// bool IsScreenWIFE();                                                                                                     // [0x2bb73d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementScreen.InspectItem
	// void InspectItem(UFortItem* Item);                                                                                       // [0x2bb7350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.HideMulchConfirmationModal
	// void HideMulchConfirmationModal();                                                                                       // [0x2bb7330] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.HideCustomFilterModal
	// void HideCustomFilterModal();                                                                                            // [0x2bb7310] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.HasItemBeenSeen
	// bool HasItemBeenSeen(UFortAccountItem* AccountItem);                                                                     // [0x2bb7280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleTransferItemBP
	// void HandleTransferItemBP(UFortItem* Item);                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleMulchQuantitySelection
	// void HandleMulchQuantitySelection(UFortItem* Item);                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleItemToDetailChanged
	// void HandleItemToDetailChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                          // [0x2bb70e0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleItemToCompareWithChanged
	// void HandleItemToCompareWithChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                     // [0x2bb6fc0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleInspectItemBP
	// void HandleInspectItemBP(UFortItem* Item);                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleEquipItemBP
	// void HandleEquipItemBP(UFortItem* Item);                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleDropItemBP
	// void HandleDropItemBP(UFortItem* Item);                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleDifferentItemManagementModeSetBP
	// void HandleDifferentItemManagementModeSetBP();                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleCraftItemBP
	// void HandleCraftItemBP(UFortSchematicItem* SchematicItem);                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementScreen.HandleConsumeItemBP
	// void HandleConsumeItemBP(UFortConsumableAccountItem* ConsumableItem);                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemManagementScreen.GetShouldShowCollectionBookIndicator
	// bool GetShouldShowCollectionBookIndicator();                                                                             // [0x2bb6980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementScreen.GetNumItemsToMulch
	// int32_t GetNumItemsToMulch();                                                                                            // [0x2bb6870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementScreen.GetItemToDetail
	// UFortItem* GetItemToDetail();                                                                                            // [0x2bb6740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementScreen.GetItemToCompareDetailsWith
	// UFortItem* GetItemToCompareDetailsWith();                                                                                // [0x2bb6710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementScreen.GetItemsToMulchBP
	// TArray<UFortItem*> GetItemsToMulchBP();                                                                                  // [0x2bb67f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementScreen.EquipItem
	// void EquipItem(UFortItem* Item);                                                                                         // [0x2bb6580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.EnterMulchMode
	// void EnterMulchMode(UFortItem* ItemToMulch);                                                                             // [0x2bb6500] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.EnterDetailsMode
	// void EnterDetailsMode(UFortItem* ItemToDetail);                                                                          // [0x2bb6480] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.EnterComparisonMode
	// void EnterComparisonMode(UFortItem* ItemToCompareDetailsWith);                                                           // [0x2bb6400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.DropItem
	// void DropItem(UFortItem* Item);                                                                                          // [0x2bb6380] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.CycleSortType
	// void CycleSortType();                                                                                                    // [0x2bb6360] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.CraftItem
	// void CraftItem(UFortSchematicItem* SchematicItem);                                                                       // [0x2bb62c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.ConsumeItem
	// void ConsumeItem(UFortConsumableAccountItem* ConsumableItem);                                                            // [0x2bb6240] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.CanRequestPopupMenuForSelectedItem
	// bool CanRequestPopupMenuForSelectedItem();                                                                               // [0x2bb61d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemManagementScreen.CanItemBeMulched
	// bool CanItemBeMulched(UFortItem* Item, FText& OutRestrictionReason);                                                     // [0x2bb60b0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemManagementScreen.CancelInventoryPanelTileViewRefresh
	// void CancelInventoryPanelTileViewRefresh();                                                                              // [0x2bb6200] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemQuantityListEntryBase
/// Size: 0x0028 (0x000210 - 0x000238)
class UFortItemQuantityListEntryBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x218, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.SetPreviewData
	// void SetPreviewData(FFortItemEntryPreviewData& PreviewData);                                                             // [0x2bbc0f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.SetItemInstanceAndQuantity
	// void SetItemInstanceAndQuantity(FFortItemInstanceQuantityPair& ItemQuantityPair, bool ShouldTreatAsReset);               // [0x2bbba70] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.SetItemDefinitionAndQuantity
	// void SetItemDefinitionAndQuantity(FFortItemQuantityPair& ItemQuantityPair, bool ShouldTreatAsReset);                     // [0x2bbb7d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.PreviewStarted
	// void PreviewStarted();                                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.PreviewEnded
	// void PreviewEnded();                                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.IsBeingPreviewed
	// bool IsBeingPreviewed();                                                                                                 // [0x2bbb120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.HandleDifferentItemOrQuantitySetBP
	// void HandleDifferentItemOrQuantitySetBP(bool IsBeingReset);                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.GetPreviewData
	// void GetPreviewData(FFortItemEntryPreviewData& OutPreviewData);                                                          // [0x2bbac00] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.GetItemInstance
	// UFortItem* GetItemInstance();                                                                                            // [0x2bbabd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.GetItemDefinition
	// UFortItemDefinition* GetItemDefinition();                                                                                // [0x2bbab20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemQuantityListEntryBase.ClearPreviewData
	// void ClearPreviewData();                                                                                                 // [0x2bba9c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemQuantityListBase
/// Size: 0x0080 (0x000210 - 0x000290)
class UFortItemQuantityListBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(EFortItemInspectionMode)                   CurrentInspectMode                                          OFFSET(get<T>, {0x210, 1, 0, 0})
	CMember(UClass*)                                   ListEntryWidgetType                                         OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(TMap<UObject*, UFortItemQuantityListEntryBase*>) ItemObjectToWidgetMap                                 OFFSET(get<T>, {0x220, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemQuantityListBase.SetItemToCompareDefinitionsAndQuantities
	// void SetItemToCompareDefinitionsAndQuantities(TArray<FFortItemQuantityPair>& ItemToCompareQuantityPairs);                // [0x2bbbc60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemQuantityListBase.SetItemInstancesAndQuantities
	// void SetItemInstancesAndQuantities(TArray<FFortItemInstanceQuantityPair>& ItemQuantityPairs, bool ShouldResetWidgets);   // [0x2bbbb60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemQuantityListBase.SetItemInspectMode
	// void SetItemInspectMode(EFortItemInspectionMode InspectMode);                                                            // [0x2bbb9f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemQuantityListBase.SetItemDefinitionsAndQuantities
	// void SetItemDefinitionsAndQuantities(TArray<FFortItemQuantityPair>& ItemQuantityPairs, bool ShouldResetWidgets);         // [0x2bbb8d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemQuantityListBase.OnItemInspectModeChanged
	// void OnItemInspectModeChanged();                                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemQuantityListBase.IsEmptyList
	// bool IsEmptyList();                                                                                                      // [0x2bbb140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemQuantityListBase.GetItemDefinitions
	// TArray<UFortItemDefinition*> GetItemDefinitions();                                                                       // [0x2bbab50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemQuantityListBase.AddListEntry
	// void AddListEntry(UFortItemQuantityListEntryBase* ListEntry);                                                            // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemRatingIndicator
/// Size: 0x0368 (0x000210 - 0x000578)
class UFortItemRatingIndicator : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1400;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToCompareWith                                           OFFSET(get<T>, {0x218, 8, 0, 0})
	SMember(FFortMultiSizeBrush)                       RatingTypeIcon                                              OFFSET(getStruct<T>, {0x220, 816, 0, 0})
	DMember(int32_t)                                   RatingValue                                                 OFFSET(get<int32_t>, {0x550, 4, 0, 0})
	CMember(EFortBuffState)                            ComparisonResult                                            OFFSET(get<T>, {0x554, 1, 0, 0})
	DMember(bool)                                      ShouldAppearEnchanted                                       OFFSET(get<bool>, {0x555, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemRatingIndicator.SetItemViewContext
	// void SetItemViewContext(TScriptInterface<Class> ItemViewContext);                                                        // [0x2bbbeb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemRatingIndicator.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* ItemToRepresent);                                                                     // [0x2bbbdb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemRatingIndicator.SetItemToCompareWith
	// void SetItemToCompareWith(UFortItem* ItemToCompareWith);                                                                 // [0x2bbbd30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemRatingIndicator.HandleViewModelChanged
	// void HandleViewModelChanged();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemReceivedWidgetBase
/// Size: 0x00B0 (0x0003F0 - 0x0004A0)
class UFortItemReceivedWidgetBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(TArray<FFortReceivedItemLootInfo>)         ItemDefs                                                    OFFSET(get<T>, {0x460, 16, 0, 0})
	CMember(UFortGiftBoxItem*)                         GiftBoxItem                                                 OFFSET(get<T>, {0x470, 8, 0, 0})
	SMember(FString)                                   FromUsername                                                OFFSET(getStruct<T>, {0x478, 16, 0, 0})
	CMember(UHorizontalBox*)                           HeaderContainer                                             OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(UScrollBox*)                               GiftScrollBox                                               OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(UClass*)                                   ItemCardClass                                               OFFSET(get<T>, {0x498, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemReceivedWidgetBase.ShowGiftBox
	// void ShowGiftBox();                                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemReceivedWidgetBase.SetGiftBoxItem
	// void SetGiftBoxItem(UFortGiftBoxItem* GiftBoxItem);                                                                      // [0x2bbb6d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemReceivedWidgetBase.SetAlignmentOnSlots
	// void SetAlignmentOnSlots(UScrollBox* Widget);                                                                            // [0x2bbb370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemReceivedWidgetBase.SetAlignmentOnSlot
	// void SetAlignmentOnSlot(UScrollBox* Widget, int32_t Index);                                                              // [0x2bbb2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemReceivedWidgetBase.OnGiftBoxItemSetInternal
	// void OnGiftBoxItemSetInternal();                                                                                         // [0x2bbb1f0] Final|Native|Public  
	// Function /Script/FortniteUI.FortItemReceivedWidgetBase.OnGiftBoxItemSet
	// void OnGiftBoxItemSet();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemReceivedWidgetBase.GetTemporaryInstance
	// UFortItem* GetTemporaryInstance(FFortReceivedItemLootInfo& ItemReference);                                               // [0x2bbacf0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemReceivedPrePrompt
/// Size: 0x0010 (0x0004A0 - 0x0004B0)
class UFortItemReceivedPrePrompt : public UFortItemReceivedWidgetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
	CMember(UMulticastDelegate)                        OnGiftingPreTest                                            OFFSET(get<T>, {0x4A0, 16, 0, 0})
};

/// Class /Script/FortniteUI.FortItemReceivedScreen
/// Size: 0x0010 (0x0004A0 - 0x0004B0)
class UFortItemReceivedScreen : public UFortItemReceivedWidgetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
	CMember(UMulticastDelegate)                        OnFinalGiftingComplete                                      OFFSET(get<T>, {0x4A0, 16, 0, 0})
};

/// Class /Script/FortniteUI.ItemReceivedHeaderBase
/// Size: 0x0018 (0x000208 - 0x000220)
class UItemReceivedHeaderBase : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(UFortGiftBoxItem*)                         GiftBoxItem                                                 OFFSET(get<T>, {0x208, 8, 0, 0})
	SMember(FString)                                   FromUsername                                                OFFSET(getStruct<T>, {0x210, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.ItemReceivedHeaderBase.InitFromGiftBoxItem
	// void InitFromGiftBoxItem();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortGiftInfo
/// Size: 0x0048 (0x000028 - 0x000070)
class UFortGiftInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGiftBoxInfo)                              GiftBoxInfo                                                 OFFSET(getStruct<T>, {0x28, 72, 0, 0})
};

/// Class /Script/FortniteUI.ItemCardWidgetBase
/// Size: 0x0010 (0x000420 - 0x000430)
class UItemCardWidgetBase : public UButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(UFortGiftInfo*)                            LootInfo                                                    OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(UFortMultiSizeItemCard*)                   FortMultiSizeItemCard_Widget                                OFFSET(get<T>, {0x428, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.ItemCardWidgetBase.SetLootInfo
	// void SetLootInfo(UFortGiftInfo* LootInfo);                                                                               // [0x2bbbff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.ItemCardWidgetBase.OnLootInfoSet
	// void OnLootInfoSet();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortItemTransform
/// Size: 0x0000 (0x0003C0 - 0x0003C0)
class UFortItemTransform : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:


	/// Functions
	// Function /Script/FortniteUI.FortItemTransform.ProcessPendingSeenTransformKeys
	// void ProcessPendingSeenTransformKeys();                                                                                  // [0x2bbb210] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemTransform.OnRequestCloseItemPicker
	// void OnRequestCloseItemPicker();                                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemTransform.LogSelectedKey
	// void LogSelectedKey(UFortItem* SelectedKey);                                                                             // [0x2bbb170] Final|Native|Public|BlueprintCallable|Const 
};

/// Class /Script/FortniteUI.FortItemView
/// Size: 0x00B8 (0x000028 - 0x0000E0)
class UFortItemView : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FDataTableRowHandle)                       ZoomOutInputAction                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ZoomInInputAction                                           OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FDataTableRowHandle)                       RotateInputAction                                           OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(TArray<FDataTableRowHandle>)               RegisteredInputActions                                      OFFSET(get<T>, {0xC8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemView.ShouldAllowZooming
	// bool ShouldAllowZooming();                                                                                               // [0x2bbc540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemView.SetShouldAllowZooming
	// void SetShouldAllowZooming(bool Value);                                                                                  // [0x2bbc3a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemView.SetSceneComponentToAffect
	// void SetSceneComponentToAffect(USceneComponent* Component);                                                              // [0x2bbc210] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemView.SetRotationMode
	// void SetRotationMode(EFortItemViewRotationMode Value);                                                                   // [0x2bbc190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemView.SetOwningPanel
	// void SetOwningPanel(UCommonActivatablePanel* Panel);                                                                     // [0x2bbc070] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemView.RestoreInitialTransform
	// void RestoreInitialTransform();                                                                                          // [0x2bbb270] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemView.GetRotationMode
	// EFortItemViewRotationMode GetRotationMode();                                                                             // [0x2bbaca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortLegacyItemView
/// Size: 0x0058 (0x000028 - 0x000080)
class UFortLegacyItemView : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(EFortItemInspectionMode)                   CurrentInspectMode                                          OFFSET(get<T>, {0x38, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLegacyItemView.ZoomAllowed
	// bool ZoomAllowed();                                                                                                      // [0x2bbc5b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortLegacyItemView.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* NewItemToRepresent);                                                                  // [0x2bbbe30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortLegacyItemView.SetInspectMode
	// void SetInspectMode(EFortItemInspectionMode NewInspectMode);                                                             // [0x2bbb750] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortLegacyItemView.RotateAllowed
	// bool RotateAllowed();                                                                                                    // [0x2bbb290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortItemViewContextInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortItemViewContextInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteUI.FortItemWidget
/// Size: 0x0038 (0x0007E0 - 0x000818)
class UFortItemWidget : public UFortBaseButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	SMember(FName)                                     CooldownMaterialParameterName                               OFFSET(getStruct<T>, {0x7F0, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 CooldownMaterial                                            OFFSET(get<T>, {0x7F8, 8, 0, 0})
	DMember(int32_t)                                   LastCooldownTimeInSeconds                                   OFFSET(get<int32_t>, {0x800, 4, 0, 0})
	DMember(float)                                     LastCooldownPct                                             OFFSET(get<float>, {0x804, 4, 0, 0})
	DMember(bool)                                      LastIsActivatable                                           OFFSET(get<bool>, {0x808, 1, 1, 0})
	DMember(int32_t)                                   QuantityOverride                                            OFFSET(get<int32_t>, {0x814, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemWidget.SetOnGetItemToCompareDelegate
	// void SetOnGetItemToCompareDelegate(DelegateProperty InDelegate);                                                         // [0x2bc05c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemWidget.SetItem
	// void SetItem(UFortItem* InItem, int32_t QuantityOverride);                                                               // [0x2bc0190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemWidget.SetCooldownMaterial
	// void SetCooldownMaterial(UMaterialInstanceDynamic* NewCooldownMaterial);                                                 // [0x2bbfe40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemWidget.OnGetItemToCompare__DelegateSignature
	// void OnGetItemToCompare__DelegateSignature(UFortItem*& ItemToCompare);                                                   // [0x154a140] Public|Delegate|HasOutParms 
	// Function /Script/FortniteUI.FortItemWidget.OnFortItemUpdated
	// void OnFortItemUpdated(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                                  // [0x2bbfc20] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemWidget.OnFortItemDestroyed
	// void OnFortItemDestroyed();                                                                                              // [0x2bbfc00] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemWidget.IsSlotted
	// bool IsSlotted();                                                                                                        // [0x2bbfbd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.IsSchematic
	// bool IsSchematic();                                                                                                      // [0x2bbfba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.IsItemValid
	// bool IsItemValid();                                                                                                      // [0x2bbfb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.IsInventoryOverflowItem
	// bool IsInventoryOverflowItem();                                                                                          // [0x2bbfb40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.IsEquipped
	// bool IsEquipped();                                                                                                       // [0x2bbfaf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.HasTertiaryCategory
	// bool HasTertiaryCategory();                                                                                              // [0x2bbfac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.HasSecondaryCategory
	// bool HasSecondaryCategory();                                                                                             // [0x2bbfa90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.HasLevel
	// bool HasLevel();                                                                                                         // [0x2bbfa60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.HasDurability
	// bool HasDurability();                                                                                                    // [0x2bbfa30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetType
	// float GetType();                                                                                                         // [0x2bbf830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetStackCount
	// int32_t GetStackCount();                                                                                                 // [0x2bbf800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetRarity
	// EFortRarity GetRarity();                                                                                                 // [0x2bbf6b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetLevel
	// int32_t GetLevel();                                                                                                      // [0x2bbf4c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetItemToCompare
	// UFortItem* GetItemToCompare();                                                                                           // [0x2bbf490] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemWidget.GetItem
	// UFortItem* GetItem();                                                                                                    // [0x2bbf3d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetIconTexture
	// UTexture* GetIconTexture(TEnumAsByte<EFortBrushSize> InBrushSize);                                                       // [0x2bbf2b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetDurability
	// float GetDurability();                                                                                                   // [0x2bbf1d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetDisplayName
	// FText GetDisplayName();                                                                                                  // [0x2bbf150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.GetDescription
	// FText GetDescription();                                                                                                  // [0x2bbf0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemWidget.BPOnItemSet
	// void BPOnItemSet(UFortItem* NewItem);                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemWidget.BPOnItemChanged
	// void BPOnItemChanged();                                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemWidget.BPOnCooldownSecondsChanged
	// void BPOnCooldownSecondsChanged(int32_t NewCooldownSeconds);                                                             // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemWidget.BPOnActivatableChanged
	// void BPOnActivatableChanged(bool bNewActivatable);                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortJournalQuestDetails
/// Size: 0x0008 (0x000210 - 0x000218)
class UFortJournalQuestDetails : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	CMember(UFortQuestItem*)                           CurrentQuest                                                OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortJournalQuestDetails.SetCurrentQuest
	// void SetCurrentQuest(UFortQuestItem* InCurrentQuest);                                                                    // [0x2bbfec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortJournalQuestDetails.HandleCurrentQuestChangedBP
	// void HandleCurrentQuestChangedBP();                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortJournalQuestDetails.GetVisibleObjectives
	// void GetVisibleObjectives(TArray<UFortQuestObjectiveInfo*>& VisibleObjectives);                                          // [0x2bbf860] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortJournalQuestDetails.GetRewards
	// void GetRewards(TArray<FFortItemInstanceQuantityPair>& OutRewards, TArray<FFortItemInstanceQuantityPair>& OutSelectableRewards); // [0x2bbf6e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortJournalQuestDetails.GetFutureObjectives
	// void GetFutureObjectives(TArray<UFortQuestObjectiveInfo*>& FutureObjectives);                                            // [0x2bbf200] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortJournalQuestDetails.GetActiveMissionTileType
	// EFortTheaterMapTileType GetActiveMissionTileType();                                                                      // [0x2bbeef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortJournalQuestDetails.CanPlayQuest
	// bool CanPlayQuest();                                                                                                     // [0x2bbedf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortJournalQuestDetails.CanPartyLeaderPlayQuest
	// bool CanPartyLeaderPlayQuest();                                                                                          // [0x2bbedc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortJournalQuestDetails.CanGotoQuest
	// bool CanGotoQuest();                                                                                                     // [0x2bbed90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortJournalQuestProgressBar
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortJournalQuestProgressBar : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(TWeakObjectPtr<UFortQuestObjectiveInfo*>)  QuestObjectiveInfo                                          OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortJournalQuestProgressBar.HandleNewQuestObjectiveBP
	// void HandleNewQuestObjectiveBP();                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortJournalQuestProgressBar.GetProgressDetails
	// void GetProgressDetails(FText& OutNumerator, FText& OutDenominator, float& OutFraction);                                 // [0x2bbf4f0] Final|Native|Protected|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortKeybindWidget
/// Size: 0x0058 (0x000210 - 0x000268)
class UFortKeybindWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	SMember(FName)                                     BoundAction                                                 OFFSET(getStruct<T>, {0x210, 8, 0, 0})
	DMember(bool)                                      bForcedHoldKeybind                                          OFFSET(get<bool>, {0x218, 1, 0, 0})
	CMember(EFortKeybindForcedHoldStatus)              ForcedHoldKeybindStatus                                     OFFSET(get<T>, {0x219, 1, 0, 0})
	DMember(bool)                                      bForceGamepadKey                                            OFFSET(get<bool>, {0x21A, 1, 0, 0})
	DMember(bool)                                      bIsHoldKeybind                                              OFFSET(get<bool>, {0x21B, 1, 0, 0})
	DMember(bool)                                      bShowKeybindBorder                                          OFFSET(get<bool>, {0x21C, 1, 0, 0})
	DMember(bool)                                      bShowTimeCountDown                                          OFFSET(get<bool>, {0x21D, 1, 0, 0})
	SMember(FKey)                                      BoundKey                                                    OFFSET(getStruct<T>, {0x220, 24, 0, 0})
	CMember(UImage*)                                   HoldKeybindImage                                            OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UCommonTextBlock*)                         TextCountdown                                               OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UWidgetSwitcher*)                          KeyCountdownSwitcher                                        OFFSET(get<T>, {0x248, 8, 0, 0})
	SMember(FName)                                     PercentageMaterialParameterName                             OFFSET(getStruct<T>, {0x250, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ProgressPercentageMID                                       OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortKeybindWidget.UpdateKeybindWidget
	// void UpdateKeybindWidget();                                                                                              // [0x2bc0930] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortKeybindWidget.Update
	// void Update();                                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortKeybindWidget.StopHoldProgress
	// void StopHoldProgress(FName HoldActionName, bool bCompletedSuccessfully);                                                // [0x2bc0860] Final|Native|Public  
	// Function /Script/FortniteUI.FortKeybindWidget.StartHoldProgress
	// void StartHoldProgress(FName HoldActionName, float HoldDuration);                                                        // [0x2bc0790] Final|Native|Public  
	// Function /Script/FortniteUI.FortKeybindWidget.SetShowProgressCountDown
	// void SetShowProgressCountDown(bool bShow);                                                                               // [0x2bc0700] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortKeybindWidget.SetForcedHoldKeybindStatus
	// void SetForcedHoldKeybindStatus(EFortKeybindForcedHoldStatus InForcedHoldKeybindStatus);                                 // [0x2bc0080] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortKeybindWidget.SetForcedHoldKeybind
	// void SetForcedHoldKeybind(bool InForcedHoldKeybind);                                                                     // [0x2bbfff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortKeybindWidget.SetBoundAction
	// void SetBoundAction(FName NewBoundAction);                                                                               // [0x2bbfdc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortKeybindWidget.IsHoldKeybind
	// bool IsHoldKeybind();                                                                                                    // [0x2bbfb20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortKeybindWidget.GetBrushForKey
	// bool GetBrushForKey(TEnumAsByte<EFortBrushSize> BrushSize, FSlateBrush& Brush);                                          // [0x2bbef20] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortLeaderboardContext
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortLeaderboardContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortLeaderboardContext.CanShowStats
	// bool CanShowStats();                                                                                                     // [0x2bbee80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortLeaderboardContext.CanShowLeaderboards
	// bool CanShowLeaderboards();                                                                                              // [0x2bbee50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortLeaderboardContext.CanShowGlobalLeaderboards
	// bool CanShowGlobalLeaderboards();                                                                                        // [0x2bbee20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortLeaderboardEntryWidget
/// Size: 0x0010 (0x000800 - 0x000810)
class UFortLeaderboardEntryWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(UObject*)                                  LeaderboardEntryObject                                      OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLeaderboardEntryWidget.OnLeaderboardEntryDataSet
	// void OnLeaderboardEntryDataSet();                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortLegacySlateBridgeWidget
/// Size: 0x0018 (0x000110 - 0x000128)
class UFortLegacySlateBridgeWidget : public UNativeWidgetHost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(EFortLegacySlateWidget)                    ContainedWidgetType                                         OFFSET(get<T>, {0x110, 1, 0, 0})
	DMember(float)                                     DPIScaleFactor                                              OFFSET(get<float>, {0x114, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLegacySlateBridgeWidget.UpdateSlateWidget
	// void UpdateSlateWidget(EFortLegacySlateWidget SlateWidgetType);                                                          // [0x2bc0950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortLegacySlateBridgeWidget.SetOnCloseHandler
	// void SetOnCloseHandler(DelegateProperty& OnCloseHandler);                                                                // [0x2bc0500] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortLevelIndicator
/// Size: 0x0088 (0x000100 - 0x000188)
class UFortLevelIndicator : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                ItemForComparison                                           OFFSET(get<T>, {0x108, 8, 0, 0})
	DMember(bool)                                      ShouldShowLabel                                             OFFSET(get<bool>, {0x110, 1, 0, 0})
	CMember(UClass*)                                   TextStyle                                                   OFFSET(get<T>, {0x118, 8, 0, 0})
	DMember(bool)                                      ShouldShowMaximumLevel                                      OFFSET(get<bool>, {0x120, 1, 0, 0})
	DMember(int32_t)                                   CurrentLevel                                                OFFSET(get<int32_t>, {0x124, 4, 0, 0})
	DMember(int32_t)                                   MaximumLevel                                                OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	DMember(bool)                                      IsComparingLevels                                           OFFSET(get<bool>, {0x12C, 1, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               ComparisonResultIndicatorSize                               OFFSET(get<T>, {0x12D, 1, 0, 0})
	DMember(int32_t)                                   CurrentLevelForComparison                                   OFFSET(get<int32_t>, {0x130, 4, 0, 0})
	DMember(int32_t)                                   MaximumLevelForComparison                                   OFFSET(get<int32_t>, {0x134, 4, 0, 0})
	CMember(UCommonTextBlock*)                         LabelTextBlock                                              OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(UCommonNumericTextBlock*)                  CurrentLevelNumericTextBlock                                OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(UCommonTextBlock*)                         DivisionOperatorTextBlock                                   OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(UCommonNumericTextBlock*)                  MaximumLevelNumericTextBlock                                OFFSET(get<T>, {0x160, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLevelIndicator.SetShouldShowMaximumLevel
	// void SetShouldShowMaximumLevel(bool InShouldShowMaximumLevel);                                                           // [0x2bc0670] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortLevelIndicator.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* ItemToRepresent);                                                                     // [0x2bc03e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortLevelIndicator.SetItemForComparison
	// void SetItemForComparison(UFortItem* ItemForComparison);                                                                 // [0x2bc0250] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortLevelIndicator.HandleItemToRepresentChanged
	// void HandleItemToRepresentChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                       // [0x2bbf910] Final|Native|Private 
	// Function /Script/FortniteUI.FortLevelIndicator.HandleItemForComparisonChanged
	// void HandleItemForComparisonChanged(bool bItemChanged, bool bAmmoChanged, bool bIngredientsChanged);                     // [0x2bbf910] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortListItem
/// Size: 0x0000 (0x000218 - 0x000218)
class UFortListItem : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:


	/// Functions
	// Function /Script/FortniteUI.FortListItem.ToggleExpansion
	// void ToggleExpansion();                                                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortListItem.SetSelected
	// void SetSelected(bool bSelected);                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortListItem.SetIndexInList
	// void SetIndexInList(int32_t InIndexInList);                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortListItem.SetData
	// void SetData(UObject* InData);                                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortListItem.Private_OnExpanderArrowShiftClicked
	// void Private_OnExpanderArrowShiftClicked();                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortListItem.IsItemExpanded
	// bool IsItemExpanded();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteUI.FortListItem.GetSelectionMode
	// TEnumAsByte<ESelectionMode> GetSelectionMode();                                                                          // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteUI.FortListItem.GetIndentLevel
	// int32_t GetIndentLevel();                                                                                                // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteUI.FortListItem.DoesItemHaveChildren
	// int32_t DoesItemHaveChildren();                                                                                          // [0x154a140] Event|Public|BlueprintEvent|Const 
};

/// Class /Script/FortniteUI.FortListView
/// Size: 0x0068 (0x000100 - 0x000168)
class UFortListView : public UTableViewBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(UMulticastDelegate)                        OnItemClicked                                               OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemSelected                                              OFFSET(get<T>, {0x110, 16, 0, 0})
	DMember(float)                                     ItemHeight                                                  OFFSET(get<float>, {0x130, 4, 0, 0})
	CMember(TArray<UObject*>)                          DataProvider                                                OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TEnumAsByte<ESelectionMode>)               SelectionMode                                               OFFSET(get<T>, {0x148, 1, 0, 0})
	CMember(EConsumeMouseWheel)                        ConsumeMouseWheel                                           OFFSET(get<T>, {0x149, 1, 0, 0})
	CMember(UClass*)                                   ListItemClass                                               OFFSET(get<T>, {0x150, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortListView.SetItemSelected
	// bool SetItemSelected(UObject* Item);                                                                                     // [0x2bc02d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortListView.SetIndexSelected
	// bool SetIndexSelected(int32_t Index);                                                                                    // [0x2bc0100] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortListView.SetDataProvider
	// void SetDataProvider(TArray<UObject*>& NewData);                                                                         // [0x2bbff40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortListView.RemoveItemAt
	// void RemoveItemAt(int32_t Index);                                                                                        // [0x2bbfd40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortListView.GetItemAt
	// UObject* GetItemAt(int32_t Index);                                                                                       // [0x2bbf400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortListView.GetIndexForItem
	// int32_t GetIndexForItem(UObject* Item);                                                                                  // [0x2bbf340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortListView.ClearSelection
	// void ClearSelection();                                                                                                   // [0x2bbeed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortListView.Clear
	// void Clear();                                                                                                            // [0x2bbeeb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortListView.AddItem
	// void AddItem(UObject* NewItem);                                                                                          // [0x2bbed10] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortLiveStreamGrantWindowExpires
/// Size: 0x0000 (0x000210 - 0x000210)
class UFortLiveStreamGrantWindowExpires : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FortniteUI.FortLobby
/// Size: 0x0050 (0x0003C0 - 0x000410)
class UFortLobby : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UOverlay*)                                 OverlayMain                                                 OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLobby.OnPlayerClicked
	// void OnPlayerClicked(int32_t PlayerIndex);                                                                               // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortLobby.OnNavigationRight
	// void OnNavigationRight();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortLobby.OnNavigationLeft
	// void OnNavigationLeft();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortLobby.OnEndCursorOverPlayer
	// void OnEndCursorOverPlayer(int32_t PlayerIndex);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortLobby.OnBeginCursorOverPlayer
	// void OnBeginCursorOverPlayer(int32_t PlayerIndex);                                                                       // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortLoginCredentialSelect
/// Size: 0x0100 (0x0003C0 - 0x0004C0)
class UFortLoginCredentialSelect : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(UCommonButton*)                            Button_Epic                                                 OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Facebook                                             OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Google                                               OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(UCommonButton*)                            Button_PS                                                   OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(UCommonButton*)                            Button_XB                                                   OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(UCommonButton*)                            Button_CreateAccount                                        OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(UCommonButton*)                            Button_NoXB                                                 OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(UCommonButton*)                            Button_NoSony                                               OFFSET(get<T>, {0x4B8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLoginCredentialSelect.HandleXBClicked
	// void HandleXBClicked(UCommonButton* Button);                                                                             // [0x2bc4240] Final|Native|Protected 
	// Function /Script/FortniteUI.FortLoginCredentialSelect.HandlePSClicked
	// void HandlePSClicked(UCommonButton* Button);                                                                             // [0x2bc4040] Final|Native|Protected 
	// Function /Script/FortniteUI.FortLoginCredentialSelect.HandleGoogleClicked
	// void HandleGoogleClicked(UCommonButton* Button);                                                                         // [0x2bc3f60] Final|Native|Protected 
	// Function /Script/FortniteUI.FortLoginCredentialSelect.HandleFacebookClicked
	// void HandleFacebookClicked(UCommonButton* Button);                                                                       // [0x2bc3d60] Final|Native|Protected 
	// Function /Script/FortniteUI.FortLoginCredentialSelect.HandleEpicClicked
	// void HandleEpicClicked(UCommonButton* Button);                                                                           // [0x2bc3ce0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortLoginCredentialSelect.HandleCreateAccountClicked
	// void HandleCreateAccountClicked(UCommonButton* Button);                                                                  // [0x2bc3bd0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortLoginResultWidget
/// Size: 0x0070 (0x0003C0 - 0x000430)
class UFortLoginResultWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(UClass*)                                   ErrorStyle                                                  OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UClass*)                                   NoErrorStyle                                                OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Title                                                  OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Description                                            OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Continue                                             OFFSET(get<T>, {0x420, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLoginResultWidget.HandleContinueClicked
	// void HandleContinueClicked(UCommonButton* Button);                                                                       // [0x2bc3b50] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortLoginStatus
/// Size: 0x0028 (0x000210 - 0x000238)
class UFortLoginStatus : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(UCommonTextBlock*)                         Text_Title                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Status                                                 OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Status                                               OFFSET(get<T>, {0x230, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLoginStatus.SetTitleText
	// void SetTitleText(FText& TitleText);                                                                                     // [0x2bc4ba0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortLoginStatus.SetLoginStatus
	// void SetLoginStatus(FText& InLoginStatus);                                                                               // [0x2bc4570] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortLoginStatus.HandleStatusClicked
	// void HandleStatusClicked(UCommonButton* Button);                                                                         // [0x2bc41c0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortLoginUnavailable
/// Size: 0x0078 (0x000210 - 0x000288)
class UFortLoginUnavailable : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	SMember(FText)                                     DisableMessage                                              OFFSET(getStruct<T>, {0x210, 24, 0, 0})
	SMember(FText)                                     DisableButtonMsg                                            OFFSET(getStruct<T>, {0x228, 24, 0, 0})
	SMember(FText)                                     InviteClosedMessage                                         OFFSET(getStruct<T>, {0x240, 24, 0, 0})
	SMember(FText)                                     InviteButtonMsg                                             OFFSET(getStruct<T>, {0x258, 24, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Title                                                  OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_DisplayMsg                                             OFFSET(get<T>, {0x280, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortLoginUnavailable.OnMessageSet
	// void OnMessageSet(bool bDisableMessage);                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortLoginUnavailable.LaunchSpecificURL
	// void LaunchSpecificURL();                                                                                                // [0x2bc4350] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortMainTabsScreenBase
/// Size: 0x0070 (0x0003C0 - 0x000430)
class UFortMainTabsScreenBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(TMap<EFortUIFeature, FName>)               FeaturesTabsMap                                             OFFSET(get<T>, {0x3C0, 80, 0, 0})
	CMember(UHorizontalBox*)                           TopTabContainer                                             OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UFortTabListWidgetBase*)                   TopTabList                                                  OFFSET(get<T>, {0x418, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMainTabsScreenBase.HandleRefreshSkillTreeNodePage
	// void HandleRefreshSkillTreeNodePage();                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortMainTabsScreenBase.HandleMainTabSelected
	// void HandleMainTabSelected(FName TabNameID);                                                                             // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortMainTabsScreenBase.HandleMainTabCreated
	// void HandleMainTabCreated(FName TabNameID, UCommonButton* TabButton);                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortMainTabsScreenBase.HandleFeatureStateChanged
	// void HandleFeatureStateChanged(EFortUIFeature ChangedFeature, EFortUIFeatureState NewState, EFortUIFeatureStateReason Reason); // [0x2bc3e60] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMainTabsScreenBase.HandleFeatureNavigateRequest
	// void HandleFeatureNavigateRequest(EFortUIFeature Feature);                                                               // [0x2bc3de0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMainTabsScreenBase.ConstructTabs
	// void ConstructTabs();                                                                                                    // [0x2bc3a20] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortMaterialProgressBarStyle
/// Size: 0x0118 (0x000028 - 0x000140)
class UFortMaterialProgressBarStyle : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FName)                                     BackgroundColorParamName                                    OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FFortMaterialProgressBarSectionStyle)      BarSectionStyles                                            OFFSET(getStruct<T>, {0x40, 256, 0, 0})
};

/// Class /Script/FortniteUI.FortMaterialProgressBar
/// Size: 0x0158 (0x000210 - 0x000368)
class UFortMaterialProgressBar : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(UClass*)                                   Style                                                       OFFSET(get<T>, {0x210, 8, 0, 0})
	SMember(FName)                                     BackgroundColorParamName                                    OFFSET(getStruct<T>, {0x218, 8, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	CMember(EFortMaterialProgressBarSectionOverflowBehavior) OverflowBehavior                                      OFFSET(get<T>, {0x230, 1, 0, 0})
	SMember(FFortMaterialProgressBarSectionInfo)       BarSectionInfo                                              OFFSET(getStruct<T>, {0x238, 288, 0, 0})
	CMember(UCommonBorder*)                            ProgressBar                                                 OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 ProgressBarMID                                              OFFSET(get<T>, {0x360, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMaterialProgressBar.SetStyle
	// void SetStyle(UClass* BarStyle);                                                                                         // [0x2bc4b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMaterialProgressBar.SetProgressBarSectionPercent
	// void SetProgressBarSectionPercent(TEnumAsByte<EFortMaterialProgressBarSection> BarSection, float Percent);               // [0x2bc48c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMaterialProgressBar.SetProgressBarSectionColor
	// void SetProgressBarSectionColor(TEnumAsByte<EFortMaterialProgressBarSection> BarSection, FLinearColor Color, EFortMaterialProgressBarSectionColorNumber ColorNumber); // [0x2bc47c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortMaterialProgressBar.SetBackgroundColor
	// void SetBackgroundColor(FLinearColor Color);                                                                             // [0x2bc44f0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortMicIndicatorWidget
/// Size: 0x0038 (0x000210 - 0x000248)
class UFortMicIndicatorWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:


	/// Functions
	// Function /Script/FortniteUI.FortMicIndicatorWidget.SetPlayerUniqueId
	// void SetPlayerUniqueId(FUniqueNetIdRepl& InPlayerUniqueId);                                                              // [0x2bc46c0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortMicIndicatorWidget.OnPlayerTalkingChanged
	// void OnPlayerTalkingChanged(bool bIsTalking);                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortMicIndicatorWidget.OnPlayerMuted
	// void OnPlayerMuted(bool bIsMuted);                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortMicIndicatorWidget.OnPlayerMicAvailable
	// void OnPlayerMicAvailable(bool bIsTalking);                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortMissionActivationWidget
/// Size: 0x0010 (0x0003F0 - 0x000400)
class UFortMissionActivationWidget : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(EFortMissionActivationWidgetState)         CurrentState                                                OFFSET(get<T>, {0x3F0, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMissionActivationWidget.SetState
	// void SetState(EFortMissionActivationWidgetState NewState);                                                               // [0x2bc4aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMissionActivationWidget.OnStateUpdated
	// void OnStateUpdated(EFortMissionActivationWidgetState ActiveState, EFortMissionActivationWidgetState PreviousState);     // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortMissionSelect
/// Size: 0x0050 (0x0003C0 - 0x000410)
class UFortMissionSelect : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UMulticastDelegate)                        OnNavigation                                                OFFSET(get<T>, {0x400, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMissionSelect.NavigateMissionTiles
	// bool NavigateMissionTiles(EUINavigation Direction);                                                                      // [0x2bc4370] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortMissionTracker
/// Size: 0x0030 (0x000238 - 0x000268)
class UFortMissionTracker : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(UFortMissionTrackerList*)                  MissionTrackerList                                          OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UFortQuestTrackerList*)                    MainQuestList                                               OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UFortQuestTrackerList*)                    PinnedQuestsList                                            OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(UWidget*)                                  AdditionalEntriesIndicator                                  OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(UCommonNumericTextBlock*)                  DebugHeightEstimate                                         OFFSET(get<T>, {0x258, 8, 0, 0})
	DMember(float)                                     AllowedSize                                                 OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(bool)                                      bEnforceHeightLimit                                         OFFSET(get<bool>, {0x264, 1, 0, 0})
	DMember(bool)                                      bSizeEstimateNeedsRefresh                                   OFFSET(get<bool>, {0x265, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMissionTracker.RefreshSizeEstimate
	// void RefreshSizeEstimate();                                                                                              // [0x2bc4420] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMissionTracker.HandleSizeEstimateChanged
	// void HandleSizeEstimateChanged(UObject* ChangedElement);                                                                 // [0x2bc40c0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMissionTracker.HandleDebugHUDObjectiveHeightChanged
	// void HandleDebugHUDObjectiveHeightChanged(bool bIsDebugging);                                                            // [0x2bc3c50] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortMissionTrackerEntry
/// Size: 0x00A8 (0x000210 - 0x0002B8)
class UFortMissionTrackerEntry : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	CMember(UMulticastDelegate)                        OnMissionEntryVisibilityChanged                             OFFSET(get<T>, {0x218, 16, 0, 0})
	CMember(UClass*)                                   SubEntryClass                                               OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(bool)                                      bConfigureAsHUD                                             OFFSET(get<bool>, {0x230, 1, 0, 0})
	DMember(bool)                                      bHiddenByHeightConstraint                                   OFFSET(get<bool>, {0x231, 1, 0, 0})
	CMember(UCommonTextBlock*)                         MissionNameText                                             OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UVerticalBox*)                             ObjectivesListBox                                           OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UImage*)                                   UpperSeparator                                              OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(AFortMission*)                             TrackedMission                                              OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnSizeEstimateChangedDelegate                               OFFSET(get<T>, {0x258, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMissionTrackerEntry.UpdateVisibility
	// void UpdateVisibility();                                                                                                 // [0x2bc3fe0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMissionTrackerEntry.OnMissionSet
	// void OnMissionSet();                                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortMissionTrackerEntry.HandleObjectivesChanged
	// void HandleObjectivesChanged();                                                                                          // [0x2bc4020] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMissionTrackerEntry.HandleMissionInfoSet
	// void HandleMissionInfoSet();                                                                                             // [0x2bc3fe0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortMissionTrackerList
/// Size: 0x0090 (0x000210 - 0x0002A0)
class UFortMissionTrackerList : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UClass*)                                   MissionEntryClass                                           OFFSET(get<T>, {0x218, 8, 0, 0})
	DMember(bool)                                      bConfigureAsHUD                                             OFFSET(get<bool>, {0x220, 1, 0, 0})
	CMember(UVerticalBox*)                             MissionsListBox                                             OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnMissionTrackerListVisibilityChanged                       OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSizeEstimateChangedDelegate                               OFFSET(get<T>, {0x240, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMissionTrackerList.UpdateVisibility
	// void UpdateVisibility();                                                                                                 // [0x2bc4c70] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMissionTrackerList.HandleSizeEstimateChanged
	// void HandleSizeEstimateChanged(UObject* ChangedElement);                                                                 // [0x2bc4140] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMissionTrackerList.HandleMissionsUpdated
	// void HandleMissionsUpdated();                                                                                            // [0x2bc4000] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortMissionTrackerSubEntry
/// Size: 0x0038 (0x000210 - 0x000248)
class UFortMissionTrackerSubEntry : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(UMulticastDelegate)                        OnMissionSubEntryVisibilityChanged                          OFFSET(get<T>, {0x218, 16, 0, 0})
	DMember(bool)                                      bConfigureAsHUD                                             OFFSET(get<bool>, {0x228, 1, 0, 0})
	DMember(bool)                                      bHiddenByHeightConstraint                                   OFFSET(get<bool>, {0x229, 1, 0, 0})
	CMember(AFortObjectiveBase*)                       TrackedObjective                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnSizeEstimateChangedDelegate                               OFFSET(get<T>, {0x238, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMissionTrackerSubEntry.OnObjectiveSet
	// void OnObjectiveSet();                                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortMissionTrackerSubEntry.OnHiddenByHeightConstraintChanged
	// void OnHiddenByHeightConstraintChanged();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortMissionTrackerSubEntry.NotifyVisibilityChanged
	// void NotifyVisibilityChanged();                                                                                          // [0x2bc4400] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortModalContainerData
/// Size: 0x0010 (0x000030 - 0x000040)
class UFortModalContainerData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FFortModalContainerSizeEntry>)      Entries                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FortniteUI.FortModalContainerWidget
/// Size: 0x0058 (0x000100 - 0x000158)
class UFortModalContainerWidget : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(EModalContainerSize)                       SizeConstraint                                              OFFSET(get<T>, {0x108, 1, 0, 0})
	CMember(TArray<FFortModalContainerSizeEntry>)      DefaultSizeEntries                                          OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(UFortModalContainerData*)                  OverrideSizeEntries                                         OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(UWidget*)                                  TopContent                                                  OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(UWidget*)                                  MiddleContent                                               OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(UWidget*)                                  BottomContent                                               OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(UWidget*)                                  BackgroudContent                                            OFFSET(get<T>, {0x140, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortMOTDWidget
/// Size: 0x0060 (0x0003C0 - 0x000420)
class UFortMOTDWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(UCommonTextBlock*)                         Text_Header                                                 OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Body                                                   OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Close                                                OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UScrollBox*)                               ScrollBox                                                   OFFSET(get<T>, {0x418, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMOTDWidget.HandleClosedClicked
	// void HandleClosedClicked(UCommonButton* Button);                                                                         // [0x2bc3ad0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortMovieWidget
/// Size: 0x0028 (0x000218 - 0x000240)
class UFortMovieWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(UMulticastDelegate)                        OnMediaOpened                                               OFFSET(get<T>, {0x218, 16, 0, 0})
	CMember(UMediaPlayer*)                             MediaPlayer                                                 OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UMediaTexture*)                            MediaTexture                                                OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UMediaSoundComponent*)                     SoundComponent                                              OFFSET(get<T>, {0x238, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMovieWidget.SetMediaSource
	// void SetMediaSource(UMediaSource* InMediaSource);                                                                        // [0x2bc4640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMovieWidget.RequestStopMovie
	// void RequestStopMovie();                                                                                                 // [0x2bc44d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMovieWidget.RequestPlayMovie
	// void RequestPlayMovie(bool bShouldRewind);                                                                               // [0x2bc4440] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMovieWidget.MediaDimensionsUpdated
	// void MediaDimensionsUpdated(float NewWidth, float NewHeight);                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortMovieWidget.HasPlayerForSource
	// bool HasPlayerForSource(UMediaSource* InMediaSource);                                                                    // [0x2bc42c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMovieWidget.GetMediaTexture
	// UMediaTexture* GetMediaTexture();                                                                                        // [0x2bc3aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMovieWidget.GetMediaSoundComponent
	// UMediaSoundComponent* GetMediaSoundComponent();                                                                          // [0x2bc3a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMovieWidget.GetMediaPlayer
	// UMediaPlayer* GetMediaPlayer();                                                                                          // [0x2bc3a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortMtxOfferData
/// Size: 0x01D8 (0x000030 - 0x000208)
class UFortMtxOfferData : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	SMember(FSlateBrush)                               TileImage                                                   OFFSET(getStruct<T>, {0x30, 136, 0, 0})
	SMember(FSlateBrush)                               BadgeImage                                                  OFFSET(getStruct<T>, {0xB8, 136, 0, 0})
	SMember(FSlateBrush)                               DetailsImage                                                OFFSET(getStruct<T>, {0x140, 136, 0, 0})
	CMember(TArray<FFortMtxDetailsAttribute>)          DetailsAttributes                                           OFFSET(get<T>, {0x1C8, 16, 0, 0})
	SMember(FFortMtxGradient)                          Gradient                                                    OFFSET(getStruct<T>, {0x1D8, 32, 0, 0})
	SMember(FLinearColor)                              Background                                                  OFFSET(getStruct<T>, {0x1F8, 16, 0, 0})
};

/// Class /Script/FortniteUI.FortMtxOfferDetailsBase
/// Size: 0x00B0 (0x0003F0 - 0x0004A0)
class UFortMtxOfferDetailsBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(UFortMtxOfferData*)                        OfferDisplayAsset                                           OFFSET(get<T>, {0x3F0, 8, 0, 0})
	SMember(FMtxPackage)                               MtxOffer                                                    OFFSET(getStruct<T>, {0x3F8, 160, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.UpdateMtxOffer
	// void UpdateMtxOffer(UFortMtxStoreOfferBase* MtxOfferWidget);                                                             // [0x2bc9880] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetTileImage
	// FSlateBrush GetTileImage();                                                                                              // [0x2bc8c70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetStoreOfferType
	// EFortMtxStoreOfferType GetStoreOfferType();                                                                              // [0x2bc8b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetSalePrice
	// bool GetSalePrice(FText& SalePrice);                                                                                     // [0x2bc8940] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetOfferId
	// FString GetOfferId();                                                                                                    // [0x2bc8720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetNormalPrice
	// FText GetNormalPrice();                                                                                                  // [0x2bc8620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetName
	// FText GetName();                                                                                                         // [0x2bc82f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetGradient
	// FFortMtxGradient GetGradient();                                                                                          // [0x2bc8150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetDetailsImage
	// FSlateBrush GetDetailsImage();                                                                                           // [0x2bc7ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetDetailsAttributes
	// TArray<FFortMtxDetailsAttribute> GetDetailsAttributes();                                                                 // [0x2bc7f50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetDescription
	// FText GetDescription();                                                                                                  // [0x2bc7e50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetBonusQuantity
	// int32_t GetBonusQuantity();                                                                                              // [0x2bc7d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetBaseQuantity
	// int32_t GetBaseQuantity();                                                                                               // [0x2bc7cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxOfferDetailsBase.GetBackground
	// FLinearColor GetBackground();                                                                                            // [0x2bc7c70] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortMtxStoreOfferBase
/// Size: 0x00A8 (0x000800 - 0x0008A8)
class UFortMtxStoreOfferBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2216;

public:
	CMember(UFortMtxOfferData*)                        OfferDisplayAsset                                           OFFSET(get<T>, {0x800, 8, 0, 0})
	SMember(FMtxPackage)                               MtxOffer                                                    OFFSET(getStruct<T>, {0x808, 160, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetTileImage
	// FSlateBrush GetTileImage();                                                                                              // [0x2bc8d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetStoreOfferType
	// EFortMtxStoreOfferType GetStoreOfferType();                                                                              // [0x2bc8b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetSalePrice
	// bool GetSalePrice(FText& SalePrice);                                                                                     // [0x2bc8a20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetOfferId
	// FString GetOfferId();                                                                                                    // [0x2bc87a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetNormalPrice
	// FText GetNormalPrice();                                                                                                  // [0x2bc86a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetName
	// FText GetName();                                                                                                         // [0x2bc8370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetGradient
	// FFortMtxGradient GetGradient();                                                                                          // [0x2bc8190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetDetailsImage
	// FSlateBrush GetDetailsImage();                                                                                           // [0x2bc80a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetDetailsAttributes
	// TArray<FFortMtxDetailsAttribute> GetDetailsAttributes();                                                                 // [0x2bc7fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetDescription
	// FText GetDescription();                                                                                                  // [0x2bc7ed0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetBonusQuantity
	// int32_t GetBonusQuantity();                                                                                              // [0x2bc7d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetBaseQuantity
	// int32_t GetBaseQuantity();                                                                                               // [0x2bc7d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreOfferBase.GetBackground
	// FLinearColor GetBackground();                                                                                            // [0x2bc7cb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortMtxStoreRootBase
/// Size: 0x0050 (0x0003C0 - 0x000410)
class UFortMtxStoreRootBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UClass*)                                   MtxOfferWidgetClass                                         OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(TArray<FString>)                           StorefrontNames                                             OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(TArray<FMtxPackage>)                       MtxOffers                                                   OFFSET(get<T>, {0x3E0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMtxStoreRootBase.OnStartReadingOffers
	// void OnStartReadingOffers();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortMtxStoreRootBase.OnOffersGenerated
	// void OnOffersGenerated();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortMtxStoreRootBase.OnMtxOfferGenerated
	// void OnMtxOfferGenerated(UFortMtxStoreOfferBase* MtxOffer);                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortMtxStoreRootBase.NoOffersAvailable
	// void NoOffersAvailable();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortMtxStoreRootBase.HandleMtxPackagesRead
	// void HandleMtxPackagesRead(TArray<FMtxPackage>& Offers);                                                                 // [0x2bc8ed0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortMtxStoreRootBase.GetStoreOfferType
	// EFortMtxStoreOfferType GetStoreOfferType(FMtxPackage Package);                                                           // [0x2bc8b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMtxStoreRootBase.GetMtxBreakdown
	// FMtxBreakdown GetMtxBreakdown();                                                                                         // [0x2bc81d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortMtxStoreRootBase.AreOffersLoaded
	// bool AreOffersLoaded();                                                                                                  // [0x2bc7bc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortMulchItemTileButton
/// Size: 0x0000 (0x000830 - 0x000830)
class UFortMulchItemTileButton : public UFortItemTileButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:


	/// Functions
	// Function /Script/FortniteUI.FortMulchItemTileButton.HandleItemChanged_BP
	// void HandleItemChanged_BP(UFortItem* NewItem);                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortMulchConfirmationModalWidget
/// Size: 0x0020 (0x0003F0 - 0x000410)
class UFortMulchConfirmationModalWidget : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(TWeakObjectPtr<UFortItemManagementScreen*>) HostItemManagementScreen                                   OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UCommonTileView*)                          RecycleItemTileView                                         OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UFortItemManagementMulchDetailsPanel*)     RecycleDetailsPanel                                         OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMulchConfirmationModalWidget.UpdateConfirmationModal_BP
	// void UpdateConfirmationModal_BP();                                                                                       // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortMulchConfirmationModalWidget.UpdateConfirmationModal
	// void UpdateConfirmationModal();                                                                                          // [0x2bc9860] Final|Native|Private 
	// Function /Script/FortniteUI.FortMulchConfirmationModalWidget.GetMulchWarnings
	// TMap<EItemRecyclingWarning, int32_t> GetMulchWarnings();                                                                 // [0x2bc8210] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMulchConfirmationModalWidget.CommitMulch
	// void CommitMulch();                                                                                                      // [0x2bc7bf0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortMultiFactorAuthWidget
/// Size: 0x00C0 (0x0003C0 - 0x000480)
class UFortMultiFactorAuthWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	SMember(FText)                                     PromptText                                                  OFFSET(getStruct<T>, {0x3C0, 24, 0, 0})
	CMember(UCommonButton*)                            Button_Continue                                             OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Cancel                                               OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Error                                                  OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(UEditableText*)                            EditText_MultiFactorCode                                    OFFSET(get<T>, {0x3F0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMultiFactorAuthWidget.HandleTextCommitted
	// void HandleTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                            // [0x2bc9040] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortMultiFactorAuthWidget.HandleContinueSelected
	// void HandleContinueSelected(UCommonButton* Button);                                                                      // [0x2bc8e50] Final|Native|Protected 
	// Function /Script/FortniteUI.FortMultiFactorAuthWidget.HandleCancelSelected
	// void HandleCancelSelected(UCommonButton* Button);                                                                        // [0x2bc3bd0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortMultiSizeItemCard
/// Size: 0x0038 (0x000128 - 0x000160)
class UFortMultiSizeItemCard : public UFortItemWidget_NUI
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(EFortItemCardSize)                         BPItemCardSize                                              OFFSET(get<T>, {0x128, 1, 0, 0})
	DMember(bool)                                      ShouldDisplayItemAsReward                                   OFFSET(get<bool>, {0x129, 1, 0, 0})
	DMember(int32_t)                                   QuantityOverride                                            OFFSET(get<int32_t>, {0x12C, 4, 0, 0})
	CMember(EFortItemType)                             EmptyItemType                                               OFFSET(get<T>, {0x130, 1, 0, 0})
	DMember(bool)                                      ShouldSuppressItemTypeIcon                                  OFFSET(get<bool>, {0x131, 1, 0, 0})
	DMember(bool)                                      ShouldSuppressTierMeter                                     OFFSET(get<bool>, {0x132, 1, 0, 0})
	DMember(bool)                                      ShouldCollapseBorderPadding                                 OFFSET(get<bool>, {0x133, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortMultiSizeItemCard.ShouldUseNewItemCards
	// bool ShouldUseNewItemCards();                                                                                            // [0x2bc9830] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortMultiSizeItemCard.SetShouldDisplayItemAsReward
	// void SetShouldDisplayItemAsReward(bool Value);                                                                           // [0x2bc97a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMultiSizeItemCard.SetShouldCollapseBorderPadding
	// void SetShouldCollapseBorderPadding(bool Value);                                                                         // [0x2bc9710] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMultiSizeItemCard.SetQuantityOverride
	// void SetQuantityOverride(int32_t QuantityOverride);                                                                      // [0x2bc9690] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMultiSizeItemCard.SetEmptyItemType
	// void SetEmptyItemType(EFortItemType NewEmptyItemType);                                                                   // [0x2bc9520] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMultiSizeItemCard.SetCardSize
	// void SetCardSize(EFortItemCardSize CardSize);                                                                            // [0x2bc9410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortMultiSizeItemCard.GetCardSize
	// EFortItemCardSize GetCardSize();                                                                                         // [0x2bc7db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortNewAccountWarning
/// Size: 0x0090 (0x0003C0 - 0x000450)
class UFortNewAccountWarning : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(UCommonButton*)                            Button_NewAccount                                           OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Back                                                 OFFSET(get<T>, {0x448, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortNewAccountWarning.HandleNewAccountClicked
	// void HandleNewAccountClicked(UCommonButton* Button);                                                                     // [0x2bc8fa0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortNewAccountWarning.HandleBackClicked
	// void HandleBackClicked(UCommonButton* Button);                                                                           // [0x2bc8dd0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortniteUserInterfaceSettings
/// Size: 0x04B0 (0x000038 - 0x0004E8)
class UFortniteUserInterfaceSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1256;

public:
	SMember(FRuntimeFloatCurve)                        WidthScaleCurve                                             OFFSET(getStruct<T>, {0x38, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        HeightScaleCurve                                            OFFSET(getStruct<T>, {0xB0, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        WidthScaleCurve_iOS_InGame                                  OFFSET(getStruct<T>, {0x128, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        HeightScaleCurve_iOS_InGame                                 OFFSET(getStruct<T>, {0x1A0, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        WidthScaleCurve_iOS_FrontEnd                                OFFSET(getStruct<T>, {0x218, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        HeightScaleCurve_iOS_FrontEnd                               OFFSET(getStruct<T>, {0x290, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        WidthScaleCurve_Android_InGame                              OFFSET(getStruct<T>, {0x308, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        HeightScaleCurve_Android_InGame                             OFFSET(getStruct<T>, {0x380, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        WidthScaleCurve_Android_FrontEnd                            OFFSET(getStruct<T>, {0x3F8, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        HeightScaleCurve_Android_FrontEnd                           OFFSET(getStruct<T>, {0x470, 120, 0, 0})
};

/// Class /Script/FortniteUI.FortBaseCanvasEntity
/// Size: 0x0040 (0x000218 - 0x000258)
class UFortBaseCanvasEntity : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	SMember(FName)                                     NodeID                                                      OFFSET(getStruct<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bConsideredInSizeCalculation                                OFFSET(get<bool>, {0x228, 1, 0, 0})
	DMember(float)                                     MovementMultiplier                                          OFFSET(get<float>, {0x22C, 4, 0, 0})
	SMember(FDataTableRowHandle)                       NodeStyleData                                               OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FVector2D)                                 BasePos                                                     OFFSET(getStruct<T>, {0x248, 8, 0, 0})
	DMember(bool)                                      HasHadBasePosSet                                            OFFSET(get<bool>, {0x250, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortBaseCanvasEntity.Outro
	// void Outro(EFortAnimSpeed Speed);                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortBaseCanvasEntity.Intro
	// void Intro(EFortAnimSpeed Speed);                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortBaseCanvasNode
/// Size: 0x0028 (0x000258 - 0x000280)
class UFortBaseCanvasNode : public UFortBaseCanvasEntity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(UMediaSource*)                             PreviewMediaSource                                          OFFSET(get<T>, {0x258, 8, 0, 0})
	DMember(bool)                                      bShouldHideConnectorsToDependents                           OFFSET(get<bool>, {0x260, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnNodeStateChangedEvent                                     OFFSET(get<T>, {0x268, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortBaseCanvasNode.SelectNode
	// bool SelectNode();                                                                                                       // [0x2bc9360] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseCanvasNode.SelectedChanged
	// void SelectedChanged(bool bEnabled);                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortBaseCanvasNode.Purchase
	// void Purchase();                                                                                                         // [0x2bc9340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseCanvasNode.OnNodeStateChanged__DelegateSignature
	// void OnNodeStateChanged__DelegateSignature(UFortBaseCanvasNode* Node);                                                   // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortBaseCanvasNode.IsPurchaseable
	// bool IsPurchaseable(TArray<EFortHomebaseNodePurchaseRestrictionReason>& OutRestrictionReasons);                          // [0x2bc91c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.IsOwned
	// bool IsOwned();                                                                                                          // [0x2bc9190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.IsLocked
	// bool IsLocked();                                                                                                         // [0x2bc9160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.HandleNodeStateChangedInternal
	// void HandleNodeStateChangedInternal();                                                                                   // [0x2bc9020] Final|Native|Private 
	// Function /Script/FortniteUI.FortBaseCanvasNode.HandleNodeStateChanged
	// void HandleNodeStateChanged();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortBaseCanvasNode.GetPurchaseRestrictionReasonText
	// FText GetPurchaseRestrictionReasonText(EFortHomebaseNodePurchaseRestrictionReason Reason);                               // [0x2bc8880] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortBaseCanvasNode.GetPurchasePercent
	// float GetPurchasePercent();                                                                                              // [0x2bc8850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.GetPreviewMediaSource
	// UMediaSource* GetPreviewMediaSource();                                                                                   // [0x2bc8820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.GetNodeStyleDataCopy
	// bool GetNodeStyleDataCopy(FFortNodeStyleData& Style);                                                                    // [0x2bc8540] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.GetNodeID
	// FName GetNodeID();                                                                                                       // [0x2bc8500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.GetNodeDataCopy
	// bool GetNodeDataCopy(FHomebaseNode& Node);                                                                               // [0x2bc83f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.GetCosts
	// TArray<FFortItemInstanceQuantityPair> GetCosts();                                                                        // [0x2bc7dd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortBaseCanvasNode.DrillDownToNodePage
	// bool DrillDownToNodePage();                                                                                              // [0x2bc7c40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortBaseCanvasNode.DoesDrillDownToCurrentNodePage
	// bool DoesDrillDownToCurrentNodePage();                                                                                   // [0x2bc7c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortNodeCanvas
/// Size: 0x0100 (0x000128 - 0x000228)
class UFortNodeCanvas : public UCanvasPanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FName)                                     NodePageName                                                OFFSET(getStruct<T>, {0x130, 8, 0, 0})
	SMember(FDataTableRowHandle)                       NodeTypeData                                                OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	SMember(FVector2D)                                 OriginForParallax                                           OFFSET(getStruct<T>, {0x148, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortNodeCanvas.PanToNode
	// void PanToNode(FName NodeID, EFortAnimSpeed PanSpeed);                                                                   // [0x2bc9280] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortNodeCanvasEntityInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortNodeCanvasEntityInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteUI.FortNodeCanvasInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortNodeCanvasInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteUI.FortNodePrerequisitesWidget
/// Size: 0x0010 (0x000218 - 0x000228)
class UFortNodePrerequisitesWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FDataTableRowHandle)                       NodeStyleData                                               OFFSET(getStruct<T>, {0x218, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortNodePrerequisitesWidget.ProcessNodePrequisites
	// void ProcessNodePrequisites(FName NodeID);                                                                               // [0x2bcdb90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortNodePrerequisitesWidget.GenerateNodePrerequisiteConnector
	// void GenerateNodePrerequisiteConnector(EFortNodePrerequisiteConnector Connector);                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortNodePrerequisitesWidget.GenerateNodePrerequisite
	// void GenerateNodePrerequisite(FFortUINodePrerequisite NodePrerequisite);                                                 // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortNumericTextBlock
/// Size: 0x0050 (0x000210 - 0x000260)
class UFortNumericTextBlock : public UTextBlock
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(UMulticastDelegate)                        CountFinished                                               OFFSET(get<T>, {0x210, 16, 0, 0})
	DMember(int32_t)                                   StartingValue                                               OFFSET(get<int32_t>, {0x220, 4, 0, 0})
	DMember(int32_t)                                   DestValue                                                   OFFSET(get<int32_t>, {0x224, 4, 0, 0})
	DMember(bool)                                      bUseGrouping                                                OFFSET(get<bool>, {0x228, 1, 0, 0})
	DMember(bool)                                      bAsCurrency                                                 OFFSET(get<bool>, {0x229, 1, 0, 0})
	DMember(float)                                     EaseOutExp                                                  OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     UpdateInterval                                              OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     ShrinkTime                                                  OFFSET(get<float>, {0x234, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortNumericTextBlock.IsInterpolatingNumber
	// bool IsInterpolatingNumber();                                                                                            // [0x2bccff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortNumericTextBlock.InterpolateSet
	// void InterpolateSet(int32_t InValue, float InUpdateLength, float InReportEndEarly);                                      // [0x2bcce70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortNumericTextBlock.GetCurrentValue
	// int32_t GetCurrentValue();                                                                                               // [0x2bcc590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortNumericTextBlock.DirectlySet
	// void DirectlySet(int32_t InValue);                                                                                       // [0x2bcc0d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortOptionsMenu
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class UFortOptionsMenu : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:


	/// Functions
	// Function /Script/FortniteUI.FortOptionsMenu.ShowVideoOptions
	// bool ShowVideoOptions();                                                                                                 // [0x2b73870] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.ShowInputOptions
	// bool ShowInputOptions();                                                                                                 // [0x2b73870] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.ShowControllerOptions
	// bool ShowControllerOptions();                                                                                            // [0x2b73870] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.ShowBrightnessOptions
	// bool ShowBrightnessOptions();                                                                                            // [0x2b73870] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.ShowAccountOptions
	// bool ShowAccountOptions();                                                                                               // [0x2bcde50] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.ShowAccessibilityOptions
	// bool ShowAccessibilityOptions();                                                                                         // [0x2b73870] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.ResetGameOptionsSettings
	// void ResetGameOptionsSettings();                                                                                         // [0x2bcdcb0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.ResetClientHUDSettings
	// void ResetClientHUDSettings();                                                                                           // [0x2bcdc90] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.OnVideoCancel
	// void OnVideoCancel();                                                                                                    // [0x2bcda50] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.OnVideoAccept
	// void OnVideoAccept();                                                                                                    // [0x2bcda30] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.OnResetToDefaults
	// void OnResetToDefaults();                                                                                                // [0x2bcd8f0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.OnReset
	// void OnReset();                                                                                                          // [0x2bcd8d0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.OnApply
	// void OnApply();                                                                                                          // [0x2bcd290] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.NeedsVideoChangeConfirmation
	// bool NeedsVideoChangeConfirmation();                                                                                     // [0x2bcd1d0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.NeedsLanguageChangeConfirmation
	// bool NeedsLanguageChangeConfirmation();                                                                                  // [0x2bcd1a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenu.HandleSettingsSaveComplete
	// void HandleSettingsSaveComplete();                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortOptionsMenu.HandleSettingsErrorMessageClosed
	// void HandleSettingsErrorMessageClosed();                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortOptionsMenu.HandleBenchmarkComplete
	// void HandleBenchmarkComplete();                                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortOptionsMenu.ClearCachedEula
	// void ClearCachedEula();                                                                                                  // [0x2bcc020] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortOptionsMenuInputData
/// Size: 0x00C0 (0x000030 - 0x0000F0)
class UFortOptionsMenuInputData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FText)                                     DisplayText                                                 OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     PrimaryText                                                 OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	SMember(FText)                                     SecondaryText                                               OFFSET(getStruct<T>, {0x68, 24, 0, 0})
	DMember(int32_t)                                   ElementNumber                                               OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	CMember(UCommonTextBlock*)                         TabText                                                     OFFSET(get<T>, {0x88, 8, 0, 0})
	SMember(FFortActionKeyMapping)                     ActionKeyMapping                                            OFFSET(getStruct<T>, {0x90, 96, 0, 0})
};

/// Class /Script/FortniteUI.FortOptionsMenuSetting
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortOptionsMenuSetting : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(ESettingType)                              SettingType                                                 OFFSET(get<T>, {0x210, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortOptionsMenuSetting.TouchVerticalSensitivityValueChanged
	// void TouchVerticalSensitivityValueChanged(float NewValue);                                                               // [0x2bce3e0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.TouchTargetingMultiplierValueChanged
	// void TouchTargetingMultiplierValueChanged(float NewValue);                                                               // [0x2bce360] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.TouchLookSensitivityChanged
	// void TouchLookSensitivityChanged(float NewValue);                                                                        // [0x2bce2e0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.TouchDragScopedSensitivityValueChanged
	// void TouchDragScopedSensitivityValueChanged(float NewValue);                                                             // [0x2bce260] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.TargetingToggleChanged
	// void TargetingToggleChanged(bool bInChecked);                                                                            // [0x2bce1d0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.TargetingMultiplierValueChanged
	// void TargetingMultiplierValueChanged(float NewValue);                                                                    // [0x2bce150] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.TapInteractChanged
	// void TapInteractChanged(bool bInChecked);                                                                                // [0x2bce0c0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.StreamerModeChanged
	// void StreamerModeChanged(bool bInChecked);                                                                               // [0x2bce030] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.SprintToggleChanged
	// void SprintToggleChanged(bool bInChecked);                                                                               // [0x2bcdfa0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.SprintCancelsReloadChanged
	// void SprintCancelsReloadChanged(bool bInChecked);                                                                        // [0x2bcdf10] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.ShowViewerCountChanged
	// void ShowViewerCountChanged(bool bInChecked);                                                                            // [0x2bcde80] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.SettingChanged
	// void SettingChanged(float NewValue);                                                                                     // [0x2bcddd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.ScopedMultiplierValueChanged
	// void ScopedMultiplierValueChanged(float NewValue);                                                                       // [0x2bcdd50] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.SafeZoneChanged
	// void SafeZoneChanged(float NewValue);                                                                                    // [0x2bcdcd0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.RegionChanged
	// void RegionChanged(int32_t NewRegion);                                                                                   // [0x2bcdc10] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.PowerSaverModeChanged
	// void PowerSaverModeChanged(bool bInChecked);                                                                             // [0x2bcdb00] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.PeripheralLightingChanged
	// void PeripheralLightingChanged(bool bInChecked);                                                                         // [0x2bcda70] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnUseTapToShootChanged
	// void OnUseTapToShootChanged(bool bInChecked);                                                                            // [0x2bcd9a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnTurboBuildChanged
	// void OnTurboBuildChanged(bool bInChecked);                                                                               // [0x2bcd910] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnReplayRecordingPreferenceChanged
	// void OnReplayRecordingPreferenceChanged(bool bInChecked);                                                                // [0x2bcd840] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnLargeTeamsReplayRecordingPreferenceChanged
	// void OnLargeTeamsReplayRecordingPreferenceChanged(bool bInChecked);                                                      // [0x2bcd7b0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnHUDScaleChanged
	// void OnHUDScaleChanged(float bInHUDScale);                                                                               // [0x2bcd730] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnGamepadAutoRunChanged
	// void OnGamepadAutoRunChanged(bool bInChecked);                                                                           // [0x2bcd6a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnForceFeedbackChanged
	// void OnForceFeedbackChanged(bool bInChecked);                                                                            // [0x2bcd610] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena
	// void OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChangedAthena(bool bInChecked);                                       // [0x2bcd580] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged
	// void OnFocusOnFirstBuildingPieceWhenQuickbarSwappedChanged(bool bInChecked);                                             // [0x2bcd4f0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnCrossplayPreferenceChanged
	// void OnCrossplayPreferenceChanged(bool bInChecked);                                                                      // [0x2bcd460] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnAutoPickupWeaponsChanged
	// void OnAutoPickupWeaponsChanged(bool bInChecked);                                                                        // [0x2bcd3d0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnAutoOpenDoorsChanged
	// void OnAutoOpenDoorsChanged(bool bInChecked);                                                                            // [0x2bcd340] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnAutoChangeMaterialChanged
	// void OnAutoChangeMaterialChanged(bool bInChecked);                                                                       // [0x2bcd2b0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.OnAimAssistChanged
	// void OnAimAssistChanged(bool bInChecked);                                                                                // [0x2bcd200] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.MouseSensitivityChanged
	// void MouseSensitivityChanged(float NewValue);                                                                            // [0x2bcd120] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.LookInversionChanged
	// void LookInversionChanged(bool bInChecked);                                                                              // [0x2bcd090] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.LanguageChanged
	// void LanguageChanged(int32_t NewMode);                                                                                   // [0x2bcd010] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.InvertAcceptAndBackChanged
	// void InvertAcceptAndBackChanged(int32_t NewMode);                                                                        // [0x2bccf70] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetUseTapToShoot
	// bool GetUseTapToShoot();                                                                                                 // [0x2bcce40] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetTurboBuild
	// bool GetTurboBuild();                                                                                                    // [0x2bcce10] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetTouchVerticalSensitivityValue
	// float GetTouchVerticalSensitivityValue();                                                                                // [0x2bccde0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetTouchTargetingMultiplierValue
	// float GetTouchTargetingMultiplierValue();                                                                                // [0x2bccdb0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetTouchLookSensitivityValue
	// float GetTouchLookSensitivityValue();                                                                                    // [0x2bccd80] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetTouchDragScopedSensitivityValue
	// float GetTouchDragScopedSensitivityValue();                                                                              // [0x2bccd50] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetTargetingToggleState
	// bool GetTargetingToggleState();                                                                                          // [0x2bccd20] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetTargetingMultiplierValue
	// float GetTargetingMultiplierValue();                                                                                     // [0x2bcccf0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetTapInteractState
	// bool GetTapInteractState();                                                                                              // [0x2bcccc0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetStreamerModeEnabled
	// bool GetStreamerModeEnabled();                                                                                           // [0x2bccc90] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetSprintToggleState
	// bool GetSprintToggleState();                                                                                             // [0x2bccc60] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetSprintCancelsReloadState
	// bool GetSprintCancelsReloadState();                                                                                      // [0x2bccc30] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetShowViewerCountEnabled
	// bool GetShowViewerCountEnabled();                                                                                        // [0x2bccc00] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetShowHeroHeadAccessories
	// bool GetShowHeroHeadAccessories();                                                                                       // [0x2bccbd0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetShowHeroBackpack
	// bool GetShowHeroBackpack();                                                                                              // [0x2bccba0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetSettingValue
	// float GetSettingValue();                                                                                                 // [0x2bccb70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetSettingDisplayNames
	// TArray<FText> GetSettingDisplayNames();                                                                                  // [0x2bccab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetScopedMultiplierValue
	// float GetScopedMultiplierValue();                                                                                        // [0x2bcca80] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetSafeZoneValue
	// float GetSafeZoneValue();                                                                                                // [0x2bcca50] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetReplayRecordingEnabled
	// bool GetReplayRecordingEnabled();                                                                                        // [0x2bcca20] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetRegionDisplayNames
	// TArray<FText> GetRegionDisplayNames();                                                                                   // [0x2bcc960] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetPowerSaverMode
	// bool GetPowerSaverMode();                                                                                                // [0x2bcc930] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetPossibleLanguages
	// TArray<FText> GetPossibleLanguages();                                                                                    // [0x2bcc870] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetPeripheralLightingEnabled
	// bool GetPeripheralLightingEnabled();                                                                                     // [0x2bcc840] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetMouseSensitivityValue
	// float GetMouseSensitivityValue();                                                                                        // [0x2bcc810] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetLookInversionState
	// bool GetLookInversionState();                                                                                            // [0x2bcc7e0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetLargeTeamsReplayRecordingEnabled
	// bool GetLargeTeamsReplayRecordingEnabled();                                                                              // [0x2bcc7b0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetInvertAcceptAndBack
	// bool GetInvertAcceptAndBack();                                                                                           // [0x2bcc780] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetHUDScale
	// float GetHUDScale();                                                                                                     // [0x2bcc750] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetGamepadTargetingMultiplierValue
	// float GetGamepadTargetingMultiplierValue();                                                                              // [0x2bcc720] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetGamepadScopedMultiplierValue
	// float GetGamepadScopedMultiplierValue();                                                                                 // [0x2bcc6f0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetGamepadLookSensitivityValue
	// FVector2D GetGamepadLookSensitivityValue();                                                                              // [0x2bcc6b0] Final|Native|Private|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetGamepadAutoRunState
	// bool GetGamepadAutoRunState();                                                                                           // [0x2bcc680] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetForceFeedbackState
	// bool GetForceFeedbackState();                                                                                            // [0x2bcc650] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena
	// bool GetFocusOnFirstBuildingPieceWhenQuickbarSwappedStateAthena();                                                       // [0x2bcc620] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState
	// bool GetFocusOnFirstBuildingPieceWhenQuickbarSwappedState();                                                             // [0x2bcc5f0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetFirstPersonCameraState
	// bool GetFirstPersonCameraState();                                                                                        // [0x2bcc5c0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetCurrentRegion
	// int32_t GetCurrentRegion();                                                                                              // [0x2bcc560] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetCurrentLanguage
	// int32_t GetCurrentLanguage();                                                                                            // [0x2bcc530] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetCrossplayPreference
	// bool GetCrossplayPreference();                                                                                           // [0x2bcc500] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetConsoleUnlockedFPSState
	// bool GetConsoleUnlockedFPSState();                                                                                       // [0x2bcc4d0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetAutoPickupWeapons
	// bool GetAutoPickupWeapons();                                                                                             // [0x2bcc4a0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetAutoOpenDoors
	// bool GetAutoOpenDoors();                                                                                                 // [0x2bcc470] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetAutoEquipState
	// bool GetAutoEquipState();                                                                                                // [0x2bcc440] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetAutoChangeMaterial
	// bool GetAutoChangeMaterial();                                                                                            // [0x2bcc410] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GetAimAssistState
	// bool GetAimAssistState();                                                                                                // [0x2bcc3e0] Final|Native|Private|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GamepadTargetingMultiplierValueChanged
	// void GamepadTargetingMultiplierValueChanged(float NewValue);                                                             // [0x2bcc360] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GamepadScopedMultiplierValueChanged
	// void GamepadScopedMultiplierValueChanged(float NewValue);                                                                // [0x2bcc2e0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GamepadLookSensitivityYChanged
	// void GamepadLookSensitivityYChanged(float NewValue);                                                                     // [0x2bcc260] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.GamepadLookSensitivityXChanged
	// void GamepadLookSensitivityXChanged(float NewValue);                                                                     // [0x2bcc1e0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.FirstPersonCameraChanged
	// void FirstPersonCameraChanged(bool bInChecked);                                                                          // [0x2bcc150] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.ConsoleUnlockedFPSChanged
	// void ConsoleUnlockedFPSChanged(bool bInChecked);                                                                         // [0x2bcc040] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortOptionsMenuSetting.AutoEquipChanged
	// void AutoEquipChanged(bool bInChecked);                                                                                  // [0x2bcbf90] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSettingInfo
/// Size: 0x0038 (0x000028 - 0x000060)
class UFortSettingInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     OptionDisplayText                                           OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     OptionHoverText                                             OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	CMember(ESettingDisplayType)                       DisplayType                                                 OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(ESettingType)                              SettingType                                                 OFFSET(get<T>, {0x59, 1, 0, 0})
	DMember(bool)                                      SliderUseDecimal                                            OFFSET(get<bool>, {0x5A, 1, 0, 0})
	DMember(bool)                                      SliderMinZero                                               OFFSET(get<bool>, {0x5B, 1, 0, 0})
};

/// Class /Script/FortniteUI.FortOutpostStorageItemPicker
/// Size: 0x0068 (0x000278 - 0x0002E0)
class UFortOutpostStorageItemPicker : public UFortItemPickerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:


	/// Functions
	// Function /Script/FortniteUI.FortOutpostStorageItemPicker.UseFilters
	// void UseFilters(TArray<EFortItemType> ItemTypes);                                                                        // [0x2bd3220] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortOutpostStorageItemPicker.UseFilter
	// void UseFilter(EFortItemType ItemType);                                                                                  // [0x2bd31a0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortPartyFinderBase
/// Size: 0x0020 (0x0003F0 - 0x000410)
class UFortPartyFinderBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UCommonBorder*)                            CommonBorder_PartyServicesDegredationWarning                OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UCommonTreeView*)                          TreeView_Social                                             OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Close                                                OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPartyFinderBase.RefreshSocialList
	// void RefreshSocialList(TArray<UFortSocialItem*>& SocialItems);                                                           // [0x2bd2cd0] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.FortPartyFinderBase.OnCloseButtonClicked
	// void OnCloseButtonClicked(UCommonButton* ClickedButton);                                                                 // [0x2bd2b30] Final|Native|Private 
	// Function /Script/FortniteUI.FortPartyFinderBase.HandleSocialListChanged
	// void HandleSocialListChanged(TArray<UFortSocialItem*>& SocialItems);                                                     // [0x2bd2930] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.FortPartyFinderBase.HandlePartyServicesDegredationChanged
	// void HandlePartyServicesDegredationChanged(bool bAreServicesDegredated);                                                 // [0x2bd28a0] Final|Native|Private 
	// Function /Script/FortniteUI.FortPartyFinderBase.HandleGetChildrenForCategory
	// TArray<UObject*> HandleGetChildrenForCategory(UObject* Item);                                                            // [0x2bd27c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortPartyFinderBase.ClosePartyFinder
	// void ClosePartyFinder();                                                                                                 // [0x2bd1d70] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortPartyTreeItemBase
/// Size: 0x0018 (0x000800 - 0x000818)
class UFortPartyTreeItemBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	CMember(UFortSocialItem*)                          SocialItem                                                  OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPartyTreeItemBase.OnSocialItemSet
	// void OnSocialItemSet();                                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortPartyTreeItemBase.ExpansionChanged
	// void ExpansionChanged(bool bExpanded);                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortPerksWidget_NUI
/// Size: 0x0098 (0x000210 - 0x0002A8)
class UFortPerksWidget_NUI : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(UFortHero*)                                Hero                                                        OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(EFortPerksWidgetState)                     State                                                       OFFSET(get<T>, {0x218, 1, 0, 0})
	CMember(UFortHero*)                                EvolutionOption                                             OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UClass*)                                   PerkTierWidgetType                                          OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UClass*)                                   PerkWidgetType                                              OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UFortTooltipContext*)                      TooltipContext                                              OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UCommonLoadGuard*)                         PerksListLoadGuard                                          OFFSET(get<T>, {0x240, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPerksWidget_NUI.SetState
	// void SetState(EFortPerksWidgetState InState, UFortHero* InEvolutionOption);                                              // [0x2bd2ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerksWidget_NUI.SetHero
	// void SetHero(UFortHero* InHero);                                                                                         // [0x2bd2e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerksWidget_NUI.ProcessPerkTiers
	// void ProcessPerkTiers();                                                                                                 // [0x2bd2c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerksWidget_NUI.ProcessPerks
	// void ProcessPerks();                                                                                                     // [0x2bd2cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerksWidget_NUI.ProcessActiveAbilityPerksAsync
	// void ProcessActiveAbilityPerksAsync();                                                                                   // [0x2bd2c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerksWidget_NUI.OnStateChanged
	// void OnStateChanged();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortPerksWidget_NUI.OnHeroChanged
	// void OnHeroChanged();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortPerksWidget_NUI.OnGeneratePerkTier
	// void OnGeneratePerkTier(FFortUIPerkTier FortPerkTier, UFortPerkTierWidget_NUI* PerkTierWidget);                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortPerksWidget_NUI.OnGeneratePerk
	// void OnGeneratePerk(FFortUIPerk FortPerk, UFortPerkWidget_NUI* PerkWidget);                                              // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortPerkTierWidget_NUI
/// Size: 0x0050 (0x000210 - 0x000260)
class UFortPerkTierWidget_NUI : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	SMember(FFortUIPerkTier)                           FortPerkTier                                                OFFSET(getStruct<T>, {0x218, 32, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPerkTierWidget_NUI.ProcessPerks
	// void ProcessPerks();                                                                                                     // [0x2bd2c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerkTierWidget_NUI.OnGeneratePerk
	// void OnGeneratePerk(FFortUIPerk Perk, UFortPerkWidget_NUI* PerkWidget);                                                  // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortPerkWidget_NUI
/// Size: 0x00C8 (0x000210 - 0x0002D8)
class UFortPerkWidget_NUI : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	SMember(FFortUIPerk)                               Perk                                                        OFFSET(getStruct<T>, {0x218, 152, 0, 0})
	CMember(UFortTooltipContext*)                      CachedTooltipContext                                        OFFSET(get<T>, {0x2B8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPerkWidget_NUI.SetTooltipContext
	// void SetTooltipContext(UFortTooltipContext* InTooltipContext);                                                           // [0x2bd2fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.RequestTooltipDescription
	// void RequestTooltipDescription();                                                                                        // [0x2bd2da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.RequestCombinedTooltipDescription
	// void RequestCombinedTooltipDescription();                                                                                // [0x2bd2d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.OnTooltipDescriptionReady
	// void OnTooltipDescriptionReady(TArray<FText>& DescriptionList);                                                          // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.OnPerkUpdated
	// void OnPerkUpdated();                                                                                                    // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.OnCombinedTooltipDescriptionReady
	// void OnCombinedTooltipDescriptionReady(FText& Description);                                                              // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.IsTierPerk
	// bool IsTierPerk();                                                                                                       // [0x2bd2b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.IsPerkUnlocked
	// bool IsPerkUnlocked();                                                                                                   // [0x2bd2aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.IsPerkHighlighted
	// bool IsPerkHighlighted();                                                                                                // [0x2bd2a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.IsPerkEmpty
	// bool IsPerkEmpty();                                                                                                      // [0x2bd2a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.HasAbility
	// bool HasAbility();                                                                                                       // [0x2bd29e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.GetTooltipTitle
	// FText GetTooltipTitle();                                                                                                 // [0x2bd2740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.GetTooltipContext
	// UFortTooltipContext* GetTooltipContext();                                                                                // [0x2bd2710] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.GetSupportBonusType
	// EFortSupportBonusType GetSupportBonusType();                                                                             // [0x2bd26e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.GetRequiredLevel
	// int32_t GetRequiredLevel();                                                                                              // [0x2bd26b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.GetPerkTier
	// TEnumAsByte<EFortItemTier> GetPerkTier();                                                                                // [0x2bd21f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPerkWidget_NUI.GetIcon
	// bool GetIcon(FSlateBrush& Brush);                                                                                        // [0x2bd1fc0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortPickerContext
/// Size: 0x0180 (0x000028 - 0x0001A8)
class UFortPickerContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 424;

public:
	CMember(UMulticastDelegate)                        OnShowPicker                                                OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPickerConfirm                                             OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPickerCancel                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPickerOptionMoved                                         OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPickerOptionChosen                                        OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPickerRefreshItems                                        OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FItemDefOptionData>)                CustomPickerMenuItems                                       OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FSquadQuickChatOptionData>)         SquadChatMenuItems                                          OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TMap<UFortItemDefinition*, float>)         TrackedTrapsMap                                             OFFSET(get<T>, {0xC0, 80, 0, 0})
	CMember(UFortPickerData*)                          PickerData                                                  OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TArray<UFortSchematicItem*>)               AccountTrapSchematics                                       OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<FFortPickerTemporaryWheel>)         AvailableWheels                                             OFFSET(get<T>, {0x130, 16, 0, 0})
	DMember(int32_t)                                   CurrentWheelIndex                                           OFFSET(get<int32_t>, {0x140, 4, 0, 0})
	CMember(TMap<UObject*, int32_t>)                   ConsumableStackCount                                        OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPickerContext.UseLeftThumbstick
	// bool UseLeftThumbstick();                                                                                                // [0x2bd3300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPickerContext.SwitchToAdjacentWheel
	// void SwitchToAdjacentWheel(int32_t SelectionDirection);                                                                  // [0x2bd3120] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.ShowRadialPickerMenu
	// void ShowRadialPickerMenu(EFortPickerToDisplay PickerType, int32_t WheelIndex, UObject* ContextObject);                  // [0x2bd3020] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.SetFortPickerData
	// void SetFortPickerData(UFortPickerData* Data);                                                                           // [0x2bd2de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.RestoreInputAxes
	// void RestoreInputAxes();                                                                                                 // [0x2bd2dc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.PickerOptionAccepted
	// void PickerOptionAccepted(int32_t Option);                                                                               // [0x2bd2bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.PickerCanceled
	// void PickerCanceled();                                                                                                   // [0x2bd2bb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.GetRadialPickerOptionItem
	// void GetRadialPickerOptionItem(int32_t Index, UFortItem*& Item, bool& bOptionEnabled);                                   // [0x2bd2590] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPickerContext.GetRadialPickerOptionImageAndLabel
	// void GetRadialPickerOptionImageAndLabel(int32_t Index, FText& Label, FSlateBrush& Brush, bool& bOptionEnabled);          // [0x2bd2310] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPickerContext.GetPickerWheelAdjacency
	// void GetPickerWheelAdjacency(bool& bCanPageLeft, bool& bCanPageRight);                                                   // [0x2bd2230] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.GetNumPickerOptions
	// int32_t GetNumPickerOptions();                                                                                           // [0x2bd21c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPickerContext.GetListPickerOption
	// UFortItem* GetListPickerOption(int32_t Index);                                                                           // [0x2bd2130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPickerContext.GetCurrentWheelIndex
	// int32_t GetCurrentWheelIndex();                                                                                          // [0x2bd1fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPickerContext.GetCurrentPickerDisplayName
	// FText GetCurrentPickerDisplayName();                                                                                     // [0x2bd1f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.GetAdjacentPickerWheelInformation
	// void GetAdjacentPickerWheelInformation(int32_t Direction, FText& AdjacentTitle, bool& bCanPageThisDirection);            // [0x2bd1dc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortPickerContext.DoesRadialCloseOnRelease
	// bool DoesRadialCloseOnRelease();                                                                                         // [0x2bd1d90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortPickerData
/// Size: 0x00C0 (0x000030 - 0x0000F0)
class UFortPickerData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(TArray<FBuildingCategoryOptionData>)       BuildingCategories                                          OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FBuildingOptionData>)               WallOptions                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FBuildingOptionData>)               FloorOptions                                                OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FBuildingOptionData>)               StairOptions                                                OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FBuildingOptionData>)               RoofOptions                                                 OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FItemCategoryOptionData>)           TrapCategories                                              OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FItemCategoryOptionData>)           WeaponCategories                                            OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FRadialOptionData>)                 SocialCategories                                            OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FChatOptionData>)                   ChatOptions                                                 OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<UAthenaQuickChatBank*>)             SquadChatOptionBanks                                        OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FMapNoteOptionData>)                MapNoteOptions                                              OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FEmoteOptionData>)                  EmoteOptions                                                OFFSET(get<T>, {0xE0, 16, 0, 0})
};

/// Class /Script/FortniteUI.FortPlayedBeforeSelect
/// Size: 0x0060 (0x0003C0 - 0x000420)
class UFortPlayedBeforeSelect : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(UCommonButton*)                            Button_Yes                                                  OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UCommonButton*)                            Button_No                                                   OFFSET(get<T>, {0x410, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPlayedBeforeSelect.HandleYesClicked
	// void HandleYesClicked(UCommonButton* Button);                                                                            // [0x2bd7670] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayedBeforeSelect.HandleNoClicked
	// void HandleNoClicked(UCommonButton* Button);                                                                             // [0x2bd6fa0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortPlayerProfileBannerEditor
/// Size: 0x0190 (0x000210 - 0x0003A0)
class UFortPlayerProfileBannerEditor : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(ESaveProfileForBanners)                    ProfileToSave                                               OFFSET(get<T>, {0x210, 4, 0, 0})
	SMember(FFortSwipeDetector)                        SwipeDetector                                               OFFSET(getStruct<T>, {0x220, 320, 0, 0})
	CMember(TArray<FName>)                             IconCategories                                              OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(TArray<FName>)                             ColorCategories                                             OFFSET(get<T>, {0x370, 16, 0, 0})
	SMember(FName)                                     ChosenIcon                                                  OFFSET(getStruct<T>, {0x380, 8, 0, 0})
	SMember(FName)                                     ChosenIconCategory                                          OFFSET(getStruct<T>, {0x388, 8, 0, 0})
	SMember(FName)                                     ChosenColor                                                 OFFSET(getStruct<T>, {0x390, 8, 0, 0})
	SMember(FName)                                     ChosenColorCategory                                         OFFSET(getStruct<T>, {0x398, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPlayerProfileBannerEditor.SetBannerIcon
	// void SetBannerIcon(FName& Icon);                                                                                         // [0x2bd7890] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortPlayerProfileBannerEditor.SetBannerColor
	// void SetBannerColor(FName& Color);                                                                                       // [0x2bd7800] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortPlayerProfileBannerEditor.RefreshBannerEditor
	// void RefreshBannerEditor();                                                                                              // [0x2b87720] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortPlayerProfileBannerEditor.OnShowPreviousCategory
	// void OnShowPreviousCategory();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortPlayerProfileBannerEditor.OnShowNextCategory
	// void OnShowNextCategory();                                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortPlayerProfileBannerEditor.HandleEditorDeactivated
	// void HandleEditorDeactivated();                                                                                          // [0x2bd6d50] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortPlayerProfileBannerEditor.HandleEditorActivated
	// void HandleEditorActivated();                                                                                            // [0x2bd6d30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortPlayerProfileBannerEditor.CommitChosenIconAndColor
	// void CommitChosenIconAndColor();                                                                                         // [0x2bd6660] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortPlayerProfileBannerEditorTile
/// Size: 0x0010 (0x000800 - 0x000810)
class UFortPlayerProfileBannerEditorTile : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                Item                                                        OFFSET(get<T>, {0x808, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortPlayerProfileModalWidget
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class UFortPlayerProfileModalWidget : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
};

/// Class /Script/FortniteUI.FortPlayerTrackerBase
/// Size: 0x0040 (0x000210 - 0x000250)
class UFortPlayerTrackerBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FUniqueNetIdRepl)                          UniqueId                                                    OFFSET(getStruct<T>, {0x218, 40, 0, 0})
	CMember(TWeakObjectPtr<UFortRegisteredPlayerInfo*>) PlayerInfo                                                 OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(int32_t)                                   PartyIndex                                                  OFFSET(get<int32_t>, {0x248, 4, 0, 0})
	DMember(bool)                                      IsLocalPlayer                                               OFFSET(get<bool>, {0x24C, 1, 0, 0})
	DMember(bool)                                      ShouldDeferAttributesChangedEvents                          OFFSET(get<bool>, {0x24D, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPlayerTrackerBase.UpdateBasedOnId
	// void UpdateBasedOnId();                                                                                                  // [0x2bd7e50] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.SetUniqueIdInternal
	// void SetUniqueIdInternal(FUniqueNetIdRepl& InUniqueId);                                                                  // [0x2bd7d30] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.SetUniqueId
	// void SetUniqueId(FUniqueNetIdRepl& InUniqueId);                                                                          // [0x2bd7c30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.SetTeamMember
	// void SetTeamMember(int32_t InPlayerIndex);                                                                               // [0x2bd7b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.ResetPartyEvents
	// void ResetPartyEvents();                                                                                                 // [0x2bd77e0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.ReRegisterAttributeChangedDelegates
	// void ReRegisterAttributeChangedDelegates();                                                                              // [0x2bd77a0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.RegisterAttributeChangedDelegates
	// void RegisterAttributeChangedDelegates();                                                                                // [0x2bd77c0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.OnPlayerInfoChanged
	// void OnPlayerInfoChanged(FFortTeamMemberInfo NewInfo);                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.OnPlayerAttributesChanged
	// void OnPlayerAttributesChanged();                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HasModifiedStats
	// bool HasModifiedStats();                                                                                                 // [0x2bd76f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandleTooltipAttributeChanged
	// void HandleTooltipAttributeChanged();                                                                                    // [0x2bd7650] Final|Native|Private 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandleTeamMemberStateChangedId
	// void HandleTeamMemberStateChangedId(FFortTeamMemberInfo NewInfo);                                                        // [0x2bd75b0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandleTeamMemberStateChanged
	// void HandleTeamMemberStateChanged(FFortTeamMemberInfo NewInfo);                                                          // [0x2bd7510] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandleTeamMemberRemoved
	// void HandleTeamMemberRemoved(int32_t RemovedIndex);                                                                      // [0x2bd7490] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandleTeamMemberAdded
	// void HandleTeamMemberAdded(FFortTeamMemberInfo NewInfo);                                                                 // [0x2bd7510] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandlePartyLeft
	// void HandlePartyLeft();                                                                                                  // [0x2bd7250] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandleOnPlayerIdUpdated
	// void HandleOnPlayerIdUpdated(FUniqueNetIdRepl& NewInfo);                                                                 // [0x2bd7150] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandleOnLocalPlayerInfoUpdated
	// void HandleOnLocalPlayerInfoUpdated(FFortTeamMemberInfo& NewInfo);                                                       // [0x2bd70a0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.HandleDelayedOnPlayerAttributesChanged
	// void HandleDelayedOnPlayerAttributesChanged();                                                                           // [0x2bd6d10] Final|Native|Private 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetTeamTech
	// int32_t GetTeamTech();                                                                                                   // [0x2bd6bd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetTeamResistance
	// int32_t GetTeamResistance();                                                                                             // [0x2bd6ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetTeamOffense
	// int32_t GetTeamOffense();                                                                                                // [0x2bd6b70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetTeamFortitude
	// int32_t GetTeamFortitude();                                                                                              // [0x2bd6b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetModifiedHomebaseRating
	// bool GetModifiedHomebaseRating(int32_t& Rating, float& ProgressFraction);                                                // [0x2bd68f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetHomebaseRating
	// bool GetHomebaseRating(int32_t& Rating, float& ProgressFraction);                                                        // [0x2bd6800] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetBuffedTech
	// int32_t GetBuffedTech();                                                                                                 // [0x2bd67d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetBuffedResistance
	// int32_t GetBuffedResistance();                                                                                           // [0x2bd67a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetBuffedOffense
	// int32_t GetBuffedOffense();                                                                                              // [0x2bd6770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetBuffedFortitude
	// int32_t GetBuffedFortitude();                                                                                            // [0x2bd6740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetBaseTech
	// int32_t GetBaseTech();                                                                                                   // [0x2bd6710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetBaseResistance
	// int32_t GetBaseResistance();                                                                                             // [0x2bd66e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetBaseOffense
	// int32_t GetBaseOffense();                                                                                                // [0x2bd66b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortPlayerTrackerBase.GetBaseFortitude
	// int32_t GetBaseFortitude();                                                                                              // [0x2bd6680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortPrivacyBase
/// Size: 0x0080 (0x0003F0 - 0x000470)
class UFortPrivacyBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(UMulticastDelegate)                        OnPrivacyChanged                                            OFFSET(get<T>, {0x3F0, 16, 0, 0})
	CMember(UCommonButton*)                            AllowFriendsOfFriendsButton                                 OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UPanelWidget*)                             AllowFriendsOfFriendsContainer                              OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UCommonButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(TMap<UCommonButton*, EPartyType>)          PrivacyButtonMap                                            OFFSET(get<T>, {0x418, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPrivacyBase.SetTencentBuild
	// void SetTencentBuild(bool bInIsTencentBuild);                                                                            // [0x2bd7ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPrivacyBase.HandlePrivacyButtonSelected
	// void HandlePrivacyButtonSelected(UCommonButton* SelectedPrivacyButton, int32_t ButtonIndex);                             // [0x2bd7270] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPrivacyBase.HandleAllowFriendsButtonClicked
	// void HandleAllowFriendsButtonClicked(UCommonButton* SelectedPrivacyButton);                                              // [0x2bd6c00] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPrivacyBase.ApplyPrivacySetting
	// void ApplyPrivacySetting();                                                                                              // [0x2bd6640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortPrivacyBase.AddPrivacyButton
	// void AddPrivacyButton(UCommonButton* PrivacyButton, EPartyType PartyType);                                               // [0x2bd6580] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortPurchaseHistoryEntry
/// Size: 0x0028 (0x000800 - 0x000828)
class UFortPurchaseHistoryEntry : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2088;

public:
	CMember(UPurchaseHistoryEntryWrapper*)             EntryWrapper                                                OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Name                                                   OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Cost                                                   OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(UFortMultiSizeItemCard*)                   PurchaseCard                                                OFFSET(get<T>, {0x820, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPurchaseHistoryEntry.SetRefundState
	// void SetRefundState(FText& PurchaseText, EItemRefundability Refundability);                                              // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortPurchaseHistoryEntry.SetPurchaseText
	// void SetPurchaseText(FText& PurchaseText, bool bHasBeenRefunded);                                                        // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.PurchaseHistoryEntryWrapper
/// Size: 0x0050 (0x000028 - 0x000078)
class UPurchaseHistoryEntryWrapper : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FMtxPurchaseHistoryEntry)                  PurchaseEntry                                               OFFSET(getStruct<T>, {0x28, 64, 0, 0})
	CMember(TArray<UFortItemDefinition*>)              ItemDefinitions                                             OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/FortniteUI.FortPurchaseHistoryScreen
/// Size: 0x0070 (0x0003C0 - 0x000430)
class UFortPurchaseHistoryScreen : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(UClass*)                                   RefundConfirmationClass                                     OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(UFortRefundConfirmation*)                  RefundConfirmationWidget                                    OFFSET(get<T>, {0x3C8, 8, 0, 0})
	SMember(FDataTableRowHandle)                       BackButtonRowHandle                                         OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	CMember(TArray<UPurchaseHistoryEntryWrapper*>)     PurchaseHistoryEntries                                      OFFSET(get<T>, {0x3E0, 16, 0, 0})
	CMember(UPurchaseHistoryEntryWrapper*)             SelectedEntry                                               OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UCommonListView*)                          ListView_Purchases                                          OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UCommonBorder*)                            Border_Popup                                                OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UFortItemInfoWidget*)                      ItemInfoWidget                                              OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Refund                                               OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Desc                                                   OFFSET(get<T>, {0x420, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortPurchaseHistoryScreen.OnItemRefresh
	// void OnItemRefresh(FMtxPurchaseHistory PurchaseHistory);                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortPurchaseHistoryScreen.HandleRequestRefund
	// void HandleRequestRefund(UCommonButton* Button);                                                                         // [0x2bd7410] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPurchaseHistoryScreen.HandleItemSelected
	// void HandleItemSelected(UObject* Item, bool bSelected);                                                                  // [0x2bd6df0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortPurchaseHistoryScreen.HandleBackActionCommitted
	// void HandleBackActionCommitted(bool& bPassThrough);                                                                      // [0x2bd6c80] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FortniteUI.FortPvPMinimapWidget
/// Size: 0x0020 (0x000218 - 0x000238)
class UFortPvPMinimapWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/FortniteUI.FortQuestExpiresWidget
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortQuestExpiresWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(TWeakObjectPtr<UFortQuestItem*>)           Item                                                        OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuestExpiresWidget.SetData
	// void SetData(UFortQuestItem* InItem);                                                                                    // [0x2b87b00] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestExpiresWidget.OnQuestExpirationUpdated
	// void OnQuestExpirationUpdated();                                                                                         // [0x2b87720] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortQuestMapDetailsPanel
/// Size: 0x0000 (0x000210 - 0x000210)
class UFortQuestMapDetailsPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FortniteUI.FortQuestMapNodeLayout
/// Size: 0x0050 (0x0003F0 - 0x000440)
class UFortQuestMapNodeLayout : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(UCommonButtonGroup*)                       QuestButtonGroup                                            OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuestMapNodeLayout.SetRewardImageWidget
	// void SetRewardImageWidget(UImage* Value);                                                                                // [0x2bd7aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapNodeLayout.SetLayoutPanel
	// void SetLayoutPanel(UPanelWidget* Value);                                                                                // [0x2bd7920] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapNodeLayout.HandleQuestButtonSelected
	// void HandleQuestButtonSelected(UCommonButton* SelectedQuestButton, int32_t ButtonIndex);                                 // [0x2bd7350] Final|Native|Private 
	// Function /Script/FortniteUI.FortQuestMapNodeLayout.GetQuestPageData
	// FFortQuestMapPage GetQuestPageData();                                                                                    // [0x2bd6ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortQuestMapQuestTile
/// Size: 0x0030 (0x000210 - 0x000240)
class UFortQuestMapQuestTile : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(int32_t)                                   QuestTileIndex                                              OFFSET(get<int32_t>, {0x210, 4, 0, 0})
	CMember(UCommonButton*)                            QuestButton                                                 OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuestMapQuestTile.HandleSelectedChange
	// void HandleSelectedChange(bool Selected);                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestMapQuestTile.HandleQuestDataChangedBP
	// void HandleQuestDataChangedBP();                                                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestMapQuestTile.HandleQuestButtonHovered
	// void HandleQuestButtonHovered();                                                                                         // [0x2bd7330] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapQuestTile.GetQuestNodeData
	// FFortQuestMapNode GetQuestNodeData();                                                                                    // [0x2bd6a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortQuestMapScreen
/// Size: 0x0030 (0x0003C0 - 0x0003F0)
class UFortQuestMapScreen : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(UFortQuestMapViewer*)                      QuestMapViewer                                              OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(UDataTable*)                               BlueprintTestMapDataTable                                   OFFSET(get<T>, {0x3C8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuestMapScreen.ToggleQuestMapState
	// void ToggleQuestMapState();                                                                                              // [0x2bd7e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapScreen.SetQuestMapViewer
	// void SetQuestMapViewer(UFortQuestMapViewer* Value);                                                                      // [0x2bd7a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapScreen.SetDisplayPanel
	// void SetDisplayPanel();                                                                                                  // [0x114da70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapScreen.HandleSelectedQuestChangedBP
	// void HandleSelectedQuestChangedBP(UFortQuestItemDefinition* QuestDef);                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestMapScreen.HandleMapViewerSelectedQuestIndexChanged
	// void HandleMapViewerSelectedQuestIndexChanged();                                                                         // [0x2bd6f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapScreen.HandleMapViewerNavigationRequest
	// void HandleMapViewerNavigationRequest(EViewerNavigationDirection Direction);                                             // [0x2bd6f00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortQuestMapViewer
/// Size: 0x0040 (0x000350 - 0x000390)
class UFortQuestMapViewer : public UFortCampaignMap
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:


	/// Functions
	// Function /Script/FortniteUI.FortQuestMapViewer.SetQuestMapNodeLayout
	// void SetQuestMapNodeLayout(UFortQuestMapNodeLayout* Value);                                                              // [0x2bd79a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapViewer.PlayLayoutOutroAnimation
	// void PlayLayoutOutroAnimation(EViewerNavigationDirection TravelDirection);                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestMapViewer.PlayLayoutFadeInAnimation
	// void PlayLayoutFadeInAnimation();                                                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestMapViewer.NavigateToPage
	// void NavigateToPage(EViewerNavigationDirection Direction);                                                               // [0x2bd7720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapViewer.HandleQuestMapDataChangedBP
	// void HandleQuestMapDataChangedBP();                                                                                      // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestMapViewer.HandleLayoutSelectedIndexChanged
	// void HandleLayoutSelectedIndexChanged();                                                                                 // [0x2bd6ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapViewer.HandleLayoutOutroAnimationFinished
	// void HandleLayoutOutroAnimationFinished();                                                                               // [0x2bd6ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestMapViewer.GetQuestMapData
	// FFortQuestMapPage GetQuestMapData();                                                                                     // [0x2bd69e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortQuestNotificationHandler
/// Size: 0x0010 (0x0001D0 - 0x0001E0)
class UFortQuestNotificationHandler : public UFortDialogNotificationHandler
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(UFortQuestItem*)                           Quest                                                       OFFSET(get<T>, {0x1D0, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortQuestTrackerEntry
/// Size: 0x0060 (0x000210 - 0x000270)
class UFortQuestTrackerEntry : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(UCommonTextBlock*)                         QuestNameText                                               OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UCommonListView*)                          ObjectivesList                                              OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UFortQuestItem*)                           TrackedQuest                                                OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnHUDQuestFinalObjectiveHiddenDelegate                      OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(TArray<UFortQuestObjectiveInfo*>)          HUDCachedObjectiveInfos                                     OFFSET(get<T>, {0x248, 16, 0, 0})
	DMember(bool)                                      bConfigureAsHUD                                             OFFSET(get<bool>, {0x258, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnSizeEstimateChangedDelegate                               OFFSET(get<T>, {0x260, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuestTrackerEntry.OnSetup
	// void OnSetup();                                                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestTrackerEntry.HandleObjectiveEntryCreated
	// void HandleObjectiveEntryCreated(UUserWidget* Widget);                                                                   // [0x2bd7020] Final|Native|Protected 
	// Function /Script/FortniteUI.FortQuestTrackerEntry.HandleHUDObjectiveCompletion
	// void HandleHUDObjectiveCompletion(UFortQuestObjectiveInfo* QuestObjective);                                              // [0x2bd6d70] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortQuestTrackerList
/// Size: 0x0038 (0x000210 - 0x000248)
class UFortQuestTrackerList : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	DMember(bool)                                      bConfigureAsHUD                                             OFFSET(get<bool>, {0x218, 1, 0, 0})
	CMember(UCommonListView*)                          QuestList                                                   OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TArray<UFortQuestItem*>)                   HUDCachedQuests                                             OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSizeEstimateChangedDelegate                               OFFSET(get<T>, {0x238, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuestTrackerList.HandleSizeEstimateChanged
	// void HandleSizeEstimateChanged(UObject* ChangedElement);                                                                 // [0x2bdb380] Final|Native|Protected 
	// Function /Script/FortniteUI.FortQuestTrackerList.HandleQuestsUpdated
	// void HandleQuestsUpdated();                                                                                              // [0x2bdb320] Final|Native|Protected 
	// Function /Script/FortniteUI.FortQuestTrackerList.HandleQuestEntryCreated
	// void HandleQuestEntryCreated(UUserWidget* Widget);                                                                       // [0x2bdb2a0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortQuestTrackerList.HandlePinnedQuestsChanged
	// void HandlePinnedQuestsChanged();                                                                                        // [0x2bdb280] Final|Native|Protected 
	// Function /Script/FortniteUI.FortQuestTrackerList.HandleHUDFinalObjectiveHidden
	// void HandleHUDFinalObjectiveHidden(UFortQuestItem* QuestItem);                                                           // [0x2bdb180] Final|Native|Protected 
	// Function /Script/FortniteUI.FortQuestTrackerList.GetQuestsToDisplay
	// TArray<UFortQuestItem*> GetQuestsToDisplay();                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortQuestTrackerSubEntry
/// Size: 0x0040 (0x000210 - 0x000250)
class UFortQuestTrackerSubEntry : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(UFortQuestObjectiveInfo*)                  TrackedObjective                                            OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UMulticastDelegate)                        OnSizeEstimateChangedDelegate                               OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHUDQuestObjectiveCompletedDelegate                        OFFSET(get<T>, {0x238, 16, 0, 0})
	DMember(bool)                                      bConfigureAsHUD                                             OFFSET(get<bool>, {0x248, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuestTrackerSubEntry.OnSetup
	// void OnSetup();                                                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestTrackerSubEntry.OnQuestsUpdated
	// void OnQuestsUpdated();                                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestTrackerSubEntry.OnPlayObjectiveCompletedAnimation
	// void OnPlayObjectiveCompletedAnimation();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestTrackerSubEntry.NotifyCompletionAnimationFinished
	// void NotifyCompletionAnimationFinished();                                                                                // [0x2bdb560] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuestTrackerSubEntry.HandleQuestsUpdated
	// void HandleQuestsUpdated();                                                                                              // [0x2bdb340] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortQuestTreeItemWidget
/// Size: 0x0010 (0x000800 - 0x000810)
class UFortQuestTreeItemWidget : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2064;

public:
	CMember(TWeakObjectPtr<UObject*>)                  QuestOrCategory                                             OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuestTreeItemWidget.SetupAsQuest
	// void SetupAsQuest(UFortQuestItem* Category);                                                                             // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestTreeItemWidget.SetupAsCategory
	// void SetupAsCategory(UFortQuestCategory* Category);                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestTreeItemWidget.OnQuestsUpdated
	// void OnQuestsUpdated();                                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuestTreeItemWidget.HandleQuestsUpdated
	// void HandleQuestsUpdated();                                                                                              // [0x2bdb360] Final|Native|Protected 
	// Function /Script/FortniteUI.FortQuestTreeItemWidget.ExpansionChanged
	// void ExpansionChanged(bool bExpanded);                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortQuickBarSlotBase
/// Size: 0x00D8 (0x000210 - 0x0002E8)
class UFortQuickBarSlotBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	CMember(UCommonWidgetSwitcher*)                    SwitcherTopComboSwitcher                                    OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UCommonWidgetSwitcher*)                    SwitcherBottomComboSwitcher                                 OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UFortKeybindWidget*)                       KeybindTop                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UFortKeybindWidget*)                       KeybindBottom                                               OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UFortKeybindWidget*)                       KeybindBottomCombo1                                         OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UFortKeybindWidget*)                       KeybindBottomCombo2                                         OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UFortKeybindWidget*)                       KeybindTopComboArrow1                                       OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(UFortKeybindWidget*)                       KeybindTopComboArrow2                                       OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(UFortKeybindWidget*)                       KeybindBottomComboArrow1                                    OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(UFortKeybindWidget*)                       KeybindBottomComboArrow2                                    OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(UCommonTextBlock*)                         BottomHoldText                                              OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(UImage*)                                   TopLeftArrowImage                                           OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(UImage*)                                   TopLeftArrowImage2                                          OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(UImage*)                                   TopRightArrowImage                                          OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(UImage*)                                   TopRightArrowImage2                                         OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(UImage*)                                   BottomLeftArrowImage                                        OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(UImage*)                                   BottomLeftArrowImage2                                       OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(UImage*)                                   BottomRightArrowImage                                       OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(UImage*)                                   BottomRightArrowImage2                                      OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(UImage*)                                   EmptyImage                                                  OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(UFortMultiSizeItemCard*)                   ItemCardMaximized                                           OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(UFortMultiSizeItemCard*)                   ItemCardMinimized                                           OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(UFortItemCooldownWidget*)                  QuickbarSlotCooldown                                        OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(UImage*)                                   SlotInteraction                                             OFFSET(get<T>, {0x2C8, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x2D0, 4, 0, 0})
	CMember(EFortQuickBars)                            QuickBarType                                                OFFSET(get<T>, {0x2D4, 1, 0, 0})
	DMember(bool)                                      bShowBottomArrows                                           OFFSET(get<bool>, {0x2D5, 1, 1, 0})
	DMember(bool)                                      bShowTopArrows                                              OFFSET(get<bool>, {0x2D5, 1, 1, 1})
	DMember(bool)                                      bHideKeybindsWhenAbilityUnavailable                         OFFSET(get<bool>, {0x2D5, 1, 1, 2})
	DMember(bool)                                      bShouldCollapseItemWidgetBorder                             OFFSET(get<bool>, {0x2D5, 1, 1, 3})
	DMember(bool)                                      DoNotPlaySelectionAnimation                                 OFFSET(get<bool>, {0x2D5, 1, 1, 4})
	DMember(bool)                                      bIsAthenaQuickBar                                           OFFSET(get<bool>, {0x2D5, 1, 1, 5})
	DMember(bool)                                      bKeybindsHidden                                             OFFSET(get<bool>, {0x2D5, 1, 1, 6})
	CMember(EFortItemCardSize)                         ItemCardSize                                                OFFSET(get<T>, {0x2D6, 1, 0, 0})
	CMember(UFortItem*)                                Item                                                        OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(UFortInputData*)                           InputData                                                   OFFSET(get<T>, {0x2E0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortQuickBarSlotBase.UpdateKeyBindingVisibility
	// void UpdateKeyBindingVisibility();                                                                                       // [0x2bdbf40] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.UpdateKeyBindingText
	// void UpdateKeyBindingText();                                                                                             // [0x2bdbf20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.UpdateItemCardsVisibility
	// void UpdateItemCardsVisibility();                                                                                        // [0x2bdbf00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.SetTopComboSwitcherVisibility
	// void SetTopComboSwitcherVisibility(ESlateVisibility InVisibility);                                                       // [0x2bdbda0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.SetSlotSelected
	// void SetSlotSelected(bool bSelected);                                                                                    // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.SetBottomComboSwitcherVisibility
	// void SetBottomComboSwitcherVisibility(ESlateVisibility InVisibility);                                                    // [0x2bdbc20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.Resize
	// void Resize(EFortItemCardSize CardSize);                                                                                 // [0x2bdb780] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.RefreshItem
	// void RefreshItem();                                                                                                      // [0x2bdb740] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.OnRefreshItem
	// void OnRefreshItem();                                                                                                    // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.MinimizeSlot
	// void MinimizeSlot(bool bShouldSkipAnimation);                                                                            // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.MaximizeSlot
	// void MaximizeSlot(bool bShouldSkipAnimation);                                                                            // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.GetKeyBindingActionKeyboard
	// FName GetKeyBindingActionKeyboard();                                                                                     // [0x2bdae80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.GetKeyBindingActionGamepad
	// FName GetKeyBindingActionGamepad();                                                                                      // [0x2bdae40] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortQuickBarSlotBase.GetKeyBindingAction
	// FName GetKeyBindingAction();                                                                                             // [0x2bdae00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRedeemCodeBase
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class UFortRedeemCodeBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:


	/// Functions
	// Function /Script/FortniteUI.FortRedeemCodeBase.RedeemFriendCode
	// void RedeemFriendCode(FString FriendCode);                                                                               // [0x2bdb6a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRedeemCodeBase.OnRedeemFriendCodeComplete
	// void OnRedeemFriendCodeComplete(bool bSuccess, ERedeemCodeFailureReason FailureReason);                                  // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortRedirectToEpicAccountWidget
/// Size: 0x0050 (0x0003C0 - 0x000410)
class UFortRedirectToEpicAccountWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(TArray<FPlatformSupportDesc>)              SupportedPlatforms                                          OFFSET(get<T>, {0x3C0, 16, 0, 0})
	SMember(FPlatformSupportDesc)                      DefaultValues                                               OFFSET(getStruct<T>, {0x3D0, 32, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Title                                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Desc                                                   OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UCommonButton*)                            Button_CreateAccount                                        OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRedirectToEpicAccountWidget.SetLoginType
	// void SetLoginType(EFortLoginAccountType LoginType);                                                                      // [0x2bdbca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRedirectToEpicAccountWidget.HandleCreateAccountClicked
	// void HandleCreateAccountClicked(UCommonButton* Button);                                                                  // [0x2bdb100] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortRefundConfirmation
/// Size: 0x0060 (0x0003C0 - 0x000420)
class UFortRefundConfirmation : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	CMember(UCommonTextBlock*)                         Text_Name                                                   OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_RefundsRemaining                                       OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Yes                                                  OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonButton*)                            Button_No                                                   OFFSET(get<T>, {0x418, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRefundConfirmation.HandleYesClicked
	// void HandleYesClicked(UCommonButton* Button);                                                                            // [0x2bdb400] Final|Native|Protected 
	// Function /Script/FortniteUI.FortRefundConfirmation.HandleNoClicked
	// void HandleNoClicked(UCommonButton* Button);                                                                             // [0x2bdb200] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortRejoinWindowBase
/// Size: 0x0010 (0x0003C0 - 0x0003D0)
class UFortRejoinWindowBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(UCommonTextBlock*)                         RejoinTime                                                  OFFSET(get<T>, {0x3C0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRejoinWindowBase.StopTimeout
	// void StopTimeout();                                                                                                      // [0x2bdbec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRejoinWindowBase.StartTimeout
	// void StartTimeout(float TimeoutTime);                                                                                    // [0x2bdbe40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRejoinWindowBase.OnTimeoutTimeReached
	// void OnTimeoutTimeReached();                                                                                             // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortReplayBase
/// Size: 0x0008 (0x000238 - 0x000240)
class UFortReplayBase : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(UFortReplayContext*)                       ReplayContext                                               OFFSET(get<T>, {0x238, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortReplayBase.SetReplayContext
	// void SetReplayContext(UFortReplayContext* InReplayContext);                                                              // [0x2bdbd20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortReplayBase.OnTimelineRangeChanged
	// void OnTimelineRangeChanged(float StartTime, float EndTime);                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortReplayBase.OnReplayPausedChanged
	// void OnReplayPausedChanged(bool bIsPaused);                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortReplayBase.OnPlaybackTimeChanged
	// void OnPlaybackTimeChanged(float NowTime);                                                                               // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortReplayViewSettingsTabBase
/// Size: 0x0010 (0x0003F0 - 0x000400)
class UFortReplayViewSettingsTabBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(AFortReplaySpectator*)                     FortReplaySpectator                                         OFFSET(get<T>, {0x3F0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortReplayViewSettingsTabBase.SetWidgetValues
	// void SetWidgetValues();                                                                                                  // [0x154a140] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortReplayViewSettingsTabBase.ResetToDefault
	// void ResetToDefault();                                                                                                   // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortReplayViewSettingsTabBase.OnCameraTypeChanged
	// void OnCameraTypeChanged(AFortPlayerControllerSpectating* FortPlayerControllerSpectating, ESpectatorCameraType CameraType); // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortReplayViewSettingsTabBase.InitializeWidgets
	// void InitializeWidgets();                                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortReplayViewSettingsTabBase.CenterOnTab
	// void CenterOnTab();                                                                                                      // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortResultsSummaryScreenWidget
/// Size: 0x0000 (0x000210 - 0x000210)
class UFortResultsSummaryScreenWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:


	/// Functions
	// Function /Script/FortniteUI.FortResultsSummaryScreenWidget.GetTotalScoreSortedScoreIndices
	// void GetTotalScoreSortedScoreIndices(UFortUIScoreReport* ScoreReport, TArray<int32_t>& OutSortedScoreIndices);           // [0x2bdafe0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortResultsTeleportScreenWidget
/// Size: 0x0060 (0x000210 - 0x000270)
class UFortResultsTeleportScreenWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	DMember(float)                                     ExitTime                                                    OFFSET(get<float>, {0x210, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortResultsTeleportScreenWidget.StartExitTimer
	// void StartExitTimer();                                                                                                   // [0x2bdbe20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortResultsTeleportScreenWidget.OnExitTimerFinished
	// void OnExitTimerFinished();                                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortResultsTeleportScreenWidget.OnExitTimeRemainingUpdated
	// void OnExitTimeRemainingUpdated(int32_t TimeRemainingSeconds);                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortResultsTeleportScreenWidget.OnExitTimePercentagePassedUpdated
	// void OnExitTimePercentagePassedUpdated(float Percent);                                                                   // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortResultsWidget
/// Size: 0x00C0 (0x0003C0 - 0x000480)
class UFortResultsWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	DMember(int32_t)                                   AdditionalGrantedMissionPoints                              OFFSET(get<int32_t>, {0x438, 4, 0, 0})
	CMember(TArray<UFortItem*>)                        RewardedBadges                                              OFFSET(get<T>, {0x440, 16, 0, 0})
	CMember(TArray<UFortItem*>)                        MissedBadges                                                OFFSET(get<T>, {0x450, 16, 0, 0})
	CMember(TArray<UFortItem*>)                        RewardedItems                                               OFFSET(get<T>, {0x460, 16, 0, 0})
	CMember(TArray<UFortItem*>)                        RewardedAccountItems                                        OFFSET(get<T>, {0x470, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortResultsWidget.TriggerSetupTeleportCameraEvent
	// void TriggerSetupTeleportCameraEvent();                                                                                  // [0x2bdbee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortResultsWidget.SendEndOfRoundUpVoteAnalytic
	// void SendEndOfRoundUpVoteAnalytic(FUniqueNetIdRepl& TargetId, FString TargetPlayerName);                                 // [0x2bdbac0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortResultsWidget.SendEndOfRoundScreenAnalytic
	// void SendEndOfRoundScreenAnalytic(FString ScreenName, bool Skipped, float TimeSpent);                                    // [0x2bdb960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortResultsWidget.SendEndOfRoundFriendInviteAnalytic
	// void SendEndOfRoundFriendInviteAnalytic(FUniqueNetIdRepl& TargetId, FString TargetPlayerName);                           // [0x2bdb800] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortResultsWidget.RequestExitZone
	// void RequestExitZone();                                                                                                  // [0x2bdb760] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortResultsWidget.LogXPData
	// void LogXPData();                                                                                                        // [0x2bdb540] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortResultsWidget.IsDataFinalized
	// bool IsDataFinalized();                                                                                                  // [0x2bdb480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortResultsWidget.GetZoneCompletionResult
	// EFortCompletionResult GetZoneCompletionResult();                                                                         // [0x2bdb0d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortResultsWidget.GetTotalMissionPointsEarned
	// int32_t GetTotalMissionPointsEarned();                                                                                   // [0x2bdafb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortResultsWidget.GetRewardsByType
	// void GetRewardsByType(EFortRewardItemType Type, TArray<UFortItem*>& OutRewards);                                         // [0x2bdaec0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortReticle
/// Size: 0x0028 (0x000238 - 0x000260)
class UFortReticle : public UFortHUDElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:


	/// Functions
	// Function /Script/FortniteUI.FortReticle.OnWeaponEquipped
	// void OnWeaponEquipped(AFortWeapon* NewWeapon, AFortWeapon* PrevWeapon);                                                  // [0x2bdb5e0] Final|Native|Private 
	// Function /Script/FortniteUI.FortReticle.OnReticleColorChanged
	// void OnReticleColorChanged();                                                                                            // [0x2bdb5c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortReticle.OnPawnSet
	// void OnPawnSet();                                                                                                        // [0x2bdb5a0] Final|Native|Private 
	// Function /Script/FortniteUI.FortReticle.OnContextualReticleChanged
	// void OnContextualReticleChanged();                                                                                       // [0x2bdb580] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortRewardNotificationData
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortRewardNotificationData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EFrontEndRewardType)                       RewardType                                                  OFFSET(get<T>, {0x28, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardNotificationData.GetIconBrush
	// bool GetIconBrush(FSlateBrush& IconBrush, TEnumAsByte<EFortBrushSize> BrushSize);                                        // [0x2bdac50] Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardCollectionBookData
/// Size: 0x0070 (0x000030 - 0x0000A0)
class UFortRewardCollectionBookData : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FFortCollectionBookRewards)                CollectionBookRewards                                       OFFSET(getStruct<T>, {0x30, 112, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardCollectionBookData.GetIconBrush
	// bool GetIconBrush(FSlateBrush& IconBrush, TEnumAsByte<EFortBrushSize> BrushSize);                                        // [0x2bdac50] Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardNotificationSubWidget
/// Size: 0x0028 (0x000210 - 0x000238)
class UFortRewardNotificationSubWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(UMulticastDelegate)                        OnTransitionInComplete                                      OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnTransitionOutComplete                                     OFFSET(get<T>, {0x220, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.TransitionOutBegin
	// void TransitionOutBegin();                                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.TransitionOut
	// void TransitionOut();                                                                                                    // [0x2be0580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.TransitionInBegin
	// void TransitionInBegin();                                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.TransitionIn
	// void TransitionIn();                                                                                                     // [0x2be0560] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.SetPrimaryActionText
	// void SetPrimaryActionText(FText Text);                                                                                   // [0x2be0040] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.SetPrimaryActionHidden
	// void SetPrimaryActionHidden();                                                                                           // [0x2be0000] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.SetPrimaryActionEnabled
	// void SetPrimaryActionEnabled(bool bEnabled);                                                                             // [0x2bdfee0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.SetInputActionHandlerState
	// void SetInputActionHandlerState(UDataTable* DataTable, FName RowName, EInputActionState State);                          // [0x2bdfcc0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.RemoveInputActionHandler
	// void RemoveInputActionHandler(FDataTableRowHandle InputActionRow);                                                       // [0x2bdfb90] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.RemoveAllInputActionHandlers
	// void RemoveAllInputActionHandlers();                                                                                     // [0x2bdfb70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.OnPrimaryAction
	// void OnPrimaryAction();                                                                                                  // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.OnNavigationUp
	// void OnNavigationUp();                                                                                                   // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.OnNavigationRight
	// void OnNavigationRight();                                                                                                // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.OnNavigationLeft
	// void OnNavigationLeft();                                                                                                 // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.OnNavigationDown
	// void OnNavigationDown();                                                                                                 // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.OnDeactivated
	// void OnDeactivated();                                                                                                    // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.OnActivated
	// void OnActivated();                                                                                                      // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.IsPrimaryActionHidden
	// void IsPrimaryActionHidden(bool& bHidden);                                                                               // [0x2bdf9c0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.IsPrimaryActionEnabled
	// void IsPrimaryActionEnabled(bool& bEnabled);                                                                             // [0x2bdf9c0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.InspectItem
	// void InspectItem(UFortItem* ItemToInspect);                                                                              // [0x2bdf940] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.Init
	// void Init(UFortRewardNotificationWidget* MainWidget);                                                                    // [0x2bdf8c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationSubWidget.AddInputActionHandler
	// void AddInputActionHandler(UDataTable* DataTable, FName RowName, DelegateProperty CommittedEvent);                       // [0x2bded40] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardConversationWidget
/// Size: 0x0000 (0x000238 - 0x000238)
class UFortRewardConversationWidget : public UFortRewardNotificationSubWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:


	/// Functions
	// Function /Script/FortniteUI.FortRewardConversationWidget.IsValidConversation
	// bool IsValidConversation(UFortConversation* Conversation);                                                               // [0x2bdb4b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardConversationWidget.GetDataFromSentence
	// void GetDataFromSentence(FFortConversationSentence& Sentence, FText& Text, UTexture2D*& TalkingHeadTexture);             // [0x2bdf120] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardDifficultyIncrease
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortRewardDifficultyIncrease : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteUI.FortRewardEpicQuestData
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortRewardEpicQuestData : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortQuestItem*)                           Quest                                                       OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardEpicQuestData.GetIconBrush
	// bool GetIconBrush(FSlateBrush& IconBrush, TEnumAsByte<EFortBrushSize> BrushSize);                                        // [0x2bdac50] Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardExpeditionData
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortRewardExpeditionData : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortExpeditionItem*)                      Expedition                                                  OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardExpeditionData.GetIconBrush
	// bool GetIconBrush(FSlateBrush& IconBrush, TEnumAsByte<EFortBrushSize> BrushSize);                                        // [0x2bdac50] Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardExpeditionWidget
/// Size: 0x0068 (0x000238 - 0x0002A0)
class UFortRewardExpeditionWidget : public UFortRewardNotificationSubWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(UMulticastDelegate)                        OnMcpError                                                  OFFSET(get<T>, {0x238, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardExpeditionWidget.OnCollectExpeditionCompleted
	// void OnCollectExpeditionCompleted(UFortExpeditionItem* Expedition, bool bSucceeded, TArray<FFortItemInstanceQuantityPair>& Rewards); // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardExpeditionWidget.CollectExpedition
	// void CollectExpedition(UFortExpeditionItem* Expedition);                                                                 // [0x2bdefb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardGiftBoxData
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortRewardGiftBoxData : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortGiftBoxItem*)                         GiftBox                                                     OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardGiftBoxData.GetIconBrush
	// bool GetIconBrush(FSlateBrush& IconBrush, TEnumAsByte<EFortBrushSize> BrushSize);                                        // [0x2bdac50] Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardInfoButton
/// Size: 0x0020 (0x000800 - 0x000820)
class UFortRewardInfoButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2080;

public:
	CMember(UPanelWidget*)                             ItemCardPanel                                               OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(EFortItemCardSize)                         ItemCardSize                                                OFFSET(get<T>, {0x810, 1, 0, 0})
	DMember(bool)                                      bDisplayAsRewardCard                                        OFFSET(get<bool>, {0x811, 1, 0, 0})
	CMember(UFortItem*)                                ItemInstance                                                OFFSET(get<T>, {0x818, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardInfoButton.SetShowDescriptionBP
	// void SetShowDescriptionBP(bool bInShowDescription);                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardInfoButton.SetShowDescription
	// void SetShowDescription(bool bInShowDescription);                                                                        // [0x2be0360] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardInfoButton.SetItemInstanceQuantityPair
	// void SetItemInstanceQuantityPair(FFortItemInstanceQuantityPair& ItemQuantityPair);                                       // [0x2bdfdc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardInfoButton.HandleDifferentItemOrQuantitySetBP
	// void HandleDifferentItemOrQuantitySetBP();                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardInfoButton.GetQuantity
	// int32_t GetQuantity();                                                                                                   // [0x2bdf2f0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortRewardInfoButton.GetItemInstance
	// UFortItem* GetItemInstance();                                                                                            // [0x2712140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortRewardInfoWidget
/// Size: 0x0088 (0x000210 - 0x000298)
class UFortRewardInfoWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UPanelWidget*)                             RewardListWidget                                            OFFSET(get<T>, {0x210, 8, 0, 0})
	SMember(FMargin)                                   RewardWidgetPadding                                         OFFSET(getStruct<T>, {0x218, 16, 0, 0})
	CMember(TEnumAsByte<EHorizontalAlignment>)         HorizontalAlignment                                         OFFSET(get<T>, {0x228, 1, 0, 0})
	CMember(TEnumAsByte<EVerticalAlignment>)           VerticalAlignment                                           OFFSET(get<T>, {0x229, 1, 0, 0})
	DMember(bool)                                      bShowDescription                                            OFFSET(get<bool>, {0x22A, 1, 0, 0})
	DMember(bool)                                      bAllowItemInteraction                                       OFFSET(get<bool>, {0x22B, 1, 0, 0})
	CMember(UClass*)                                   OrWidgetType                                                OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UClass*)                                   RewardInfoButtonType                                        OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UCommonButtonGroup*)                       ButtonGroup                                                 OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardInfoWidget.SetRewards
	// void SetRewards(FFortRewardInfo& RewardsIn);                                                                             // [0x2be0270] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardInfoWidget.SetReward
	// void SetReward(FFortItemQuantityPair& RewardIn);                                                                         // [0x2be01c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardInfoWidget.SetButtonGroup
	// void SetButtonGroup(UCommonButtonGroup* InButtonGroup);                                                                  // [0x2bdfc40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardInfoWidget.ContainsReward
	// bool ContainsReward(FString TemplateIdToCheck);                                                                          // [0x2bdf030] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardItemCacheData
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortRewardItemCacheData : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortItem*)                                ItemCache                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortRewardMissionAlertData
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortRewardMissionAlertData : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteUI.FortRewardMissionData
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortRewardMissionData : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteUI.FortRewardNewQuestWidget
/// Size: 0x0000 (0x000238 - 0x000238)
class UFortRewardNewQuestWidget : public UFortRewardNotificationSubWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:


	/// Functions
	// Function /Script/FortniteUI.FortRewardNewQuestWidget.IsValidConversation
	// bool IsValidConversation(UFortConversation* Conversation);                                                               // [0x2bdb4b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNewQuestWidget.GetDataFromSentence
	// void GetDataFromSentence(FFortConversationSentence& Sentence, FText& Text, UTexture2D*& TalkingHeadTexture);             // [0x2bdf120] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardNotificationWidget
/// Size: 0x01C0 (0x0003C0 - 0x000580)
class UFortRewardNotificationWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1408;

public:
	CMember(TArray<UFortRewardNotificationData*>)      NotificationDataList                                        OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(UOverlay*)                                 OverlayMain                                                 OFFSET(get<T>, {0x410, 8, 0, 0})
	SMember(FFortSwipeDetector)                        SwipeDetector                                               OFFSET(getStruct<T>, {0x420, 320, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardNotificationWidget.SetPrimaryActionText
	// void SetPrimaryActionText(FText Text);                                                                                   // [0x2be0100] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.SetPrimaryActionHidden
	// void SetPrimaryActionHidden();                                                                                           // [0x2be0020] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.SetPrimaryActionEnabled
	// void SetPrimaryActionEnabled(bool bEnabled);                                                                             // [0x2bdff70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.ResetAllRewardData
	// void ResetAllRewardData();                                                                                               // [0x2bdfc20] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.OnPrimaryActionTextChanged
	// void OnPrimaryActionTextChanged(FText& Text);                                                                            // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.OnPrimaryActionHidden
	// void OnPrimaryActionHidden();                                                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.OnPrimaryActionEnabled
	// void OnPrimaryActionEnabled();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.OnPrimaryActionDisabled
	// void OnPrimaryActionDisabled();                                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.OnNavigationUp
	// void OnNavigationUp();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.OnNavigationRight
	// void OnNavigationRight();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.OnNavigationLeft
	// void OnNavigationLeft();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.OnNavigationDown
	// void OnNavigationDown();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.IsPrimaryActionHidden
	// void IsPrimaryActionHidden(bool& bHidden);                                                                               // [0x2bdfae0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.IsPrimaryActionEnabled
	// void IsPrimaryActionEnabled(bool& bEnabled);                                                                             // [0x2bdfa50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.InspectItem
	// void InspectItem(UFortItem* ItemToInspect);                                                                              // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddQuestData
	// void AddQuestData(UFortQuestItem* Quest);                                                                                // [0x2bdef30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddMissionData
	// void AddMissionData();                                                                                                   // [0x2bdef10] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddMissionAlertData
	// void AddMissionAlertData();                                                                                              // [0x2bdeef0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddItemCacheRewardData
	// void AddItemCacheRewardData(UFortItem* ItemCache);                                                                       // [0x2bdee70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddGiftBoxData
	// void AddGiftBoxData();                                                                                                   // [0x2bded20] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddExpeditionData
	// void AddExpeditionData(UFortExpeditionItem* ExpeditionItem);                                                             // [0x2bdeca0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddEpicQuestData
	// void AddEpicQuestData(UFortQuestItem* Quest);                                                                            // [0x2bdec20] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddDifficultyIncreaseRewardData
	// void AddDifficultyIncreaseRewardData();                                                                                  // [0x2bdec00] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortRewardNotificationWidget.AddCollectionBookData
	// void AddCollectionBookData(FFortCollectionBookRewards& CollectionBookRewards);                                           // [0x2bdeae0] Final|Native|Protected|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRewardQuestData
/// Size: 0x0008 (0x000030 - 0x000038)
class UFortRewardQuestData : public UFortRewardNotificationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortQuestItem*)                           Quest                                                       OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRewardQuestData.GetIconBrush
	// bool GetIconBrush(FSlateBrush& IconBrush, TEnumAsByte<EFortBrushSize> BrushSize);                                        // [0x2bdac50] Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortRichTextBlock
/// Size: 0x0988 (0x000100 - 0x000A88)
class UFortRichTextBlock : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2696;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x100, 24, 0, 0})
	CMember(UDataTable*)                               StyleSet                                                    OFFSET(get<T>, {0x118, 8, 0, 0})
	SMember(FMargin)                                   TextMargin                                                  OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	DMember(float)                                     WrapTextAt                                                  OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(bool)                                      AutoWrapText                                                OFFSET(get<bool>, {0x134, 1, 0, 0})
	CMember(TEnumAsByte<ETextJustify>)                 Justification                                               OFFSET(get<T>, {0x135, 1, 0, 0})
	SMember(FButtonStyle)                              HyperlinkButtonStyle                                        OFFSET(getStruct<T>, {0x138, 632, 0, 0})
	SMember(FScrollBarStyle)                           ScrollBarStyle                                              OFFSET(getStruct<T>, {0x3B0, 1232, 0, 0})
	CMember(UClass*)                                   KeybindWidgetClass                                          OFFSET(get<T>, {0x880, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortRichTextBlock.SetText
	// void SetText(FText InText);                                                                                              // [0x2be03f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSignInConsole
/// Size: 0x0070 (0x0003C0 - 0x000430)
class UFortSignInConsole : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(UEditableText*)                            Email                                                       OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UCommonButton*)                            Button_SendCode                                             OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UEditableText*)                            Passcode                                                    OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_Error                                                  OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(UCommonButton*)                            Button_SubmitCode                                           OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(UWidgetSwitcher*)                          Switcher_Main                                               OFFSET(get<T>, {0x428, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSignInConsole.UpdatePasscodeStatus
	// void UpdatePasscodeStatus(FText& Text);                                                                                  // [0x2be0670] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortSignInConsole.UpdateEmailStatus
	// void UpdateEmailStatus(FText& Text);                                                                                     // [0x2be05a0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortSignInConsole.HandleTextCommitted
	// void HandleTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                            // [0x2bdf680] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortSignInConsole.HandleSendCodeClicked
	// void HandleSendCodeClicked(UCommonButton* Button);                                                                       // [0x2bdf580] Final|Native|Protected 
	// Function /Script/FortniteUI.FortSignInConsole.HandlePasscodeSubmitted
	// void HandlePasscodeSubmitted(UCommonButton* Button);                                                                     // [0x2bdf500] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortSignInWidget
/// Size: 0x00A0 (0x0003C0 - 0x000460)
class UFortSignInWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(UClass*)                                   NormalBorderStyle                                           OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UClass*)                                   HighlightBorderStyle                                        OFFSET(get<T>, {0x408, 8, 0, 0})
	SMember(FString)                                   ForgotPasswordURL                                           OFFSET(getStruct<T>, {0x420, 16, 0, 0})
	CMember(UEditableText*)                            Email                                                       OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(UEditableText*)                            Password                                                    OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(UCommonBorder*)                            EmailBorder                                                 OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(UCommonBorder*)                            PasswordBorder                                              OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(UCommonButton*)                            SignInButton                                                OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(UCommonButton*)                            Button_ForgotPassword                                       OFFSET(get<T>, {0x458, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSignInWidget.UpdateSignInButton
	// void UpdateSignInButton(FText& Text);                                                                                    // [0x2be0740] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSignInWidget.StartSignIn
	// void StartSignIn();                                                                                                      // [0x2be0540] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortSignInWidget.OnVirtualKeyboardShown
	// void OnVirtualKeyboardShown();                                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSignInWidget.OnVirtualKeyboardHidden
	// void OnVirtualKeyboardHidden();                                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSignInWidget.HandleTextCommitted
	// void HandleTextCommitted(FText& Text, TEnumAsByte<ETextCommit> CommitMethod);                                            // [0x2bdf7a0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSignInWidget.HandleSignInRequest
	// void HandleSignInRequest(UCommonButton* Button);                                                                         // [0x2bdf600] Final|Native|Protected 
	// Function /Script/FortniteUI.FortSignInWidget.HandleForgotPassword
	// void HandleForgotPassword(UCommonButton* Button);                                                                        // [0x2bdf400] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortSkillTreeCanvas
/// Size: 0x01A8 (0x000118 - 0x0002C0)
class UFortSkillTreeCanvas : public UPanelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FVector2D)                                 OriginForParallaxEffect                                     OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	CMember(UCommonButtonGroup*)                       NodeButtonGroup                                             OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreeCanvas.HandleNodeButtonClicked
	// void HandleNodeButtonClicked(UCommonButton* Button);                                                                     // [0x2bdf480] Final|Native|Private 
	// Function /Script/FortniteUI.FortSkillTreeCanvas.HandleButtonGroupSelectionCleared
	// void HandleButtonGroupSelectionCleared();                                                                                // [0x2bdf3e0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSkillTreeCanvas.HandleButtonGroupSelectionChanged
	// void HandleButtonGroupSelectionChanged(UCommonButton* SelectedButton, int32_t ButtonIndex);                              // [0x2bdf320] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortSkillTreeCanvasEditorInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortSkillTreeCanvasEditorInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteUI.FortSkillTreeCanvasNode
/// Size: 0x0028 (0x000800 - 0x000828)
class UFortSkillTreeCanvasNode : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2088;

public:
	SMember(FName)                                     PageId                                                      OFFSET(getStruct<T>, {0x808, 8, 0, 0})
	SMember(FName)                                     NodeID                                                      OFFSET(getStruct<T>, {0x810, 8, 0, 0})
	DMember(bool)                                      ShouldHideConnectorsToDependents                            OFFSET(get<bool>, {0x818, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreeCanvasNode.TryGetStaticSkillTreeNodeData
	// bool TryGetStaticSkillTreeNodeData(FHomebaseNode& OutNodeData);                                                          // [0x2be4df0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeCanvasNode.TryGetSkillTreeNodeState
	// bool TryGetSkillTreeNodeState(FHomebaseNodeState& OutNodeState);                                                         // [0x2be4ad0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeCanvasNode.TryGetNodeDisplayData
	// bool TryGetNodeDisplayData(FFortSkillTreeNodeDisplayData& OutDisplayData);                                               // [0x2be4410] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeCanvasNode.HandleSkillTreeNodeStateChanged
	// void HandleSkillTreeNodeStateChanged();                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSkillTreeCanvasEntityInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortSkillTreeCanvasEntityInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreeCanvasEntityInterface.PlayOutroTransitionBP
	// void PlayOutroTransitionBP(EFortAnimSpeed AnimSpeed);                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreeCanvasEntityInterface.PlayIntroTransitionBP
	// void PlayIntroTransitionBP(EFortAnimSpeed AnimSpeed);                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSkillTreeCanvasSlot
/// Size: 0x0018 (0x000038 - 0x000050)
class UFortSkillTreeCanvasSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FVector2D)                                 BasePosition                                                OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	DMember(float)                                     ParallaxPanningFactor                                       OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   ZOrder                                                      OFFSET(get<int32_t>, {0x44, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreeCanvasSlot.SetZOrder
	// void SetZOrder(int32_t InZOrder);                                                                                        // [0x2be41d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSkillTreeCanvasSlot.SetPosition
	// void SetPosition(FVector2D InPosition);                                                                                  // [0x2be40c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortSkillTreeCanvasSlot.GetZOrder
	// int32_t GetZOrder();                                                                                                     // [0x2be3da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeCanvasSlot.GetPosition
	// FVector2D GetPosition();                                                                                                 // [0x2be3c10] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeCanvasSlot.GetBasePosition
	// FVector2D GetBasePosition();                                                                                             // [0x2be3870] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSkillTreePageSelectorButton
/// Size: 0x0018 (0x000800 - 0x000818)
class UFortSkillTreePageSelectorButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	SMember(FName)                                     SkillTreePageId                                             OFFSET(getStruct<T>, {0x800, 8, 0, 0})
	CMember(UClass*)                                   SkillTreeViewerType                                         OFFSET(get<T>, {0x808, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreePageSelectorButton.TryGetStaticSkillTreePageData
	// bool TryGetStaticSkillTreePageData(FHomebaseNodePage& OutStaticData);                                                    // [0x2be4f00] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreePageSelectorButton.TryGetSkillTreeNodeState
	// bool TryGetSkillTreeNodeState(FName NodeID, FHomebaseNodeState& OutNodeState);                                           // [0x2be4c30] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreePageSelectorButton.IsSkillTreePageLocked
	// bool IsSkillTreePageLocked();                                                                                            // [0x2be3e00] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortSkillTreePageSelectorButton.HandleRefreshSkillTreeNodePage
	// void HandleRefreshSkillTreeNodePage();                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreePageSelectorButton.HandleDifferentSkillTreePageSet
	// void HandleDifferentSkillTreePageSet();                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreePageSelectorButton.GetButtonNodeCompletionText
	// FText GetButtonNodeCompletionText();                                                                                     // [0x2be38b0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortSkillTreeLandingPage
/// Size: 0x0020 (0x0003C0 - 0x0003E0)
class UFortSkillTreeLandingPage : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(TArray<FDataTableRowHandle>)               SkillsToLinkTo                                              OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(TArray<FDataTableRowHandle>)               ResearchToLinkTo                                            OFFSET(get<T>, {0x3D0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreeLandingPage.SetupEventBasedSkillTreePages
	// void SetupEventBasedSkillTreePages(TArray<FString>& ActiveEventFlags);                                                   // [0x2be4250] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.FortSkillTreeLandingPage.CreateAndAddPageButton
	// UFortSkillTreePageSelectorButton* CreateAndAddPageButton(FName& SkillTreePageId, ESkillTreePageType PageType, bool bNewRow); // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreeLandingPage.ClearEventSkillTrees
	// bool ClearEventSkillTrees();                                                                                             // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSkillTreeNodeDetailsPanel
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortSkillTreeNodeDetailsPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FName)                                     IdOfSkillTreeNodeToRepresent                                OFFSET(getStruct<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreeNodeDetailsPanel.TryGetSkillTreeNodeState
	// bool TryGetSkillTreeNodeState(FHomebaseNodeState& OutNodeState);                                                         // [0x2be4b80] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeNodeDetailsPanel.TryGetNodeSquadAttributeData
	// bool TryGetNodeSquadAttributeData(FHomebaseNode& HomebaseNode, FText& Name, FText& Description, FFortMultiSizeBrush& Brush); // [0x2be4800] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeNodeDetailsPanel.TryGetNodeDisplayDataFromID
	// bool TryGetNodeDisplayDataFromID(FName HomeBaseNodeID, FFortSkillTreeNodeDisplayData& OutDisplayData);                   // [0x2be46c0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeNodeDetailsPanel.TryGetNodeDisplayData
	// bool TryGetNodeDisplayData(FHomebaseNode& HomebaseNode, FFortSkillTreeNodeDisplayData& OutDisplayData);                  // [0x2be4510] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeNodeDetailsPanel.SetSkillTreeNodeToRepresent
	// void SetSkillTreeNodeToRepresent(FName& SkillTreeNodeId);                                                                // [0x2be4140] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSkillTreeNodeDetailsPanel.HasSkillTreeNodeToRepresent
	// bool HasSkillTreeNodeToRepresent();                                                                                      // [0x2be3dd0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeNodeDetailsPanel.HandleSkillTreeNodeStateChanged
	// void HandleSkillTreeNodeStateChanged();                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreeNodeDetailsPanel.HandleDifferentSkillTreeNodeToRepresentSetBP
	// void HandleDifferentSkillTreeNodeToRepresentSetBP();                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSkillTreeNodeDisplayDataRegistry
/// Size: 0x0050 (0x000030 - 0x000080)
class UFortSkillTreeNodeDisplayDataRegistry : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<FName, FFortSkillTreeNodeDisplayData>) SkillTreeNodeStyleIdToDisplayDataMap                       OFFSET(get<T>, {0x30, 80, 0, 0})
};

/// Class /Script/FortniteUI.FortSkillTreePageWidget
/// Size: 0x0100 (0x000210 - 0x000310)
class UFortSkillTreePageWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	SMember(FName)                                     SkillTreePageId                                             OFFSET(getStruct<T>, {0x210, 8, 0, 0})
	CMember(UFortSkillTreeCanvas*)                     SkillTreeCanvas                                             OFFSET(get<T>, {0x308, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreePageWidget.TryGetStaticSkillTreePageData
	// bool TryGetStaticSkillTreePageData(FHomebaseNodePage& OutStaticData);                                                    // [0x2be4fe0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreePageWidget.PlayOutroTransitionBP
	// void PlayOutroTransitionBP(EFortAnimSpeed AnimSpeed);                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreePageWidget.PlayIntroTransitionBP
	// void PlayIntroTransitionBP(EFortAnimSpeed AnimSpeed);                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSkillTreePageWidgetRegistry
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UFortSkillTreePageWidgetRegistry : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TMap<FName, UClass*>)                      SkillTreePageIdToWidgetTypeMap                              OFFSET(get<T>, {0x30, 80, 0, 0})
};

/// Class /Script/FortniteUI.FortSkillTreeViewer
/// Size: 0x00D0 (0x0003C0 - 0x000490)
class UFortSkillTreeViewer : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(UMulticastDelegate)                        OnNodeSelectionChangedEvent                                 OFFSET(get<T>, {0x3C0, 16, 0, 0})
	SMember(FMargin)                                   PageDisplayAreaMargins                                      OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	CMember(UFortSkillTreePageWidget*)                 CurrentPageWidget                                           OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(UOverlay*)                                 PageHostOverlay                                             OFFSET(get<T>, {0x3E8, 8, 0, 0})
	SMember(FDataTableRowHandle)                       BackOutInputAction                                          OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	CMember(TMap<FName, UFortSkillTreePageWidget*>)    PageIdToWidgetCache                                         OFFSET(get<T>, {0x400, 80, 0, 0})
	DMember(float)                                     ZoomLevel                                                   OFFSET(get<float>, {0x450, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSkillTreeViewer.TryGetSkillTreePageStaticData
	// bool TryGetSkillTreePageStaticData(FHomebaseNodePage& OutData);                                                          // [0x2be4d10] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeViewer.ShowPage
	// void ShowPage(FName& SkillTreePageId, EFortAnimSpeed TransitionSpeed);                                                   // [0x2be4320] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSkillTreeViewer.OnNodeSelectionChanged__DelegateSignature
	// void OnNodeSelectionChanged__DelegateSignature();                                                                        // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortSkillTreeViewer.NavigateTo
	// void NavigateTo(FName& SkillTreeNodeId, bool ShouldSelectNode, EFortAnimSpeed TransitionSpeed);                          // [0x2be3e30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSkillTreeViewer.HandleViewParametersChangedBP
	// void HandleViewParametersChangedBP();                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreeViewer.HandleNodeSelectionChangedBP
	// void HandleNodeSelectionChangedBP();                                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreeViewer.HandleDifferentPageShown
	// void HandleDifferentPageShown();                                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreeViewer.HandleBackOutAction
	// void HandleBackOutAction(bool& Passthrough);                                                                             // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortSkillTreeViewer.GetViewParameters
	// void GetViewParameters(FVector2D& OutPanOffset, float& OutZoomLevel);                                                    // [0x2be3cc0] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeViewer.GetSelectedNodeId
	// FName GetSelectedNodeId();                                                                                               // [0x2be3c50] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeViewer.GetPageTotalNodes
	// int32_t GetPageTotalNodes(FName& SkillTreePageId);                                                                       // [0x2be3b70] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortSkillTreeViewer.GetPageLocked
	// bool GetPageLocked(FName& SkillTreePageId);                                                                              // [0x2be3ad0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortSkillTreeViewer.GetPageAquiredNodes
	// int32_t GetPageAquiredNodes(FName& SkillTreePageId);                                                                     // [0x2be3a30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortSkillTreeViewer.GetCurrenciesNeededForPage
	// void GetCurrenciesNeededForPage(FName& SkillTreePageId, TArray<UFortItemDefinition*>& OutCurrencies);                    // [0x2be3930] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeViewer.DrillDownToSubPage
	// void DrillDownToSubPage(FName& DrillDownSkillTreeNodeId, EFortAnimSpeed TransitionSpeed);                                // [0x2be34a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSkillTreeViewer.CanBackOutOfSubPage
	// bool CanBackOutOfSubPage();                                                                                              // [0x2be3470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSkillTreeViewer.BackOutOfSubPage
	// void BackOutOfSubPage(EFortAnimSpeed TransitionSpeed);                                                                   // [0x2be33f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSocialImportButton
/// Size: 0x0030 (0x000800 - 0x000830)
class UFortSocialImportButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
	CMember(UFortSocialImportPanel*)                   ActivePanel                                                 OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(ESocialImportPanelType)                    DesiredPanelType                                            OFFSET(get<T>, {0x820, 1, 0, 0})
	CMember(UClass*)                                   SocialImportPanelClass                                      OFFSET(get<T>, {0x828, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSocialImportButton.OnCaptionGenerated
	// void OnCaptionGenerated(FText& Caption);                                                                                 // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortSocialImportButton.DynamicHandleClicked
	// void DynamicHandleClicked(UCommonButton* Source);                                                                        // [0x2be3670] Final|Native|Private 
};

/// Class /Script/FortniteUI.FortSocialImportPanel
/// Size: 0x00D0 (0x0003F0 - 0x0004C0)
class UFortSocialImportPanel : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(UCommonButton*)                            Button_Import                                               OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Cancel                                               OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(UCommonButton*)                            Button_Claim                                                OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(UCommonButton*)                            Button_ErrorRetry                                           OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(UCommonButton*)                            Button_ErrorClose                                           OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(UOverlay*)                                 Overlay_Error                                               OFFSET(get<T>, {0x4B0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSocialImportPanel.ShowPanel
	// void ShowPanel();                                                                                                        // [0x2be43f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSocialImportPanel.OnWaitingViewRequested
	// void OnWaitingViewRequested();                                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSocialImportPanel.OnPanelTypeSet
	// void OnPanelTypeSet(ESocialImportPanelType NewType);                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSocialImportPanel.OnLauncherImportOpened
	// void OnLauncherImportOpened();                                                                                           // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSocialImportPanel.OnImportViewRequested
	// void OnImportViewRequested();                                                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSocialImportPanel.OnClaimViewRequested
	// void OnClaimViewRequested();                                                                                             // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSocialImportPanel.GetSocialPlatform
	// ESocialImportPanelPlatform GetSocialPlatform();                                                                          // [0x2be3c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSocialImportPanel.DynamicHandleImportClicked
	// void DynamicHandleImportClicked(UCommonButton* Button);                                                                  // [0x2be37f0] Final|Native|Public  
	// Function /Script/FortniteUI.FortSocialImportPanel.DynamicHandleErrorRetryClicked
	// void DynamicHandleErrorRetryClicked(UCommonButton* Button);                                                              // [0x2be3770] Final|Native|Public  
	// Function /Script/FortniteUI.FortSocialImportPanel.DynamicHandleErrorCloseClicked
	// void DynamicHandleErrorCloseClicked(UCommonButton* Button);                                                              // [0x2be36f0] Final|Native|Public  
	// Function /Script/FortniteUI.FortSocialImportPanel.DynamicHandleClaimClicked
	// void DynamicHandleClaimClicked(UCommonButton* Button);                                                                   // [0x2be35f0] Final|Native|Public  
	// Function /Script/FortniteUI.FortSocialImportPanel.DynamicHandleCancelClicked
	// void DynamicHandleCancelClicked(UCommonButton* Button);                                                                  // [0x2be3570] Final|Native|Public  
};

/// Class /Script/FortniteUI.FortSocialItemWidget
/// Size: 0x0000 (0x000218 - 0x000218)
class UFortSocialItemWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSocialItemWidget.SetSocialItem
	// void SetSocialItem(UFortSocialItem* InSocialItem);                                                                       // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSocialListView
/// Size: 0x0760 (0x000100 - 0x000860)
class UFortSocialListView : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2144;

public:
	CMember(UClass*)                                   SocialItemWidgetType                                        OFFSET(get<T>, {0x110, 8, 0, 0})
	SMember(FTableRowStyle)                            ListRowStyle                                                OFFSET(getStruct<T>, {0x118, 1720, 0, 0})
	CMember(TArray<UFortSocialItem*>)                  SocialList                                                  OFFSET(get<T>, {0x7D0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSocialListView.SetList
	// void SetList(TArray<UFortSocialItem*>& InList);                                                                          // [0x2be3f50] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSocialMenuPanel
/// Size: 0x0020 (0x0003F0 - 0x000410)
class UFortSocialMenuPanel : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UFortSocialMenuSlateWrapperWidget*)        SlateWrapper_Social                                         OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSocialMenuPanel.SetOnSocialMenuPanelClosedDelegate
	// void SetOnSocialMenuPanelClosedDelegate(DelegateProperty& OnPanelClosedDelegate);                                        // [0x2be4000] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSocialMenuSlateWrapperWidget
/// Size: 0x0050 (0x000100 - 0x000150)
class UFortSocialMenuSlateWrapperWidget : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
};

/// Class /Script/FortniteUI.FortSocialStyle
/// Size: 0x66D8 (0x000030 - 0x006708)
class UFortSocialStyle : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 26376;

public:
	SMember(FSocialStyle)                              Style                                                       OFFSET(getStruct<T>, {0x30, 26320, 0, 0})
	CMember(USocialStyleDataAsset*)                    OverrideStyle                                               OFFSET(get<T>, {0x6700, 8, 0, 0})
};

/// Class /Script/FortniteUI.FortSplashScreenWidget
/// Size: 0x0040 (0x0003C0 - 0x000400)
class UFortSplashScreenWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
};

/// Class /Script/FortniteUI.FortSquadIcon
/// Size: 0x0018 (0x000210 - 0x000228)
class UFortSquadIcon : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x210, 8, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               ImageSize                                                   OFFSET(get<T>, {0x218, 1, 0, 0})
	CMember(UImage*)                                   Icon                                                        OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadIcon.SetSquad
	// void SetSquad(FName& InName);                                                                                            // [0x2be9e10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadIcon.HandleDifferentSquadSetBP
	// void HandleDifferentSquadSetBP();                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSquadLandingPageDefenderSquadDetails
/// Size: 0x0010 (0x000210 - 0x000220)
class UFortSquadLandingPageDefenderSquadDetails : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(UCommonTextBlock*)                         OutpostName                                                 OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UCommonNumericTextBlock*)                  PowerRating                                                 OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadLandingPageDefenderSquadDetails.SetDefenderSquadInfo
	// void SetDefenderSquadInfo(FFortLandingPageDefenderSummaryInfo& DefenderSummaryInfo);                                     // [0x2be9830] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadLandingPageDefenderSquadDetails.HandleDefenderSquadInfoSetBP
	// void HandleDefenderSquadInfoSetBP(FFortLandingPageDefenderSummaryInfo& DefenderSummaryInfo);                             // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadLandingPageDefenderSquadDetails.HandleAddDefenderSquadMemberBP
	// void HandleAddDefenderSquadMemberBP(FName& SquadId, int32_t Index);                                                      // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSquadLandingPageDefenderSquadDetailsLocked
/// Size: 0x0008 (0x000210 - 0x000218)
class UFortSquadLandingPageDefenderSquadDetailsLocked : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	CMember(UCommonTextBlock*)                         OutpostName                                                 OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadLandingPageDefenderSquadDetailsLocked.SetDefenderSquadInfo
	// void SetDefenderSquadInfo(FFortLandingPageDefenderSummaryInfo& DefenderSummaryInfo);                                     // [0x2be9920] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSquadLandingPageDefenderSummary
/// Size: 0x0008 (0x000210 - 0x000218)
class UFortSquadLandingPageDefenderSummary : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSquadLandingPageDefenderSummary.HandleClearDefenderSquadDetailsBP
	// void HandleClearDefenderSquadDetailsBP();                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadLandingPageDefenderSummary.HandleAddLockedDefenderSquadDetailsBP
	// void HandleAddLockedDefenderSquadDetailsBP(FFortLandingPageDefenderSummaryInfo DefenderSummaryInfo);                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadLandingPageDefenderSummary.HandleAddDefenderSquadDetailsBP
	// void HandleAddDefenderSquadDetailsBP(FFortLandingPageDefenderSummaryInfo DefenderSummaryInfo);                           // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSquadLandingPageSurvivorSummary
/// Size: 0x0088 (0x000210 - 0x000298)
class UFortSquadLandingPageSurvivorSummary : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(UFortSquadStatValueWithIcon*)              FortitudeStatValue                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UFortSquadStatValueWithIcon*)              OffenseStatValue                                            OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UFortSquadStatValueWithIcon*)              ResistanceStatValue                                         OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UFortSquadStatValueWithIcon*)              TechStatValue                                               OFFSET(get<T>, {0x228, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadLandingPageSurvivorSummary.HandleClearSetBonusSummaryLineItemsBP
	// void HandleClearSetBonusSummaryLineItemsBP();                                                                            // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadLandingPageSurvivorSummary.HandleAddSetBonusSummaryLineItemBP
	// void HandleAddSetBonusSummaryLineItemBP(FFortAttributeModifierAccumulation AttributeModifierAccumulation);               // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSquadManagementItemViewContextBase
/// Size: 0x00D0 (0x000028 - 0x0000F8)
class UFortSquadManagementItemViewContextBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
};

/// Class /Script/FortniteUI.FortItemViewContext_SquadSlotsView
/// Size: 0x0008 (0x0000F8 - 0x000100)
class UFortItemViewContext_SquadSlotsView : public UFortSquadManagementItemViewContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Class /Script/FortniteUI.FortItemViewContext_SquadSlotItemPicker
/// Size: 0x0010 (0x0000F8 - 0x000108)
class UFortItemViewContext_SquadSlotItemPicker : public UFortSquadManagementItemViewContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
};

/// Class /Script/FortniteUI.FortItemViewContext_ExpeditionSquadSlotsView
/// Size: 0x0008 (0x000100 - 0x000108)
class UFortItemViewContext_ExpeditionSquadSlotsView : public UFortItemViewContext_SquadSlotsView
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
};

/// Class /Script/FortniteUI.FortItemViewContext_ExpeditionSquadSlotItemPicker
/// Size: 0x0008 (0x000108 - 0x000110)
class UFortItemViewContext_ExpeditionSquadSlotItemPicker : public UFortItemViewContext_SquadSlotItemPicker
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
};

/// Class /Script/FortniteUI.FortSquadSlotDetailsPanel
/// Size: 0x0060 (0x000210 - 0x000270)
class UFortSquadSlotDetailsPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(UFortSquadSlotItemDetailsHostPanel*)       ItemDetailsPanel                                            OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x240, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.TryGetItemToPreviewInSlot
	// bool TryGetItemToPreviewInSlot(UFortItem*& OutItemToPreviewInSlot);                                                      // [0x2be9fb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.SetScrollWidget
	// void SetScrollWidget();                                                                                                  // [0x2be9d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.SetIdOfSquadSlotToManageBP
	// void SetIdOfSquadSlotToManageBP(FName& SquadId, int32_t SquadSlotIndex);                                                 // [0x2be9a10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.IsSquadSlotLockedBP
	// bool IsSquadSlotLockedBP();                                                                                              // [0x2be9660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.HandleSquadSlotStateChangedBP
	// void HandleSquadSlotStateChangedBP();                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.HandleSquadSlotRestrictionFactorsChangedBP
	// void HandleSquadSlotRestrictionFactorsChangedBP();                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.HandleDifferentSquadSlotSetBP
	// void HandleDifferentSquadSlotSetBP();                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.GetSlottingRestrictionReasons
	// TArray<EFortSquadSlottingRestrictionReason> GetSlottingRestrictionReasons();                                             // [0x2be91f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.GetItemInSquadSlotBP
	// UFortItem* GetItemInSquadSlotBP(ULocalPlayer* LocalPlayer);                                                              // [0x2be9040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotDetailsPanel.GetIdOfSquadSlotToManageBP
	// void GetIdOfSquadSlotToManageBP(FName& OutSquadId, int32_t& OutSquadSlotIndex);                                          // [0x2be8d60] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSquadSlotItemDetailElementWidget
/// Size: 0x0028 (0x000258 - 0x000280)
class UFortSquadSlotItemDetailElementWidget : public UFortItemDetailElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotItemDetailElementWidget.SetIdOfSquadSlotToManageBP
	// void SetIdOfSquadSlotToManageBP(FName& SquadId, int32_t SquadSlotIndex);                                                 // [0x2be9ae0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotItemDetailElementWidget.IsSquadSlotLockedBP
	// bool IsSquadSlotLockedBP();                                                                                              // [0x2be9690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotItemDetailElementWidget.HandlePostDifferentSquadSlotSetBP
	// void HandlePostDifferentSquadSlotSetBP();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotItemDetailElementWidget.GetItemInSquadSlotBP
	// UFortItem* GetItemInSquadSlotBP(ULocalPlayer* LocalPlayer);                                                              // [0x2be90d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotItemDetailElementWidget.GetIdOfSquadSlotToManageBP
	// void GetIdOfSquadSlotToManageBP(FName& OutSquadId, int32_t& OutSquadSlotIndex);                                          // [0x2be8e40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSquadSlotItemDetailsHostPanel
/// Size: 0x0028 (0x000278 - 0x0002A0)
class UFortSquadSlotItemDetailsHostPanel : public UFortItemDetailsHostPanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotItemDetailsHostPanel.SetIdOfSquadSlotToManageBP
	// void SetIdOfSquadSlotToManageBP(FName& SquadId, int32_t SquadSlotIndex);                                                 // [0x2be9bb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotItemDetailsHostPanel.IsSquadSlotLockedBP
	// bool IsSquadSlotLockedBP();                                                                                              // [0x2be96c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotItemDetailsHostPanel.GetItemInSquadSlotBP
	// UFortItem* GetItemInSquadSlotBP(ULocalPlayer* LocalPlayer);                                                              // [0x2be9160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotItemDetailsHostPanel.GetIdOfSquadSlotToManageBP
	// void GetIdOfSquadSlotToManageBP(FName& OutSquadId, int32_t& OutSquadSlotIndex);                                          // [0x2be8f20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSquadSlotItemPicker
/// Size: 0x01D8 (0x000278 - 0x000450)
class UFortSquadSlotItemPicker : public UFortItemPickerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(UMulticastDelegate)                        OnSortChanged                                               OFFSET(get<T>, {0x310, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotItemPicker.SetSortTypes
	// void SetSortTypes(FSquadSlotSortTypes SquadSlotSortTypes);                                                               // [0x2be9d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotItemPicker.SetIdOfSquadSlotToManageBP
	// void SetIdOfSquadSlotToManageBP(FName& SquadId, int32_t SquadSlotIndex);                                                 // [0x2be9bb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotItemPicker.GetIdOfSquadSlotToManageBP
	// void GetIdOfSquadSlotToManageBP(FName& OutSquadId, int32_t& OutSquadSlotIndex);                                          // [0x2be8f20] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotItemPicker.FortSquadSlotSortChanged__DelegateSignature
	// void FortSquadSlotSortChanged__DelegateSignature(ESquadSlotSortType CurrentSortType, ESquadSlotType SquadSlotType);      // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortSquadSlotItemPicker.CycleSortType
	// void CycleSortType();                                                                                                    // [0x2be8d10] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSquadSlotItemPickerTileButton
/// Size: 0x0018 (0x000830 - 0x000848)
class UFortSquadSlotItemPickerTileButton : public UFortItemPickerButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2120;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotItemPickerTileButton.HandleSlottingRestrictionReasonsChanged
	// void HandleSlottingRestrictionReasonsChanged();                                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotItemPickerTileButton.HandleItemSlottedToDifferentSquad
	// void HandleItemSlottedToDifferentSquad(FHomebaseSquadSlotId& SquadSlotId);                                               // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotItemPickerTileButton.GetSlottingRestrictionReasons
	// TArray<EFortSquadSlottingRestrictionReason> GetSlottingRestrictionReasons();                                             // [0x2be9270] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSquadSlotSelectorPopupMenu
/// Size: 0x0000 (0x0003E0 - 0x0003E0)
class UFortSquadSlotSelectorPopupMenu : public UFortPopupMenu
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotSelectorPopupMenu.GetHostButton
	// UFortSquadSlotSelectorButton* GetHostButton();                                                                           // [0x2be8d30] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSquadSlotSurvivorTraitMatchesDetailWidget
/// Size: 0x0028 (0x000280 - 0x0002A8)
class UFortSquadSlotSurvivorTraitMatchesDetailWidget : public UFortSquadSlotItemDetailElementWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(bool)                                      IsSquadLeaderSlot                                           OFFSET(get<bool>, {0x280, 1, 0, 0})
	DMember(bool)                                      LeaderMatchesSquadType                                      OFFSET(get<bool>, {0x281, 1, 0, 0})
	DMember(int32_t)                                   SubordinatePersonalityMatchCount                            OFFSET(get<int32_t>, {0x284, 4, 0, 0})
	DMember(bool)                                      MatchesLeaderPersonality                                    OFFSET(get<bool>, {0x288, 1, 0, 0})
	DMember(int32_t)                                   MatchingSetBonusCount                                       OFFSET(get<int32_t>, {0x28C, 4, 0, 0})
	DMember(int32_t)                                   SetBonusSize                                                OFFSET(get<int32_t>, {0x290, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotSurvivorTraitMatchesDetailWidget.HandleTraitValuesUpdatedBP
	// void HandleTraitValuesUpdatedBP();                                                                                       // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSquadSlotSelectorButton
/// Size: 0x0080 (0x000800 - 0x000880)
class UFortSquadSlotSelectorButton : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2176;

public:
	CMember(UMulticastDelegate)                        OnRequestOpenSquadSlotEvent                                 OFFSET(get<T>, {0x828, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRequestViewInAllEvent                                     OFFSET(get<T>, {0x838, 16, 0, 0})
	CMember(UFortSquadSlotWidget*)                     SquadSlotWidget                                             OFFSET(get<T>, {0x848, 8, 0, 0})
	CMember(UMenuAnchor*)                              PopupMenuAnchor                                             OFFSET(get<T>, {0x850, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x858, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.ViewInAll
	// void ViewInAll();                                                                                                        // [0x2beeaa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.SquadSlotWidgetUpdated
	// void SquadSlotWidgetUpdated();                                                                                           // [0x2b877e0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.SetIdOfSquadSlotToManageBP
	// void SetIdOfSquadSlotToManageBP(FName& SquadId, int32_t SquadSlotIndex);                                                 // [0x2bee3d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.OpenSquadSlot
	// void OpenSquadSlot();                                                                                                    // [0x2bee0d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.IsSquadSlotLockedBP
	// bool IsSquadSlotLockedBP();                                                                                              // [0x2bede50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.HandlePreDifferentSquadSlotSetBP
	// void HandlePreDifferentSquadSlotSetBP();                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.HandlePostDifferentSquadSlotSetBP
	// void HandlePostDifferentSquadSlotSetBP();                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.GetPopupMenu
	// UWidget* GetPopupMenu();                                                                                                 // [0x2bed7d0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.GetInPreviewMode
	// bool GetInPreviewMode();                                                                                                 // [0x2bed5a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotSelectorButton.GetIdOfSquadSlotToManageBP
	// void GetIdOfSquadSlotToManageBP(FName& OutSquadId, int32_t& OutSquadSlotIndex);                                          // [0x2bed360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSquadSlotsView
/// Size: 0x00E8 (0x000210 - 0x0002F8)
class UFortSquadSlotsView : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	CMember(UMulticastDelegate)                        OnDifferentSquadSlotSelectedEvent                           OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRequestOpenSquadSlotEvent                                 OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnRequestViewInAllEvent                                     OFFSET(get<T>, {0x240, 16, 0, 0})
	DMember(int32_t)                                   IndexOfSelectedSquadSlot                                    OFFSET(get<int32_t>, {0x250, 4, 0, 0})
	DMember(bool)                                      bSlotButtonsRequireSelection                                OFFSET(get<bool>, {0x254, 1, 0, 0})
	DMember(bool)                                      bInPreviewMode                                              OFFSET(get<bool>, {0x255, 1, 0, 0})
	CMember(TMap<ESquadSlotType, FSquadSlotSortTypes>) SquadSlotSortTypesMap                                       OFFSET(get<T>, {0x258, 80, 0, 0})
	CMember(UFortCommittableButtonGroup*)              SquadSlotButtonGroup                                        OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x2E0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotsView.TryGetStaticSquadDataBP
	// bool TryGetStaticSquadDataBP(FHomebaseSquad& OutSquadData);                                                              // [0x2bee9a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotsView.TryGetSelectedSquadSlotSortTypes
	// bool TryGetSelectedSquadSlotSortTypes(FSquadSlotSortTypes& OutSlotSortTypes);                                            // [0x2bee7e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotsView.SetIsSelectionLocked
	// void SetIsSelectionLocked(bool ShouldSelectionBeLocked);                                                                 // [0x2bee720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotsView.SetInPreviewMode
	// void SetInPreviewMode(bool bPreview);                                                                                    // [0x2bee690] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotsView.SetIdOfSquadToManageBP
	// void SetIdOfSquadToManageBP(FName& SquadId);                                                                             // [0x2bee600] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotsView.SelectSlot
	// void SelectSlot(int32_t SquadSlotIndex);                                                                                 // [0x2bee220] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotsView.OnDifferentSquadSlotSelected__DelegateSignature
	// void OnDifferentSquadSlotSelected__DelegateSignature(int32_t SquadSlotIndex);                                            // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortSquadSlotsView.HandleSelectedButtonChanged
	// void HandleSelectedButtonChanged(UCommonButton* SelectedButton, int32_t ButtonIndex);                                    // [0x2bedd90] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadSlotsView.HandleRequestViewInAll
	// void HandleRequestViewInAll(int32_t SquadSlotIndex);                                                                     // [0x2bedd10] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadSlotsView.HandleRequestOpenSquadSlot
	// void HandleRequestOpenSquadSlot(int32_t SquadSlotIndex);                                                                 // [0x2bedc90] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadSlotsView.HandleHoveredButtonChanged
	// void HandleHoveredButtonChanged(UCommonButton* HoveredButton, int32_t ButtonIndex);                                      // [0x2bedb20] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadSlotsView.HandleButtonDoubleClicked
	// void HandleButtonDoubleClicked(UCommonButton* CommittedButton, int32_t ButtonIndex);                                     // [0x2beda60] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadSlotsView.HandleButtonClicked
	// void HandleButtonClicked(UCommonButton* CommittedButton, int32_t ButtonIndex);                                           // [0x2bed9a0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSquadSlotsView.GetIndexOfSelectedSquadSlot
	// int32_t GetIndexOfSelectedSquadSlot();                                                                                   // [0x2bed5d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotsView.GetIdOfSquadToManageBP
	// FName GetIdOfSquadToManageBP();                                                                                          // [0x2bed560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotsView.CreateAndAddSquadSlotButton
	// UFortSquadSlotSelectorButton* CreateAndAddSquadSlotButton(int32_t SquadSlotIndex, FHomebaseSquadSlot& SquadSlotDefinition, UWidget*& OutSquadSlotButtonHost); // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSquadSlotWidget
/// Size: 0x00F0 (0x000100 - 0x0001F0)
class UFortSquadSlotWidget : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(EFortItemCardSize)                         ItemCardSize                                                OFFSET(get<T>, {0x128, 1, 0, 0})
	CMember(UFortMultiSizeItemCard*)                   SlottedItemCard                                             OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   ItemViewContext                                             OFFSET(get<T>, {0x1D0, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadSlotWidget.SetIdOfSquadSlotToManageBP
	// void SetIdOfSquadSlotToManageBP(FName& SquadId, int32_t SquadSlotIndex);                                                 // [0x2bee4a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotWidget.SetCardSize
	// void SetCardSize(EFortItemCardSize CardSize);                                                                            // [0x2bee350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadSlotWidget.IsSquadSlotLockedBP
	// bool IsSquadSlotLockedBP();                                                                                              // [0x2bede80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotWidget.GetItemInSquadSlotBP
	// UFortItem* GetItemInSquadSlotBP(ULocalPlayer* LocalPlayer);                                                              // [0x2bed600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSquadSlotWidget.GetIdOfSquadSlotToManageBP
	// void GetIdOfSquadSlotToManageBP(FName& OutSquadId, int32_t& OutSquadSlotIndex);                                          // [0x2bed440] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSquadStatsWidgetBase
/// Size: 0x0038 (0x000210 - 0x000248)
class UFortSquadStatsWidgetBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(TArray<UFortAttributeListItem_NUI*>)       OverviewStats                                               OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UFortAttributeList_NUI*)                   DetailedStats                                               OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadStatsWidgetBase.RequestStatsUpdate
	// void RequestStatsUpdate();                                                                                               // [0x2bee200] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadStatsWidgetBase.RequestShowPreviewStats
	// void RequestShowPreviewStats();                                                                                          // [0x2bee1e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadStatsWidgetBase.HandleSquadSlottingPreviewStateChanged
	// void HandleSquadSlottingPreviewStateChanged();                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSquadStatsWidgetBase.GetLocalPlayerId
	// FUniqueNetIdRepl GetLocalPlayerId();                                                                                     // [0x2bed690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSquadStatValueWithIcon
/// Size: 0x0058 (0x000210 - 0x000268)
class UFortSquadStatValueWithIcon : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x210, 32, 0, 0})
	SMember(FGameplayAttribute)                        TeamAttribute                                               OFFSET(getStruct<T>, {0x230, 32, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               ImageSize                                                   OFFSET(get<T>, {0x250, 1, 0, 0})
	CMember(UCommonNumericTextBlock*)                  Value                                                       OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(UImage*)                                   Icon                                                        OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadStatValueWithIcon.HandleDifferentAttributeSetBP
	// void HandleDifferentAttributeSetBP();                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSquadTypeLandingPageBase
/// Size: 0x0040 (0x0003F0 - 0x000430)
class UFortSquadTypeLandingPageBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(EFortHomebaseSquadType)                    SquadType                                                   OFFSET(get<T>, {0x3F0, 1, 0, 0})
	SMember(FDataTableRowHandle)                       ManageInputActionRowHandle                                  OFFSET(getStruct<T>, {0x3F8, 16, 0, 0})
	SMember(FDataTableRowHandle)                       BackInputActionRowHandle                                    OFFSET(getStruct<T>, {0x408, 16, 0, 0})
	CMember(EFortFrontendInventoryFilter)              ItemManagementScreenFilter                                  OFFSET(get<T>, {0x418, 1, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    SquadSelectorButtons                                        OFFSET(get<T>, {0x420, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSquadTypeLandingPageBase.HandlePendingNavigationOp
	// void HandlePendingNavigationOp();                                                                                        // [0x2bedc70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortSquadTypeLandingPageBase.HandleManageInputAction
	// void HandleManageInputAction(bool& bPassThrough);                                                                        // [0x2bedbe0] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortSquadTypeLandingPageBase.HandleBackInputAction
	// void HandleBackInputAction(bool& bPassThrough);                                                                          // [0x2bed910] Final|Native|Protected|HasOutParms 
	// Function /Script/FortniteUI.FortSquadTypeLandingPageBase.CreateAndAddSquadButton
	// UFortSquadSelectorButton* CreateAndAddSquadButton(FName& SquadId);                                                       // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortStatIcon
/// Size: 0x0030 (0x000210 - 0x000240)
class UFortStatIcon : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x210, 32, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               ImageSize                                                   OFFSET(get<T>, {0x230, 1, 0, 0})
	CMember(UImage*)                                   Icon                                                        OFFSET(get<T>, {0x238, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortStatIcon.SetAttribute
	// void SetAttribute(FGameplayAttribute& InAttribute);                                                                      // [0x2bee2a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortStatIcon.HandleDifferentAttributeSetBP
	// void HandleDifferentAttributeSetBP();                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortStoreContext
/// Size: 0x00B0 (0x000028 - 0x0000D8)
class UFortStoreContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(UMulticastDelegate)                        OnCardPackOffersChanged                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnStoreStateChange                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FCardPackOffer>)                    Offers                                                      OFFSET(get<T>, {0x50, 16, 0, 0})
	SMember(FDateTime)                                 NextStoreRefresh                                            OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	CMember(TArray<FCard>)                             CardList                                                    OFFSET(get<T>, {0x68, 16, 0, 0})
	DMember(int32_t)                                   CardIndex                                                   OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	SMember(FOpenedCardPack)                           OpenedCardPack                                              OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	CMember(EFortRarity)                               LastCardRarity                                              OFFSET(get<T>, {0x90, 1, 0, 0})
	CMember(TArray<FSoftObjectPath>)                   MissingAssetsAttemptedAsyncLoad                             OFFSET(get<T>, {0xC8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortStoreContext.StoreHasStarsForSale
	// bool StoreHasStarsForSale();                                                                                             // [0x2bee7b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.RealMoneyPurchaseStart
	// void RealMoneyPurchaseStart();                                                                                           // [0x2bee1c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.RealMoneyPurchaseFinished
	// void RealMoneyPurchaseFinished();                                                                                        // [0x2bee1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.OpenWebPayment
	// bool OpenWebPayment(FString AttemptedMTXOfferId);                                                                        // [0x2bee0f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.MakePurchase
	// ECardPackPurchaseError MakePurchase(FCardPackOffer& Offer, int32_t Quantity);                                            // [0x2bedf60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.MakeChoice
	// bool MakeChoice(int32_t ChoiceIdx);                                                                                      // [0x2beded0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.IsWaitingForMcp
	// bool IsWaitingForMcp();                                                                                                  // [0x2bedeb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortStoreContext.GetTimeUntilMarketplaceRefresh
	// FTimespan GetTimeUntilMarketplaceRefresh();                                                                              // [0x2bed8d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.GetTimeUntilDailyLimitReset
	// FTimespan GetTimeUntilDailyLimitReset();                                                                                 // [0x2bed890] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.GetStoreState
	// EFortStoreState GetStoreState();                                                                                         // [0x2bbaca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortStoreContext.GetRarityColor
	// FLinearColor GetRarityColor(EFortRarity Rarity);                                                                         // [0x2bed800] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.GetPreviousState
	// EFortStoreState GetPreviousState();                                                                                      // [0x2bbc540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortStoreContext.GetNumUnopenedCardPacksRemaining
	// int32_t GetNumUnopenedCardPacksRemaining(UFortCardPackItemDefinition* PackType);                                         // [0x2bed740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortStoreContext.GetCard
	// bool GetCard(int32_t CardIdx, FCard& ResultOut);                                                                         // [0x2bed270] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortStoreContext.GetAccountItems
	// void GetAccountItems(TArray<UFortAccountItemDefinition*>& AccountItemDefinitions, TArray<UFortAccountItem*>& AccountItems); // [0x2bed150] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.FreshenCache
	// void FreshenCache();                                                                                                     // [0x2bed130] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.FireInteractionAnalyticsEvent
	// void FireInteractionAnalyticsEvent(FString Interaction, FString Details);                                                // [0x2bed040] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortStoreContext.ExitWebPayment
	// bool ExitWebPayment();                                                                                                   // [0x2bed010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.ExitSummary
	// bool ExitSummary();                                                                                                      // [0x2becfe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.ExitRealMoneyStore
	// void ExitRealMoneyStore();                                                                                               // [0x2becfc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.ExitCurrencyStore
	// bool ExitCurrencyStore();                                                                                                // [0x2becf90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.ExitCardPackStore
	// bool ExitCardPackStore();                                                                                                // [0x2becf60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.ErrorOccurred
	// bool ErrorOccurred(FString ErrorAnalytics);                                                                              // [0x2beceb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.EnterRealMoneyStore
	// void EnterRealMoneyStore();                                                                                              // [0x2bece90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.EnterCurrencyStore
	// bool EnterCurrencyStore(FString AttemptedPurchaseCardPackId);                                                            // [0x2becde0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.EnterCardPackStore
	// bool EnterCardPackStore();                                                                                               // [0x2becdb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.DismissError
	// void DismissError();                                                                                                     // [0x2becd90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.ChoiceResultComplete
	// bool ChoiceResultComplete();                                                                                             // [0x2becd60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.CardPackOpeningComplete
	// bool CardPackOpeningComplete();                                                                                          // [0x2becd30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.CardPackDestroyComplete
	// bool CardPackDestroyComplete();                                                                                          // [0x2becd00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.CardFrontRevealComplete
	// bool CardFrontRevealComplete();                                                                                          // [0x2beccd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.CardFlipComplete
	// bool CardFlipComplete();                                                                                                 // [0x2becca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.CardExitComplete
	// bool CardExitComplete();                                                                                                 // [0x2becc70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.CardEntryComplete
	// bool CardEntryComplete();                                                                                                // [0x2becc40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.CardBackRevealComplete
	// bool CardBackRevealComplete();                                                                                           // [0x2becc10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortStoreContext.CardAddedToSummaryComplete
	// bool CardAddedToSummaryComplete();                                                                                       // [0x2becbe0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortStorefront
/// Size: 0x0000 (0x000218 - 0x000218)
class UFortStorefront : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
};

/// Class /Script/FortniteUI.FortStoreRootBase
/// Size: 0x0010 (0x0003C0 - 0x0003D0)
class UFortStoreRootBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
};

/// Class /Script/FortniteUI.StoreCardObject
/// Size: 0x0018 (0x000028 - 0x000040)
class UStoreCardObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FCard)                                     Card                                                        OFFSET(getStruct<T>, {0x28, 24, 0, 0})
};

/// Class /Script/FortniteUI.FortStoreSummary
/// Size: 0x0020 (0x0003C0 - 0x0003E0)
class UFortStoreSummary : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(TArray<UStoreCardObject*>)                 StoreCardObjects                                            OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(UCommonTileView*)                          TileView                                                    OFFSET(get<T>, {0x3D0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortStoreSummary.SetCards
	// void SetCards(TArray<FCard>& Cards);                                                                                     // [0x2bf4600] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSubGameSelectBase
/// Size: 0x0000 (0x0003C0 - 0x0003C0)
class UFortSubGameSelectBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSubGameSelectBase.ShowRedeemCodeScreen
	// void ShowRedeemCodeScreen(ESubGame SubGame, DelegateProperty& CompletionDelegate);                                       // [0x2bf4b90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSubGameSelectBase.GetUpsellStorefrontNames
	// void GetUpsellStorefrontNames(ESubGame SubGame, TArray<FString>& OutStorefrontNames);                                    // [0x2bf40e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSubGameSelectBase.GetShortDescription
	// bool GetShortDescription(ESubGame SubGame, FText& ShortDescription);                                                     // [0x2bf35f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSubGameSelectBase.GetIsOnSale
	// bool GetIsOnSale(ESubGame SubGame);                                                                                      // [0x2bf3410] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSubGameSelectBase.GetFullDescription
	// bool GetFullDescription(ESubGame SubGame, FText& FullDescription);                                                       // [0x2bf32f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSubGameSelectButtonBase
/// Size: 0x0000 (0x000210 - 0x000210)
class UFortSubGameSelectButtonBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:


	/// Functions
	// Function /Script/FortniteUI.FortSubGameSelectButtonBase.UpdateButtonState
	// void UpdateButtonState(bool bVisible);                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSurvivorSquadManagementScreen
/// Size: 0x00E0 (0x000500 - 0x0005E0)
class UFortSurvivorSquadManagementScreen : public UFortSquadManagementScreenBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1504;

public:
	CMember(UFortSurvivorSquadStatMatchesBase*)        StatMatchesWidget                                           OFFSET(get<T>, {0x500, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSurvivorSquadManagementScreen.PlayFeedbackForSlottingPerson
	// void PlayFeedbackForSlottingPerson(UFortWorker* Worker, int32_t SlotIndex, FFortSurvivorSquadSlottingFeedbackData& FeedbackData); // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortSurvivorSquadManagementScreen.AutoSlotSquad
	// void AutoSlotSquad();                                                                                                    // [0x2bf2cb0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSurvivorSquadSelectorButton
/// Size: 0x0020 (0x000820 - 0x000840)
class UFortSurvivorSquadSelectorButton : public UFortSquadSelectorButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2112;

public:
	CMember(TArray<FGameplayAttribute>)                FortStatAttributes                                          OFFSET(get<T>, {0x820, 16, 0, 0})
	CMember(TArray<FGameplayAttribute>)                FortTeamStatAttributes                                      OFFSET(get<T>, {0x830, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSurvivorSquadSelectorButton.TryGetSummaryStats
	// bool TryGetSummaryStats(FFortSurvivorSquadSelectorButtonSummaryStats& OutSummaryStats);                                  // [0x2bf4ed0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortSurvivorSquadSelectorButton.TryGetSquadMembers
	// bool TryGetSquadMembers(TArray<UFortWorker*>& OutSquadMembers);                                                          // [0x2bf4e10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortSurvivorSquadSelectorButton.TryGetPersonalityMatches
	// bool TryGetPersonalityMatches(FFortSurvivorSquadSelectorButtonPersonalityMatches& OutPersonalityMatches);                // [0x2bf4d10] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortSurvivorSquadStatMatchBase
/// Size: 0x0378 (0x000210 - 0x000588)
class UFortSurvivorSquadStatMatchBase : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1416;

public:
	SMember(FFortUISurvivorSquadStatMatch)             StatMatch                                                   OFFSET(getStruct<T>, {0x218, 880, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSurvivorSquadStatMatchBase.OnStatMatchUpdated
	// void OnStatMatchUpdated(FFortUISurvivorSquadStatMatch UpdatedMatch);                                                     // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSurvivorSquadStatMatchesBase
/// Size: 0x0030 (0x000240 - 0x000270)
class UFortSurvivorSquadStatMatchesBase : public UFortSquadStatDetailsWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(UClass*)                                   StatMatchClass                                              OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(bool)                                      bSummaryView                                                OFFSET(get<bool>, {0x248, 1, 0, 0})
	CMember(TArray<UFortSurvivorSquadStatMatchBase*>)  StatMatches                                                 OFFSET(get<T>, {0x250, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSurvivorSquadStatMatchesBase.TryGetStaticSquadDataBP
	// bool TryGetStaticSquadDataBP(FHomebaseSquad& OutSquadData);                                                              // [0x2bee9a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSurvivorSquadStatMatchesBase.SetSummaryView
	// void SetSummaryView(bool bInSummaryView);                                                                                // [0x2bf4950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortSurvivorSquadStatMatchesBase.SetIdOfSquadToManageBP
	// void SetIdOfSquadToManageBP(FName& SquadId);                                                                             // [0x2bee600] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortSurvivorSquadStatMatchesBase.HandleDifferentSquadSetBP
	// void HandleDifferentSquadSetBP();                                                                                        // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortSurvivorSquadStatMatchesBase.GetIdOfSquadToManageBP
	// FName GetIdOfSquadToManageBP();                                                                                          // [0x2bed560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSurvivorSquadStatMatchesBase.AddStatMatch
	// void AddStatMatch(UFortSurvivorSquadStatMatchBase* SetBonus);                                                            // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSurvivorSquadSummaryStatItem
/// Size: 0x0020 (0x000210 - 0x000230)
class UFortSurvivorSquadSummaryStatItem : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(TEnumAsByte<EFortBrushSize>)               ImageSize                                                   OFFSET(get<T>, {0x210, 1, 0, 0})
	CMember(UImage*)                                   Icon                                                        OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Value                                                       OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Name                                                        OFFSET(get<T>, {0x228, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSurvivorSquadSummaryStatItem.SetAttributeModifierAccumulation
	// void SetAttributeModifierAccumulation(FFortAttributeModifierAccumulation& Accumulation);                                 // [0x2bf44c0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortSwipePanel
/// Size: 0x01A8 (0x000118 - 0x0002C0)
class UFortSwipePanel : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FFortSwipeDetector)                        SwipeDetector                                               OFFSET(getStruct<T>, {0x120, 320, 0, 0})
	DMember(bool)                                      bBeginSwipeOnPointerEnter                                   OFFSET(get<bool>, {0x260, 1, 0, 0})
	DMember(bool)                                      bConsumePointerInput                                        OFFSET(get<bool>, {0x261, 1, 0, 0})
	CMember(UMulticastDelegate)                        OnSwipeLeft                                                 OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSwipeRight                                                OFFSET(get<T>, {0x278, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSwipeUp                                                   OFFSET(get<T>, {0x288, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSwipeDown                                                 OFFSET(get<T>, {0x298, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSwipePanel.SwipeUp
	// void SwipeUp();                                                                                                          // [0x2bf4cf0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSwipePanel.SwipeRight
	// void SwipeRight();                                                                                                       // [0x2bf4cd0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSwipePanel.SwipeLeft
	// void SwipeLeft();                                                                                                        // [0x2bf4cb0] Final|Native|Private 
	// Function /Script/FortniteUI.FortSwipePanel.SwipeDown
	// void SwipeDown();                                                                                                        // [0x2bf4c90] Final|Native|Private 
	// Function /Script/FortniteUI.FortSwipePanel.GetSwipeInfo
	// void GetSwipeInfo(int32_t& OutIndex, FVector2D& OutSwipePercentage);                                                     // [0x2bf3890] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortSwipePanelSlot
/// Size: 0x0010 (0x000038 - 0x000048)
class UFortSwipePanelSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteUI.FortSZAwareImage
/// Size: 0x0008 (0x0001D8 - 0x0001E0)
class UFortSZAwareImage : public UImage
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	DMember(bool)                                      AnchorLeft                                                  OFFSET(get<bool>, {0x1D8, 1, 0, 0})
	DMember(bool)                                      AnchorRight                                                 OFFSET(get<bool>, {0x1D9, 1, 0, 0})
	DMember(bool)                                      AnchorTop                                                   OFFSET(get<bool>, {0x1DA, 1, 0, 0})
	DMember(bool)                                      AnchorBottom                                                OFFSET(get<bool>, {0x1DB, 1, 0, 0})
};

/// Class /Script/FortniteUI.FortTabButtonInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortTabButtonInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortTabButtonInterface.SetTabLabelInfo
	// void SetTabLabelInfo(FFortTabButtonLabelInfo& TabLabelInfo);                                                             // [0x2bf4ab0] Native|Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortTabListWidgetBase
/// Size: 0x0078 (0x0002D8 - 0x000350)
class UFortTabListWidgetBase : public UCommonTabListWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(UMulticastDelegate)                        OnTabContentCreated                                         OFFSET(get<T>, {0x2D8, 16, 0, 0})
	CMember(TArray<FFortTabListRegistrationInfo>)      PreregisteredTabInfoArray                                   OFFSET(get<T>, {0x2E8, 16, 0, 0})
	CMember(TMap<FName, FFortTabButtonLabelInfo>)      PendingTabLabelInfoMap                                      OFFSET(get<T>, {0x2F8, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTabListWidgetBase.SetTabHiddenState
	// void SetTabHiddenState(FName TabNameID, bool bHidden);                                                                   // [0x2bf49e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTabListWidgetBase.SetPreviousTabInputActionData
	// void SetPreviousTabInputActionData(FDataTableRowHandle PreviousData);                                                    // [0x2bf48c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortTabListWidgetBase.SetNextTabInputActionData
	// void SetNextTabInputActionData(FDataTableRowHandle NextData);                                                            // [0x2bf47b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortTabListWidgetBase.RegisterFortTab
	// bool RegisterFortTab(FName TabNameID, UClass* TabButtonType, FFortTabButtonLabelInfo& LabelInfo, UWidget* ContentWidget); // [0x2bf4300] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortTabListWidgetBase.RegisterAllPreregisteredTabInfos
	// void RegisterAllPreregisteredTabInfos();                                                                                 // [0x2bf42e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTabListWidgetBase.OnTabContentCreated__DelegateSignature
	// void OnTabContentCreated__DelegateSignature(FName TabId, UCommonUserWidget* TabWidget);                                  // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortTabListWidgetBase.IsLastTabActive
	// bool IsLastTabActive();                                                                                                  // [0x2bf42b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTabListWidgetBase.IsFirstTabActive
	// bool IsFirstTabActive();                                                                                                 // [0x2bf4280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTabListWidgetBase.GetPreregisteredTabInfo
	// bool GetPreregisteredTabInfo(FName TabNameID, FFortTabListRegistrationInfo& OutTabInfo);                                 // [0x2bf34a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortTextStyleList
/// Size: 0x0008 (0x000210 - 0x000218)
class UFortTextStyleList : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	SMember(FName)                                     TextStylesPath                                              OFFSET(getStruct<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTextStyleList.GetTextStyles
	// TArray<UClass*> GetTextStyles();                                                                                         // [0x2bf3970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortTheaterSelect
/// Size: 0x0050 (0x0003C0 - 0x000410)
class UFortTheaterSelect : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(UOverlay*)                                 OverlayMain                                                 OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTheaterSelect.OnNavigationRight
	// void OnNavigationRight();                                                                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortTheaterSelect.OnNavigationLeft
	// void OnNavigationLeft();                                                                                                 // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortTheaterSelect.GetTheaterRecommendedRatingRange
	// bool GetTheaterRecommendedRatingRange(FString UniqueId, int32_t& Minimum, int32_t& Maximum);                             // [0x2bf39f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTheaterSelect.GetSurvivalCMSText
	// bool GetSurvivalCMSText(FText& Title, FText& Body);                                                                      // [0x2bf3710] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortTierIndicator
/// Size: 0x0020 (0x000100 - 0x000120)
class UFortTierIndicator : public UWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TWeakObjectPtr<UFortItem*>)                ItemToRepresent                                             OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               BrushSize                                                   OFFSET(get<T>, {0x108, 1, 0, 0})
	DMember(float)                                     InterPipPadding                                             OFFSET(get<float>, {0x10C, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTierIndicator.SetPreviewState
	// void SetPreviewState(int32_t TierIncrease);                                                                              // [0x2bf4840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTierIndicator.SetItemToRepresent
	// void SetItemToRepresent(UFortItem* ItemToRepresent);                                                                     // [0x2bf4730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTierIndicator.SetInterPipPadding
	// void SetInterPipPadding(float InterPipPadding);                                                                          // [0x2bf46b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTierIndicator.SetBrushSize
	// void SetBrushSize(TEnumAsByte<EFortBrushSize> BrushSize);                                                                // [0x2bf4580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTierIndicator.ClearPreviewState
	// void ClearPreviewState();                                                                                                // [0x2bf2cd0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortTimelineBase
/// Size: 0x0010 (0x0003F0 - 0x000400)
class UFortTimelineBase : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(UFortReplayContext*)                       ReplayContext                                               OFFSET(get<T>, {0x3F0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTimelineBase.GetProgressBarWidget
	// UWidget* GetProgressBarWidget();                                                                                         // [0x154a140] Event|Public|BlueprintEvent|Const 
	// Function /Script/FortniteUI.FortTimelineBase.ClearTimelineMarkers
	// void ClearTimelineMarkers();                                                                                             // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTimelineBase.AddReplayEventToTimeline
	// void AddReplayEventToTimeline(EFortReplayEventType EventType, float RelativeTime);                                       // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortTooltipUIContext
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortTooltipUIContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortTooltipUIContext.HasTooltipStats
	// bool HasTooltipStats(UObject* Object);                                                                                   // [0x2bf41f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetUpgradeStats
	// TArray<FFortDisplayAttribute> GetUpgradeStats(UObject* Object, UFortTooltipContext* TooltipContext);                     // [0x2bf3fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetUIDataForTag
	// bool GetUIDataForTag(FGameplayTag& Tag, FFortTagUIData& OutData);                                                        // [0x2bf3eb0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetTooltipStats
	// TArray<FFortDisplayAttribute> GetTooltipStats(UObject* Object, UFortTooltipContext* TooltipContext);                     // [0x2bf3db0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetTooltipStat
	// bool GetTooltipStat(UObject* Object, UFortTooltipContext* TooltipContext, FGameplayTag Token, FFortDisplayAttribute& OutDisplayAttribute); // [0x2bf3c10] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetTooltipAttributes
	// TArray<FGameplayAttribute> GetTooltipAttributes(UObject* Object);                                                        // [0x2bf3b30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetDisplayNameAndMultiBrushForTag
	// bool GetDisplayNameAndMultiBrushForTag(FGameplayTag& Tag, FText& OutDisplayName, FFortMultiSizeBrush& OutBrush);         // [0x2bf3110] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetDescription
	// bool GetDescription(UObject* Object, UFortTooltipContext* TooltipContext, TArray<FText>& OutDescription);                // [0x2bf2f90] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetComparisonStats
	// TArray<FFortDisplayAttribute> GetComparisonStats(UObject* Object, UObject* ComparisonObject, UFortTooltipContext* TooltipContext); // [0x2bf2e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTooltipUIContext.GetCombinedDescription
	// bool GetCombinedDescription(UObject* Object, UFortTooltipContext* TooltipContext, FText& OutDescription);                // [0x2bf2cf0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortTopBarPanel
/// Size: 0x0010 (0x0003F0 - 0x000400)
class UFortTopBarPanel : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:


	/// Functions
	// Function /Script/FortniteUI.FortTopBarPanel.AddIconToScreen
	// void AddIconToScreen(UCommonLazyImage* Image);                                                                           // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortTouchControlRegion
/// Size: 0x0110 (0x000210 - 0x000320)
class UFortTouchControlRegion : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(UFortAutorunLockZone*)                     AutoRunLockTarget                                           OFFSET(get<T>, {0x250, 8, 0, 0})
	SMember(FTimerHandle)                              AutorunLockDelayHandle                                      OFFSET(getStruct<T>, {0x258, 8, 0, 0})
	CMember(UFortTouchMoveStick*)                      TouchMoveStick                                              OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(UFortTouchLookStick*)                      TouchLookStick                                              OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(UWidget*)                                  AutoRunTapZone                                              OFFSET(get<T>, {0x270, 8, 0, 0})
	SMember(FVector2D)                                 MovePlayerRegionTouchOrigin                                 OFFSET(getStruct<T>, {0x278, 8, 0, 0})
	SMember(FVector2D)                                 MovePlayerRegionTouchEndPos                                 OFFSET(getStruct<T>, {0x280, 8, 0, 0})
	SMember(FVector)                                   MoveVector                                                  OFFSET(getStruct<T>, {0x288, 12, 0, 0})
	SMember(FVector2D)                                 MoveStickPos                                                OFFSET(getStruct<T>, {0x294, 8, 0, 0})
	DMember(float)                                     MoveStickLockMagnitudeThreshold                             OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     MoveStickLockAngleBegin                                     OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     MoveStickLockAngleEnd                                       OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     MoveStickLockAccumulator                                    OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(bool)                                      bLastLookTouchWasTap                                        OFFSET(get<bool>, {0x2AC, 1, 1, 0})
	DMember(bool)                                      bMoveStickIsTouched                                         OFFSET(get<bool>, {0x2AC, 1, 1, 1})
	DMember(bool)                                      bMoveStickIsLocked                                          OFFSET(get<bool>, {0x2AC, 1, 1, 2})
	DMember(bool)                                      bLookStickIsTouched                                         OFFSET(get<bool>, {0x2AC, 1, 1, 3})
	DMember(bool)                                      bIsLockedOn                                                 OFFSET(get<bool>, {0x2AC, 1, 1, 4})
	DMember(float)                                     MoveStickLockTimeToHold                                     OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     MoveStickLastTouchTime                                      OFFSET(get<float>, {0x2B4, 4, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 LockBar_MID                                                 OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(float)                                     MovePlayerRegionLastTouchTime                               OFFSET(get<float>, {0x2C0, 4, 0, 0})
	SMember(FVector2D)                                 MovePlayerRegionLastTouchPos                                OFFSET(getStruct<T>, {0x2C4, 8, 0, 0})
	SMember(FVector2D)                                 RotateCameraRegionTouchStartPos                             OFFSET(getStruct<T>, {0x2CC, 8, 0, 0})
	SMember(FVector2D)                                 RotateCameraRegionLastTouchPos                              OFFSET(getStruct<T>, {0x2D4, 8, 0, 0})
	SMember(FVector2D)                                 RotateCameraPlayerRegionLastTouchDiff                       OFFSET(getStruct<T>, {0x2DC, 8, 0, 0})
	DMember(float)                                     RotateCameraLastTouchTime                                   OFFSET(get<float>, {0x2E4, 4, 0, 0})
	CMember(UCurveFloat*)                              RotateInertiaCurve                                          OFFSET(get<T>, {0x2F0, 8, 0, 0})
	SMember(FVector2D)                                 LockOnStickOrigin                                           OFFSET(getStruct<T>, {0x2F8, 8, 0, 0})
	SMember(FVector2D)                                 LockOnStickCurrentPos                                       OFFSET(getStruct<T>, {0x300, 8, 0, 0})
	SMember(FVector2D)                                 LockOnBarOffset                                             OFFSET(getStruct<T>, {0x308, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTouchControlRegion.UpdateMoveStickLock
	// void UpdateMoveStickLock(float DeltaTime);                                                                               // [0x2bfb240] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortTouchControlRegion.UpdateLockOnStickPosition
	// void UpdateLockOnStickPosition(FVector2D LocalPos);                                                                      // [0x2bfb1c0] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortTouchControlRegion.UpdateLockOnStickOrigin
	// void UpdateLockOnStickOrigin(FVector2D LocalPos, bool IsTouchStartEvent);                                                // [0x2bfb100] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortTouchControlRegion.SetMoveStickPos
	// void SetMoveStickPos(FVector2D NewMoveStickPos);                                                                         // [0x2bfae00] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortTouchControlRegion.SetLockOnStickPosition
	// void SetLockOnStickPosition(FVector2D LocalPos);                                                                         // [0x2bfad80] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortTouchControlRegion.SetFeedbackPosition
	// void SetFeedbackPosition(FGeometry& InGeometry, FPointerEvent& InGestureEvent);                                          // [0x2bfab10] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.ResetTouchState
	// void ResetTouchState();                                                                                                  // [0x2bfaaf0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnRotatePlayerRegionTouchStarted
	// void OnRotatePlayerRegionTouchStarted(FGeometry& InGeometry, FPointerEvent& InGestureEvent);                             // [0x2bfa700] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnRotatePlayerRegionTouchMoved
	// void OnRotatePlayerRegionTouchMoved(FGeometry& InGeometry, FPointerEvent& InGestureEvent, FVector2D& MoveDelta);         // [0x2bfa4d0] Native|Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnRotatePlayerRegionTouchLost
	// void OnRotatePlayerRegionTouchLost();                                                                                    // [0x2bfa4b0] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnRotatePlayerRegionTouchEnded
	// void OnRotatePlayerRegionTouchEnded(FGeometry& InGeometry, FPointerEvent& InGestureEvent);                               // [0x2bfa2d0] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnRegionTouchStarted
	// void OnRegionTouchStarted(EFortTouchControlRegion Region, FGeometry& InGeometry, FPointerEvent& InGestureEvent);         // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnRegionTouchMoved
	// void OnRegionTouchMoved(EFortTouchControlRegion Region, FGeometry& InGeometry, FPointerEvent& InGestureEvent, FVector2D& MoveDelta); // [0x154a140] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnRegionTouchEnded
	// void OnRegionTouchEnded(EFortTouchControlRegion Region, FGeometry& InGeometry, FPointerEvent& InGestureEvent);           // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnMovePlayerRegionTouchStarted
	// void OnMovePlayerRegionTouchStarted(FGeometry& InGeometry, FPointerEvent& InGestureEvent);                               // [0x2bfa050] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnMovePlayerRegionTouchMoved
	// void OnMovePlayerRegionTouchMoved(FGeometry& InGeometry, FPointerEvent& InGestureEvent);                                 // [0x2bf9e70] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnMovePlayerRegionTouchLost
	// void OnMovePlayerRegionTouchLost();                                                                                      // [0x2bf9e50] Native|Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnMovePlayerRegionTouchEnded
	// void OnMovePlayerRegionTouchEnded(FGeometry& InGeometry, FPointerEvent& InGestureEvent);                                 // [0x2bf9c70] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnCursorModeChanged
	// void OnCursorModeChanged(bool bCursorModeEnabled, FName ActionName, UUserWidget* CustomWidget);                          // [0x2bf9ae0] Final|Native|Protected 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnAdditionalTouchStarted
	// void OnAdditionalTouchStarted(FGeometry& InGeometry, FPointerEvent& InGestureEvent);                                     // [0x2bf9900] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.OnAdditionalTouchEnded
	// void OnAdditionalTouchEnded(FGeometry& InGeometry, FPointerEvent& InGestureEvent);                                       // [0x2bf9720] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.MoveStickIsInSprintThreshold
	// bool MoveStickIsInSprintThreshold();                                                                                     // [0x2bf96f0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTouchControlRegion.MoveStickIsInLockPosition
	// bool MoveStickIsInLockPosition();                                                                                        // [0x2bf96c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTouchControlRegion.MovePlayerRegionTick
	// void MovePlayerRegionTick(FGeometry& InGeometry, float DeltaTime);                                                       // [0x2bf95c0] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchControlRegion.IsRotatePlayerRegionTouched
	// bool IsRotatePlayerRegionTouched();                                                                                      // [0x2bf9530] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTouchControlRegion.IsMovePlayerRegionTouched
	// bool IsMovePlayerRegionTouched();                                                                                        // [0x2bf9500] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTouchControlRegion.IsFiring
	// bool IsFiring();                                                                                                         // [0x2bf94a0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTouchControlRegion.GetMoveStickRange
	// float GetMoveStickRange();                                                                                               // [0x2bf9290] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTouchControlRegion.CanLockMoveStick
	// bool CanLockMoveStick();                                                                                                 // [0x2bf8610] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortTouchLookStick
/// Size: 0x0030 (0x000280 - 0x0002B0)
class UFortTouchLookStick : public UBacchusHUDElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(UImage*)                                   FireImageRef                                                OFFSET(get<T>, {0x280, 40, 0, 0})
	SMember(FVector2D)                                 FireImageAbsoluteOffset                                     OFFSET(getStruct<T>, {0x2A8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTouchLookStick.SetTouchStickPositionLocal
	// void SetTouchStickPositionLocal(FVector2D TouchPosition);                                                                // [0x2bfb010] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortTouchLookStick.SetTouchStickPositionAbsolute
	// void SetTouchStickPositionAbsolute(FVector2D TouchPosition);                                                             // [0x2bfaf90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FortniteUI.FortTouchLookStick.SetFiringState
	// void SetFiringState(bool IsFiring);                                                                                      // [0x2bfacf0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchLookStick.IsFireButtonUnderTouch
	// bool IsFireButtonUnderTouch(FVector2D TouchPosition);                                                                    // [0x2bf9410] Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortTouchMoveStick
/// Size: 0x0008 (0x000280 - 0x000288)
class UFortTouchMoveStick : public UBacchusHUDElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	DMember(bool)                                      bIsTouched                                                  OFFSET(get<bool>, {0x280, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTouchMoveStick.SetStickPosition
	// void SetStickPosition(FVector2D NewPosition);                                                                            // [0x2bfaf10] Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchMoveStick.SetMovementLockStatus
	// void SetMovementLockStatus(bool MovementIsLocked);                                                                       // [0x2bfae80] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchMoveStick.IsTouched
	// bool IsTouched();                                                                                                        // [0x2bf9560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTouchMoveStick.HandleTouchStarted
	// void HandleTouchStarted();                                                                                               // [0x2bf9370] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchMoveStick.HandleTouchEnded
	// void HandleTouchEnded();                                                                                                 // [0x114d960] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortTouchMoveStick.GetHalfHeight
	// float GetHalfHeight();                                                                                                   // [0x2bf8820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortTrackedIndicator
/// Size: 0x0000 (0x000460 - 0x000460)
class UFortTrackedIndicator : public UFortSimpleItemConditionIconIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
};

/// Class /Script/FortniteUI.FortTransformKeyPicker
/// Size: 0x0068 (0x000278 - 0x0002E0)
class UFortTransformKeyPicker : public UFortItemPickerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:


	/// Functions
	// Function /Script/FortniteUI.FortTransformKeyPicker.RebuildTransformKeys
	// void RebuildTransformKeys(TArray<UObject*>& InDataProvider);                                                             // [0x2bfaa40] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortTransformKeyPickerTileButton
/// Size: 0x0000 (0x000830 - 0x000830)
class UFortTransformKeyPickerTileButton : public UFortItemPickerButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
};

/// Class /Script/FortniteUI.FortTransformSlotItemPicker
/// Size: 0x0008 (0x000278 - 0x000280)
class UFortTransformSlotItemPicker : public UFortItemPickerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:


	/// Functions
	// Function /Script/FortniteUI.FortTransformSlotItemPicker.RebuildSlottableItems
	// void RebuildSlottableItems(TArray<EFortInventoryFilter>& ItemFilters, EFortItemType ItemType, TArray<UFortItem*>& ItemsToIgnore); // [0x2bfa8e0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortTransformSlotItemPickerTileButton
/// Size: 0x0000 (0x000830 - 0x000830)
class UFortTransformSlotItemPickerTileButton : public UFortItemPickerButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
};

/// Class /Script/FortniteUI.FortTrapDefenderItemPicker
/// Size: 0x0078 (0x000278 - 0x0002F0)
class UFortTrapDefenderItemPicker : public UFortItemPickerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(UFortItemDetailsHostPanel*)                DetailsPanel                                                OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TWeakObjectPtr<ABuildingTrapDefender*>)    DefenderTrap                                                OFFSET(get<T>, {0x280, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTrapDefenderItemPicker.HandleSelectionCommittedBP
	// void HandleSelectionCommittedBP(UFortItem* CommittedItem);                                                               // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortTutorialContext
/// Size: 0x00C0 (0x000028 - 0x0000E8)
class UFortTutorialContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(UMulticastDelegate)                        OnUpdateTutorialAnnouncement                                OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnNewAnnouncementStartedOnClientDelegate                    OFFSET(get<T>, {0x38, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTutorialContext.UpdateTutorialAnnouncement
	// void UpdateTutorialAnnouncement(FFortClientAnnouncementData_Tutorial AnnouncementData, bool bShow);                      // [0x2bfb2c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.UnhideTutorialCallout
	// void UnhideTutorialCallout(FName WidgetName);                                                                            // [0x2bf8720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.UnhideAllTutorialCallouts
	// void UnhideAllTutorialCallouts();                                                                                        // [0x2bfb0e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.SkipTutorial
	// void SkipTutorial();                                                                                                     // [0x2bfb0c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.ShouldPromptToSkipTutorial
	// bool ShouldPromptToSkipTutorial();                                                                                       // [0x2bfb090] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortTutorialContext.OnNewAnnouncementStartedOnClient
	// void OnNewAnnouncementStartedOnClient(AFortClientAnnouncement* NewAnnouncement);                                         // [0x2bfa250] Final|Native|Public  
	// Function /Script/FortniteUI.FortTutorialContext.HideTutorialCallout
	// void HideTutorialCallout(FName WidgetName);                                                                              // [0x2bf9390] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.GetTutorialCallouts
	// void GetTutorialCallouts(TArray<FName>& WidgetNames);                                                                    // [0x2bf92c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.GetHiddenTutorialCallouts
	// void GetHiddenTutorialCallouts(TArray<FName>& WidgetNames);                                                              // [0x2bf8850] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.EnableTutorialCallout
	// void EnableTutorialCallout(FName WidgetName);                                                                            // [0x2bf8720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.DisableTutorialCallout
	// void DisableTutorialCallout(FName WidgetName);                                                                           // [0x2bf86a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.ContinueTutorial
	// void ContinueTutorial();                                                                                                 // [0x2bf8680] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortTutorialContext.ClearTutorialCallouts
	// void ClearTutorialCallouts();                                                                                            // [0x2bf8660] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortTwitchLogin
/// Size: 0x0050 (0x000210 - 0x000260)
class UFortTwitchLogin : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(UClass*)                                   TwitchLoginModalWidgetClass                                 OFFSET(get<T>, {0x230, 40, 0, 0})
	CMember(UFortTwitchLoginModalWidget*)              ActiveLoginModal                                            OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTwitchLogin.OnShowLoginError
	// void OnShowLoginError(FText& ErrorTitle, FText& ErrorMessage);                                                           // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortTwitchLogin.OnLoginStatusChanged
	// void OnLoginStatusChanged(bool bLoggedIn, FString AccountName);                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortTwitchLogin.OnLoginFlowModalDismissed
	// void OnLoginFlowModalDismissed(UFortTwitchLoginModalWidget* Modal);                                                      // [0x2bf9be0] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortTwitchLogin.OnLoginFlowModalCreated
	// void OnLoginFlowModalCreated(UFortTwitchLoginModalWidget* Modal);                                                        // [0x2b87b00] Native|Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortTwitchLogin.OnLinkedTwitchAccountChanged
	// void OnLinkedTwitchAccountChanged(FString AccountName);                                                                  // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortTwitchLogin.Logout
	// void Logout();                                                                                                           // [0x2bf95a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortTwitchLogin.Login
	// void Login();                                                                                                            // [0x2bf9580] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortTwitchLogin.IsLoggedIn
	// bool IsLoggedIn();                                                                                                       // [0x2bf94d0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortTwitchLogin.GetLinkedTwitchAccountName
	// FString GetLinkedTwitchAccountName();                                                                                    // [0x2bf8d80] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortTwitchLogin.GetAccountName
	// FString GetAccountName();                                                                                                // [0x2bf87a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FortniteUI.FortTwitchLogin.CancelLoginFlow
	// void CancelLoginFlow();                                                                                                  // [0x2bf8640] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortTwitchLoginModalWidget
/// Size: 0x0010 (0x0003F0 - 0x000400)
class UFortTwitchLoginModalWidget : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(UNativeWidgetHost*)                        NativeHost                                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortTwitchLoginModalWidget.OnNativeHostContentChanged
	// void OnNativeHostContentChanged();                                                                                       // [0x2bfa230] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortUIBlueprintFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortUIBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortUIBlueprintFunctionLibrary.GetMetaStringOnOffer
	// FString GetMetaStringOnOffer(FCardPackOffer& Offer, FString Key);                                                        // [0x2bf9100] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortUIBlueprintFunctionLibrary.GetMetaIntOnOffer
	// int32_t GetMetaIntOnOffer(FCardPackOffer& Offer, FString Key, int32_t DefaultValue);                                     // [0x2bf8f80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortUIBlueprintFunctionLibrary.GetMetaBoolOnOffer
	// bool GetMetaBoolOnOffer(FCardPackOffer& Offer, FString Key, bool bDefaultValue);                                         // [0x2bf8e00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortUIBlueprintFunctionLibrary.GetItemSmallPreviewImageMultiSizeBrush
	// FFortMultiSizeBrush GetItemSmallPreviewImageMultiSizeBrush(UFortItem* Item);                                             // [0x2bf8c90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortUIBlueprintFunctionLibrary.GetItemSmallPreviewImageBrush
	// FSlateBrush GetItemSmallPreviewImageBrush(UFortItem* Item, TEnumAsByte<EFortBrushSize> BrushSize);                       // [0x2bf8b40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortUIBlueprintFunctionLibrary.GetItemDefinitionSmallPreviewImageMultiSizeBrush
	// FFortMultiSizeBrush GetItemDefinitionSmallPreviewImageMultiSizeBrush(UFortItemDefinition* ItemDefinition);               // [0x2bf8a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortUIBlueprintFunctionLibrary.GetItemDefinitionSmallPreviewImageBrush
	// FSlateBrush GetItemDefinitionSmallPreviewImageBrush(UFortItemDefinition* ItemDefinition, TEnumAsByte<EFortBrushSize> BrushSize); // [0x2bf8900] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortUIDataConfiguration
/// Size: 0x31F0 (0x000030 - 0x003220)
class UFortUIDataConfiguration : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 12832;

public:
	SMember(FString)                                   DefaultUIDataConfigurationPath                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   MobileUIDataConfigurationPath                               OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   BROnlyUIDataConfigurationPath                               OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FString)                                   ErebusUIDataConfigurationPath                               OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	CMember(UClass*)                                   StateWidgetClasses                                          OFFSET(get<T>, {0x70, 480, 0, 0})
	CMember(TArray<UClass*>)                           CachedWidgetClasses                                         OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(TMap<TEnumAsByte, int32_t>)                StandardImageBrushSizes                                     OFFSET(get<T>, {0x260, 80, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 PowerRatingIconMultiSizeBrush                               OFFSET(get<T>, {0x2B0, 40, 0, 0})
	SMember(FLinearColor)                              PowerRatingEnchantedPositiveColorOverride                   OFFSET(getStruct<T>, {0x2D8, 16, 0, 0})
	SMember(FLinearColor)                              PowerRatingEnchantedNegativeColorOverride                   OFFSET(getStruct<T>, {0x2E8, 16, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 FilledTierPipMultiSizeBrush                                 OFFSET(get<T>, {0x2F8, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 UnfilledTierPipMultiSizeBrush                               OFFSET(get<T>, {0x320, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 PreviewingTierPipMultiSizeBrush                             OFFSET(get<T>, {0x348, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 UpgradeArrowMultiSizeBrush                                  OFFSET(get<T>, {0x370, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 ComparisonUpArrowMultiSizeBrush                             OFFSET(get<T>, {0x398, 40, 0, 0})
	SMember(FLinearColor)                              BetterComparisonResultColor                                 OFFSET(getStruct<T>, {0x3C0, 16, 0, 0})
	SMember(FLinearColor)                              WorseComparisonResultColor                                  OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 InventoryOverflowIndicatorMultiSizeBrush                    OFFSET(get<T>, {0x3E0, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 TrackedSchematicIndicatorMultiSizeBrush                     OFFSET(get<T>, {0x408, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 FavoritedItemIndicatorMultiSizeBrush                        OFFSET(get<T>, {0x430, 40, 0, 0})
	CMember(TMap<FGameplayTag, FFortUIStatStyle>)      ProfileStatStyles                                           OFFSET(get<T>, {0x458, 80, 0, 0})
	DMember(bool)                                      bEnableSocialFeatures                                       OFFSET(get<bool>, {0x4A8, 1, 0, 0})
	DMember(bool)                                      bEnableChat                                                 OFFSET(get<bool>, {0x4A9, 1, 0, 0})
	DMember(bool)                                      bEnablePartyFeatures                                        OFFSET(get<bool>, {0x4AA, 1, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 UnlockedSquadSlotBorderMultiSizeBrush                       OFFSET(get<T>, {0x4B0, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 LockedSquadSlotBorderMultiSizeBrush                         OFFSET(get<T>, {0x4D8, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 ReadOnlySquadSlotBorderMultiSizeBrush                       OFFSET(get<T>, {0x500, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 DefenderIconMultiSizeBrush                                  OFFSET(get<T>, {0x528, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 AssaultDefenderIconMultiSizeBrush                           OFFSET(get<T>, {0x550, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 PistolDefenderIconMultiSizeBrush                            OFFSET(get<T>, {0x578, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 MeleeDefenderIconMultiSizeBrush                             OFFSET(get<T>, {0x5A0, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 SniperDefenderIconMultiSizeBrush                            OFFSET(get<T>, {0x5C8, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 ShotgunDefenderIconMultiSizeBrush                           OFFSET(get<T>, {0x5F0, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 LeadSurvivorIconMultiSizeBrush                              OFFSET(get<T>, {0x618, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 SurvivorIconMultiSizeBrush                                  OFFSET(get<T>, {0x640, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 TrapIconMultiSizeBrush                                      OFFSET(get<T>, {0x668, 40, 0, 0})
	CMember(UClass*)                                   KeybindWidgetClass                                          OFFSET(get<T>, {0x690, 40, 0, 0})
	CMember(UClass*)                                   HiddenCursorWidget                                          OFFSET(get<T>, {0x6B8, 40, 0, 0})
	CMember(UClass*)                                   VirtualCursorWidget                                         OFFSET(get<T>, {0x6E0, 40, 0, 0})
	SMember(FRuntimeFloatCurve)                        UIScaleCurve                                                OFFSET(getStruct<T>, {0x708, 120, 0, 0})
	SMember(FRuntimeFloatCurve)                        FrontEndUIScaleCurve                                        OFFSET(getStruct<T>, {0x780, 120, 0, 0})
	CMember(EFortReturnToFrontendBehavior)             ReturnToFrontendBehavior                                    OFFSET(get<T>, {0x7F8, 1, 0, 0})
	DMember(float)                                     SkillTreeMinimumZoomLevel                                   OFFSET(get<float>, {0x7FC, 4, 0, 0})
	DMember(float)                                     SkillTreeMaximumZoomLevel                                   OFFSET(get<float>, {0x800, 4, 0, 0})
	DMember(float)                                     SkillTreeZoomLevelIncrement                                 OFFSET(get<float>, {0x804, 4, 0, 0})
	DMember(float)                                     SkillTreeZoomLevelIncrementController                       OFFSET(get<float>, {0x808, 4, 0, 0})
	DMember(float)                                     SkillTreeZoomLevelIncrementMobile                           OFFSET(get<float>, {0x80C, 4, 0, 0})
	SMember(FFortSkillTreeCanvasStyle)                 SkillTreeCanvasStyle                                        OFFSET(getStruct<T>, {0x810, 52, 0, 0})
	CMember(UClass*)                                   DefaultSkillTreeNodeWidgetType                              OFFSET(get<T>, {0x848, 40, 0, 0})
	CMember(TMap<EFortHomebaseNodeDisplayType, UClass*>) SkillTreeNodeWidgetTypeMap                                OFFSET(get<T>, {0x870, 80, 0, 0})
	CMember(UFortSkillTreeNodeDisplayDataRegistry*)    SkillTreeNodeDisplayDataRegistry                            OFFSET(get<T>, {0x8C0, 40, 0, 0})
	CMember(TMap<TEnumAsByte, UClass*>)                ItemCardPowerRatingTextStylesByBrushSize                    OFFSET(get<T>, {0x8E8, 80, 0, 0})
	CMember(TMap<TEnumAsByte, UClass*>)                ItemCardStackCountTextStylesByBrushSize                     OFFSET(get<T>, {0x938, 80, 0, 0})
	CMember(UMaterialInterface*)                       ItemCardLevelMeterMaterial                                  OFFSET(get<T>, {0x988, 40, 0, 0})
	CMember(UMaterialInterface*)                       ItemCardDurabilityMeterMaterial                             OFFSET(get<T>, {0x9B0, 40, 0, 0})
	SMember(FSlateBrush)                               ItemCardBackgroundPlateBrush                                OFFSET(getStruct<T>, {0x9D8, 136, 0, 0})
	SMember(FSlateBrush)                               ItemCardRarityGradientBrush                                 OFFSET(getStruct<T>, {0xA60, 136, 0, 0})
	SMember(FSlateBrush)                               ItemCardDefenderPortraitBackgroundBrush                     OFFSET(getStruct<T>, {0xAE8, 136, 0, 0})
	SMember(FSlateBrush)                               ItemCardHeroPortraitBackgroundBrush                         OFFSET(getStruct<T>, {0xB70, 136, 0, 0})
	SMember(FSlateBrush)                               ItemCardLeadSurvivorPortraitBackgroundBrush                 OFFSET(getStruct<T>, {0xBF8, 136, 0, 0})
	SMember(FSlateBrush)                               ItemCardSchematicBackgroundBrush                            OFFSET(getStruct<T>, {0xC80, 136, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 ItemCardRewardTraitsBackgroundMultiSizeBrush                OFFSET(get<T>, {0xD08, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 ItemCardSchematicTraitsBackgroundMultiSizeBrush             OFFSET(get<T>, {0xD30, 40, 0, 0})
	CMember(UClass*)                                   FrontendItemManagementScreenType                            OFFSET(get<T>, {0xD58, 40, 0, 0})
	CMember(UClass*)                                   FrontendItemInspectionScreenType                            OFFSET(get<T>, {0xD80, 40, 0, 0})
	CMember(UClass*)                                   SkillTreeViewerScreenType                                   OFFSET(get<T>, {0xDA8, 40, 0, 0})
	CMember(UClass*)                                   HeroSquadManagementScreenType                               OFFSET(get<T>, {0xDD0, 40, 0, 0})
	CMember(UClass*)                                   SurvivorSquadManagementScreenType                           OFFSET(get<T>, {0xDF8, 40, 0, 0})
	CMember(UClass*)                                   DefenderSquadManagementScreenType                           OFFSET(get<T>, {0xE20, 40, 0, 0})
	CMember(UClass*)                                   MatchReadyDesktopPopupWidgetType                            OFFSET(get<T>, {0xE48, 40, 0, 0})
	CMember(UClass*)                                   MainTabSet                                                  OFFSET(get<T>, {0xE70, 40, 0, 0})
	DMember(bool)                                      bLimitedToES2Features                                       OFFSET(get<bool>, {0xE98, 1, 0, 0})
	SMember(FWeightedBlendables)                       FrontEndFFPostProcessMaterials                              OFFSET(getStruct<T>, {0xEA0, 16, 0, 0})
	DMember(bool)                                      bUseSpecificPinataWeapon                                    OFFSET(get<bool>, {0xEB0, 1, 0, 0})
	DMember(bool)                                      bQuestVOEnabled                                             OFFSET(get<bool>, {0xEB1, 1, 0, 0})
	CMember(TMap<EFortItemCardSize, FVector2D>)        PersonnelAndSchematicCardSizes                              OFFSET(get<T>, {0xEB8, 80, 0, 0})
	CMember(TMap<EFortItemCardSize, FVector2D>)        OtherItemCardSizes                                          OFFSET(get<T>, {0xF08, 80, 0, 0})
	CMember(TMap<EFortItemCardSize, UMaterialInterface*>) PersonnelAndSchematicItemCardMaterial                    OFFSET(get<T>, {0xF58, 80, 0, 0})
	CMember(TMap<EFortItemCardSize, UMaterialInterface*>) CardPackItemCardMaterial                                 OFFSET(get<T>, {0xFA8, 80, 0, 0})
	CMember(TMap<EFortItemCardSize, UMaterialInterface*>) InstanceItemCardMaterial                                 OFFSET(get<T>, {0xFF8, 80, 0, 0})
	CMember(TMap<EFortItemCardSize, UMaterialInterface*>) TransformKeyItemCardMaterial                             OFFSET(get<T>, {0x1048, 80, 0, 0})
	CMember(TMap<EFortItemCardSize, UMaterialInterface*>) CosmeticItemCardMaterial                                 OFFSET(get<T>, {0x1098, 80, 0, 0})
	CMember(TArray<EFortItemType>)                     ItemTypesWhoseImagesReplaceCardBackgrounds                  OFFSET(get<T>, {0x10E8, 16, 0, 0})
	CMember(TMap<EFortItemCardSize, UMaterialInterface*>) ItemCardDetailAreaMaterial                               OFFSET(get<T>, {0x1148, 80, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 FavoriteBookmarkMultiSizeBrush                              OFFSET(get<T>, {0x1198, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 PermanentTransformKeykMultiSizeBrush                        OFFSET(get<T>, {0x11C0, 40, 0, 0})
	CMember(UFortMultiSizeBrushAsset*)                 ConsumableTransformKeykMultiSizeBrush                       OFFSET(get<T>, {0x11E8, 40, 0, 0})
	CMember(TMap<FGameplayTag, UTexture2D*>)           DefenderSubtypeWeaponTextures                               OFFSET(get<T>, {0x1210, 80, 0, 0})
	CMember(TMap<EFortBuffState, UMaterialInterface*>) EnchantedCustomRatingBlockBackgroundMaterial                OFFSET(get<T>, {0x1260, 80, 0, 0})
	CMember(TMap<EFortBuffState, UMaterialInterface*>) NormalCustomRatingBlockBackgroundMaterial                   OFFSET(get<T>, {0x12B0, 80, 0, 0})
	SMember(FMargin)                                   CustomRatingBlockBackgroundBrushMargin                      OFFSET(getStruct<T>, {0x1300, 16, 0, 0})
	CMember(UMaterialInterface*)                       UniversalItemCardDurabilityMeterMaterial                    OFFSET(get<T>, {0x1310, 40, 0, 0})
	CMember(UMaterialInterface*)                       UniversalItemCardLevelMeterMaterial                         OFFSET(get<T>, {0x1338, 40, 0, 0})
	CMember(UMaterialInterface*)                       UniversalItemCardTraitIconMaterial                          OFFSET(get<T>, {0x1360, 40, 0, 0})
	CMember(UMaterialInterface*)                       UniversalItemCardUnearnedTierIconMaterial                   OFFSET(get<T>, {0x1388, 40, 0, 0})
	CMember(UMaterialInterface*)                       UniversalItemCardAvailableTierIconMaterial                  OFFSET(get<T>, {0x13B0, 40, 0, 0})
	CMember(UMaterialInterface*)                       UniversalItemCardEarnedTierIconMaterial                     OFFSET(get<T>, {0x13D8, 40, 0, 0})
	CMember(UFortItemDefinition*)                      MysteryItemDefinition                                       OFFSET(get<T>, {0x1400, 40, 0, 0})
	SMember(FFortItemCard_XL_PersonnelAndSchematics_Configuration) ItemCardConfig_XXL_PersonnelAndSchematics       OFFSET(getStruct<T>, {0x1428, 848, 0, 0})
	SMember(FFortItemCard_XL_ItemInstance_Configuration) ItemCardConfig_XXL_ItemInstance                           OFFSET(getStruct<T>, {0x1778, 432, 0, 0})
	SMember(FFortItemCard_XL_TransformKey_Configuration) ItemCardConfig_XXL_TransformKey                           OFFSET(getStruct<T>, {0x1928, 72, 0, 0})
	SMember(FFortItemCard_XL_PersonnelAndSchematics_Configuration) ItemCardConfig_XL_PersonnelAndSchematics        OFFSET(getStruct<T>, {0x1970, 848, 0, 0})
	SMember(FFortItemCard_XL_ItemInstance_Configuration) ItemCardConfig_XL_ItemInstance                            OFFSET(getStruct<T>, {0x1CC0, 432, 0, 0})
	SMember(FFortItemCard_XL_TransformKey_Configuration) ItemCardConfig_XL_TransformKey                            OFFSET(getStruct<T>, {0x1E70, 72, 0, 0})
	SMember(FFortItemCard_L_PersonnelAndSchematics_Configuration) ItemCardConfig_L_PersonnelAndSchematics          OFFSET(getStruct<T>, {0x1EB8, 712, 0, 0})
	SMember(FFortItemCard_L_ItemInstance_Configuration) ItemCardConfig_L_ItemInstance                              OFFSET(getStruct<T>, {0x2180, 432, 0, 0})
	SMember(FFortItemCard_L_TransformKey_Configuration) ItemCardConfig_L_TransformKey                              OFFSET(getStruct<T>, {0x2330, 72, 0, 0})
	SMember(FFortItemCard_M_PersonnelAndSchematics_Configuration) ItemCardConfig_M_PersonnelAndSchematics          OFFSET(getStruct<T>, {0x2378, 712, 0, 0})
	SMember(FFortItemCard_M_ItemInstance_Configuration) ItemCardConfig_M_ItemInstance                              OFFSET(getStruct<T>, {0x2640, 432, 0, 0})
	SMember(FFortItemCard_M_TransformKey_Configuration) ItemCardConfig_M_TransformKey                              OFFSET(getStruct<T>, {0x27F0, 72, 0, 0})
	SMember(FFortItemCard_S_PersonnelAndSchematics_Configuration) ItemCardConfig_S_PersonnelAndSchematics          OFFSET(getStruct<T>, {0x2838, 712, 0, 0})
	SMember(FFortItemCard_S_ItemInstance_Configuration) ItemCardConfig_S_ItemInstance                              OFFSET(getStruct<T>, {0x2B00, 416, 0, 0})
	SMember(FFortItemCard_S_TransformKey_Configuration) ItemCardConfig_S_TransformKey                              OFFSET(getStruct<T>, {0x2CA0, 72, 0, 0})
	SMember(FFortItemCard_XS_PersonnelAndSchematics_Configuration) ItemCardConfig_XS_PersonnelAndSchematics        OFFSET(getStruct<T>, {0x2CE8, 52, 0, 0})
	SMember(FFortItemCard_XS_ItemInstance_Configuration) ItemCardConfig_XS_ItemInstance                            OFFSET(getStruct<T>, {0x2D20, 392, 0, 0})
	SMember(FFortItemCard_XS_TransformKey_Configuration) ItemCardConfig_XS_TransformKey                            OFFSET(getStruct<T>, {0x2EA8, 72, 0, 0})
	SMember(FFortItemCard_XS_PersonnelAndSchematics_Configuration) ItemCardConfig_XXS_PersonnelAndSchematics       OFFSET(getStruct<T>, {0x2EF0, 52, 0, 0})
	SMember(FFortItemCard_XXS_ItemInstance_Configuration) ItemCardConfig_XXS_ItemInstance                          OFFSET(getStruct<T>, {0x2F28, 48, 0, 0})
	SMember(FFortItemCard_XS_TransformKey_Configuration) ItemCardConfig_XXS_TransformKey                           OFFSET(getStruct<T>, {0x2F58, 72, 0, 0})
	CMember(UDataTable*)                               HealthyGamingDataTable                                      OFFSET(get<T>, {0x2FA0, 40, 0, 0})
	CMember(UFortTooltipDisplayStatsLookupTable*)      ObjClassToTooltipStatsMap                                   OFFSET(get<T>, {0x2FC8, 8, 0, 0})
	CMember(UClass*)                                   LoadingScreenBacchusTutorialWidget                          OFFSET(get<T>, {0x2FD0, 40, 0, 0})
	CMember(USlateBrushAsset*)                         ActorCanvasArrowBrush                                       OFFSET(get<T>, {0x2FF8, 40, 0, 0})
	CMember(TMap<FString, FPlatformPrefixIconList>)    PlatformPrefixIconMap                                       OFFSET(get<T>, {0x3020, 80, 0, 0})
	CMember(TMap<FName, USlateBrushAsset*>)            LegacyNativeUIBrushMap                                      OFFSET(get<T>, {0x3070, 80, 0, 0})
	CMember(TMap<FName, UObject*>)                     LegacyNativeUIAssetMap                                      OFFSET(get<T>, {0x30C0, 80, 0, 0})
	SMember(FGameplayTagQuery)                         InspectAnimationTag                                         OFFSET(getStruct<T>, {0x3110, 72, 0, 0})
	DMember(float)                                     AnalogRotateSpeed                                           OFFSET(get<float>, {0x3158, 4, 0, 0})
	DMember(float)                                     DragRotateSpeed                                             OFFSET(get<float>, {0x315C, 4, 0, 0})
	DMember(float)                                     MouseWheelZoomSpeed                                         OFFSET(get<float>, {0x3160, 4, 0, 0})
	DMember(float)                                     DragZoomSpeed                                               OFFSET(get<float>, {0x3164, 4, 0, 0})
	DMember(float)                                     TriggerZoomSpeed                                            OFFSET(get<float>, {0x3168, 4, 0, 0})
	DMember(float)                                     MaxZoomDistance                                             OFFSET(get<float>, {0x316C, 4, 0, 0})
	CMember(TArray<EFortItemType>)                     ItemTypesThatAllowRotate                                    OFFSET(get<T>, {0x3170, 16, 0, 0})
	CMember(TMap<EFortItemType, EFortItemViewRotationMode>) ItemTypeToItemViewRotationModeMap                      OFFSET(get<T>, {0x3180, 80, 0, 0})
	CMember(TArray<EFortItemType>)                     ItemTypesThatAllowZoom                                      OFFSET(get<T>, {0x31D0, 16, 0, 0})
	CMember(TArray<EFortItemType>)                     ItemTypesToUseVaultCamera                                   OFFSET(get<T>, {0x31E0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewZoomOutInputAction                                  OFFSET(getStruct<T>, {0x31F0, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewZoomInInputAction                                   OFFSET(getStruct<T>, {0x3200, 16, 0, 0})
	SMember(FDataTableRowHandle)                       ItemViewRotateInputAction                                   OFFSET(getStruct<T>, {0x3210, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIDataConfiguration.GetIsCurrentlyInCrossplay
	// bool GetIsCurrentlyInCrossplay(UWorld* World);                                                                           // [0x2bfc8e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIDataConfiguration.GetDefenderSubtypeIconMultiSizeBrushByTag
	// UFortMultiSizeBrushAsset* GetDefenderSubtypeIconMultiSizeBrushByTag(FGameplayTag DefenderSubtypeTag);                    // [0x2bfc7d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FortniteUI.FortUIDataConfigurationContext
/// Size: 0x0000 (0x000028 - 0x000028)
class UFortUIDataConfigurationContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FortniteUI.FortUIDataConfigurationContext.UseSpecificPinataWeapon
	// bool UseSpecificPinataWeapon();                                                                                          // [0x2bfd070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIDataConfigurationContext.SetPlatformPrefixIcon
	// void SetPlatformPrefixIcon(UImage* Image, FString OtherPlayerPlatform, bool bForceShow);                                 // [0x2bfcc60] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortUIDataConfigurationContext.IsQuestVOEnabled
	// bool IsQuestVOEnabled();                                                                                                 // [0x2bfca80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIDataConfigurationContext.IsLimitedToES2Features
	// bool IsLimitedToES2Features();                                                                                           // [0x2bfca50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIDataConfigurationContext.IsChatEnabled
	// bool IsChatEnabled();                                                                                                    // [0x2bfca20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIDataConfigurationContext.GetFrontEndFFSettings
	// FPostProcessSettings GetFrontEndFFSettings();                                                                            // [0x2bfc850] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIDataConfigurationContext.AreSocialFeaturesEnabled
	// bool AreSocialFeaturesEnabled();                                                                                         // [0x2bfc610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIDataConfigurationContext.ArePartyFeaturesEnabled
	// bool ArePartyFeaturesEnabled();                                                                                          // [0x2bfc5e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortUIManagerWidget
/// Size: 0x02E8 (0x000218 - 0x000500)
class UFortUIManagerWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	CMember(UMulticastDelegate)                        OnBeginSpokenDialog                                         OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEndSpokenDialog                                           OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(UClass*)                                   StateWidgets                                                OFFSET(get<T>, {0x240, 480, 0, 0})
	CMember(EFortUIState)                              CurrentState                                                OFFSET(get<T>, {0x420, 1, 0, 0})
	CMember(EFortUIState)                              PendingState                                                OFFSET(get<T>, {0x421, 1, 0, 0})
	CMember(UFortUIStateWidget*)                       CurrentStateWidget                                          OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(TArray<UClass*>)                           LoadedStateWidgetClasses                                    OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(TArray<UFortUIStateTrigger*>)              StateTriggers                                               OFFSET(get<T>, {0x440, 16, 0, 0})
	CMember(TArray<UFortActionHandlerPanel*>)          ActionHandlerPanels                                         OFFSET(get<T>, {0x450, 16, 0, 0})
	CMember(UFortNotificationQueue*)                   UINotificationQueues                                        OFFSET(get<T>, {0x468, 24, 0, 0})
	DMember(bool)                                      bIsStateContentDisplayed                                    OFFSET(get<bool>, {0x480, 1, 0, 0})
	CMember(UFortUINavigationManager*)                 NavigationManager                                           OFFSET(get<T>, {0x488, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIManagerWidget.UpdateStateWidgetContent
	// void UpdateStateWidgetContent(UFortUIStateWidget* StateWidget);                                                          // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget.UnregisterStateTrigger
	// void UnregisterStateTrigger(UFortUIStateTrigger* TriggerToRemove);                                                       // [0x2bfcff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget.ShowErrorDialog
	// void ShowErrorDialog(UObject* WorldContextObject, FText OperationDesc, FText DisplayMessage, FString ErrorCode);         // [0x2bfce10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget.SetStateContentDisplayed
	// void SetStateContentDisplayed(bool bDisplay);                                                                            // [0x2bfcd80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget.ReleaseNotification
	// void ReleaseNotification(UFortUINotification* Notification);                                                             // [0x2bfcbd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget.RegisterStateTrigger
	// void RegisterStateTrigger(UFortUIStateTrigger* StateTrigger);                                                            // [0x2bfcb50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget.QueueActivatablePanelIntoModalLayer
	// void QueueActivatablePanelIntoModalLayer(UCommonActivatablePanel* Panel);                                                // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget.QueueActionPanelIntoModalLayer
	// void QueueActionPanelIntoModalLayer(UFortActionHandlerPanel* Panel, TEnumAsByte<EHorizontalAlignment> HorizontalAlignment, TEnumAsByte<EVerticalAlignment> VerticalAlignment); // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget.OnStateStarted
	// void OnStateStarted();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget.OnShowConfirmation_NUI
	// void OnShowConfirmation_NUI(FFortDialogDescription_NUI& Description);                                                    // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget.OnShowConfirmation
	// void OnShowConfirmation(FFortDialogDescription& Description);                                                            // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget.OnEndSpokenDialog__DelegateSignature
	// void OnEndSpokenDialog__DelegateSignature();                                                                             // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortUIManagerWidget.OnBeginSpokenDialog__DelegateSignature
	// void OnBeginSpokenDialog__DelegateSignature(UTexture2D* Image, FText Title, FText Subtitle, EFortAnnouncementDisplayPreference DisplayPreference); // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortUIManagerWidget.KillConfirmationDialog
	// void KillConfirmationDialog(UObject* WorldContextObject);                                                                // [0x2bfcae0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget.IsStateContentDisplayed
	// bool IsStateContentDisplayed();                                                                                          // [0x2bfcab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget.GetUIManagerWidget
	// UFortUIManagerWidget* GetUIManagerWidget(UObject* WorldContextObject);                                                   // [0x2bfc9a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget.GetNavigationManager
	// UFortUINavigationManager* GetNavigationManager();                                                                        // [0x2bfc970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget.GetCurrentUIStateWidget
	// UFortUIStateWidget* GetCurrentUIStateWidget();                                                                           // [0x2bfc7a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget.DisplayStateContent
	// void DisplayStateContent(bool bDisplay);                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget.DisplayErrorDialog
	// void DisplayErrorDialog(FFortErrorInfo& Info);                                                                           // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget.CreateUIStateTrigger
	// UFortUIStateTrigger* CreateUIStateTrigger(UClass* Class, UObject* WorldContextObject);                                   // [0x2bfc6e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget.CreateNotification
	// UFortUINotification* CreateNotification(UClass* UINotificationClass);                                                    // [0x2bfc640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget._BPGetCurrentUIState
	// EFortUIState _BPGetCurrentUIState();                                                                                     // [0x2bfd0a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortUIManagerWidget_NUI
/// Size: 0x01C0 (0x000210 - 0x0003D0)
class UFortUIManagerWidget_NUI : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(UMulticastDelegate)                        OnBeginSpokenDialog                                         OFFSET(get<T>, {0x218, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnEndSpokenDialog                                           OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnShouldBlockSubtitlePortraitChanged                        OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(EFortUIState)                              CurrentState                                                OFFSET(get<T>, {0x248, 1, 0, 0})
	CMember(EFortUIState)                              PendingState                                                OFFSET(get<T>, {0x249, 1, 0, 0})
	CMember(UFortUIStateWidget_NUI*)                   CurrentStateWidget                                          OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(TArray<UFortUIStateTrigger*>)              StateTriggers                                               OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(TArray<UFortUINotificationQueue*>)         UINotificationQueues                                        OFFSET(get<T>, {0x280, 16, 0, 0})
	DMember(bool)                                      bIsStateContentDisplayed                                    OFFSET(get<bool>, {0x290, 1, 0, 0})
	CMember(UFortUINavigationManager*)                 NavigationManager                                           OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(TMap<UClass*, UUserWidget*>)               TypedWidgetCache                                            OFFSET(get<T>, {0x2A0, 80, 0, 0})
	DMember(bool)                                      bSupressErrors                                              OFFSET(get<bool>, {0x3B0, 1, 0, 0})
	DMember(int32_t)                                   BlockSubtitlePortraitRefcount                               OFFSET(get<int32_t>, {0x3C8, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.UpdateStateWidgetContent
	// void UpdateStateWidgetContent(UFortUIStateWidget_NUI* StateWidget);                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.UnregisterStateTrigger
	// void UnregisterStateTrigger(UFortUIStateTrigger* TriggerToRemove);                                                       // [0x2c01a90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.ShowErrorDialog
	// void ShowErrorDialog(UObject* WorldContextObject, FText OperationDesc, FText DisplayMessage, FString ErrorCode);         // [0x2c017f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.ShouldBlockSubtitlePortrait
	// bool ShouldBlockSubtitlePortrait();                                                                                      // [0x2c017c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.SetStateContentDisplayed
	// void SetStateContentDisplayed(bool bDisplay);                                                                            // [0x2c01730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.SetFrontEndVisibility
	// void SetFrontEndVisibility(bool bHideHeader, bool bHideFooter, bool bHideChatWidget);                                    // [0x2c01590] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.ReleaseNotification
	// void ReleaseNotification(UFortUINotification* Notification);                                                             // [0x2c01500] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.RegisterStateTrigger
	// void RegisterStateTrigger(UFortUIStateTrigger* StateTrigger);                                                            // [0x2c01480] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.QueueActivatablePanelIntoModalLayer
	// void QueueActivatablePanelIntoModalLayer(UCommonActivatablePanel* Panel);                                                // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.PushContentWidgetAdvanced
	// void PushContentWidgetAdvanced(UWidget* Widget, bool bHideHeader, bool bHideFooter, bool bHideChatWidget);               // [0x2c00c20] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.PushContentWidget
	// void PushContentWidget(UWidget* Widget);                                                                                 // [0x2c00ba0] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.PopContentWidget
	// void PopContentWidget();                                                                                                 // [0x2c00b60] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.PopAllContentWidgets
	// void PopAllContentWidgets();                                                                                             // [0x2c00b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.PopActivatablePanelInModalLayer
	// void PopActivatablePanelInModalLayer(UCommonActivatablePanel* Panel);                                                    // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.OnStateStarted
	// void OnStateStarted();                                                                                                   // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.OnStateEnded
	// void OnStateEnded();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.OnShowConfirmation_NUI
	// void OnShowConfirmation_NUI(FFortDialogDescription_NUI& Description);                                                    // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.OnShowConfirmation
	// void OnShowConfirmation(FFortDialogDescription& Description);                                                            // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.OnShouldBlockSubtitlePortraitChanged__DelegateSignature
	// void OnShouldBlockSubtitlePortraitChanged__DelegateSignature(bool bShouldBlockSubtitlePortrait);                         // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.OnEndSpokenDialog__DelegateSignature
	// void OnEndSpokenDialog__DelegateSignature();                                                                             // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.OnEndLatentWaitForConfirmationDialog
	// void OnEndLatentWaitForConfirmationDialog(FFortDialogExternalLatentActionHandle& WaitingDialogHandle);                   // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.OnBeginSpokenDialog__DelegateSignature
	// void OnBeginSpokenDialog__DelegateSignature(UTexture2D* Image, FText Title, FText Subtitle, EFortAnnouncementDisplayPreference DisplayPreference); // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.KillConfirmationDialog
	// void KillConfirmationDialog(UObject* WorldContextObject);                                                                // [0x2c00520] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.IsStateContentDisplayed
	// bool IsStateContentDisplayed();                                                                                          // [0x2c004f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.IsShowingModalsConfirmationsErrors
	// bool IsShowingModalsConfirmationsErrors();                                                                               // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.IncrementShouldBlockSubtitlePortrait
	// void IncrementShouldBlockSubtitlePortrait();                                                                             // [0x2c004d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.GetUINotificationQueue
	// UFortUINotificationQueue* GetUINotificationQueue(UObject* WorldContextObject, EFortNotificationQueueType QueueType);     // [0x2c00280] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.GetUINavigationManager
	// UFortUINavigationManager* GetUINavigationManager(UObject* WorldContextObject);                                           // [0x2c00200] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.GetUIManagerWidget
	// UFortUIManagerWidget_NUI* GetUIManagerWidget(UObject* WorldContextObject);                                               // [0x2c00180] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.GetNavigationManager
	// UFortUINavigationManager* GetNavigationManager();                                                                        // [0x2c000f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.GetCurrentUIStateWidget
	// UFortUIStateWidget_NUI* GetCurrentUIStateWidget();                                                                       // [0x2bfffe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.GetCachedWidget
	// UUserWidget* GetCachedWidget(UClass* InClass);                                                                           // [0x2bfff50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.DisplayStateContent
	// void DisplayStateContent(bool bDisplay);                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.DisplayErrorDialog
	// void DisplayErrorDialog(FFortErrorInfo& Info);                                                                           // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.DecrementShouldBlockSubtitlePortrait
	// void DecrementShouldBlockSubtitlePortrait();                                                                             // [0x2bfff10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.CreateUIStateTrigger
	// UFortUIStateTrigger* CreateUIStateTrigger(UClass* Class, UObject* WorldContextObject);                                   // [0x2bffe50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.CreateNotification
	// UFortUINotification* CreateNotification(UClass* UINotificationClass);                                                    // [0x2bffdb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.CloseErrorWindow
	// void CloseErrorWindow();                                                                                                 // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI.CloseConfirmationWindow
	// void CloseConfirmationWindow();                                                                                          // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIManagerWidget_NUI._BPGetCurrentUIState
	// EFortUIState _BPGetCurrentUIState();                                                                                     // [0x2c01b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortUIMessageItemWidget
/// Size: 0x0048 (0x000210 - 0x000258)
class UFortUIMessageItemWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(UMulticastDelegate)                        OnMessageDisplayed                                          OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnMessageRemoved                                            OFFSET(get<T>, {0x220, 16, 0, 0})
	SMember(FName)                                     MessageID                                                   OFFSET(getStruct<T>, {0x230, 8, 0, 0})
	DMember(int32_t)                                   StackSize                                                   OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	DMember(float)                                     DisplayDuration                                             OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     RemoveDuration                                              OFFSET(get<float>, {0x240, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIMessageItemWidget.OnStackSizeChanged
	// void OnStackSizeChanged(int32_t OldStackSize);                                                                           // [0x154a140] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIMessageItemWidget.OnReturnedToPool
	// void OnReturnedToPool();                                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIMessageItemWidget.OnBeginRemove
	// void OnBeginRemove();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortUIMessageManager
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UFortUIMessageManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(UMulticastDelegate)                        OnMessageAvailable                                          OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<UFortUIMessageItemWidget*>)         MessageQueue                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr>)                    CurrentlyDisplayedMessages                                  OFFSET(get<T>, {0x48, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIMessageManager.HandleMessageRemoved
	// void HandleMessageRemoved(UFortUIMessageItemWidget* MessageItem);                                                        // [0x2c003c0] Final|Native|Private 
	// Function /Script/FortniteUI.FortUIMessageManager.HandleMessageDisplayed
	// void HandleMessageDisplayed(UFortUIMessageItemWidget* MessageItem);                                                      // [0x2c00340] Final|Native|Private 
	// Function /Script/FortniteUI.FortUIMessageManager.GetNumDisplayedItems
	// int32_t GetNumDisplayedItems();                                                                                          // [0x2c00150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIMessageManager.GetNextMessageInQueue
	// UFortUIMessageItemWidget* GetNextMessageInQueue();                                                                       // [0x2c00120] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIMessageManager.AddMessageItem
	// UFortUIMessageItemWidget* AddMessageItem(UClass* MessageItemClass, APlayerController* OwningPlayer, FName MessageID, int32_t StackCount); // [0x2bff6d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortUIMessagesPageBase
/// Size: 0x0030 (0x0003C0 - 0x0003F0)
class UFortUIMessagesPageBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	DMember(int32_t)                                   MaximumMessagesShown                                        OFFSET(get<int32_t>, {0x3C0, 4, 0, 0})
	CMember(UCommonListView*)                          MessagesList                                                OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(TArray<UFortUINotification*>)              MessagesShown                                               OFFSET(get<T>, {0x3D8, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIMessagesPageBase.OnNotificationCleared
	// void OnNotificationCleared(UFortUINotification* ClearedMessage);                                                         // [0x2c00ac0] Final|Native|Private 
	// Function /Script/FortniteUI.FortUIMessagesPageBase.OnMessageAvailable
	// void OnMessageAvailable();                                                                                               // [0x2c00aa0] Final|Native|Private 
	// Function /Script/FortniteUI.FortUIMessagesPageBase.FillMessagesList
	// void FillMessagesList();                                                                                                 // [0x2bfff30] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.UINavigationManager
/// Size: 0x0020 (0x000028 - 0x000048)
class UUINavigationManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(UMulticastDelegate)                        OnNavigationEvent                                           OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FUINavigationEntry>)                NavigationStack                                             OFFSET(get<T>, {0x38, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.UINavigationManager.PushNavigation
	// void PushNavigation(FText DisplayName, UObject* ObjectData, FName IdData, int32_t IntData, DelegateProperty& OnNavigateTo, DelegateProperty& OnNavigateFrom); // [0x2c01050] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.UINavigationManager.PopNavigation
	// void PopNavigation();                                                                                                    // [0x2c00b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.UINavigationManager.NavigationToIndex
	// void NavigationToIndex(int32_t Index);                                                                                   // [0x2c00a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.UINavigationManager.GetStackSize
	// int32_t GetStackSize();                                                                                                  // [0x2662ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.UINavigationManager.GetDisplayName
	// FText GetDisplayName(int32_t Index);                                                                                     // [0x2c00010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.UINavigationManager.ClearStack
	// void ClearStack();                                                                                                       // [0x2bffd10] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortUINavigationManager
/// Size: 0x0110 (0x000048 - 0x000158)
class UFortUINavigationManager : public UUINavigationManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(UMulticastDelegate)                        OnMainTabNavigateRequest                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnFeatureNavigateOp                                         OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnNodePageNavigateRequest                                   OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSquadSlotNavigateRequest                                  OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnVaultTabNavigateRequest                                   OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnVaultItemNavigateRequest                                  OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemEvolutionNavigateRequest                              OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuestItemNavigateRequest                                  OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnPopContentStackOp                                         OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnSquadNavigationOp                                         OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(UMulticastDelegate)                        FortExpeditionsOp                                           OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(UMulticastDelegate)                        FortCollectionBookOp                                        OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnQuestItemOp                                               OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<FFortUINavigationRequest>)          NavigationRequests                                          OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(UUserWidget*)                              HiddenCursorWidget                                          OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(UUserWidget*)                              VirtualCursorWidget                                         OFFSET(get<T>, {0x150, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUINavigationManager.TryGetPendingNavigationOp
	// bool TryGetPendingNavigationOp(FFortUINavigationOperation& NavigationOp);                                                // [0x2c019d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.SetScrollWidget
	// void SetScrollWidget(UWidget* Widget);                                                                                   // [0x2c016b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.PushSquadManagementScreen
	// void PushSquadManagementScreen(FName SquadId, int32_t SquadSlotIndex);                                                   // [0x2c013c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.PushSkillTreePage
	// void PushSkillTreePage(FName SkillTreePageId);                                                                           // [0x2c01340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.PushSkillTreeNode
	// void PushSkillTreeNode(FName SkillTreeNodeId);                                                                           // [0x2c012c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.PushItemManagementScreen
	// void PushItemManagementScreen(EFortFrontendInventoryFilter ItemManagementFilter, UFortItem* ItemToSelect);               // [0x2c00f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.PushItemInspectionScreen
	// void PushItemInspectionScreen(UFortItem* ItemToInspect, EFortItemInspectionMode Mode, UFortItemTileView* CycleTileView, bool bReadOnly, bool bAllowFavoriting, bool bIsTemporaryItem, bool bAllowRarityUpgrading); // [0x2c00d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToSquadSlot
	// void NavigateToSquadSlot(FName SquadId, int32_t SquadSlotIndex);                                                         // [0x2c00960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToQuestObjective
	// void NavigateToQuestObjective(UFortQuestItem* QuestItem);                                                                // [0x2c008e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToNodePageByGameplayTagContainer
	// void NavigateToNodePageByGameplayTagContainer(FGameplayTagContainer GameplayTagContainer);                               // [0x2c00810] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToNodePage
	// void NavigateToNodePage(FName PageId, FName NodeID);                                                                     // [0x2c00750] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToItemManagementScreen
	// void NavigateToItemManagementScreen(EFortFrontendInventoryFilter Filter);                                                // [0x2c006d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToItem
	// void NavigateToItem(UFortItem* Item);                                                                                    // [0x2c00650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToFeature
	// void NavigateToFeature(EFortUIFeature Feature);                                                                          // [0x2c005d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToExpeditions
	// void NavigateToExpeditions();                                                                                            // [0x2c005b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.NavigateToCollectionBook
	// void NavigateToCollectionBook();                                                                                         // [0x2c00590] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.HasPendingNavigationOp
	// bool HasPendingNavigationOp(EFortUINavigationOp NavigationOp);                                                           // [0x2c00440] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.CompletePendingNavigationOp
	// void CompletePendingNavigationOp(EFortUINavigationOp NavigationOp);                                                      // [0x2bffd30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.CenterWidget
	// void CenterWidget(UWidget* Widget);                                                                                      // [0x2bffc90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.CanNavigateToQuestObjective
	// bool CanNavigateToQuestObjective(UFortQuestItem* QuestItem);                                                             // [0x2bffc00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.CanAccessSquadManagementScreen
	// bool CanAccessSquadManagementScreen(FName SquadId, int32_t SquadSlotIndex);                                              // [0x2bffb40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.CanAccessSkillTreePage
	// bool CanAccessSkillTreePage(FName SkillTreePageId);                                                                      // [0x2bffab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.CanAccessSkillTreeNode
	// bool CanAccessSkillTreeNode(FName SkillTreeNodeId);                                                                      // [0x2bffa20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.CanAccessItemManagementScreen
	// bool CanAccessItemManagementScreen(EFortFrontendInventoryFilter ItemManagementFilter);                                   // [0x2bff990] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.CanAccessCollectionBook
	// bool CanAccessCollectionBook();                                                                                          // [0x2bff960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.AttemptPlayQuest
	// void AttemptPlayQuest(UFortQuestItem* Quest);                                                                            // [0x2bff8e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINavigationManager.AttemptMatchmakeForQuest
	// bool AttemptMatchmakeForQuest(UFortQuestItem* Quest, bool& OutContentNotDownloaded);                                     // [0x2bff810] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortUINotificationQueue
/// Size: 0x0028 (0x000028 - 0x000050)
class UFortUINotificationQueue : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   MaxNotificationsInQueue                                     OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TArray<UFortUINotification*>)              NotificationQueue                                           OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUINotificationQueue.UnregisterToReceiveNotifications
	// void UnregisterToReceiveNotifications();                                                                                 // [0x2c06c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINotificationQueue.RemoveNotification
	// void RemoveNotification(UFortUINotification* InNotificationDescription);                                                 // [0x2c06790] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINotificationQueue.RegisterToReceiveNotifications
	// void RegisterToReceiveNotifications(DelegateProperty& NotificationDelegate);                                             // [0x2c066d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortUINotificationQueue.GetNextNotification
	// UFortUINotification* GetNextNotification();                                                                              // [0x2c056b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortUIRewardReport
/// Size: 0x0010 (0x000028 - 0x000038)
class UFortUIRewardReport : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(UFortLocalPlayer*)                         LocalPlayer                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   RewardDisplayLevel                                          OFFSET(get<int32_t>, {0x30, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIRewardReport.GetRewardedChestIndex
	// int32_t GetRewardedChestIndex();                                                                                         // [0x11209b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortUIScoreReport
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortUIScoreReport : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(UFortLocalPlayer*)                         LocalPlayer                                                 OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIScoreReport.IsLocalPlayer
	// bool IsLocalPlayer(int32_t ScoreReportIndex);                                                                            // [0x2c06080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetXpToCompleteLevel
	// int32_t GetXpToCompleteLevel(int32_t Level);                                                                             // [0x2c05e90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetXpInfo
	// bool GetXpInfo(int32_t ScoreReportIndex, FFortUIXpInfo& OutXpInfo);                                                      // [0x2c05d90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetTeamScore
	// int32_t GetTeamScore(TEnumAsByte<EFortUIScoreType> ScoreType);                                                           // [0x2c05d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetScoreReportIndicesByPlayerID
	// void GetScoreReportIndicesByPlayerID(TArray<int32_t>& SortedScoreReportIndices);                                         // [0x2c05c50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetScoreReportIndex
	// int32_t GetScoreReportIndex(FUniqueNetIdRepl& PlayerID);                                                                 // [0x2c05b40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetPlayerScore
	// int32_t GetPlayerScore(int32_t ScoreReportIndex, TEnumAsByte<EFortUIScoreType> ScoreType);                               // [0x2c05a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetPlayerPlatform
	// FString GetPlayerPlatform(int32_t ScoreReportIndex);                                                                     // [0x2c059b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetPlayerName
	// FText GetPlayerName(int32_t ScoreReportIndex);                                                                           // [0x2c058d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetPlayerIDFromScoreReportIndex
	// void GetPlayerIDFromScoreReportIndex(int32_t ScoreReportIndex, FUniqueNetIdRepl& OutUniqueNetIdRepl);                    // [0x2c05790] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetPlayerCount
	// int32_t GetPlayerCount();                                                                                                // [0x2c05760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetLevelProgress
	// float GetLevelProgress(int32_t Level, int32_t DisplayXp);                                                                // [0x2c055f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetDifficultBonusScore
	// int32_t GetDifficultBonusScore();                                                                                        // [0x2c055c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetDifficultBonusMultiplier
	// float GetDifficultBonusMultiplier();                                                                                     // [0x2c05590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetCurrentPlayerPawn
	// AFortPlayerPawn* GetCurrentPlayerPawn(int32_t ScoreReportIndex);                                                         // [0x2c05500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIScoreReport.GetBadgeScore
	// int32_t GetBadgeScore(UFortItem* BadgeItem);                                                                             // [0x2c05470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.FortUIStateTrigger
/// Size: 0x0008 (0x000028 - 0x000030)
class UFortUIStateTrigger : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EFortUIState)                              UIState                                                     OFFSET(get<T>, {0x28, 1, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIStateTrigger.IsLoggedIn
	// bool IsLoggedIn();                                                                                                       // [0x2c06110] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIStateTrigger.EvalBP
	// bool EvalBP();                                                                                                           // [0x262db90] Native|Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/FortniteUI.FortUIStateTrigger_Athena
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortUIStateTrigger_Athena : public UFortUIStateTrigger
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteUI.FortUIStateTrigger_AthenaSpectator
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortUIStateTrigger_AthenaSpectator : public UFortUIStateTrigger
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteUI.FortUIStateTrigger_InGame
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortUIStateTrigger_InGame : public UFortUIStateTrigger
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteUI.FortUIStateTrigger_Login
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortUIStateTrigger_Login : public UFortUIStateTrigger
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteUI.FortUIStateTrigger_Replay
/// Size: 0x0000 (0x000030 - 0x000030)
class UFortUIStateTrigger_Replay : public UFortUIStateTrigger
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FortniteUI.FortUIStateWidget
/// Size: 0x0000 (0x000240 - 0x000240)
class UFortUIStateWidget : public UFortActionHandlerPanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:


	/// Functions
	// Function /Script/FortniteUI.FortUIStateWidget.OnExitState
	// void OnExitState(EFortUIState NextUIState);                                                                              // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget.OnEnterState
	// void OnEnterState(EFortUIState PreviousUIState);                                                                         // [0x154a140] Event|Public|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortUIStateWidget_Frontend
/// Size: 0x0010 (0x0003E0 - 0x0003F0)
class UFortUIStateWidget_Frontend : public UFortUIStateWidget_NUI
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:


	/// Functions
	// Function /Script/FortniteUI.FortUIStateWidget_Frontend.OnMatchmakingV2Changed
	// void OnMatchmakingV2Changed(bool matchmakingActive);                                                                     // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_Frontend.OnGiftNotifyReceived
	// void OnGiftNotifyReceived();                                                                                             // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_Frontend.OnGiftBoxRemoved
	// void OnGiftBoxRemoved(bool bSuccess);                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_Frontend.NeedSeeTrailerMovie
	// bool NeedSeeTrailerMovie();                                                                                              // [0x2c06160] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIStateWidget_Frontend.MarkTrailerMovieSeen
	// void MarkTrailerMovieSeen();                                                                                             // [0x2c06140] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_Frontend.Internal_OnInventoryUpdated
	// void Internal_OnInventoryUpdated(SetProperty& ChangedTypes, int64_t ProfileRevision);                                    // [0x2c05f20] Final|Native|Private|HasOutParms 
	// Function /Script/FortniteUI.FortUIStateWidget_Frontend.CheckForGifts
	// void CheckForGifts();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortUIStateWidget_Login
/// Size: 0x0180 (0x0003E0 - 0x000560)
class UFortUIStateWidget_Login : public UFortUIStateWidget_NUI
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1376;

public:
	CMember(UClass*)                                   StatusScreenClass                                           OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(UFortLoginStatus*)                         StatusScreenWidget                                          OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(UClass*)                                   SplashScreenClass                                           OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(UFortSplashScreenWidget*)                  SplashScreenWidget                                          OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(UClass*)                                   HaveInviteClass                                             OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(UFortHaveInviteSelect*)                    HaveInviteWidget                                            OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(UClass*)                                   PlayedBeforeClass                                           OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(UFortPlayedBeforeSelect*)                  PlayedBeforeWidget                                          OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(UClass*)                                   CredentialSelectClass                                       OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(UFortLoginCredentialSelect*)               CredentialSelectWidget                                      OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(UClass*)                                   InviteRequestClass                                          OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(UFortInviteRequest*)                       InviteRequestWidget                                         OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(UClass*)                                   SignInScreenClass                                           OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(UFortSignInWidget*)                        SignInScreenWidget                                          OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(UClass*)                                   SignInConsoleClass                                          OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(UFortSignInWidget*)                        SignInConsoleWidget                                         OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(UClass*)                                   RedirectToEpicClass                                         OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(UFortRedirectToEpicAccountWidget*)         RedirectToEpicWidget                                        OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(UClass*)                                   NewAccountWarningClass                                      OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(UFortNewAccountWarning*)                   NewAccountWarningWidget                                     OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(UClass*)                                   LoginResultClass                                            OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(UFortLoginResultWidget*)                   LoginResultWIdget                                           OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(UClass*)                                   AccountNotFoundClass                                        OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(UFortAccountNotFound*)                     AccountNotFoundWidget                                       OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(UClass*)                                   DisplayNameClass                                            OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(UFortDisplayNameWidget*)                   DisplayNameWidget                                           OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(UClass*)                                   MultiFactorAuthWidgetClass                                  OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(UFortMultiFactorAuthWidget*)               MultiFactorAuthWidget                                       OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(UClass*)                                   WebLoginWidgetClass                                         OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(UClass*)                                   HealthWarningClass                                          OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(UFortHealthWarningBase*)                   HealthWarningWidget                                         OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(UClass*)                                   EulaClass                                                   OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(UFortEulaWidget*)                          EulaWidget                                                  OFFSET(get<T>, {0x4D8, 8, 0, 0})
	SMember(FText)                                     BenchmarkDialogTitle                                        OFFSET(getStruct<T>, {0x4E0, 24, 0, 0})
	SMember(FText)                                     BenchmarkDialogMessage                                      OFFSET(getStruct<T>, {0x4F8, 24, 0, 0})
	CMember(UClass*)                                   MOTDClass                                                   OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(UFortMOTDWidget*)                          MOTDWidget                                                  OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(UClass*)                                   LoginUnavailableClass                                       OFFSET(get<T>, {0x528, 8, 0, 0})
	CMember(UCommonWidgetStack*)                       LoginFlowStack                                              OFFSET(get<T>, {0x558, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortUIStateWidget_Login.StartAutoLogin
	// bool StartAutoLogin();                                                                                                   // [0x2c06c40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.ShowStatusWindow
	// void ShowStatusWindow(FText StatusText);                                                                                 // [0x2c06b80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.ShowSignInWindow
	// void ShowSignInWindow();                                                                                                 // [0x2c06b60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.ShowSignInConsoleWindow
	// void ShowSignInConsoleWindow();                                                                                          // [0x2c06b40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.ShowResultWindow
	// void ShowResultWindow(FText Title, FText Description, bool bResetLoginFlow);                                             // [0x2c06980] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.ShowBackBar
	// void ShowBackBar();                                                                                                      // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.SafePopFlowStackNoReturn
	// void SafePopFlowStackNoReturn();                                                                                         // [0x2c06840] Final|Native|Protected 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.SafePopFlowStack
	// UWidget* SafePopFlowStack();                                                                                             // [0x2c06810] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.PushWidgetOntoFlowStack
	// void PushWidgetOntoFlowStack(UWidget* Widget);                                                                           // [0x2c06650] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.OnNeedsPurchaseOrAccountLinking
	// void OnNeedsPurchaseOrAccountLinking();                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.OnDisplayWebLogin
	// void OnDisplayWebLogin(UWidget* WebWidget);                                                                              // [0x2c06210] Final|Native|Protected 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.OnDisplayWebAccountCreation
	// void OnDisplayWebAccountCreation(UWidget* WebWidget);                                                                    // [0x2c06190] Final|Native|Protected 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.HideTopBarOptions
	// void HideTopBarOptions();                                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.GetPlatformDisplayName
	// FText GetPlatformDisplayName();                                                                                          // [0x2c056e0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortUIStateWidget_Login.EmptyFlowStack
	// void EmptyFlowStack();                                                                                                   // [0x2c05450] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortUpgradeIndicator
/// Size: 0x0000 (0x000460 - 0x000460)
class UFortUpgradeIndicator : public UFortSimpleItemConditionIconIndicator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
};

/// Class /Script/FortniteUI.FortUserChoiceWidget
/// Size: 0x0000 (0x000218 - 0x000218)
class UFortUserChoiceWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:


	/// Functions
	// Function /Script/FortniteUI.FortUserChoiceWidget.SetChoices
	// void SetChoices(FChoiceData& ChoiceItems);                                                                               // [0x154a140] Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortVideoOptions
/// Size: 0x0060 (0x000220 - 0x000280)
class UFortVideoOptions : public UFortOptionsTab
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:


	/// Functions
	// Function /Script/FortniteUI.FortVideoOptions.WindowModeChanged
	// void WindowModeChanged(int32_t NewMode);                                                                                 // [0x2c0b820] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.ViewDistanceQualityChanged
	// void ViewDistanceQualityChanged(int32_t ButtonId);                                                                       // [0x2c0b7a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.UseVsyncChanged
	// void UseVsyncChanged(bool IsChecked);                                                                                    // [0x2c0b710] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.TextureQualityChanged
	// void TextureQualityChanged(int32_t ButtonId);                                                                            // [0x2c0b690] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.ShowGrassChanged
	// void ShowGrassChanged(bool IsChecked);                                                                                   // [0x2c0b580] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.ShowFPSChanged
	// void ShowFPSChanged(bool IsChecked);                                                                                     // [0x2c0b4f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.ShadowQualityChanged
	// void ShadowQualityChanged(int32_t ButtonId);                                                                             // [0x2c0b470] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.ResolutionChanged
	// void ResolutionChanged(int32_t NewResolution);                                                                           // [0x2c0b0b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.PostProcessQualityChanged
	// void PostProcessQualityChanged(int32_t ButtonId);                                                                        // [0x2c0b010] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.OnQualitySelectorChanged
	// void OnQualitySelectorChanged(int32_t ValueRef);                                                                         // [0x2c0ad40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.MotionBlurChanged
	// void MotionBlurChanged(bool IsChecked);                                                                                  // [0x2c0a9e0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.IsWindowedFullscreen
	// bool IsWindowedFullscreen(int32_t CurrentMode);                                                                          // [0x2c0a8c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.InitializeValues
	// void InitializeValues();                                                                                                 // [0x2c0a8a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetViewDistanceQuality
	// int32_t GetViewDistanceQuality();                                                                                        // [0x2c0a7f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetUseVsync
	// bool GetUseVsync();                                                                                                      // [0x2c0a7c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetTextureQuality
	// int32_t GetTextureQuality();                                                                                             // [0x2c0a790] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetShowGrass
	// bool GetShowGrass();                                                                                                     // [0x2c0a6f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetShowFPS
	// bool GetShowFPS();                                                                                                       // [0x2c0a6c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetShadowQuality
	// int32_t GetShadowQuality();                                                                                              // [0x2c0a690] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetPostProcessQuality
	// int32_t GetPostProcessQuality();                                                                                         // [0x2c0a660] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetPossibleWindowModes
	// TArray<FText> GetPossibleWindowModes();                                                                                  // [0x2c0a5a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetPossibleFPS
	// TArray<FText> GetPossibleFPS();                                                                                          // [0x2c0a4e0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetPossibleDisplayResolutions
	// TArray<FText> GetPossibleDisplayResolutions();                                                                           // [0x2c0a420] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetOverallQualityLevel
	// int32_t GetOverallQualityLevel();                                                                                        // [0x2c0a3f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetMotionBlur
	// bool GetMotionBlur();                                                                                                    // [0x2c0a3c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetEffectsQuality
	// int32_t GetEffectsQuality();                                                                                             // [0x2c0a270] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetCurrentWindowMode
	// int32_t GetCurrentWindowMode();                                                                                          // [0x2c0a210] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetCurrentFPS
	// int32_t GetCurrentFPS();                                                                                                 // [0x2c0a1e0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetCurrentDisplayResolution
	// int32_t GetCurrentDisplayResolution();                                                                                   // [0x2c0a1b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.GetAntiAliasingQuality
	// int32_t GetAntiAliasingQuality();                                                                                        // [0x2c09f70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.FrameRateLimitChanged
	// void FrameRateLimitChanged(int32_t FrameRateLimit);                                                                      // [0x2c09ef0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.EffectsQualityChanged
	// void EffectsQualityChanged(int32_t ButtonId);                                                                            // [0x2c09e50] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortVideoOptions.AntiAliasingQualityChanged
	// void AntiAliasingQualityChanged(int32_t ButtonId);                                                                       // [0x2c09b40] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortWebLoginWidget
/// Size: 0x0010 (0x0003C0 - 0x0003D0)
class UFortWebLoginWidget : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:


	/// Functions
	// Function /Script/FortniteUI.FortWebLoginWidget.DisplayWidget
	// void DisplayWidget(UWidget* WebWidget);                                                                                  // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.FortWebLoginWidget.DismissWidget
	// void DismissWidget();                                                                                                    // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortWorkerSetBonusIcon
/// Size: 0x0018 (0x000210 - 0x000228)
class UFortWorkerSetBonusIcon : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FGameplayTag)                              GameplayTag                                                 OFFSET(getStruct<T>, {0x210, 8, 0, 0})
	CMember(TEnumAsByte<EFortBrushSize>)               ImageSize                                                   OFFSET(get<T>, {0x218, 1, 0, 0})
	CMember(UImage*)                                   Icon                                                        OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortWorkerSetBonusIcon.SetGameplayTag
	// void SetGameplayTag(FGameplayTag& InGameplayTag);                                                                        // [0x2c0b1c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FortniteUI.FortWorkerSetBonusIcon.HandleDifferentGameplayTagSetBP
	// void HandleDifferentGameplayTagSetBP();                                                                                  // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FriendCodeEntryBase
/// Size: 0x0000 (0x000800 - 0x000800)
class UFriendCodeEntryBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2048;

public:
};

/// Class /Script/FortniteUI.FriendCodeListBase
/// Size: 0x0000 (0x0003C0 - 0x0003C0)
class UFriendCodeListBase : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
};

/// Class /Script/FortniteUI.FriendCodeShareButtonBase
/// Size: 0x0038 (0x000800 - 0x000838)
class UFriendCodeShareButtonBase : public UCommonButton
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2104;

public:
	CMember(TArray<FFriendCode>)                       BacchusFriendCodes                                          OFFSET(get<T>, {0x800, 16, 0, 0})
	CMember(UClass*)                                   FriendCodeListClass                                         OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(UCommonTextBlock*)                         NumSharesRemainingText                                      OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(UTextBlock*)                               InviteCodeMessage                                           OFFSET(get<T>, {0x820, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FriendCodeShareButtonBase.OnQueryUnredeemedFriendCodesComplete
	// void OnQueryUnredeemedFriendCodesComplete(bool bSuccess, TArray<FFriendCode>& FriendCodes);                              // [0x2c0adc0] Final|Native|Public|HasOutParms 
	// Function /Script/FortniteUI.FriendCodeShareButtonBase.OnNumSharesUpdated
	// void OnNumSharesUpdated();                                                                                               // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FriendCodeShareButtonBase.OnFriendCodeIssued
	// void OnFriendCodeIssued(bool bSuccess, FFriendCode& FriendCode);                                                         // [0x2c0ab00] Final|Native|Public|HasOutParms 
};

/// Class /Script/FortniteUI.HUDLayoutToolButtonLayer
/// Size: 0x0030 (0x000210 - 0x000240)
class UHUDLayoutToolButtonLayer : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(UCanvasPanel*)                             CanvasPanel_Combat                                          OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UCanvasPanel*)                             CanvasPanel_Build                                           OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UCanvasPanel*)                             CanvasPanel_Persistent                                      OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(USizeBox*)                                 InternalSizeBox                                             OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(TArray<UHUDLayoutToolPlacementWidget*>)    PlacementWidgets                                            OFFSET(get<T>, {0x230, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.HUDLayoutToolButtonLayer.OnBuildMode
	// void OnBuildMode(bool bBuildMode);                                                                                       // [0x2c0aa70] Final|Native|Protected 
};

/// Class /Script/FortniteUI.HUDLayoutToolContext
/// Size: 0x0138 (0x000028 - 0x000160)
class UHUDLayoutToolContext : public UBlueprintContextBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(UMulticastDelegate)                        OnPropertyMenuStateChangeDelegate                           OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnCloseLayoutTool                                           OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnHUDLayoutModeChangeDelegate                               OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnWidgetSelectedDelegate                                    OFFSET(get<T>, {0x60, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.HUDLayoutToolContext.SetSelectedWidget
	// void SetSelectedWidget(UHUDLayoutToolPlacementWidget* NewSelectedWidget);                                                // [0x2c0b370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.SetPropertyMenuState
	// void SetPropertyMenuState(bool bNewlyOpen);                                                                              // [0x2c0b2e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.SetInBuildMode
	// void SetInBuildMode(bool bNewInBuildMode);                                                                               // [0x2c0b250] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.SaveLayout
	// void SaveLayout(bool bSaveToDefaults);                                                                                   // [0x2c0b130] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.ResetSelectedWidgetProperties
	// void ResetSelectedWidgetProperties();                                                                                    // [0x2c0b090] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.OnToolOpened
	// void OnToolOpened();                                                                                                     // [0x2c0aef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.OnPanZoomWidgetClick
	// void OnPanZoomWidgetClick();                                                                                             // [0x2c0ad20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.LoadLayout
	// void LoadLayout(bool bLoadFromDefaults);                                                                                 // [0x2c0a950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.GetInBuildMode
	// bool GetInBuildMode();                                                                                                   // [0x2c0a2a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.HUDLayoutToolContext.CloseLayoutTool
	// void CloseLayoutTool();                                                                                                  // [0x2c09cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.HUDLayoutToolContext.ClearLayout
	// void ClearLayout(bool bClearDefaults);                                                                                   // [0x2c09c20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.HUDLayoutToolInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UHUDLayoutToolInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FortniteUI.HUDLayoutToolPanZoomWidget
/// Size: 0x0098 (0x000118 - 0x0001B0)
class UHUDLayoutToolPanZoomWidget : public UContentWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/FortniteUI.HUDLayoutToolPanZoomWidgetSlot
/// Size: 0x0010 (0x000038 - 0x000048)
class UHUDLayoutToolPanZoomWidgetSlot : public UPanelSlot
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
};

/// Class /Script/FortniteUI.HUDLayoutToolPlacementWidget
/// Size: 0x0110 (0x000210 - 0x000320)
class UHUDLayoutToolPlacementWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	DMember(bool)                                      bCanMoveWidget                                              OFFSET(get<bool>, {0x218, 1, 0, 0})
	CMember(UClass*)                                   HUDElementClass                                             OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      bIsBlockingWidget                                           OFFSET(get<bool>, {0x228, 1, 0, 0})
	CMember(UBorder*)                                  SelectionBorder                                             OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(UBorder*)                                  DisplayScaleBorder                                          OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UOverlay*)                                 MainOverlay                                                 OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     Property                                                    OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     Property1                                                   OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     Property2                                                   OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     Property3                                                   OFFSET(get<float>, {0x254, 4, 0, 0})
	CMember(UBacchusHUDElement*)                       HUDVisual                                                   OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.HUDLayoutToolPlacementWidget.OnWidgetSelected
	// void OnWidgetSelected(UHUDLayoutToolPlacementWidget* InSelectedWidget);                                                  // [0x2c0af10] Final|Native|Protected 
	// Function /Script/FortniteUI.HUDLayoutToolPlacementWidget.GetIsOverlapping
	// bool GetIsOverlapping();                                                                                                 // [0x2c0a2d0] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/FortniteUI.HUDLayoutToolPlacementWidget.BP_GetMobileVisualType
	// FGameplayTag BP_GetMobileVisualType();                                                                                   // [0x2c09bc0] Native|Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/FortniteUI.HUDLayoutToolPropertyPanel
/// Size: 0x0018 (0x000210 - 0x000228)
class UHUDLayoutToolPropertyPanel : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UCommonTextBlock*)                         WidgetName                                                  OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.HUDLayoutToolPropertyPanel.OnWidgetSelected
	// void OnWidgetSelected(UHUDLayoutToolPlacementWidget* NewlySelectedWidget);                                               // [0x2bf9be0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.HUDLayoutToolPropertyPanel.OnOpen
	// void OnOpen();                                                                                                           // [0x2ff9f0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.HUDLayoutToolPropertyPanel.OnMenuStateChange
	// void OnMenuStateChange(bool bNewlyOpen);                                                                                 // [0x2c0ac10] Final|Native|Protected 
	// Function /Script/FortniteUI.HUDLayoutToolPropertyPanel.OnClose
	// void OnClose();                                                                                                          // [0x2b7aa60] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.HUDLayoutToolPropertyWidget
/// Size: 0x0030 (0x000210 - 0x000240)
class UHUDLayoutToolPropertyWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(UAnalogSlider*)                            MySlider                                                    OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_PropertyName                                           OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(UCommonTextBlock*)                         Text_PropertyValue                                          OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(int32_t)                                   PropertyIndex                                               OFFSET(get<int32_t>, {0x228, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.HUDLayoutToolPropertyWidget.OnWidgetSelected
	// void OnWidgetSelected(UHUDLayoutToolPlacementWidget* NewlySelectedWidget);                                               // [0x2c0af90] Final|Native|Protected 
	// Function /Script/FortniteUI.HUDLayoutToolPropertyWidget.OnNewSliderValue
	// void OnNewSliderValue(float NewValue);                                                                                   // [0x2c0aca0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortItemGroupSlotPicker
/// Size: 0x0030 (0x000218 - 0x000248)
class UFortItemGroupSlotPicker : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(UMulticastDelegate)                        OnItemPickerSelectionCommittedEvent                         OFFSET(get<T>, {0x218, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortItemGroupSlotWidget*>) HostItemGroupSlotWidget                                     OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(UContentWidget*)                           SlottedItemDetailsContainer                                 OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(TWeakObjectPtr<UWidget*>)                  SlottedItemDetailsWidget                                    OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UFortItem*)                                UpgradedItemForPreview                                      OFFSET(get<T>, {0x240, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.SignalSelectionCommitted
	// void SignalSelectionCommitted(UFortItem* SelectedItem);                                                                  // [0x2c0b610] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.SetSelection
	// void SetSelection(UFortItem* SelectedItem);                                                                              // [0x2c0b3f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.OnItemPickerSelectionChanged__DelegateSignature
	// void OnItemPickerSelectionChanged__DelegateSignature(UFortItem* SelectedItem);                                           // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.HandleItemSetInternal
	// void HandleItemSetInternal(UFortItemGroupSlotWidget* ItemGroupSlotWidget);                                               // [0x2c0a820] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.HandleItemSet
	// void HandleItemSet();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.GetSquadId
	// FName GetSquadId();                                                                                                      // [0x2c0a750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.GetSlotIndexInGroup
	// int32_t GetSlotIndexInGroup();                                                                                           // [0x2c0a720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.GetItemSlottingRestrictionReasonText
	// FText GetItemSlottingRestrictionReasonText(ESquadSlotItemRestrictionReason Reason);                                      // [0x2c0a300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.GetCurrentlySlottedItem
	// UFortItem* GetCurrentlySlottedItem();                                                                                    // [0x2c0a240] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.GetCompatibleCandidateItems
	// TArray<UFortItem*> GetCompatibleCandidateItems();                                                                        // [0x2c0a130] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.GetCandidateItemSlottingRestrictions
	// void GetCandidateItemSlottingRestrictions(UFortItem* CandidateItem, TArray<ESquadSlotItemRestrictionReason>& OutRestrictions); // [0x2c0a040] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.GetCandidateFitnessValueForSlot
	// float GetCandidateFitnessValueForSlot(UFortItem* Candidate);                                                             // [0x2c09fa0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.EndUpgradePreview
	// void EndUpgradePreview();                                                                                                // [0x2c09ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.DetectCandidateSynergiesAndMatches
	// void DetectCandidateSynergiesAndMatches(UFortItem* Candidate, bool& OutHasSquadManagerSynergy, bool& OutHasPersonalitySynergy, bool& OutHasSetBonusMatch); // [0x2c09cd0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.CreateSlottedItemDetailsWidget
	// UWidget* CreateSlottedItemDetailsWidget(UFortItem* Item);                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupSlotPicker.BeginUpgradePreview
	// void BeginUpgradePreview();                                                                                              // [0x2c09c00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemGroupSlotWidget
/// Size: 0x00D8 (0x000218 - 0x0002F0)
class UFortItemGroupSlotWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	DMember(int32_t)                                   SlotIndexInGroup                                            OFFSET(get<int32_t>, {0x218, 4, 0, 0})
	DMember(bool)                                      IsLocked                                                    OFFSET(get<bool>, {0x21C, 1, 0, 0})
	CMember(TMap<FGameplayAttribute, float>)           AttributeBonusValues                                        OFFSET(get<T>, {0x220, 80, 0, 0})
	DMember(bool)                                      HasSetBonusMatch                                            OFFSET(get<bool>, {0x270, 1, 0, 0})
	CMember(TWeakObjectPtr<UFortItem*>)                SlottedItem                                                 OFFSET(get<T>, {0x274, 8, 0, 0})
	CMember(TArray<EFortItemType>)                     ItemTypeFilters                                             OFFSET(get<T>, {0x280, 16, 0, 0})
	SMember(FGameplayTagContainer)                     ItemTagFilter                                               OFFSET(getStruct<T>, {0x290, 32, 0, 0})
	CMember(UMulticastDelegate)                        OnItemSlotLockedStateChangedEvent                           OFFSET(get<T>, {0x2B0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnItemSetEvent                                              OFFSET(get<T>, {0x2C0, 16, 0, 0})
	CMember(UMulticastDelegate)                        OnAttributeBonusValueChangedEvent                           OFFSET(get<T>, {0x2D0, 16, 0, 0})
	CMember(TWeakObjectPtr<UFortItemGroupWidget*>)     HostItemGroupWidget                                         OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(UClass*)                                   ItemPickerWidgetType                                        OFFSET(get<T>, {0x2E8, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.TryGetSquadSlot
	// bool TryGetSquadSlot(FHomebaseSquadSlot& OutSquadSlot);                                                                  // [0x2c0f470] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.TryGetSquad
	// bool TryGetSquad(FHomebaseSquad& OutSquad);                                                                              // [0x2c0f270] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.SetSlottingPreviewItem
	// void SetSlottingPreviewItem(UFortItem* Item);                                                                            // [0x2c0f060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.SetItem
	// void SetItem(UFortItem* ItemToSlot);                                                                                     // [0x2c0efe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.OnItemSlotLockedStateChanged__DelegateSignature
	// void OnItemSlotLockedStateChanged__DelegateSignature(UFortItemGroupSlotWidget* ItemSlotWidget);                          // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.OnItemSet__DelegateSignature
	// void OnItemSet__DelegateSignature(UFortItemGroupSlotWidget* ItemSlotWidget);                                             // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.OnAttributeBonusValueChanged__DelegateSignature
	// void OnAttributeBonusValueChanged__DelegateSignature(UFortItemGroupSlotWidget* ItemSlotWidget);                          // [0x154a140] MulticastDelegate|Public|Delegate 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.IsManagerSlot
	// bool IsManagerSlot();                                                                                                    // [0x2c0ede0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.IsItemCompatible
	// bool IsItemCompatible(UFortItem* Item);                                                                                  // [0x2c0ed50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.InitializeSlot
	// void InitializeSlot(UFortItemGroupWidget* HostItemGroupWidget, int32_t SlotIndexInGroup);                                // [0x2c0ec30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.HandleTraitStateChanged
	// void HandleTraitStateChanged(bool SetBonusMatchStateChanged);                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.HandlePreviewStateChanged
	// void HandlePreviewStateChanged(bool IsSquadSlotAffectedByPreview, bool IsBeingReplacedOrRelocated, bool WouldHavePersonalitySynergy, bool WouldHaveSetBonusMatch, TMap<FGameplayAttribute, float>& PreviewAttributeBonusValues); // [0x154a140] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.HandleLockedStateChanged
	// void HandleLockedStateChanged();                                                                                         // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.HandleItemSet
	// void HandleItemSet();                                                                                                    // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.HandleItemPickerSelectionCommittedInternal
	// void HandleItemPickerSelectionCommittedInternal(UFortItem* SelectedItem);                                                // [0x2c0eaf0] Final|Native|Private 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.HandleItemPickerSelectionCommitted
	// void HandleItemPickerSelectionCommitted();                                                                               // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.HandleAttributeBonusValueChanged
	// void HandleAttributeBonusValueChanged();                                                                                 // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.GetSquadId
	// FName GetSquadId();                                                                                                      // [0x2c0e980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.CreatePickerWidget
	// UFortItemGroupSlotPicker* CreatePickerWidget();                                                                          // [0x2c0e4e0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemGroupSlotWidget.CancelSlottingPreview
	// void CancelSlottingPreview();                                                                                            // [0x2c0e430] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortItemGroupWidget
/// Size: 0x0028 (0x000218 - 0x000240)
class UFortItemGroupWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FName)                                     SquadId                                                     OFFSET(getStruct<T>, {0x218, 8, 0, 0})
	CMember(UClass*)                                   ItemSlotWidgetType                                          OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UPanelWidget*)                             ItemSlotsContainer                                          OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(TArray<UFortItemGroupSlotWidget*>)         SlotWidgets                                                 OFFSET(get<T>, {0x230, 16, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortItemGroupWidget.TryGetSquad
	// bool TryGetSquad(FHomebaseSquad& OutSquad);                                                                              // [0x2c0f370] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupWidget.SetSquad
	// void SetSquad(FName SquadId);                                                                                            // [0x2c0f0e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.FortItemGroupWidget.HandleItemSlotAdded
	// void HandleItemSlotAdded(int32_t SlotIndex, UFortItemGroupSlotWidget* ItemSlotWidget);                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupWidget.HandleEffectsChanged
	// void HandleEffectsChanged();                                                                                             // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupWidget.HandleDifferentSquadSet
	// void HandleDifferentSquadSet();                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.FortItemGroupWidget.GetTotalAttributeBonuses
	// void GetTotalAttributeBonuses(TArray<FFortAttributeModifierDisplayData>& OutModifiers);                                  // [0x2c0e9e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupWidget.GetSquadId
	// FName GetSquadId();                                                                                                      // [0x2c0e9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortItemGroupWidget.GetActiveSetBonusTags
	// void GetActiveSetBonusTags(TArray<FGameplayTag>& OutActiveSetBonusTags);                                                 // [0x2c0e510] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.MassiveGadgetEquippedWidget
/// Size: 0x0000 (0x000210 - 0x000210)
class UMassiveGadgetEquippedWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:


	/// Functions
	// Function /Script/FortniteUI.MassiveGadgetEquippedWidget.HandleMassiveTagChanged
	// void HandleMassiveTagChanged(FGameplayTag Tag, int32_t Count);                                                           // [0x2c0eb70] Final|Native|Private 
};

/// Class /Script/FortniteUI.MobileHUDVisual
/// Size: 0x0010 (0x000210 - 0x000220)
class UMobileHUDVisual : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FGameplayTag)                              VisualType                                                  OFFSET(getStruct<T>, {0x210, 8, 0, 0})
	DMember(float)                                     Opacity                                                     OFFSET(get<float>, {0x218, 4, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.MobileHUDVisual.GetVisualType
	// FGameplayTag GetVisualType();                                                                                            // [0x2c0eab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.MobileHUDButtonVisual
/// Size: 0x0028 (0x000220 - 0x000248)
class UMobileHUDButtonVisual : public UMobileHUDVisual
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	DMember(float)                                     ButtonSize                                                  OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     ButtonDisplayScale                                          OFFSET(get<float>, {0x224, 4, 0, 0})
	CMember(UPaperSprite*)                             DefaultIcon                                                 OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(USizeBox*)                                 OuterSizeBox                                                OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(USizeBox*)                                 InnerSizeBox                                                OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(UImage*)                                   Image_Icon                                                  OFFSET(get<T>, {0x240, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.MobileHUDButtonVisual.SetButtonSprite
	// void SetButtonSprite(UPaperSprite* NewSprite);                                                                           // [0x2c0ef60] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.FortQuestScreen
/// Size: 0x0000 (0x0003F0 - 0x0003F0)
class UFortQuestScreen : public UFortActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:


	/// Functions
	// Function /Script/FortniteUI.FortQuestScreen.ProcessPendingSeenQuestItems
	// void ProcessPendingSeenQuestItems();                                                                                     // [0x2c0ef40] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/FortniteUI.RemoteControlledPawnExpirationWidget
/// Size: 0x0010 (0x000210 - 0x000220)
class URemoteControlledPawnExpirationWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(UImage*)                                   ExpirationProgressImage                                     OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.RemoteControlledPawnExpirationWidget.OnPawnChanged
	// void OnPawnChanged();                                                                                                    // [0x2c0eef0] Final|Native|Protected 
};

/// Class /Script/FortniteUI.FortSeasonPassLevelInfo
/// Size: 0x0018 (0x000028 - 0x000040)
class UFortSeasonPassLevelInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(AFortPlayerController*)                    FortPC                                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(UAthenaSeasonItemDefinition*)              SeasonData                                                  OFFSET(get<T>, {0x38, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.IsPaidUnlocked
	// bool IsPaidUnlocked();                                                                                                   // [0x2c0ee40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.IsPaidClaimed
	// bool IsPaidClaimed();                                                                                                    // [0x2c0ee10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.IsFreeUnlocked
	// bool IsFreeUnlocked();                                                                                                   // [0x2c0ed20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.IsFreeClaimed
	// bool IsFreeClaimed();                                                                                                    // [0x2c0ecf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.GetSeasonPassMaxLevel
	// int32_t GetSeasonPassMaxLevel();                                                                                         // [0x2c0e950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.GetRewardItems
	// TArray<UFortItem*> GetRewardItems(EAthenaSeasonRewardTrack Track);                                                       // [0x2c0e7e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.GetNumRewardItems
	// int32_t GetNumRewardItems(EAthenaSeasonRewardTrack Track);                                                               // [0x2c0e750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.GetLevelProgress
	// float GetLevelProgress();                                                                                                // [0x2c0e720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.GetLevel
	// int32_t GetLevel();                                                                                                      // [0x2b6cf30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.FortSeasonPassLevelInfo.ContainsChaseReward
	// bool ContainsChaseReward(EAthenaSeasonRewardTrack Track);                                                                // [0x2c0e450] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.SeasonPassLevelWidget
/// Size: 0x0018 (0x000210 - 0x000228)
class USeasonPassLevelWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(UFortSeasonPassLevelInfo*)                 LevelInfo                                                   OFFSET(get<T>, {0x220, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.SeasonPassLevelWidget.PlayIntro
	// void PlayIntro();                                                                                                        // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassLevelWidget.OnSetup
	// void OnSetup();                                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassLevelWidget.OnNavigateTo
	// void OnNavigateTo();                                                                                                     // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassLevelWidget.OnLockedStatusChanged
	// void OnLockedStatusChanged(bool FreeUnlocked, bool PaidUnlocked);                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassLevelWidget.OnAttemptClaimFinished
	// void OnAttemptClaimFinished(bool FreeClaimed, bool PaidClaimed);                                                         // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassLevelWidget.GetLevelInfo
	// UFortSeasonPassLevelInfo* GetLevelInfo();                                                                                // [0x2c0e660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassLevelWidget.AttemptClaim
	// void AttemptClaim();                                                                                                     // [0x2c0e410] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FortniteUI.SeasonPassLevelPanel
/// Size: 0x0020 (0x0003C0 - 0x0003E0)
class USeasonPassLevelPanel : public UCommonActivatablePanel
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(UFortSeasonPassLevelInfo*)                 LevelInfo                                                   OFFSET(get<T>, {0x3D0, 8, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.SeasonPassLevelPanel.Setup
	// void Setup(UFortSeasonPassLevelInfo* Info);                                                                              // [0x2c0f160] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.SeasonPassLevelPanel.OnSetup
	// void OnSetup();                                                                                                          // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassLevelPanel.OnLockedStatusChanged
	// void OnLockedStatusChanged(bool FreeUnlocked, bool PaidUnlocked);                                                        // [0x154a140] Event|Public|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassLevelPanel.GetLevelInfo
	// UFortSeasonPassLevelInfo* GetLevelInfo();                                                                                // [0x2c0e630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FortniteUI.SeasonPassPageWidget
/// Size: 0x0050 (0x000210 - 0x000260)
class USeasonPassPageWidget : public UCommonUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:


	/// Functions
	// Function /Script/FortniteUI.SeasonPassPageWidget.ShouldPlayInto
	// bool ShouldPlayInto(int32_t FirstLevel);                                                                                 // [0x2c0f1e0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FortniteUI.SeasonPassPageWidget.ScreenShown
	// void ScreenShown();                                                                                                      // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassPageWidget.OwnsSeasonPass
	// bool OwnsSeasonPass();                                                                                                   // [0x2c0ef10] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassPageWidget.OnBattlePassChanged
	// void OnBattlePassChanged();                                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassPageWidget.NavigatePageRight
	// void NavigatePageRight();                                                                                                // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassPageWidget.NavigatePageLeft
	// void NavigatePageLeft();                                                                                                 // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassPageWidget.GetCurrentSeasonNumber
	// int32_t GetCurrentSeasonNumber();                                                                                        // [0x2c0e600] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassPageWidget.ContainsLevel
	// bool ContainsLevel(int32_t Level);                                                                                       // [0x154a140] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FortniteUI.SeasonPassScreenBase
/// Size: 0x0070 (0x000450 - 0x0004C0)
class USeasonPassScreenBase : public UFortDirectAcquisitionWidgetBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(UAthenaSeasonItemDefinition*)              SeasonData                                                  OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(TArray<USeasonPassLevelWidget*>)           LevelWidgets                                                OFFSET(get<T>, {0x460, 16, 0, 0})
	CMember(TMap<int32_t, UFortSeasonPassLevelInfo*>)  LevelInfos                                                  OFFSET(get<T>, {0x470, 80, 0, 0})


	/// Functions
	// Function /Script/FortniteUI.SeasonPassScreenBase.UpdateStoreHasStarsNotification
	// void UpdateStoreHasStarsNotification(bool bShowNotification);                                                            // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassScreenBase.ScrollPositive
	// void ScrollPositive();                                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassScreenBase.ScrollNegative
	// void ScrollNegative();                                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassScreenBase.OwnsSeasonPass
	// bool OwnsSeasonPass();                                                                                                   // [0x2c0ef10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassScreenBase.OnSeasonPassChanged
	// void OnSeasonPassChanged();                                                                                              // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassScreenBase.OnNoCurrentSeason
	// void OnNoCurrentSeason();                                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassScreenBase.OnNavigateToLevel
	// void OnNavigateToLevel(int32_t Level);                                                                                   // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassScreenBase.OnLevelsGenerated
	// void OnLevelsGenerated();                                                                                                // [0x154a140] Event|Protected|BlueprintEvent 
	// Function /Script/FortniteUI.SeasonPassScreenBase.NavigateToLevel
	// void NavigateToLevel(int32_t Level);                                                                                     // [0x2c0ee70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FortniteUI.SeasonPassScreenBase.GetSeasonPassLevelMax
	// int32_t GetSeasonPassLevelMax();                                                                                         // [0x2c0e920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassScreenBase.GetSeasonPassLevel
	// int32_t GetSeasonPassLevel();                                                                                            // [0x2c0e8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassScreenBase.GetSeasonEndDate
	// FDateTime GetSeasonEndDate();                                                                                            // [0x2c0e8b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassScreenBase.GetLevelInfo
	// UFortSeasonPassLevelInfo* GetLevelInfo(int32_t Level);                                                                   // [0x2c0e690] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassScreenBase.GetAllLevelInfos
	// TMap<int32_t, UFortSeasonPassLevelInfo*> GetAllLevelInfos();                                                             // [0x2c0e5c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FortniteUI.SeasonPassScreenBase.GenerateLevelWidgets
	// TArray<USeasonPassLevelWidget*> GenerateLevelWidgets(UFortSeasonPassLevelInfo* LevelInfo);                               // [0x154a140] Event|Protected|BlueprintEvent 
};

/// Class /Script/FortniteUI.FortSquadPanelWidget
/// Size: 0x0028 (0x000218 - 0x000240)
class UFortSquadPanelWidget : public UFortUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(EFortHomebaseSquadType)                    SquadTypeFilter                                             OFFSET(get<T>, {0x218, 1, 0, 0})
	CMember(UClass*)                                   SquadWidgetType                                             OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(UPanelWidget*)                             SquadWidgetsContainer                                       OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(TArray<UFortItemGroupWidget*>)             SquadWidgets                                                OFFSET(get<T>, {0x230, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortFocusedBuildingInfo
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortFocusedBuildingInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(bool)                                      bIsInteractable                                             OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bCanBePlayerEdited                                          OFFSET(get<bool>, {0x1, 1, 0, 0})
	SMember(FVector)                                   IndicatorRelativeLocation                                   OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	CMember(EFortBuildingHealthDisplayRule)            HealthDisplayRule                                           OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      bIsAnyTrapAttached                                          OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bIsTrapAttachedFacingPlayer                                 OFFSET(get<bool>, {0x19, 1, 0, 0})
	DMember(bool)                                      bIsPreviewTrapAttached                                      OFFSET(get<bool>, {0x1A, 1, 0, 0})
	DMember(float)                                     AttachedTrapMaxDurability                                   OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   CurrentLevel                                                OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	CMember(EFortBuildingInteraction)                  InteractionType                                             OFFSET(get<T>, {0x24, 1, 0, 0})
	DMember(int32_t)                                   InteractionCost                                             OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   UpgradeBonus                                                OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	CMember(TEnumAsByte<EFortResourceType>)            BuildingMaterial                                            OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      bIsHostile                                                  OFFSET(get<bool>, {0x31, 1, 0, 0})
	SMember(FText)                                     ContextualText                                              OFFSET(getStruct<T>, {0x38, 24, 0, 0})
};

/// Struct /Script/FortniteUI.FortHUDState
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortHUDState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bInBuildMode                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bInCombatMode                                               OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bInEditMode                                                 OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      bIsParachuteOpen                                            OFFSET(get<bool>, {0x3, 1, 0, 0})
	DMember(bool)                                      bIsFreeFalling                                              OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      bInLockedBus                                                OFFSET(get<bool>, {0x5, 1, 0, 0})
	DMember(bool)                                      bInUnlockedBus                                              OFFSET(get<bool>, {0x6, 1, 0, 0})
	DMember(bool)                                      bOnTargeting                                                OFFSET(get<bool>, {0x7, 1, 0, 0})
	DMember(bool)                                      bOnUsingScopeTargeting                                      OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bOnCanTarget                                                OFFSET(get<bool>, {0x9, 1, 0, 0})
	DMember(bool)                                      bOnCanUseScopeTargeting                                     OFFSET(get<bool>, {0xA, 1, 0, 0})
	DMember(bool)                                      bOnCanUseSecondaryAbility                                   OFFSET(get<bool>, {0xB, 1, 0, 0})
	DMember(bool)                                      bCanOpenChute                                               OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bCrouching                                                  OFFSET(get<bool>, {0xD, 1, 0, 0})
	DMember(bool)                                      bDBNO                                                       OFFSET(get<bool>, {0xE, 1, 0, 0})
	DMember(bool)                                      bIsControllingRCPawn                                        OFFSET(get<bool>, {0xF, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortTabListRegistrationInfo
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FFortTabListRegistrationInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FName)                                     TabNameID                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bHidden                                                     OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      bAllowedInZone                                              OFFSET(get<bool>, {0x9, 1, 0, 0})
	SMember(FFortTabButtonLabelInfo)                   TabLabelInfo                                                OFFSET(getStruct<T>, {0x10, 160, 0, 0})
	CMember(UClass*)                                   TabButtonType                                               OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(UClass*)                                   TabContentType                                              OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(UWidget*)                                  CreatedTabContentWidget                                     OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortTabButtonLabelInfo
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FFortTabButtonLabelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FSlateBrush)                               IconBrush                                                   OFFSET(getStruct<T>, {0x18, 136, 0, 0})
};

/// Struct /Script/FortniteUI.FortUIStatStyle
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FFortUIStatStyle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     HighestText                                                 OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FSlateBrush)                               Icon                                                        OFFSET(getStruct<T>, {0x30, 136, 0, 0})
	CMember(ECommonNumericType)                        NumericType                                                 OFFSET(get<T>, {0xB8, 1, 0, 0})
	DMember(float)                                     MinimalNotableValue                                         OFFSET(get<float>, {0xBC, 4, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemFilterDefinition
/// Size: 0x0060 (0x000000 - 0x000060)
class FFortItemFilterDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/FortniteUI.FortItemSorterDefinition
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortItemSorterDefinition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/FortniteUI.FortNodeStyleData
/// Size: 0x0668 (0x000008 - 0x000670)
class FFortNodeStyleData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1648;

public:
	SMember(FFortMultiSizeBrush)                       ActiveBrush                                                 OFFSET(getStruct<T>, {0x8, 816, 0, 0})
	SMember(FFortMultiSizeBrush)                       InactiveBrush                                               OFFSET(getStruct<T>, {0x338, 816, 0, 0})
	CMember(UMediaSource*)                             PreviewMediaSource                                          OFFSET(get<T>, {0x668, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortLastMissionInfo
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortLastMissionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FText)                                     TheaterName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     MissionName                                                 OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     Difficulty                                                  OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Struct /Script/FortniteUI.FortBackendVersion
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortBackendVersion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bIsValid                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FString)                                   App                                                         OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   ModuleName                                                  OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   Branch                                                      OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   BuildDate                                                   OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FString)                                   ServerDate                                                  OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   Build                                                       OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FString)                                   Changelist                                                  OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FString)                                   OverridePropertiesVersion                                   OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FString)                                   Version                                                     OFFSET(getStruct<T>, {0x88, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortUIFeatureStruct
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortUIFeatureStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EFortUIFeatureState)                       CurrentState                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EFortUIFeatureState)                       ForcedState                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(EFortUIFeatureStateReason)                 ForcedStateReason                                           OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(UMulticastDelegate)                        ChangeDelegate                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortDisplayAttribute
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortDisplayAttribute : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	SMember(FText)                                     Label                                                       OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FText)                                     Value                                                       OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     HoverText                                                   OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	DMember(float)                                     NumericValue                                                OFFSET(get<float>, {0x68, 4, 0, 0})
	CMember(EFortStatValueDisplayType)                 DisplayType                                                 OFFSET(get<T>, {0x6C, 1, 0, 0})
	CMember(EFortBuffState)                            BuffState                                                   OFFSET(get<T>, {0x6D, 1, 0, 0})
	CMember(EFortClampState)                           ClampState                                                  OFFSET(get<T>, {0x6E, 1, 0, 0})
	CMember(EFortComparisonType)                       ComparisonType                                              OFFSET(get<T>, {0x6F, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortAttributeModifierDisplayData
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FFortAttributeModifierDisplayData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x0, 32, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x20, 4, 0, 0})
	CMember(TEnumAsByte<EGameplayModOp>)               ModifierType                                                OFFSET(get<T>, {0x24, 1, 0, 0})
	SMember(FGameplayTagRequirements)                  SourceTags                                                  OFFSET(getStruct<T>, {0x28, 64, 0, 0})
	SMember(FGameplayTagRequirements)                  TargetTags                                                  OFFSET(getStruct<T>, {0x68, 64, 0, 0})
};

/// Struct /Script/FortniteUI.FortStateStyle
/// Size: 0x0350 (0x000000 - 0x000350)
class FFortStateStyle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FFortMultiSizeBrush)                       Brush                                                       OFFSET(getStruct<T>, {0x0, 816, 0, 0})
	SMember(FLinearColor)                              PrimaryColor                                                OFFSET(getStruct<T>, {0x330, 16, 0, 0})
	SMember(FLinearColor)                              SecondaryColor                                              OFFSET(getStruct<T>, {0x340, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortErrorInfo
/// Size: 0x0080 (0x000000 - 0x000080)
class FFortErrorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FText)                                     Operation                                                   OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     ErrorMessage                                                OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FString)                                   ErrorCode                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteUI.UINavigationData
/// Size: 0x0030 (0x000000 - 0x000030)
class FUINavigationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(UObject*)                                  ObjectData                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     IdData                                                      OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	DMember(int32_t)                                   IntData                                                     OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/FortniteUI.GridSortKey
/// Size: 0x0018 (0x000000 - 0x000018)
class FGridSortKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     Number                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FString)                                   String                                                      OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortReceivedItemLootInfo
/// Size: 0x0028 (0x000000 - 0x000028)
class FFortReceivedItemLootInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(UFortItemDefinition*)                      ItemDef                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FString)                                   TemplateId                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(UFortItem*)                                GeneratedItemInstance                                       OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FortniteUI.SquadSlotSortTypes
/// Size: 0x0010 (0x000000 - 0x000010)
class FSquadSlotSortTypes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<ESquadSlotSortType>)                SortTypes                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortAthenaItemManagementInventoryFilterTabLabelInfo
/// Size: 0x0008 (0x0000A0 - 0x0000A8)
class FFortAthenaItemManagementInventoryFilterTabLabelInfo : public FFortTabButtonLabelInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FName)                                     FilterTabNameId                                             OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Struct /Script/FortniteUI.LeaderboardFilter
/// Size: 0x0018 (0x000000 - 0x000018)
class FLeaderboardFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(UDataTable*)                               LeaderboardDisplayData                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteUI.AthenaLeaderboardData
/// Size: 0x0018 (0x000008 - 0x000020)
class FAthenaLeaderboardData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EFortAthenaPlaylist)                       Playlist                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(TArray<FAthenaPlaylistLeaderboardData>)    Stats                                                       OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteUI.AthenaPlaylistLeaderboardData
/// Size: 0x0050 (0x000000 - 0x000050)
class FAthenaPlaylistLeaderboardData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     StatId                                                      OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     StatDisplayName                                             OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     TabDisplayName                                              OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FString)                                   BaseGameplayTag                                             OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      bIsGlobal                                                   OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Struct /Script/FortniteUI.StatGroupData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FStatGroupData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FText)                                     GroupName                                                   OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FSlateBrush)                               Group                                                       OFFSET(getStruct<T>, {0x18, 136, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     ChartValue                                                  OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     ChartOrigionalValue                                         OFFSET(get<float>, {0xA8, 4, 0, 0})
};

/// Struct /Script/FortniteUI.AthenaReplayBrowserRowData
/// Size: 0x0090 (0x000000 - 0x000090)
class FAthenaReplayBrowserRowData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FDateTime)                                 Date                                                        OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   Version                                                     OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(float)                                     Size                                                        OFFSET(get<float>, {0x1C, 4, 0, 0})
	SMember(FString)                                   Mode                                                        OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(float)                                     Length                                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   Rank                                                        OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   NumPlayers                                                  OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   Kills                                                       OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   Views                                                       OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   Assists                                                     OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   Accuracy                                                    OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      IsOld                                                       OFFSET(get<bool>, {0x4C, 1, 0, 0})
	SMember(FAthenaReplayBrowserMatchStats)            MatchStats                                                  OFFSET(getStruct<T>, {0x50, 40, 0, 0})
	DMember(bool)                                      bIsSaved                                                    OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bIsCorrupt                                                  OFFSET(get<bool>, {0x79, 1, 0, 0})
};

/// Struct /Script/FortniteUI.AthenaReplayBrowserMatchStats
/// Size: 0x0028 (0x000000 - 0x000028)
class FAthenaReplayBrowserMatchStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   Hits                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Headshots                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   Revives                                                     OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   DamageTaken                                                 OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   DamagePlayers                                               OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   DamageStructures                                            OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   ChestsOpened                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   Distance                                                    OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   MaterialsGathered                                           OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   MaterialsUsed                                               OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/FortniteUI.AthenaTeamCountSlotData
/// Size: 0x0038 (0x000000 - 0x000038)
class FAthenaTeamCountSlotData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FText)                                     TeamNameText                                                OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     TeamCountText                                               OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	DMember(bool)                                      bIsMyTeam                                                   OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Struct /Script/FortniteUI.BackgroundColors
/// Size: 0x0030 (0x000000 - 0x000030)
class FBackgroundColors : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              Color1                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FLinearColor)                              GridColor                                                   OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteUI.AthenaBossHealthData
/// Size: 0x0030 (0x000000 - 0x000030)
class FAthenaBossHealthData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bVisible                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bShowShields                                                OFFSET(get<bool>, {0x1, 1, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   Health                                                      OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   HealthMax                                                   OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   Shields                                                     OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   ShieldsMax                                                  OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Struct /Script/FortniteUI.AthenaNews
/// Size: 0x0010 (0x000000 - 0x000010)
class FAthenaNews : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FortniteUI.AthenaNewsEntry
/// Size: 0x0038 (0x000000 - 0x000038)
class FAthenaNewsEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Struct /Script/FortniteUI.CharacterRanges
/// Size: 0x0030 (0x000000 - 0x000030)
class FCharacterRanges : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<int32_t>)                           Ranges                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           SinglePoints                                                OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<int32_t>)                           ExcludedPoints                                              OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortDailyRewardsData
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortDailyRewardsData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   CurrentLoginDays                                            OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      bCanClaim                                                   OFFSET(get<bool>, {0x4, 1, 0, 0})
	CMember(TArray<FFortDailyRewardsScheduleData>)     Schedules                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortDailyRewardsScheduleData
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortDailyRewardsScheduleData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FText)                                     ScheduleTitle                                               OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     ScheduleDescription                                         OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     ScheduleItemDescription                                     OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     ScheduleEpicItemDescription                                 OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	DMember(int32_t)                                   WeekOffset                                                  OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   RewardsGiven                                                OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(int32_t)                                   RewardsAllowed                                              OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	CMember(TArray<FFortDailyRewardsItemData>)         CalendarItems                                               OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FFortDailyRewardsItemData>)         HighValueItems                                              OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(bool)                                      ClaimedToday                                                OFFSET(get<bool>, {0x90, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortDailyRewardsItemData
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortDailyRewardsItemData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortItem*)                                RewardItem                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   RewardDay                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      IsCurrentReward                                             OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      IsClaimed                                                   OFFSET(get<bool>, {0xD, 1, 0, 0})
};

/// Struct /Script/FortniteUI.ExpeditionTabInfo
/// Size: 0x00A8 (0x000000 - 0x0000A8)
class FExpeditionTabInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FName)                                     TabNameID                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FFortTabButtonLabelInfo)                   TabLabelInfo                                                OFFSET(getStruct<T>, {0x8, 160, 0, 0})
};

/// Struct /Script/FortniteUI.ConsumedCriteriaData
/// Size: 0x0018 (0x000000 - 0x000018)
class FConsumedCriteriaData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     PowerMod                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TArray<FName>)                             CriteriaNames                                               OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortFrontEndFeatureStruct
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortFrontEndFeatureStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EFortFrontEndFeatureState)                 CurrentState                                                OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EFortFrontEndFeatureState)                 ForcedState                                                 OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(EFortFrontEndFeatureStateReason)           ForcedStateReason                                           OFFSET(get<T>, {0x2, 1, 0, 0})
	CMember(UMulticastDelegate)                        ChangeDelegate                                              OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortMissionDetails
/// Size: 0x0168 (0x000000 - 0x000168)
class FFortMissionDetails : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EFortTheaterMapTileType)                   TileType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FText)                                     TheaterDisplayName                                          OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     MissionName                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FText)                                     MissionDescription                                          OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(bool)                                      bIsGroupContent                                             OFFSET(get<bool>, {0x50, 1, 0, 0})
	CMember(UFortMissionGenerator*)                    MissionDefinition                                           OFFSET(get<T>, {0x58, 8, 0, 0})
	SMember(FText)                                     ZoneName                                                    OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	SMember(FText)                                     ZoneDescription                                             OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	SMember(FText)                                     RegionThemeName                                             OFFSET(getStruct<T>, {0x90, 24, 0, 0})
	CMember(USlateBrushAsset*)                         RegionThemeIcon                                             OFFSET(get<T>, {0xA8, 40, 0, 0})
	SMember(FText)                                     DifficultyName                                              OFFSET(getStruct<T>, {0xD0, 24, 0, 0})
	CMember(TArray<FFortMissionRewardInfo>)            MissionRewards                                              OFFSET(get<T>, {0xE8, 16, 0, 0})
	SMember(FTimespan)                                 AvailableTime                                               OFFSET(getStruct<T>, {0xF8, 8, 0, 0})
	DMember(int32_t)                                   RequiredBaseRating                                          OFFSET(get<int32_t>, {0x100, 4, 0, 0})
	DMember(int32_t)                                   RecommendedBaseRating                                       OFFSET(get<int32_t>, {0x104, 4, 0, 0})
	DMember(int32_t)                                   ContentDifficultyLevel                                      OFFSET(get<int32_t>, {0x108, 4, 0, 0})
	DMember(int32_t)                                   ContentAccountLevel                                         OFFSET(get<int32_t>, {0x10C, 4, 0, 0})
	DMember(int32_t)                                   LootLevel                                                   OFFSET(get<int32_t>, {0x110, 4, 0, 0})
	DMember(bool)                                      bOverrideConningText                                        OFFSET(get<bool>, {0x114, 1, 0, 0})
	SMember(FText)                                     ConningOverrideText                                         OFFSET(getStruct<T>, {0x118, 24, 0, 0})
	SMember(FString)                                   TheaterUniqueId                                             OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	CMember(UFortCloudSaveItemDefinition*)             AssociatedCloudSaveItemDefinition                           OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(TArray<UFortGameplayModifierItemDefinition*>) GameplayModifiers                                        OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<FText>)                             Objectives                                                  OFFSET(get<T>, {0x158, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortMissionRewardInfo
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FFortMissionRewardInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FSlateBrush)                               Icon                                                        OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	CMember(UFortItem*)                                Item                                                        OFFSET(get<T>, {0xA0, 8, 0, 0})
	DMember(bool)                                      bIsMissionAlertReward                                       OFFSET(get<bool>, {0xA8, 1, 0, 0})
};

/// Struct /Script/FortniteUI.BuildingRequirements
/// Size: 0x0028 (0x000000 - 0x000028)
class FBuildingRequirements : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   RequiredAccountLevel                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CurrentAccountLevel                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TArray<FAttributeRequirement>)             AttributeRequirements                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   RequiredPower                                               OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   CurrentPower                                                OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   RequiredManufacturing                                       OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   CurrentManufacturing                                        OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/FortniteUI.AttributeRequirement
/// Size: 0x0020 (0x000000 - 0x000020)
class FAttributeRequirement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(bool)                                      bRequirementsMet                                            OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/FortniteUI.HeroStat
/// Size: 0x0020 (0x000000 - 0x000020)
class FHeroStat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      bIsCategory                                                 OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Struct /Script/FortniteUI.EmptyHeroSlot
/// Size: 0x0010 (0x000000 - 0x000010)
class FEmptyHeroSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortHeroType*)                            Type                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NumAvailable                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      bHasMale                                                    OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      bHasFemale                                                  OFFSET(get<bool>, {0xD, 1, 0, 0})
};

/// Struct /Script/FortniteUI.HeroUIData
/// Size: 0x0020 (0x000000 - 0x000020)
class FHeroUIData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UFortHero*)                                Hero                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIsSelected                                                 OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   XPRequirementForCurrentLevel                                OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   XPRequirementForNextLevel                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   RequiredXPToLevelUp                                         OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(bool)                                      bIsMaxHeroLevel                                             OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortHeroNamesData
/// Size: 0x0030 (0x000008 - 0x000038)
class FFortHeroNamesData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   FirstName                                                   OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   NickName                                                    OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   LastName                                                    OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemDelta
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortItemDelta : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortItemDefinition*)                      ItemDefinition                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   BaseAmount                                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   DeltaAmount                                                 OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FortniteUI.FortBasicMissionInfo
/// Size: 0x0388 (0x000000 - 0x000388)
class FFortBasicMissionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	SMember(FText)                                     MissionName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FFortMultiSizeBrush)                       MissionIcons                                                OFFSET(getStruct<T>, {0x18, 816, 0, 0})
	SMember(FText)                                     TheaterName                                                 OFFSET(getStruct<T>, {0x348, 24, 0, 0})
	SMember(FText)                                     DifficultyName                                              OFFSET(getStruct<T>, {0x360, 24, 0, 0})
	CMember(UMediaSource*)                             EndOfMissionMediaSource                                     OFFSET(get<T>, {0x378, 8, 0, 0})
	DMember(bool)                                      bSkipEndOfMissionVideo                                      OFFSET(get<bool>, {0x380, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortKillerVisualInfo
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FFortKillerVisualInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FSlateBrush)                               KillerBrush                                                 OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	SMember(FText)                                     KillerName                                                  OFFSET(getStruct<T>, {0x88, 24, 0, 0})
};

/// Struct /Script/FortniteUI.ItemDefinitionChangedStruct
/// Size: 0x0010 (0x000000 - 0x000010)
class FItemDefinitionChangedStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UMulticastDelegate)                        ChangeDelegate                                              OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemListFilter
/// Size: 0x0018 (0x000000 - 0x000018)
class FFortItemListFilter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   SearchText                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(EFortInventoryFilter)                      FilterType                                                  OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(bool)                                      bInStorageVault                                             OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bIncludeVaultOverflow                                       OFFSET(get<bool>, {0x12, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_XXS_ItemInstance_Configuration
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortItemCard_XXS_ItemInstance_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x0, 48, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_StackCountBlock_Configuration
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortItemCard_StackCountBlock_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      bShowShorthandStackCount                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(UClass*)                                   TextStyle                                                   OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_XS_TransformKey_Configuration
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortItemCard_XS_TransformKey_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FVector2D)                                 TransformKeyIconSize                                        OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_XS_ItemInstance_Configuration
/// Size: 0x0188 (0x000000 - 0x000188)
class FFortItemCard_XS_ItemInstance_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMargin)                                   PowerRatingBlockPadding                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) PowerRatingBlock                            OFFSET(getStruct<T>, {0x20, 256, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	SMember(FMargin)                                   TraitBoxPadding                                             OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	SMember(FVector2D)                                 FirstTraitSize                                              OFFSET(getStruct<T>, {0x138, 8, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x140, 48, 0, 0})
	SMember(FFortItemCard_DurabilityMeter_Configuration) DurabilityMeter                                           OFFSET(getStruct<T>, {0x170, 20, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_DurabilityMeter_Configuration
/// Size: 0x0014 (0x000000 - 0x000014)
class FFortItemCard_DurabilityMeter_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     MeterThickness                                              OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FMargin)                                   MeterPadding                                                OFFSET(getStruct<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_PowerRatingBlock_Configuration
/// Size: 0x0050 (0x000000 - 0x000050)
class FFortItemCard_PowerRatingBlock_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FMargin)                                   CustomRatingInternalPadding                                 OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FVector2D)                                 CustomRatingIconSize                                        OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	CMember(UClass*)                                   CustomRatingTextStyle                                       OFFSET(get<T>, {0x20, 40, 0, 0})
	SMember(FVector2D)                                 ComparisonIndicatorSize                                     OFFSET(getStruct<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_PowerRatingBlock_ItemInstance_Configuration
/// Size: 0x00B0 (0x000050 - 0x000100)
class FFortItemCard_PowerRatingBlock_ItemInstance_Configuration : public FFortItemCard_PowerRatingBlock_Configuration
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FSlateBrush)                               PowerRatingIconBrush                                        OFFSET(getStruct<T>, {0x50, 136, 0, 0})
	CMember(UClass*)                                   PowerRatingTextStyle                                        OFFSET(get<T>, {0xD8, 40, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_XS_PersonnelAndSchematics_Configuration
/// Size: 0x0034 (0x000000 - 0x000034)
class FFortItemCard_XS_PersonnelAndSchematics_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FFortItemCard_DetailAreaBorder_Configuration) DetailAreaBorder                                         OFFSET(getStruct<T>, {0x18, 20, 0, 0})
	SMember(FVector2D)                                 AvailableUpgradeIconSize                                    OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_DetailAreaBorder_Configuration
/// Size: 0x0014 (0x000000 - 0x000014)
class FFortItemCard_DetailAreaBorder_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     MinimumHeight                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_S_TransformKey_Configuration
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortItemCard_S_TransformKey_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FVector2D)                                 TransformKeyIconSize                                        OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_S_ItemInstance_Configuration
/// Size: 0x01A0 (0x000000 - 0x0001A0)
class FFortItemCard_S_ItemInstance_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMargin)                                   PowerRatingBlockPadding                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) PowerRatingBlock                            OFFSET(getStruct<T>, {0x20, 256, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x128, 48, 0, 0})
	SMember(FMargin)                                   TraitBoxPadding                                             OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	SMember(FVector2D)                                 FirstTraitSize                                              OFFSET(getStruct<T>, {0x168, 8, 0, 0})
	SMember(FMargin)                                   TierMeterPadding                                            OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FFortItemCard_TierMeter_Configuration)     TierMeter                                                   OFFSET(getStruct<T>, {0x180, 12, 0, 0})
	SMember(FFortItemCard_DurabilityMeter_Configuration) DurabilityMeter                                           OFFSET(getStruct<T>, {0x18C, 20, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_TierMeter_Configuration
/// Size: 0x000C (0x000000 - 0x00000C)
class FFortItemCard_TierMeter_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FVector2D)                                 PipSize                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     InterPipPadding                                             OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_S_PersonnelAndSchematics_Configuration
/// Size: 0x02C8 (0x000000 - 0x0002C8)
class FFortItemCard_S_PersonnelAndSchematics_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration) PowerRatingBlock                  OFFSET(getStruct<T>, {0x10, 432, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x1C0, 8, 0, 0})
	SMember(FFortItemCard_NameplateBorder_Configuration) Nameplate                                                 OFFSET(getStruct<T>, {0x1C8, 152, 0, 0})
	SMember(FVector2D)                                 ClassIconSize                                               OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	SMember(FVector2D)                                 LeadSurvivorTypeIconSize                                    OFFSET(getStruct<T>, {0x268, 8, 0, 0})
	SMember(FVector2D)                                 FirstIconSlotSize                                           OFFSET(getStruct<T>, {0x270, 8, 0, 0})
	DMember(float)                                     PaddingBetweenIconSlots                                     OFFSET(get<float>, {0x278, 4, 0, 0})
	SMember(FVector2D)                                 SecondIconSlotSize                                          OFFSET(getStruct<T>, {0x27C, 8, 0, 0})
	SMember(FFortItemCard_DefenderWeaponTypeIcon_Configuration) DefenderWeaponTypeIcon                             OFFSET(getStruct<T>, {0x284, 8, 0, 0})
	SMember(FFortItemCard_DetailAreaBorder_Configuration) DetailAreaBorder                                         OFFSET(getStruct<T>, {0x28C, 20, 0, 0})
	SMember(FFortItemCard_LevelMeter_Configuration)    LevelMeter                                                  OFFSET(getStruct<T>, {0x2A0, 20, 0, 0})
	DMember(float)                                     TierMeterLeftPadding                                        OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FFortItemCard_TierMeter_Configuration)     TierMeter                                                   OFFSET(getStruct<T>, {0x2B8, 12, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_LevelMeter_Configuration
/// Size: 0x0014 (0x000000 - 0x000014)
class FFortItemCard_LevelMeter_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     MeterThickness                                              OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FMargin)                                   MeterPadding                                                OFFSET(getStruct<T>, {0x4, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_DefenderWeaponTypeIcon_Configuration
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortItemCard_DefenderWeaponTypeIcon_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FVector2D)                                 IconConstraints                                             OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_NameplateBorder_Configuration
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortItemCard_NameplateBorder_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FMargin)                                   Padding                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x10, 136, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration
/// Size: 0x0160 (0x000050 - 0x0001B0)
class FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration : public FFortItemCard_PowerRatingBlock_Configuration
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FSlateBrush)                               PersonnelPowerRatingIconBrush                               OFFSET(getStruct<T>, {0x50, 136, 0, 0})
	CMember(UClass*)                                   PersonnelPowerRatingTextStyle                               OFFSET(get<T>, {0xD8, 40, 0, 0})
	SMember(FSlateBrush)                               SchematicPowerRatingIconBrush                               OFFSET(getStruct<T>, {0x100, 136, 0, 0})
	CMember(UClass*)                                   SchematicPowerRatingTextStyle                               OFFSET(get<T>, {0x188, 40, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_M_TransformKey_Configuration
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortItemCard_M_TransformKey_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FVector2D)                                 TransformKeyIconSize                                        OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_M_ItemInstance_Configuration
/// Size: 0x01B0 (0x000000 - 0x0001B0)
class FFortItemCard_M_ItemInstance_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMargin)                                   PowerRatingBlockPadding                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) PowerRatingBlock                            OFFSET(getStruct<T>, {0x20, 256, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x128, 48, 0, 0})
	SMember(FMargin)                                   TraitBoxPadding                                             OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	SMember(FVector2D)                                 FirstTraitSize                                              OFFSET(getStruct<T>, {0x168, 8, 0, 0})
	DMember(float)                                     PaddingBetweenTraitIcons                                    OFFSET(get<float>, {0x170, 4, 0, 0})
	SMember(FVector2D)                                 SecondTraitSize                                             OFFSET(getStruct<T>, {0x174, 8, 0, 0})
	SMember(FMargin)                                   TierMeterPadding                                            OFFSET(getStruct<T>, {0x17C, 16, 0, 0})
	SMember(FFortItemCard_TierMeter_Configuration)     TierMeter                                                   OFFSET(getStruct<T>, {0x18C, 12, 0, 0})
	SMember(FFortItemCard_DurabilityMeter_Configuration) DurabilityMeter                                           OFFSET(getStruct<T>, {0x198, 20, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_M_PersonnelAndSchematics_Configuration
/// Size: 0x02C8 (0x000000 - 0x0002C8)
class FFortItemCard_M_PersonnelAndSchematics_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration) PowerRatingBlock                  OFFSET(getStruct<T>, {0x10, 432, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x1C0, 8, 0, 0})
	SMember(FFortItemCard_NameplateBorder_Configuration) Nameplate                                                 OFFSET(getStruct<T>, {0x1C8, 152, 0, 0})
	SMember(FVector2D)                                 ClassIconSize                                               OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	SMember(FVector2D)                                 LeadSurvivorTypeIconSize                                    OFFSET(getStruct<T>, {0x268, 8, 0, 0})
	SMember(FVector2D)                                 FirstIconSlotSize                                           OFFSET(getStruct<T>, {0x270, 8, 0, 0})
	DMember(float)                                     PaddingBetweenIconSlots                                     OFFSET(get<float>, {0x278, 4, 0, 0})
	SMember(FVector2D)                                 SecondIconSlotSize                                          OFFSET(getStruct<T>, {0x27C, 8, 0, 0})
	SMember(FFortItemCard_DefenderWeaponTypeIcon_Configuration) DefenderWeaponTypeIcon                             OFFSET(getStruct<T>, {0x284, 8, 0, 0})
	SMember(FFortItemCard_DetailAreaBorder_Configuration) DetailAreaBorder                                         OFFSET(getStruct<T>, {0x28C, 20, 0, 0})
	SMember(FFortItemCard_LevelMeter_Configuration)    LevelMeter                                                  OFFSET(getStruct<T>, {0x2A0, 20, 0, 0})
	DMember(float)                                     TierMeterLeftPadding                                        OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FFortItemCard_TierMeter_Configuration)     TierMeter                                                   OFFSET(getStruct<T>, {0x2B8, 12, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_L_TransformKey_Configuration
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortItemCard_L_TransformKey_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FVector2D)                                 TransformKeyIconSize                                        OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_L_ItemInstance_Configuration
/// Size: 0x01B0 (0x000000 - 0x0001B0)
class FFortItemCard_L_ItemInstance_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMargin)                                   PowerRatingBlockPadding                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) PowerRatingBlock                            OFFSET(getStruct<T>, {0x20, 256, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x128, 48, 0, 0})
	SMember(FMargin)                                   TraitBoxPadding                                             OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	SMember(FVector2D)                                 FirstTraitSize                                              OFFSET(getStruct<T>, {0x168, 8, 0, 0})
	DMember(float)                                     PaddingBetweenTraitIcons                                    OFFSET(get<float>, {0x170, 4, 0, 0})
	SMember(FVector2D)                                 SecondTraitSize                                             OFFSET(getStruct<T>, {0x174, 8, 0, 0})
	SMember(FMargin)                                   TierMeterPadding                                            OFFSET(getStruct<T>, {0x17C, 16, 0, 0})
	SMember(FFortItemCard_TierMeter_Configuration)     TierMeter                                                   OFFSET(getStruct<T>, {0x18C, 12, 0, 0})
	SMember(FFortItemCard_DurabilityMeter_Configuration) DurabilityMeter                                           OFFSET(getStruct<T>, {0x198, 20, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_L_PersonnelAndSchematics_Configuration
/// Size: 0x02C8 (0x000000 - 0x0002C8)
class FFortItemCard_L_PersonnelAndSchematics_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration) PowerRatingBlock                  OFFSET(getStruct<T>, {0x10, 432, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x1C0, 8, 0, 0})
	SMember(FFortItemCard_NameplateBorder_Configuration) Nameplate                                                 OFFSET(getStruct<T>, {0x1C8, 152, 0, 0})
	SMember(FVector2D)                                 ClassIconSize                                               OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	SMember(FVector2D)                                 LeadSurvivorTypeIconSize                                    OFFSET(getStruct<T>, {0x268, 8, 0, 0})
	SMember(FVector2D)                                 FirstIconSlotSize                                           OFFSET(getStruct<T>, {0x270, 8, 0, 0})
	DMember(float)                                     PaddingBetweenIconSlots                                     OFFSET(get<float>, {0x278, 4, 0, 0})
	SMember(FVector2D)                                 SecondIconSlotSize                                          OFFSET(getStruct<T>, {0x27C, 8, 0, 0})
	SMember(FFortItemCard_DefenderWeaponTypeIcon_Configuration) DefenderWeaponTypeIcon                             OFFSET(getStruct<T>, {0x284, 8, 0, 0})
	SMember(FFortItemCard_DetailAreaBorder_Configuration) DetailAreaBorder                                         OFFSET(getStruct<T>, {0x28C, 20, 0, 0})
	SMember(FFortItemCard_LevelMeter_Configuration)    LevelMeter                                                  OFFSET(getStruct<T>, {0x2A0, 20, 0, 0})
	DMember(float)                                     TierMeterLeftPadding                                        OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FFortItemCard_TierMeter_Configuration)     TierMeter                                                   OFFSET(getStruct<T>, {0x2B8, 12, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_XL_TransformKey_Configuration
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortItemCard_XL_TransformKey_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FVector2D)                                 TransformKeyIconSize                                        OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_XL_ItemInstance_Configuration
/// Size: 0x01B0 (0x000000 - 0x0001B0)
class FFortItemCard_XL_ItemInstance_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FMargin)                                   PowerRatingBlockPadding                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_ItemInstance_Configuration) PowerRatingBlock                            OFFSET(getStruct<T>, {0x20, 256, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	SMember(FFortItemCard_StackCountBlock_Configuration) StackCountBlock                                           OFFSET(getStruct<T>, {0x128, 48, 0, 0})
	SMember(FMargin)                                   TraitBoxPadding                                             OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	SMember(FVector2D)                                 FirstTraitSize                                              OFFSET(getStruct<T>, {0x168, 8, 0, 0})
	DMember(float)                                     PaddingBetweenTraitIcons                                    OFFSET(get<float>, {0x170, 4, 0, 0})
	SMember(FVector2D)                                 SecondTraitSize                                             OFFSET(getStruct<T>, {0x174, 8, 0, 0})
	SMember(FMargin)                                   TierMeterPadding                                            OFFSET(getStruct<T>, {0x17C, 16, 0, 0})
	SMember(FFortItemCard_TierMeter_Configuration)     TierMeter                                                   OFFSET(getStruct<T>, {0x18C, 12, 0, 0})
	SMember(FFortItemCard_DurabilityMeter_Configuration) DurabilityMeter                                           OFFSET(getStruct<T>, {0x198, 20, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemCard_XL_PersonnelAndSchematics_Configuration
/// Size: 0x0350 (0x000000 - 0x000350)
class FFortItemCard_XL_PersonnelAndSchematics_Configuration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FMargin)                                   BackgroundPadding                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FFortItemCard_PowerRatingBlock_PersonnelAndSchematics_Configuration) PowerRatingBlock                  OFFSET(getStruct<T>, {0x10, 432, 0, 0})
	SMember(FVector2D)                                 BookmarkImageSize                                           OFFSET(getStruct<T>, {0x1C0, 8, 0, 0})
	SMember(FFortItemCard_NameplateBorder_Configuration) Nameplate                                                 OFFSET(getStruct<T>, {0x1C8, 152, 0, 0})
	CMember(UClass*)                                   ItemNameTextStyle                                           OFFSET(get<T>, {0x260, 40, 0, 0})
	SMember(FVector2D)                                 LeadSurvivorTypeIconSize                                    OFFSET(getStruct<T>, {0x288, 8, 0, 0})
	SMember(FVector2D)                                 FirstIconSlotSize                                           OFFSET(getStruct<T>, {0x290, 8, 0, 0})
	DMember(float)                                     PaddingBetweenIconSlots                                     OFFSET(get<float>, {0x298, 4, 0, 0})
	SMember(FVector2D)                                 SecondIconSlotSize                                          OFFSET(getStruct<T>, {0x29C, 8, 0, 0})
	SMember(FFortItemCard_DefenderWeaponTypeIcon_Configuration) DefenderWeaponTypeIcon                             OFFSET(getStruct<T>, {0x2A4, 8, 0, 0})
	SMember(FFortItemCard_DetailAreaBorder_Configuration) DetailAreaBorder                                         OFFSET(getStruct<T>, {0x2AC, 20, 0, 0})
	DMember(float)                                     RarityNameTextLeftPadding                                   OFFSET(get<float>, {0x2C0, 4, 0, 0})
	CMember(UClass*)                                   RarityNameTextStyle                                         OFFSET(get<T>, {0x2C8, 40, 0, 0})
	DMember(float)                                     ClassIconImageLeftPadding                                   OFFSET(get<float>, {0x2F0, 4, 0, 0})
	SMember(FVector2D)                                 ClassIconSize                                               OFFSET(getStruct<T>, {0x2F4, 8, 0, 0})
	DMember(float)                                     PaddingBetweenClassIconAndName                              OFFSET(get<float>, {0x2FC, 4, 0, 0})
	CMember(UClass*)                                   ClassNameTextStyle                                          OFFSET(get<T>, {0x300, 40, 0, 0})
	DMember(float)                                     TierMeterLeftPadding                                        OFFSET(get<float>, {0x328, 4, 0, 0})
	SMember(FFortItemCard_TierMeter_Configuration)     TierMeter                                                   OFFSET(getStruct<T>, {0x32C, 12, 0, 0})
	SMember(FMargin)                                   IconSlotOverNameplatePadding                                OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	SMember(FVector2D)                                 IconSlotOverNameplateSize                                   OFFSET(getStruct<T>, {0x348, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemManagementInventoryFilterTabLabelInfo
/// Size: 0x0008 (0x0000A0 - 0x0000A8)
class FFortItemManagementInventoryFilterTabLabelInfo : public FFortTabButtonLabelInfo
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FName)                                     FilterTabNameId                                             OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortItemEntryPreviewData
/// Size: 0x0008 (0x000000 - 0x000008)
class FFortItemEntryPreviewData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   Quantity                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EFortItemInspectionMode)                   InspectMode                                                 OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortMaterialProgressBarSectionInfo
/// Size: 0x0048 (0x000000 - 0x000048)
class FFortMaterialProgressBarSectionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FFortMaterialProgressBarSectionStyle)      SectionStyle                                                OFFSET(getStruct<T>, {0x0, 64, 0, 0})
	DMember(float)                                     Percent                                                     OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/FortniteUI.FortMaterialProgressBarSectionStyle
/// Size: 0x0040 (0x000000 - 0x000040)
class FFortMaterialProgressBarSectionStyle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      bGradientBar                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FName)                                     BarParamName                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     BarColorOneParamName                                        OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     BarColorTwoParamName                                        OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FLinearColor)                              BarColorOne                                                 OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FLinearColor)                              BarColorTwo                                                 OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortModalContainerSizeEntry
/// Size: 0x001C (0x000000 - 0x00001C)
class FFortModalContainerSizeEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     AbsoluteWidth                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TopPercent                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MiddlePercent                                               OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     BottomPercent                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     VerticalPadding                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     HorizontalPadding                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     ContentPadding                                              OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FortniteUI.FortMtxGradient
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortMtxGradient : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FLinearColor)                              Start                                                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              Stop                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortMtxDetailsAttribute
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortMtxDetailsAttribute : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     Value                                                       OFFSET(getStruct<T>, {0x18, 24, 0, 0})
};

/// Struct /Script/FortniteUI.NodeTypeData
/// Size: 0x0010 (0x000008 - 0x000018)
class FNodeTypeData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EFortHomebaseNodeDisplayType)              NodeType                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(UClass*)                                   UIClass                                                     OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortCanvasProperties
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortCanvasProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FMargin)                                   Reserves                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bMouseAutoPan                                               OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     ActiveAreaPercent                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MaxZoom                                                     OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MinZoom                                                     OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     ZoomIncrement                                               OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     ConnectorThickness                                          OFFSET(get<float>, {0x24, 4, 0, 0})
	SMember(FLinearColor)                              ConnectorOwnedColor                                         OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FLinearColor)                              ConnectorPurchasableColor                                   OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FLinearColor)                              ConnectorNonPurchasableColor                                OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FLinearColor)                              ConnectorTowardsSelectedColor                               OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	CMember(UMaterialInstanceDynamic*)                 BackgroundMaterial                                          OFFSET(get<T>, {0x68, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortUINodePrerequisite
/// Size: 0x06B0 (0x000000 - 0x0006B0)
class FFortUINodePrerequisite : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1712;

public:
	SMember(FText)                                     DisplayName                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FFortNodeStyleData)                        Style                                                       OFFSET(getStruct<T>, {0x18, 1648, 0, 0})
	DMember(bool)                                      bIsNodePage                                                 OFFSET(get<bool>, {0x688, 1, 0, 0})
	DMember(int32_t)                                   MinRequiredNodesInPage                                      OFFSET(get<int32_t>, {0x68C, 4, 0, 0})
	DMember(int32_t)                                   OwnedNodesInPage                                            OFFSET(get<int32_t>, {0x690, 4, 0, 0})
	SMember(FText)                                     NodeType                                                    OFFSET(getStruct<T>, {0x698, 24, 0, 0})
};

/// Struct /Script/FortniteUI.FortUIPerk
/// Size: 0x0098 (0x000000 - 0x000098)
class FFortUIPerk : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FFortSpecializationSlot)                   SpecializationSlot                                          OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	CMember(UFortHero*)                                Hero                                                        OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(TEnumAsByte<EFortItemTier>)                Tier                                                        OFFSET(get<T>, {0x90, 1, 0, 0})
	CMember(EFortSupportBonusType)                     SupportBonusType                                            OFFSET(get<T>, {0x91, 1, 0, 0})
	DMember(bool)                                      bIsTierPerk                                                 OFFSET(get<bool>, {0x92, 1, 0, 0})
	DMember(bool)                                      bIsUpgrade                                                  OFFSET(get<bool>, {0x93, 1, 0, 0})
	DMember(bool)                                      bIsEvolution                                                OFFSET(get<bool>, {0x94, 1, 0, 0})
	DMember(bool)                                      bIsEvolutionBranch                                          OFFSET(get<bool>, {0x95, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortUIPerkTier
/// Size: 0x0020 (0x000000 - 0x000020)
class FFortUIPerkTier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(UFortHeroSpecialization*)                  HeroSpecialization                                          OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<EFortItemTier>)                Tier                                                        OFFSET(get<T>, {0x8, 1, 0, 0})
	CMember(UFortHero*)                                CurrentHero                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      bIsUpgrade                                                  OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      bIsEvolution                                                OFFSET(get<bool>, {0x19, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortPickerTemporaryWheel
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortPickerTemporaryWheel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<UFortItemDefinition*>)              Items                                                       OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteUI.RadialOptionData
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FRadialOptionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FText)                                     Label                                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FSlateBrush)                               Brush                                                       OFFSET(getStruct<T>, {0x18, 136, 0, 0})
};

/// Struct /Script/FortniteUI.SquadQuickChatOptionData
/// Size: 0x0020 (0x0000A0 - 0x0000C0)
class FSquadQuickChatOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FAthenaQuickChatActiveEntry)               ChatEntry                                                   OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0xB8, 1, 0, 0})
};

/// Struct /Script/FortniteUI.ItemDefOptionData
/// Size: 0x0008 (0x0000A0 - 0x0000A8)
class FItemDefOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(UObject*)                                  ItemDef                                                     OFFSET(get<T>, {0xA0, 8, 0, 0})
};

/// Struct /Script/FortniteUI.EmoteOptionData
/// Size: 0x0008 (0x0000A0 - 0x0000A8)
class FEmoteOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FName)                                     EmoteCommand                                                OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Struct /Script/FortniteUI.MapNoteOptionData
/// Size: 0x0018 (0x0000A0 - 0x0000B8)
class FMapNoteOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FText)                                     MapNoteText                                                 OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
};

/// Struct /Script/FortniteUI.SquadChatOptionData
/// Size: 0x0018 (0x0000A0 - 0x0000B8)
class FSquadChatOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FText)                                     ChatText                                                    OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
};

/// Struct /Script/FortniteUI.ChatOptionData
/// Size: 0x0018 (0x0000A0 - 0x0000B8)
class FChatOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FText)                                     ChatText                                                    OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
};

/// Struct /Script/FortniteUI.ItemCategoryOptionData
/// Size: 0x0018 (0x0000A0 - 0x0000B8)
class FItemCategoryOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FString)                                   TemplatePrefix                                              OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	CMember(TEnumAsByte<EBuildingAttachmentType>)      BuildingAttachmentType                                      OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Struct /Script/FortniteUI.BuildingOptionData
/// Size: 0x0018 (0x0000A0 - 0x0000B8)
class FBuildingOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FString)                                   ClassSuffix                                                 OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	DMember(bool)                                      ClassMirrored                                               OFFSET(get<bool>, {0xB0, 1, 0, 0})
};

/// Struct /Script/FortniteUI.BuildingCategoryOptionData
/// Size: 0x0008 (0x0000A0 - 0x0000A8)
class FBuildingCategoryOptionData : public FRadialOptionData
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TEnumAsByte<EFortBuildingType>)            BuildingType                                                OFFSET(get<T>, {0xA0, 1, 0, 0})
};

/// Struct /Script/FortniteUI.PlatformSupportDesc
/// Size: 0x0020 (0x000000 - 0x000020)
class FPlatformSupportDesc : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     DisableDesc                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(EFortLoginAccountType)                     AccountType                                                 OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortRichTextStyleData
/// Size: 0x01E8 (0x000008 - 0x0001F0)
class FFortRichTextStyleData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FTextBlockStyle)                           TextStyle                                                   OFFSET(getStruct<T>, {0x8, 480, 0, 0})
	DMember(bool)                                      bHyperlinkStyle                                             OFFSET(get<bool>, {0x1E8, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortSkillTreeCanvasStyle
/// Size: 0x0034 (0x000000 - 0x000034)
class FFortSkillTreeCanvasStyle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	DMember(float)                                     ConnectorThickness                                          OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FLinearColor)                              ConnectorOwnedColor                                         OFFSET(getStruct<T>, {0x4, 16, 0, 0})
	SMember(FLinearColor)                              ConnectorPurchasableColor                                   OFFSET(getStruct<T>, {0x14, 16, 0, 0})
	SMember(FLinearColor)                              ConnectorNonPurchasableColor                                OFFSET(getStruct<T>, {0x24, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortSkillTreeNodeDisplayData
/// Size: 0x0338 (0x000000 - 0x000338)
class FFortSkillTreeNodeDisplayData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	SMember(FFortMultiSizeBrush)                       Icon                                                        OFFSET(getStruct<T>, {0x0, 816, 0, 0})
	CMember(UMediaSource*)                             PreviewVideoMediaSource                                     OFFSET(get<T>, {0x330, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortLandingPageDefenderSummaryInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortLandingPageDefenderSummaryInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FName)                                     SquadId                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     TheaterDisplayName                                          OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FString)                                   TheaterUniqueId                                             OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortAttributeModifierAccumulation
/// Size: 0x0030 (0x000000 - 0x000030)
class FFortAttributeModifierAccumulation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTag)                              GameplayTag                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayAttribute)                        Attribute                                                   OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	CMember(TEnumAsByte<EGameplayModOp>)               ModifierOp                                                  OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(float)                                     Magnitude                                                   OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Struct /Script/FortniteUI.OpenedCardPack
/// Size: 0x0010 (0x000000 - 0x000010)
class FOpenedCardPack : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(UFortCardPackItemDefinition*)              CardPackDefinition                                          OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   DisplayLevel                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FortniteUI.Card
/// Size: 0x0018 (0x000000 - 0x000018)
class FCard : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   QuantityReceived                                            OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(UFortItem*)                                Item                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(EPauseType)                                PauseType                                                   OFFSET(get<T>, {0x10, 1, 0, 0})
};

/// Struct /Script/FortniteUI.CardPackOffer
/// Size: 0x0090 (0x000000 - 0x000090)
class FCardPackOffer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	DMember(int32_t)                                   MtxPrice                                                    OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TEnumAsByte<ECatalogSaleType>)             SaleType                                                    OFFSET(get<T>, {0x34, 1, 0, 0})
	SMember(FText)                                     SaleText                                                    OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(int32_t)                                   Price                                                       OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   RegularPrice                                                OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	CMember(UFortAccountItemDefinition*)               CurrencyType                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(int32_t)                                   QuantityRemaining                                           OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(bool)                                      bTimedOffer                                                 OFFSET(get<bool>, {0x64, 1, 0, 0})
	SMember(FFortCatalogMeta)                          OfferMetaData                                               OFFSET(getStruct<T>, {0x68, 24, 0, 0})
};

/// Struct /Script/FortniteUI.FortSurvivorSquadSlottingFeedbackData
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FFortSurvivorSquadSlottingFeedbackData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(bool)                                      HadLeaderMatch                                              OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      HasLeaderMatch                                              OFFSET(get<bool>, {0x1, 1, 0, 0})
	CMember(TMap<FGameplayTag, int32_t>)               PreviousSetBonusCounts                                      OFFSET(get<T>, {0x8, 80, 0, 0})
	CMember(TMap<FGameplayTag, int32_t>)               CurrentSetBonusCounts                                       OFFSET(get<T>, {0x58, 80, 0, 0})
	DMember(int32_t)                                   PreviousPersonalityMatchCount                               OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
	DMember(int32_t)                                   CurrentPersonalityMatchCount                                OFFSET(get<int32_t>, {0xAC, 4, 0, 0})
};

/// Struct /Script/FortniteUI.FortSurvivorSquadSelectorButtonPersonalityMatches
/// Size: 0x0340 (0x000000 - 0x000340)
class FFortSurvivorSquadSelectorButtonPersonalityMatches : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	DMember(int32_t)                                   NumPersonalityMatches                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   TotalNonLeaderSquadMembers                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      HavePersonalityIcons                                        OFFSET(get<bool>, {0x8, 1, 0, 0})
	SMember(FFortMultiSizeBrush)                       PersonalityIcons                                            OFFSET(getStruct<T>, {0x10, 816, 0, 0})
};

/// Struct /Script/FortniteUI.FortSurvivorSquadSelectorButtonSummaryStats
/// Size: 0x0070 (0x000000 - 0x000070)
class FFortSurvivorSquadSelectorButtonSummaryStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FName)                                     SquadId                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayAttribute)                        FortAttribute                                               OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	DMember(float)                                     FortAttributeValue                                          OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FGameplayAttribute)                        FortTeamAttribute                                           OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	DMember(float)                                     TeamFortAttributeValue                                      OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     SquadPowerValue                                             OFFSET(get<float>, {0x54, 4, 0, 0})
	SMember(FText)                                     FortAttributeName                                           OFFSET(getStruct<T>, {0x58, 24, 0, 0})
};

/// Struct /Script/FortniteUI.FortUISurvivorSquadStatMatch
/// Size: 0x0370 (0x000000 - 0x000370)
class FFortUISurvivorSquadStatMatch : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FFortMultiSizeBrush)                       Icons                                                       OFFSET(getStruct<T>, {0x0, 816, 0, 0})
	SMember(FText)                                     MagnitudeText                                               OFFSET(getStruct<T>, {0x330, 24, 0, 0})
	SMember(FText)                                     AttributeDisplayName                                        OFFSET(getStruct<T>, {0x348, 24, 0, 0})
	DMember(int32_t)                                   NumMembersMeetingCriteria                                   OFFSET(get<int32_t>, {0x360, 4, 0, 0})
	DMember(int32_t)                                   NumMembersRequired                                          OFFSET(get<int32_t>, {0x364, 4, 0, 0})
	CMember(EFortUISurvivorSquadMatchType)             MatchType                                                   OFFSET(get<T>, {0x368, 1, 0, 0})
	CMember(EFortBuffState)                            PreviewEffect                                               OFFSET(get<T>, {0x369, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortSwipeDetector
/// Size: 0x0140 (0x000000 - 0x000140)
class FFortSwipeDetector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FVector2D)                                 SwipeThreshold                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FortniteUI.TouchMove
/// Size: 0x000C (0x000000 - 0x00000C)
class FTouchMove : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/FortniteUI.FortItemTransformFilterTabLabelInfo
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FFortItemTransformFilterTabLabelInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FName)                                     FilterTabNameId                                             OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FFortTabButtonLabelInfo)                   TabButtonLabelInfo                                          OFFSET(getStruct<T>, {0x8, 160, 0, 0})
	CMember(TArray<EFortInventoryFilter>)              ItemFilters                                                 OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(EFortItemType)                             ItemType                                                    OFFSET(get<T>, {0xB8, 1, 0, 0})
};

/// Struct /Script/FortniteUI.PlatformPrefixIconList
/// Size: 0x0010 (0x000000 - 0x000010)
class FPlatformPrefixIconList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPlatformPrefixIcon>)               PlatformPrefixIcons                                         OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteUI.PlatformPrefixIcon
/// Size: 0x0018 (0x000000 - 0x000018)
class FPlatformPrefixIcon : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(UTexture2D*)                               PrefixIcon                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FortniteUI.FortUINavigationRequest
/// Size: 0x0010 (0x000000 - 0x000010)
class FFortUINavigationRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFortUINavigationOperation>)        Operations                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortUINavigationOperation
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortUINavigationOperation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(EFortUINavigationOp)                       Operation                                                   OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     SquadId                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(int32_t)                                   SquadSlotIndex                                              OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FName)                                     PageId                                                      OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FName)                                     NodeID                                                      OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	CMember(UFortItem*)                                Item                                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(EFortUIFeature)                            Feature                                                     OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(EFortFrontendInventoryFilter)              ItemManagementFilter                                        OFFSET(get<T>, {0x31, 1, 0, 0})
};

/// Struct /Script/FortniteUI.UINavigationEntry
/// Size: 0x0050 (0x000000 - 0x000050)
class FUINavigationEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FUINavigationData)                         Data                                                        OFFSET(getStruct<T>, {0x0, 48, 0, 0})
};

/// Struct /Script/FortniteUI.FortUIXpInfo
/// Size: 0x002C (0x000000 - 0x00002C)
class FFortUIXpInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(int32_t)                                   InitialLevel                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   InitialDisplayXp                                            OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FFortExperienceDelta)                      ChangeInXp                                                  OFFSET(getStruct<T>, {0x8, 36, 0, 0})
};

/// Struct /Script/FortniteUI.ContentPushState
/// Size: 0x0003 (0x000000 - 0x000003)
class FContentPushState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 3;

public:
	DMember(bool)                                      bHideHeader                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bHideFooter                                                 OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      bHideChatWidget                                             OFFSET(get<bool>, {0x2, 1, 0, 0})
};

/// Struct /Script/FortniteUI.FortHealthyGamingData
/// Size: 0x0088 (0x000008 - 0x000090)
class FFortHealthyGamingData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(float)                                     HealthWarningToastInterval                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	SMember(FText)                                     HealthWarningToastDescriptionFormat                         OFFSET(getStruct<T>, {0x10, 24, 0, 0})
	SMember(FText)                                     HealthWarningScreenText                                     OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     GameplayRestrictionText                                     OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	DMember(float)                                     GameplayRestrictionWarningTimeOffset                        OFFSET(get<float>, {0x58, 4, 0, 0})
	SMember(FText)                                     AntiAddictionTotalDescriptionFormat                         OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	DMember(bool)                                      bUsePlayerTimeLimitSystem                                   OFFSET(get<bool>, {0x78, 1, 0, 0})
	CMember(TArray<UTexture2D*>)                       RatingIcons                                                 OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Struct /Script/FortniteUI.FortSquadIconData
/// Size: 0x0330 (0x000008 - 0x000338)
class FFortSquadIconData : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	SMember(FFortMultiSizeBrush)                       Brush                                                       OFFSET(getStruct<T>, {0x8, 816, 0, 0})
};

/// Struct /Script/FortniteUI.FortDisplayModifier
/// Size: 0x0038 (0x000000 - 0x000038)
class FFortDisplayModifier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FText)                                     Label                                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     Value                                                       OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(EFortStatValueDisplayType)                 DisplayType                                                 OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(EFortBuffState)                            BuffState                                                   OFFSET(get<T>, {0x31, 1, 0, 0})
};

/// Struct /Script/FortniteUI.PanZoomFingerState
/// Size: 0x0010 (0x000000 - 0x000010)
class FPanZoomFingerState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Enum /Script/FortniteUI.EFortHitPointModificationReason
/// Size: 0x07
enum EFortHitPointModificationReason : uint8_t
{
	EFortHitPointModificationReason__Invalid0                                        = 0,
	EFortHitPointModificationReason__InitalSet1                                      = 1,
	EFortHitPointModificationReason__AutoRegen2                                      = 2,
	EFortHitPointModificationReason__ItemRegen3                                      = 3,
	EFortHitPointModificationReason__DamageOverTime4                                 = 4,
	EFortHitPointModificationReason__DamageReceived5                                 = 5,
	EFortHitPointModificationReason__EFortHitPointModificationReason_MAX6            = 6
};

/// Enum /Script/FortniteUI.EFortBuildingInteraction
/// Size: 0x08
enum EFortBuildingInteraction : uint8_t
{
	EFortBuildingInteraction__None0                                                  = 0,
	EFortBuildingInteraction__Build1                                                 = 1,
	EFortBuildingInteraction__Repair2                                                = 2,
	EFortBuildingInteraction__Upgrade3                                               = 3,
	EFortBuildingInteraction__Edit4                                                  = 4,
	EFortBuildingInteraction__BeingModified5                                         = 5,
	EFortBuildingInteraction__ConfirmEdit6                                           = 6,
	EFortBuildingInteraction__EFortBuildingInteraction_MAX7                          = 7
};

/// Enum /Script/FortniteUI.EFortBuildingHealthDisplayRule
/// Size: 0x04
enum EFortBuildingHealthDisplayRule : uint8_t
{
	EFortBuildingHealthDisplayRule__Never0                                           = 0,
	EFortBuildingHealthDisplayRule__Allowed1                                         = 1,
	EFortBuildingHealthDisplayRule__Always2                                          = 2,
	EFortBuildingHealthDisplayRule__EFortBuildingHealthDisplayRule_MAX3              = 3
};

/// Enum /Script/FortniteUI.EFortAnimSpeed
/// Size: 0x04
enum EFortAnimSpeed : uint8_t
{
	EFortAnimSpeed__Instant0                                                         = 0,
	EFortAnimSpeed__Fast1                                                            = 1,
	EFortAnimSpeed__Normal2                                                          = 2,
	EFortAnimSpeed__EFortAnimSpeed_MAX3                                              = 3
};

/// Enum /Script/FortniteUI.EFortItemCardSize
/// Size: 0x08
enum EFortItemCardSize : uint8_t
{
	EFortItemCardSize__XXS0                                                          = 0,
	EFortItemCardSize__XS1                                                           = 1,
	EFortItemCardSize__S2                                                            = 2,
	EFortItemCardSize__M3                                                            = 3,
	EFortItemCardSize__L4                                                            = 4,
	EFortItemCardSize__XL5                                                           = 5,
	EFortItemCardSize__XXL6                                                          = 6,
	EFortItemCardSize__EFortItemCardSize_MAX7                                        = 7
};

/// Enum /Script/FortniteUI.ECollectionBookSectionNavTarget
/// Size: 0x03
enum ECollectionBookSectionNavTarget : uint8_t
{
	ECollectionBookSectionNavTarget__SlotSelect0                                     = 0,
	ECollectionBookSectionNavTarget__SlotPicker1                                     = 1,
	ECollectionBookSectionNavTarget__ECollectionBookSectionNavTarget_MAX2            = 2
};

/// Enum /Script/FortniteUI.EFortFrontEndFeatureStateReason
/// Size: 0x08
enum EFortFrontEndFeatureStateReason : uint8_t
{
	EFortFrontEndFeatureStateReason__Default0                                        = 0,
	EFortFrontEndFeatureStateReason__NoHeroes1                                       = 1,
	EFortFrontEndFeatureStateReason__Tutorial2                                       = 2,
	EFortFrontEndFeatureStateReason__BROnly3                                         = 3,
	EFortFrontEndFeatureStateReason__NoPlayerController4                             = 4,
	EFortFrontEndFeatureStateReason__UnexpectedFeature5                              = 5,
	EFortFrontEndFeatureStateReason__Invalid6                                        = 6,
	EFortFrontEndFeatureStateReason__EFortFrontEndFeatureStateReason_MAX7            = 7
};

/// Enum /Script/FortniteUI.EFortFrontEndFeatureState
/// Size: 0x05
enum EFortFrontEndFeatureState : uint8_t
{
	EFortFrontEndFeatureState__Enabled0                                              = 0,
	EFortFrontEndFeatureState__Disabled1                                             = 1,
	EFortFrontEndFeatureState__Hidden2                                               = 2,
	EFortFrontEndFeatureState__Invalid3                                              = 3,
	EFortFrontEndFeatureState__EFortFrontEndFeatureState_MAX4                        = 4
};

/// Enum /Script/FortniteUI.EFortFrontEndFeature
/// Size: 0x11
enum EFortFrontEndFeature : uint8_t
{
	EFortFrontEndFeature__ShowHomeBase0                                              = 0,
	EFortFrontEndFeature__ShowHeroList1                                              = 1,
	EFortFrontEndFeature__ShowVault2                                                 = 2,
	EFortFrontEndFeature__ShowStore3                                                 = 3,
	EFortFrontEndFeature__PlayZone4                                                  = 4,
	EFortFrontEndFeature__ShowDailyRewards5                                          = 5,
	EFortFrontEndFeature__ShowHeroSelect6                                            = 6,
	EFortFrontEndFeature__RecruitHero7                                               = 7,
	EFortFrontEndFeature__ShowHomeBaseOverview8                                      = 8,
	EFortFrontEndFeature__MAX_None9                                                  = 9,
	EFortFrontEndFeature__EFortFrontEndFeature_MAX10                                 = 10
};

/// Enum /Script/FortniteUI.EFortHomebaseNodePurchaseRestrictionReason
/// Size: 0x05
enum EFortHomebaseNodePurchaseRestrictionReason : uint8_t
{
	EFortHomebaseNodePurchaseRestrictionReason__PrerequisitesNotMet0                 = 0,
	EFortHomebaseNodePurchaseRestrictionReason__QuestsNotComplete1                   = 1,
	EFortHomebaseNodePurchaseRestrictionReason__CanNotAffordCosts2                   = 2,
	EFortHomebaseNodePurchaseRestrictionReason__VaultIsOverflown3                    = 3,
	EFortHomebaseNodePurchaseRestrictionReason__EFortHomebaseNodePurchaseRestrictionReason_MAX4 = 4
};

/// Enum /Script/FortniteUI.EFortUIFeatureStateReason
/// Size: 0x10
enum EFortUIFeatureStateReason : uint8_t
{
	EFortUIFeatureStateReason__Default0                                              = 0,
	EFortUIFeatureStateReason__Tutorial1                                             = 1,
	EFortUIFeatureStateReason__ContentInstall2                                       = 2,
	EFortUIFeatureStateReason__AccountRestrictions3                                  = 3,
	EFortUIFeatureStateReason__Platform4                                             = 4,
	EFortUIFeatureStateReason__SeasonOrEventNotActive5                               = 5,
	EFortUIFeatureStateReason__NoPlayerController6                                   = 6,
	EFortUIFeatureStateReason__UnexpectedFeature7                                    = 7,
	EFortUIFeatureStateReason__Invalid8                                              = 8,
	EFortUIFeatureStateReason__EFortUIFeatureStateReason_MAX9                        = 9
};

/// Enum /Script/FortniteUI.EFortUIFeatureState
/// Size: 0x05
enum EFortUIFeatureState : uint8_t
{
	EFortUIFeatureState__Enabled0                                                    = 0,
	EFortUIFeatureState__Disabled1                                                   = 1,
	EFortUIFeatureState__Hidden2                                                     = 2,
	EFortUIFeatureState__Invalid3                                                    = 3,
	EFortUIFeatureState__EFortUIFeatureState_MAX4                                    = 4
};

/// Enum /Script/FortniteUI.EFortUIFeature
/// Size: 0x45
enum EFortUIFeature : uint8_t
{
	EFortUIFeature__ShowHome0                                                        = 0,
	EFortUIFeature__ShowPlay1                                                        = 1,
	EFortUIFeature__ShowHeros2                                                       = 2,
	EFortUIFeature__ShowSquads3                                                      = 3,
	EFortUIFeature__ShowArmory4                                                      = 4,
	EFortUIFeature__ShowSkillTree5                                                   = 5,
	EFortUIFeature__ShowStore6                                                       = 6,
	EFortUIFeature__ShowQuests7                                                      = 7,
	EFortUIFeature__ShowMainStore8                                                   = 8,
	EFortUIFeature__ShowContextHelpMenu9                                             = 9,
	EFortUIFeature__ShowCampaign10                                                   = 10,
	EFortUIFeature__ShowActiveBoost11                                                = 11,
	EFortUIFeature__ShowJournal12                                                    = 12,
	EFortUIFeature__ShowPartyBar13                                                   = 13,
	EFortUIFeature__ShowChatWindow14                                                 = 14,
	EFortUIFeature__ShowFriendsMenu15                                                = 15,
	EFortUIFeature__ShowObjectives16                                                 = 16,
	EFortUIFeature__ShowRatingIconsInTopbar17                                        = 17,
	EFortUIFeature__ShowAntiAddictionMessage18                                       = 18,
	EFortUIFeature__ShowMinorShutdownMessage19                                       = 19,
	EFortUIFeature__ShowHealthWarningScreen20                                        = 20,
	EFortUIFeature__ShowSimplifiedHUD21                                              = 21,
	EFortUIFeature__LargeHeaderFooterButtons22                                       = 22,
	EFortUIFeature__ShowAthenaFavoriting23                                           = 23,
	EFortUIFeature__ShowAthenaItemRandomization24                                    = 24,
	EFortUIFeature__ShowAthenaChallenges25                                           = 25,
	EFortUIFeature__ShowBattlePassFAQ26                                              = 26,
	EFortUIFeature__ShowReplays27                                                    = 27,
	EFortUIFeature__ShowProfileStatsUI28                                             = 28,
	EFortUIFeature__ShowAccountBoosts29                                              = 29,
	EFortUIFeature__ShowCustomerSupport30                                            = 30,
	EFortUIFeature__ShowGlobalChat31                                                 = 31,
	EFortUIFeature__ShowEULA32                                                       = 32,
	EFortUIFeature__ShowEndOfZoneCinematic33                                         = 33,
	EFortUIFeature__ShowOnboardingCinematics34                                       = 34,
	EFortUIFeature__ShowFounderBannerIcons35                                         = 35,
	EFortUIFeature__ShowCurrentRegionInLobby36                                       = 36,
	EFortUIFeature__EnableFoundersDailyRewards37                                     = 37,
	EFortUIFeature__EnableTwitchIntegration38                                        = 38,
	EFortUIFeature__EnableMatchmakingRegionSetting39                                 = 39,
	EFortUIFeature__EnableLanguageSetting40                                          = 40,
	EFortUIFeature__EnableFriendCodeSetting41                                        = 41,
	EFortUIFeature__EnableEarlyAccessLoadingScreenBanner42                           = 42,
	EFortUIFeature__Max_None43                                                       = 43,
	EFortUIFeature__EFortUIFeature_MAX44                                             = 44
};

/// Enum /Script/FortniteUI.EFlagStatus
/// Size: 0x03
enum EFlagStatus : uint8_t
{
	EFlagStatus__FlagPresent0                                                        = 0,
	EFlagStatus__FlagNotPresent1                                                     = 1,
	EFlagStatus__EFlagStatus_MAX2                                                    = 2
};

/// Enum /Script/FortniteUI.EInputPriority
/// Size: 0x08
enum EInputPriority : uint8_t
{
	EInputPriority__Normal0                                                          = 0,
	EInputPriority__Menu1                                                            = 1,
	EInputPriority__Chat2                                                            = 2,
	EInputPriority__Modal3                                                           = 3,
	EInputPriority__Confirmation4                                                    = 4,
	EInputPriority__Error5                                                           = 5,
	EInputPriority__HUD6                                                             = 6,
	EInputPriority__EInputPriority_MAX7                                              = 7
};

/// Enum /Script/FortniteUI.EFortInputMode
/// Size: 0x04
enum EFortInputMode : uint8_t
{
	EFortInputMode__Frontend0                                                        = 0,
	EFortInputMode__InGame1                                                          = 1,
	EFortInputMode__InGameCursor2                                                    = 2,
	EFortInputMode__EFortInputMode_MAX3                                              = 3
};

/// Enum /Script/FortniteUI.EFortUrlType
/// Size: 0x05
enum EFortUrlType : uint8_t
{
	EFortUrlType__NormalWebLink0                                                     = 0,
	EFortUrlType__AccountCreationLink1                                               = 1,
	EFortUrlType__HelpLink2                                                          = 2,
	EFortUrlType__EULALink3                                                          = 3,
	EFortUrlType__EFortUrlType_MAX4                                                  = 4
};

/// Enum /Script/FortniteUI.EFortComparisonType
/// Size: 0x05
enum EFortComparisonType : uint8_t
{
	EFortComparisonType__None0                                                       = 0,
	EFortComparisonType__HigherValue1                                                = 1,
	EFortComparisonType__LowerValue2                                                 = 2,
	EFortComparisonType__Upgrade3                                                    = 3,
	EFortComparisonType__EFortComparisonType_MAX4                                    = 4
};

/// Enum /Script/FortniteUI.EFortClampState
/// Size: 0x04
enum EFortClampState : uint8_t
{
	EFortClampState__NoClamp0                                                        = 0,
	EFortClampState__MinClamp1                                                       = 1,
	EFortClampState__MaxClamp2                                                       = 2,
	EFortClampState__EFortClampState_MAX3                                            = 3
};

/// Enum /Script/FortniteUI.EFortBuffState
/// Size: 0x04
enum EFortBuffState : uint8_t
{
	EFortBuffState__NoChange0                                                        = 0,
	EFortBuffState__Better1                                                          = 1,
	EFortBuffState__Worse2                                                           = 2,
	EFortBuffState__EFortBuffState_MAX3                                              = 3
};

/// Enum /Script/FortniteUI.EFortStatValueDisplayType
/// Size: 0x07
enum EFortStatValueDisplayType : uint8_t
{
	EFortStatValueDisplayType__BasicPaired0                                          = 0,
	EFortStatValueDisplayType__BasicSingle1                                          = 1,
	EFortStatValueDisplayType__Unique2                                               = 2,
	EFortStatValueDisplayType__ElementalFire3                                        = 3,
	EFortStatValueDisplayType__ElementalIce4                                         = 4,
	EFortStatValueDisplayType__ElementalElectric5                                    = 5,
	EFortStatValueDisplayType__EFortStatValueDisplayType_MAX6                        = 6
};

/// Enum /Script/FortniteUI.EFortStoreState
/// Size: 0x18
enum EFortStoreState : uint8_t
{
	EFortStoreState__Error0                                                          = 0,
	EFortStoreState__Closed1                                                         = 1,
	EFortStoreState__CardPackStore2                                                  = 2,
	EFortStoreState__CurrencyStore3                                                  = 3,
	EFortStoreState__WebPayment4                                                     = 4,
	EFortStoreState__PackOpen5                                                       = 5,
	EFortStoreState__CardEnter6                                                      = 6,
	EFortStoreState__CardBackReveal7                                                 = 7,
	EFortStoreState__CardFlip8                                                       = 8,
	EFortStoreState__CardFrontReveal9                                                = 9,
	EFortStoreState__CardExit10                                                      = 10,
	EFortStoreState__SummaryAdd11                                                    = 11,
	EFortStoreState__PackDestroy12                                                   = 12,
	EFortStoreState__Summary13                                                       = 13,
	EFortStoreState__PresentChoice14                                                 = 14,
	EFortStoreState__ChoiceMade15                                                    = 15,
	EFortStoreState__MAX_None16                                                      = 16,
	EFortStoreState__EFortStoreState_MAX17                                           = 17
};

/// Enum /Script/FortniteUI.EFortItemCooldownType
/// Size: 0x06
enum EFortItemCooldownType : uint8_t
{
	EFortItemCooldownType__None0                                                     = 0,
	EFortItemCooldownType__AmmoRegeneration1                                         = 1,
	EFortItemCooldownType__ItemActivation2                                           = 2,
	EFortItemCooldownType__WeaponReloading3                                          = 3,
	EFortItemCooldownType__Death4                                                    = 4,
	EFortItemCooldownType__EFortItemCooldownType_MAX5                                = 5
};

/// Enum /Script/FortniteUI.EFortTutorialGlowType
/// Size: 0x04
enum EFortTutorialGlowType : uint8_t
{
	EFortTutorialGlowType__None0                                                     = 0,
	EFortTutorialGlowType__Look1                                                     = 1,
	EFortTutorialGlowType__Click2                                                    = 2,
	EFortTutorialGlowType__EFortTutorialGlowType_MAX3                                = 3
};

/// Enum /Script/FortniteUI.EFortBangSize
/// Size: 0x07
enum EFortBangSize : uint8_t
{
	EFortBangSize__XXS0                                                              = 0,
	EFortBangSize__XS1                                                               = 1,
	EFortBangSize__S2                                                                = 2,
	EFortBangSize__M3                                                                = 3,
	EFortBangSize__L4                                                                = 4,
	EFortBangSize__XL5                                                               = 5,
	EFortBangSize__EFortBangSize_MAX6                                                = 6
};

/// Enum /Script/FortniteUI.EFortUIState
/// Size: 0x13
enum EFortUIState : uint8_t
{
	EFortUIState__Invalid0                                                           = 0,
	EFortUIState__Login1                                                             = 1,
	EFortUIState__JoinServer2                                                        = 2,
	EFortUIState__SubgameSelect3                                                     = 3,
	EFortUIState__FrontEnd4                                                          = 4,
	EFortUIState__PvE_PostGame5                                                      = 5,
	EFortUIState__PvP_PostGame6                                                      = 6,
	EFortUIState__InGame7                                                            = 7,
	EFortUIState__Cinematic8                                                         = 8,
	EFortUIState__Athena9                                                            = 9,
	EFortUIState__AthenaSpectator10                                                  = 10,
	EFortUIState__Replay11                                                           = 11,
	EFortUIState__MAX12                                                              = 12
};

/// Enum /Script/FortniteUI.EViewerNavigationDirection
/// Size: 0x03
enum EViewerNavigationDirection : uint8_t
{
	EViewerNavigationDirection__Previous0                                            = 0,
	EViewerNavigationDirection__Next1                                                = 1,
	EViewerNavigationDirection__EViewerNavigationDirection_MAX2                      = 2
};

/// Enum /Script/FortniteUI.EGridSortKind
/// Size: 0x06
enum EGridSortKind : uint8_t
{
	EGridSortKind__None0                                                             = 0,
	EGridSortKind__ByNumber1                                                         = 1,
	EGridSortKind__ByString2                                                         = 2,
	EGridSortKind__ByNumberThenString3                                               = 3,
	EGridSortKind__ByStringThenNumber4                                               = 4,
	EGridSortKind__EGridSortKind_MAX5                                                = 5
};

/// Enum /Script/FortniteUI.ESquadSlotItemRestrictionReason
/// Size: 0x04
enum ESquadSlotItemRestrictionReason : uint8_t
{
	ESquadSlotItemRestrictionReason__VaultOverflow0                                  = 0,
	ESquadSlotItemRestrictionReason__MissingLeadershipForHeroType1                   = 1,
	ESquadSlotItemRestrictionReason__ReplacementWouldClearMandatorySlot2             = 2,
	ESquadSlotItemRestrictionReason__ESquadSlotItemRestrictionReason_MAX3            = 3
};

/// Enum /Script/FortniteUI.ESquadSlotSortType
/// Size: 0x06
enum ESquadSlotSortType : uint8_t
{
	ESquadSlotSortType__ByRating0                                                    = 0,
	ESquadSlotSortType__ByLevel1                                                     = 1,
	ESquadSlotSortType__ByRarity2                                                    = 2,
	ESquadSlotSortType__ByBonus3                                                     = 3,
	ESquadSlotSortType__ByMatch4                                                     = 4,
	ESquadSlotSortType__ESquadSlotSortType_MAX5                                      = 5
};

/// Enum /Script/FortniteUI.EEquippedWeaponDisplay
/// Size: 0x05
enum EEquippedWeaponDisplay : uint8_t
{
	EEquippedWeaponDisplay__None0                                                    = 0,
	EEquippedWeaponDisplay__Resource1                                                = 1,
	EEquippedWeaponDisplay__Magazine2                                                = 2,
	EEquippedWeaponDisplay__Utility3                                                 = 3,
	EEquippedWeaponDisplay__EEquippedWeaponDisplay_MAX4                              = 4
};

/// Enum /Script/FortniteUI.EAthenaPlayerActionAlert
/// Size: 0x04
enum EAthenaPlayerActionAlert : uint8_t
{
	EAthenaPlayerActionAlert__PlayerDown0                                            = 0,
	EAthenaPlayerActionAlert__PlayerKill1                                            = 1,
	EAthenaPlayerActionAlert__EnteredStorm2                                          = 2,
	EAthenaPlayerActionAlert__EAthenaPlayerActionAlert_MAX3                          = 3
};

/// Enum /Script/FortniteUI.EHealthBarType
/// Size: 0x04
enum EHealthBarType : uint8_t
{
	EHealthBarType__Health0                                                          = 0,
	EHealthBarType__Shield1                                                          = 1,
	EHealthBarType__Stamina2                                                         = 2,
	EHealthBarType__EHealthBarType_MAX3                                              = 3
};

/// Enum /Script/FortniteUI.ESpectatorHealthBarType
/// Size: 0x03
enum ESpectatorHealthBarType : uint8_t
{
	ESpectatorHealthBarType__Health0                                                 = 0,
	ESpectatorHealthBarType__Shield1                                                 = 1,
	ESpectatorHealthBarType__ESpectatorHealthBarType_MAX2                            = 2
};

/// Enum /Script/FortniteUI.EBacchusHUDStateType
/// Size: 0x04
enum EBacchusHUDStateType : uint8_t
{
	EBacchusHUDStateType__DoNothing0                                                 = 0,
	EBacchusHUDStateType__Hide1                                                      = 1,
	EBacchusHUDStateType__Show2                                                      = 2,
	EBacchusHUDStateType__EBacchusHUDStateType_MAX3                                  = 3
};

/// Enum /Script/FortniteUI.ESubGameFilter
/// Size: 0x04
enum ESubGameFilter : uint8_t
{
	ESubGameFilter__All0                                                             = 0,
	ESubGameFilter__SaveTheWorld1                                                    = 1,
	ESubGameFilter__BattleRoyale2                                                    = 2,
	ESubGameFilter__ESubGameFilter_MAX3                                              = 3
};

/// Enum /Script/FortniteUI.EFortPlayerControllerProcessing
/// Size: 0x04
enum EFortPlayerControllerProcessing : uint8_t
{
	EFortPlayerControllerProcessing__NoPlayerControllerProcessing0                   = 0,
	EFortPlayerControllerProcessing__LetPlayerControllerProcessFirst1                = 1,
	EFortPlayerControllerProcessing__HandleAllInput2                                 = 2,
	EFortPlayerControllerProcessing__EFortPlayerControllerProcessing_MAX3            = 3
};

/// Enum /Script/FortniteUI.EFortAlterationOptionType
/// Size: 0x04
enum EFortAlterationOptionType : uint8_t
{
	EFortAlterationOptionType__Upgrade0                                              = 0,
	EFortAlterationOptionType__Replacement1                                          = 1,
	EFortAlterationOptionType__Max_NONE2                                             = 2,
	EFortAlterationOptionType__EFortAlterationOptionType_MAX3                        = 3
};

/// Enum /Script/FortniteUI.EFortAlterationWidgetState
/// Size: 0x04
enum EFortAlterationWidgetState : uint8_t
{
	EFortAlterationWidgetState__Normal0                                              = 0,
	EFortAlterationWidgetState__Upgrade1                                             = 1,
	EFortAlterationWidgetState__Evolution2                                           = 2,
	EFortAlterationWidgetState__EFortAlterationWidgetState_MAX3                      = 3
};

/// Enum /Script/FortniteUI.ECollectionBookRewardStatus
/// Size: 0x04
enum ECollectionBookRewardStatus : uint8_t
{
	ECollectionBookRewardStatus__Unknown0                                            = 0,
	ECollectionBookRewardStatus__Available1                                          = 1,
	ECollectionBookRewardStatus__Claimed2                                            = 2,
	ECollectionBookRewardStatus__ECollectionBookRewardStatus_MAX3                    = 3
};

/// Enum /Script/FortniteUI.ECollectionBookPrimaryNavTarget
/// Size: 0x03
enum ECollectionBookPrimaryNavTarget : uint8_t
{
	ECollectionBookPrimaryNavTarget__Overview0                                       = 0,
	ECollectionBookPrimaryNavTarget__SectionTileView1                                = 1,
	ECollectionBookPrimaryNavTarget__ECollectionBookPrimaryNavTarget_MAX2            = 2
};

/// Enum /Script/FortniteUI.EFortDefenderSlotType
/// Size: 0x04
enum EFortDefenderSlotType : uint8_t
{
	EFortDefenderSlotType__Invalid0                                                  = 0,
	EFortDefenderSlotType__Defender1                                                 = 1,
	EFortDefenderSlotType__Weapon2                                                   = 2,
	EFortDefenderSlotType__EFortDefenderSlotType_MAX3                                = 3
};

/// Enum /Script/FortniteUI.EFortExpeditionListSort
/// Size: 0x04
enum EFortExpeditionListSort : uint8_t
{
	EFortExpeditionListSort__ByRating0                                               = 0,
	EFortExpeditionListSort__ByDuration1                                             = 1,
	EFortExpeditionListSort__ByName2                                                 = 2,
	EFortExpeditionListSort__EFortExpeditionListSort_MAX3                            = 3
};

/// Enum /Script/FortniteUI.EFrontEndRewardType
/// Size: 0x10
enum EFrontEndRewardType : uint8_t
{
	EFrontEndRewardType__Mission0                                                    = 0,
	EFrontEndRewardType__Quest1                                                      = 1,
	EFrontEndRewardType__EpicNewQuest2                                               = 2,
	EFrontEndRewardType__Expedition3                                                 = 3,
	EFrontEndRewardType__CollectionBook4                                             = 4,
	EFrontEndRewardType__MissionAlert5                                               = 5,
	EFrontEndRewardType__DifficultyIncrease6                                         = 6,
	EFrontEndRewardType__GiftBox7                                                    = 7,
	EFrontEndRewardType__ItemCache8                                                  = 8,
	EFrontEndRewardType__EFrontEndRewardType_MAX9                                    = 9
};

/// Enum /Script/FortniteUI.EFortUIGameFeedbackType
/// Size: 0x04
enum EFortUIGameFeedbackType : uint8_t
{
	EFortUIGameFeedbackType__Bug0                                                    = 0,
	EFortUIGameFeedbackType__Comment1                                                = 1,
	EFortUIGameFeedbackType__Player2                                                 = 2,
	EFortUIGameFeedbackType__EFortUIGameFeedbackType_MAX3                            = 3
};

/// Enum /Script/FortniteUI.ESelectionState
/// Size: 0x04
enum ESelectionState : uint8_t
{
	ESelectionState__Unselected0                                                     = 0,
	ESelectionState__Selected1                                                       = 1,
	ESelectionState__CannotGift2                                                     = 2,
	ESelectionState__ESelectionState_MAX3                                            = 3
};

/// Enum /Script/FortniteUI.ENameStatus
/// Size: 0x05
enum ENameStatus : uint8_t
{
	ENameStatus__Valid0                                                              = 0,
	ENameStatus__TooShort1                                                           = 1,
	ENameStatus__TooLong2                                                            = 2,
	ENameStatus__ContainsInvalidCharacter3                                           = 3,
	ENameStatus__ENameStatus_MAX4                                                    = 4
};

/// Enum /Script/FortniteUI.EFortSupportPerkWidgetState
/// Size: 0x04
enum EFortSupportPerkWidgetState : uint8_t
{
	EFortSupportPerkWidgetState__Normal0                                             = 0,
	EFortSupportPerkWidgetState__Upgrade1                                            = 1,
	EFortSupportPerkWidgetState__Evolution2                                          = 2,
	EFortSupportPerkWidgetState__EFortSupportPerkWidgetState_MAX3                    = 3
};

/// Enum /Script/FortniteUI.ECenterPopupMessageStateEnum
/// Size: 0x05
enum ECenterPopupMessageStateEnum : uint8_t
{
	ECenterPopupMessageStateEnum__NotVisible0                                        = 0,
	ECenterPopupMessageStateEnum__WaitingForMatchDelayCountDown1                     = 1,
	ECenterPopupMessageStateEnum__WaitingForOutpostOwner2                            = 2,
	ECenterPopupMessageStateEnum__WaitingForPlayers3                                 = 3,
	ECenterPopupMessageStateEnum__ECenterPopupMessageStateEnum_MAX4                  = 4
};

/// Enum /Script/FortniteUI.EConversionControlKeyRequest
/// Size: 0x04
enum EConversionControlKeyRequest : uint8_t
{
	EConversionControlKeyRequest__AllKeys0                                           = 0,
	EConversionControlKeyRequest__NonConsumableKeys1                                 = 1,
	EConversionControlKeyRequest__ConsumableKeys2                                    = 2,
	EConversionControlKeyRequest__EConversionControlKeyRequest_MAX3                  = 3
};

/// Enum /Script/FortniteUI.EItemRecyclingWarning
/// Size: 0x05
enum EItemRecyclingWarning : uint8_t
{
	EItemRecyclingWarning__HighLevel0                                                = 0,
	EItemRecyclingWarning__HighRarity1                                               = 1,
	EItemRecyclingWarning__HighTier2                                                 = 2,
	EItemRecyclingWarning__CanSlotInCollectionBook3                                  = 3,
	EItemRecyclingWarning__EItemRecyclingWarning_MAX4                                = 4
};

/// Enum /Script/FortniteUI.EItemDisassembleRestrictionReason
/// Size: 0x03
enum EItemDisassembleRestrictionReason : uint8_t
{
	EItemDisassembleRestrictionReason__InnatelyCannotDisassemble0                    = 0,
	EItemDisassembleRestrictionReason__ItemWasGifted1                                = 1,
	EItemDisassembleRestrictionReason__EItemDisassembleRestrictionReason_MAX2        = 2
};

/// Enum /Script/FortniteUI.EItemRecyclingRestrictionReason
/// Size: 0x06
enum EItemRecyclingRestrictionReason : uint8_t
{
	EItemRecyclingRestrictionReason__InnatelyUnrecyclable0                           = 0,
	EItemRecyclingRestrictionReason__IsSlottedGroundOperative1                       = 1,
	EItemRecyclingRestrictionReason__MissingCatalyst2                                = 2,
	EItemRecyclingRestrictionReason__ItemOutOnExpedition3                            = 3,
	EItemRecyclingRestrictionReason__InUseByCrafting4                                = 4,
	EItemRecyclingRestrictionReason__EItemRecyclingRestrictionReason_MAX5            = 5
};

/// Enum /Script/FortniteUI.EVaultItemLimitStatus
/// Size: 0x05
enum EVaultItemLimitStatus : uint8_t
{
	EVaultItemLimitStatus__WellBelowCapacity0                                        = 0,
	EVaultItemLimitStatus__NearCapacity1                                             = 1,
	EVaultItemLimitStatus__AtCapacity2                                               = 2,
	EVaultItemLimitStatus__OverCapacity3                                             = 3,
	EVaultItemLimitStatus__EVaultItemLimitStatus_MAX4                                = 4
};

/// Enum /Script/FortniteUI.EFortItemCountStyle
/// Size: 0x04
enum EFortItemCountStyle : uint8_t
{
	EFortItemCountStyle__StackCount0                                                 = 0,
	EFortItemCountStyle__OverrideCount1                                              = 1,
	EFortItemCountStyle__StackCountOverOverride2                                     = 2,
	EFortItemCountStyle__EFortItemCountStyle_MAX3                                    = 3
};

/// Enum /Script/FortniteUI.EFortItemInspectionMode
/// Size: 0x07
enum EFortItemInspectionMode : uint8_t
{
	EFortItemInspectionMode__Overview0                                               = 0,
	EFortItemInspectionMode__Details1                                                = 1,
	EFortItemInspectionMode__View2                                                   = 2,
	EFortItemInspectionMode__Evolution3                                              = 3,
	EFortItemInspectionMode__Upgrade4                                                = 4,
	EFortItemInspectionMode__UpgradeRarity5                                          = 5,
	EFortItemInspectionMode__EFortItemInspectionMode_MAX6                            = 6
};

/// Enum /Script/FortniteUI.EFortItemManagementMode
/// Size: 0x04
enum EFortItemManagementMode : uint8_t
{
	EFortItemManagementMode__Details0                                                = 0,
	EFortItemManagementMode__Comparison1                                             = 1,
	EFortItemManagementMode__Mulch2                                                  = 2,
	EFortItemManagementMode__EFortItemManagementMode_MAX3                            = 3
};

/// Enum /Script/FortniteUI.EFortItemViewRotationMode
/// Size: 0x05
enum EFortItemViewRotationMode : uint8_t
{
	EFortItemViewRotationMode__None0                                                 = 0,
	EFortItemViewRotationMode__BoundsPivot1                                          = 1,
	EFortItemViewRotationMode__World2                                                = 2,
	EFortItemViewRotationMode__Relative3                                             = 3,
	EFortItemViewRotationMode__EFortItemViewRotationMode_MAX4                        = 4
};

/// Enum /Script/FortniteUI.EFortKeybindForcedHoldStatus
/// Size: 0x04
enum EFortKeybindForcedHoldStatus : uint8_t
{
	EFortKeybindForcedHoldStatus__NoForcedHold0                                      = 0,
	EFortKeybindForcedHoldStatus__ForcedHold1                                        = 1,
	EFortKeybindForcedHoldStatus__NeverShowHold2                                     = 2,
	EFortKeybindForcedHoldStatus__EFortKeybindForcedHoldStatus_MAX3                  = 3
};

/// Enum /Script/FortniteUI.EFortLegacySlateWidget
/// Size: 0x05
enum EFortLegacySlateWidget : uint8_t
{
	EFortLegacySlateWidget__None0                                                    = 0,
	EFortLegacySlateWidget__Minimap1                                                 = 1,
	EFortLegacySlateWidget__DefaultObjective2                                        = 2,
	EFortLegacySlateWidget__AthenaMiniMap3                                           = 3,
	EFortLegacySlateWidget__MAX4                                                     = 4
};

/// Enum /Script/FortniteUI.EFortMaterialProgressBarSectionOverflowBehavior
/// Size: 0x03
enum EFortMaterialProgressBarSectionOverflowBehavior : uint8_t
{
	EFortMaterialProgressBarSectionOverflowBehavior__PreserveValues0                 = 0,
	EFortMaterialProgressBarSectionOverflowBehavior__ReverseCollapse1                = 1,
	EFortMaterialProgressBarSectionOverflowBehavior__EFortMaterialProgressBarSectionOverflowBehavior_MAX2 = 2
};

/// Enum /Script/FortniteUI.EFortMaterialProgressBarSectionColorNumber
/// Size: 0x03
enum EFortMaterialProgressBarSectionColorNumber : uint8_t
{
	EFortMaterialProgressBarSectionColorNumber__Color10                              = 0,
	EFortMaterialProgressBarSectionColorNumber__Color21                              = 1,
	EFortMaterialProgressBarSectionColorNumber__EFortMaterialProgressBarSectionColorNumber_MAX2 = 2
};

/// Enum /Script/FortniteUI.EFortMaterialProgressBarSection
/// Size: 0x06
enum EFortMaterialProgressBarSection : uint8_t
{
	EFortMaterialProgressBarSection__Primary0                                        = 0,
	EFortMaterialProgressBarSection__Secondary1                                      = 1,
	EFortMaterialProgressBarSection__Tertiary2                                       = 2,
	EFortMaterialProgressBarSection__Negative3                                       = 3,
	EFortMaterialProgressBarSection__MAX_PROGRESS_BAR_SECTIONS4                      = 4,
	EFortMaterialProgressBarSection__EFortMaterialProgressBarSection_MAX5            = 5
};

/// Enum /Script/FortniteUI.EFortMissionActivationWidgetState
/// Size: 0x07
enum EFortMissionActivationWidgetState : uint8_t
{
	EFortMissionActivationWidgetState__Default0                                      = 0,
	EFortMissionActivationWidgetState__StartObjectiveInstigator1                     = 1,
	EFortMissionActivationWidgetState__StartObjectiveRecepient2                      = 2,
	EFortMissionActivationWidgetState__IncreaseDifficultyInstigator3                 = 3,
	EFortMissionActivationWidgetState__IncreaseDifficultyRecepient4                  = 4,
	EFortMissionActivationWidgetState__Invalid5                                      = 5,
	EFortMissionActivationWidgetState__EFortMissionActivationWidgetState_MAX6        = 6
};

/// Enum /Script/FortniteUI.EFortFortMobileShareButtonOS
/// Size: 0x03
enum EFortFortMobileShareButtonOS : uint8_t
{
	EFortFortMobileShareButtonOS__Android0                                           = 0,
	EFortFortMobileShareButtonOS__iOS1                                               = 1,
	EFortFortMobileShareButtonOS__EFortFortMobileShareButtonOS_MAX2                  = 2
};

/// Enum /Script/FortniteUI.EModalContainerSlot
/// Size: 0x05
enum EModalContainerSlot : uint8_t
{
	EModalContainerSlot__Top0                                                        = 0,
	EModalContainerSlot__Middle1                                                     = 1,
	EModalContainerSlot__Bottom2                                                     = 2,
	EModalContainerSlot__Background3                                                 = 3,
	EModalContainerSlot__Max4                                                        = 4
};

/// Enum /Script/FortniteUI.EFortMtxStoreOfferType
/// Size: 0x04
enum EFortMtxStoreOfferType : uint8_t
{
	EFortMtxStoreOfferType__FoundersPack0                                            = 0,
	EFortMtxStoreOfferType__CurrencyPack1                                            = 1,
	EFortMtxStoreOfferType__Max_None2                                                = 2,
	EFortMtxStoreOfferType__EFortMtxStoreOfferType_MAX3                              = 3
};

/// Enum /Script/FortniteUI.EFortNodePrerequisiteConnector
/// Size: 0x03
enum EFortNodePrerequisiteConnector : uint8_t
{
	EFortNodePrerequisiteConnector__ANDConnector0                                    = 0,
	EFortNodePrerequisiteConnector__ORConnector1                                     = 1,
	EFortNodePrerequisiteConnector__EFortNodePrerequisiteConnector_MAX2              = 2
};

/// Enum /Script/FortniteUI.EFortPerksWidgetState
/// Size: 0x04
enum EFortPerksWidgetState : uint8_t
{
	EFortPerksWidgetState__Normal0                                                   = 0,
	EFortPerksWidgetState__Upgrade1                                                  = 1,
	EFortPerksWidgetState__Evolution2                                                = 2,
	EFortPerksWidgetState__EFortPerksWidgetState_MAX3                                = 3
};

/// Enum /Script/FortniteUI.ESaveProfileForBanners
/// Size: 0x03
enum ESaveProfileForBanners : uint8_t
{
	ESaveProfileForBanners__SaveTheWorld0                                            = 0,
	ESaveProfileForBanners__BattleRoyale1                                            = 1,
	ESaveProfileForBanners__ESaveProfileForBanners_MAX2                              = 2
};

/// Enum /Script/FortniteUI.EItemRefundability
/// Size: 0x04
enum EItemRefundability : uint8_t
{
	EItemRefundability__NotRefundable0                                               = 0,
	EItemRefundability__Refundable1                                                  = 1,
	EItemRefundability__AlreadyRefunded2                                             = 2,
	EItemRefundability__EItemRefundability_MAX3                                      = 3
};

/// Enum /Script/FortniteUI.EQuestMapScreenMode
/// Size: 0x03
enum EQuestMapScreenMode : uint8_t
{
	EQuestMapScreenMode__MainCampaign0                                               = 0,
	EQuestMapScreenMode__Event1                                                      = 1,
	EQuestMapScreenMode__EQuestMapScreenMode_MAX2                                    = 2
};

/// Enum /Script/FortniteUI.ERedeemCodeFailureReason
/// Size: 0x06
enum ERedeemCodeFailureReason : uint8_t
{
	ERedeemCodeFailureReason__InvalidCode0                                           = 0,
	ERedeemCodeFailureReason__CodeAlreadyUsed1                                       = 1,
	ERedeemCodeFailureReason__AlreadyHasAccess2                                      = 2,
	ERedeemCodeFailureReason__FailedToGetItem3                                       = 3,
	ERedeemCodeFailureReason__Unknown4                                               = 4,
	ERedeemCodeFailureReason__ERedeemCodeFailureReason_MAX5                          = 5
};

/// Enum /Script/FortniteUI.EFortRewardItemType
/// Size: 0x05
enum EFortRewardItemType : uint8_t
{
	EFortRewardItemType__RewardedBadges0                                             = 0,
	EFortRewardItemType__MissedBadges1                                               = 1,
	EFortRewardItemType__RewardedItems2                                              = 2,
	EFortRewardItemType__RewardedAccountItems3                                       = 3,
	EFortRewardItemType__EFortRewardItemType_MAX4                                    = 4
};

/// Enum /Script/FortniteUI.ESkillTreePageType
/// Size: 0x04
enum ESkillTreePageType : uint8_t
{
	ESkillTreePageType__Basic0                                                       = 0,
	ESkillTreePageType__Research1                                                    = 1,
	ESkillTreePageType__Event2                                                       = 2,
	ESkillTreePageType__ESkillTreePageType_MAX3                                      = 3
};

/// Enum /Script/FortniteUI.ESocialImportPanelPlatform
/// Size: 0x03
enum ESocialImportPanelPlatform : uint8_t
{
	ESocialImportPanelPlatform__Facebook0                                            = 0,
	ESocialImportPanelPlatform__VK1                                                  = 1,
	ESocialImportPanelPlatform__ESocialImportPanelPlatform_MAX2                      = 2
};

/// Enum /Script/FortniteUI.ESocialImportPanelType
/// Size: 0x03
enum ESocialImportPanelType : uint8_t
{
	ESocialImportPanelType__Athena0                                                  = 0,
	ESocialImportPanelType__SaveTheWorld1                                            = 1,
	ESocialImportPanelType__ESocialImportPanelType_MAX2                              = 2
};

/// Enum /Script/FortniteUI.EFortSquadSlottingRestrictionReason
/// Size: 0x05
enum EFortSquadSlottingRestrictionReason : uint8_t
{
	EFortSquadSlottingRestrictionReason__ItemIsInInventoryOverflow0                  = 0,
	EFortSquadSlottingRestrictionReason__MandatorySlotWouldBeEmptied1                = 1,
	EFortSquadSlottingRestrictionReason__ItemIsOnActiveExpedition2                   = 2,
	EFortSquadSlottingRestrictionReason__HeroRequiresMissingGameplayTag3             = 3,
	EFortSquadSlottingRestrictionReason__EFortSquadSlottingRestrictionReason_MAX4    = 4
};

/// Enum /Script/FortniteUI.EPauseType
/// Size: 0x05
enum EPauseType : uint8_t
{
	EPauseType__NoPause0                                                             = 0,
	EPauseType__Rare1                                                                = 1,
	EPauseType__New2                                                                 = 2,
	EPauseType__NewAndRare3                                                          = 3,
	EPauseType__EPauseType_MAX4                                                      = 4
};

/// Enum /Script/FortniteUI.ECardPackPurchaseError
/// Size: 0x06
enum ECardPackPurchaseError : uint8_t
{
	ECardPackPurchaseError__PendingServerConfirmation0                               = 0,
	ECardPackPurchaseError__CannotAffordItem1                                        = 1,
	ECardPackPurchaseError__NoneLeft2                                                = 2,
	ECardPackPurchaseError__PurchaseAlreadyPending3                                  = 3,
	ECardPackPurchaseError__NoConnection4                                            = 4,
	ECardPackPurchaseError__ECardPackPurchaseError_MAX5                              = 5
};

/// Enum /Script/FortniteUI.EFortStoreTransition
/// Size: 0x02
enum EFortStoreTransition : uint8_t
{
	EFortStoreTransition__X0                                                         = 0,
	EFortStoreTransition__EFortStoreTransition_MAX1                                  = 1
};

/// Enum /Script/FortniteUI.EFortUISurvivorSquadMatchType
/// Size: 0x05
enum EFortUISurvivorSquadMatchType : uint8_t
{
	EFortUISurvivorSquadMatchType__Multi0                                            = 0,
	EFortUISurvivorSquadMatchType__Single1                                           = 1,
	EFortUISurvivorSquadMatchType__Summary2                                          = 2,
	EFortUISurvivorSquadMatchType__Max_None3                                         = 3,
	EFortUISurvivorSquadMatchType__EFortUISurvivorSquadMatchType_MAX4                = 4
};

/// Enum /Script/FortniteUI.EFortControlType
/// Size: 0x03
enum EFortControlType : uint8_t
{
	EFortControlType__CameraAndMovement0                                             = 0,
	EFortControlType__Picking1                                                       = 1,
	EFortControlType__EFortControlType_MAX2                                          = 2
};

/// Enum /Script/FortniteUI.EFortTouchControlRegion
/// Size: 0x05
enum EFortTouchControlRegion : uint8_t
{
	EFortTouchControlRegion__MovePlayer0                                             = 0,
	EFortTouchControlRegion__RotateCamera1                                           = 1,
	EFortTouchControlRegion__NoRegion2                                               = 2,
	EFortTouchControlRegion__COUNT3                                                  = 3,
	EFortTouchControlRegion__EFortTouchControlRegion_MAX4                            = 4
};

/// Enum /Script/FortniteUI.EFortReturnToFrontendBehavior
/// Size: 0x06
enum EFortReturnToFrontendBehavior : uint8_t
{
	EFortReturnToFrontendBehavior__NotSpecified0                                     = 0,
	EFortReturnToFrontendBehavior__HomeScreen1                                       = 1,
	EFortReturnToFrontendBehavior__MapScreen2                                        = 2,
	EFortReturnToFrontendBehavior__MapScreenWithAutoLaunch3                          = 3,
	EFortReturnToFrontendBehavior__MapScreenWithMinimalAutoLaunch4                   = 4,
	EFortReturnToFrontendBehavior__EFortReturnToFrontendBehavior_MAX5                = 5
};

/// Enum /Script/FortniteUI.EFortUINavigationOp
/// Size: 0x10
enum EFortUINavigationOp : uint8_t
{
	EFortUINavigationOp__PopContentStack0                                            = 0,
	EFortUINavigationOp__FeatureSwitch1                                              = 1,
	EFortUINavigationOp__NavigateToSkillTree2                                        = 2,
	EFortUINavigationOp__NavigateToSquadSlot3                                        = 3,
	EFortUINavigationOp__NavigateToQuest4                                            = 4,
	EFortUINavigationOp__NavigateToItemManagement5                                   = 5,
	EFortUINavigationOp__NavigateToExpeditions6                                      = 6,
	EFortUINavigationOp__NavigateToCollectionBook7                                   = 7,
	EFortUINavigationOp__None8                                                       = 8,
	EFortUINavigationOp__EFortUINavigationOp_MAX9                                    = 9
};

/// Enum /Script/FortniteUI.EFortLoginAccountType
/// Size: 0x07
enum EFortLoginAccountType : uint8_t
{
	EFortLoginAccountType__None0                                                     = 0,
	EFortLoginAccountType__EpicAccount1                                              = 1,
	EFortLoginAccountType__Facebook2                                                 = 2,
	EFortLoginAccountType__Google3                                                   = 3,
	EFortLoginAccountType__PSN4                                                      = 4,
	EFortLoginAccountType__XBLive5                                                   = 5,
	EFortLoginAccountType__EFortLoginAccountType_MAX6                                = 6
};

/// Enum /Script/FortniteUI.EFortSocialPanelTab
/// Size: 0x04
enum EFortSocialPanelTab : uint8_t
{
	EFortSocialPanelTab__PartyInvitations0                                           = 0,
	EFortSocialPanelTab__Friends1                                                    = 1,
	EFortSocialPanelTab__RecentPlayers2                                              = 2,
	EFortSocialPanelTab__Max3                                                        = 3
};

/// Enum /Script/FortniteUI.EFortSocialPanelType
/// Size: 0x03
enum EFortSocialPanelType : uint8_t
{
	EFortSocialPanelType__Join0                                                      = 0,
	EFortSocialPanelType__Invite1                                                    = 1,
	EFortSocialPanelType__Max2                                                       = 2
};

/// Enum /Script/FortniteUI.EModalContainerSize
/// Size: 0x05
enum EModalContainerSize : uint8_t
{
	EModalContainerSize__ExtraSmall0                                                 = 0,
	EModalContainerSize__Small1                                                      = 1,
	EModalContainerSize__Medium2                                                     = 2,
	EModalContainerSize__Large3                                                      = 3,
	EModalContainerSize__Max4                                                        = 4
};

/// Enum /Script/FortniteUI.ENotificationType
/// Size: 0x03
enum ENotificationType : uint8_t
{
	ENotificationType__Basic0                                                        = 0,
	ENotificationType__Friends1                                                      = 1,
	ENotificationType__ENotificationType_MAX2                                        = 2
};

/// Enum /Script/FortniteUI.ENotificationResult
/// Size: 0x04
enum ENotificationResult : uint8_t
{
	ENotificationResult__Confirmed0                                                  = 0,
	ENotificationResult__Declined1                                                   = 1,
	ENotificationResult__Unknown2                                                    = 2,
	ENotificationResult__ENotificationResult_MAX3                                    = 3
};

/// Enum /Script/FortniteUI.EFortInventoryContext
/// Size: 0x05
enum EFortInventoryContext : uint8_t
{
	EFortInventoryContext__Game0                                                     = 0,
	EFortInventoryContext__Lobby1                                                    = 1,
	EFortInventoryContext__FrontEnd2                                                 = 2,
	EFortInventoryContext__Pickup3                                                   = 3,
	EFortInventoryContext__EFortInventoryContext_MAX4                                = 4
};

