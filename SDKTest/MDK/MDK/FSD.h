
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

/// dependency: BasicType
/// dependency: AIModule
/// dependency: AnimationSharing
/// dependency: AnimGraphRuntime
/// dependency: AudioMixer
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: DLSSBlueprint
/// dependency: DSTelemetry
/// dependency: Engine
/// dependency: FSDEngine
/// dependency: GameplayTags
/// dependency: InputCore
/// dependency: MediaAssets
/// dependency: Niagara
/// dependency: OnlineSubsystemUtils
/// dependency: PhysicsCore
/// dependency: Slate
/// dependency: SlateCore
/// dependency: UMG

/// Class /Script/FSD.AcceptInviteBlueprintCallProxy
/// Size: 0x0058 (0x000030 - 0x000088)
class UAcceptInviteBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.AcceptInviteBlueprintCallProxy.AcceptInvite
	// class UAcceptInviteBlueprintCallProxy* AcceptInvite(class UObject* WorldContextObject, FString ListName, FString UserId); // [0x17d1740] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/FSD.MissionShouts
/// Size: 0x0038 (0x000000 - 0x000038)
class FMissionShouts : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UDialogDataAsset*)                   AfterDropPodExit                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OnExitPodDescending                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OnExitPodArrived                                            OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OnCompletion                                                OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OnCompletion_OneOfMultiple                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OnAllReturnObjectivesCompleted                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OnDeepDiveExitPodDescending                                 OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.Objective
/// Size: 0x00D0 (0x0000B0 - 0x000180)
class UObjective : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FMulticastInlineDelegate)                  OnObjectiveUpdated                                          OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	CMember(class UClass*)                             ObjectiveWidgetClass                                        OFFSET(get<T>, {0xC8, 8, 0, 0})
	SMember(FMissionShouts)                            MissionShouts                                               OFFSET(getStruct<T>, {0xD0, 56, 0, 0})
	SMember(FText)                                     MissionDescription                                          OFFSET(getStruct<T>, {0x108, 24, 0, 0})
	DMember(int32_t)                                   CompletionRewardInCredits                                   OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	DMember(int32_t)                                   CompletionRewardInXP                                        OFFSET(get<int32_t>, {0x124, 4, 0, 0})
	DMember(bool)                                      ScaleObjectiveToMission                                     OFFSET(get<bool>, {0x128, 1, 0, 0})
	DMember(bool)                                      bHasReturnObjective                                         OFFSET(get<bool>, {0x129, 1, 0, 0})
	DMember(bool)                                      RequiredReturnObjectiveCompleted                            OFFSET(get<bool>, {0x12A, 1, 0, 0})
	DMember(bool)                                      ShowObjectiveInHUD                                          OFFSET(get<bool>, {0x12B, 1, 0, 0})
	CMember(class UMissionStat*)                       ObjectiveCompletedStat                                      OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             OptionalObjectiveWidgetClass                                OFFSET(get<T>, {0x138, 40, 0, 0})
	DMember(int32_t)                                   IsPrimaryObjective                                          OFFSET(get<int32_t>, {0x160, 4, 0, 0})
	DMember(bool)                                      bIsNeededForMissionCompletion                               OFFSET(get<bool>, {0x164, 1, 0, 0})
	DMember(float)                                     MissionScale                                                OFFSET(get<float>, {0x168, 4, 0, 0})
	CMember(TArray<class UBiome*>)                     BannedInBiomes                                              OFFSET(get<T>, {0x170, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.Objective.SignalObjectiveUpdated
	// void SignalObjectiveUpdated();                                                                                           // [0x1830d80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Objective.Receive_StartTracking
	// void Receive_StartTracking();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Objective.OnRep_IsPrimaryObjective
	// void OnRep_IsPrimaryObjective();                                                                                         // [0x193fd80] Final|Native|Protected 
	// Function /Script/FSD.Objective.IsTutorialObjective
	// bool IsTutorialObjective();                                                                                              // [0x1809620] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.Objective.IsPrimary
	// bool IsPrimary();                                                                                                        // [0x193fcc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Objective.IsObjectiveResource
	// bool IsObjectiveResource(class UResourceData* InResource);                                                               // [0x193fc20] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.Objective.IsNeededForMissionCompletion
	// bool IsNeededForMissionCompletion();                                                                                     // [0x193fc00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Objective.IsFinalBattle
	// bool IsFinalBattle();                                                                                                    // [0x193fb30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Objective.IsCompleted
	// bool IsCompleted();                                                                                                      // [0x193fb00] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Objective.HasReplicated
	// bool HasReplicated();                                                                                                    // [0x193fad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Objective.HandleMissionEnded
	// void HandleMissionEnded(bool MissionSuccess);                                                                            // [0x193f9a0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FSD.Objective.GetWidgetClassOrDefault
	// class UClass* GetWidgetClassOrDefault(class UClass* DefaultWidgetClass);                                                 // [0x193f910] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Objective.GetRewardXP
	// int32_t GetRewardXP();                                                                                                   // [0x193f8e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Objective.GetRewardCredits
	// FCreditsReward GetRewardCredits();                                                                                       // [0x193f840] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Objective.GetOptionalMissionWidget
	// class UClass* GetOptionalMissionWidget();                                                                                // [0x193f800] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.Objective.GetObjectiveText
	// FText GetObjectiveText();                                                                                                // [0x193f760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Objective.GetObjectiveIconFromClass
	// class UTexture2D* GetObjectiveIconFromClass(class UClass* objectiveClass);                                               // [0x193f6d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Objective.GetObjectiveIcon
	// class UTexture2D* GetObjectiveIcon();                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent|Const 
	// Function /Script/FSD.Objective.GetObjectiveDescriptionFromClass
	// FText GetObjectiveDescriptionFromClass(class UClass* objectiveClass, float missionLength);                               // [0x193f5a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Objective.GetObjectiveDescription
	// FText GetObjectiveDescription(float missionLength);                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Objective.GetObjectiveAmountFromClass
	// int32_t GetObjectiveAmountFromClass(class UClass* objectiveClass, float missionLength);                                  // [0x193f4d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Objective.GetObjectiveAmount
	// int32_t GetObjectiveAmount(float missionLength);                                                                         // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.Objective.GetMissionIcon
	// FObjectiveMissionIcon GetMissionIcon();                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent|Const 
	// Function /Script/FSD.Objective.GetInMissionText
	// FText GetInMissionText();                                                                                                // [0x193f0b0] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.Objective.GetInMissionCounterText
	// FText GetInMissionCounterText();                                                                                         // [0x193f010] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.Objective.GetInMissionCounterIcon
	// class UTexture2D* GetInMissionCounterIcon();                                                                             // [0x193efe0] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FSD.ActivationOjective
/// Size: 0x0008 (0x000180 - 0x000188)
class UActivationOjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	DMember(int32_t)                                   ObjectivesFound                                             OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(int32_t)                                   ObjectivesToFind                                            OFFSET(get<int32_t>, {0x184, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ActivationOjective.OnRep_ObjectivesToFind
	// void OnRep_ObjectivesToFind(int32_t prevAmount);                                                                         // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.ActivationOjective.OnRep_ObjectivesFound
	// void OnRep_ObjectivesFound(int32_t prevAmount);                                                                          // [0x17d4d70] Final|Native|Protected 
};

/// Class /Script/FSD.ActivationObject
/// Size: 0x0010 (0x000220 - 0x000230)
class AActivationObject : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class USingleUsableComponent*)             Usable                                                      OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      HasBeenUsed                                                 OFFSET(get<bool>, {0x228, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ActivationObject.OnUsedBy
	// void OnUsedBy(class APlayerCharacter* User, EInputKeys Key);                                                             // [0x17d4e00] Final|Native|Protected 
};

/// Class /Script/FSD.Reward
/// Size: 0x0000 (0x000030 - 0x000030)
class UReward : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.ActivityCardReward
/// Size: 0x0008 (0x000030 - 0x000038)
class UActivityCardReward : public UReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UGameActivityType*)                  Activity                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FSD.GameActivitySubTask
/// Size: 0x0010 (0x000000 - 0x000010)
class FGameActivitySubTask : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   SubActivityId                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.GameActivityType
/// Size: 0x0028 (0x000030 - 0x000058)
class UGameActivityType : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FString)                                   ActivityId                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(EActivityType)                             ActivityType                                                OFFSET(get<T>, {0x40, 1, 0, 0})
	CMember(TArray<FGameActivitySubTask>)              SubTasks                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/FSD.GameActivityMissionType
/// Size: 0x0028 (0x000058 - 0x000080)
class UGameActivityMissionType : public UGameActivityType
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TWeakObjectPtr<class UMissionTemplate*>)   ActivityMission                                             OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.ActivitySubSystem
/// Size: 0x0028 (0x000030 - 0x000058)
class UActivitySubSystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:


	/// Functions
	// Function /Script/FSD.ActivitySubSystem.StartActivity
	// void StartActivity(class APlayerState* PlayerState, class UGameActivityType* Activity);                                  // [0x17d53b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ActivitySubSystem.ShowPlayerReviewUI
	// void ShowPlayerReviewUI(bool ReviewActiveMatch);                                                                         // [0x17d5320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ActivitySubSystem.PlayerReviewUIAvailable
	// bool PlayerReviewUIAvailable(bool ReviewActiveMatch);                                                                    // [0x17d5160] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ActivitySubSystem.EndActivity
	// void EndActivity(class APlayerState* PlayerState, class UGameActivityType* Activity);                                    // [0x17d1e20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.GameActivitySettings
/// Size: 0x0010 (0x000030 - 0x000040)
class UGameActivitySettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<TWeakObjectPtr<UGameActivityType*>>) GameActivites                                              OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.GameActivityAssignmentType
/// Size: 0x0008 (0x000058 - 0x000060)
class UGameActivityAssignmentType : public UGameActivityType
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/FSD.ActorFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UActorFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.ActorFunctionLibrary.UnlockSpecificCharacters
	// void UnlockSpecificCharacters(TArray<APlayerCharacter*> Characters, ECharacterState UnlockIf, ECharacterState UnlockTo); // [0x17d55d0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.UnlockCharacters
	// void UnlockCharacters(class UObject* WorldContextObject);                                                                // [0x17d5550] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.TimeSince
	// float TimeSince(class UObject* WorldContextObject, float Time);                                                          // [0x17d5480] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.SetScalarParameters
	// void SetScalarParameters(FName ParameterName, float Value, TArray<UMaterialInstanceDynamic*>& Materials);                // [0x17d5200] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.PlayCueOnClient
	// void PlayCueOnClient(class APlayerController* Target, class USoundCue* cue);                                             // [0x17d50a0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.PlayCueOnAll
	// void PlayCueOnAll(class UObject* WorldContextObject, class USoundCue* cue);                                              // [0x17d4fe0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.PingPong
	// float PingPong(float Time, float Length, bool normalize);                                                                // [0x17d4ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.MoveTowards
	// float MoveTowards(float Current, float End, float step);                                                                 // [0x17d4c50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.LockSpecificCharactersIfState
	// void LockSpecificCharactersIfState(TArray<APlayerCharacter*> Characters, ECharacterState stateToLock);                   // [0x17d4b30] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.LockSpecificCharacters
	// void LockSpecificCharacters(TArray<APlayerCharacter*> Characters);                                                       // [0x17d4a50] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.LockSpecificCharacterIfState
	// bool LockSpecificCharacterIfState(class APlayerCharacter* Character, ECharacterState LockIf, ECharacterState LockTo);    // [0x17d4950] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.LockCharacters
	// void LockCharacters(class UObject* WorldContextObject);                                                                  // [0x17d48d0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.LoadWindowWidgetClass
	// class UClass* LoadWindowWidgetClass(TSoftObjectPtr<UClass*> WidgetClass);                                                // [0x17d47c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.LoadWidgetClass
	// class UClass* LoadWidgetClass(TSoftObjectPtr<UClass*> WidgetClass);                                                      // [0x17d46b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.LoadClass
	// class UClass* LoadClass(TSoftObjectPtr<UClass*> softReference);                                                          // [0x17d45a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.KillActorWithEffects
	// void KillActorWithEffects(class AActor* Actor, class USceneComponent* visualsToHide, class USoundCue* deathSound, class UFXSystemAsset* deathParticles, float particleScale, class UPathfinderCollisionComponent* pathColliderToDisable); // [0x17d43d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.IsWeakPoint
	// bool IsWeakPoint(class UFSDPhysicalMaterial* Material);                                                                  // [0x17d4340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.IsSingleplayer
	// bool IsSingleplayer(class UObject* WorldContextObject);                                                                  // [0x17d42b0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.IsMovingPlatform
	// bool IsMovingPlatform(class AActor* Actor);                                                                              // [0x17d4220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.IsInRangeOfLocalPlayer
	// bool IsInRangeOfLocalPlayer(class AActor* toActor, float MinDistance, float MaxDistance);                                // [0x17d4120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.IsCloseToLocalPlayer
	// bool IsCloseToLocalPlayer(class AActor* toActor, float Distance);                                                        // [0x17d4050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetTotalHeroLevels
	// int32_t GetTotalHeroLevels(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                    // [0x17d3f80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetSaveGameIDFromCharacterID
	// FGuid GetSaveGameIDFromCharacterID(class UPlayerCharacterID* characterID);                                               // [0x17d3e60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetSavegameID
	// FGuid GetSavegameID(class UClass* objectClass);                                                                          // [0x17d3ef0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetPlayersInRange
	// TArray<APlayerCharacter*> GetPlayersInRange(class UObject* WorldContextObject, FVector& Origin, float Radius, bool MustBeAlive); // [0x17d3ca0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.GetItemID
	// class UItemID* GetItemID(class UClass* itemClass);                                                                       // [0x17d3c10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroXP
	// float GetHeroXP(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                               // [0x17d3b40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroSwitchToMessage
	// FText GetHeroSwitchToMessage(class UClass* playerClass);                                                                 // [0x17d3a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroSourceName
	// FString GetHeroSourceName(class UClass* playerClass);                                                                    // [0x17d3940] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroProgress
	// float GetHeroProgress(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                         // [0x17d3870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroName
	// FText GetHeroName(class UClass* playerClass);                                                                            // [0x17d3780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroLevel
	// int32_t GetHeroLevel(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                          // [0x17d36b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroInventoryList
	// class UInventoryList* GetHeroInventoryList(class UPlayerCharacterID* characterID);                                       // [0x17d3620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroInfo
	// FHeroInfo GetHeroInfo(class UClass* playerClass);                                                                        // [0x17d34b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroImageSmall
	// class UTexture2D* GetHeroImageSmall(class UClass* playerClass);                                                          // [0x17d3420] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroImageFullSize
	// class UTexture2D* GetHeroImageFullSize(class UClass* playerClass);                                                       // [0x17d3390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroImage
	// class UTexture2D* GetHeroImage(class UClass* playerClass);                                                               // [0x17d3300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetHeroColor
	// FLinearColor GetHeroColor(class UClass* playerClass);                                                                    // [0x17d3270] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetComponentFromClass
	// class UActorComponent* GetComponentFromClass(class UClass* Actor, class UClass* ComponentClass);                         // [0x17d31a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.GetComponentByClass
	// class UActorComponent* GetComponentByClass(class AActor* Actor, class UClass* ComponentClass);                           // [0x17d30d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.GetCharacterIDFromCharacter
	// class UPlayerCharacterID* GetCharacterIDFromCharacter(class APlayerCharacter* Character);                                // [0x17d3040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetCharacterID
	// class UPlayerCharacterID* GetCharacterID(class UClass* playerClass);                                                     // [0x17d2fb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetAllPlayerCharacters
	// TArray<APlayerCharacter*> GetAllPlayerCharacters(class UObject* WorldContext);                                           // [0x17d2ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.GetActorTargetCenter
	// FVector GetActorTargetCenter(class AActor* TargetActor);                                                                 // [0x17d2e30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FSDRemoveBlendable
	// void FSDRemoveBlendable(class UPostProcessComponent* PostProcessComponent, TScriptInterface<Class> InBlendableObject);   // [0x17d21b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FSDRemoveAllWidgets
	// void FSDRemoveAllWidgets(class UObject* WorldContextObject);                                                             // [0x17d2130] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FSDDumpCallStack
	// void FSDDumpCallStack(FString Msg);                                                                                      // [0x17d20a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FindNearestPlayerCharacter
	// class APlayerCharacter* FindNearestPlayerCharacter(class UObject* WorldContextObject, FVector fromLocation, float MaxRadius, bool MustBeAlive, bool MustBeUnparalyzed, bool MustHaveLineOfSight); // [0x17d2c40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.FindLatejoinDroppodLocation
	// FVector FindLatejoinDroppodLocation(class AFSDGameMode* GameMode);                                                       // [0x17d2ba0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FindClosestEnemyFromLocation
	// class AActor* FindClosestEnemyFromLocation(FVector& fromLocation, float range, bool LineOfSightCheck, class UObject* WorldContextObject, TArray<AActor*>& IgnoredActors, FVector& Offset, bool onlyTargetable); // [0x17d2940] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FindClosestEnemyFromActorWithSkipChance
	// class AActor* FindClosestEnemyFromActorWithSkipChance(class AActor* FromActor, float range, float SkipChance, bool LineOfSightCheck, FGameplayTagQuery& tagQuery, FVector Offset); // [0x17d2700] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FindClosestEnemyFromActor
	// class AActor* FindClosestEnemyFromActor(class AActor* FromActor, float range, bool LineOfSightCheck, FGameplayTagQuery& tagQuery, FVector& Offset); // [0x17d24e0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FindCharacterTeleportLocation
	// FVector FindCharacterTeleportLocation(class UObject* WorldContextObject, FVector& closeToLocation, float desiredDistance); // [0x17d23b0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.FadeMaterials
	// void FadeMaterials(class UObject* WorldContextObject, class UMeshComponent*& Mesh, float Duration);                      // [0x17d2290] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.EvaluateRuntimeCurve
	// float EvaluateRuntimeCurve(class UObject* WorldContextObject, FRuntimeFloatCurve& Curve, float Time);                    // [0x17d1ef0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorFunctionLibrary.DissolveMaterials
	// void DissolveMaterials(class UObject* WorldContextObject, class UMeshComponent*& Mesh, float Duration);                  // [0x17d1d00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.CreateDynamicMaterialInstances
	// TArray<UMaterialInstanceDynamic*> CreateDynamicMaterialInstances(class UMeshComponent* Mesh);                            // [0x17d1c30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.AddHeroXP
	// float AddHeroXP(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, float amount);                 // [0x17d1b20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.AddEnemyKill
	// void AddEnemyKill(class APlayerCharacter* Instigator, class UEnemyComponent* EnemyComponent, class AFSDGameState* GameState); // [0x17d1a20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ActorFunctionLibrary.ActorMatchesTagQuery
	// bool ActorMatchesTagQuery(FGameplayTagQuery& Query, class AActor* InActor);                                              // [0x17d18f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ActorStateComponent
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UActorStateComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FMulticastInlineDelegate)                  OnBeginState                                                OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTickState                                                 OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndState                                                  OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(class UActorStateComponent*)               CurrentState                                                OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UActorStateComponent*)               NextState                                                   OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UActorStateComponent*)               MasterState                                                 OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(float)                                     StateActiveTime                                             OFFSET(get<float>, {0xF8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ActorStateComponent.OnRep_CurrentState
	// void OnRep_CurrentState(class UActorStateComponent* previousState);                                                      // [0x17e1240] Final|Native|Protected 
	// Function /Script/FSD.ActorStateComponent.IsStateActive
	// bool IsStateActive();                                                                                                    // [0x17e0d40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ActorStateComponent.GotoState
	// void GotoState();                                                                                                        // [0x17e0c70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ActorTrackingCheatInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UActorTrackingCheatInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.ActorTrackingComponent
/// Size: 0x0018 (0x0001F8 - 0x000210)
class UActorTrackingComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(class UClass*)                             WidgetType                                                  OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(bool)                                      VisibleOnHoldTAB                                            OFFSET(get<bool>, {0x200, 1, 0, 0})
	DMember(bool)                                      VisibleFromStart                                            OFFSET(get<bool>, {0x201, 1, 0, 0})
	DMember(bool)                                      bIconHidden                                                 OFFSET(get<bool>, {0x202, 1, 0, 0})
	CMember(TWeakObjectPtr<class UActorTrackingWidget*>) Widget                                                    OFFSET(get<T>, {0x204, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ActorTrackingComponent.ToggleIcon
	// void ToggleIcon(bool Visible);                                                                                           // [0x17e1770] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ActorTrackingComponent.ShowAlwaysOn
	// void ShowAlwaysOn(bool IsActive);                                                                                        // [0x17e16e0] Final|Native|Protected 
	// Function /Script/FSD.ActorTrackingComponent.OnHoldTAB
	// void OnHoldTAB(bool IsDown);                                                                                             // [0x17e0e20] Final|Native|Protected 
	// Function /Script/FSD.ActorTrackingComponent.IsIconVisible
	// bool IsIconVisible();                                                                                                    // [0x17e0cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ActorTrackingSubsystem
/// Size: 0x0030 (0x000030 - 0x000060)
class UActorTrackingSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/FSD.DropSpikeTrackingSubsystem
/// Size: 0x0008 (0x000030 - 0x000038)
class UDropSpikeTrackingSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:


	/// Functions
	// Function /Script/FSD.DropSpikeTrackingSubsystem.IncrementSpikeCount
	// void IncrementSpikeCount();                                                                                              // [0x17e0c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DropSpikeTrackingSubsystem.GetSpikeCount
	// int32_t GetSpikeCount();                                                                                                 // [0x17e0be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FSDUserWidget
/// Size: 0x0020 (0x000260 - 0x000280)
class UFSDUserWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	SMember(FMulticastInlineDelegate)                  OnVisibilityChangedFSD                                      OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x278, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDUserWidget.SetOpacity
	// void SetOpacity(float alpha);                                                                                            // [0x18c3360] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDUserWidget.ScaleByBaseResolution
	// void ScaleByBaseResolution();                                                                                            // [0x18c2c80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDUserWidget.Refresh
	// void Refresh();                                                                                                          // [0x184b4a0] Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDUserWidget.ReceiveNewVisibility
	// void ReceiveNewVisibility(ESlateVisibility NewVisibility);                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDUserWidget.OnCloseMenuReleased
	// void OnCloseMenuReleased(bool& Handled);                                                                                 // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.FSDUserWidget.OnCloseMenuPressed
	// void OnCloseMenuPressed(bool& Handled);                                                                                  // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.FSDUserWidget.HasCharacter
	// bool HasCharacter();                                                                                                     // [0x18c1d60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDUserWidget.GetOpacity
	// float GetOpacity();                                                                                                      // [0x18c16c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDUserWidget.GetFSDPlayerState
	// class AFSDPlayerState* GetFSDPlayerState();                                                                              // [0x18c1240] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDUserWidget.GetEquippedItem
	// class AItem* GetEquippedItem();                                                                                          // [0x18c1210] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDUserWidget.GetBaseResolutionScale
	// float GetBaseResolutionScale();                                                                                          // [0x18c1140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDUserWidget.BP_OnRefresh
	// void BP_OnRefresh();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.ActorTrackingWidget
/// Size: 0x0030 (0x000280 - 0x0002B0)
class UActorTrackingWidget : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(TWeakObjectPtr<class USceneComponent*>)    TargetComponent                                             OFFSET(get<T>, {0x280, 8, 0, 0})
	DMember(float)                                     WorldHeightOffset                                           OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     ScaleBy                                                     OFFSET(get<float>, {0x28C, 4, 0, 0})
	SMember(FMargin)                                   ScreenMargin                                                OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	DMember(int32_t)                                   WidgetZOrder                                                OFFSET(get<int32_t>, {0x2A0, 4, 0, 0})
	DMember(bool)                                      bTrackCenterOfMass                                          OFFSET(get<bool>, {0x2A4, 1, 0, 0})
	DMember(bool)                                      bHideWhenPlayerNearby                                       OFFSET(get<bool>, {0x2A5, 1, 0, 0})
	DMember(bool)                                      bHideWhenPlayerFarAway                                      OFFSET(get<bool>, {0x2A6, 1, 0, 0})
	DMember(float)                                     LastTargetDistanceUpdate                                    OFFSET(get<float>, {0x2A8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ActorTrackingWidget.SetTargetComponent
	// void SetTargetComponent(class USceneComponent* Component);                                                               // [0x17e1650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ActorTrackingWidget.SetTarget
	// void SetTarget(class AActor* Actor);                                                                                     // [0x17e15c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ActorTrackingWidget.OnTargetSet
	// void OnTargetSet(class AActor* NewTarget);                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ActorTrackingWidget.OnTargetDistanceChanged
	// void OnTargetDistanceChanged(float Distance);                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ActorTrackingWidget.OnShow
	// void OnShow();                                                                                                           // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ActorTrackingWidget.OnInViewChanged
	// void OnInViewChanged(bool inView, float Angle);                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ActorTrackingWidget.GetTarget
	// class AActor* GetTarget();                                                                                               // [0x17e0c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ActorTrackingWidget.GetRenderTranslation
	// FVector2D GetRenderTranslation();                                                                                        // [0x17e0bb0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ActorTrackingWidget.FindScreenPosition
	// bool FindScreenPosition(class APlayerController* PlayerController, FVector WorldLocation, FMargin Margin, FVector& ScreenCord, float& Angle); // [0x17e08d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ActorTrackingWidget.CreateTrackingWidget
	// class UActorTrackingWidget* CreateTrackingWidget(class APlayerController* PlayerController, class UClass* WidgetType, class USceneComponent* TargetComponent); // [0x17e07d0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.AdicPuddle
/// Size: 0x0030 (0x000220 - 0x000250)
class AAdicPuddle : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(TWeakObjectPtr<class UPrimitiveComponent*>) TriggerCollider                                            OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USphereComponent*)                   SphereTrigger                                               OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USoundBase*)                         SpawnSound                                                  OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UClass*)                             InflictedStatusEffect                                       OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(float)                                     LifeTime                                                    OFFSET(get<float>, {0x248, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AdicPuddle.Receive_OnPlayerBeginOverlap
	// void Receive_OnPlayerBeginOverlap(class APlayerCharacter* Player);                                                       // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.AdicPuddle.OnPuddleEndOverLap
	// void OnPuddleEndOverLap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17e10d0] Native|Public        
	// Function /Script/FSD.AdicPuddle.OnPuddleBeginOverLap
	// void OnPuddleBeginOverLap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17e0eb0] Native|Public|HasOutParms 
};

/// Struct /Script/FSD.OverlapPair
/// Size: 0x0010 (0x000000 - 0x000010)
class FOverlapPair : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class APlayerCharacter*)                   Player                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class AActor*)                             Overlap                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.OverlapTrackingSubsystem
/// Size: 0x0010 (0x000030 - 0x000040)
class UOverlapTrackingSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FOverlapPair>)                      Overlaps                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.AdventureObjective
/// Size: 0x0000 (0x000180 - 0x000180)
class UAdventureObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/FSD.AfflictionEffect
/// Size: 0x0000 (0x000028 - 0x000028)
class UAfflictionEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.AfflictionEffect.ShouldInstantiate
	// bool ShouldInstantiate();                                                                                                // [0x1153030] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FSD.AfflictionEffect.ReceiveEndEffect
	// void ReceiveEndEffect(class UPawnAfflictionComponent* Target);                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AfflictionEffect.ReceiveBeginEffect
	// void ReceiveBeginEffect(class UPawnAfflictionComponent* Target);                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.AfflictionFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UAfflictionFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.AfflictionFunctionLibrary.PlayEnemyExplosionEffects
	// void PlayEnemyExplosionEffects(class AFSDPawn* enemy);                                                                   // [0x17e12f0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.PawnFrozenUniqueAfflictionEffect
/// Size: 0x0000 (0x000028 - 0x000028)
class UPawnFrozenUniqueAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.PawnBurningUniqueAfflictionEffect
/// Size: 0x0000 (0x000028 - 0x000028)
class UPawnBurningUniqueAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FSD.ScaledEffect
/// Size: 0x0010 (0x000000 - 0x000010)
class FScaledEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UFXSystemAsset*)                     ParticleSystem                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      SetBiomeRockMaterial                                        OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Class /Script/FSD.SpawnAtLocationParticleAfflictionEffect
/// Size: 0x0010 (0x000028 - 0x000038)
class USpawnAtLocationParticleAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FScaledEffect)                             ScaledParticleEffect                                        OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.AttachedParticlesAfflictionEffect
/// Size: 0x0020 (0x000028 - 0x000048)
class UAttachedParticlesAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UFXSystemAsset*)                     ParticleEffect                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<class UFXSystemAsset*>)             ParticleEffects                                             OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(EAfflictionSocket)                         Socket                                                      OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(bool)                                      ScaleToActor                                                OFFSET(get<bool>, {0x41, 1, 0, 0})
	DMember(bool)                                      UseVisibilityHack                                           OFFSET(get<bool>, {0x42, 1, 0, 0})
	DMember(bool)                                      UseBoneFilter                                               OFFSET(get<bool>, {0x43, 1, 0, 0})
};

/// Class /Script/FSD.CharacterShoutAfflictionEffect
/// Size: 0x0008 (0x000028 - 0x000030)
class UCharacterShoutAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UDialogDataAsset*)                   Shout                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FSD.CameraParticleAfflictionEffect
/// Size: 0x0008 (0x000028 - 0x000030)
class UCameraParticleAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UParticleSystem*)                    ParticleEffect                                              OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FSD.ShieldLinkedAfflictionEffect
/// Size: 0x0000 (0x000028 - 0x000028)
class UShieldLinkedAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.SoundAfflictionEffect
/// Size: 0x0020 (0x000028 - 0x000048)
class USoundAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class USoundCue*)                          BeginSound                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class USoundCue*)                          EndSound                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      Attach                                                      OFFSET(get<bool>, {0x38, 1, 0, 0})
	SMember(FName)                                     AttachBone                                                  OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
	DMember(float)                                     FadeOnLoopEndDuration                                       OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Struct /Script/FSD.AttachMeshesAfflictionItem
/// Size: 0x0040 (0x000000 - 0x000040)
class FAttachMeshesAfflictionItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(class USkeletalMesh*)                      SkeletalMesh                                                OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UStaticMesh*)                        StaticMesh                                                  OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UAnimSequence*)                      Animation                                                   OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x28, 4, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x2C, 8, 0, 0})
	CMember(TEnumAsByte<EMeshAttachType>)              AttachType                                                  OFFSET(get<T>, {0x34, 1, 0, 0})
	DMember(bool)                                      LoopAnimation                                               OFFSET(get<bool>, {0x35, 1, 0, 0})
	DMember(bool)                                      RandomRotaiton                                              OFFSET(get<bool>, {0x36, 1, 0, 0})
	DMember(bool)                                      RandomScale                                                 OFFSET(get<bool>, {0x37, 1, 0, 0})
	DMember(bool)                                      CastShadows                                                 OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/FSD.AttachMeshesAfflictionEffect
/// Size: 0x0018 (0x000028 - 0x000040)
class UAttachMeshesAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FAttachMeshesAfflictionItem>)       AttachItems                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(class UParticleSystem*)                    OnRemoveEffect                                              OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/FSD.RandRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FRandRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Min                                                         OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Max                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.ScalingMeshAfflictionItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FScalingMeshAfflictionItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FRandRange)                                MeshScale                                                   OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(EFrozenBitsSize)                           FrozenBitsSize                                              OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(float)                                     ChanceToSpawn                                               OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Class /Script/FSD.ScalingMeshAfflictionEffect
/// Size: 0x0038 (0x000028 - 0x000060)
class UScalingMeshAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(EFrozenAfflictionType)                     AfflictionType                                              OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(TArray<FScalingMeshAfflictionItem>)        IceParts                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(class UMaterialInterface*)                 MaterialOverride                                            OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FName)                                     ParticleBone                                                OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	CMember(TArray<class UMaterialInterface*>)         IceMaterials                                                OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/FSD.BurningAfflictionEffect
/// Size: 0x0008 (0x000028 - 0x000030)
class UBurningAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EFrozenBitsSize)                           FireParticleSize                                            OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.StaggeredAfflictionEffect
/// Size: 0x0008 (0x000028 - 0x000030)
class UStaggeredAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     StaggerStrength                                             OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/FSD.BoneParticlesAfflictionEffect
/// Size: 0x0018 (0x000028 - 0x000040)
class UBoneParticlesAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UParticleSystem*>)            Particles                                                   OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(class USoundCue*)                          Sound                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.AnimatedItemParticleAfflictionEffect
/// Size: 0x0018 (0x000028 - 0x000040)
class UAnimatedItemParticleAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(EItemCategory)                             ItemCategory                                                OFFSET(get<T>, {0x28, 1, 0, 0})
	CMember(class UParticleSystem*)                    ParticleEffect                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     Socket                                                      OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.PlayerCharacterMontageAfflictionEffect
/// Size: 0x0028 (0x000028 - 0x000050)
class UPlayerCharacterMontageAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UAnimMontage*)                       FP_Montage                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_Montage                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     BlendOut                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(TArray<FName>)                             RandomStarts                                                OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FSD.EnemySkinAfflictionEffect
/// Size: 0x0010 (0x000028 - 0x000038)
class UEnemySkinAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class UMaterialInterface*>)         NewMaterials                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.EnemyScaleAfflictionEffect
/// Size: 0x0008 (0x000028 - 0x000030)
class UEnemyScaleAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(bool)                                      RevertOnEndEffect                                           OFFSET(get<bool>, {0x2C, 1, 0, 0})
};

/// Class /Script/FSD.HeroEnemyAfflictionEffect
/// Size: 0x0008 (0x000028 - 0x000030)
class UHeroEnemyAfflictionEffect : public UAfflictionEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGameplayTag)                              TagToAdd                                                    OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FSD.ScaledMeshAfflictionTypeItem
/// Size: 0x0098 (0x000000 - 0x000098)
class FScaledMeshAfflictionTypeItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<FRuntimeFloatCurve>)                Scalers                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UStaticMesh*>>)      Meshes                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FRandRange)                                ScaleDelay                                                  OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          StartingSound                                               OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          EndSound                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UFXSystemAsset*>>)   StartParticles                                              OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UFXSystemAsset*>>)   EndParticles                                                OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/FSD.AfflictionSettings
/// Size: 0x01C0 (0x000030 - 0x0001F0)
class UAfflictionSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FScaledMeshAfflictionTypeItem)             FrozenScaledMeshAffliction                                  OFFSET(getStruct<T>, {0x30, 152, 0, 0})
	SMember(FScaledMeshAfflictionTypeItem)             InfectedScaledMeshAffliction                                OFFSET(getStruct<T>, {0xC8, 152, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          BurningSound                                                OFFSET(get<T>, {0x160, 8, 0, 0})
	DMember(float)                                     HeavyStaggerMinTime                                         OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     MediumStaggerMinTime                                        OFFSET(get<float>, {0x18C, 4, 0, 0})
	CMember(class UPawnAffliction*)                    HeavyStaggerAffliction                                      OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(class UPawnAffliction*)                    MediumStaggerAffliction                                     OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class UPawnAffliction*)                    ShortStaggerAffliction                                      OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UPawnAffliction*)                    EliteAffliction                                             OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UParticleSystem*>>)  BurningParticles                                            OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UParticleSystem*>>)  EletrocutedParticles                                        OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UParticleSystem*>>)  ExplodingParticles                                          OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<USoundCue*>>)        ExplodingSounds                                             OFFSET(get<T>, {0x1E0, 16, 0, 0})
};

/// Class /Script/FSD.FSDPawn
/// Size: 0x0078 (0x000280 - 0x0002F8)
class AFSDPawn : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	SMember(FMulticastInlineDelegate)                  OnFrozenEvent                                               OFFSET(getStruct<T>, {0x298, 16, 0, 0})
	CMember(class UStatusEffectsComponent*)            StatusEffects                                               OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UEnemyTemperatureComponent*)         temperature                                                 OFFSET(get<T>, {0x2B0, 8, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x2B8, 32, 0, 0})
	CMember(class UEnemyDescriptor*)                   SpawnedFromDescriptor                                       OFFSET(get<T>, {0x2D8, 8, 0, 0})
	DMember(bool)                                      IsFrozen                                                    OFFSET(get<bool>, {0x2E0, 1, 0, 0})
	DMember(bool)                                      CanFlee                                                     OFFSET(get<bool>, {0x2E1, 1, 0, 0})
	DMember(bool)                                      IsInRagdoll                                                 OFFSET(get<bool>, {0x2E2, 1, 0, 0})
	DMember(bool)                                      FleeInsteadOfBackingOff                                     OFFSET(get<bool>, {0x2E3, 1, 0, 0})
	DMember(bool)                                      IsFleeing                                                   OFFSET(get<bool>, {0x2E4, 1, 0, 0})
	CMember(class UPawnStatsComponent*)                PawnStatsInstance                                           OFFSET(get<T>, {0x2F0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDPawn.UnFreeze
	// void UnFreeze();                                                                                                         // [0x18a7c80] Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPawn.TriggerFadeRagdoll
	// void TriggerFadeRagdoll();                                                                                               // [0x18a7b60] BlueprintAuthorityOnly|Net|Native|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPawn.StopFleeing
	// void StopFleeing();                                                                                                      // [0x18a7ab0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPawn.StartFleeing
	// void StartFleeing(FVector& fromLocation);                                                                                // [0x18a7a20] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDPawn.SetAlerted
	// void SetAlerted(bool isAlerted);                                                                                         // [0x18a7530] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPawn.Receive_Alerted
	// void Receive_Alerted();                                                                                                  // [0x1d6f900] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.OnUnFrozen
	// void OnUnFrozen();                                                                                                       // [0x18a6c40] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.OnTriggerFadeRagdoll
	// void OnTriggerFadeRagdoll();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.OnStoppedFleeing
	// void OnStoppedFleeing();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.OnStartedFleeing
	// void OnStartedFleeing();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.OnRep_IsFrozen
	// void OnRep_IsFrozen();                                                                                                   // [0x18a6c20] Final|Native|Protected 
	// Function /Script/FSD.FSDPawn.OnFrozen
	// void OnFrozen(class AActor* Source);                                                                                     // [0x18a6b90] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.OnFirstHostileDamageTaken
	// void OnFirstHostileDamageTaken();                                                                                        // [0x1d6f900] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.OnEnemyScaled
	// void OnEnemyScaled(float NewScale);                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.OnArmorShattered
	// void OnArmorShattered(FVector& Location);                                                                                // [0x18a6b00] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.FSDPawn.OnAlerted
	// void OnAlerted();                                                                                                        // [0x18a6ae0] Final|Native|Protected 
	// Function /Script/FSD.FSDPawn.MakeRagdollMesh
	// void MakeRagdollMesh(class USkeletalMeshComponent* Mesh);                                                                // [0x18a6a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPawn.MakeElite
	// void MakeElite();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDPawn.IsElite
	// bool IsElite();                                                                                                          // [0x18a6960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPawn.GetIsAlerted
	// bool GetIsAlerted();                                                                                                     // [0x18a66d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPawn.GetHealthComponent
	// class UHealthComponentBase* GetHealthComponent();                                                                        // [0x18a6570] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPawn.GetFSDAIController
	// class AFSDAIController* GetFSDAIController();                                                                            // [0x18a6480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPawn.GetAttitude
	// EPawnAttitude GetAttitude();                                                                                             // [0x18a6280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPawn.Freeze
	// void Freeze(class AActor* Source);                                                                                       // [0x18a61f0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPawn.ExplodePawn
	// void ExplodePawn();                                                                                                      // [0x18a5ef0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPawn.BackOffFromLocation
	// void BackOffFromLocation(FVector& fromLocation);                                                                         // [0x18a5740] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.DeepPathfinderCharacter
/// Size: 0x0098 (0x0002F8 - 0x000390)
class ADeepPathfinderCharacter : public AFSDPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(class UDeepPathfinderMovement*)            PathfinderMovement                                          OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x310, 8, 0, 0})
	SMember(FName)                                     CenterMassSocketName                                        OFFSET(getStruct<T>, {0x318, 8, 0, 0})
	CMember(class UDeepPatherFinderCharacterAfflictionComponent*) Affliction                                       OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     AnimationOffset                                             OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(bool)                                      CanPlayerStandOn                                            OFFSET(get<bool>, {0x32C, 1, 0, 0})
	DMember(bool)                                      UseDormancy                                                 OFFSET(get<bool>, {0x32D, 1, 0, 0})
	DMember(float)                                     StaggerDurationMultiplier                                   OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     StaggerImunityWindow                                        OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(bool)                                      StaggerPauseLogic                                           OFFSET(get<bool>, {0x339, 1, 0, 0})
	DMember(bool)                                      IsHidden                                                    OFFSET(get<bool>, {0x33A, 1, 0, 0})
	DMember(bool)                                      IsStaggered                                                 OFFSET(get<bool>, {0x33B, 1, 0, 0})
	DMember(bool)                                      FrozenPauseLogic                                            OFFSET(get<bool>, {0x33C, 1, 0, 0})
	CMember(class UPawnAffliction*)                    CurrentStaggerAffliction                                    OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(float)                                     AttackerRadius                                              OFFSET(get<float>, {0x360, 4, 0, 0})
	CMember(TArray<class UMaterialInterface*>)         CachedMaterials                                             OFFSET(get<T>, {0x368, 16, 0, 0})
	DMember(float)                                     AllowedInFormationChance                                    OFFSET(get<float>, {0x378, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepPathfinderCharacter.TryJoinFormation
	// bool TryJoinFormation();                                                                                                 // [0x183e4a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderCharacter.SetHidden
	// void SetHidden(bool shouldHide);                                                                                         // [0x183db80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderCharacter.OnPausedMovementElapsed
	// void OnPausedMovementElapsed();                                                                                          // [0x183d5d0] Final|Native|Protected 
	// Function /Script/FSD.DeepPathfinderCharacter.OnControlledByPlayer
	// void OnControlledByPlayer(bool IsControlled, bool IsLocallyControlled);                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.DeepPathfinderCharacter.LeaveFormation
	// void LeaveFormation();                                                                                                   // [0x183d140] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.QueuedMontage
/// Size: 0x0010 (0x000000 - 0x000010)
class FQueuedMontage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAnimMontage*)                       Montage                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      ForceUpdate                                                 OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Class /Script/FSD.EnemyDeepPathfinderCharacter
/// Size: 0x0020 (0x000390 - 0x0003B0)
class AEnemyDeepPathfinderCharacter : public ADeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(class UEnemyHealthComponent*)              HealthComponent                                             OFFSET(get<T>, {0x398, 8, 0, 0})
	SMember(FQueuedMontage)                            QueuedMontage                                               OFFSET(getStruct<T>, {0x3A0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyDeepPathfinderCharacter.SwitchToDynamicBaseShader
	// void SwitchToDynamicBaseShader(class UMaterialInterface* baseShader, class UMeshComponent* MeshComponent);               // [0x183e2f0] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.EnemyDeepPathfinderCharacter.OnRep_QueuedMontage
	// void OnRep_QueuedMontage();                                                                                              // [0x183d6e0] Final|Native|Protected 
};

/// Class /Script/FSD.AFlyingBug
/// Size: 0x0080 (0x0003B0 - 0x000430)
class AAFlyingBug : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(class UEnemyComponent*)                    EnemyComponent                                              OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UPawnStatsComponent*)                PawnStats                                                   OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UOutlineComponent*)                  outline                                                     OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UPawnSensingComponent*)              Senses                                                      OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UPawnAlertComponent*)                Alert                                                       OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class USphereComponent*)                   ExplosionSphere                                             OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UAudioComponent*)                    WingSoundComponent                                          OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UFrozenPawnImpactComponent*)         FrozenImpact                                                OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UHitReactionComponent*)              HitReactions                                                OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class AActor*)                             RotateTarget                                                OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class USoundBase*)                         ChatterSound                                                OFFSET(get<T>, {0x410, 8, 0, 0})
	DMember(float)                                     DistanceForAttackMode                                       OFFSET(get<float>, {0x418, 4, 0, 0})
	DMember(float)                                     MinChatterDelay                                             OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(float)                                     MaxChatterDelay                                             OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     AttackModeRotationSpeed                                     OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(bool)                                      UsesAttackStance                                            OFFSET(get<bool>, {0x428, 1, 0, 0})
	DMember(bool)                                      SetLifeTime                                                 OFFSET(get<bool>, {0x429, 1, 0, 0})
	DMember(bool)                                      AttackStance                                                OFFSET(get<bool>, {0x42A, 1, 0, 0})
	DMember(bool)                                      LookStraight                                                OFFSET(get<bool>, {0x42B, 1, 0, 0})
	DMember(bool)                                      UseDefaultRagdoll                                           OFFSET(get<bool>, {0x42C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.AFlyingBug.StartFizzle
	// void StartFizzle();                                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.AFlyingBug.SetRotateTarget
	// void SetRotateTarget(class AActor* aTarget);                                                                             // [0x17e1530] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AFlyingBug.SetExternallyControlled
	// void SetExternallyControlled(bool isExternallyControlled);                                                               // [0x17e14a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AFlyingBug.SetAttackStance
	// void SetAttackStance(bool isAttackStance);                                                                               // [0x17e1390] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AFlyingBug.PlayVoice
	// void PlayVoice();                                                                                                        // [0x17e1370] Final|Native|Protected 
	// Function /Script/FSD.AFlyingBug.OnStartFalling
	// void OnStartFalling();                                                                                                   // [0x17e12d0] Final|Native|Public  
	// Function /Script/FSD.AFlyingBug.OnRep_AttackStance
	// void OnRep_AttackStance();                                                                                               // [0x17e1220] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.AFlyingBug.OnRagdoll
	// void OnRagdoll();                                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AFlyingBug.OnFreezeImpact
	// void OnFreezeImpact();                                                                                                   // [0x17e0e00] Final|Native|Public  
	// Function /Script/FSD.AFlyingBug.OnBugDeath
	// void OnBugDeath(class UHealthComponentBase* Health);                                                                     // [0x17e0d70] Native|Public        
	// Function /Script/FSD.AFlyingBug.GetMidZpointFromCielingAndFloor
	// float GetMidZpointFromCielingAndFloor(float& distanceFromCieling, float& distanceFromFloor);                             // [0x17e0ac0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AFlyingBug.GetIsInAttackStance
	// bool GetIsInAttackStance();                                                                                              // [0x17e0aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AFlyingBug.All_Ragdoll
	// void All_Ragdoll(FVector_NetQuantize Location, FVector_NetQuantize Impulse, char BoneIndex);                             // [0x17e06d0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.AFlyingBug.AlertNearbyEnemies
	// void AlertNearbyEnemies();                                                                                               // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.AFlyingBug.AddImpulseAndRagdoll
	// void AddImpulseAndRagdoll(class UHealthComponent* Health, float damageAmount, FDamageData& DamageData, TArray<UDamageTag*>& damageTags); // [0x17e0520] Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/FSD.EndEffector
/// Size: 0x0050 (0x000000 - 0x000050)
class FEndEffector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FName)                                     EndBone                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector)                                   GroundCorrection                                            OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	DMember(float)                                     PositionAlpha                                               OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   PositionDepth                                               OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	SMember(FQuat)                                     Rotation                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(float)                                     RotationAlpha                                               OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   RotationDepth                                               OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(float)                                     Pull                                                        OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/FSD.EnemyAnimInstance
/// Size: 0x0098 (0x0002B8 - 0x000350)
class UEnemyAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FMulticastInlineDelegate)                  OnRangedAttackNotify                                        OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMeleeAttackNotify                                         OFFSET(getStruct<T>, {0x2C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStopLeadingNotify                                         OFFSET(getStruct<T>, {0x2D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnIsAttackingChanged                                        OFFSET(getStruct<T>, {0x2E8, 16, 0, 0})
	DMember(bool)                                      IsAttacking                                                 OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	CMember(TArray<FEndEffector>)                      EndEffectors                                                OFFSET(get<T>, {0x300, 16, 0, 0})
	SMember(FVector)                                   BodyPoseCorrectionLocation                                  OFFSET(getStruct<T>, {0x310, 12, 0, 0})
	SMember(FRotator)                                  BodyPoseCorrectionRotation                                  OFFSET(getStruct<T>, {0x31C, 12, 0, 0})
	DMember(float)                                     IKBlend                                                     OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(bool)                                      IKEnabled                                                   OFFSET(get<bool>, {0x32C, 1, 0, 0})
	DMember(bool)                                      IsAlive                                                     OFFSET(get<bool>, {0x32D, 1, 0, 0})
	DMember(float)                                     RandomStartPosition                                         OFFSET(get<float>, {0x330, 4, 0, 0})
	CMember(class UHealthComponentBase*)               HealthComponent                                             OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UIKComponent*)                       IKComponent                                                 OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UPoseCorrectionComponent*)           PoseCorrectionComponent                                     OFFSET(get<T>, {0x348, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyAnimInstance.IsSlotPlayingAnyAnimation
	// bool IsSlotPlayingAnyAnimation(FName SlotNodeName);                                                                      // [0x1859fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyAnimInstance.IsNotAttacking
	// bool IsNotAttacking();                                                                                                   // [0x1859fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyAnimInstance.IsDead
	// bool IsDead();                                                                                                           // [0x1859f80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyAnimInstance.GetSkeletalMesh
	// class USkeletalMeshComponent* GetSkeletalMesh();                                                                         // [0x1859f60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyAnimInstance.GetEndEffector1
	// FEndEffector GetEndEffector1();                                                                                          // [0x1859d00] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.EnemyAnimInstance.GetEndEffector0
	// FEndEffector GetEndEffector0();                                                                                          // [0x1859c00] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SimpleMovingEnemyAnimInstance
/// Size: 0x0030 (0x000350 - 0x000380)
class USimpleMovingEnemyAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x350, 4, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0x354, 12, 0, 0})
	DMember(float)                                     WalkCycleSpeed                                              OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     StartMovingSpeed                                            OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     StopMovingSpeed                                             OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     WalkCycleMinRate                                            OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(float)                                     WalkCyclePlayRate                                           OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     MeshScale                                                   OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(bool)                                      IsMoving                                                    OFFSET(get<bool>, {0x378, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SimpleMovingEnemyAnimInstance.SetMeshScale
	// void SetMeshScale(float NewScale);                                                                                       // [0x19b9920] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SimpleMovingEnemyAnimInstance.IsNotMoving
	// bool IsNotMoving();                                                                                                      // [0x19b8ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FlyingBugAnimInstance
/// Size: 0x0010 (0x000380 - 0x000390)
class UFlyingBugAnimInstance : public USimpleMovingEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(bool)                                      IsInAttackMode                                              OFFSET(get<bool>, {0x380, 1, 0, 0})
	DMember(bool)                                      IsStaggered                                                 OFFSET(get<bool>, {0x381, 1, 0, 0})
	CMember(EFlyingBugDeathAnimationCategory)          DeathAnimationCategory                                      OFFSET(get<T>, {0x382, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FlyingBugAnimInstance.SetDeathAnimation
	// void SetDeathAnimation(EFlyingBugDeathAnimationCategory deathAnim);                                                      // [0x17e1420] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FlyingBugAnimInstance.IsNotStaggered
	// bool IsNotStaggered();                                                                                                   // [0x17e0d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FlyingBugAnimInstance.IsNotInAttackMode
	// bool IsNotInAttackMode();                                                                                                // [0x17e0ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.AIFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UAIFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.AIFunctionLibrary.SetAICanSense
	// void SetAICanSense(bool canSense);                                                                                       // [0x17e5a70] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.AIFunctionLibrary.MakeEnemiesFleeFromArea
	// int32_t MakeEnemiesFleeFromArea(class UObject* WorldContextObject, FVector& Center, float Radius, int32_t maxEnemiesAffected); // [0x17e5140] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.AIFunctionLibrary.MakeEnemiesBackOutOfArea
	// void MakeEnemiesBackOutOfArea(class UObject* WorldContextObject, FVector& Center, float Radius);                         // [0x17e5020] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.AIFunctionLibrary.IsEnemyAlertet
	// bool IsEnemyAlertet(class APawn* enemy);                                                                                 // [0x17e4f60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.AIFunctionLibrary.GetPlayerTarget
	// class APlayerCharacter* GetPlayerTarget(class AActor* from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, class AActor* ignoreTarget, bool IsFlying); // [0x17e4cb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.AIFunctionLibrary.GetAttackableTargetsInRange
	// bool GetAttackableTargetsInRange(class AActor* from, TArray<UAttackerPositioningComponent*>& outArray, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, class AActor* ignoreTarget, bool IsFlying); // [0x17e4a10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.AIFunctionLibrary.GetAttackableTarget
	// class UAttackerPositioningComponent* GetAttackableTarget(class AActor* from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, class AActor* ignoreTarget, bool IsFlying); // [0x17e47e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.AIFunctionLibrary.ConsiderChangingTarget_WithLineOfSight
	// class APlayerCharacter* ConsiderChangingTarget_WithLineOfSight(class APlayerCharacter* CurrentTarget, class AActor* from, float MaxDistance, FName TraceSocketName, bool MustBeAlive, bool MustBeUnparalyzed, bool CurrentTargetMustBeAlive, bool IsFlying); // [0x17e4550] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.AIFunctionLibrary.ConsiderChangingTarget
	// class APlayerCharacter* ConsiderChangingTarget(class APlayerCharacter* CurrentTarget, class AActor* from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool CurrentTargetMustBeAlive, bool IsFlying); // [0x17e4320] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.AIFunctionLibrary.AlertEnemy
	// void AlertEnemy(class APawn* enemy);                                                                                     // [0x17e3ff0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.AIFunctionLibrary.AlertEnemiesInRange
	// void AlertEnemiesInRange(class UObject* WorldContextObject, FVector Origin, float range, class APawn* alerter);          // [0x17e3e90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.AIPlayerControlComponent
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UAIPlayerControlComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FRotator)                                  AngularAcceleration                                         OFFSET(getStruct<T>, {0xB0, 12, 0, 0})
	SMember(FRotator)                                  AngularDampening                                            OFFSET(getStruct<T>, {0xBC, 12, 0, 0})
	SMember(FRotator)                                  MaxAngularVelocity                                          OFFSET(getStruct<T>, {0xC8, 12, 0, 0})
	SMember(FRotator)                                  MaxRotation                                                 OFFSET(getStruct<T>, {0xD4, 12, 0, 0})
	DMember(float)                                     SpeedTarget                                                 OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     SpeedMin                                                    OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     SpeedMax                                                    OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     AccelerationBase                                            OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     AccelerationMultiplier                                      OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     DecelerationMultiplier                                      OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     AccelerationOnSlopeMultiplier                               OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     DecelerationOnSlopeMultiplier                               OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     InitialConnectionBlendTime                                  OFFSET(get<float>, {0x100, 4, 0, 0})
	CMember(class UAnimMontage*)                       GetOnMontageAI                                              OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UAnimMontage*)                       GetOnMontagePlayer                                          OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UAnimMontage*)                       LetGoMontageAI                                              OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UAnimMontage*)                       LetGoMontagePlayer                                          OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   GetOnShout                                                  OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   LetGoShout                                                  OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UControlEnemyUsable*)                Usable                                                      OFFSET(get<T>, {0x138, 8, 0, 0})
};

/// Class /Script/FSD.AlignEnemyComponent
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UAlignEnemyComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      RotateWhileStationary                                       OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(bool)                                      IncludePitch                                                OFFSET(get<bool>, {0xB1, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.AlignEnemyComponent.SetRotateWhileStationary
	// void SetRotateWhileStationary(bool Value);                                                                               // [0x17e5af0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AlignEnemyComponent.OnRep_RotateWhileStationary
	// void OnRep_RotateWhileStationary();                                                                                      // [0x17e5520] Final|Native|Protected 
};

/// Struct /Script/FSD.EnemyGroupDescriptorItem
/// Size: 0x0008 (0x000000 - 0x000008)
class FEnemyGroupDescriptorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(class UEnemyDescriptor*)                   EnemyDescriptor                                             OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.IRandRange
/// Size: 0x0008 (0x000000 - 0x000008)
class FIRandRange : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   Min                                                         OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Max                                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.RandIntervalItem
/// Size: 0x000C (0x000000 - 0x00000C)
class FRandIntervalItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FIRandRange)                               range                                                       OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/FSD.RandInterval
/// Size: 0x0010 (0x000000 - 0x000010)
class FRandInterval : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FRandIntervalItem>)                 Intervals                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.EnemyGroupDescriptor
/// Size: 0x0028 (0x000030 - 0x000058)
class UEnemyGroupDescriptor : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FEnemyGroupDescriptorItem>)         Enemies                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      UseCustomDiversity                                          OFFSET(get<bool>, {0x40, 1, 0, 0})
	SMember(FRandInterval)                             Diversity                                                   OFFSET(getStruct<T>, {0x48, 16, 0, 0})
};

/// Class /Script/FSD.AmberEventEnemyPool
/// Size: 0x0018 (0x000058 - 0x000070)
class UAmberEventEnemyPool : public UEnemyGroupDescriptor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     MaxTimeBetweenSpawn                                         OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     MinTimeBetweenSpawn                                         OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(int32_t)                                   MaxEnemyCap                                                 OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   AmbersNeededdToComplete                                     OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	DMember(int32_t)                                   AmbersNeededOnePlayer                                       OFFSET(get<int32_t>, {0x68, 4, 0, 0})
};

/// Class /Script/FSD.GameEvent
/// Size: 0x0148 (0x000220 - 0x000368)
class AGameEvent : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	SMember(FMulticastInlineDelegate)                  EventTriggeredDelegate                                      OFFSET(getStruct<T>, {0x228, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  EventFinishedDelegate                                       OFFSET(getStruct<T>, {0x238, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  StageCompleteDelegate                                       OFFSET(getStruct<T>, {0x248, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ProgressChangedDelegate                                     OFFSET(getStruct<T>, {0x258, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProgressBarChanged                                        OFFSET(getStruct<T>, {0x268, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  TimeProgressChanged                                         OFFSET(getStruct<T>, {0x278, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  ObjectivesPerStageChanged                                   OFFSET(getStruct<T>, {0x288, 16, 0, 0})
	CMember(TArray<class AEventStarterButton*>)        StarterObjects                                              OFFSET(get<T>, {0x298, 16, 0, 0})
	DMember(bool)                                      bGameEventSetup                                             OFFSET(get<bool>, {0x2A8, 1, 0, 0})
	SMember(FText)                                     EventName                                                   OFFSET(getStruct<T>, {0x2B0, 24, 0, 0})
	SMember(FText)                                     ObjectiveText                                               OFFSET(getStruct<T>, {0x2C8, 24, 0, 0})
	SMember(FName)                                     AnalyticsName                                               OFFSET(getStruct<T>, {0x2E0, 8, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x2E8, 32, 0, 0})
	CMember(class UChildActorComponent*)               StartEventObject                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   EventTriggeredShout                                         OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   EventFinishedShout                                          OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   EventFailedShout                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     EventTriggeredShoutDelay                                    OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     EventFinishedShoutDelay                                     OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     StageProgress                                               OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     TimeLimit                                                   OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     DelayUITime                                                 OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(int32_t)                                   objectivesPerStage                                          OFFSET(get<int32_t>, {0x340, 4, 0, 0})
	DMember(bool)                                      EventStartersActive                                         OFFSET(get<bool>, {0x348, 1, 0, 0})
	DMember(bool)                                      StopScriptedWavesWhileActive                                OFFSET(get<bool>, {0x349, 1, 0, 0})
	DMember(bool)                                      StopNormalWavesWhileActive                                  OFFSET(get<bool>, {0x34A, 1, 0, 0})
	DMember(bool)                                      EventStarted                                                OFFSET(get<bool>, {0x34B, 1, 0, 0})
	DMember(bool)                                      FailedEvent                                                 OFFSET(get<bool>, {0x34C, 1, 0, 0})
	DMember(bool)                                      ShowRemainingTimeOnHUD                                      OFFSET(get<bool>, {0x34D, 1, 0, 0})
	DMember(bool)                                      ShowScoreStatusOnHUD                                        OFFSET(get<bool>, {0x34E, 1, 0, 0})
	DMember(bool)                                      ShowProgressBar                                             OFFSET(get<bool>, {0x34F, 1, 0, 0})
	DMember(float)                                     ProgressBarPct                                              OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(bool)                                      SkipEventStarters                                           OFFSET(get<bool>, {0x355, 1, 0, 0})
	CMember(TArray<class AActor*>)                     EventParticipants                                           OFFSET(get<T>, {0x358, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.GameEvent.TrySetupGameEvent
	// void TrySetupGameEvent();                                                                                                // [0x18cfee0] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.TriggerEvent
	// void TriggerEvent();                                                                                                     // [0x1816d70] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameEvent.StartShout
	// void StartShout();                                                                                                       // [0x18cfec0] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.StageObjectiveCompleted
	// void StageObjectiveCompleted();                                                                                          // [0x18cfea0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameEvent.SpawnEventPod
	// class ARessuplyPod* SpawnEventPod(class UClass* podClass, FVector& aSpawnLocation, int32_t Delay);                       // [0x18cfd80] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.GameEvent.SpawnEventActor
	// class AActor* SpawnEventActor(class UClass* eventActorClass, FTransform& aSpawnLocation);                                // [0x18cfc60] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.GameEvent.SetStageProgress
	// void SetStageProgress(float Progress);                                                                                   // [0x18cfaa0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameEvent.SetProgressBarPct
	// void SetProgressBarPct(float InPct);                                                                                     // [0x18cf990] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameEvent.SetObjectivesPerStage
	// void SetObjectivesPerStage(int32_t objectivesPerStage);                                                                  // [0x18cf900] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameEvent.RemoveParticipant
	// void RemoveParticipant(class AActor* participant);                                                                       // [0x18cf6c0] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.OnStarterObjectUsed
	// void OnStarterObjectUsed(class AEventStarterButton* eventStarter);                                                       // [0x18cf3c0] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.OnStageProgress
	// void OnStageProgress(float Progress);                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GameEvent.OnStageComplete
	// void OnStageComplete(int32_t Stage);                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GameEvent.OnRep_StageProgress
	// void OnRep_StageProgress();                                                                                              // [0x18cf3a0] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.OnRep_ObjectivesPerStage
	// void OnRep_ObjectivesPerStage();                                                                                         // [0x18cf300] Final|Native|Public  
	// Function /Script/FSD.GameEvent.OnRep_IsEventStartersActive
	// void OnRep_IsEventStartersActive();                                                                                      // [0x18cf2e0] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.OnRep_FailedEvent
	// void OnRep_FailedEvent();                                                                                                // [0x18cf2a0] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.OnRep_EventStarted
	// void OnRep_EventStarted();                                                                                               // [0x18cf280] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.OnRep_EventParticipants
	// void OnRep_EventParticipants();                                                                                          // [0x18cf260] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.OnEventTriggered
	// void OnEventTriggered();                                                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GameEvent.OnEventFinished
	// void OnEventFinished(bool eventSuccess);                                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GameEvent.OnEventBooted
	// void OnEventBooted();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GameEvent.IsEventCompleted
	// bool IsEventCompleted();                                                                                                 // [0x18cef90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.IsEventActive
	// bool IsEventActive();                                                                                                    // [0x18cef40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetStageProgress
	// float GetStageProgress();                                                                                                // [0x18cedb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetShowTimeOnHUD
	// bool GetShowTimeOnHUD();                                                                                                 // [0x18ced40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetShowScoreOnHUD
	// bool GetShowScoreOnHUD();                                                                                                // [0x18ced20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetShowProgressBar
	// bool GetShowProgressBar();                                                                                               // [0x18ced00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetObjectiveText
	// FText GetObjectiveText();                                                                                                // [0x18cec50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetObjectivesPerStage
	// int32_t GetObjectivesPerStage();                                                                                         // [0x18cec80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetEventName
	// FText GetEventName();                                                                                                    // [0x18cebf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetEventFailed
	// bool GetEventFailed();                                                                                                   // [0x18cebd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.GetDelayUITime
	// float GetDelayUITime();                                                                                                  // [0x189eb00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameEvent.EndShout
	// void EndShout();                                                                                                         // [0x18cea40] Final|Native|Protected 
	// Function /Script/FSD.GameEvent.DebreePositionPoint
	// FTransform DebreePositionPoint(class AProceduralSetup* Setup, FVector& fromLocation, float MinDistance, float desiredDistance, class UDebrisPositioning* DebrisPositioning, class UClass* terrainPlacement, float maxPathLength); // [0x18ce7d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.GameEvent.BootUpEvent
	// void BootUpEvent();                                                                                                      // [0x18ce6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameEvent.AddStageProgress
	// void AddStageProgress(float progressToAdd);                                                                              // [0x18ce610] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.AmberEvent
/// Size: 0x0058 (0x000368 - 0x0003C0)
class AAmberEvent : public AGameEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	CMember(class UDamageComponent*)                   EndExplosionDamage                                          OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(TArray<class UAmberEventEnemyPool*>)       EnemyPools                                                  OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(TArray<class AFSDPawn*>)                   spawnedEnemies                                              OFFSET(get<T>, {0x380, 16, 0, 0})
	CMember(TWeakObjectPtr<class UAmberEventEnemyPool*>) CurrentPool                                               OFFSET(get<T>, {0x398, 8, 0, 0})
	DMember(float)                                     InitialDelayBeforeSpawn                                     OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(float)                                     MaxSpawnRange                                               OFFSET(get<float>, {0x3A4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AmberEvent.OnSpawnedDeath
	// void OnSpawnedDeath(class UHealthComponentBase* spawnedHealthComponent);                                                 // [0x17e5680] Final|Native|Protected 
	// Function /Script/FSD.AmberEvent.OnEnemySpawned
	// void OnEnemySpawned(class APawn* Pawn);                                                                                  // [0x17e52a0] Final|Native|Protected 
};

/// Class /Script/FSD.AmmoCountWidget
/// Size: 0x0028 (0x000260 - 0x000288)
class UAmmoCountWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class AItem*)                              Item                                                        OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UItemAggregator*)                    Aggregator                                                  OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(bool)                                      ShowClipAndTotalAsOne                                       OFFSET(get<bool>, {0x278, 1, 0, 0})
	DMember(int32_t)                                   CountThreshold                                              OFFSET(get<int32_t>, {0x284, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AmmoCountWidget.OnVisibleChanged
	// void OnVisibleChanged(bool Visible, bool showClipCount);                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AmmoCountWidget.OnTotalVisibleChanged
	// void OnTotalVisibleChanged(bool Visible);                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AmmoCountWidget.OnTotalChanged
	// void OnTotalChanged(int32_t Total);                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AmmoCountWidget.OnItemTotalChanged
	// void OnItemTotalChanged(int32_t Value);                                                                                  // [0x17e5450] Final|Native|Protected 
	// Function /Script/FSD.AmmoCountWidget.OnItemEquipped
	// void OnItemEquipped(class AItem* NewItem);                                                                               // [0x17e53c0] Final|Native|Protected 
	// Function /Script/FSD.AmmoCountWidget.OnItemAmountChanged
	// void OnItemAmountChanged(int32_t Value);                                                                                 // [0x17e5330] Final|Native|Protected 
	// Function /Script/FSD.AmmoCountWidget.OnAmountChanged
	// void OnAmountChanged(int32_t Count);                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AmmoCountWidget.DoItemEquipped
	// void DoItemEquipped();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.CustomAmmoCountWidget
/// Size: 0x0008 (0x000260 - 0x000268)
class UCustomAmmoCountWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(TWeakObjectPtr<class AItem*>)              Item                                                        OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CustomAmmoCountWidget.ReceiveItemSet
	// void ReceiveItemSet();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Struct /Script/FSD.AudioWithCooldown
/// Size: 0x0010 (0x000000 - 0x000010)
class FAudioWithCooldown : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USoundCue*)                          Audio                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.Item
/// Size: 0x0160 (0x000220 - 0x000380)
class AItem : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	SMember(FMulticastInlineDelegate)                  OnItemAddedToInventory                                      OFFSET(getStruct<T>, {0x248, 16, 0, 0})
	SMember(FVector)                                   FPCameraOffset                                              OFFSET(getStruct<T>, {0x278, 12, 0, 0})
	SMember(FAudioWithCooldown)                        AudioFriendlyFire                                           OFFSET(getStruct<T>, {0x288, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEqipped                                                   OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUnEquipped                                                OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	DMember(bool)                                      EnableDangerousSaveGameIDEditing                            OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x2C4, 16, 0, 0})
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UUpgradableItemComponent*)           UpgradableItem                                              OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UClass*)                             CameraShake                                                 OFFSET(get<T>, {0x2F0, 8, 0, 0})
	DMember(bool)                                      CameraShakeOnStartUsing                                     OFFSET(get<bool>, {0x2F8, 1, 0, 0})
	DMember(bool)                                      CameraShakeOnEquip                                          OFFSET(get<bool>, {0x2F9, 1, 0, 0})
	CMember(class UCurveFloat*)                        HeatCurve                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	DMember(float)                                     ManualHeatPerUse                                            OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     HeatOnStartUse                                              OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(float)                                     CooldownRate                                                OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     ManualCooldownDelay                                         OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     UnjamDuration                                               OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     CurrentTemperature                                          OFFSET(get<float>, {0x328, 4, 0, 0})
	CMember(class USoundBase*)                         AudioTemperature                                            OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(float)                                     AudioTemperatureFadeout                                     OFFSET(get<float>, {0x338, 4, 0, 0})
	SMember(FName)                                     TemperatureFloatParam                                       OFFSET(getStruct<T>, {0x33C, 8, 0, 0})
	CMember(class UAudioComponent*)                    TemperatureAudioComponent                                   OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(bool)                                      overheated                                                  OFFSET(get<bool>, {0x350, 1, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutOverheated                                             OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(bool)                                      bAimAssistEnabled                                           OFFSET(get<bool>, {0x360, 1, 0, 0})
	DMember(float)                                     MovementRateWhileUsing                                      OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(bool)                                      CanPlayLedgeClimbWhileUsing                                 OFFSET(get<bool>, {0x368, 1, 0, 0})
	DMember(bool)                                      CanInspectItem                                              OFFSET(get<bool>, {0x369, 1, 0, 0})
	DMember(bool)                                      CanSprintWithItem                                           OFFSET(get<bool>, {0x36A, 1, 0, 0})
	DMember(bool)                                      CanBeUsed                                                   OFFSET(get<bool>, {0x36B, 1, 0, 0})
	CMember(class UClass*)                             CustomIconWidget                                            OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(float)                                     AdvancedVibrationSendLevel                                  OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(bool)                                      IsEquipped                                                  OFFSET(get<bool>, {0x37C, 1, 0, 0})
	DMember(bool)                                      isUsing                                                     OFFSET(get<bool>, {0x37D, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.Item.UpdateSkin
	// void UpdateSkin();                                                                                                       // [0x18fc450] Native|Public|BlueprintCallable 
	// Function /Script/FSD.Item.StopUsing
	// void StopUsing(bool Cancelled);                                                                                          // [0x18fc340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Item.SpawnSoundAttached
	// class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, float PriorityOverride, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration); // [0x18fbea0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.Item.SpawnSoundAtLocation
	// class UAudioComponent* SpawnSoundAtLocation(class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration); // [0x18fbb80] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.Item.SpawnSound2D
	// class UAudioComponent* SpawnSound2D(class USoundBase* Sound, float PriorityOverride, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool SendVibration); // [0x18fb8c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Item.Server_StartUsing
	// void Server_StartUsing(bool isUsing);                                                                                    // [0x1082a10] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.Item.Resupply
	// void Resupply(float percentage);                                                                                         // [0x18fb190] Native|Public|BlueprintCallable 
	// Function /Script/FSD.Item.RemovedFromInventory
	// void RemovedFromInventory(class ACharacter* oldCharacter);                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.RecieveUnequipped
	// void RecieveUnequipped();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.RecieveStopUsing
	// void RecieveStopUsing();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.RecieveStartUsing
	// void RecieveStartUsing();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.RecieveEquipped
	// void RecieveEquipped();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.RecieveCycledItem
	// void RecieveCycledItem();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.Recieve_UpdateMeshses
	// void Recieve_UpdateMeshses(bool IsFirstPerson);                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.ReceiveResupply
	// void ReceiveResupply(float percentage);                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.Receive_Overheated
	// void Receive_Overheated();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.Receive_GetTPAnimationEventMesh
	// class UStaticMeshComponent* Receive_GetTPAnimationEventMesh();                                                           // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
	// Function /Script/FSD.Item.Receive_GetFPAnimationEventMesh
	// class UFirstPersonStaticMeshComponent* Receive_GetFPAnimationEventMesh();                                                // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
	// Function /Script/FSD.Item.OnTemperatureChanged
	// void OnTemperatureChanged(float temperature, bool overheated);                                                           // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Item.OnSkinChanged
	// void OnSkinChanged(class USkinEffect* Skin);                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Item.OnRep_IsUsing
	// void OnRep_IsUsing(bool OldValue);                                                                                       // [0x18fae20] Native|Protected     
	// Function /Script/FSD.Item.OnOwnerDestroyed
	// void OnOwnerDestroyed(class AActor* owningActor);                                                                        // [0x18fac90] Final|Native|Protected 
	// Function /Script/FSD.Item.ItemAddedToInventory__DelegateSignature
	// void ItemAddedToInventory__DelegateSignature();                                                                          // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.Item.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x18fac30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.IsFirstPerson
	// bool IsFirstPerson();                                                                                                    // [0x18fac00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetWeaponViewClass
	// class UClass* GetWeaponViewClass();                                                                                      // [0x18fab60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetLoadoutAnimations
	// FItemLoadoutAnimations GetLoadoutAnimations();                                                                           // [0x18fa510] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetItemName
	// FText GetItemName();                                                                                                     // [0x18fa250] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetItemIconLine
	// class UTexture2D* GetItemIconLine();                                                                                     // [0x18fa0b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetItemIconBG
	// class UTexture2D* GetItemIconBG();                                                                                       // [0x18fa080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetItemDefaultObject
	// class AItem* GetItemDefaultObject(class UClass* itemClass);                                                              // [0x18f9ff0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Item.GetItemCategory
	// FText GetItemCategory();                                                                                                 // [0x18f9f50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetHeatingAudioSceneComponent
	// class USceneComponent* GetHeatingAudioSceneComponent();                                                                  // [0x18f9e90] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Item.GetCharacterAnimationSet
	// class UItemCharacterAnimationSet* GetCharacterAnimationSet();                                                            // [0x18f9e30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetAnalyticsItemName
	// FString GetAnalyticsItemName();                                                                                          // [0x18f9d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.GetAnalyticsItemCategory
	// FString GetAnalyticsItemCategory();                                                                                      // [0x18f9d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Item.AddedToInventory
	// void AddedToInventory(class APlayerCharacter* ItemOwner);                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.AnimatedItem
/// Size: 0x0060 (0x000380 - 0x0003E0)
class AAnimatedItem : public AItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(class USkinnableComponent*)                Skinnable                                                   OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UPlayerAnimInstance*)                FPAnimInstance                                              OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UPlayerAnimInstance*)                TPAnimInstance                                              OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             FPMesh                                                      OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             TPMesh                                                      OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_EquipAnimation                                           OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_IdleAnimation                                            OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_EquipAnimation                                           OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_IdleAnimation                                            OFFSET(get<T>, {0x3C0, 8, 0, 0})
	DMember(float)                                     EquipDuration                                               OFFSET(get<float>, {0x3C8, 4, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         CharacterAnimationSet                                       OFFSET(get<T>, {0x3D0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.AnimatedItem.OnReceiveEquippedFinished
	// void OnReceiveEquippedFinished();                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AnimatedItem.GetMuzzle
	// FTransform GetMuzzle();                                                                                                  // [0x17ea230] Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AnimatedItem.GetItemMesh
	// class USkeletalMeshComponent* GetItemMesh();                                                                             // [0x17ea200] Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.ItemAnimationItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FItemAnimationItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UAnimMontage*)                       FP_CharacterMontage                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_CharacterMontage                                         OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UAnimMontage*)                       ItemMontage                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FSD.TracerData
/// Size: 0x0030 (0x000000 - 0x000030)
class FTracerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UFXSystemAsset*)                     MainParticle                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     TrailParticle                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(class USoundCue*)                          WhizbySound                                                 OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(float)                                     WhizBySoundCooldown                                         OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     Offset                                                      OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     MinDistance                                                 OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FSD.RecoilSettings
/// Size: 0x0028 (0x000000 - 0x000028)
class FRecoilSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FRandRange)                                RecoilRoll                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FRandRange)                                RecoilPitch                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FRandRange)                                RecoilYaw                                                   OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      CanRecoilDown                                               OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     SpringStiffness                                             OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     CriticalDampening                                           OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     Mass                                                        OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Class /Script/FSD.AmmoDrivenWeapon
/// Size: 0x03A0 (0x0003E0 - 0x000780)
class AAmmoDrivenWeapon : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1920;

public:
	SMember(FMulticastInlineDelegate)                  OnClipCountChanged                                          OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTryReloadEvent                                            OFFSET(getStruct<T>, {0x410, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReloadingEvent                                            OFFSET(getStruct<T>, {0x420, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShotFiredEvent                                            OFFSET(getStruct<T>, {0x430, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStoppedUsingEvent                                         OFFSET(getStruct<T>, {0x440, 16, 0, 0})
	CMember(class UWeaponFireComponent*)               WeaponFire                                                  OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UAmmoDriveWeaponAggregator*)         Aggregator                                                  OFFSET(get<T>, {0x468, 8, 0, 0})
	DMember(bool)                                      LoopFireAnimation                                           OFFSET(get<bool>, {0x470, 1, 0, 0})
	DMember(float)                                     LoopFireAnimationBlendoutTime                               OFFSET(get<float>, {0x474, 4, 0, 0})
	CMember(class UAnimMontage*)                       FP_FireAnimation                                            OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_FireAnimation                                            OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_ReloadAnimation                                          OFFSET(get<T>, {0x4A0, 8, 0, 0})
	SMember(FItemAnimationItem)                        OverheatAnimation                                           OFFSET(getStruct<T>, {0x4A8, 24, 0, 0})
	CMember(TArray<FItemAnimationItem>)                GunslingAnimations                                          OFFSET(get<T>, {0x4C0, 16, 0, 0})
	CMember(class UAnimMontage*)                       TP_ReloadAnimation                                          OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Fire                                                    OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_FireLastBullet                                          OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Reload                                                  OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Reload_TP                                               OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     MuzzleParticles                                             OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     TPMuzzleParticles                                           OFFSET(get<T>, {0x500, 8, 0, 0})
	DMember(bool)                                      UseTriggeredMuzzleParticles                                 OFFSET(get<bool>, {0x508, 1, 0, 0})
	SMember(FTracerData)                               Tracer                                                      OFFSET(getStruct<T>, {0x518, 48, 0, 0})
	CMember(class UFXSystemAsset*)                     CasingParticles                                             OFFSET(get<T>, {0x548, 8, 0, 0})
	DMember(bool)                                      UseTriggeredCasingParticleSystem                            OFFSET(get<bool>, {0x550, 1, 0, 0})
	CMember(class ULightComponent*)                    MuzzleFlashLight                                            OFFSET(get<T>, {0x560, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        MuzzleFlashLightCurve                                       OFFSET(getStruct<T>, {0x568, 136, 0, 0})
	CMember(class USoundCue*)                          FireSound                                                   OFFSET(get<T>, {0x5F8, 8, 0, 0})
	CMember(class USoundCue*)                          RicochetSound                                               OFFSET(get<T>, {0x600, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     RicochetParticle                                            OFFSET(get<T>, {0x608, 8, 0, 0})
	DMember(float)                                     FireSoundDelayToTail                                        OFFSET(get<float>, {0x610, 4, 0, 0})
	CMember(class USoundCue*)                          FireSoundTail                                               OFFSET(get<T>, {0x620, 8, 0, 0})
	DMember(bool)                                      IsFireSoundTail2D                                           OFFSET(get<bool>, {0x628, 1, 0, 0})
	CMember(class UForceFeedbackEffect*)               FireForceFeedbackEffect                                     OFFSET(get<T>, {0x630, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAudioComponent*>)    FireSoundInstance                                           OFFSET(get<T>, {0x638, 8, 0, 0})
	DMember(float)                                     FireSoundFadeDuration                                       OFFSET(get<float>, {0x640, 4, 0, 0})
	CMember(class USoundCue*)                          ReloadSound                                                 OFFSET(get<T>, {0x648, 8, 0, 0})
	DMember(int32_t)                                   BulletsRemainingForNearEmptySound                           OFFSET(get<int32_t>, {0x650, 4, 0, 0})
	DMember(bool)                                      PlayEmptySoundsIn3D                                         OFFSET(get<bool>, {0x654, 1, 0, 0})
	CMember(class USoundCue*)                          NearEmptySound                                              OFFSET(get<T>, {0x658, 8, 0, 0})
	CMember(class USoundCue*)                          WeaponEmptySound                                            OFFSET(get<T>, {0x660, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutShotFired                                              OFFSET(get<T>, {0x668, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutOutOfAmmo                                              OFFSET(get<T>, {0x670, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutReloading                                              OFFSET(get<T>, {0x678, 8, 0, 0})
	DMember(int32_t)                                   MaxAmmo                                                     OFFSET(get<int32_t>, {0x680, 4, 0, 0})
	DMember(int32_t)                                   ClipSize                                                    OFFSET(get<int32_t>, {0x684, 4, 0, 0})
	DMember(int32_t)                                   ShotCost                                                    OFFSET(get<int32_t>, {0x688, 4, 0, 0})
	DMember(float)                                     RateOfFire                                                  OFFSET(get<float>, {0x68C, 4, 0, 0})
	DMember(int32_t)                                   BurstCount                                                  OFFSET(get<int32_t>, {0x690, 4, 0, 0})
	DMember(float)                                     BurstCycleTime                                              OFFSET(get<float>, {0x694, 4, 0, 0})
	DMember(float)                                     ReloadDuration                                              OFFSET(get<float>, {0x698, 4, 0, 0})
	DMember(int32_t)                                   AmmoCount                                                   OFFSET(get<int32_t>, {0x69C, 4, 0, 0})
	DMember(int32_t)                                   ClipCount                                                   OFFSET(get<int32_t>, {0x6A0, 4, 0, 0})
	DMember(int32_t)                                   ManualHeatReductionAmmo                                     OFFSET(get<int32_t>, {0x6A4, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnManualHeatReductionAmmoChanged                            OFFSET(getStruct<T>, {0x6A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnManualHeatReductionTriggered                              OFFSET(getStruct<T>, {0x6B8, 16, 0, 0})
	DMember(float)                                     FireInputBufferTime                                         OFFSET(get<float>, {0x6C8, 4, 0, 0})
	DMember(float)                                     AutoReloadDuration                                          OFFSET(get<float>, {0x6D0, 4, 0, 0})
	CMember(class USoundCue*)                          AutoReloadCompleteCue                                       OFFSET(get<T>, {0x6D8, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemAutoReloaded                                          OFFSET(getStruct<T>, {0x6E0, 16, 0, 0})
	DMember(float)                                     SupplyStatusWeight                                          OFFSET(get<float>, {0x6F4, 4, 0, 0})
	DMember(float)                                     CycleTimeLeft                                               OFFSET(get<float>, {0x6F8, 4, 0, 0})
	DMember(bool)                                      UseCustomReloadDelay                                        OFFSET(get<bool>, {0x6FC, 1, 0, 0})
	DMember(float)                                     CustomReloadDelay                                           OFFSET(get<float>, {0x700, 4, 0, 0})
	DMember(float)                                     ReloadTimeLeft                                              OFFSET(get<float>, {0x70C, 4, 0, 0})
	DMember(bool)                                      AutomaticReload                                             OFFSET(get<bool>, {0x710, 1, 0, 0})
	DMember(bool)                                      CanReload                                                   OFFSET(get<bool>, {0x711, 1, 0, 0})
	DMember(float)                                     HoldToFirePercentOfFireRatePenalty                          OFFSET(get<float>, {0x714, 4, 0, 0})
	SMember(FRecoilSettings)                           RecoilSettings                                              OFFSET(getStruct<T>, {0x71C, 40, 0, 0})
	DMember(bool)                                      ApplyRecoilAtEndOfBurst                                     OFFSET(get<bool>, {0x744, 1, 0, 0})
	DMember(float)                                     EndOfBurstRecoilMultiplier                                  OFFSET(get<float>, {0x748, 4, 0, 0})
	DMember(bool)                                      HasAutomaticFire                                            OFFSET(get<bool>, {0x74C, 1, 0, 0})
	DMember(bool)                                      IsFiring                                                    OFFSET(get<bool>, {0x74D, 1, 0, 0})
	DMember(bool)                                      EjectCasingOnFire                                           OFFSET(get<bool>, {0x74E, 1, 0, 0})
	DMember(bool)                                      ManualHeatReductionOnReload                                 OFFSET(get<bool>, {0x750, 1, 0, 0})
	DMember(int32_t)                                   MaxManualHeatReductionCharges                               OFFSET(get<int32_t>, {0x754, 4, 0, 0})
	DMember(float)                                     ManualHeatReductionValue                                    OFFSET(get<float>, {0x758, 4, 0, 0})
	CMember(EAmmoWeaponState)                          WeaponState                                                 OFFSET(get<T>, {0x776, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.AmmoDrivenWeapon.Upgraded_Blueprint_Implementation
	// void Upgraded_Blueprint_Implementation(TArray<UItemUpgrade*>& Upgrades);                                                 // [0x1d6f900] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.AmmoDrivenWeapon.UpdateHoldToFire
	// void UpdateHoldToFire();                                                                                                 // [0x17e5b80] Final|Native|Protected 
	// Function /Script/FSD.AmmoDrivenWeapon.Server_StopReload
	// void Server_StopReload(float BlendOutTime);                                                                              // [0x17e59e0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.AmmoDrivenWeapon.Server_ReloadWeapon
	// void Server_ReloadWeapon(float CurrentReloadDuration);                                                                   // [0x17e5950] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.AmmoDrivenWeapon.Server_PlayBurstFire
	// void Server_PlayBurstFire(char shotCount);                                                                               // [0x17e58d0] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.AmmoDrivenWeapon.Server_Gunsling
	// void Server_Gunsling(char Index);                                                                                        // [0x17e5850] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.AmmoDrivenWeapon.ResupplyAmmo
	// void ResupplyAmmo(int32_t amount);                                                                                       // [0x17e57c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AmmoDrivenWeapon.RecieveFiredWeapon
	// void RecieveFiredWeapon();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AmmoDrivenWeapon.Receive_ReloadEnd
	// void Receive_ReloadEnd();                                                                                                // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.AmmoDrivenWeapon.Receive_ReloadBegin
	// void Receive_ReloadBegin();                                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.AmmoDrivenWeapon.Receive_IsFiringChanged
	// void Receive_IsFiringChanged(bool NewValue);                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AmmoDrivenWeapon.OnWeaponFireEnded
	// void OnWeaponFireEnded();                                                                                                // [0x17e5710] Final|Native|Protected 
	// Function /Script/FSD.AmmoDrivenWeapon.OnWeaponFired
	// void OnWeaponFired(FVector& Location);                                                                                   // [0x17e5730] Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.AmmoDrivenWeapon.OnRicochet
	// void OnRicochet(FVector& Origin, FVector& Location, FVector& Normal);                                                    // [0x17e5540] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.AmmoDrivenWeapon.OnRep_ManualHeatReductionAmmo
	// void OnRep_ManualHeatReductionAmmo();                                                                                    // [0x17e5500] Final|Native|Protected|Const 
	// Function /Script/FSD.AmmoDrivenWeapon.OnRep_IsFiring
	// void OnRep_IsFiring();                                                                                                   // [0x17e54e0] Final|Native|Protected 
	// Function /Script/FSD.AmmoDrivenWeapon.ManualHeatReductionTriggeredDelegate__DelegateSignature
	// void ManualHeatReductionTriggeredDelegate__DelegateSignature();                                                          // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.AmmoDrivenWeapon.ManualHeatReductionDelegate__DelegateSignature
	// void ManualHeatReductionDelegate__DelegateSignature();                                                                   // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.AmmoDrivenWeapon.IsClipFull
	// bool IsClipFull();                                                                                                       // [0x17e4f00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AmmoDrivenWeapon.InstantlyReload
	// void InstantlyReload();                                                                                                  // [0x17e4ee0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.AmmoDrivenWeapon.EjectCasing
	// void EjectCasing();                                                                                                      // [0x17e47c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.AmmoDrivenWeapon.CustomEvent1
	// void CustomEvent1(class UItemUpgrade* Event);                                                                            // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.AmmoDrivenWeapon.Client_RefillAmmo
	// void Client_RefillAmmo(float percentage);                                                                                // [0x17e4290] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.AmmoDrivenWeapon.All_StopReload
	// void All_StopReload(float BlendOutTime);                                                                                 // [0x17e4200] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.AmmoDrivenWeapon.All_StartReload
	// void All_StartReload(float CurrentReloadDuration);                                                                       // [0x17e4170] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.AmmoDrivenWeapon.All_PlayBurstFire
	// void All_PlayBurstFire(char shotCount);                                                                                  // [0x17e40f0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.AmmoDrivenWeapon.All_Gunsling
	// void All_Gunsling(char Index);                                                                                           // [0x17e4070] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.ItemAggregator
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UItemAggregator : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FText)                                     CounterText                                                 OFFSET(getStruct<T>, {0xB0, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemAggregator.UnbindAllEvents
	// void UnbindAllEvents();                                                                                                  // [0x18544e0] Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ClipBasedItemAggregator
/// Size: 0x0078 (0x0000C8 - 0x000140)
class UClipBasedItemAggregator : public UItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FMulticastInlineDelegate)                  OnClipAmountChanged                                         OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTotalAmountChanged                                        OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnClipAndTotalChanged                                       OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReloadTimeChanged                                         OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReloadComplete                                            OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReloadStarted                                             OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMaxAmmoCapacityChanged                                    OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	DMember(bool)                                      ShowTotalAmount                                             OFFSET(get<bool>, {0x138, 1, 0, 0})
	DMember(bool)                                      ShowClipAndTotalAsOne                                       OFFSET(get<bool>, {0x139, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ClipBasedItemAggregator.ReloadStarted
	// void ReloadStarted();                                                                                                    // [0x1805da0] Final|Native|Public  
	// Function /Script/FSD.ClipBasedItemAggregator.ReloadComplete
	// void ReloadComplete();                                                                                                   // [0x1805d70] Final|Native|Public  
	// Function /Script/FSD.ClipBasedItemAggregator.GetTotalAmount
	// int32_t GetTotalAmount();                                                                                                // [0x1804fc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ClipBasedItemAggregator.GetClipAmount
	// int32_t GetClipAmount();                                                                                                 // [0x1804ec0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.AmmoDriveWeaponAggregator
/// Size: 0x0008 (0x000140 - 0x000148)
class UAmmoDriveWeaponAggregator : public UClipBasedItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(class AAmmoDrivenWeapon*)                  Weapon                                                      OFFSET(get<T>, {0x140, 8, 0, 0})
};

/// Class /Script/FSD.AmmoDrivenWeaponAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UAmmoDrivenWeaponAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(class AAmmoDrivenWeapon*)                  Weapon                                                      OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(bool)                                      IsFiring                                                    OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(float)                                     ClipFullPercentage                                          OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(bool)                                      overheated                                                  OFFSET(get<bool>, {0x2C8, 1, 0, 0})
	DMember(float)                                     temperature                                                 OFFSET(get<float>, {0x2CC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AmmoDrivenWeaponAnimInstance.IsFull
	// bool IsFull();                                                                                                           // [0x17e4ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AmmoDrivenWeaponAnimInstance.isEmpty
	// bool isEmpty();                                                                                                          // [0x17e4f30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PlatformGunAnimInstance
/// Size: 0x0010 (0x0002D0 - 0x0002E0)
class UPlatformGunAnimInstance : public UAmmoDrivenWeaponAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	DMember(float)                                     SpinRate                                                    OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     NormalSpinRate                                              OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     LerpSpeed                                                   OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     FiredSpinRate                                               OFFSET(get<float>, {0x2DC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PlatformGunAnimInstance.WeaponFired
	// void WeaponFired();                                                                                                      // [0x17e5ba0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.AnchorTurner
/// Size: 0x00A0 (0x000220 - 0x0002C0)
class AAnchorTurner : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USphereComponent*)                   PushCollider1                                               OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class USphereComponent*)                   PushCollider2                                               OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class USphereComponent*)                   PushCollider3                                               OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class USphereComponent*)                   PushCollider4                                               OFFSET(get<T>, {0x248, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSpunUp                                                    OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	SMember(FVector)                                   AttatchmentOffset                                           OFFSET(getStruct<T>, {0x280, 12, 0, 0})
	CMember(TArray<FName>)                             AttachmentPoints                                            OFFSET(get<T>, {0x290, 16, 0, 0})
	DMember(float)                                     PerPlayerMultiplier                                         OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     TurnSpeed                                                   OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     Progress                                                    OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     MaxProgress                                                 OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(bool)                                      Finished                                                    OFFSET(get<bool>, {0x2B4, 1, 0, 0})
	DMember(float)                                     DecaySpeed                                                  OFFSET(get<float>, {0x2B8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AnchorTurner.OnRep_Finished
	// void OnRep_Finished();                                                                                                   // [0x17ea830] Final|Native|Protected 
	// Function /Script/FSD.AnchorTurner.OnLeftPushpoint
	// void OnLeftPushpoint(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x17ea520] Final|Native|Public  
	// Function /Script/FSD.AnchorTurner.OnEnteredPushpoint
	// void OnEnteredPushpoint(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x17ea300] Final|Native|Public|HasOutParms 
	// Function /Script/FSD.AnchorTurner.GeneratorSpunUp
	// void GeneratorSpunUp();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.AnchorTurnerAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UAnchorTurnerAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(float)                                     ModuleRotation                                              OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     Percent                                                     OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     TurnSpeed                                                   OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(bool)                                      IsFinished                                                  OFFSET(get<bool>, {0x2C4, 1, 0, 0})
};

/// Class /Script/FSD.ItemAquisitionBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UItemAquisitionBase : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.StoreBoughtAquisition
/// Size: 0x0060 (0x000030 - 0x000090)
class UStoreBoughtAquisition : public UItemAquisitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(int32_t)                                   CreditsCost                                                 OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TMap<class UResourceData*, float>)         ResourceCost                                                OFFSET(get<T>, {0x38, 80, 0, 0})
	DMember(int32_t)                                   RequiredPlayerRank                                          OFFSET(get<int32_t>, {0x88, 4, 0, 0})
};

/// Class /Script/FSD.DLCAquisition
/// Size: 0x0008 (0x000030 - 0x000038)
class UDLCAquisition : public UItemAquisitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UDLCBase*)                           RequiredDLC                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.UnlockedAquisition
/// Size: 0x0000 (0x000030 - 0x000030)
class UUnlockedAquisition : public UItemAquisitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.SchematicAquisition
/// Size: 0x0020 (0x000030 - 0x000050)
class USchematicAquisition : public UItemAquisitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class USchematicPricingTier*)              PricingTier                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class USchematicRarity*)                   Rarity                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<class USchematic*>)                 Schematics                                                  OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FSD.TreassureAquisition
/// Size: 0x0008 (0x000030 - 0x000038)
class UTreassureAquisition : public UItemAquisitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UItemAquisitionSource*)              Source                                                      OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FSD.ArmorDamageEffects
/// Size: 0x0030 (0x000000 - 0x000030)
class FArmorDamageEffects : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<class UFXSystemAsset*>)             ArmorBreakParticles                                         OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UFXSystemAsset*>)             DissolveParticles                                           OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<class UFXSystemAsset*>)             BeamParticles                                               OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Class /Script/FSD.BaseArmorDamageComponent
/// Size: 0x0060 (0x0000B0 - 0x000110)
class UBaseArmorDamageComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	DMember(bool)                                      ArmorDamageEnabled                                          OFFSET(get<bool>, {0xB0, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnArmorShatteredEvent                                       OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FArmorDamageEffects)                       ArmorBreakEffects                                           OFFSET(getStruct<T>, {0xC8, 48, 0, 0})
	CMember(TArray<class UFSDPhysicalMaterial*>)       ArmorPhysMats                                               OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x108, 8, 0, 0})
};

/// Struct /Script/FSD.DestructableBodypartItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FDestructableBodypartItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(char)                                      MaterialIndex                                               OFFSET(get<char>, {0x0, 1, 0, 0})
	CMember(TArray<FName>)                             ArmorBones                                                  OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.ArmorDamageInfo
/// Size: 0x0008 (0x000000 - 0x000008)
class FArmorDamageInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   ArmorIndexMask                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(EArmorDamageType)                          BreakType                                                   OFFSET(get<T>, {0x4, 1, 0, 0})
};

/// Class /Script/FSD.SimpleArmorDamageComponent
/// Size: 0x0090 (0x000110 - 0x0001A0)
class USimpleArmorDamageComponent : public UBaseArmorDamageComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	SMember(FMulticastInlineDelegate)                  OnRadialArmorPartsDestroyedEvent                            OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	DMember(float)                                     ArmorStrength                                               OFFSET(get<float>, {0x120, 4, 0, 0})
	CMember(TMap<FName, FDestructableBodypartItem>)    PhysBoneToArmor                                             OFFSET(get<T>, {0x128, 80, 0, 0})
	SMember(FArmorDamageInfo)                          ArmorDamageInfo                                             OFFSET(getStruct<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SimpleArmorDamageComponent.OnRep_ArmorDamageInfo
	// void OnRep_ArmorDamageInfo(FArmorDamageInfo OldArmorDamageInfo);                                                         // [0x17ea7a0] Final|Native|Protected 
};

/// Struct /Script/FSD.ArmorHealthSubItem
/// Size: 0x0028 (0x000000 - 0x000028)
class FArmorHealthSubItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     Health                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	CMember(TArray<FName>)                             AdditionalBones                                             OFFSET(get<T>, {0x10, 16, 0, 0})
	SMember(FName)                                     OptionalFXSocket                                            OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FSD.ArmorHealthItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FArmorHealthItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(char)                                      MaterialIndex                                               OFFSET(get<char>, {0x0, 1, 0, 0})
	DMember(bool)                                      HealthIsBreakPercentage                                     OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      OverrideAffectedByAmorBreak                                 OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      NewAffectedByArmorBreak                                     OFFSET(get<bool>, {0x3, 1, 0, 0})
	DMember(bool)                                      OverrideArmorDamageEnabled                                  OFFSET(get<bool>, {0x4, 1, 0, 0})
	CMember(TArray<FArmorHealthSubItem>)               ArmorBones                                                  OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Class /Script/FSD.ArmorHealthDamageComponent
/// Size: 0x00A0 (0x000110 - 0x0001B0)
class UArmorHealthDamageComponent : public UBaseArmorDamageComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FMulticastInlineDelegate)                  OnArmorPartDestroyedEvent                                   OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnArmorPartDamagedEvent                                     OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSocketPartDestroyedEvent                                  OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSocketPartDamagedEvent                                    OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	CMember(TMap<FName, FArmorHealthItem>)             PhysBoneToArmor                                             OFFSET(get<T>, {0x150, 80, 0, 0})
	SMember(FArmorDamageInfo)                          ArmorDamageInfo                                             OFFSET(getStruct<T>, {0x1A0, 8, 0, 0})
	DMember(float)                                     RadialSocketDamageMultiplier                                OFFSET(get<float>, {0x1A8, 4, 0, 0})
	DMember(bool)                                      AffectedByAmorBreak                                         OFFSET(get<bool>, {0x1AC, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ArmorHealthDamageComponent.SetHealthOnBodypartItem
	// bool SetHealthOnBodypartItem(FName BoneName, float newHealth);                                                           // [0x17eaec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ArmorHealthDamageComponent.SetHealthOnAllItems
	// void SetHealthOnAllItems(float newHealth);                                                                               // [0x17eae40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ArmorHealthDamageComponent.SetArmorDamageEnabledOnItem
	// bool SetArmorDamageEnabledOnItem(FName BoneName, bool Enabled);                                                          // [0x17eace0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ArmorHealthDamageComponent.RegrowAllArmor
	// void RegrowAllArmor(float baseHealth);                                                                                   // [0x17eac40] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ArmorHealthDamageComponent.PopAllWeakPoints
	// void PopAllWeakPoints();                                                                                                 // [0x17ea850] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ArmorHealthDamageComponent.OnRep_ArmorDamageInfo
	// void OnRep_ArmorDamageInfo(FArmorDamageInfo OldValue);                                                                   // [0x17ea680] Final|Native|Protected 
	// Function /Script/FSD.ArmorHealthDamageComponent.DealSocketArmorDamage
	// void DealSocketArmorDamage(float Damage, float armorDamageMultiplier, class UPrimitiveComponent* collider, bool shatter, EArmorDamageType DamageType); // [0x17e9fc0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.CompositeArmorItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FCompositeArmorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UPrimitiveComponent*)                Component                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Health                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      OverrideAffectedByArmorBreak                                OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      MyAffectedByAmorBreak                                       OFFSET(get<bool>, {0xD, 1, 0, 0})
};

/// Class /Script/FSD.CompositeArmorComponent
/// Size: 0x0048 (0x000110 - 0x000158)
class UCompositeArmorComponent : public UBaseArmorDamageComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FMulticastInlineDelegate)                  OnArmorPartDestroyedEvent                                   OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnArmorPartDamagedEvent                                     OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	CMember(class UFXSystemAsset*)                     BreakParticle                                               OFFSET(get<T>, {0x130, 8, 0, 0})
	DMember(bool)                                      AffectedByAmorBreak                                         OFFSET(get<bool>, {0x138, 1, 0, 0})
	CMember(TArray<FCompositeArmorItem>)               ArmorItems                                                  OFFSET(get<T>, {0x140, 16, 0, 0})
	SMember(FArmorDamageInfo)                          ArmorDamageInfo                                             OFFSET(getStruct<T>, {0x150, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CompositeArmorComponent.OnRep_ArmorDamageInfo
	// void OnRep_ArmorDamageInfo(FArmorDamageInfo OldValue);                                                                   // [0x17ea710] Final|Native|Protected 
	// Function /Script/FSD.CompositeArmorComponent.AddArmorPart
	// void AddArmorPart(class UPrimitiveComponent* Primitive, float Health, bool overrideAffectedByArmomrBreak, bool NewAffectedByArmorBreak); // [0x17e91f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.SavablePrimaryDataAsset
/// Size: 0x0030 (0x000030 - 0x000060)
class USavablePrimaryDataAsset : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   BuildRestrictions                                           OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   PlatformRestrictions                                        OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(bool)                                      EnableDangerousSaveGameIDEditing                            OFFSET(get<bool>, {0x40, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x44, 16, 0, 0})
	CMember(class UBuildRestriction*)                  BuildRestriction                                            OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.VanityItem
/// Size: 0x00D0 (0x000060 - 0x000130)
class UVanityItem : public USavablePrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FText)                                     ItemName                                                    OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	SMember(FText)                                     ItemDescription                                             OFFSET(getStruct<T>, {0x90, 24, 0, 0})
	SMember(FString)                                   NotesInternal                                               OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	CMember(class UItemAquisitionBase*)                Aquisition                                                  OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UVanityEventSourceDataAsset*)        EventSourceAsset                                            OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UIconGenerationCameraKey*)           IconGenerationCameraKey                                     OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UTagVanitySeasonalEvent*)            SeasonalEventTag                                            OFFSET(get<T>, {0xD0, 8, 0, 0})
	DMember(bool)                                      bIsFestiveItem                                              OFFSET(get<bool>, {0xD8, 1, 0, 0})
	DMember(bool)                                      bIsSeriousItem                                              OFFSET(get<bool>, {0xD9, 1, 0, 0})
	CMember(TSet<UPlayerCharacterID*>)                 RestrictToCharacters                                        OFFSET(get<T>, {0xE0, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.VanityItem.RemoveFromOwned
	// bool RemoveFromOwned(class UObject* WorldContext);                                                                       // [0x19f1190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.VanityItem.PreviewItem
	// void PreviewItem(class AFSDPlayerState* PlayerState, bool Show);                                                         // [0x19f0e60] Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.VanityItem.IsOwned
	// bool IsOwned(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                                  // [0x19f0b70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.IsEquipped
	// bool IsEquipped(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                               // [0x19f0aa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.HasEventSource
	// bool HasEventSource();                                                                                                   // [0x184f300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GiftItem
	// void GiftItem(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                                 // [0x19f09d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.VanityItem.GetVanityTags
	// FDetailedTagSet GetVanityTags();                                                                                         // [0x19f0900] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetVanitySlot
	// EVanitySlot GetVanitySlot();                                                                                             // [0x1153030] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetRestrictedCharacters
	// TSet<UPlayerCharacterID*> GetRestrictedCharacters();                                                                     // [0x19f07e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetResourceCost
	// TArray<FCraftingCost> GetResourceCost();                                                                                 // [0x19f0760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetRequiredPlayerRank
	// int32_t GetRequiredPlayerRank();                                                                                         // [0x19f0730] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetIsUnLockedFromStart
	// bool GetIsUnLockedFromStart();                                                                                           // [0x19f06c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetIcon
	// class UTexture* GetIcon();                                                                                               // [0x19f0690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetFashioniteCost
	// FCraftingCost GetFashioniteCost();                                                                                       // [0x19f0650] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetEventSource
	// FVanityEventSource GetEventSource();                                                                                     // [0x19f05b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetCraftingCreditsCost
	// int32_t GetCraftingCreditsCost();                                                                                        // [0x19f0580] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetCraftableName
	// FText GetCraftableName();                                                                                                // [0x19f0540] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.GetCraftableDescription
	// FText GetCraftableDescription();                                                                                         // [0x19f0500] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.CraftItemWithFashionite
	// void CraftItemWithFashionite(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                  // [0x19f0410] Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.VanityItem.CraftItem
	// void CraftItem(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                                // [0x19f0340] Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.VanityItem.ChangeToItem
	// void ChangeToItem(class UCharacterVanityComponent* Gear);                                                                // [0x19f0150] Native|Protected|Const 
	// Function /Script/FSD.VanityItem.CanCraftWithFashionite
	// bool CanCraftWithFashionite(class UObject* WorldContextObject);                                                          // [0x19f00b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.CanCraft
	// bool CanCraft(class UObject* WorldContextObject);                                                                        // [0x19f0010] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanityItem.ApplyItemPermanently
	// void ApplyItemPermanently(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                     // [0x19eff40] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.VanityItem.ApplyItem
	// void ApplyItem(class APlayerCharacter* Player, bool isPermanent);                                                        // [0x19efe70] Final|Native|Public|BlueprintCallable|Const 
};

/// Class /Script/FSD.ArmorMaterialVanityItem
/// Size: 0x0070 (0x000130 - 0x0001A0)
class UArmorMaterialVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TWeakObjectPtr<class UMaterialInterface*>) Material                                                    OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UDynamicIcon*)                       DynamicIcon                                                 OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UArmorVanityItem*)                   LockedToArmor                                               OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(TArray<class UArmorVanityItem*>)           BannedArmors                                                OFFSET(get<T>, {0x168, 16, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInstance*>)  ClothMaterial                                               OFFSET(get<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ArmorMaterialVanityItem.SetArmorMaterialToTwoSided
	// class UMaterialInstanceConstant* SetArmorMaterialToTwoSided(class UMaterialInstance* Parent);                            // [0x17eadb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ArmorMaterialVanityItem.CreateIcon
	// class UMaterialInstanceDynamic* CreateIcon(class UObject* Owner);                                                        // [0x17e9f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ArmorMaterialVanityItem.CreateClothMaterialForAmorVanity
	// void CreateClothMaterialForAmorVanity(class UArmorMaterialVanityItem* armorVanity);                                      // [0x17e9ea0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.ArmorPiece
/// Size: 0x0088 (0x000220 - 0x0002A8)
class AArmorPiece : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(class UUpgradableGearComponent*)           Upgradable                                                  OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TMap<class UPawnStat*, float>)             StatModifiers                                               OFFSET(get<T>, {0x240, 80, 0, 0})
	CMember(class UClass*)                             LoadoutProxy                                                OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UClass*)                             WeaponPreviewClass                                          OFFSET(get<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ArmorPiece.GetWeaponViewClass
	// class UClass* GetWeaponViewClass();                                                                                      // [0x17ea290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ArmorPiece.GetArmorPieceDefaultObject
	// class AArmorPiece* GetArmorPieceDefaultObject(class UClass* armorPieceClass);                                            // [0x17ea170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.TattooArmorItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FTattooArmorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UVanityTattoo*)                      Tattoo                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      IsLeftArm                                                   OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      FlipTexture                                                 OFFSET(get<bool>, {0x9, 1, 0, 0})
};

/// Class /Script/FSD.ArmorVanityItem
/// Size: 0x0120 (0x000130 - 0x000250)
class UArmorVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(TMap<EArmorMeshType, TWeakObjectPtr<USkeletalMesh*>>) TPArmorMesh                                      OFFSET(get<T>, {0x130, 80, 0, 0})
	CMember(TMap<EArmorMeshType, TWeakObjectPtr<USkeletalMesh*>>) FPArmorMesh                                      OFFSET(get<T>, {0x180, 80, 0, 0})
	DMember(bool)                                      AllowSleevelessUse                                          OFFSET(get<bool>, {0x1D0, 1, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AnimInstance                                                OFFSET(get<T>, {0x1D8, 40, 0, 0})
	DMember(bool)                                      CropBeard                                                   OFFSET(get<bool>, {0x200, 1, 0, 0})
	DMember(float)                                     ArmorThickness                                              OFFSET(get<float>, {0x204, 4, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) MaterialOverride                                            OFFSET(get<T>, {0x208, 8, 0, 0})
	DMember(bool)                                      CanOnlyUseDefaultArmorMaterial                              OFFSET(get<bool>, {0x230, 1, 0, 0})
	CMember(class UArmorMaterialVanityItem*)           DefaultArmorMaterial                                        OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TArray<FTattooArmorItem>)                  Tattoos                                                     OFFSET(get<T>, {0x240, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ArmorVanityItem.PreviewArmor
	// void PreviewArmor(class AFSDPlayerState* PlayerState, bool Show, bool useDefaultArmorMaterial);                          // [0x17ea870] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.ArmorVanityItem.HasSleevelessArmorType
	// bool HasSleevelessArmorType();                                                                                           // [0x17ea2d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.AssetLoader
/// Size: 0x0000 (0x000030 - 0x000030)
class UAssetLoader : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.AsyncLevelPersistanceActor
/// Size: 0x0020 (0x000220 - 0x000240)
class AAsyncLevelPersistanceActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(TArray<class UObject*>)                    References                                                  OFFSET(get<T>, {0x220, 16, 0, 0})
};

/// Class /Script/FSD.AsyncManager
/// Size: 0x0028 (0x000030 - 0x000058)
class UAsyncManager : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<class UObject*>)                    PermanentReferences                                         OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.AsyncManager.SyncLoadClass
	// class UClass* SyncLoadClass(TSoftObjectPtr<UClass*> Asset);                                                              // [0x17eb0a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.SyncLoadAsset
	// class UObject* SyncLoadAsset(TWeakObjectPtr<UObject*> Asset);                                                            // [0x17eaf90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.ReleaseAllHandles
	// void ReleaseAllHandles();                                                                                                // [0x17eacc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.Receive_SyncLoadClasses
	// TArray<UClass*> Receive_SyncLoadClasses(TArray<TSoftObjectPtr<UClass*>> assets);                                         // [0x17eaaa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.Receive_SyncLoadClass
	// class UClass* Receive_SyncLoadClass(TSoftObjectPtr<UClass*> Asset);                                                      // [0x17ea980] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.AsyncLoadSoftObjects
	// void AsyncLoadSoftObjects(TArray<TWeakObjectPtr<UObject*>>& Items, EAsyncPersistence persistence, FDelegateProperty& OnLoadComplete, EAsyncLoadPriority Priority); // [0x17e9ce0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.AsyncLoadSoftObject
	// void AsyncLoadSoftObject(TWeakObjectPtr<UObject*> Item, EAsyncPersistence persistence, FDelegateProperty& OnLoadComplete, EAsyncLoadPriority Priority); // [0x17e9ae0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.AsyncLoadSoftClasses
	// void AsyncLoadSoftClasses(TArray<TSoftObjectPtr<UClass*>> Items, EAsyncPersistence persistence, FDelegateProperty& OnLoadComplete, EAsyncLoadPriority Priority); // [0x17e98b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.AsyncLoadSoftClass
	// void AsyncLoadSoftClass(TSoftObjectPtr<UClass*> Item, EAsyncPersistence persistence, FDelegateProperty& OnLoadComplete, EAsyncLoadPriority Priority); // [0x17e96b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.AsyncLoadAssets
	// void AsyncLoadAssets(TArray<FSoftObjectPath>& Items, EAsyncPersistence persistence, FDelegateProperty& OnLoadComplete, EAsyncLoadPriority Priority); // [0x17e94f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.AsyncManager.AsyncLoadAsset
	// void AsyncLoadAsset(FSoftObjectPath& Item, EAsyncPersistence persistence, FDelegateProperty& OnLoadComplete, EAsyncLoadPriority Priority); // [0x17e9350] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.AttackBaseComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UAttackBaseComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FName)                                     AttackName                                                  OFFSET(getStruct<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     MaxSurfaceAngle                                             OFFSET(get<float>, {0xC8, 4, 0, 0})
	SMember(FFloatInterval)                            range                                                       OFFSET(getStruct<T>, {0xCC, 8, 0, 0})
	DMember(float)                                     MinRange                                                    OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0xD8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AttackBaseComponent.ReplaceAttackComponent
	// class UAttackBaseComponent* ReplaceAttackComponent(class UAttackBaseComponent* componentToReplace, class UClass* newComponentClass); // [0x17ef190] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AttackBaseComponent.ReceiveCompleteAttack
	// void ReceiveCompleteAttack();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AttackBaseComponent.ReceiveAttackTarget
	// void ReceiveAttackTarget(class AActor* Target);                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AttackBaseComponent.ReceiveAbortAttack
	// void ReceiveAbortAttack();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.AttackBaseComponent.GetMinRange
	// float GetMinRange();                                                                                                     // [0x17ee8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AttackBaseComponent.GetMaxRange
	// float GetMaxRange();                                                                                                     // [0x17ee8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AttackBaseComponent.CompleteAttack
	// void CompleteAttack(bool success);                                                                                       // [0x17ee660] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.AttackBaseComponent.AttackTarget
	// void AttackTarget(class AActor* Target);                                                                                 // [0x17ee520] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AttackBaseComponent.AbortAttack
	// void AbortAttack();                                                                                                      // [0x17ee500] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.AttackEffect
/// Size: 0x0000 (0x000028 - 0x000028)
class UAttackEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FSD.AttackCooldown
/// Size: 0x0010 (0x000000 - 0x000010)
class FAttackCooldown : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     AttackName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.AttackCooldownComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UAttackCooldownComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FAttackCooldown>)                   AttackCooldowns                                             OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.AttackCooldownComponent.SetCooldown
	// void SetCooldown(FName& AttackName, float cooldownSeconds);                                                              // [0x17ef310] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.AttackCooldownComponent.IsAttackOffCooldown
	// bool IsAttackOffCooldown(FName& AttackName);                                                                             // [0x17ee9f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AttackCooldownComponent.IsAnyAttackOffCooldown
	// bool IsAnyAttackOffCooldown();                                                                                           // [0x17ee9c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.AttackCooldownComponent.AttackUsed
	// void AttackUsed(FName& Name);                                                                                            // [0x17ee5b0] Final|Native|Public|HasOutParms 
};

/// Class /Script/FSD.AttackerManagerComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UAttackerManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<class UAttackerPositioningComponent*>) Components                                               OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FSD.AttackerInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FAttackerInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Attacker                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   PositionIndex                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     AttackerRadius                                              OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.AttackerPositioningComponent
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UAttackerPositioningComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(bool)                                      DebugPositions                                              OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(int32_t)                                   MaxAttackers                                                OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	CMember(TArray<FAttackerInfo>)                     Attackers                                                   OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TArray<int32_t>)                           FreePositions                                               OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<FAttackerInfo>)                     FlyingAttackers                                             OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<int32_t>)                           FlyingFreePositions                                         OFFSET(get<T>, {0xE8, 16, 0, 0})
	DMember(float)                                     CharacterPersonalSphere                                     OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     CharacterHalfHeight                                         OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     CostModifier                                                OFFSET(get<float>, {0x100, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AttackerPositioningComponent.UnregisterAttacker
	// void UnregisterAttacker(class AActor* Attacker, bool IsFlying);                                                          // [0x17ef820] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AttackerPositioningComponent.RegisterAttacker
	// void RegisterAttacker(class AActor* Attacker, bool IsFlying);                                                            // [0x17ef0c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.AttackerPositioningComponent.OnFlyingAttackerDeath
	// void OnFlyingAttackerDeath(class UHealthComponentBase* HealthComponent);                                                 // [0x17eed80] Final|Native|Protected 
	// Function /Script/FSD.AttackerPositioningComponent.OnAttackerDeath
	// void OnAttackerDeath(class UHealthComponentBase* HealthComponent);                                                       // [0x17eeab0] Final|Native|Protected 
	// Function /Script/FSD.AttackerPositioningComponent.GetFlyingAttackerPosition
	// FVector GetFlyingAttackerPosition(class AActor* Attacker, float AttackerRadius);                                         // [0x17ee7f0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.AttackerPositioningComponent.GetAttackerPosition
	// FVector GetAttackerPosition(class AActor* Attacker, float AttackerRadius);                                               // [0x17ee710] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.PlayerAttackPositionComponent
/// Size: 0x0010 (0x000108 - 0x000118)
class UPlayerAttackPositionComponent : public UAttackerPositioningComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	DMember(float)                                     OnZiplineFlyingModifier                                     OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     OnZiplineWalkingModifier                                    OFFSET(get<float>, {0x110, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerAttackPositionComponent.SetGameplayModifier
	// void SetGameplayModifier(float modifier);                                                                                // [0x17ef480] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ObjectAttackerPositioning
/// Size: 0x0008 (0x000108 - 0x000110)
class UObjectAttackerPositioning : public UAttackerPositioningComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(class UHealthComponentBase*)               Health                                                      OFFSET(get<T>, {0x108, 8, 0, 0})
};

/// Class /Script/FSD.CustomObjectAttackerPositioning
/// Size: 0x0018 (0x000108 - 0x000120)
class UCustomObjectAttackerPositioning : public UAttackerPositioningComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(class UHealthComponentBase*)               Health                                                      OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(TArray<FVector>)                           AttackerPositions                                           OFFSET(get<T>, {0x110, 16, 0, 0})
};

/// Class /Script/FSD.EnemyAttackerPositioningComponent
/// Size: 0x0000 (0x000108 - 0x000108)
class UEnemyAttackerPositioningComponent : public UAttackerPositioningComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
};

/// Class /Script/FSD.EscortMuleAttackerPositioning
/// Size: 0x0018 (0x000108 - 0x000120)
class UEscortMuleAttackerPositioning : public UAttackerPositioningComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(class UHealthComponentBase*)               Health                                                      OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(TArray<FVector>)                           AttackerPositions                                           OFFSET(get<T>, {0x110, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EscortMuleAttackerPositioning.SetNewMaxAttackers
	// void SetNewMaxAttackers(int32_t newMaxAttackers);                                                                        // [0x17ef500] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortMuleAttackerPositioning.SetCostModifier
	// void SetCostModifier(float newModifier);                                                                                 // [0x17ef3f0] Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.AttackingPointInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAttackingPointInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.AudioFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UAudioFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.AudioFunctionLibrary.SetSoundClassVolume
	// float SetSoundClassVolume(class USoundClass* SoundClass, float Volume);                                                  // [0x17ef590] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.AudioFunctionLibrary.PushTimedSoundMix
	// void PushTimedSoundMix(class UObject* contextObject, class USoundMix* mix, float Duration);                              // [0x17eefb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.AudioFunctionLibrary.GetSoundClassVolume
	// float GetSoundClassVolume(class USoundClass* SoundClass);                                                                // [0x17ee910] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SoundClassWidget
/// Size: 0x0000 (0x000260 - 0x000260)
class USoundClassWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
};

/// Class /Script/FSD.AutoCannon
/// Size: 0x00C8 (0x000780 - 0x000848)
class AAutoCannon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2120;

public:
	DMember(float)                                     StartingFireRate                                            OFFSET(get<float>, {0x780, 4, 0, 0})
	DMember(float)                                     MaxFireRate                                                 OFFSET(get<float>, {0x784, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        FireRateCurve                                               OFFSET(getStruct<T>, {0x788, 136, 0, 0})
	DMember(float)                                     FireTimeReductionScale                                      OFFSET(get<float>, {0x810, 4, 0, 0})
	DMember(float)                                     FireTimeIncreaseScale                                       OFFSET(get<float>, {0x814, 4, 0, 0})
	DMember(float)                                     MaxFireTimeCap                                              OFFSET(get<float>, {0x818, 4, 0, 0})
	DMember(float)                                     DamageBonusAtFullROF                                        OFFSET(get<float>, {0x81C, 4, 0, 0})
	DMember(bool)                                      StatusEffectAtFullROF                                       OFFSET(get<bool>, {0x820, 1, 0, 0})
	DMember(float)                                     FireTimeOffsetForMaxRateOfFireBonus                         OFFSET(get<float>, {0x824, 4, 0, 0})
	DMember(float)                                     StartLoopingSoundAt                                         OFFSET(get<float>, {0x828, 4, 0, 0})
	CMember(class UClass*)                             StatusAtFullROF                                             OFFSET(get<T>, {0x830, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Fire                                                    OFFSET(get<T>, {0x838, 8, 0, 0})
	DMember(float)                                     CurrentFireTime                                             OFFSET(get<float>, {0x840, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AutoCannon.Server_SetStatusActive
	// void Server_SetStatusActive(bool IsActive);                                                                              // [0x17ef280] Net|NetReliableNative|Event|Protected|NetServer 
};

/// Class /Script/FSD.AutoCannonAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UAutoCannonAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
};

/// Class /Script/FSD.AutoCarverComponent
/// Size: 0x0040 (0x0004E0 - 0x000520)
class UAutoCarverComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
	CMember(class UTerrainMaterialBase*)               TerrainMaterial                                             OFFSET(get<T>, {0x4E0, 8, 0, 0})
	DMember(float)                                     Frequency                                                   OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     ExpensiveNoise                                              OFFSET(get<float>, {0x4EC, 4, 0, 0})
	DMember(float)                                     MinDistanceMoved                                            OFFSET(get<float>, {0x4F0, 4, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x4F4, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCarveDoneEvent                                            OFFSET(getStruct<T>, {0x4F8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.AutoCarverComponent.ForceCarve
	// void ForceCarve();                                                                                                       // [0x17ee6f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.STLMeshCarverComponent
/// Size: 0x0020 (0x000450 - 0x000470)
class USTLMeshCarverComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(class UTerrainMaterialBase*)               TerrainMaterial                                             OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class USTLMeshCarver*)                     MeshCarver                                                  OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x460, 1, 0, 0})
	DMember(bool)                                      PreviewEnabled                                              OFFSET(get<bool>, {0x461, 1, 0, 0})
};

/// Class /Script/FSD.MeshCarverComponent
/// Size: 0x0020 (0x0004E0 - 0x000500)
class UMeshCarverComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	CMember(class UTerrainMaterialBase*)               TerrainMaterial                                             OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x4E8, 1, 0, 0})
	DMember(float)                                     ExpensiveNoise                                              OFFSET(get<float>, {0x4EC, 4, 0, 0})
	CMember(CarveOptionsCellSize)                      CarverSize                                                  OFFSET(get<T>, {0x4F0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MeshCarverComponent.Carve
	// void Carve();                                                                                                            // [0x17ee640] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.LevelGenerationCarverComponent
/// Size: 0x0050 (0x000450 - 0x0004A0)
class ULevelGenerationCarverComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(class USTLMeshCarver*)                     MeshCarver                                                  OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UStaticMesh*)                        ConvexCarver                                                OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UStaticMeshCarver*)                  StaticMeshCarver                                            OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UTerrainMaterialBase*)               TerrainMaterial                                             OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x470, 1, 0, 0})
	DMember(float)                                     ConvexExpensiveNoise                                        OFFSET(get<float>, {0x474, 4, 0, 0})
	CMember(CarveOptionsCellSize)                      CarveCellSize                                               OFFSET(get<T>, {0x478, 1, 0, 0})
	DMember(bool)                                      PreviewEnabled                                              OFFSET(get<bool>, {0x479, 1, 0, 0})
	DMember(bool)                                      CarvingDisabled                                             OFFSET(get<bool>, {0x47A, 1, 0, 0})
	DMember(bool)                                      DestroyOwnerOnCarve                                         OFFSET(get<bool>, {0x47B, 1, 0, 0})
	DMember(bool)                                      DestroySelfAndChilded                                       OFFSET(get<bool>, {0x47C, 1, 0, 0})
	DMember(bool)                                      SelfActivate                                                OFFSET(get<bool>, {0x490, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LevelGenerationCarverComponent.OnCarvedCallback
	// void OnCarvedCallback();                                                                                                 // [0x17eeb40] Final|Native|Public  
};

/// Class /Script/FSD.GenerationCleanupComponent
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UGenerationCleanupComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:


	/// Functions
	// Function /Script/FSD.GenerationCleanupComponent.OnCarverCallback
	// void OnCarverCallback();                                                                                                 // [0x17eeb60] Final|Native|Public  
};

/// Class /Script/FSD.RandomizedInstantMeshCarver
/// Size: 0x0048 (0x000220 - 0x000268)
class ARandomizedInstantMeshCarver : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(TArray<class UStaticMesh*>)                CarvingMeshes                                               OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(TArray<class USTLMeshCarver*>)             STLCarvingMeshes                                            OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(TArray<class UStaticMeshCarver*>)          StaticMeshCarvers                                           OFFSET(get<T>, {0x240, 16, 0, 0})
	SMember(FRandRange)                                RandomScale                                                 OFFSET(getStruct<T>, {0x250, 8, 0, 0})
	CMember(class UTerrainMaterialBase*)               TerrainMaterial                                             OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x260, 1, 0, 0})
};

/// Class /Script/FSD.LevelGenerationCarverComponent2
/// Size: 0x0030 (0x000450 - 0x000480)
class ULevelGenerationCarverComponent2 : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(class UClass*)                             Carver                                                      OFFSET(get<T>, {0x450, 8, 0, 0})
	DMember(bool)                                      CarvingDisabled                                             OFFSET(get<bool>, {0x458, 1, 0, 0})
	DMember(int32_t)                                   PreviewSeed                                                 OFFSET(get<int32_t>, {0x45C, 4, 0, 0})
	SMember(FBakeSettings)                             CarverSettings                                              OFFSET(getStruct<T>, {0x460, 16, 0, 0})
	DMember(bool)                                      SelfActivate                                                OFFSET(get<bool>, {0x470, 1, 0, 0})
	CMember(class UCSGPreviewComponent*)               PreviewComponent                                            OFFSET(get<T>, {0x478, 8, 0, 0})
};

/// Class /Script/FSD.AvoidCeilingComponent
/// Size: 0x0048 (0x0000B0 - 0x0000F8)
class UAvoidCeilingComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	DMember(float)                                     MaxDuckDistance                                             OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     TraceVerticalStart                                          OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     MinVerticalSpace                                            OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     DuckSpeed                                                   OFFSET(get<float>, {0xBC, 4, 0, 0})
	CMember(class USceneComponent*)                    ComponentToMove                                             OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(bool)                                      IsDuckingEnabled                                            OFFSET(get<bool>, {0xC8, 1, 0, 0})
};

/// Class /Script/FSD.BallisticMovementComponent
/// Size: 0x0080 (0x0000B0 - 0x000130)
class UBallisticMovementComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	SMember(FMulticastInlineDelegate)                  OnLaunch                                                    OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLanding                                                   OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(float)                                     GravityMultiplier                                           OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     LaunchAngleOffset                                           OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     MinMoveDistance                                             OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     SampleZOffset                                               OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     RotateDelay                                                 OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     LaunchDelay                                                 OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     LandingDelay                                                OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(bool)                                      bIsMoveActive                                               OFFSET(get<bool>, {0xFB, 1, 0, 0})
	SMember(FVector)                                   LaunchVelocity                                              OFFSET(getStruct<T>, {0x100, 12, 0, 0})
	SMember(FRotator)                                  TargetRotation                                              OFFSET(getStruct<T>, {0x10C, 12, 0, 0})
	DMember(float)                                     AnticipatedTotalAirborneTime                                OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x12C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.BallisticMovementComponent.StartMovement
	// void StartMovement(FVector LaunchVelocity, FRotator targetRotator, float flightTime);                                    // [0x17ef660] Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults 
	// Function /Script/FSD.BallisticMovementComponent.OnRep_LaunchVelocity
	// void OnRep_LaunchVelocity();                                                                                             // [0x17eee30] Final|Native|Private 
	// Function /Script/FSD.BallisticMovementComponent.IsMoveActive
	// bool IsMoveActive();                                                                                                     // [0x17eea90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.BallisticMovementComponent.IsAnimating
	// bool IsAnimating();                                                                                                      // [0x17ee9a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.WindowWidget
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UWindowWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	SMember(FMulticastInlineDelegate)                  OnWindowClosed                                              OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	DMember(bool)                                      bHandleCloseCommand                                         OFFSET(get<bool>, {0x298, 1, 0, 0})
	DMember(bool)                                      bResolutionDownscaleWhenOpen                                OFFSET(get<bool>, {0x299, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.WindowWidget.WindowDelegate__DelegateSignature
	// void WindowDelegate__DelegateSignature(class UWindowWidget* Window);                                                     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.WindowWidget.ReceiveSelectPreviousCommand
	// void ReceiveSelectPreviousCommand();                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.ReceiveSelectNextCommand
	// void ReceiveSelectNextCommand();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.ReceiveSelectCharacterCommand
	// void ReceiveSelectCharacterCommand();                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.ReceiveOkCommand
	// void ReceiveOkCommand();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.ReceiveCloseCommand
	// void ReceiveCloseCommand();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.ReceiveCanCloseWindow
	// bool ReceiveCanCloseWindow(FName InActionName, FKey InKey, bool InIsMouseEvent);                                         // [0x19ff2b0] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.OnShown
	// void OnShown();                                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.OnNewTopWindow
	// void OnNewTopWindow();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.OnClosed
	// void OnClosed();                                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WindowWidget.ConsumeCommand
	// void ConsumeCommand();                                                                                                   // [0x19fe8d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.WindowWidget.CloseThisWindow
	// void CloseThisWindow();                                                                                                  // [0x19fe800] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.BarMenuWidget
/// Size: 0x0008 (0x0002A0 - 0x0002A8)
class UBarMenuWidget : public UWindowWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(TWeakObjectPtr<class ASpaceRigBar*>)       SpaceRigBar                                                 OFFSET(get<T>, {0x2A0, 8, 0, 0})
};

/// Class /Script/FSD.BarrierProjectile
/// Size: 0x0000 (0x000220 - 0x000220)
class ABarrierProjectile : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/FSD.FSDPhysicsActor
/// Size: 0x0018 (0x000220 - 0x000238)
class AFSDPhysicsActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	DMember(int32_t)                                   MovementUpdateFrequency                                     OFFSET(get<int32_t>, {0x220, 4, 0, 0})
	DMember(int32_t)                                   MovementUpdateEventTriggeredFrequency                       OFFSET(get<int32_t>, {0x224, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDPhysicsActor.ForceMovementUpdate
	// void ForceMovementUpdate();                                                                                              // [0x18aa670] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CarriableItem
/// Size: 0x0030 (0x000238 - 0x000268)
class ACarriableItem : public AFSDPhysicsActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	SMember(FMulticastInlineDelegate)                  OnAttachedChangeDelegate                                    OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCarriableDeposited                                        OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	DMember(bool)                                      StrictDeposit                                               OFFSET(get<bool>, {0x260, 1, 0, 0})
	DMember(bool)                                      IsDopositable                                               OFFSET(get<bool>, {0x261, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CarriableItem.Throw
	// void Throw(FVector force);                                                                                               // [0x1d6f900] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.CarriableItem.Receive_OnDeposited
	// void Receive_OnDeposited(class APlayerCharacter* fromPlayer, class AActor* toActor);                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CarriableItem.OnAttachChanged
	// void OnAttachChanged(bool Attached);                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.BasicThrowableItem
/// Size: 0x0058 (0x000268 - 0x0002C0)
class ABasicThrowableItem : public ACarriableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class UBoxComponent*)                      BoxComp                                                     OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class USphereComponent*)                   UseSphere                                                   OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UCarriableComponent*)                CarriableComp                                               OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UInstantUsable*)                     UsableComp                                                  OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               WorldMeshComp                                               OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UFirstPersonStaticMeshComponent*)    ViewMeshComp                                                OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class USoundCue*)                          ImpactSound                                                 OFFSET(get<T>, {0x2A8, 8, 0, 0})
	DMember(float)                                     SquaredMinImpactForce                                       OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     ImpactAudioResetTime                                        OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     SquaredMinThrowforce                                        OFFSET(get<float>, {0x2B8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.BasicThrowableItem.ThrowItem
	// void ThrowItem(FVector& throwForce);                                                                                     // [0x17ef790] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.BasicThrowableItem.ResetImpactSound
	// void ResetImpactSound();                                                                                                 // [0x17ef260] Final|Native|Private 
	// Function /Script/FSD.BasicThrowableItem.OnUsed
	// void OnUsed(class APlayerCharacter* User, EInputKeys Key);                                                               // [0x17eeee0] Final|Native|Public  
	// Function /Script/FSD.BasicThrowableItem.OnUsableChanged
	// void OnUsableChanged(bool CanUse);                                                                                       // [0x17eee50] Final|Native|Public  
	// Function /Script/FSD.BasicThrowableItem.OnPickedUp
	// void OnPickedUp();                                                                                                       // [0x17eee10] Final|Native|Public  
	// Function /Script/FSD.BasicThrowableItem.OnDropped
	// void OnDropped();                                                                                                        // [0x17eed60] Final|Native|Public  
	// Function /Script/FSD.BasicThrowableItem.OnComponentHit
	// void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x17eeb80] Final|Native|Public|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.BasicDepositableItem
/// Size: 0x0008 (0x0002C0 - 0x0002C8)
class ABasicDepositableItem : public ABasicThrowableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(class UResourceData*)                      DepositableResource                                         OFFSET(get<T>, {0x2C0, 8, 0, 0})
};

/// Class /Script/FSD.WeaponFireComponent
/// Size: 0x0060 (0x0000B0 - 0x000110)
class UWeaponFireComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FMulticastInlineDelegate)                  OnWeaponFired                                               OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnWeaponFireEnded                                           OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRicochetEvent                                             OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	CMember(TScriptInterface<Class>)                   Weapon                                                      OFFSET(get<T>, {0xF8, 16, 0, 0})
	DMember(bool)                                      SetAsWeaponFireComponent                                    OFFSET(get<bool>, {0x10D, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.WeaponFireComponent.StopFire
	// void StopFire();                                                                                                         // [0x1809fe0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeaponFireComponent.Server_SetShotPower
	// void Server_SetShotPower(float shotPower);                                                                               // [0x18f5840] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.WeaponFireComponent.Fire
	// void Fire(FVector& Origin, FVector_NetQuantizeNormal& Direction, bool playFireFX);                                       // [0x19fab90] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.BasicWeaponFireComponent
/// Size: 0x0000 (0x000110 - 0x000110)
class UBasicWeaponFireComponent : public UWeaponFireComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:


	/// Functions
	// Function /Script/FSD.BasicWeaponFireComponent.Server_FireWeapon
	// void Server_FireWeapon();                                                                                                // [0x17f4a00] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.BasicWeaponFireComponent.Server_EndFire
	// void Server_EndFire();                                                                                                   // [0x17f49e0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.BasicWeaponFireComponent.All_WeaponFired
	// void All_WeaponFired();                                                                                                  // [0x17f3860] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.BeardColorVanityItem
/// Size: 0x00F0 (0x000130 - 0x000220)
class UBeardColorVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(TWeakObjectPtr<class UMaterialInterface*>) HairColor                                                   OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) EyebrowColor                                                OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) MoustacheColor                                              OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) SideburnColor                                               OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) BeardColor                                                  OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) TransparentColor                                            OFFSET(get<T>, {0x1F8, 8, 0, 0})
};

/// Class /Script/FSD.BeardVanityItem
/// Size: 0x00D8 (0x000130 - 0x000208)
class UBeardVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x130, 8, 0, 0})
	DMember(float)                                     BeardThickness                                              OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(bool)                                      RequiresSlimArmor                                           OFFSET(get<bool>, {0x15C, 1, 0, 0})
	CMember(EMaterialChoice)                           MaterialType                                                OFFSET(get<T>, {0x15D, 1, 0, 0})
	DMember(bool)                                      HideEyebrows                                                OFFSET(get<bool>, {0x15E, 1, 0, 0})
	DMember(bool)                                      HideSideburns                                               OFFSET(get<bool>, {0x15F, 1, 0, 0})
	DMember(bool)                                      HideMoustache                                               OFFSET(get<bool>, {0x160, 1, 0, 0})
	DMember(bool)                                      HideAll                                                     OFFSET(get<bool>, {0x161, 1, 0, 0})
	CMember(TSet<UTagVanityBeards*>)                   VanityTags                                                  OFFSET(get<T>, {0x168, 80, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AnimInstance                                                OFFSET(get<T>, {0x1B8, 40, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) MaterialOverride                                            OFFSET(get<T>, {0x1E0, 8, 0, 0})
};

/// Class /Script/FSD.SavableDataAsset
/// Size: 0x0028 (0x000030 - 0x000058)
class USavableDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      EnableDangerousSaveGameIDEditing                            OFFSET(get<bool>, {0x38, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x3C, 16, 0, 0})
	CMember(class UBuildRestriction*)                  BuildRestriction                                            OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SavableDataAsset.GetSavegameID
	// FGuid GetSavegameID();                                                                                                   // [0x195ae50] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.BEETemplateItem
/// Size: 0x0028 (0x000000 - 0x000028)
class FBEETemplateItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UMissionTemplate*)                   mission                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<class UMissionDuration*>)           AllowedDurations                                            OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<class UMissionComplexity*>)         AllowedComplexities                                         OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Class /Script/FSD.BEEMissionTemplate
/// Size: 0x0060 (0x000058 - 0x0000B8)
class UBEEMissionTemplate : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   MissionCount                                                OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	CMember(TArray<class UDifficultySetting*>)         Difficulties                                                OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FBEETemplateItem>)                  missions                                                    OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(int32_t)                                   CreditsPerPrimaryObjective                                  OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	DMember(int32_t)                                   CreditsPerSecondaryObjective                                OFFSET(get<int32_t>, {0x84, 4, 0, 0})
	DMember(int32_t)                                   XPPerPrimaryObjective                                       OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(int32_t)                                   XPPerSecondaryObjective                                     OFFSET(get<int32_t>, {0x8C, 4, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0x90, 4, 0, 0})
	SMember(FRandInterval)                             MutatorCount                                                OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FRandInterval)                             WarningCount                                                OFFSET(getStruct<T>, {0xA8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.BEEMissionTemplate.IsDurationAllowed
	// bool IsDurationAllowed(class UMissionTemplate* mission, class UMissionDuration* Duration);                               // [0x17f42b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.BEEMissionTemplate.IsComplexityAllowed
	// bool IsComplexityAllowed(class UMissionTemplate* mission, class UMissionComplexity* Complexity);                         // [0x17f41e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.BEELoaderSequence
/// Size: 0x0028 (0x000000 - 0x000028)
class FBEELoaderSequence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<class ULevelSequence*>)     LevelSequence                                               OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/FSD.BEESettings
/// Size: 0x00B0 (0x000030 - 0x0000E0)
class UBEESettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(class UBEEMissionTemplate*)                MissionTemplate                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UMutator*>)                   BaseMutators                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UMissionMutator*>)            Mutators                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<class UMissionWarning*>)            Warnings                                                    OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<class UDialogDataAsset*>)           BEEMissionCompleteShouts                                    OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FBEELoaderSequence>)                LoaderSequnces                                              OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(class UMissionNameBank*)                   DeepDiveNameBank                                            OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             MissionBar                                                  OFFSET(get<T>, {0x90, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             MissionEndScreen                                            OFFSET(get<T>, {0xB8, 40, 0, 0})
};

/// Class /Script/FSD.BeltDrivenWeapon
/// Size: 0x0030 (0x000780 - 0x0007B0)
class ABeltDrivenWeapon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1968;

public:
	CMember(class UAudioComponent*)                    BarrelAudio                                                 OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(class USoundCue*)                          BarrelSound                                                 OFFSET(get<T>, {0x788, 8, 0, 0})
	DMember(float)                                     BarrelFadeIn                                                OFFSET(get<float>, {0x790, 4, 0, 0})
	DMember(float)                                     BarrelFadeOut                                               OFFSET(get<float>, {0x794, 4, 0, 0})
	CMember(class UCurveFloat*)                        BarrelPitchCurve                                            OFFSET(get<T>, {0x798, 8, 0, 0})
	DMember(float)                                     BarrelSpinUpTime                                            OFFSET(get<float>, {0x7A0, 4, 0, 0})
	DMember(float)                                     BarrelSpinDownTime                                          OFFSET(get<float>, {0x7A4, 4, 0, 0})
	DMember(float)                                     CurrentSpinRate                                             OFFSET(get<float>, {0x7A8, 4, 0, 0})
	DMember(bool)                                      Simulate_SpinBarrel                                         OFFSET(get<bool>, {0x7AC, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BeltDrivenWeapon.Server_StopBarrel
	// void Server_StopBarrel();                                                                                                // [0x17f4bf0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.BeltDrivenWeapon.Server_StartBarrel
	// void Server_StartBarrel();                                                                                               // [0x17f4bd0] Net|NetReliableNative|Event|Protected|NetServer 
};

/// Class /Script/FSD.GatlingGun
/// Size: 0x0068 (0x0007B0 - 0x000818)
class AGatlingGun : public ABeltDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2072;

public:
	DMember(bool)                                      BarrelProximityDamageEnabled                                OFFSET(get<bool>, {0x7B8, 1, 0, 0})
	DMember(float)                                     BarrelProximityDamageDistance                               OFFSET(get<float>, {0x7BC, 4, 0, 0})
	DMember(float)                                     BarrelProximityDamageRadius                                 OFFSET(get<float>, {0x7C0, 4, 0, 0})
	DMember(float)                                     BarrelProximityDamageLength                                 OFFSET(get<float>, {0x7C4, 4, 0, 0})
	DMember(float)                                     TimeBetweenProximityDamageTicks                             OFFSET(get<float>, {0x7C8, 4, 0, 0})
	DMember(float)                                     DamageMultiplierAtMaxStabilization                          OFFSET(get<float>, {0x7E0, 4, 0, 0})
	CMember(class UFXSystemAsset*)                     HotShellsTracerParticles                                    OFFSET(get<T>, {0x7E8, 8, 0, 0})
	DMember(float)                                     HeatRemovedOnKill                                           OFFSET(get<float>, {0x7F8, 4, 0, 0})
	DMember(bool)                                      CriticalOverheatEnabled                                     OFFSET(get<bool>, {0x7FC, 1, 0, 0})
	DMember(bool)                                      HotShellsOn                                                 OFFSET(get<bool>, {0x7FD, 1, 0, 0})
	DMember(float)                                     HotShellsTemperatureRequired                                OFFSET(get<float>, {0x800, 4, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(class UDamageComponent*)                   BarrelProximityDamageComponent                              OFFSET(get<T>, {0x810, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GatlingGun.Server_SetHotShellsOn
	// void Server_SetHotShellsOn(bool hotShellsIsOn);                                                                          // [0x17f4a20] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.GatlingGun.OnRep_HotShellsTracerOn
	// void OnRep_HotShellsTracerOn();                                                                                          // [0x17f4710] Final|Native|Protected 
	// Function /Script/FSD.GatlingGun.OnGatlingTemperatureChanged
	// void OnGatlingTemperatureChanged(float temperature, bool isOverheated);                                                  // [0x17f45a0] Final|Native|Protected 
	// Function /Script/FSD.GatlingGun.OnEnemyKilled
	// void OnEnemyKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);                        // [0x17f4380] Final|Native|Protected 
	// Function /Script/FSD.GatlingGun.Client_RemoveHeat
	// void Client_RemoveHeat();                                                                                                // [0x17f3ac0] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/FSD.BeltDrivenAnimInstance
/// Size: 0x0030 (0x0002D0 - 0x000300)
class UBeltDrivenAnimInstance : public UAmmoDrivenWeaponAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	DMember(float)                                     BarrelSpinRate                                              OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     CurrentBarrelSpinRate                                       OFFSET(get<float>, {0x2D4, 4, 0, 0})
	SMember(FVector)                                   ExternalForce                                               OFFSET(getStruct<T>, {0x2D8, 12, 0, 0})
	DMember(float)                                     ExternalForceScale                                          OFFSET(get<float>, {0x2E4, 4, 0, 0})
	SMember(FName)                                     ExternalForceBoneName                                       OFFSET(getStruct<T>, {0x2E8, 8, 0, 0})
};

/// Class /Script/FSD.TaggedActor
/// Size: 0x0028 (0x000220 - 0x000248)
class ATaggedActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x228, 32, 0, 0})
};

/// Class /Script/FSD.BhaBarnacle
/// Size: 0x0008 (0x000248 - 0x000250)
class ABhaBarnacle : public ATaggedActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	DMember(bool)                                      IsDead                                                      OFFSET(get<bool>, {0x248, 1, 0, 0})
};

/// Class /Script/FSD.BhaBarnableAnimationSharingStateProcessor
/// Size: 0x0000 (0x000050 - 0x000050)
class UBhaBarnableAnimationSharingStateProcessor : public UAnimationSharingStateProcessor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Struct /Script/FSD.HeatSource
/// Size: 0x0008 (0x000000 - 0x000008)
class FHeatSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     temperature                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Intensity                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.BiomeNoiseItem
/// Size: 0x0038 (0x000000 - 0x000038)
class FBiomeNoiseItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UFloodFillSettings*)                 CeilingNoise                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDetailNoise*)                       CeilingDetailNoise                                          OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 WallNoise                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UDetailNoise*)                       WallDetailNoise                                             OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 FloorNoise                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UDetailNoise*)                       FloorDetailNoise                                            OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/FSD.RandFloatIntervalItem
/// Size: 0x000C (0x000000 - 0x00000C)
class FRandFloatIntervalItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FRandRange)                                range                                                       OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/FSD.RandFloatInterval
/// Size: 0x0010 (0x000000 - 0x000010)
class FRandFloatInterval : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FRandFloatIntervalItem>)            Intervals                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.ResourceSpawner
/// Size: 0x0018 (0x000000 - 0x000018)
class FResourceSpawner : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FRandFloatInterval)                        AmountToSpawn                                               OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.BiomeEnemyEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FBiomeEnemyEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UEnemyDescriptor*)                   enemy                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      IsDistruptive                                               OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Class /Script/FSD.Biome
/// Size: 0x0428 (0x000030 - 0x000458)
class UBiome : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1112;

public:
	SMember(FText)                                     BiomeName                                                   OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     BiomeShortName                                              OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	SMember(FText)                                     BiomeDescription                                            OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	SMember(FColor)                                    BiomeColor                                                  OFFSET(getStruct<T>, {0x78, 4, 0, 0})
	DMember(int32_t)                                   BiomeIndex                                                  OFFSET(get<int32_t>, {0x7C, 4, 0, 0})
	SMember(FString)                                   BiomeAnalyticsIndex                                         OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	DMember(bool)                                      IsTutorialBiome                                             OFFSET(get<bool>, {0x90, 1, 0, 0})
	CMember(TWeakObjectPtr<class UFileMediaSource*>)   BiomeMovie                                                  OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         BiomePicture                                                OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         BiomeIcon                                                   OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         BiomeLargeImage                                             OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         BiomeWorldMap                                               OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         BiomeMissionBar                                             OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             BiomeMapWidget                                              OFFSET(get<T>, {0x188, 40, 0, 0})
	SMember(FHeatSource)                               BiomeHeatSource                                             OFFSET(getStruct<T>, {0x1B0, 8, 0, 0})
	SMember(FRandRange)                                DepthRange                                                  OFFSET(getStruct<T>, {0x1B8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UParticleSystem*>)    AtmosphericParticles                                        OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           CaveScriptComponents                                        OFFSET(get<T>, {0x1E8, 16, 0, 0})
	DMember(float)                                     ExtraCaveSize                                               OFFSET(get<float>, {0x1F8, 4, 0, 0})
	CMember(TArray<class UDebrisSet*>)                 Debris                                                      OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DebrisActor                                                 OFFSET(get<T>, {0x210, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             PostProcessActorClass                                       OFFSET(get<T>, {0x238, 40, 0, 0})
	CMember(class UTerrainMaterial*)                   RockMaterial                                                OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   DirtMaterial                                                OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   BurnedMaterialOverride                                      OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UMaterialInstance*>>) FlavorMaterials                                            OFFSET(get<T>, {0x278, 16, 0, 0})
	CMember(TArray<FBiomeNoiseItem>)                   RoomNoises                                                  OFFSET(get<T>, {0x288, 16, 0, 0})
	CMember(class UMissionStat*)                       MissionCompleted                                            OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 CeilingNoise                                                OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UDetailNoise*)                       CeilingDetailNoise                                          OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 WallNoise                                                   OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class UDetailNoise*)                       WallDetailNoise                                             OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 FloorNoise                                                  OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UDetailNoise*)                       FloorDetailNoise                                            OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 PillarNoise                                                 OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UDetailNoise*)                       PillarDetailNoise                                           OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UPillarSettings*)                    PillarSettings                                              OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(TArray<class UTunnelSetting*>)             TunnelSettings                                              OFFSET(get<T>, {0x2E8, 16, 0, 0})
	CMember(class UFloodFillSettings*)                 TunnelCeilingNoise                                          OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 TunnelWallNoise                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 TunnelFloorNoise                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(TArray<FResourceSpawner>)                  Resources                                                   OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(TArray<FBiomeEnemyEntry>)                  Enemies                                                     OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           BannedEnemies                                               OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           StationaryEnemies                                           OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(TArray<class UCritterDescriptor*>)         Critters                                                    OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          AmbientSounds                                               OFFSET(get<T>, {0x360, 8, 0, 0})
	DMember(bool)                                      Use3DAmbient                                                OFFSET(get<bool>, {0x388, 1, 0, 0})
	SMember(FReverbSettings)                           ReverbSettings                                              OFFSET(getStruct<T>, {0x390, 32, 0, 0})
	DMember(float)                                     SmallCaveReverbVolume                                       OFFSET(get<float>, {0x3B0, 4, 0, 0})
	CMember(class UReverbEffect*)                      SmallCaveReverb                                             OFFSET(get<T>, {0x3B8, 8, 0, 0})
	DMember(float)                                     MediumCaveReverbVolume                                      OFFSET(get<float>, {0x3C0, 4, 0, 0})
	CMember(class UReverbEffect*)                      MediumCaveReverb                                            OFFSET(get<T>, {0x3C8, 8, 0, 0})
	DMember(float)                                     LargeCaveReverbVolume                                       OFFSET(get<float>, {0x3D0, 4, 0, 0})
	CMember(class UReverbEffect*)                      LargeCaveReverb                                             OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          TunnelAmbience                                              OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(TWeakObjectPtr<class ULevelSequence*>)     BiomeLoaderLevelSequence                                    OFFSET(get<T>, {0x408, 8, 0, 0})
	SMember(FString)                                   BiomeLoaderLevelName                                        OFFSET(getStruct<T>, {0x430, 16, 0, 0})
	CMember(TArray<FText>)                             Quotes                                                      OFFSET(get<T>, {0x440, 16, 0, 0})
	DMember(float)                                     PlanetZoneSelectionWeight                                   OFFSET(get<float>, {0x450, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.Biome.StartPreload
	// void StartPreload(class UObject* WorldContext);                                                                          // [0x17f4d30] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.Biome.GetRockMaterial
	// class UTerrainMaterial* GetRockMaterial();                                                                               // [0x17f41c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetPostProcessActorClass_Soft
	// TSoftObjectPtr<UClass*> GetPostProcessActorClass_Soft();                                                                 // [0x17f4010] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetFlavorMaterial
	// class UMaterialInstance* GetFlavorMaterial();                                                                            // [0x17f3fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetDirtMaterial
	// class UTerrainMaterial* GetDirtMaterial();                                                                               // [0x17f3fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetDebrisActorSoftClass
	// TSoftObjectPtr<UClass*> GetDebrisActorSoftClass();                                                                       // [0x17f3f40] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Biome.GetBiomeWorldMap
	// class UTexture2D* GetBiomeWorldMap();                                                                                    // [0x17f3f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomePicture
	// class UTexture2D* GetBiomePicture();                                                                                     // [0x17f3ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomeName
	// FText GetBiomeName();                                                                                                    // [0x17f3de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomeMissionBar
	// class UTexture2D* GetBiomeMissionBar();                                                                                  // [0x17f3db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomeMapWidget
	// class UClass* GetBiomeMapWidget();                                                                                       // [0x17f3d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomeMapAssetList
	// TArray<FSoftObjectPath> GetBiomeMapAssetList();                                                                          // [0x17f3c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomeLargeImage
	// class UTexture2D* GetBiomeLargeImage();                                                                                  // [0x17f3c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomeIndex
	// int32_t GetBiomeIndex();                                                                                                 // [0x17f3c30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomeIcon
	// class UTexture2D* GetBiomeIcon();                                                                                        // [0x17f3c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetBiomeAnalyticsIndex
	// FString GetBiomeAnalyticsIndex();                                                                                        // [0x17f3b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetAtmosphericParticles
	// class UParticleSystem* GetAtmosphericParticles();                                                                        // [0x17f3b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Biome.GetAmbientSounds
	// class USoundCue* GetAmbientSounds();                                                                                     // [0x17f3ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.RunningMissionBP
/// Size: 0x0000 (0x000028 - 0x000028)
class URunningMissionBP : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.RunningMissionBP.StartLogic
	// void StartLogic();                                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.BloodSugarBP
/// Size: 0x0050 (0x000028 - 0x000078)
class UBloodSugarBP : public URunningMissionBP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     AwardSize                                                   OFFSET(get<float>, {0x30, 4, 0, 0})
	SMember(FGameplayTagContainer)                     AllowedFilter                                               OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	DMember(float)                                     HealthLossInverval                                          OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     HealthLossPerTick                                           OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     MinHealthAllowed                                            OFFSET(get<float>, {0x60, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x68, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.BloodSugarBP.Timer_Tick
	// void Timer_Tick();                                                                                                       // [0x17f4dc0] Final|Native|Protected 
	// Function /Script/FSD.BloodSugarBP.OnEnemyKilled
	// void OnEnemyKilled(FGameplayTagContainer& GameplayTags, class AActor* killedEnemy);                                      // [0x17f4490] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FSD.BobbingComponent
/// Size: 0x0038 (0x0001F8 - 0x000230)
class UBobbingComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	SMember(FMulticastInlineDelegate)                  OnMovedIntoSomethingEvent                                   OFFSET(getStruct<T>, {0x1F8, 16, 0, 0})
	CMember(class AActor*)                             OwnerActor                                                  OFFSET(get<T>, {0x208, 8, 0, 0})
	DMember(bool)                                      DoOrientationChecks                                         OFFSET(get<bool>, {0x210, 1, 0, 0})
	DMember(float)                                     BobSpeed                                                    OFFSET(get<float>, {0x214, 4, 0, 0})
	DMember(float)                                     BobSize                                                     OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     OrentationChecksPerSecond                                   OFFSET(get<float>, {0x21C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.BobbingComponent.SetOwner
	// void SetOwner(class AActor* AActor);                                                                                     // [0x17f4ca0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.BodyRotationManagerComponent
/// Size: 0x00C8 (0x0000B0 - 0x000178)
class UBodyRotationManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FRuntimeFloatCurve)                        KnockBackCurve                                              OFFSET(getStruct<T>, {0xB0, 136, 0, 0})
	CMember(TWeakObjectPtr<class USceneComponent*>)    RotationComponent                                           OFFSET(get<T>, {0x150, 8, 0, 0})
	DMember(float)                                     LerpSpeed                                                   OFFSET(get<float>, {0x158, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.BodyRotationManagerComponent.ApplyKnockBack
	// void ApplyKnockBack(float force, float Duration, FVector& Direction);                                                    // [0x17f3880] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.PuddleTrackerComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UPuddleTrackerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:


	/// Functions
	// Function /Script/FSD.PuddleTrackerComponent.OnPuddleDestroyed
	// void OnPuddleDestroyed(class AActor* DestroyedActor);                                                                    // [0x17f4680] Final|Native|Protected 
	// Function /Script/FSD.PuddleTrackerComponent.GetPuddles
	// void GetPuddles(TArray<AActor*>& Locations);                                                                             // [0x17f4110] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.PuddleTrackerComponent.GetPuddleLocations
	// void GetPuddleLocations(TArray<FVector>& Locations);                                                                     // [0x17f4060] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.PuddleTrackerComponent.AddPuddle
	// void AddPuddle(class AActor* puddle);                                                                                    // [0x17f37d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.TentacleManagerComponent
/// Size: 0x0138 (0x0000B0 - 0x0001E8)
class UTentacleManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 488;

public:
	CMember(TWeakObjectPtr<class UNiagaraComponent*>)  Tentacles                                                   OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        SpeedCurve                                                  OFFSET(getStruct<T>, {0xC0, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        ReachCurve                                                  OFFSET(getStruct<T>, {0x148, 136, 0, 0})
	SMember(FName)                                     Param_Speed                                                 OFFSET(getStruct<T>, {0x1D0, 8, 0, 0})
	SMember(FName)                                     Param_Reach                                                 OFFSET(getStruct<T>, {0x1D8, 8, 0, 0})
};

/// Class /Script/FSD.BoltActionWeapon
/// Size: 0x0150 (0x000780 - 0x0008D0)
class ABoltActionWeapon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2256;

public:
	SMember(FMulticastInlineDelegate)                  FullyFocusedEvent                                           OFFSET(getStruct<T>, {0x780, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  FocusLostEvent                                              OFFSET(getStruct<T>, {0x790, 16, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x7A0, 8, 0, 0})
	CMember(class UHitscanBaseComponent*)              HitscanComponent                                            OFFSET(get<T>, {0x7A8, 8, 0, 0})
	CMember(class UClass*)                             FocusedHitSTE                                               OFFSET(get<T>, {0x7B0, 8, 0, 0})
	DMember(bool)                                      RequireWeakspotForFocusedHitSTE                             OFFSET(get<bool>, {0x7B8, 1, 0, 0})
	DMember(bool)                                      IsNoGravityOnFocusEnabled                                   OFFSET(get<bool>, {0x7B9, 1, 0, 0})
	DMember(float)                                     NoGravityOnFocusDuration                                    OFFSET(get<float>, {0x7BC, 4, 0, 0})
	DMember(float)                                     NoGravityFocusFallFriction                                  OFFSET(get<float>, {0x7C0, 4, 0, 0})
	DMember(float)                                     NoGravityFocusGravityScale                                  OFFSET(get<float>, {0x7C4, 4, 0, 0})
	DMember(float)                                     ZoomSpreadAmount                                            OFFSET(get<float>, {0x7CC, 4, 0, 0})
	DMember(float)                                     ZoomMinSpreadWhileMoving                                    OFFSET(get<float>, {0x7D0, 4, 0, 0})
	DMember(float)                                     ChargeSpeed                                                 OFFSET(get<float>, {0x7D8, 4, 0, 0})
	DMember(float)                                     ChargeAmmoCost                                              OFFSET(get<float>, {0x7DC, 4, 0, 0})
	DMember(float)                                     ChargeRecoilMult                                            OFFSET(get<float>, {0x7E0, 4, 0, 0})
	CMember(class USoundCue*)                          ZoomedInAudio                                               OFFSET(get<T>, {0x7F8, 8, 0, 0})
	CMember(class UParticleSystem*)                    ChargedShotTrailParticles                                   OFFSET(get<T>, {0x800, 8, 0, 0})
	SMember(FTracerData)                               ChargedShotTracer                                           OFFSET(getStruct<T>, {0x808, 48, 0, 0})
	CMember(class USoundCue*)                          ButtonDownFireSound                                         OFFSET(get<T>, {0x838, 8, 0, 0})
	CMember(class USoundCue*)                          ChargedShotFireSound                                        OFFSET(get<T>, {0x840, 8, 0, 0})
	DMember(float)                                     ChargedFoVChange                                            OFFSET(get<float>, {0x848, 4, 0, 0})
	DMember(float)                                     ChargedFoVFadeSpeed                                         OFFSET(get<float>, {0x84C, 4, 0, 0})
	DMember(float)                                     MinCharge                                                   OFFSET(get<float>, {0x850, 4, 0, 0})
	DMember(float)                                     SlowMovementAtCharge                                        OFFSET(get<float>, {0x854, 4, 0, 0})
	DMember(float)                                     FullChargeDamageBonus                                       OFFSET(get<float>, {0x858, 4, 0, 0})
	DMember(float)                                     AimedShotStaggerChance                                      OFFSET(get<float>, {0x85C, 4, 0, 0})
	DMember(float)                                     AimedShotWeakpointDamageBonusMultiplier                     OFFSET(get<float>, {0x860, 4, 0, 0})
	DMember(float)                                     AimedWeakspotKilLRange                                      OFFSET(get<float>, {0x864, 4, 0, 0})
	DMember(float)                                     TargetKilledReloadTimeBoost                                 OFFSET(get<float>, {0x86C, 4, 0, 0})
	DMember(float)                                     TargetKilledReloadTimeBoostDuration                         OFFSET(get<float>, {0x870, 4, 0, 0})
	DMember(bool)                                      LastShotWasAimed                                            OFFSET(get<bool>, {0x882, 1, 0, 0})
	DMember(bool)                                      IsMovementSlowed                                            OFFSET(get<bool>, {0x894, 1, 0, 0})
	DMember(bool)                                      ChargeAffectsDamage                                         OFFSET(get<bool>, {0x8A8, 1, 0, 0})
	DMember(bool)                                      Charging                                                    OFFSET(get<bool>, {0x8A9, 1, 0, 0})
	DMember(float)                                     ChargeProgress                                              OFFSET(get<float>, {0x8AC, 4, 0, 0})
	DMember(float)                                     RateOfFireHipFireModifier                                   OFFSET(get<float>, {0x8B0, 4, 0, 0})
	DMember(float)                                     ChargeSpeedModifier                                         OFFSET(get<float>, {0x8B4, 4, 0, 0})
	DMember(float)                                     SuccesfullHipFireStackDuration                              OFFSET(get<float>, {0x8B8, 4, 0, 0})
	DMember(float)                                     SuccesfullAimedStackDuration                                OFFSET(get<float>, {0x8BC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.BoltActionWeapon.SetOverheated
	// void SetOverheated(bool isOverheated);                                                                                   // [0x17f4c10] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.BoltActionWeapon.Server_SetIsMovementSlowed
	// void Server_SetIsMovementSlowed(bool bisMovementSlowed);                                                                 // [0x17f4b40] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.BoltActionWeapon.Server_SetIsLatestShotFocused
	// void Server_SetIsLatestShotFocused(bool bisShotFocused);                                                                 // [0x17f4ab0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.BoltActionWeapon.Server_SetIsChargingShot
	// void Server_SetIsChargingShot(bool bisCharging);                                                                         // [0x17f4a20] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.BoltActionWeapon.OnTimerElapsed
	// void OnTimerElapsed();                                                                                                   // [0x17f49c0] Final|Native|Protected 
	// Function /Script/FSD.BoltActionWeapon.OnTargetKilled
	// void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysicalMaterial, bool wasDirectHit);              // [0x17f48b0] Final|Native|Protected 
	// Function /Script/FSD.BoltActionWeapon.OnTargetDamaged
	// void OnTargetDamaged(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x17f4750] Final|Native|Protected 
	// Function /Script/FSD.BoltActionWeapon.OnShotPowerSet
	// void OnShotPowerSet();                                                                                                   // [0x17f4730] Final|Native|Protected 
	// Function /Script/FSD.BoltActionWeapon.OnMovementSlowed
	// void OnMovementSlowed(bool isSlowed);                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.BoltActionWeapon.Client_OnTargetKilled
	// void Client_OnTargetKilled(bool BoostReloadTime);                                                                        // [0x17f3a30] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.BoltActionWeapon.Client_OnTargetDamaged
	// void Client_OnTargetDamaged(float amount);                                                                               // [0x17f39a0] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/FSD.BoltActionWeaponAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UBoltActionWeaponAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
};

/// Class /Script/FSD.Bomber
/// Size: 0x00D8 (0x000430 - 0x000508)
class ABomber : public AAFlyingBug
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1288;

public:
	CMember(class UAudioComponent*)                    GooSoundComponent                                           OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           AcidEmitterLeft                                             OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           AcidEmitterRight                                            OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UClass*)                             AcidProjectile                                              OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     deathParticles                                              OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class USoundBase*)                         deathSound                                                  OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class USoundBase*)                         DeathPanicSound                                             OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UParticleSystem*)                    BleedParticles                                              OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class USoundBase*)                         BladderDestroyedNoise                                       OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(TWeakObjectPtr<class UParticleSystemComponent*>) BleedParticlesComponent                               OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAudioComponent*>)    PanicAudioComponent                                         OFFSET(get<T>, {0x4A8, 8, 0, 0})
	DMember(float)                                     RagdollForceModifier                                        OFFSET(get<float>, {0x4B0, 4, 0, 0})
	DMember(float)                                     DeathYRotationSpeed                                         OFFSET(get<float>, {0x4B4, 4, 0, 0})
	DMember(float)                                     DeathXRotationSpeed                                         OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     SearchRange                                                 OFFSET(get<float>, {0x4BC, 4, 0, 0})
	DMember(float)                                     NewPointMax                                                 OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     NewPointMin                                                 OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     DeathSpeed                                                  OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     DeathAcceleration                                           OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     AcidRate                                                    OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     PostDeathAcidTime                                           OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(bool)                                      HasDied                                                     OFFSET(get<bool>, {0x4F0, 1, 0, 0})
	DMember(bool)                                      IsRightDestroyed                                            OFFSET(get<bool>, {0x4F1, 1, 0, 0})
	DMember(bool)                                      IsLeftDestroyed                                             OFFSET(get<bool>, {0x4F2, 1, 0, 0})
	DMember(bool)                                      dropAcid                                                    OFFSET(get<bool>, {0x4F3, 1, 0, 0})
	DMember(bool)                                      NoDeathSpiral                                               OFFSET(get<bool>, {0x4F4, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.Bomber.StopSpinAndDie
	// void StopSpinAndDie();                                                                                                   // [0x17f8360] Final|Native|Protected 
	// Function /Script/FSD.Bomber.SetDropAcid
	// void SetDropAcid(bool dropAcid);                                                                                         // [0x17f80e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Bomber.OnStartDeathPanic
	// void OnStartDeathPanic();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Bomber.OnRep_DropAcid
	// void OnRep_DropAcid();                                                                                                   // [0x17f7e50] Final|Native|Protected 
	// Function /Script/FSD.Bomber.OnRep_Death
	// void OnRep_Death();                                                                                                      // [0x17f7e30] Native|Protected     
	// Function /Script/FSD.Bomber.OnRagdollHitGround
	// void OnRagdollHitGround(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x17f7c30] Final|Native|Public|HasOutParms|HasDefaults 
	// Function /Script/FSD.Bomber.OnBladderDamage
	// void OnBladderDamage(float amount);                                                                                      // [0x17f7a20] Final|Native|Protected 
	// Function /Script/FSD.Bomber.OnArmorDestroyed
	// void OnArmorDestroyed(FName Name);                                                                                       // [0x17f7990] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Bomber.HideMesh
	// void HideMesh();                                                                                                         // [0x17f7830] Final|Native|Protected 
	// Function /Script/FSD.Bomber.GetDropAcid
	// bool GetDropAcid();                                                                                                      // [0x17f7690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Bomber.AreBladdersDestroyed
	// bool AreBladdersDestroyed();                                                                                             // [0x17f75d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.BomberAnimInstance
/// Size: 0x0008 (0x000388 - 0x000390)
class UBomberAnimInstance : public UFlyingBugAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(bool)                                      ShouldBomb                                                  OFFSET(get<bool>, {0x388, 1, 0, 0})
	DMember(bool)                                      ShouldSpiral                                                OFFSET(get<bool>, {0x389, 1, 0, 0})
	DMember(bool)                                      IsBombing                                                   OFFSET(get<bool>, {0x38A, 1, 0, 0})
	DMember(bool)                                      IsSpiraling                                                 OFFSET(get<bool>, {0x38B, 1, 0, 0})
};

/// Class /Script/FSD.BoolUserSettingAsset
/// Size: 0x0028 (0x000030 - 0x000058)
class UBoolUserSettingAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FText)                                     SettingDisplayTitle                                         OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FName)                                     SettingID                                                   OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	DMember(bool)                                      SettingDefaultValue                                         OFFSET(get<bool>, {0x50, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BoolUserSettingAsset.SetValue
	// void SetValue(bool InValue);                                                                                             // [0x17f8290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BoolUserSettingAsset.GetValue
	// bool GetValue();                                                                                                         // [0x17f7800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.BoscoLightSetting
/// Size: 0x000C (0x000000 - 0x00000C)
class FBoscoLightSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.Bosco
/// Size: 0x0398 (0x000390 - 0x000728)
class ABosco : public ADeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1832;

public:
	CMember(class UHealthComponent*)                   HealthComponent                                             OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UBoscoAbillityComponent*)            PrimaryAbility                                              OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UBoscoAbillityComponent*)            SecondaryAbility                                            OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(TArray<class UBoscoAbillityComponent*>)    Abilities                                                   OFFSET(get<T>, {0x3E0, 16, 0, 0})
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UPawnSensingComponent*)              Senses                                                      OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UDroneMiningToolBase*)               MiningTool                                                  OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UDroneMeleeTool*)                    MeleeTool                                                   OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UBobbingComponent*)                  BobbingComponent                                            OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             BoscoMesh                                                   OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UHitscanComponent*)                  DroneHitScan                                                OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class USpotLightComponent*)                SpotLightComponent                                          OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UPointLightComponent*)               PointLightComponent                                         OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           LTrail                                                      OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           RTrail                                                      OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UAudioComponent*)                    MomentumSound                                               OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DefendDrilldozerShout                                       OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DefendGenericShout                                          OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   MineOrderShout                                              OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   KillOrderShout                                              OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   GoToOrderShout                                              OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ReviveOrderShout                                            OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   PickupGemShout                                              OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ReviveThankShout                                            OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   GeneralCallShout                                            OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   RiftCrystalShout                                            OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   VacuumShout                                                 OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class USoundBase*)                         MineResponse                                                OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class USoundBase*)                         CombatResponse                                              OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class USoundBase*)                         LightResponse                                               OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class USoundBase*)                         ReviveResponse                                              OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class USoundBase*)                         AbillityResponse                                            OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class USoundBase*)                         CurrentResponse                                             OFFSET(get<T>, {0x4D0, 8, 0, 0})
	DMember(float)                                     ResponseTime                                                OFFSET(get<float>, {0x4D8, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReviveused                                                OFFSET(getStruct<T>, {0x4E0, 16, 0, 0})
	DMember(bool)                                      ShouldSelfDestructOnMultiplePlayers                         OFFSET(get<bool>, {0x4F0, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x4F8, 16, 0, 0})
	SMember(FGameplayTagContainer)                     LosMatchTags                                                OFFSET(getStruct<T>, {0x558, 32, 0, 0})
	DMember(float)                                     SeeTargetTime                                               OFFSET(get<float>, {0x578, 4, 0, 0})
	CMember(class USoundBase*)                         AbillityErrorSound                                          OFFSET(get<T>, {0x580, 8, 0, 0})
	DMember(float)                                     INcreasedMiningArea                                         OFFSET(get<float>, {0x588, 4, 0, 0})
	DMember(float)                                     TimeToResetMiningBoost                                      OFFSET(get<float>, {0x58C, 4, 0, 0})
	DMember(float)                                     MiningBoosMultiplier                                        OFFSET(get<float>, {0x590, 4, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x598, 16, 0, 0})
	CMember(class UBoscoProjectileAbillity*)           RocketAbillity                                              OFFSET(get<T>, {0x5A8, 8, 0, 0})
	CMember(class UBoscoProjectileAbillity*)           CryoGrenadeAbillity                                         OFFSET(get<T>, {0x5B0, 8, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x5B8, 16, 0, 0})
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x5C8, 8, 0, 0})
	CMember(class UUpgradableBoscoComponent*)          Upgradable                                                  OFFSET(get<T>, {0x5D0, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  SaluteAnimation                                             OFFSET(get<T>, {0x5D8, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  PickupGemAnimation                                          OFFSET(get<T>, {0x5E0, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  DropGemAnimation                                            OFFSET(get<T>, {0x5E8, 8, 0, 0})
	CMember(TArray<class UAnimSequenceBase*>)          HitReaction                                                 OFFSET(get<T>, {0x5F0, 16, 0, 0})
	DMember(float)                                     SaluteDuration                                              OFFSET(get<float>, {0x600, 4, 0, 0})
	CMember(class UDroneSkinnableComponent*)           Skinnable                                                   OFFSET(get<T>, {0x608, 8, 0, 0})
	CMember(TArray<FBoscoLightSetting>)                LightSettings                                               OFFSET(get<T>, {0x610, 16, 0, 0})
	DMember(int32_t)                                   TargetLightSetting                                          OFFSET(get<int32_t>, {0x620, 4, 0, 0})
	CMember(TArray<class UBoscoAbillity*>)             CombatAbillities                                            OFFSET(get<T>, {0x628, 16, 0, 0})
	CMember(class AActor*)                             RotateTarget                                                OFFSET(get<T>, {0x638, 8, 0, 0})
	SMember(FVector)                                   LookAtLocation                                              OFFSET(getStruct<T>, {0x640, 12, 0, 0})
	CMember(class USoundCue*)                          ShootSound                                                  OFFSET(get<T>, {0x650, 8, 0, 0})
	DMember(float)                                     ShootSoundFadeout                                           OFFSET(get<float>, {0x658, 4, 0, 0})
	CMember(class USoundCue*)                          ShootSoundTail                                              OFFSET(get<T>, {0x660, 8, 0, 0})
	CMember(class UAudioComponent*)                    ShootSoundInstance                                          OFFSET(get<T>, {0x668, 8, 0, 0})
	CMember(class UParticleSystem*)                    MuzzleEffect                                                OFFSET(get<T>, {0x670, 8, 0, 0})
	CMember(class UParticleSystem*)                    TracerEffect                                                OFFSET(get<T>, {0x678, 8, 0, 0})
	DMember(float)                                     FireRate                                                    OFFSET(get<float>, {0x680, 4, 0, 0})
	DMember(int32_t)                                   MinShotsInBurst                                             OFFSET(get<int32_t>, {0x684, 4, 0, 0})
	DMember(int32_t)                                   MaxShotsInBurst                                             OFFSET(get<int32_t>, {0x688, 4, 0, 0})
	DMember(float)                                     MaxRandomBurstCooldown                                      OFFSET(get<float>, {0x68C, 4, 0, 0})
	DMember(float)                                     MinRandomBurstCooldown                                      OFFSET(get<float>, {0x690, 4, 0, 0})
	DMember(float)                                     MaxFiringAngle                                              OFFSET(get<float>, {0x694, 4, 0, 0})
	DMember(float)                                     MaxEngagementRange                                          OFFSET(get<float>, {0x698, 4, 0, 0})
	DMember(float)                                     MinTracerDistance                                           OFFSET(get<float>, {0x69C, 4, 0, 0})
	DMember(float)                                     TracerSpeed                                                 OFFSET(get<float>, {0x6A0, 4, 0, 0})
	CMember(class USoundBase*)                         ReviveSirens                                                OFFSET(get<T>, {0x6A8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAudioComponent*>)    ReviveSirensComponent                                       OFFSET(get<T>, {0x6B0, 8, 0, 0})
	DMember(float)                                     DistanceToFacePlayer                                        OFFSET(get<float>, {0x6B8, 4, 0, 0})
	DMember(float)                                     RotationSpeed                                               OFFSET(get<float>, {0x6BC, 4, 0, 0})
	DMember(float)                                     PrepareToMineRange                                          OFFSET(get<float>, {0x6C0, 4, 0, 0})
	DMember(float)                                     MiningRange                                                 OFFSET(get<float>, {0x6C4, 4, 0, 0})
	DMember(int32_t)                                   MaxRevives                                                  OFFSET(get<int32_t>, {0x6F0, 4, 0, 0})
	DMember(bool)                                      IsFiring                                                    OFFSET(get<bool>, {0x704, 1, 0, 0})
	DMember(bool)                                      IsInRangeToMine                                             OFFSET(get<bool>, {0x705, 1, 0, 0})
	DMember(bool)                                      IsPreparedToMine                                            OFFSET(get<bool>, {0x706, 1, 0, 0})
	DMember(bool)                                      IsMining                                                    OFFSET(get<bool>, {0x707, 1, 0, 0})
	DMember(bool)                                      IsMelee                                                     OFFSET(get<bool>, {0x708, 1, 0, 0})
	DMember(bool)                                      IsReviving                                                  OFFSET(get<bool>, {0x709, 1, 0, 0})
	DMember(bool)                                      IsRotateMode                                                OFFSET(get<bool>, {0x70A, 1, 0, 0})
	CMember(class ABoscoController*)                   DroneController                                             OFFSET(get<T>, {0x718, 8, 0, 0})
	CMember(EDroneAIState)                             CurrentState                                                OFFSET(get<T>, {0x720, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.Bosco.UsePlayerActivatedAbillity
	// void UsePlayerActivatedAbillity(EAbilityIndex Index, class AActor* aTarget, FVector& aLocation);                         // [0x17f83a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.Bosco.UseABillity
	// void UseABillity();                                                                                                      // [0x17f8380] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Bosco.StopShootingSound
	// void StopShootingSound();                                                                                                // [0x17f8340] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FSD.Bosco.StateChanged
	// void StateChanged(EDroneAIState aCurrentState);                                                                          // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Bosco.StartSelfDestruct
	// void StartSelfDestruct();                                                                                                // [0x17f8320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Bosco.SetIsReviving
	// void SetIsReviving(bool aIsReviving);                                                                                    // [0x17f8200] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Bosco.SetIsRepairing
	// void SetIsRepairing(bool isRepairing);                                                                                   // [0x17f8170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Bosco.SelfDestruct
	// void SelfDestruct();                                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Bosco.ReviveCounterChanged
	// void ReviveCounterChanged(int32_t remainingCharges);                                                                     // [0x17f8050] Native|Public        
	// Function /Script/FSD.Bosco.Respond
	// void Respond();                                                                                                          // [0x17f8030] Final|Native|Protected 
	// Function /Script/FSD.Bosco.PlaySalute
	// void PlaySalute();                                                                                                       // [0x17f8010] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.Bosco.OnWeaponFired
	// void OnWeaponFired(FVector& Location);                                                                                   // [0x17f7f80] Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.Bosco.OnTargetBurrowChange
	// void OnTargetBurrowChange(bool burrowed);                                                                                // [0x17f7ef0] Final|Native|Protected 
	// Function /Script/FSD.Bosco.OnRep_State
	// void OnRep_State(EDroneAIState prevState);                                                                               // [0x17f7e70] Native|Public        
	// Function /Script/FSD.Bosco.OnReadyToShoot
	// void OnReadyToShoot();                                                                                                   // [0x17f7e10] Final|Native|Protected 
	// Function /Script/FSD.Bosco.OnNotReadyToShoot
	// void OnNotReadyToShoot();                                                                                                // [0x17f7c10] Final|Native|Protected 
	// Function /Script/FSD.Bosco.OnHit
	// void OnHit(float amount, float BaseAmount, FDamageData& DamageData);                                                     // [0x17f7ac0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.Bosco.OnGrabbedGem
	// void OnGrabbedGem();                                                                                                     // [0x17f7aa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Bosco.MineEffects
	// void MineEffects(class UTerrainMaterial* aTerrainMaterial, FVector_NetQuantize aLocation, FRotator aRotation);           // [0x17f7850] Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults 
	// Function /Script/FSD.Bosco.GetUpgradeComponent
	// class UUpgradableBoscoComponent* GetUpgradeComponent();                                                                  // [0x17f77e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Bosco.GetReviveCharges
	// int32_t GetReviveCharges();                                                                                              // [0x17f77b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Bosco.GetPlayerAbillity
	// class UBoscoAbillityComponent* GetPlayerAbillity();                                                                      // [0x17f7790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Bosco.GetCurrentState
	// EDroneAIState GetCurrentState();                                                                                         // [0x17f7670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Bosco.GetCarryInterrupted
	// bool GetCarryInterrupted();                                                                                              // [0x17f7630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Bosco.DoPickupGemAnimation
	// bool DoPickupGemAnimation();                                                                                             // [0x17f7600] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Bosco.All_OnSelfDestruct
	// void All_OnSelfDestruct();                                                                                               // [0x17f75b0] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.BoscoAnimInstance
/// Size: 0x0038 (0x0002B8 - 0x0002F0)
class UBoscoAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	SMember(FMulticastInlineDelegate)                  OnWeaponsReady                                              OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnWeaponsNotReady                                           OFFSET(getStruct<T>, {0x2C8, 16, 0, 0})
	DMember(float)                                     DigAnimPlayRate                                             OFFSET(get<float>, {0x2D8, 4, 0, 0})
	CMember(EDroneAIState)                             CurrentState                                                OFFSET(get<T>, {0x2DC, 1, 0, 0})
	DMember(bool)                                      IsReadyToMine                                               OFFSET(get<bool>, {0x2DD, 1, 0, 0})
	DMember(bool)                                      IsMining                                                    OFFSET(get<bool>, {0x2DE, 1, 0, 0})
	DMember(bool)                                      IsMelee                                                     OFFSET(get<bool>, {0x2DF, 1, 0, 0})
	DMember(bool)                                      IsFiring                                                    OFFSET(get<bool>, {0x2E0, 1, 0, 0})
	DMember(bool)                                      IsReviving                                                  OFFSET(get<bool>, {0x2E1, 1, 0, 0})
	DMember(bool)                                      IsCarryingGem                                               OFFSET(get<bool>, {0x2E2, 1, 0, 0})
};

/// Class /Script/FSD.BoscoWeaponsFoldedOutNotify
/// Size: 0x0000 (0x000038 - 0x000038)
class UBoscoWeaponsFoldedOutNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FSD.BoscoWeaponsFoldedInNotify
/// Size: 0x0000 (0x000038 - 0x000038)
class UBoscoWeaponsFoldedInNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FSD.AbilityExitStrategy
/// Size: 0x0000 (0x000028 - 0x000028)
class UAbilityExitStrategy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.StandardExitStrategy
/// Size: 0x0000 (0x000028 - 0x000028)
class UStandardExitStrategy : public UAbilityExitStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.ChaseIfTargetSurvived
/// Size: 0x0000 (0x000028 - 0x000028)
class UChaseIfTargetSurvived : public UStandardExitStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.KeepCleaningStrategy
/// Size: 0x0000 (0x000028 - 0x000028)
class UKeepCleaningStrategy : public UStandardExitStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.BoscoAbillity
/// Size: 0x0048 (0x000030 - 0x000078)
class UBoscoAbillity : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     AbillityName                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  AbillityAnimation                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   VoiceOnUse                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(EBoscoAbillityTargetPreference)            TargetType                                                  OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(class UAbilityExitStrategy*)               ExitStrategy                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     WindUp                                                      OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     RechargeTime                                                OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   MaxCharges                                                  OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
	DMember(bool)                                      TargetActorIfValid                                          OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      RotateTowardsTarget                                         OFFSET(get<bool>, {0x71, 1, 0, 0})
};

/// Class /Script/FSD.BoscoSpawnActorAbillity
/// Size: 0x0008 (0x000078 - 0x000080)
class UBoscoSpawnActorAbillity : public UBoscoAbillity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UClass*)                             SpawnedActorClass                                           OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/FSD.BoscoProjectileAbillity
/// Size: 0x0008 (0x000078 - 0x000080)
class UBoscoProjectileAbillity : public UBoscoAbillity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Struct /Script/FSD.BoscoAbilityTarget
/// Size: 0x0018 (0x000000 - 0x000018)
class FBoscoAbilityTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(class AActor*)                             Actor                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/FSD.BoscoAbillityComponent
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UBoscoAbillityComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FMulticastInlineDelegate)                  OnAbillityChargeProgress                                    OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAbillityChargeUsed                                        OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAbilityDataUpdated                                        OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FBoscoAbilityTarget)                       Target                                                      OFFSET(getStruct<T>, {0xE8, 24, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UClass*)                             StreamClass                                                 OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TWeakObjectPtr<class ABosco*>)             AbillityOwner                                               OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               ProjectileUpgrades                                          OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(class UBoscoProjectileAbillity*)           AbilityData                                                 OFFSET(get<T>, {0x138, 8, 0, 0})
	DMember(bool)                                      InitializeAtBeginPlay                                       OFFSET(get<bool>, {0x158, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BoscoAbillityComponent.GetMaxCharges
	// int32_t GetMaxCharges(bool Total);                                                                                       // [0x17f76e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.BoscoAbillityComponent.GetIsSet
	// bool GetIsSet();                                                                                                         // [0x17f76b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.BoscoAbillityComponent.GetCharges
	// int32_t GetCharges();                                                                                                    // [0x17f7650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.BoscoCarryingDetailComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UBoscoCarryingDetailComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FRotator)                                  CustomRotaion                                               OFFSET(getStruct<T>, {0xB0, 12, 0, 0})
};

/// Class /Script/FSD.FSDAIController
/// Size: 0x0030 (0x000328 - 0x000358)
class AFSDAIController : public AAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	SMember(FMulticastInlineDelegate)                  OnMessageBehaviorTreeEvent                                  OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAlertedEvent                                              OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            LOSTraceChannel                                             OFFSET(get<T>, {0x348, 1, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   TargetedPlayer                                              OFFSET(get<T>, {0x34C, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDAIController.SetAlerted
	// void SetAlerted(bool isAlerted);                                                                                         // [0x187f0a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAIController.ResumeLogic
	// void ResumeLogic();                                                                                                      // [0x187ee00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAIController.RegisterBlackboardChanges
	// void RegisterBlackboardChanges(FName& Key);                                                                              // [0x187ecb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDAIController.Recieve_BlackboardValueChanged
	// void Recieve_BlackboardValueChanged(FName& KeyName);                                                                     // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.FSDAIController.PauseLogic
	// void PauseLogic();                                                                                                       // [0x187ebf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAIController.OnAttackingChanged
	// void OnAttackingChanged(bool attacking);                                                                                 // [0x187e960] Final|Native|Protected 
	// Function /Script/FSD.FSDAIController.GetIsAlerted
	// bool GetIsAlerted();                                                                                                     // [0x187e7f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.BoscoController
/// Size: 0x0378 (0x000358 - 0x0006D0)
class ABoscoController : public AFSDAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1744;

public:
	CMember(class UBehaviorTree*)                      BehaviourTree                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(float)                                     CheckOutOfTheWayInterval                                    OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     DistCountAsSameHit                                          OFFSET(get<float>, {0x36C, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFollowTargetChangedDelegate                               OFFSET(getStruct<T>, {0x370, 16, 0, 0})
	CMember(class UTerrainMaterial*)                   HearthstoneCrystalMaterial                                  OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(TArray<class UTerrainMaterial*>)           PlagueMaterials                                             OFFSET(get<T>, {0x388, 16, 0, 0})
	CMember(class UTerrainMaterial*)                   RiftCrystalMaterial                                         OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(TArray<class UClass*>)                     VacuumableTypes                                             OFFSET(get<T>, {0x3A8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           VacuumTargets                                               OFFSET(get<T>, {0x3B8, 16, 0, 0})
	DMember(float)                                     SearchForEnemiesInterval                                    OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     SaluteDelay                                                 OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     SaluteCooldown                                              OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     CheckGraberInterval                                         OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     MaxThrowStrength                                            OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     MaxThrowRange                                               OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     RepairRange                                                 OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     DistanceCountedAsClose                                      OFFSET(get<float>, {0x4A4, 4, 0, 0})
	SMember(FGameplayTagQuery)                         TargetQuery                                                 OFFSET(getStruct<T>, {0x4A8, 72, 0, 0})
	SMember(FGameplayTagQuery)                         AttackOnOrderQuery                                          OFFSET(getStruct<T>, {0x4F0, 72, 0, 0})
	SMember(FGameplayTagQuery)                         AttackOnSightQuery                                          OFFSET(getStruct<T>, {0x538, 72, 0, 0})
	SMember(FGameplayTagQuery)                         DefendTageQuery                                             OFFSET(getStruct<T>, {0x580, 72, 0, 0})
	SMember(FGameplayTagQuery)                         VacuumTagQuery                                              OFFSET(getStruct<T>, {0x5C8, 72, 0, 0})
	SMember(FGameplayTagQuery)                         MeleeTagQuery                                               OFFSET(getStruct<T>, {0x610, 72, 0, 0})
	DMember(float)                                     ReviveHealthPercentage                                      OFFSET(get<float>, {0x658, 4, 0, 0})
	CMember(class UDroneUseComponent*)                 CurrentUse                                                  OFFSET(get<T>, {0x660, 8, 0, 0})
	CMember(class AActor*)                             TryingToPickItem                                            OFFSET(get<T>, {0x668, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.BoscoController.ReviveTarget
	// void ReviveTarget();                                                                                                     // [0x17fc6d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BoscoController.ResetToFollowState
	// void ResetToFollowState();                                                                                               // [0x17fc6b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BoscoController.RegisterPlayer
	// void RegisterPlayer(class APlayerCharacter* APlayerCharacter);                                                           // [0x17fc590] Final|Native|Private 
	// Function /Script/FSD.BoscoController.PickupItem
	// void PickupItem();                                                                                                       // [0x17fc4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BoscoController.OnUseDone
	// void OnUseDone(int32_t TimesUsed);                                                                                       // [0x17fc440] Final|Native|Private 
	// Function /Script/FSD.BoscoController.OnSecondaryLaserPointer
	// void OnSecondaryLaserPointer(FLaserPointerTarget& HitInfo);                                                              // [0x17fc3a0] Native|Public|HasOutParms 
	// Function /Script/FSD.BoscoController.OnPlayerShout
	// void OnPlayerShout(class APlayerCharacter* APlayerCharacter);                                                            // [0x17fc220] Native|Public        
	// Function /Script/FSD.BoscoController.OnPlayerSalute
	// void OnPlayerSalute(class APlayerCharacter* aCharacater);                                                                // [0x17fc190] Final|Native|Public  
	// Function /Script/FSD.BoscoController.OnPlayerLeave
	// void OnPlayerLeave(class AFSDPlayerState* APlayerState);                                                                 // [0x17fc100] Native|Public        
	// Function /Script/FSD.BoscoController.OnLaserPointer
	// void OnLaserPointer(FLaserPointerTarget& HitInfo);                                                                       // [0x17fc060] Native|Public|HasOutParms 
	// Function /Script/FSD.BoscoController.OnJobFinished
	// void OnJobFinished();                                                                                                    // [0x17fc040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BoscoController.OnEscortTargetDied
	// void OnEscortTargetDied(class UHealthComponentBase* Health);                                                             // [0x17fbfb0] Final|Native|Protected 
	// Function /Script/FSD.BoscoController.OnCarriedUsed
	// void OnCarriedUsed(class APlayerCharacter* usedBy, EInputKeys Key);                                                      // [0x17fbee0] Final|Native|Public  
	// Function /Script/FSD.BoscoController.GetPointNearPlayers
	// FVector GetPointNearPlayers();                                                                                           // [0x17fbe30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.BoscoController.GetFollowTarget
	// class AActor* GetFollowTarget();                                                                                         // [0x17fbe00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BoscoController.GenerateRelativeLocation
	// void GenerateRelativeLocation(class AActor* aTarget, float aRange, float aHeightRestriction, float aMinRange, bool aTryToStayOutOfTheWay, bool aStayBehind); // [0x17fbbf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BoscoController.ConfirmPickup
	// void ConfirmPickup();                                                                                                    // [0x17fba40] Final|Native|Public  
	// Function /Script/FSD.BoscoController.CarriableDrop
	// void CarriableDrop();                                                                                                    // [0x17fb8d0] Final|Native|Protected 
};

/// Struct /Script/FSD.BossFight
/// Size: 0x0018 (0x000000 - 0x000018)
class FBossFight : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<class AActor*>)             BossActor                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UEnemyComponent*>)    EnemyComponent                                              OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UEnemyHealthComponent*>) HealthComponent                                          OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/FSD.SimpleBossFight
/// Size: 0x0020 (0x000028 - 0x000048)
class USimpleBossFight : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FBossFight)                                BossFight                                                   OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Class /Script/FSD.BossFightSubSystem
/// Size: 0x0050 (0x000030 - 0x000080)
class UBossFightSubSystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FMulticastInlineDelegate)                  OnNewBossFight                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBossFightRemoved                                          OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCustomWidgetAdded                                         OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCustomWidgetRemoved                                       OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	CMember(TArray<TScriptInterface<Class>>)           ActiveBossFights                                            OFFSET(get<T>, {0x70, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.BossFightSubSystem.RemoveCustomBossFightWidget
	// void RemoveCustomBossFightWidget(class UUserWidget* InWidget);                                                           // [0x17fc620] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BossFightSubSystem.RegisterBossFight
	// void RegisterBossFight(TScriptInterface<Class> BossFight);                                                               // [0x17fc4f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BossFightSubSystem.DeregisterBossFight
	// void DeregisterBossFight(class AActor* boss);                                                                            // [0x17fbb60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BossFightSubSystem.CustomWidgetDelegate__DelegateSignature
	// void CustomWidgetDelegate__DelegateSignature(class UUserWidget* InWidget);                                               // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.BossFightSubSystem.BossFightDelegate__DelegateSignature
	// void BossFightDelegate__DelegateSignature(TScriptInterface<Class>& BossFight);                                           // [0x1d6f900] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FSD.BossFightSubSystem.AddCustomBossFightWidget
	// void AddCustomBossFightWidget(class UUserWidget* InWidget);                                                              // [0x17fb610] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.BossFightInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UBossFightInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.BossFightInterface.IsStillValid
	// bool IsStillValid();                                                                                                     // [0x17fbeb0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.BossFightInterface.GetWidgetClass
	// class UClass* GetWidgetClass();                                                                                          // [0x17fbe70] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.BossFightInterface.GetBossActor
	// class AActor* GetBossActor();                                                                                            // [0x17fbdd0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.BossFightWidget
/// Size: 0x0010 (0x000260 - 0x000270)
class UBossFightWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(TScriptInterface<Class>)                   BossFight                                                   OFFSET(get<T>, {0x260, 16, 0, 0})
};

/// Class /Script/FSD.Grenade
/// Size: 0x00C8 (0x000220 - 0x0002E8)
class AGrenade : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	CMember(class UClass*)                             CrossHairType                                               OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UProjectileMovementComponent*)       Movement                                                    OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(bool)                                      CanCook                                                     OFFSET(get<bool>, {0x250, 1, 0, 0})
	DMember(float)                                     cookTime                                                    OFFSET(get<float>, {0x254, 4, 0, 0})
	CMember(TArray<FVector2D>)                         CookTickTimeline                                            OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(class USoundCue*)                          CookingSound                                                OFFSET(get<T>, {0x268, 8, 0, 0})
	DMember(float)                                     ExplosionDelay                                              OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(bool)                                      ExplodeOnImpact                                             OFFSET(get<bool>, {0x274, 1, 0, 0})
	SMember(FRotator)                                  ThrowDirectionOffset                                        OFFSET(getStruct<T>, {0x278, 12, 0, 0})
	DMember(int32_t)                                   MaxGrenades                                                 OFFSET(get<int32_t>, {0x284, 4, 0, 0})
	DMember(bool)                                      HasExploded                                                 OFFSET(get<bool>, {0x288, 1, 0, 0})
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UClass*)                             WeaponPreviewClass                                          OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UClass*)                             LoadoutProxy                                                OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UStaticMesh*)                        HandAttachMesh                                              OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UGrenadeProjectionSettings*)         ProjectionSettings                                          OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class USoundCue*)                          ImpactGroundSound                                           OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UParticleSystem*)                    ImpactGroundParticles                                       OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UGrenadeAnimationSet*)               GrenadeAnimationSetOverride                                 OFFSET(get<T>, {0x2D8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.Grenade.OnRep_HasExploded
	// void OnRep_HasExploded();                                                                                                // [0x18dccd0] Final|Native|Protected 
	// Function /Script/FSD.Grenade.OnExploded
	// void OnExploded();                                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Grenade.IsNonFriendlyPawn
	// bool IsNonFriendlyPawn(class AActor* Actor);                                                                             // [0x18dc110] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Grenade.IsNonFriendly
	// bool IsNonFriendly(class AActor* Actor);                                                                                 // [0x18dc070] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Grenade.GetWeaponViewClass
	// class UClass* GetWeaponViewClass();                                                                                      // [0x18dbee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Grenade.GetGrenadeDefaultObject
	// class AGrenade* GetGrenadeDefaultObject(class UClass* GrenadeClass);                                                     // [0x18dbde0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Grenade.ActorWasHit
	// void ActorWasHit(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);             // [0x18db8e0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Struct /Script/FSD.BoomerangSyncer
/// Size: 0x002C (0x000000 - 0x00002C)
class FBoomerangSyncer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	SMember(FVector)                                   PrevPos                                                     OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   NextPos                                                     OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	DMember(bool)                                      IsGoingBack                                                 OFFSET(get<bool>, {0x24, 1, 0, 0})
	DMember(float)                                     TotalTime                                                   OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FSD.BoomerangMover
/// Size: 0x0060 (0x000000 - 0x000060)
class FBoomerangMover : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FRotator)                                  StartRotation                                               OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   PrevPos                                                     OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   NextPos                                                     OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0x24, 12, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     TimeScale                                                   OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     TickRate                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TickTime                                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     AccumulatedTime                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     TotalTime                                                   OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     StartSmoothTime                                             OFFSET(get<float>, {0x48, 4, 0, 0})
	CMember(class UCurveVector*)                       ArcCurve                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(bool)                                      IsGoingBack                                                 OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/FSD.BouncyBoomerang
/// Size: 0x0208 (0x0002E8 - 0x0004F0)
class ABouncyBoomerang : public AGrenade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x2F0, 8, 0, 0})
	DMember(int32_t)                                   BouncesLeft                                                 OFFSET(get<int32_t>, {0x2F8, 4, 0, 0})
	DMember(float)                                     ConeRange                                                   OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     ConeWidth                                                   OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     BounceRange                                                 OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     ToTargetSpeed                                               OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     TurnToTargetSpeed                                           OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     PathToDistPercent                                           OFFSET(get<float>, {0x310, 4, 0, 0})
	SMember(FVector)                                   DefaultLocalBounceVector                                    OFFSET(getStruct<T>, {0x314, 12, 0, 0})
	SMember(FVector)                                   BounceVectorRandomness                                      OFFSET(getStruct<T>, {0x320, 12, 0, 0})
	DMember(float)                                     InitialBounceVectorCof                                      OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     ArcTimeScale                                                OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     GoBackAcceleration                                          OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     GoBackHardness                                              OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     TerrainCheckUpdateRate                                      OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     HitEnemyRange                                               OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(float)                                     HitPlayerRange                                              OFFSET(get<float>, {0x344, 4, 0, 0})
	DMember(float)                                     CatchSoundRange                                             OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     HitTerrainRange                                             OFFSET(get<float>, {0x34C, 4, 0, 0})
	SMember(FVector)                                   CatchLocationOffset                                         OFFSET(getStruct<T>, {0x354, 12, 0, 0})
	CMember(TArray<class UClass*>)                     OnDamageStatusEffects                                       OFFSET(get<T>, {0x360, 16, 0, 0})
	CMember(class UNiagaraSystem*)                     EnemyHitNiagaraSystem                                       OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UParticleSystem*)                    EnemyHitParticleSystem                                      OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class USoundCue*)                          ImpactSound                                                 OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class USoundCue*)                          ReturnCatchSound                                            OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class USoundCue*)                          ThrowBoomerangSound                                         OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class USceneComponent*)                    MeshPivot                                                   OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class USceneComponent*)                    YawPivot                                                    OFFSET(get<T>, {0x3A0, 8, 0, 0})
	DMember(float)                                     MeshRotationRate                                            OFFSET(get<float>, {0x3A8, 4, 0, 0})
	CMember(class AFSDPawn*)                           TargetEnemy                                                 OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class AFSDPawn*)                           PredictedNextEnemy                                          OFFSET(get<T>, {0x3B8, 8, 0, 0})
	DMember(uint32_t)                                  RandomSeed                                                  OFFSET(get<uint32_t>, {0x3C0, 4, 0, 0})
	CMember(EBoomerangState)                           State                                                       OFFSET(get<T>, {0x3C4, 1, 0, 0})
	SMember(FBoomerangSyncer)                          PosVel                                                      OFFSET(getStruct<T>, {0x3C8, 44, 0, 0})
	SMember(FBoomerangMover)                           Mover                                                       OFFSET(getStruct<T>, {0x3F8, 96, 0, 0})


	/// Functions
	// Function /Script/FSD.BouncyBoomerang.OnRep_TargetEnemy
	// void OnRep_TargetEnemy(class AFSDPawn* lastEnemy);                                                                       // [0x17fc310] Final|Native|Protected 
	// Function /Script/FSD.BouncyBoomerang.OnRep_State
	// void OnRep_State();                                                                                                      // [0x17fc2f0] Final|Native|Protected 
	// Function /Script/FSD.BouncyBoomerang.OnRep_RandomSeed
	// void OnRep_RandomSeed();                                                                                                 // [0x17fc2d0] Final|Native|Protected 
	// Function /Script/FSD.BouncyBoomerang.OnRep_PosVel
	// void OnRep_PosVel();                                                                                                     // [0x17fc2b0] Final|Native|Protected 
	// Function /Script/FSD.BouncyBoomerang.CheckIfCollidingWithTerrain
	// void CheckIfCollidingWithTerrain();                                                                                      // [0x17fb8f0] Final|Native|Protected 
};

/// Class /Script/FSD.BoxFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UBoxFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.BoxFunctionLibrary.CreateBoxAt
	// FBox CreateBoxAt(FVector Location, FVector Size);                                                                        // [0x17fba60] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.BoxFunctionLibrary.ClosestPointToBox
	// FVector ClosestPointToBox(FVector Pos, FBox& Box);                                                                       // [0x17fb910] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.BoxFunctionLibrary.BoxSize
	// float BoxSize(FBox Box);                                                                                                 // [0x17fb800] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.BoxFunctionLibrary.BoxExtends
	// FVector BoxExtends(FBox Box);                                                                                            // [0x17fb750] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.BoxFunctionLibrary.BoxCenter
	// FVector BoxCenter(FBox Box);                                                                                             // [0x17fb6a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GenerationComponent
/// Size: 0x0000 (0x000450 - 0x000450)
class UGenerationComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
};

/// Class /Script/FSD.BoxGenerationComponent
/// Size: 0x0020 (0x000450 - 0x000470)
class UBoxGenerationComponent : public UGenerationComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	SMember(FVector)                                   Extends                                                     OFFSET(getStruct<T>, {0x450, 12, 0, 0})
	DMember(bool)                                      IsCarver                                                    OFFSET(get<bool>, {0x45C, 1, 0, 0})
	DMember(float)                                     NoiseRange                                                  OFFSET(get<float>, {0x460, 4, 0, 0})
	DMember(bool)                                      Visible                                                     OFFSET(get<bool>, {0x464, 1, 0, 0})
	CMember(class UFloodFillSettings*)                 Noise                                                       OFFSET(get<T>, {0x468, 8, 0, 0})
};

/// Class /Script/FSD.GenerationItem
/// Size: 0x0008 (0x000220 - 0x000228)
class AGenerationItem : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	DMember(bool)                                      Visible                                                     OFFSET(get<bool>, {0x220, 1, 0, 0})
	DMember(bool)                                      AddToLevel                                                  OFFSET(get<bool>, {0x221, 1, 0, 0})
};

/// Class /Script/FSD.BoxGenerationItem
/// Size: 0x0008 (0x000228 - 0x000230)
class ABoxGenerationItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UBoxGenerationComponent*)            BoxComponent                                                OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/FSD.BTDecorator_AttackInRange
/// Size: 0x0008 (0x000090 - 0x000098)
class UBTDecorator_AttackInRange : public UBTDecorator_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FName)                                     AttackName                                                  OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/FSD.BTDecorator_CanSeeTarget
/// Size: 0x0058 (0x000068 - 0x0000C0)
class UBTDecorator_CanSeeTarget : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(bool)                                      UseAsync                                                    OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(bool)                                      DebugDraw                                                   OFFSET(get<bool>, {0x69, 1, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     Interval                                                    OFFSET(get<float>, {0x70, 4, 0, 0})
	SMember(FVector)                                   EyeLocationOffset                                           OFFSET(getStruct<T>, {0x74, 12, 0, 0})
	SMember(FName)                                     EyeSocketName                                               OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x88, 40, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            TraceChannel                                                OFFSET(get<T>, {0xB0, 1, 0, 0})
	DMember(bool)                                      UseTargetable                                               OFFSET(get<bool>, {0xB8, 1, 0, 0})
};

/// Class /Script/FSD.BTDecorator_IsUnderCeiling
/// Size: 0x0048 (0x000068 - 0x0000B0)
class UBTDecorator_IsUnderCeiling : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     ProjectileAttackName                                        OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	DMember(float)                                     Acceptance                                                  OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     TraceWidth                                                  OFFSET(get<float>, {0x7C, 4, 0, 0})
	DMember(bool)                                      DrawDebug                                                   OFFSET(get<bool>, {0x80, 1, 0, 0})
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x88, 40, 0, 0})
};

/// Class /Script/FSD.BTDecorator_CheckObstruction
/// Size: 0x0048 (0x000068 - 0x0000B0)
class UBTDecorator_CheckObstruction : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	DMember(float)                                     range                                                       OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(bool)                                      UseOwnerCenterMass                                          OFFSET(get<bool>, {0x6C, 1, 0, 0})
	SMember(FVector)                                   EyeLocationOffset                                           OFFSET(getStruct<T>, {0x70, 12, 0, 0})
	SMember(FName)                                     RangedSocket                                                OFFSET(getStruct<T>, {0x7C, 8, 0, 0})
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x88, 40, 0, 0})
};

/// Class /Script/FSD.BTDecorator_CheckPlayerCount
/// Size: 0x0008 (0x000068 - 0x000070)
class UBTDecorator_CheckPlayerCount : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(int32_t)                                   playerCount                                                 OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(bool)                                      AllowLessThanCount                                          OFFSET(get<bool>, {0x6C, 1, 0, 0})
};

/// Class /Script/FSD.BTDecorator_ConditionalGuard
/// Size: 0x0030 (0x000068 - 0x000098)
class UBTDecorator_ConditionalGuard : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FBlackboardKeySelector)                    GuardKey                                                    OFFSET(getStruct<T>, {0x68, 40, 0, 0})
	DMember(bool)                                      InvertLogic                                                 OFFSET(get<bool>, {0x90, 1, 0, 0})
};

/// Class /Script/FSD.BTDecorator_FormationGuard
/// Size: 0x0000 (0x000068 - 0x000068)
class UBTDecorator_FormationGuard : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
};

/// Class /Script/FSD.BTDecorator_HasValidTrajectory
/// Size: 0x0000 (0x000090 - 0x000090)
class UBTDecorator_HasValidTrajectory : public UBTDecorator_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
};

/// Class /Script/FSD.BTDecorator_InRange
/// Size: 0x0010 (0x000090 - 0x0000A0)
class UBTDecorator_InRange : public UBTDecorator_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(float)                                     MinRange                                                    OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x94, 4, 0, 0})
	SMember(FAIDistanceType)                           GeometricDistanceType                                       OFFSET(getStruct<T>, {0x98, 1, 0, 0})
};

/// Class /Script/FSD.BTDecorator_InRangeBB
/// Size: 0x0058 (0x000090 - 0x0000E8)
class UBTDecorator_InRangeBB : public UBTDecorator_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FBlackboardKeySelector)                    MinRangeKey                                                 OFFSET(getStruct<T>, {0x90, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    MaxRangeKey                                                 OFFSET(getStruct<T>, {0xB8, 40, 0, 0})
	SMember(FAIDistanceType)                           GeometricDistanceType                                       OFFSET(getStruct<T>, {0xE0, 1, 0, 0})
};

/// Class /Script/FSD.BTDecorator_InRangeEx
/// Size: 0x0010 (0x000090 - 0x0000A0)
class UBTDecorator_InRangeEx : public UBTDecorator_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(float)                                     MinRange                                                    OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x94, 4, 0, 0})
	SMember(FAIDistanceType)                           GeometricDistanceType                                       OFFSET(getStruct<T>, {0x98, 1, 0, 0})
};

/// Class /Script/FSD.BTDecorator_InRangeOfTarget
/// Size: 0x0008 (0x000090 - 0x000098)
class UBTDecorator_InRangeOfTarget : public UBTDecorator_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(float)                                     MinRange                                                    OFFSET(get<float>, {0x90, 4, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x94, 4, 0, 0})
};

/// Class /Script/FSD.BTDecorator_IsFacing
/// Size: 0x0008 (0x000090 - 0x000098)
class UBTDecorator_IsFacing : public UBTDecorator_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(float)                                     MaxAngle                                                    OFFSET(get<float>, {0x90, 4, 0, 0})
};

/// Class /Script/FSD.BTDecorator_LockRotation
/// Size: 0x0008 (0x000068 - 0x000070)
class UBTDecorator_LockRotation : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FSD.BTDecorator_MessageAI
/// Size: 0x0010 (0x000068 - 0x000078)
class UBTDecorator_MessageAI : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     ActivationMessage                                           OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FName)                                     DeactivationMessage                                         OFFSET(getStruct<T>, {0x70, 8, 0, 0})
};

/// Class /Script/FSD.BTDecorator_ModifySpeed
/// Size: 0x0008 (0x000068 - 0x000070)
class UBTDecorator_ModifySpeed : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     SpeedModifier                                               OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/FSD.BTDecorator_RandomChance
/// Size: 0x0008 (0x000068 - 0x000070)
class UBTDecorator_RandomChance : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     Chance                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/FSD.BTDecorator_RandomCooldown
/// Size: 0x0030 (0x000068 - 0x000098)
class UBTDecorator_RandomCooldown : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRandRange)                                CoolDownTime                                                OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FBlackboardKeySelector)                    CooldownTimeModifier                                        OFFSET(getStruct<T>, {0x70, 40, 0, 0})
};

/// Class /Script/FSD.BTDecorator_SetTagRandomCooldown
/// Size: 0x0018 (0x000068 - 0x000080)
class UBTDecorator_SetTagRandomCooldown : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FGameplayTag)                              CooldownTag                                                 OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FRandRange)                                CooldownDuration                                            OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	DMember(bool)                                      bAddToExistingDuration                                      OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      TriggerOnActivation                                         OFFSET(get<bool>, {0x79, 1, 0, 0})
};

/// Class /Script/FSD.BTDecorator_TagRandomCooldown
/// Size: 0x0018 (0x000068 - 0x000080)
class UBTDecorator_TagRandomCooldown : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FGameplayTag)                              CooldownTag                                                 OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FRandRange)                                CooldownDuration                                            OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	DMember(bool)                                      bAddToExistingDuration                                      OFFSET(get<bool>, {0x78, 1, 0, 0})
	DMember(bool)                                      bActivatesCooldown                                          OFFSET(get<bool>, {0x79, 1, 0, 0})
};

/// Class /Script/FSD.BTDecorator_RandomLoop
/// Size: 0x0008 (0x000068 - 0x000070)
class UBTDecorator_RandomLoop : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     Chance                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/FSD.BTDecorator_VariableLoop
/// Size: 0x0008 (0x000068 - 0x000070)
class UBTDecorator_VariableLoop : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FIRandRange)                               NumLoops                                                    OFFSET(getStruct<T>, {0x68, 8, 0, 0})
};

/// Class /Script/FSD.BTDecorator_SharedCooldown
/// Size: 0x0030 (0x000068 - 0x000098)
class UBTDecorator_SharedCooldown : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRandRange)                                CoolDownTime                                                OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FBlackboardKeySelector)                    CooldownKey                                                 OFFSET(getStruct<T>, {0x70, 40, 0, 0})
};

/// Class /Script/FSD.BTDecorator_SharedAttackCooldown
/// Size: 0x0030 (0x000068 - 0x000098)
class UBTDecorator_SharedAttackCooldown : public UBTDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FRandRange)                                CoolDownTime                                                OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FBlackboardKeySelector)                    CooldownKey                                                 OFFSET(getStruct<T>, {0x70, 40, 0, 0})
};

/// Class /Script/FSD.BTServer_ChaseTarget
/// Size: 0x0090 (0x000070 - 0x000100)
class UBTServer_ChaseTarget : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	DMember(bool)                                      MustBeAlive                                                 OFFSET(get<bool>, {0x98, 1, 0, 0})
	DMember(bool)                                      MustBeUnparalyzed                                           OFFSET(get<bool>, {0x99, 1, 0, 0})
	DMember(bool)                                      PreferNewTarget                                             OFFSET(get<bool>, {0x9A, 1, 0, 0})
	SMember(FGameplayTag)                              SwitchTargetCooldownTag                                     OFFSET(getStruct<T>, {0x9C, 8, 0, 0})
	SMember(FGameplayTagQuery)                         TargetingQuery                                              OFFSET(getStruct<T>, {0xA8, 72, 0, 0})
	DMember(bool)                                      IsFlying                                                    OFFSET(get<bool>, {0xF0, 1, 0, 0})
	DMember(bool)                                      CanShoot                                                    OFFSET(get<bool>, {0xF1, 1, 0, 0})
	DMember(float)                                     TargetingRange                                              OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     SwitchTargetTime                                            OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     SwitchTargetDeviation                                       OFFSET(get<float>, {0xFC, 4, 0, 0})
};

/// Class /Script/FSD.BTService_CheckIsFloating
/// Size: 0x0058 (0x000070 - 0x0000C8)
class UBTService_CheckIsFloating : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FBlackboardKeySelector)                    TargetDestKey                                               OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    IsFloatingKey                                               OFFSET(getStruct<T>, {0x98, 40, 0, 0})
	DMember(float)                                     MinDistanceToTerrain                                        OFFSET(get<float>, {0xC0, 4, 0, 0})
};

/// Class /Script/FSD.BTService_FindClosest
/// Size: 0x0038 (0x000070 - 0x0000A8)
class UBTService_FindClosest : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	CMember(class UTargetValidator*)                   TargetValidator                                             OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(bool)                                      MustBeAlive                                                 OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      OwnerIsMultiTargeter                                        OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(bool)                                      ClearTargetIfNotValid                                       OFFSET(get<bool>, {0xA2, 1, 0, 0})
	DMember(float)                                     TargetingRange                                              OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/FSD.BTService_FindPlayer
/// Size: 0x0038 (0x000070 - 0x0000A8)
class UBTService_FindPlayer : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	DMember(bool)                                      MustBeAlive                                                 OFFSET(get<bool>, {0x98, 1, 0, 0})
	DMember(bool)                                      SwithToBetterTargets                                        OFFSET(get<bool>, {0x99, 1, 0, 0})
	DMember(bool)                                      RegisterForPositioning                                      OFFSET(get<bool>, {0x9A, 1, 0, 0})
	DMember(bool)                                      IsFlying                                                    OFFSET(get<bool>, {0x9B, 1, 0, 0})
	DMember(bool)                                      CanShoot                                                    OFFSET(get<bool>, {0x9C, 1, 0, 0})
	DMember(bool)                                      OwnerIsMultiTargeter                                        OFFSET(get<bool>, {0x9D, 1, 0, 0})
	DMember(float)                                     TargetingRange                                              OFFSET(get<float>, {0xA0, 4, 0, 0})
};

/// Class /Script/FSD.BTService_FindPlayerInLineOfSight
/// Size: 0x0008 (0x0000A8 - 0x0000B0)
class UBTService_FindPlayerInLineOfSight : public UBTService_FindPlayer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FName)                                     TraceSocketName                                             OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
};

/// Class /Script/FSD.BTService_FindAttackable
/// Size: 0x0080 (0x000070 - 0x0000F0)
class UBTService_FindAttackable : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	DMember(bool)                                      MustBeAlive                                                 OFFSET(get<bool>, {0x98, 1, 0, 0})
	DMember(bool)                                      SwithToBetterTargets                                        OFFSET(get<bool>, {0x99, 1, 0, 0})
	DMember(bool)                                      RegisterForPositioning                                      OFFSET(get<bool>, {0x9A, 1, 0, 0})
	DMember(bool)                                      IsFlying                                                    OFFSET(get<bool>, {0x9B, 1, 0, 0})
	DMember(bool)                                      CanShoot                                                    OFFSET(get<bool>, {0x9C, 1, 0, 0})
	DMember(float)                                     TargetingRange                                              OFFSET(get<float>, {0xA0, 4, 0, 0})
	SMember(FGameplayTagQuery)                         TargetQuery                                                 OFFSET(getStruct<T>, {0xA8, 72, 0, 0})
};

/// Class /Script/FSD.BTService_SetStance
/// Size: 0x0030 (0x000070 - 0x0000A0)
class UBTService_SetStance : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FBlackboardKeySelector)                    TargetLocationKey                                           OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0x98, 4, 0, 0})
};

/// Class /Script/FSD.BTService_CheckPathToTarget
/// Size: 0x0050 (0x000070 - 0x0000C0)
class UBTService_CheckPathToTarget : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    ResultKey                                                   OFFSET(getStruct<T>, {0x98, 40, 0, 0})
};

/// Class /Script/FSD.BTService_UpdateMoveToTarget
/// Size: 0x0058 (0x000070 - 0x0000C8)
class UBTService_UpdateMoveToTarget : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    TargetLocationKey                                           OFFSET(getStruct<T>, {0x98, 40, 0, 0})
	DMember(float)                                     LookAheadTime                                               OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     VerticalOffset                                              OFFSET(get<float>, {0xC4, 4, 0, 0})
};

/// Class /Script/FSD.BTService_UpdateFlyingMoveToTarget
/// Size: 0x0058 (0x000070 - 0x0000C8)
class UBTService_UpdateFlyingMoveToTarget : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    TargetLocationKey                                           OFFSET(getStruct<T>, {0x98, 40, 0, 0})
	DMember(float)                                     LookAheadTime                                               OFFSET(get<float>, {0xC0, 4, 0, 0})
};

/// Class /Script/FSD.BTService_UpdateMoveInFormation
/// Size: 0x0038 (0x000070 - 0x0000A8)
class UBTService_UpdateMoveInFormation : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     LookAheadTime                                               OFFSET(get<float>, {0x70, 4, 0, 0})
	SMember(FBlackboardKeySelector)                    TargetLocationKey                                           OFFSET(getStruct<T>, {0x78, 40, 0, 0})
	DMember(float)                                     AttackerRadius                                              OFFSET(get<float>, {0xA0, 4, 0, 0})
};

/// Class /Script/FSD.BTTask_Attack
/// Size: 0x0030 (0x000070 - 0x0000A0)
class UBTTask_Attack : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FName)                                     AttackName                                                  OFFSET(getStruct<T>, {0x98, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.BTTask_Attack.OnAttackCompleted
	// void OnAttackCompleted(class UBehaviorTreeComponent* btComponent, bool& wasSuccess);                                     // [0x1800e70] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FSD.BTTask_BallisticMove
/// Size: 0x0000 (0x000098 - 0x000098)
class UBTTask_BallisticMove : public UBTTask_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.BTTask_FaceTarget
/// Size: 0x0030 (0x000070 - 0x0000A0)
class UBTTask_FaceTarget : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	DMember(float)                                     MinAngle                                                    OFFSET(get<float>, {0x98, 4, 0, 0})
};

/// Class /Script/FSD.BTTask_FakePhysicsMove
/// Size: 0x0030 (0x000098 - 0x0000C8)
class UBTTask_FakePhysicsMove : public UBTTask_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(float)                                     MinTime                                                     OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     EndMaxSpeed                                                 OFFSET(get<float>, {0x9C, 4, 0, 0})
	SMember(FVector)                                   InitialLocalVelocity                                        OFFSET(getStruct<T>, {0xA0, 12, 0, 0})
	SMember(FVector)                                   InitialGlobalVelocity                                       OFFSET(getStruct<T>, {0xAC, 12, 0, 0})
	DMember(bool)                                      EndRequireSolidGround                                       OFFSET(get<bool>, {0xB8, 1, 0, 0})
	CMember(class UFakeMoverSettings*)                 MoveSettings                                                OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Class /Script/FSD.BTTask_FindPointNearCeiling
/// Size: 0x0010 (0x000098 - 0x0000A8)
class UBTTask_FindPointNearCeiling : public UBTTask_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     CloseToCeilingBias                                          OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     LookForCeilingLength                                        OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     SearchRadius                                                OFFSET(get<float>, {0xA0, 4, 0, 0})
};

/// Class /Script/FSD.BTTask_FindPointNearTarget
/// Size: 0x0068 (0x000070 - 0x0000D8)
class UBTTask_FindPointNearTarget : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    LocationKey                                                 OFFSET(getStruct<T>, {0x98, 40, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xC0, 4, 0, 0})
	SMember(FVector)                                   ManualOffset                                                OFFSET(getStruct<T>, {0xC4, 12, 0, 0})
	DMember(bool)                                      FromCenterOfMass                                            OFFSET(get<bool>, {0xD0, 1, 0, 0})
};

/// Class /Script/FSD.BTTask_MoveToTarget
/// Size: 0x0008 (0x000098 - 0x0000A0)
class UBTTask_MoveToTarget : public UBTTask_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	DMember(float)                                     AcceptableRadius                                            OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(bool)                                      ToCenterOfMass                                              OFFSET(get<bool>, {0x9C, 1, 0, 0})
};

/// Class /Script/FSD.BTTask_MoveToSlot
/// Size: 0x0010 (0x000098 - 0x0000A8)
class UBTTask_MoveToSlot : public UBTTask_BlackboardBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(float)                                     AcceptableRadius                                            OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     LookAheadTime                                               OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     VerticalOffset                                              OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     UpdateRate                                                  OFFSET(get<float>, {0xA4, 4, 0, 0})
};

/// Class /Script/FSD.BTTask_SetAttacking
/// Size: 0x0028 (0x000070 - 0x000098)
class UBTTask_SetAttacking : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
};

/// Class /Script/FSD.BTTask_TriggerAI
/// Size: 0x0008 (0x000070 - 0x000078)
class UBTTask_TriggerAI : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     TriggerName                                                 OFFSET(getStruct<T>, {0x70, 8, 0, 0})
};

/// Class /Script/FSD.BTTask_MessageAI
/// Size: 0x0008 (0x000070 - 0x000078)
class UBTTask_MessageAI : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FName)                                     MessageName                                                 OFFSET(getStruct<T>, {0x70, 8, 0, 0})
};

/// Class /Script/FSD.BTTask_SetCondition
/// Size: 0x0030 (0x000070 - 0x0000A0)
class UBTTask_SetCondition : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FBlackboardKeySelector)                    ConditionalKey                                              OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	DMember(bool)                                      Value                                                       OFFSET(get<bool>, {0x98, 1, 0, 0})
};

/// Class /Script/FSD.BuildRestriction
/// Size: 0x0008 (0x000030 - 0x000038)
class UBuildRestriction : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   BuildType                                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   Platform                                                    OFFSET(get<int32_t>, {0x34, 4, 0, 0})
};

/// Class /Script/FSD.BurrowComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UBurrowComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:


	/// Functions
	// Function /Script/FSD.BurrowComponent.Unburrow
	// void Unburrow(class UAnimMontage* customMontage);                                                                        // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.BurrowComponent.CallBurrow
	// void CallBurrow(bool isBurrowing, class UAnimMontage* customMontage);                                                    // [0x18008b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BurrowComponent.Burrow
	// void Burrow(class UAnimMontage* customMontage);                                                                          // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.BurstWeapon
/// Size: 0x0038 (0x000780 - 0x0007B8)
class ABurstWeapon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1976;

public:
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(class UDamageComponent*)                   BurstFireBonusDamage                                        OFFSET(get<T>, {0x788, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.BurstWeapon.OnTargetDamaged
	// void OnTargetDamaged(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x1800f50] Final|Native|Protected 
	// Function /Script/FSD.BurstWeapon.OnReadyToFire
	// void OnReadyToFire();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Struct /Script/FSD.DetailedTagSet
/// Size: 0x0050 (0x000000 - 0x000050)
class FDetailedTagSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<UDetailedTag*>)                       Tags                                                        OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FSD.ButtonData
/// Size: 0x0070 (0x000000 - 0x000070)
class FButtonData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UObject*)                            Object                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FString)                                   String                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FDetailedTagSet)                           Tags                                                        OFFSET(getStruct<T>, {0x20, 80, 0, 0})
};

/// Class /Script/FSD.ButtonWidget
/// Size: 0x00F0 (0x000260 - 0x000350)
class UButtonWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FMulticastInlineDelegate)                  OnClicked                                                   OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHovered                                                   OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUnhovered                                                 OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEnabledChanged                                            OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSelectedChanged                                           OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDataChanged                                               OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	DMember(bool)                                      bButtonEnabled                                              OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      bButtonSelected                                             OFFSET(get<bool>, {0x2C1, 1, 0, 0})
	SMember(FButtonData)                               Data                                                        OFFSET(getStruct<T>, {0x2C8, 112, 0, 0})
	DMember(bool)                                      bButtonHovered                                              OFFSET(get<bool>, {0x338, 1, 0, 0})
	CMember(class UButton*)                            InnerButton                                                 OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UWidgetAnimation*)                   AnimButtonHover                                             OFFSET(get<T>, {0x348, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ButtonWidget.Unhovered
	// void Unhovered();                                                                                                        // [0x1801400] Final|Native|Protected 
	// Function /Script/FSD.ButtonWidget.ToggleButtonSelected
	// bool ToggleButtonSelected();                                                                                             // [0x18013b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ButtonWidget.SetButtonSelected
	// void SetButtonSelected(bool InSelected);                                                                                 // [0x1801320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ButtonWidget.SetButtonEnabled
	// void SetButtonEnabled(bool InEnabled);                                                                                   // [0x1801290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ButtonWidget.SetButtonData
	// void SetButtonData(FButtonData& InData);                                                                                 // [0x1801130] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ButtonWidget.ReceivedUnhovered
	// void ReceivedUnhovered();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ButtonWidget.ReceivedSelectedChanged
	// void ReceivedSelectedChanged();                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ButtonWidget.ReceivedHovered
	// void ReceivedHovered();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ButtonWidget.ReceivedEnabledChanged
	// void ReceivedEnabledChanged();                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ButtonWidget.ReceivedDataChanged
	// void ReceivedDataChanged();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ButtonWidget.ReceivedClicked
	// void ReceivedClicked();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ButtonWidget.Hovered
	// void Hovered();                                                                                                          // [0x1800d10] Final|Native|Protected 
	// Function /Script/FSD.ButtonWidget.Click
	// void Click();                                                                                                            // [0x1800ae0] Final|Native|Public  
	// Function /Script/FSD.ButtonWidget.ClearEventBindings
	// void ClearEventBindings();                                                                                               // [0x1800ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ButtonWidget.ButtonWidgetDelegate__DelegateSignature
	// void ButtonWidgetDelegate__DelegateSignature(class UButtonWidget* InButton);                                             // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.ButtonUserWidget
/// Size: 0x0018 (0x000260 - 0x000278)
class UButtonUserWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:


	/// Functions
	// Function /Script/FSD.ButtonUserWidget.InnerButtonUnhovered
	// void InnerButtonUnhovered();                                                                                             // [0x1800d50] Final|Native|Private 
	// Function /Script/FSD.ButtonUserWidget.InnerButtonHovered
	// void InnerButtonHovered();                                                                                               // [0x1800d30] Final|Native|Private 
	// Function /Script/FSD.ButtonUserWidget.InnerButtonGetToolTip
	// class UWidget* InnerButtonGetToolTip();                                                                                  // [0xbd27d0] Final|Native|Private 
	// Function /Script/FSD.ButtonUserWidget.InnerButtonClicked
	// void InnerButtonClicked();                                                                                               // [0xbd29a0] Final|Native|Private 
};

/// Class /Script/FSD.CalldownItem
/// Size: 0x0060 (0x0003E0 - 0x000440)
class ACalldownItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(class UClass*)                             ItemPlacerClass                                             OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UClass*)                             SupplyPodClass                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UResourceData*)                      ResouceRequired                                             OFFSET(get<T>, {0x3F0, 8, 0, 0})
	SMember(FText)                                     OrderDescription                                            OFFSET(getStruct<T>, {0x3F8, 24, 0, 0})
	SMember(FText)                                     LogText                                                     OFFSET(getStruct<T>, {0x410, 24, 0, 0})
	CMember(class UClass*)                             ResupplyBeacon                                              OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UItemPlacerAggregator*)              ItemPlacerInstance                                          OFFSET(get<T>, {0x430, 8, 0, 0})
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     CooldownRemaining                                           OFFSET(get<float>, {0x43C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CalldownItem.Server_Call_Resupply
	// void Server_Call_Resupply(FVector Location);                                                                             // [0x18010b0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
};

/// Class /Script/FSD.Campaign
/// Size: 0x0188 (0x000028 - 0x0001B0)
class UCampaign : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(bool)                                      HasMissions                                                 OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(TArray<class UCampaignMission*>)           missions                                                    OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<class UReward*>)                    RewardsOnCampaignStart                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<class UReward*>)                    RewardsOnCompletion                                         OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(class UDialogDataAsset*)                   CampaignCompleteShout                                       OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<class UCampaignRequirement*>)       Requirements                                                OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<class UCampaignRequirement*>)       VisibilityRequirements                                      OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(class UPlayerCharacterID*)                 RequiredCharacterID                                         OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(TArray<class UDifficultySetting*>)         RestrictedToDifficulties                                    OFFSET(get<T>, {0x90, 16, 0, 0})
	DMember(int32_t)                                   Progress                                                    OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0xA4, 4, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	DMember(bool)                                      CanAbort                                                    OFFSET(get<bool>, {0xB8, 1, 0, 0})
	DMember(bool)                                      CanSkip                                                     OFFSET(get<bool>, {0xB9, 1, 0, 0})
	SMember(FText)                                     TitlePrefix                                                 OFFSET(getStruct<T>, {0xC0, 24, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0xD8, 24, 0, 0})
	SMember(FText)                                     DescriptionHeader                                           OFFSET(getStruct<T>, {0xF0, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x108, 24, 0, 0})
	SMember(FText)                                     RewardText                                                  OFFSET(getStruct<T>, {0x120, 24, 0, 0})
	SMember(FText)                                     RewardFlavorText                                            OFFSET(getStruct<T>, {0x138, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Picture                                                     OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(ECampaignType)                             campaigntype                                                OFFSET(get<T>, {0x178, 1, 0, 0})
	CMember(class UMissionStat*)                       CampaignCompletedMissionStat                                OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class UGameActivityAssignmentType*)        CampaignActivity                                            OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class UClass*)                             ReplacesOldCampaignCampaign                                 OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(ECampaignMutators)                         Mutators                                                    OFFSET(get<T>, {0x198, 4, 0, 0})
	CMember(TArray<class UMissionWarning*>)            BannedWarnings                                              OFFSET(get<T>, {0x1A0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.Campaign.IsComplete
	// bool IsComplete();                                                                                                       // [0x1800e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Campaign.IsCampaignComplete
	// bool IsCampaignComplete(class UObject* WorldContext, class UClass* Campaign);                                            // [0x1800d70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Campaign.GetReference
	// class UCampaign* GetReference(class UClass* Campaign);                                                                   // [0x1800c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Campaign.GetPreviousMission
	// class UCampaignMission* GetPreviousMission();                                                                            // [0x1800c50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Campaign.GetPicture
	// class UTexture2D* GetPicture();                                                                                          // [0x1800c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Campaign.GetCampaignTitle
	// FText GetCampaignTitle(class UClass* Campaign);                                                                          // [0x1800b30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Campaign.GetActiveMission
	// class UCampaignMission* GetActiveMission();                                                                              // [0x1800b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Campaign.CanStartCampaign
	// bool CanStartCampaign(class AFSDPlayerController* Player);                                                               // [0x1800a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Campaign.CanSeeCampaign
	// bool CanSeeCampaign(class APlayerController* PlayerController);                                                          // [0x1800980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Campaign.AreRestrictionsMet
	// bool AreRestrictionsMet(class AFSDPlayerController* Player, class UDifficultySetting* optionalDifficulty);               // [0x18007e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CampaignManager
/// Size: 0x0190 (0x000028 - 0x0001B8)
class UCampaignManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	SMember(FMulticastInlineDelegate)                  OnCampaignCompleted                                         OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCampaignChanged                                           OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(class UClass*)                             MainCampaign                                                OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<class UClass*>)                     WeeklyCampaigns                                             OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<class UClass*>)                     MatrixCoreHuntCampaigns                                     OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<class UClass*>)                     SideCampaigns                                               OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<class UClass*>)                     EventCampaigns                                              OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(class UCampaign*)                          ActiveCampaign                                              OFFSET(get<T>, {0x90, 8, 0, 0})
	DMember(int32_t)                                   NumFailedRequests                                           OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	DMember(bool)                                      WeeklyBackendDataValid                                      OFFSET(get<bool>, {0x9C, 1, 0, 0})
	DMember(int32_t)                                   WeeklyBackendSeed                                           OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	SMember(FDateTime)                                 WeeklyBackendExpirationTime                                 OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	SMember(FDateTime)                                 LastRequestTime                                             OFFSET(getStruct<T>, {0xB0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CampaignManager.StartNewCampaign
	// void StartNewCampaign(class UClass* campaignClass, class UFSDSaveGame* SaveGame);                                        // [0x1806110] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CampaignManager.SkipMainCampaign
	// void SkipMainCampaign(class UObject* WorldContextObject);                                                                // [0x1806080] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CampaignManager.OnEventsRefreshed
	// void OnEventsRefreshed();                                                                                                // [0x1805b10] Final|Native|Protected 
	// Function /Script/FSD.CampaignManager.IsWeeklyCampaignCompleted
	// bool IsWeeklyCampaignCompleted(class UObject* WorldContext, ECampaignType campaigntype);                                 // [0x18059c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CampaignManager.IsInCampaignMission
	// bool IsInCampaignMission(class AFSDPlayerController* Player);                                                            // [0x1805770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CampaignManager.IsCampaignRestrictionsMet
	// bool IsCampaignRestrictionsMet(class UObject* WorldContextObject, class UGeneratedMission* mission, class UDifficultySetting* optionalDifficulty); // [0x18055f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CampaignManager.IsCampaignMission
	// bool IsCampaignMission(class UObject* WorldContextObject, class UGeneratedMission* mission);                             // [0x1805520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CampaignManager.IsActiveCampaign
	// bool IsActiveCampaign(class UCampaign* Campaign);                                                                        // [0x1805420] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CampaignManager.GetUncompletedCampaigns
	// TArray<UClass*> GetUncompletedCampaigns(class AFSDPlayerController* Player);                                             // [0x1805150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CampaignManager.GetCompletedSideCampaigns
	// TArray<UClass*> GetCompletedSideCampaigns(class AFSDPlayerController* Player);                                           // [0x1804de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CampaignManager.GetCampaingMission
	// class UGeneratedMission* GetCampaingMission(TArray<UGeneratedMission*>& missions, FGlobalMissionSeed& GlobalSeed);       // [0x1804c40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CampaignManager.CompleteCampaignWithNoMissions
	// void CompleteCampaignWithNoMissions(class UClass* campaignClass, class UFSDSaveGame* SaveGame);                          // [0x1804ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CampaignManager.CampaignCompletedDelegate__DelegateSignature
	// void CampaignCompletedDelegate__DelegateSignature();                                                                     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.CampaignManager.CampaignChangedDelegate__DelegateSignature
	// void CampaignChangedDelegate__DelegateSignature();                                                                       // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.CampaignManager.AbortActiveCampaign
	// void AbortActiveCampaign(class UFSDSaveGame* SaveGame);                                                                  // [0x1804820] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.RequiredMissionItem
/// Size: 0x0020 (0x000000 - 0x000020)
class FRequiredMissionItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UMissionTemplate*)                   MissionTemplate                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UMissionComplexity*)                 Complexity                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UMissionDuration*)                   Duration                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      CanHaveMutators                                             OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Class /Script/FSD.CampaignMission
/// Size: 0x0058 (0x000030 - 0x000088)
class UCampaignMission : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(class UPlanetZone*)                        PlanetZone                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRequiredMissionItem)                      mission                                                     OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	CMember(TArray<class UReward*>)                    Rewards                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(class UDialogDataAsset*)                   MissionCompleteShout                                        OFFSET(get<T>, {0x68, 8, 0, 0})
	DMember(bool)                                      OverrideMutators                                            OFFSET(get<bool>, {0x70, 1, 0, 0})
	CMember(ECampaignMutators)                         MutatorOverride                                             OFFSET(get<T>, {0x74, 4, 0, 0})
	CMember(TArray<class UMissionWarning*>)            AllowedWarnings                                             OFFSET(get<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.CampaignMission.GetMissionTemplate
	// class UMissionTemplate* GetMissionTemplate();                                                                            // [0x1804ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CampaignRequirement
/// Size: 0x0000 (0x000028 - 0x000028)
class UCampaignRequirement : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.CampaignRequirement.IsRequirementMet
	// bool IsRequirementMet(class AFSDPlayerController* Player, class UCampaign* Campaign);                                    // [0x18058f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ValidWeeklySeedCampaignRequirement
/// Size: 0x0000 (0x000028 - 0x000028)
class UValidWeeklySeedCampaignRequirement : public UCampaignRequirement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.CaracterLevelCampaignRequirement
/// Size: 0x0010 (0x000028 - 0x000038)
class UCaracterLevelCampaignRequirement : public UCampaignRequirement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UPlayerCharacterID*)                 characterID                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   LevelRequirement                                            OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.PlayerRankCampaignRequirement
/// Size: 0x0008 (0x000028 - 0x000030)
class UPlayerRankCampaignRequirement : public UCampaignRequirement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   RankRequirement                                             OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Class /Script/FSD.RetirementCampaignRequirement
/// Size: 0x0010 (0x000028 - 0x000038)
class URetirementCampaignRequirement : public UCampaignRequirement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UPlayerCharacterID*)                 characterID                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   LevelRequirement                                            OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.WeeklyTimerCampaignRequirement
/// Size: 0x0000 (0x000028 - 0x000028)
class UWeeklyTimerCampaignRequirement : public UCampaignRequirement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.WeeklyTimerCampaignRequirement.GetWeeklyTimeLeft
	// FTimespan GetWeeklyTimeLeft(class AFSDPlayerController* Player);                                                         // [0x1805230] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WeeklyTimerCampaignRequirement.GetTimeUntillNewCampaign
	// FTimespan GetTimeUntillNewCampaign(class AFSDPlayerController* Player);                                                  // [0x1805020] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WeeklyTimerCampaignRequirement.GetHasCompleted
	// bool GetHasCompleted(class UCampaign* Campaign, class AFSDPlayerController* Player);                                     // [0x1804ef0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.AnyRetiredCampaignRequirement
/// Size: 0x0000 (0x000028 - 0x000028)
class UAnyRetiredCampaignRequirement : public UCampaignRequirement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.CamapaignCompletedRequirement
/// Size: 0x0010 (0x000028 - 0x000038)
class UCamapaignCompletedRequirement : public UCampaignRequirement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             Campaign                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      InverseRequirement                                          OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Class /Script/FSD.CapacityBasedItemAggregator
/// Size: 0x0078 (0x0000C8 - 0x000140)
class UCapacityBasedItemAggregator : public UItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FMulticastInlineDelegate)                  OnCurrentAmountChanged                                      OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMaxAmountChanged                                          OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnClipAndTotalChanged                                       OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReloadTimeChanged                                         OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReloadComplete                                            OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReloadStarted                                             OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMaxAmmoCapacityChanged                                    OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	DMember(bool)                                      showClipCount                                               OFFSET(get<bool>, {0x138, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CapacityBasedItemAggregator.ReloadStarted
	// void ReloadStarted();                                                                                                    // [0x1805da0] Final|Native|Public  
	// Function /Script/FSD.CapacityBasedItemAggregator.ReloadComplete
	// void ReloadComplete();                                                                                                   // [0x1805d70] Final|Native|Public  
	// Function /Script/FSD.CapacityBasedItemAggregator.GetMaxAmount
	// int32_t GetMaxAmount();                                                                                                  // [0x1804fc0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CapacityBasedItemAggregator.GetCurrentAmount
	// int32_t GetCurrentAmount();                                                                                              // [0x1804ec0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CapacityHoldingItemAggregator
/// Size: 0x0020 (0x000140 - 0x000160)
class UCapacityHoldingItemAggregator : public UCapacityBasedItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(int32_t)                                   MaxAmmo                                                     OFFSET(get<int32_t>, {0x150, 4, 0, 0})
	DMember(int32_t)                                   AmmoCount                                                   OFFSET(get<int32_t>, {0x154, 4, 0, 0})
	DMember(bool)                                      UseRejoin                                                   OFFSET(get<bool>, {0x158, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CapacityHoldingItemAggregator.UseAmmo
	// void UseAmmo(int32_t Count);                                                                                             // [0x1806350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CapacityHoldingItemAggregator.SetMaxAmmo
	// void SetMaxAmmo(int32_t InMaxAmmo, bool InChangeCurrentAmount);                                                          // [0x1805f20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CapacityHoldingItemAggregator.Resupply
	// void Resupply(float percentage);                                                                                         // [0x1805dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CapacityHoldingItemAggregator.OnRep_MaxAmmo
	// void OnRep_MaxAmmo();                                                                                                    // [0x1805c80] Final|Native|Protected 
	// Function /Script/FSD.CapacityHoldingItemAggregator.OnRep_AmmoCount
	// void OnRep_AmmoCount();                                                                                                  // [0x1805b30] Final|Native|Protected 
	// Function /Script/FSD.CapacityHoldingItemAggregator.AddAmmo
	// void AddAmmo(int32_t amount);                                                                                            // [0x1804950] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CappedResource
/// Size: 0x0050 (0x000028 - 0x000078)
class UCappedResource : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FMulticastInlineDelegate)                  OnChanged                                                   OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnIncreased                                                 OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFull                                                      OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	CMember(class UResourceData*)                      Data                                                        OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(float)                                     currentAmount                                               OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     MaxAmount                                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     TotalCollected                                              OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(int32_t)                                   FullFlag                                                    OFFSET(get<int32_t>, {0x6C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CappedResource.TransferAll
	// float TransferAll(class UCappedResource* Receiver);                                                                      // [0x18062b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CappedResource.Transfer
	// float Transfer(float amount, class UCappedResource* Receiver);                                                           // [0x18061e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CappedResource.OnRep_FullFlag
	// void OnRep_FullFlag(int32_t OldValue);                                                                                   // [0x1805bf0] Final|Native|Protected 
	// Function /Script/FSD.CappedResource.OnRep_CurrentAmount
	// void OnRep_CurrentAmount(float OldAmount);                                                                               // [0x1805b50] Final|Native|Protected 
	// Function /Script/FSD.CappedResource.IsObjectiveResource
	// bool IsObjectiveResource(class UObject* WorldContext, bool& IsCompleted);                                                // [0x1805810] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CappedResource.IsFull
	// bool IsFull();                                                                                                           // [0x1805730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CappedResource.isEmpty
	// bool isEmpty();                                                                                                          // [0x1805700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CappedResource.IsCraftingResource
	// bool IsCraftingResource();                                                                                               // [0x1153030] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CappedResource.GetTitle
	// FText GetTitle();                                                                                                        // [0x18050b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CappedResource.GetColor
	// FColor GetColor();                                                                                                       // [0x1804da0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CappedResource.GetCapacityPct
	// float GetCapacityPct();                                                                                                  // [0x1804d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CappedResource.Deduct
	// float Deduct(float amount);                                                                                              // [0x1804ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CappedResource.Add
	// float Add(float amount);                                                                                                 // [0x18048b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.HitscanBaseComponent
/// Size: 0x0148 (0x000110 - 0x000258)
class UHitscanBaseComponent : public UWeaponFireComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	SMember(FMulticastInlineDelegate)                  OnSpreadChanged                                             OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFireComplete                                              OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	DMember(float)                                     SpreadPerShot                                               OFFSET(get<float>, {0x140, 4, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x148, 8, 0, 0})
	DMember(bool)                                      UseDamageComponent                                          OFFSET(get<bool>, {0x150, 1, 0, 0})
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     armorDamageMultiplier                                       OFFSET(get<float>, {0x158, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x160, 8, 0, 0})
	DMember(float)                                     WeakpointDamageMultiplier                                   OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(int32_t)                                   MaxPenetrations                                             OFFSET(get<int32_t>, {0x16C, 4, 0, 0})
	CMember(EImpactDecalSize)                          ImpactDecalSize                                             OFFSET(get<T>, {0x170, 1, 0, 0})
	DMember(float)                                     FriendlyFireModifier                                        OFFSET(get<float>, {0x174, 4, 0, 0})
	DMember(bool)                                      UseDynamicSpread                                            OFFSET(get<bool>, {0x178, 1, 0, 0})
	CMember(TArray<class AActor*>)                     IgnoredActorsInTrace                                        OFFSET(get<T>, {0x180, 16, 0, 0})
	DMember(float)                                     MinSpread                                                   OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     MinSpreadWhenMoving                                         OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(float)                                     MinSpreadWhenSprinting                                      OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(float)                                     MaxSpread                                                   OFFSET(get<float>, {0x19C, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        SpreadCurve                                                 OFFSET(getStruct<T>, {0x1A0, 136, 0, 0})
	DMember(float)                                     SpreadRecoveryPerSecond                                     OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     VerticalSpreadMultiplier                                    OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     HorizontalSpredMultiplier                                   OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     MaxVerticalSpread                                           OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     MaxHorizontalSpread                                         OFFSET(get<float>, {0x240, 4, 0, 0})
	CMember(ERicochetBehavior)                         RicochetBehavior                                            OFFSET(get<T>, {0x248, 1, 0, 0})
	DMember(float)                                     RicochetChance                                              OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(bool)                                      RicochetOnWeakspotOnly                                      OFFSET(get<bool>, {0x250, 1, 0, 0})
	DMember(float)                                     RicochetMaxRange                                            OFFSET(get<float>, {0x254, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.HitscanBaseComponent.Server_StopFire
	// void Server_StopFire();                                                                                                  // [0x17f3860] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HitscanBaseComponent.Server_RemoveDebris
	// void Server_RemoveDebris(int32_t instance, int32_t Component);                                                           // [0x18eb8d0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HitscanBaseComponent.GetCurrentVerticalSpread
	// float GetCurrentVerticalSpread();                                                                                        // [0x18ea8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HitscanBaseComponent.GetCurrentHorizontalSpread
	// float GetCurrentHorizontalSpread();                                                                                      // [0x18ea8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.MultiHitscanHit
/// Size: 0x0020 (0x000000 - 0x000020)
class FMultiHitscanHit : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(char)                                      TargetComponentIndex                                        OFFSET(get<char>, {0x0, 1, 0, 0})
	DMember(char)                                      PhysicalMaterialIndex                                       OFFSET(get<char>, {0x1, 1, 0, 0})
	SMember(FVector_NetQuantize)                       HitLocation                                                 OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ImpactNormal                                                OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(char)                                      BoneIndex                                                   OFFSET(get<char>, {0x1C, 1, 0, 0})
	DMember(bool)                                      PlayImpactSound                                             OFFSET(get<bool>, {0x1D, 1, 0, 0})
	DMember(bool)                                      SpawnDecal                                                  OFFSET(get<bool>, {0x1E, 1, 0, 0})
};

/// Struct /Script/FSD.MultiHitScanHits
/// Size: 0x0030 (0x000000 - 0x000030)
class FMultiHitScanHits : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FMultiHitscanHit>)                  Hits                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UPrimitiveComponent*>)        Components                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<class UFSDPhysicalMaterial*>)       PhysicalMaterials                                           OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Class /Script/FSD.CapsuleHitscanComponent
/// Size: 0x0108 (0x000258 - 0x000360)
class UCapsuleHitscanComponent : public UHitscanBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class ADamageEnhancer*)                    DamageEnhancer                                              OFFSET(get<T>, {0x258, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHitEffect                                                 OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnClosestHit_Client                                         OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     Width                                                       OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(bool)                                      ShowPhysMatImpact                                           OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      ShowPhysMatDecal                                            OFFSET(get<bool>, {0x2B9, 1, 0, 0})
	DMember(bool)                                      PlayPhysMatSound                                            OFFSET(get<bool>, {0x2BA, 1, 0, 0})
	CMember(TSet<AActor*>)                             ActorsInCapsule                                             OFFSET(get<T>, {0x2C0, 80, 0, 0})
	CMember(TArray<class AActor*>)                     DamagedActorCache                                           OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(TArray<class AActor*>)                     ActorsHit                                                   OFFSET(get<T>, {0x320, 16, 0, 0})
	SMember(FMultiHitScanHits)                         Hits                                                        OFFSET(getStruct<T>, {0x330, 48, 0, 0})


	/// Functions
	// Function /Script/FSD.CapsuleHitscanComponent.Server_RegisterHit
	// void Server_RegisterHit(FMultiHitScanHits hitResults);                                                                   // [0x1805e50] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CapsuleHitscanComponent.All_ShowHit
	// void All_ShowHit(FMultiHitScanHits hitResults);                                                                          // [0x18049e0] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.Caretaker
/// Size: 0x00B8 (0x0002F8 - 0x0003B0)
class ACaretaker : public AFSDPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Body                                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(TArray<class USkeletalMeshComponent*>)     Eyes                                                        OFFSET(get<T>, {0x308, 16, 0, 0})
	CMember(TArray<class UPassthroughSubHealthComponent*>) subHealth                                               OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(class UHealthDamageTracker*)               DamageTracker                                               OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UEnemyHealthComponent*)              Health                                                      OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UPawnStatsComponent*)                PawnStats                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(TArray<class UCaretakerActionComponent*>)  Actions                                                     OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(class UCaretakerActionComponent*)          CurrentAction                                               OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(TArray<class UAnimSequenceBase*>)          HitReactions                                                OFFSET(get<T>, {0x358, 16, 0, 0})
	DMember(int32_t)                                   CurrentStage                                                OFFSET(get<int32_t>, {0x368, 4, 0, 0})
	DMember(int32_t)                                   TargetRotationRate                                          OFFSET(get<int32_t>, {0x36C, 4, 0, 0})
	CMember(TArray<float>)                             RotationRates                                               OFFSET(get<T>, {0x378, 16, 0, 0})
	DMember(float)                                     Server_Rotation                                             OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(bool)                                      IsInStageCooldown                                           OFFSET(get<bool>, {0x38C, 1, 0, 0})
	DMember(bool)                                      IsWeakpointAVisible                                         OFFSET(get<bool>, {0x38D, 1, 0, 0})
	DMember(bool)                                      IsWeakpointBVisible                                         OFFSET(get<bool>, {0x38E, 1, 0, 0})
	DMember(bool)                                      IsWeakpointCVisible                                         OFFSET(get<bool>, {0x38F, 1, 0, 0})
	DMember(bool)                                      IsWeakpointDVisible                                         OFFSET(get<bool>, {0x390, 1, 0, 0})
	CMember(ECaretakerSpawnType)                       ActiveSpawnType                                             OFFSET(get<T>, {0x391, 1, 0, 0})
	DMember(int32_t)                                   AoEStage                                                    OFFSET(get<int32_t>, {0x394, 4, 0, 0})
	DMember(int8_t)                                    OpenEye                                                     OFFSET(get<int8_t>, {0x3A9, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.Caretaker.WakeUp
	// void WakeUp();                                                                                                           // [0x18063e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Caretaker.SetTargetRotationRate
	// void SetTargetRotationRate(int32_t rateIndex);                                                                           // [0x1805ff0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Caretaker.OpenRandomEye
	// void OpenRandomEye(bool forbidLastEye);                                                                                  // [0x1805ce0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Caretaker.OnStartHideFromDamage
	// void OnStartHideFromDamage();                                                                                            // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Caretaker.OnRep_Server_Rotation
	// void OnRep_Server_Rotation();                                                                                            // [0x1805cc0] Final|Native|Private 
	// Function /Script/FSD.Caretaker.OnRep_OpenEye
	// void OnRep_OpenEye();                                                                                                    // [0x1805ca0] Final|Native|Protected 
	// Function /Script/FSD.Caretaker.OnRep_CurrentStage
	// void OnRep_CurrentStage();                                                                                               // [0x1805bd0] Final|Native|Private 
	// Function /Script/FSD.Caretaker.OnNewStage
	// void OnNewStage(int32_t stageIndex);                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Caretaker.OnEyeOpened
	// void OnEyeOpened(class USkeletalMeshComponent* eye);                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Caretaker.OnEyeClosed
	// void OnEyeClosed(class USkeletalMeshComponent* eye);                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Caretaker.OnDamageTaken
	// void OnDamageTaken(float amount);                                                                                        // [0x1805a90] Final|Native|Protected 
	// Function /Script/FSD.Caretaker.IsAwake
	// bool IsAwake();                                                                                                          // [0x18054f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Caretaker.IsAnyEyeOpen
	// bool IsAnyEyeOpen();                                                                                                     // [0x18054c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Caretaker.InitiateNextStage
	// void InitiateNextStage();                                                                                                // [0x1805400] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Caretaker.InitCaretakerActions
	// void InitCaretakerActions(TArray<UCaretakerActionComponent*> carettakeractions);                                         // [0x18052c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Caretaker.CloseAllEyes
	// void CloseAllEyes();                                                                                                     // [0x1804ab0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CaretagerBodyAnimInstance
/// Size: 0x0020 (0x000350 - 0x000370)
class UCaretagerBodyAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	DMember(bool)                                      CoolingOff                                                  OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(bool)                                      IsWeakpointAVisible                                         OFFSET(get<bool>, {0x351, 1, 0, 0})
	DMember(bool)                                      IsWeakpointBVisible                                         OFFSET(get<bool>, {0x352, 1, 0, 0})
	DMember(bool)                                      IsWeakpointCVisible                                         OFFSET(get<bool>, {0x353, 1, 0, 0})
	DMember(bool)                                      IsWeakpointDVisible                                         OFFSET(get<bool>, {0x354, 1, 0, 0})
	DMember(float)                                     RotationAngle                                               OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(int32_t)                                   AoEStage                                                    OFFSET(get<int32_t>, {0x35C, 4, 0, 0})
	DMember(bool)                                      IsSpawningDrones                                            OFFSET(get<bool>, {0x360, 1, 0, 0})
	DMember(bool)                                      IsSpawningBombs                                             OFFSET(get<bool>, {0x361, 1, 0, 0})
	DMember(bool)                                      IsSpawningShredders                                         OFFSET(get<bool>, {0x362, 1, 0, 0})
	DMember(bool)                                      IsSpawningTurrets                                           OFFSET(get<bool>, {0x363, 1, 0, 0})
};

/// Class /Script/FSD.CaretakerEyeAnimInstance
/// Size: 0x0010 (0x000350 - 0x000360)
class UCaretakerEyeAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(bool)                                      IsOpen                                                      OFFSET(get<bool>, {0x350, 1, 0, 0})
};

/// Class /Script/FSD.CaretakerActionComponent
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UCaretakerActionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      StartTickOnUse                                              OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(bool)                                      isUsing                                                     OFFSET(get<bool>, {0xB1, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CaretakerActionComponent.UseAction
	// void UseAction();                                                                                                        // [0x180a020] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CaretakerActionComponent.TriggerAction
	// void TriggerAction();                                                                                                    // [0x1809fe0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CaretakerActionComponent.StopUsing
	// void StopUsing();                                                                                                        // [0x17f3860] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CaretakerActionComponent.OnTriggered
	// void OnTriggered();                                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.CaretakerActionComponent.OnStopped
	// void OnStopped();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.CaretakerActionComponent.OnStarted
	// void OnStarted();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.CaretakerActionComponent.OnRep_IsUsing
	// void OnRep_IsUsing();                                                                                                    // [0x1809bc0] Final|Native|Protected 
	// Function /Script/FSD.CaretakerActionComponent.GetCaretaker
	// class ACaretaker* GetCaretaker();                                                                                        // [0x1809920] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CaretakerActionComponent.CanUse
	// bool CanUse();                                                                                                           // [0x1809620] BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FSD.UsableComponentBase
/// Size: 0x0048 (0x0000B0 - 0x0000F8)
class UUsableComponentBase : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FMulticastInlineDelegate)                  OnClientBeginUse                                            OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(int32_t)                                   CallbackKeys                                                OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(float)                                     UseCooldown                                                 OFFSET(get<float>, {0xC4, 4, 0, 0})
	CMember(class UUseAnimationSetting*)               AnimationSettings                                           OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	CMember(class USceneComponent*)                    RestrictToCollider                                          OFFSET(get<T>, {0xD8, 8, 0, 0})
	DMember(bool)                                      UsableHidesPlaceables                                       OFFSET(get<bool>, {0xE0, 1, 0, 0})
	DMember(bool)                                      IsRayTraceTriggered                                         OFFSET(get<bool>, {0xE1, 1, 0, 0})
	DMember(bool)                                      ResetUsingOnCompletion                                      OFFSET(get<bool>, {0xE2, 1, 0, 0})
	CMember(class UUseConditionSet*)                   UseConditions                                               OFFSET(get<T>, {0xE8, 8, 0, 0})
	DMember(bool)                                      IsClientPredictive                                          OFFSET(get<bool>, {0xF0, 1, 0, 0})
	DMember(bool)                                      ThirdPersonWhileUsing                                       OFFSET(get<bool>, {0xF1, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.UsableComponentBase.SetUseRestrictions
	// void SetUseRestrictions(class UUseConditionSet* set);                                                                    // [0x19e99f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.UsableComponentBase.SetRayTraceTriggered
	// void SetRayTraceTriggered(bool rayTraceTriggered);                                                                       // [0x19e9960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.UsableComponentBase.SetAnimationSettings
	// void SetAnimationSettings(class UUseAnimationSetting* Settings);                                                         // [0x19e9510] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.UsableComponentBase.GetUseText
	// FText GetUseText(class APlayerCharacter* User);                                                                          // [0x19e8650] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Script/FSD.UsableComponentBase.GetUseProgressInPercent
	// float GetUseProgressInPercent(class APlayerCharacter* User);                                                             // [0x19e85b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UsableComponentBase.GetUsableIcon
	// class UTexture2D* GetUsableIcon();                                                                                       // [0x19e8580] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UsableComponentBase.GetShowUsingUI
	// bool GetShowUsingUI();                                                                                                   // [0x19e8400] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UsableComponentBase.GetIsRayTraceTriggerd
	// bool GetIsRayTraceTriggerd();                                                                                            // [0x19e7770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UsableComponentBase.GetHideProgressBar
	// bool GetHideProgressBar(class APlayerCharacter* User);                                                                   // [0x19e74f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UsableComponentBase.GetHideActionText
	// bool GetHideActionText(class APlayerCharacter* User);                                                                    // [0x19e7450] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UsableComponentBase.EndUse
	// void EndUse(class APlayerCharacter* User);                                                                               // [0x19e68e0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.UsableComponentBase.BeginUse
	// void BeginUse(class APlayerCharacter* User, EInputKeys Key);                                                             // [0x19e6270] Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.UsableComponent
/// Size: 0x0028 (0x0000F8 - 0x000120)
class UUsableComponent : public UUsableComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(class UDialogDataAsset*)                   ShoutBegin                                                  OFFSET(get<T>, {0xF8, 8, 0, 0})
	SMember(FText)                                     UseText                                                     OFFSET(getStruct<T>, {0x100, 24, 0, 0})
	DMember(bool)                                      ResetOnFail                                                 OFFSET(get<bool>, {0x118, 1, 0, 0})
	DMember(bool)                                      SwitchToUsingState                                          OFFSET(get<bool>, {0x119, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.UsableComponent.SetUseText
	// void SetUseText(FText& NewText);                                                                                         // [0x19e9a80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.UsableComponent.HasDuration
	// bool HasDuration();                                                                                                      // [0x19e8730] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.InstantUsable
/// Size: 0x0050 (0x000120 - 0x000170)
class UInstantUsable : public UUsableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FMulticastInlineDelegate)                  OnUsedBy                                                    OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUsableChanged                                             OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	DMember(bool)                                      bShowUsingUI                                                OFFSET(get<bool>, {0x150, 1, 0, 0})
	CMember(class USoundCue*)                          AudioCompletedUse                                           OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(bool)                                      UseDelayedAudio                                             OFFSET(get<bool>, {0x160, 1, 0, 0})
	DMember(float)                                     AudioDelay                                                  OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(bool)                                      RefreshDelayOnNewUse                                        OFFSET(get<bool>, {0x168, 1, 0, 0})
	DMember(bool)                                      Usable                                                      OFFSET(get<bool>, {0x169, 1, 0, 0})
	DMember(bool)                                      TurnOffAfterUse                                             OFFSET(get<bool>, {0x16A, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.InstantUsable.SetCanUse
	// void SetCanUse(bool CanUse);                                                                                             // [0x19e9630] Native|Public|BlueprintCallable 
	// Function /Script/FSD.InstantUsable.OnRep_Usable
	// void OnRep_Usable();                                                                                                     // [0x19e90c0] Final|Native|Protected 
};

/// Class /Script/FSD.CarriableInstantUsable
/// Size: 0x0000 (0x000170 - 0x000170)
class UCarriableInstantUsable : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
};

/// Class /Script/FSD.CarriableComponent
/// Size: 0x0098 (0x0000B0 - 0x000148)
class UCarriableComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FMulticastInlineDelegate)                  OnPickedUp                                                  OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDropped                                                   OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	CMember(TWeakObjectPtr<class UDialogDataAsset*>)   ShoutWhileCarrying                                          OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         OverrideCarryAnimationSet                                   OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UUseAnimationSetting*)               OverrideThrowAnimationSet                                   OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class APlayerCharacter*)                   CarriedBy                                                   OFFSET(get<T>, {0x110, 8, 0, 0})
	SMember(FVector)                                   Offset                                                      OFFSET(getStruct<T>, {0x118, 12, 0, 0})


	/// Functions
	// Function /Script/FSD.CarriableComponent.PickupItem
	// bool PickupItem(class APlayerCharacter* byCharacter);                                                                    // [0x1809c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CarriableComponent.DropItem
	// void DropItem();                                                                                                         // [0x1809760] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CarriableComponent.AttachChanged
	// void AttachChanged(bool Attached, FVector PrevScale);                                                                    // [0x1809530] Final|Native|Public|HasDefaults 
};

/// Class /Script/FSD.ResourceCreator
/// Size: 0x0000 (0x000030 - 0x000030)
class UResourceCreator : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FSD.UDebrisCarveMesh
/// Size: 0x0010 (0x000000 - 0x000010)
class FUDebrisCarveMesh : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UStaticMesh*)                        Mesh                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Probablity                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.ResourceDebris
/// Size: 0x0010 (0x000000 - 0x000010)
class FResourceDebris : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     InfluencerRange                                             OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(class UDebrisBase*)                        Debris                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.CarvedResourceCreator
/// Size: 0x0068 (0x000030 - 0x000098)
class UCarvedResourceCreator : public UResourceCreator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(class UCarvedResourceData*)                Resource                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      ScaleToResourceDistribution                                 OFFSET(get<bool>, {0x38, 1, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FIRandRange)                               NumCarvers                                                  OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	DMember(float)                                     ExpensiveNoise                                              OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     CarveOffsetRadius                                           OFFSET(get<float>, {0x54, 4, 0, 0})
	CMember(class UClass*)                             SpawnAttachClass                                            OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(float)                                     AttachSpawnOffsetDistance                                   OFFSET(get<float>, {0x60, 4, 0, 0})
	CMember(class UTerrainMaterial*)                   TerrainMaterial                                             OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x70, 1, 0, 0})
	CMember(CarveOptionsCellSize)                      CarveCellSize                                               OFFSET(get<T>, {0x71, 1, 0, 0})
	CMember(TArray<FUDebrisCarveMesh>)                 Meshes                                                      OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FResourceDebris>)                   Debris                                                      OFFSET(get<T>, {0x88, 16, 0, 0})
};

/// Class /Script/FSD.ResourceData
/// Size: 0x00C0 (0x000030 - 0x0000F0)
class UResourceData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     TitlePlural                                                 OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x68, 24, 0, 0})
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x80, 4, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x88, 8, 0, 0})
	DMember(int32_t)                                   BuyingPrice                                                 OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   SellingPrice                                                OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	CMember(class UMissionStat*)                       MinedMissionStat                                            OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(bool)                                      IsCraftingMaterial                                          OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      IsTradable                                                  OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(bool)                                      ForceShowOnEndScreen                                        OFFSET(get<bool>, {0xA2, 1, 0, 0})
	DMember(bool)                                      AffectedByMutators                                          OFFSET(get<bool>, {0xA3, 1, 0, 0})
	DMember(bool)                                      ScaleToMissionLength                                        OFFSET(get<bool>, {0xA4, 1, 0, 0})
	DMember(bool)                                      AutoDepositOnDisconnect                                     OFFSET(get<bool>, {0xA5, 1, 0, 0})
	DMember(bool)                                      ScaleToHazardLevel                                          OFFSET(get<bool>, {0xA6, 1, 0, 0})
	DMember(bool)                                      ShowSeparatelyInEndScreen                                   OFFSET(get<bool>, {0xA7, 1, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             Spawnable                                                   OFFSET(get<T>, {0xA8, 40, 0, 0})
	DMember(bool)                                      IsWholeNumberResource                                       OFFSET(get<bool>, {0xD0, 1, 0, 0})
	DMember(int32_t)                                   CreditValue                                                 OFFSET(get<int32_t>, {0xD4, 4, 0, 0})
	DMember(int32_t)                                   XPValue                                                     OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	DMember(float)                                     SeasonXPMultiplier                                          OFFSET(get<float>, {0xDC, 4, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0xE0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ResourceData.GetOwnedAmount
	// float GetOwnedAmount(class UObject* WorldContextObject);                                                                 // [0x198abf0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ResourceData.GetIsTradableCraftingMaterial
	// bool GetIsTradableCraftingMaterial();                                                                                    // [0x198abb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CarvedResourceData
/// Size: 0x0030 (0x0000F0 - 0x000120)
class UCarvedResourceData : public UResourceData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TWeakObjectPtr<class UCarvedResourceCreator*>) CarvedResourceCreator                                   OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(float)                                     UnitsPerCarver                                              OFFSET(get<float>, {0x118, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CarvedResourceData.LoadResourceCreator
	// class UCarvedResourceCreator* LoadResourceCreator();                                                                     // [0x1809b90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CarvedResourceData.GetUnitsPerCarver
	// float GetUnitsPerCarver();                                                                                               // [0x1809ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CarvedResourceData.GetTargetAmount
	// float GetTargetAmount(class AProceduralSetup* pls);                                                                      // [0x1809a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CaveEntranceComponent
/// Size: 0x0010 (0x000450 - 0x000460)
class UCaveEntranceComponent : public UPrimitiveComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1120;

public:
	CMember(ECaveEntranceType)                         Direction                                                   OFFSET(get<T>, {0x450, 1, 0, 0})
	CMember(ECaveEntrancePriority)                     Priority                                                    OFFSET(get<T>, {0x451, 1, 0, 0})
};

/// Class /Script/FSD.CaveEntrance
/// Size: 0x0010 (0x000228 - 0x000238)
class ACaveEntrance : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class UCaveEntranceComponent*)             CaveEntranceComponent                                       OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(ECaveEntranceType)                         EntranceType                                                OFFSET(get<T>, {0x230, 1, 0, 0})
	DMember(bool)                                      HasBeenConverted                                            OFFSET(get<bool>, {0x231, 1, 0, 0})
};

/// Class /Script/FSD.SpawnResourceGenerationItem
/// Size: 0x0018 (0x000228 - 0x000240)
class ASpawnResourceGenerationItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(float)                                     BaseAmount                                                  OFFSET(get<float>, {0x230, 4, 0, 0})
	CMember(class USphereComponent*)                   Sphere                                                      OFFSET(get<T>, {0x238, 8, 0, 0})
};

/// Class /Script/FSD.SpawnActorGenerationItem
/// Size: 0x0010 (0x000228 - 0x000238)
class ASpawnActorGenerationItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class UClass*)                             ActorToSpawn                                                OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UBoxComponent*)                      Box                                                         OFFSET(get<T>, {0x230, 8, 0, 0})
};

/// Class /Script/FSD.SpawnTriggerItem
/// Size: 0x0010 (0x000228 - 0x000238)
class ASpawnTriggerItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class UClass*)                             Trigger                                                     OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FName)                                     Message                                                     OFFSET(getStruct<T>, {0x230, 8, 0, 0})
};

/// Class /Script/FSD.SubRoomItem
/// Size: 0x0010 (0x000228 - 0x000238)
class ASubRoomItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class URoomGenerator*)                     RoomGenerator                                               OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(int32_t)                                   Layer                                                       OFFSET(get<int32_t>, {0x230, 4, 0, 0})
};

/// Class /Script/FSD.RandomSubRoomItem
/// Size: 0x0058 (0x000228 - 0x000280)
class ARandomSubRoomItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class URoomGeneratorGroup*)                RoomGroup                                                   OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FGameplayTagQuery)                         tagQuery                                                    OFFSET(getStruct<T>, {0x230, 72, 0, 0})
	DMember(int32_t)                                   Layer                                                       OFFSET(get<int32_t>, {0x278, 4, 0, 0})
};

/// Class /Script/FSD.DropPodCalldownLocationItem
/// Size: 0x0008 (0x000228 - 0x000230)
class ADropPodCalldownLocationItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UClass*)                             CalldownClass                                               OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/FSD.RoomBurner
/// Size: 0x0160 (0x000220 - 0x000380)
class ARoomBurner : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	DMember(bool)                                      LiveUpdateEditor                                            OFFSET(get<bool>, {0x220, 1, 0, 0})
	CMember(ERoomMirror)                               MirrorTest                                                  OFFSET(get<T>, {0x221, 1, 0, 0})
	CMember(class URoomGenerator*)                     RoomGenerator                                               OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(float)                                     RoomRadius                                                  OFFSET(get<float>, {0x230, 4, 0, 0})
	CMember(ERoomMirroringSupport)                     MirrorSupport                                               OFFSET(get<T>, {0x234, 1, 0, 0})
	DMember(bool)                                      ShowRoomCollider                                            OFFSET(get<bool>, {0x235, 1, 0, 0})
	SMember(FGameplayTagContainer)                     RoomTags                                                    OFFSET(getStruct<T>, {0x238, 32, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x258, 4, 0, 0})
	CMember(class UBiome*)                             Biome                                                       OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UDifficultySetting*)                 Difficulty                                                  OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(TMap<class UDifficultyMutatorSetupItem*, int32_t>) Haz5Mutators                                        OFFSET(get<T>, {0x270, 80, 0, 0})
	DMember(int32_t)                                   ForcePlayerCount                                            OFFSET(get<int32_t>, {0x2C0, 4, 0, 0})
	DMember(bool)                                      GenerateDebris                                              OFFSET(get<bool>, {0x2C4, 1, 0, 0})
	DMember(bool)                                      GenerateItems                                               OFFSET(get<bool>, {0x2C5, 1, 0, 0})
	DMember(bool)                                      GenerateResources                                           OFFSET(get<bool>, {0x2C6, 1, 0, 0})
	DMember(bool)                                      SpawnEncounters                                             OFFSET(get<bool>, {0x2C7, 1, 0, 0})
	CMember(TMap<class UEnemyDescriptor*, int32_t>)    TestEnemies                                                 OFFSET(get<T>, {0x2C8, 80, 0, 0})
	CMember(class UMissionMutator*)                    TestMutator                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(TArray<class UMissionWarning*>)            TestWarnings                                                OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(class UMissionChallenge*)                  TestChallenge                                               OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USpecialEvent*)                      TestSpecialEvent                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class USpecialEvent*)                      TestTreasure                                                OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UMissionTemplate*)                   MissionTemplate                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UMissionTemplate*)                   CustomMissionTemplate                                       OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UClass*)                             TestObjective                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class ADeepCSGWorld*)                      CSGWorld                                                    OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class AProceduralSetup*)                   PLSLiveEditor                                               OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class URoomGenerator*)                     LiveEditRoomGenerator                                       OFFSET(get<T>, {0x378, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RoomBurner.SpawnEncounter
	// void SpawnEncounter(class AProceduralSetup* Setup);                                                                      // [0x1809d00] Final|Native|Protected 
	// Function /Script/FSD.RoomBurner.GetRoomGenerator
	// class URoomGenerator* GetRoomGenerator();                                                                                // [0x18099d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.InfluenceTester
/// Size: 0x0010 (0x000220 - 0x000230)
class AInfluenceTester : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UCaveInfluencer*)                    Influencer                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USphereComponent*)                   Sphere                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/FSD.EnemyPawn
/// Size: 0x0050 (0x0002F8 - 0x000348)
class AEnemyPawn : public AFSDPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	CMember(class UEnemyHealthComponent*)              Health                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UPawnStatsComponent*)                Stats                                                       OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UEnemyPawnAfflictionComponent*)      Affliction                                                  OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UEnemyComponent*)                    enemy                                                       OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FName)                                     CenterMassSocketName                                        OFFSET(getStruct<T>, {0x320, 8, 0, 0})
	SMember(FQueuedMontage)                            QueuedMontage                                               OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	CMember(TArray<class UMaterialInterface*>)         CachedMaterials                                             OFFSET(get<T>, {0x338, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyPawn.Receive_GetMeshComponent
	// class UMeshComponent* Receive_GetMeshComponent();                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
	// Function /Script/FSD.EnemyPawn.OnRep_QueuedMontage
	// void OnRep_QueuedMontage();                                                                                              // [0x185a390] Final|Native|Protected 
	// Function /Script/FSD.EnemyPawn.GetMesh
	// class USkeletalMeshComponent* GetMesh();                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/FSD.CaveLeech
/// Size: 0x00B8 (0x000348 - 0x000400)
class ACaveLeech : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(class USkeletalMeshComponent*)             SkeletalMesh                                                OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UGrabberComponent*)                  GrabberComponent                                            OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(float)                                     BiteDamage                                                  OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     BitesPerSecond                                              OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     MaxDistanceXY                                               OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     GrapDistance                                                OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(float)                                     GrapDelay                                                   OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     TentacleSpeed                                               OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(float)                                     TentacleRetractSpeed                                        OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     RetractDuration                                             OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     TentaclePullSpeed                                           OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     TentacleDropPlayerSpeed                                     OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     TentacleDropGroundDistance                                  OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     MaxDropPlayerDuration                                       OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     HeadInterpSpeed                                             OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     TentacleAttachOffset                                        OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     BiteDistance                                                OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(float)                                     RevivedGracePeriod                                          OFFSET(get<float>, {0x39C, 4, 0, 0})
	CMember(class UPawnAffliction*)                    CaveLeechSenseAffliction                                    OFFSET(get<T>, {0x3A0, 8, 0, 0})
	DMember(float)                                     StateTime                                                   OFFSET(get<float>, {0x3B0, 4, 0, 0})
	CMember(ECaveLeechState)                           State                                                       OFFSET(get<T>, {0x3B4, 1, 0, 0})
	SMember(FVector_NetQuantize)                       TentacleLocation                                            OFFSET(getStruct<T>, {0x3B8, 12, 0, 0})
	SMember(FVector_NetQuantize)                       TentacleVelocity                                            OFFSET(getStruct<T>, {0x3C4, 12, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             Target                                                      OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UHealthComponent*)                   HealthTarget                                                OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class USceneComponent*)                    TentacleHead                                                OFFSET(get<T>, {0x3E0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CaveLeech.OnRep_State
	// void OnRep_State();                                                                                                      // [0x1809be0] Final|Native|Protected 
	// Function /Script/FSD.CaveLeech.GetTentacleTargetLocation
	// FVector GetTentacleTargetLocation();                                                                                     // [0x1809aa0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CaveLeech.GetMouthLocation
	// FVector GetMouthLocation();                                                                                              // [0x1809990] Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.CaveLeech.GetCurrentTarget
	// class AActor* GetCurrentTarget();                                                                                        // [0x1809950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CaveLeech.Died
	// void Died(class UHealthComponentBase* HealthComponent);                                                                  // [0x18096d0] Final|Native|Protected 
	// Function /Script/FSD.CaveLeech.Damaged
	// void Damaged(float amount);                                                                                              // [0x1809650] Final|Native|Protected 
	// Function /Script/FSD.CaveLeech.BP_OnStateChanged
	// void BP_OnStateChanged(ECaveLeechState NewState);                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CaveLeech.BP_OnBite
	// void BP_OnBite(class UHealthComponent* TargetHealth);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.CaveLeechAnimInstance
/// Size: 0x0058 (0x0002B8 - 0x000310)
class UCaveLeechAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	DMember(float)                                     HeadOffset                                                  OFFSET(get<float>, {0x2B8, 4, 0, 0})
	CMember(class ACaveLeech*)                         CaveLeech                                                   OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class USceneComponent*)                    CaveLeechHead                                               OFFSET(get<T>, {0x2C8, 8, 0, 0})
	SMember(FRotator)                                  BaseRotation                                                OFFSET(getStruct<T>, {0x2D0, 12, 0, 0})
	SMember(FVector)                                   BaseLocation                                                OFFSET(getStruct<T>, {0x2DC, 12, 0, 0})
	SMember(FVector)                                   HeadLocation                                                OFFSET(getStruct<T>, {0x2E8, 12, 0, 0})
	SMember(FRotator)                                  HeadRotation                                                OFFSET(getStruct<T>, {0x2F4, 12, 0, 0})
	DMember(bool)                                      bIdle                                                       OFFSET(get<bool>, {0x300, 1, 0, 0})
	DMember(bool)                                      bTracking                                                   OFFSET(get<bool>, {0x301, 1, 0, 0})
	DMember(bool)                                      bPulling                                                    OFFSET(get<bool>, {0x302, 1, 0, 0})
	DMember(bool)                                      bRetracting                                                 OFFSET(get<bool>, {0x303, 1, 0, 0})
	DMember(bool)                                      bDying                                                      OFFSET(get<bool>, {0x304, 1, 0, 0})
	DMember(bool)                                      bDead                                                       OFFSET(get<bool>, {0x305, 1, 0, 0})
	DMember(bool)                                      bFrozen                                                     OFFSET(get<bool>, {0x306, 1, 0, 0})
	DMember(bool)                                      bBiting                                                     OFFSET(get<bool>, {0x307, 1, 0, 0})
};

/// Class /Script/FSD.CaveObject
/// Size: 0x0008 (0x000220 - 0x000228)
class ACaveObject : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	DMember(bool)                                      CanCharacterStandOn                                         OFFSET(get<bool>, {0x220, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CaveObject.TriggerNetworkUpdate
	// void TriggerNetworkUpdate();                                                                                             // [0x180a000] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.CaveObject.ResumeNetworkUpdates
	// void ResumeNetworkUpdates();                                                                                             // [0x1809cc0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.CaveObject.Recieve_OnGameStarted
	// void Recieve_OnGameStarted();                                                                                            // [0x1d6f900] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CaveObject.PauseNetworkUpdates
	// void PauseNetworkUpdates();                                                                                              // [0x1809c00] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.CaveScriptComponent
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UCaveScriptComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FSD.CaveVine
/// Size: 0x0068 (0x000220 - 0x000288)
class ACaveVine : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(TEnumAsByte<ECollisionChannel>)            GroundCollisionChannel                                      OFFSET(get<T>, {0x220, 1, 0, 0})
	DMember(float)                                     IdleSwingSpeed                                              OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     ChaseSpeed                                                  OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     MaxReach                                                    OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     GroundOffset                                                OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     NoiseRadius                                                 OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     NoiseSpeed                                                  OFFSET(get<float>, {0x238, 4, 0, 0})
	CMember(class USplineMeshComponent*)               SplineMeshComponent                                         OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class USceneComponent*)                    VineHead                                                    OFFSET(get<T>, {0x248, 8, 0, 0})
	SMember(FVector)                                   VineVelocity                                                OFFSET(getStruct<T>, {0x250, 12, 0, 0})
	SMember(FVector)                                   VineLocation                                                OFFSET(getStruct<T>, {0x25C, 12, 0, 0})
	SMember(FVector)                                   VineStartLocation                                           OFFSET(getStruct<T>, {0x268, 12, 0, 0})
	CMember(TWeakObjectPtr<class UHealthComponent*>)   Target                                                      OFFSET(get<T>, {0x274, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CaveVine.BP_OnTargetChanged
	// void BP_OnTargetChanged(class UHealthComponent* NewTarget);                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CaveVine.BP_OnInitialized
	// void BP_OnInitialized();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.CaveWorm
/// Size: 0x0020 (0x000390 - 0x0003B0)
class ACaveWorm : public ADeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(class USimpleHealthComponent*)             Health                                                      OFFSET(get<T>, {0x3A0, 8, 0, 0})
	DMember(float)                                     SearchChunksRadius                                          OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(float)                                     SearchChunksInterval                                        OFFSET(get<float>, {0x3AC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CaveWorm.SpawnResource
	// class AResourceChunk* SpawnResource(class UObject* WorldContext, class UResourceData* Data, float Size, FTransform Transform, FVector Impulse, FVector DropOffset); // [0x1809d90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.CaveWorm.Search
	// void Search();                                                                                                           // [0x1809ce0] Final|Native|Protected 
	// Function /Script/FSD.CaveWorm.IncrementKillCount
	// void IncrementKillCount(class UHealthComponentBase* HealthComponent);                                                    // [0x1809b00] Final|Native|Protected 
	// Function /Script/FSD.CaveWorm.DropResource
	// void DropResource(class UResourceData* Data, float Size, FVector Impulse, FVector DropOffset);                           // [0x1809780] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.Maggot
/// Size: 0x0008 (0x000390 - 0x000398)
class AMaggot : public ADeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	CMember(class USimpleHealthComponent*)             HealthComponent                                             OFFSET(get<T>, {0x390, 8, 0, 0})
};

/// Class /Script/FSD.CellIdFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UCellIdFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.CharacterCameraController
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UCharacterCameraController : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(float)                                     StartFOV                                                    OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     targetFov                                                   OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     TargetFOVSpeed                                              OFFSET(get<float>, {0xB8, 4, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UCameraComponent*)                   Camera                                                      OFFSET(get<T>, {0xC8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterCameraController.ResetFOV
	// void ResetFOV(float FadeSpeed);                                                                                          // [0x180dbc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterCameraController.FOVChanged
	// void FOVChanged(float NewFOV);                                                                                           // [0x180d020] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterCameraController.FadeToFOVRelative
	// void FadeToFOVRelative(float targetFov, float FadeSpeed);                                                                // [0x180d170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterCameraController.FadeToFOV
	// void FadeToFOV(float targetFov, float FadeSpeed);                                                                        // [0x180d0a0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.LerpingPercent
/// Size: 0x0008 (0x000000 - 0x000008)
class FLerpingPercent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(char)                                      TargetPercent                                               OFFSET(get<char>, {0x0, 1, 0, 0})
};

/// Struct /Script/FSD.CountDownFloat
/// Size: 0x000C (0x000000 - 0x00000C)
class FCountDownFloat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     CountDownDuration                                           OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Class /Script/FSD.CharacterIntoxicationComponent
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UCharacterIntoxicationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FMulticastInlineDelegate)                  OnIntoxicationChanged                                       OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPassOutDrunk                                              OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(EIntoxicationState)                        CurrentState                                                OFFSET(get<T>, {0xD8, 1, 0, 0})
	SMember(FLerpingPercent)                           IntoxicationPercent                                         OFFSET(getStruct<T>, {0xDC, 8, 0, 0})
	DMember(float)                                     IntoxicationLerpSpeed                                       OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     TimeDrunk                                                   OFFSET(get<float>, {0xE8, 4, 0, 0})
	SMember(FCountDownFloat)                           SoberingUpCoolDown                                          OFFSET(getStruct<T>, {0xEC, 12, 0, 0})
	DMember(char)                                      SoberingPercent                                             OFFSET(get<char>, {0xF8, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterIntoxicationComponent.ReceiveStateChange
	// void ReceiveStateChange(EIntoxicationState NewState);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterIntoxicationComponent.ReceivePassOutDrunk
	// void ReceivePassOutDrunk();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterIntoxicationComponent.ReceiveDrunkTick
	// void ReceiveDrunkTick(float DeltaTime, float DrunkTime);                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterIntoxicationComponent.ReceiveDrunkEnd
	// void ReceiveDrunkEnd();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterIntoxicationComponent.ReceiveDrunkBegin
	// void ReceiveDrunkBegin();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterIntoxicationComponent.PassOutDrunkSignature__DelegateSignature
	// void PassOutDrunkSignature__DelegateSignature(class APlayerCharacter* Player);                                           // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.CharacterIntoxicationComponent.IsPassOutDrunk
	// bool IsPassOutDrunk();                                                                                                   // [0x180d940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.IsOnSpaceRig
	// bool IsOnSpaceRig();                                                                                                     // [0x180d910] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x180d850] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.IsDrunk
	// bool IsDrunk();                                                                                                          // [0x180d820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.IntoxicationProgressSignature__DelegateSignature
	// void IntoxicationProgressSignature__DelegateSignature(class APlayerCharacter* Player, float Progress);                   // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.CharacterIntoxicationComponent.HasAuthority
	// bool HasAuthority();                                                                                                     // [0x180d7c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.GetSoberingUpCoolDown
	// float GetSoberingUpCoolDown();                                                                                           // [0x180d710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.GetIntoxicationProgressMapped
	// float GetIntoxicationProgressMapped(class UCurveFloat* Curve);                                                           // [0x180d360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.GetIntoxicationProgress
	// float GetIntoxicationProgress();                                                                                         // [0x180d330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.GetAlcoholPct
	// int32_t GetAlcoholPct(EDrinkableAlcoholStrength Strength);                                                               // [0x180d260] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/FSD.CharacterIntoxicationComponent.Consume
	// void Consume(class UDrinkableDataAsset* Drinkable);                                                                      // [0x180cf90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterIntoxicationComponent.ClearIntoxication
	// void ClearIntoxication();                                                                                                // [0x180cf70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CharacterRecoilComponent
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UCharacterRecoilComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FVector)                                   Recoil                                                      OFFSET(getStruct<T>, {0xB0, 12, 0, 0})
	SMember(FVector)                                   RecoilVelocity                                              OFFSET(getStruct<T>, {0xBC, 12, 0, 0})
	SMember(FVector)                                   PrevError                                                   OFFSET(getStruct<T>, {0xC8, 12, 0, 0})
};

/// Class /Script/FSD.CharacterSettings
/// Size: 0x0248 (0x000030 - 0x000278)
class UCharacterSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(TArray<TSoftObjectPtr<UClass*>>)           RankedHeroClasses                                           OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FText>)                             PlayerRankNames                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TMap<class UPlayerCharacterID*, class UInventoryList*>) InventoryLists                                 OFFSET(get<T>, {0x50, 80, 0, 0})
	CMember(TArray<int32_t>)                           CharacterXPLevels                                           OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TMap<FGuid, class UPlayerCharacterID*>)    PlayerCharacterIDMap                                        OFFSET(get<T>, {0xB0, 80, 0, 0})
	CMember(TArray<class UPlayerCharacterID*>)         PlayerCharacterIDs                                          OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(class UPlayerCharacterID*)                 BoscoID                                                     OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 DefaultCharacterID                                          OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 DefaultEditorCharacterID                                    OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class USkeletalMesh*)                      NoHead                                                      OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class USkeletalMesh*)                      DefaultHead                                                 OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class USkeletalMesh*)                      HeadForMasks                                                OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class USkeletalMesh*)                      ThickNeck                                                   OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class USkeletalMesh*)                      ThinNeck                                                    OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class USkeletalMesh*)                      FlatEars                                                    OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class USkeletalMesh*)                      FaceOnly                                                    OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class USkeletalMesh*)                      EyesOnly                                                    OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             CarriableBagClass                                           OFFSET(get<T>, {0x168, 40, 0, 0})
	CMember(class UUseAnimationSetting*)               ThrowItemAnimSettings                                       OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             CampaignManagerClass                                        OFFSET(get<T>, {0x198, 40, 0, 0})
	CMember(TMap<class UPlayerCharacterID*, class UCharacterVanityItems*>) CharacterVanityItems                    OFFSET(get<T>, {0x1C0, 80, 0, 0})
	CMember(class UDialogDataAsset*)                   AutoReloadShout                                             OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 TeleportPositioning                                         OFFSET(get<T>, {0x218, 8, 0, 0})
	CMember(class UClass*)                             TeleportPlacement                                           OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TMap<class UPlayerCharacterID*, class UPlayerCharacterData*>) CharacterData                            OFFSET(get<T>, {0x228, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterSettings.PreloadAllInventories
	// void PreloadAllInventories(class UAsyncManager* AsyncManager);                                                           // [0x180da10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterSettings.GetPlayerCharacterID
	// class UPlayerCharacterID* GetPlayerCharacterID(FGuid& ID);                                                               // [0x180d530] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterSettings.GetInventoryList
	// class UInventoryList* GetInventoryList(class UPlayerCharacterID* characterID);                                           // [0x180d400] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.ReplicatedCharacterData
/// Size: 0x0018 (0x000000 - 0x000018)
class FReplicatedCharacterData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Target                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     TemperatureEffect                                           OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      bCanTakeDamage                                              OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Class /Script/FSD.CharacterSightComponent
/// Size: 0x0140 (0x0000B0 - 0x0001F0)
class UCharacterSightComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FMulticastInlineDelegate)                  OnTargetChanged                                             OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     TargetMaxDistance                                           OFFSET(get<float>, {0xC0, 4, 0, 0})
	CMember(TEnumAsByte<ECollisionChannel>)            TraceChannel                                                OFFSET(get<T>, {0xC4, 1, 0, 0})
	CMember(TArray<TWeakObjectPtr<AActor*>>)           IgnoredActors                                               OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             TargetActor                                                 OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPrimitiveComponent*>) TargetPrimitive                                            OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(TWeakObjectPtr<class USimpleObjectInfoComponent*>) TargetInfo                                          OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTemperatureComponent*>) TargetTemperature                                        OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPawnAfflictionComponent*>) TargetAfflictions                                     OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   TargetHealth                                                OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TScriptInterface<Class>)                   TargetTargetable                                            OFFSET(get<T>, {0x118, 16, 0, 0})
	DMember(float)                                     TargetTime                                                  OFFSET(get<float>, {0x128, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<UCharacterSightSensorBase*>>) TargetSensors                                      OFFSET(get<T>, {0x130, 16, 0, 0})
	SMember(FReplicatedCharacterData)                  ReplicatedData                                              OFFSET(getStruct<T>, {0x140, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterSightComponent.TargetChangedSignature__DelegateSignature
	// void TargetChangedSignature__DelegateSignature(class AActor* NewTarget, class UPrimitiveComponent* NewPrimitive);        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.CharacterSightComponent.Server_UpdateTarget
	// void Server_UpdateTarget(class AActor* NewActor, class UPrimitiveComponent* NewPrimitive);                               // [0x180dcf0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CharacterSightComponent.RemoveIgnoreActor
	// void RemoveIgnoreActor(class AActor* InActor);                                                                           // [0x180db30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterSightComponent.GetSightStartAndEnd
	// void GetSightStartAndEnd(float InMaxDistance, FVector& OutStartLocation, FVector& OutEndLocation);                       // [0x180d5e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterSightComponent.AddIgnoreActor
	// void AddIgnoreActor(class AActor* InActor);                                                                              // [0x180ce40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CharacterSightSensorBase
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UCharacterSightSensorBase : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0xB0, 1, 0, 0})
};

/// Class /Script/FSD.CharacterSightSensor
/// Size: 0x0050 (0x0000B8 - 0x000108)
class UCharacterSightSensor : public UCharacterSightSensorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FMulticastInlineDelegate)                  OnSensorActivated                                           OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSensorDeactivated                                         OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	DMember(float)                                     SensorActiveForMinDuration                                  OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     MinimumDistance                                             OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(float)                                     MaximumDistance                                             OFFSET(get<float>, {0xE0, 4, 0, 0})
	CMember(TArray<class UPrimitiveComponent*>)        RestrictToColliders                                         OFFSET(get<T>, {0xE8, 16, 0, 0})
	DMember(bool)                                      bSensorActivated                                            OFFSET(get<bool>, {0xF8, 1, 0, 0})
	DMember(float)                                     TimeActive                                                  OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     LastSeenTime                                                OFFSET(get<float>, {0x100, 4, 0, 0})
};

/// Class /Script/FSD.CharacterStateComponent
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UCharacterStateComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(char)                                      StateId                                                     OFFSET(get<char>, {0xB8, 1, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   EnterStateShout                                             OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ExitStateShout                                              OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   AttentionShout                                              OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UPlayerMovementComponent*)           PlayerMovement                                              OFFSET(get<T>, {0xE0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterStateComponent.ReceiveStateTick
	// void ReceiveStateTick(float DeltaTime);                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterStateComponent.ReceiveStateExit
	// void ReceiveStateExit();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterStateComponent.ReceiveStateEnter
	// void ReceiveStateEnter();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterStateComponent.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x180d880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterStateComponent.HasAuthority
	// bool HasAuthority();                                                                                                     // [0x180d7f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterStateComponent.GetStateTime
	// float GetStateTime();                                                                                                    // [0x180d770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterStateComponent.GetStateID
	// char GetStateID();                                                                                                       // [0x180d750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterStateComponent.GetStateActive
	// bool GetStateActive();                                                                                                   // [0x180d730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterStateComponent.GetCharacterMovement
	// class UPlayerMovementComponent* GetCharacterMovement();                                                                  // [0x180d2f0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.CharacterUseState
/// Size: 0x0010 (0x000000 - 0x000010)
class FCharacterUseState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UUsableComponentBase*)               ActiveUsable                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EInputKeys)                                Key                                                         OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   UseId                                                       OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.CharacterUseComponent
/// Size: 0x00D8 (0x0000B0 - 0x000188)
class UCharacterUseComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FMulticastInlineDelegate)                  OnBeginHoveringEvent                                        OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndHoveringEvent                                          OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBeginUsingEvent                                           OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndUsingEvent                                             OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDepositingBegin                                           OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDepositingEnd                                             OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	DMember(float)                                     UseDistance                                                 OFFSET(get<float>, {0x114, 4, 0, 0})
	SMember(FCharacterUseState)                        State                                                       OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	SMember(FCharacterUseState)                        LocalState                                                  OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	SMember(FCharacterUseState)                        LastRequestedState                                          OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	CMember(class UUsableComponentBase*)               LastBeginUseUsable                                          OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(TArray<class UUsableComponentBase*>)       UsableComponentsCache                                       OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(class UUsableComponentBase*)               HoveringUsable                                              OFFSET(get<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterUseComponent.Server_SetState
	// void Server_SetState(FCharacterUseState NewState);                                                                       // [0x180dc50] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CharacterUseComponent.RemoveCustomUsableComponent
	// void RemoveCustomUsableComponent(class UUsableComponentBase* Usable);                                                    // [0x180daa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterUseComponent.OnRep_State
	// void OnRep_State(FCharacterUseState& oldState);                                                                          // [0x180d970] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.CharacterUseComponent.IsLookingAtUsable
	// bool IsLookingAtUsable();                                                                                                // [0x180d8e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterUseComponent.IsLookingAtDepositable
	// bool IsLookingAtDepositable();                                                                                           // [0x180d8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterUseComponent.GetUseProgress
	// float GetUseProgress();                                                                                                  // [0x180d790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterUseComponent.GetLookingAtActor
	// class AActor* GetLookingAtActor();                                                                                       // [0x180d500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterUseComponent.GetIsUsing
	// bool GetIsUsing();                                                                                                       // [0x180d4d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CharacterUseComponent.GetIsDepositing
	// bool GetIsDepositing();                                                                                                  // [0x180d4a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CharacterUseComponent.GetHoveringUsable
	// class UUsableComponentBase* GetHoveringUsable();                                                                         // [0x180d310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterUseComponent.GetActiveUsable
	// class UUsableComponentBase* GetActiveUsable();                                                                           // [0x180d240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterUseComponent.All_UseEnded
	// void All_UseEnded(FCharacterUseState oldState);                                                                          // [0x180ced0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.CharacterUseComponent.AddCustomUsableComponent
	// void AddCustomUsableComponent(class UUsableComponentBase* Usable, ECustomUsableType eType);                              // [0x180cd70] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.EquippedVanity
/// Size: 0x0020 (0x000000 - 0x000020)
class FEquippedVanity : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<class UVanityItem*>)                Vanity                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(class UVanityItem*)                        SelectedArmorMaterial                                       OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      UsingSlevedArmor                                            OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Class /Script/FSD.CharacterVanityComponent
/// Size: 0x0198 (0x0000B0 - 0x000248)
class UCharacterVanityComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(class UCharacterVanityItems*)              AvailableVanityItems                                        OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UBeardColorVanityItem*)              ShownBeardColor                                             OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UMaterialInterface*)                 ArmorMaterial                                               OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UMaterialInterface*)                 ArmorClothMaterial                                          OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           DynamicSkinMaterial                                         OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(EHeadVanityType)                           HeadVanityType                                              OFFSET(get<T>, {0xE8, 1, 0, 0})
	SMember(FEquippedVanity)                           EquippedVanity                                              OFFSET(getStruct<T>, {0xF0, 32, 0, 0})
	CMember(class UVanityItem*)                        PreviewedItem                                               OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UArmorMaterialVanityItem*)           PreviewedArmorMaterial                                      OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UMaterialInterface*)                 SkinMaterial                                                OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(TArray<FTattooArmorItem>)                  Tattoos                                                     OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<class UMaterialInterface*>)         CachedMaterials                                             OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TMap<EVanitySlot, class USkeletalMeshComponent*>) VanityMeshes                                         OFFSET(get<T>, {0x1A8, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterVanityComponent.UpdateMeshes
	// void UpdateMeshes();                                                                                                     // [0x1813330] Final|Native|Protected 
	// Function /Script/FSD.CharacterVanityComponent.UpdateEquippedVanity
	// void UpdateEquippedVanity(bool applyItems);                                                                              // [0x18132a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityComponent.SetEquippedVanityInViewer
	// void SetEquippedVanityInViewer(FEquippedVanity& equippedVanityItems);                                                    // [0x1813000] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityComponent.SetDesireSleevelessArmor
	// void SetDesireSleevelessArmor(class UObject* WorldContextObject, class UPlayerCharacterID* Character, bool inDesireSleeveless); // [0x1812f00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityComponent.Server_SetEquippedVanity
	// void Server_SetEquippedVanity(FEquippedVanity equippedItems);                                                            // [0x1812d70] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CharacterVanityComponent.RemoveMedicalGown
	// void RemoveMedicalGown();                                                                                                // [0x1812c80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityComponent.Receive_GetEquippedVanityItem
	// class UVanityItem* Receive_GetEquippedVanityItem(class UObject* WorldContextObject, class UPlayerCharacterID* Character, EVanitySlot Slot); // [0x1812b80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CharacterVanityComponent.Receive_GetDesireSleevelessArmor
	// bool Receive_GetDesireSleevelessArmor(class UObject* WorldContextObject, class UPlayerCharacterID* Character);           // [0x1812ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CharacterVanityComponent.OnRep_EquippedVanity
	// void OnRep_EquippedVanity();                                                                                             // [0x1812a90] Final|Native|Protected 
	// Function /Script/FSD.CharacterVanityComponent.HasSpawnedInMedbay
	// bool HasSpawnedInMedbay();                                                                                               // [0x1812990] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterVanityComponent.GetEquippedVanityItem
	// class UVanityItem* GetEquippedVanityItem(EVanitySlot Slot, bool ignorePreviewItems);                                     // [0x1812260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterVanityComponent.GetDesireSleevelessArmor
	// bool GetDesireSleevelessArmor();                                                                                         // [0x1812230] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterVanityComponent.GetAvailableVanityItems
	// class UCharacterVanityItems* GetAvailableVanityItems();                                                                  // [0x1812110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterVanityComponent.EquipMedicalGown
	// void EquipMedicalGown();                                                                                                 // [0x18120f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityComponent.EnforceValidPaintjob
	// void EnforceValidPaintjob();                                                                                             // [0x18120d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityComponent.CreateEquippedGear
	// void CreateEquippedGear();                                                                                               // [0x1811fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityComponent.Client_RemoveMedicalGown
	// void Client_RemoveMedicalGown();                                                                                         // [0x180a020] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.CharacterVanityComponent.Client_EquipMedicalGown
	// void Client_EquipMedicalGown();                                                                                          // [0x1809fe0] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FSD.CharacterVanityItems
/// Size: 0x0058 (0x000030 - 0x000088)
class UCharacterVanityItems : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TMap<EVanitySlot, class UVanityItem*>)     DefaultItems                                                OFFSET(get<T>, {0x30, 80, 0, 0})
	CMember(class UPlayerCharacterID*)                 OwningCharacter                                             OFFSET(get<T>, {0x80, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterVanityItems.SortVanityItems
	// void SortVanityItems(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, TArray<UVanityItem*>& VanityItems); // [0x1813180] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityItems.GetVanityItems
	// TArray<UVanityItem*> GetVanityItems(class UObject* WorldContextObject, EVanitySlot Slot, bool onlyStoreItems, class UPlayerCharacterID* characterID); // [0x18127e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityItems.GetVanityItem
	// class UVanityItem* GetVanityItem(FGuid& VanityID);                                                                       // [0x1812730] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterVanityItems.GetUnLockedVanityItems
	// TArray<UVanityItem*> GetUnLockedVanityItems(class UObject* WorldContextObject, EVanitySlot Slot, bool onlyStoreItems, class UPlayerCharacterID* characterID); // [0x1812580] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityItems.GetLockedVanityItems
	// TArray<UVanityItem*> GetLockedVanityItems(class UObject* WorldContextObject, EVanitySlot Slot, class UPlayerCharacterID* characterID); // [0x1812440] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.CharacterVanityItems.GetItems
	// TArray<UVanityItem*> GetItems(EVanitySlot Slot, bool onlyStoreItems);                                                    // [0x1812360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CharacterVanityItems.GetDefaultVanityItem
	// class UVanityItem* GetDefaultVanityItem(class UObject* WorldContext, EVanitySlot Slot, class UPlayerCharacterID* characterID); // [0x1812130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CharacterVanityItems.DoesVanitySlotAllowStyleTags
	// bool DoesVanitySlotAllowStyleTags(EVanitySlot Slot);                                                                     // [0x1812000] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.CharacterSelectionSwitcher
/// Size: 0x0000 (0x000220 - 0x000220)
class ACharacterSelectionSwitcher : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:


	/// Functions
	// Function /Script/FSD.CharacterSelectionSwitcher.OnVictoryPoseChanged
	// void OnVictoryPoseChanged(class UVictoryPose* VictoryPose);                                                              // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.CharacterSelectionSwitcher.OnVanityItemEquipped
	// void OnVanityItemEquipped(EVanitySlot Slot);                                                                             // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.CharacterSelectionSwitcher.Hide
	// void Hide();                                                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.CharacterSelectionSwitcher.GetViewerActor
	// class AActor* GetViewerActor();                                                                                          // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.CharacterSelectionSwitcher.GetActiveCharacter
	// class APlayerCharacter* GetActiveCharacter();                                                                            // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FSD.ChargedWeapon
/// Size: 0x00A8 (0x000780 - 0x000828)
class AChargedWeapon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2088;

public:
	SMember(FMulticastInlineDelegate)                  OnChargeChanged                                             OFFSET(getStruct<T>, {0x780, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHeatChanged                                               OFFSET(getStruct<T>, {0x790, 16, 0, 0})
	CMember(class UAnimMontage*)                       FP_OverheatAnim                                             OFFSET(get<T>, {0x7A8, 8, 0, 0})
	CMember(class UAnimMontage*)                       WeaponOverheatAnim                                          OFFSET(get<T>, {0x7B0, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_ChargeupMontage                                          OFFSET(get<T>, {0x7B8, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_ChargeupMontage                                          OFFSET(get<T>, {0x7C0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     ChargeupParticles                                           OFFSET(get<T>, {0x7C8, 8, 0, 0})
	CMember(class UFXSystemComponent*)                 ChargeupParticleInstance                                    OFFSET(get<T>, {0x7D0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     ChargeupFireMuzzleFlash                                     OFFSET(get<T>, {0x7D8, 8, 0, 0})
	CMember(class USoundCue*)                          NormalFiresound                                             OFFSET(get<T>, {0x7E0, 8, 0, 0})
	CMember(class USoundCue*)                          FullyChargedFireSound                                       OFFSET(get<T>, {0x7E8, 8, 0, 0})
	DMember(float)                                     ChargeSpeed                                                 OFFSET(get<float>, {0x7F0, 4, 0, 0})
	DMember(bool)                                      Charging                                                    OFFSET(get<bool>, {0x7F4, 1, 0, 0})
	DMember(float)                                     ChargeProgress                                              OFFSET(get<float>, {0x7F8, 4, 0, 0})
	DMember(int32_t)                                   ShotCostAtBelowFullCharge                                   OFFSET(get<int32_t>, {0x7FC, 4, 0, 0})
	DMember(int32_t)                                   ShotCostAtFullCharge                                        OFFSET(get<int32_t>, {0x800, 4, 0, 0})
	DMember(bool)                                      ChargedShotsOnly                                            OFFSET(get<bool>, {0x804, 1, 0, 0})
	DMember(bool)                                      AutoFireWhenOverheated                                      OFFSET(get<bool>, {0x805, 1, 0, 0})
	DMember(float)                                     TotalHeat                                                   OFFSET(get<float>, {0x808, 4, 0, 0})
	DMember(float)                                     CoolingRate                                                 OFFSET(get<float>, {0x810, 4, 0, 0})
	DMember(float)                                     HeatPerSecondWhileCharging                                  OFFSET(get<float>, {0x814, 4, 0, 0})
	DMember(float)                                     HeatPerSecondWhenCharged                                    OFFSET(get<float>, {0x818, 4, 0, 0})
	DMember(float)                                     HeatPerNormalShot                                           OFFSET(get<float>, {0x81C, 4, 0, 0})
	DMember(float)                                     HeatPerChargedShot                                          OFFSET(get<float>, {0x820, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ChargedWeapon.SetOverheated
	// void SetOverheated(bool isOverheated);                                                                                   // [0x18130b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ChargedWeapon.Server_SetIsCharging
	// void Server_SetIsCharging(bool isCharging);                                                                              // [0x17ef280] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ChargedWeapon.RecieveStoppedCharging
	// void RecieveStoppedCharging(float ChargeProgress);                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ChargedWeapon.RecieveStartedCharging
	// void RecieveStartedCharging();                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ChargedWeapon.RecieveChargeProgressChanged
	// void RecieveChargeProgressChanged(float NewChargeProgress);                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ChargedWeapon.ReceiveOverheatedChanged
	// void ReceiveOverheatedChanged(bool isOverheated);                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ChargedWeapon.OnRep_Charging
	// void OnRep_Charging();                                                                                                   // [0x1812a70] Final|Native|Protected 
	// Function /Script/FSD.ChargedWeapon.GetIsCharging
	// bool GetIsCharging();                                                                                                    // [0x1812330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ChargedWeaponAnimInstance
/// Size: 0x0028 (0x0002B8 - 0x0002E0)
class UChargedWeaponAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	DMember(bool)                                      isCharging                                                  OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(float)                                     ChargeupPlayRate                                            OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     ChargeupPlayRateSpeedChange                                 OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     ChargedownPlayRateSpeedChange                               OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     MaxChargeupPlayRate                                         OFFSET(get<float>, {0x2C8, 4, 0, 0})
	CMember(class AChargedWeapon*)                     Weapon                                                      OFFSET(get<T>, {0x2D0, 8, 0, 0})
};

/// Struct /Script/FSD.ProjectileImpact
/// Size: 0x0038 (0x000000 - 0x000038)
class FProjectileImpact : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 Normal                                                      OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             Actor                                                       OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPrimitiveComponent*>) Component                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UPhysicalMaterial*)                  PhysMat                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   BoneIndex                                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(bool)                                      bBlockingHit                                                OFFSET(get<bool>, {0x34, 1, 0, 0})
};

/// Class /Script/FSD.ProjectileBase
/// Size: 0x00D0 (0x000220 - 0x0002F0)
class AProjectileBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	SMember(FProjectileImpact)                         ProjectileImpact                                            OFFSET(getStruct<T>, {0x220, 56, 0, 0})
	DMember(bool)                                      ApplyShotPower                                              OFFSET(get<bool>, {0x258, 1, 0, 0})
	DMember(bool)                                      IsSpawnedFromWeapon                                         OFFSET(get<bool>, {0x259, 1, 0, 0})
	DMember(bool)                                      Exploded                                                    OFFSET(get<bool>, {0x25A, 1, 0, 0})
	DMember(bool)                                      DoOnImpact                                                  OFFSET(get<bool>, {0x25B, 1, 0, 0})
	DMember(bool)                                      DoOnImpact2                                                 OFFSET(get<bool>, {0x25C, 1, 0, 0})
	DMember(bool)                                      DoOnImpact3                                                 OFFSET(get<bool>, {0x25D, 1, 0, 0})
	DMember(bool)                                      DoOnSpawnVar                                                OFFSET(get<bool>, {0x25E, 1, 0, 0})
	DMember(float)                                     GravityMultiplier                                           OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(bool)                                      IsDorment                                                   OFFSET(get<bool>, {0x278, 1, 0, 0})
	CMember(class USphereComponent*)                   CollisionComponent                                          OFFSET(get<T>, {0x280, 8, 0, 0})
	DMember(float)                                     LifeSpan                                                    OFFSET(get<float>, {0x28C, 4, 0, 0})
	DMember(float)                                     VelocityMultiplier                                          OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(bool)                                      AffectedByDifficultySpeedModifier                           OFFSET(get<bool>, {0x294, 1, 0, 0})
	DMember(bool)                                      SetInitialSpeedToMaxSpeed                                   OFFSET(get<bool>, {0x295, 1, 0, 0})
	DMember(bool)                                      AutoDisableCollisionOnImpact                                OFFSET(get<bool>, {0x296, 1, 0, 0})
	CMember(class USoundCue*)                          WhizbySound                                                 OFFSET(get<T>, {0x298, 8, 0, 0})
	DMember(float)                                     WhizByCooldown                                              OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     WhizByStartDistance                                         OFFSET(get<float>, {0x2A4, 4, 0, 0})
	CMember(EOnProjectileImpactBehaviourEnum)          EOnImpactBehaviour                                          OFFSET(get<T>, {0x2B0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileBase.TryGetTerrainMaterial
	// class UTerrainMaterial* TryGetTerrainMaterial();                                                                         // [0x1978c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProjectileBase.StopMovement
	// void StopMovement();                                                                                                     // [0x1978c20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProjectileBase.Server_SetState
	// void Server_SetState(FVector_NetQuantize Position, FVector_NetQuantize Velocity);                                        // [0x1978370] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ProjectileBase.Server_Penetrated
	// void Server_Penetrated(FProjectileImpact Impact);                                                                        // [0x19782c0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ProjectileBase.Server_Impacted
	// void Server_Impacted(FProjectileImpact Impact);                                                                          // [0x1978210] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ProjectileBase.OnUpgradeElementAdded
	// void OnUpgradeElementAdded(class UProjectileUpgradeElement* element);                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProjectileBase.OnRep_ProjectileImpact
	// void OnRep_ProjectileImpact();                                                                                           // [0x1978100] Native|Public        
	// Function /Script/FSD.ProjectileBase.OnRep_IsDorment
	// void OnRep_IsDorment(bool wasDorment);                                                                                   // [0x1977fb0] Native|Public        
	// Function /Script/FSD.ProjectileBase.OnPenetrated
	// void OnPenetrated(bool PredictedPenetration, FHitResult& HitResult);                                                     // [0x1d6f900] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.ProjectileBase.OnInitialized
	// void OnInitialized();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProjectileBase.OnImpacted
	// void OnImpacted(bool PredictedImpact, FHitResult& HitResult);                                                            // [0x1d6f900] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.ProjectileBase.MakeBouncy
	// void MakeBouncy();                                                                                                       // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProjectileBase.InitState
	// void InitState(FVector& ShootDirection, FVector& initialBonusVelocity);                                                  // [0x1977bd0] Native|Public|HasOutParms|HasDefaults 
	// Function /Script/FSD.ProjectileBase.InitComponents
	// void InitComponents();                                                                                                   // [0x1977bb0] Native|Public        
	// Function /Script/FSD.ProjectileBase.IgnoreCollision
	// void IgnoreCollision(class UPrimitiveComponent* otherCollider);                                                          // [0x1977b20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProjectileBase.HasImpactAuthority
	// bool HasImpactAuthority();                                                                                               // [0x1977af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProjectileBase.GetGameTimeSinceActivation
	// float GetGameTimeSinceActivation();                                                                                      // [0x1977a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProjectileBase.GetDamageComponent
	// class UDamageComponent* GetDamageComponent();                                                                            // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProjectileBase.GetBoneIndex
	// int32_t GetBoneIndex();                                                                                                  // [0x1977880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProjectileBase.DoOnSpawn
	// void DoOnSpawn();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProjectileBase.DisableProjectileCollision
	// void DisableProjectileCollision(class AProjectileBase* projectileA, class AProjectileBase* projectileB);                 // [0x1977280] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ProjectileBase.DisableAndDestroy
	// void DisableAndDestroy();                                                                                                // [0x92c660] Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProjectileBase.DamageArmor
	// class UFSDPhysicalMaterial* DamageArmor(class UDamageComponent* DamageComponent, FHitResult& HitResult);                 // [0x1977120] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProjectileBase.CustomEvent
	// void CustomEvent(class UItemUpgrade* Event);                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ProjectileBase.Client_DrawServersDebugPath
	// void Client_DrawServersDebugPath(FVector Location);                                                                      // [0x1977050] Net|NetReliableNative|Event|Protected|HasDefaults|NetClient 
	// Function /Script/FSD.ProjectileBase.Activate
	// void Activate(class AActor* owningActor, FVector Origin, FVector_NetQuantizeNormal Direction, FVector_NetQuantizeNormal initialBonusVelocity); // [0x1976eb0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/FSD.ProjectileState
/// Size: 0x0028 (0x000000 - 0x000028)
class FProjectileState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FVector_NetQuantize)                       Velocity                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	CMember(class USceneComponent*)                    HomingTargetComponent                                       OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      IsSimulating                                                OFFSET(get<bool>, {0x20, 1, 1, 0})
	DMember(bool)                                      IsBouncy                                                    OFFSET(get<bool>, {0x20, 1, 1, 1})
	DMember(bool)                                      IsHoming                                                    OFFSET(get<bool>, {0x20, 1, 1, 2})
	DMember(bool)                                      IsPenetrating                                               OFFSET(get<bool>, {0x20, 1, 1, 3})
};

/// Class /Script/FSD.Projectile
/// Size: 0x0050 (0x0002F0 - 0x000340)
class AProjectile : public AProjectileBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	SMember(FProjectileState)                          State                                                       OFFSET(getStruct<T>, {0x2F0, 40, 0, 0})
	DMember(bool)                                      UseArmorDamageBoneCheck                                     OFFSET(get<bool>, {0x320, 1, 0, 0})
	CMember(TArray<class UClass*>)                     IgnoreActorClasses                                          OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(class UFSDProjectileMovementComponent*)    MovementComponent                                           OFFSET(get<T>, {0x338, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.Projectile.SpawnProjectileFromSelf
	// class AProjectileBase* SpawnProjectileFromSelf(class UObject* WorldContextObject, class UClass* ProjectileClass, FVector Origin, FRotator velocityDirection); // [0x1978870] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.Projectile.SpawnProjectile
	// class AProjectileBase* SpawnProjectile(class UObject* WorldContextObject, class UClass* ProjectileClass, class APawn* projectileOwner, FVector Origin, FRotator velocityDirection); // [0x19786d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.Projectile.SpawnBallisticProjectile
	// class AProjectileBase* SpawnBallisticProjectile(class UObject* WorldContextObject, class UClass* ProjectileClass, class APawn* projectileOwner, FVector Origin, FVector Velocity); // [0x1978530] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.Projectile.SetHomingTargetComponent
	// void SetHomingTargetComponent(class USceneComponent* HomingTargetComponent, float Delay);                                // [0x1978460] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Projectile.Server_DisableHoming
	// void Server_DisableHoming();                                                                                             // [0x19781f0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.Projectile.OnRep_State
	// void OnRep_State(FProjectileState& oldState);                                                                            // [0x1978120] Native|Protected|HasOutParms 
	// Function /Script/FSD.Projectile.OnPenetration
	// void OnPenetration(FHitResult& HitResult);                                                                               // [0x1977ed0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.Projectile.OnImpact
	// void OnImpact(FHitResult& HitResult);                                                                                    // [0x1977df0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.Projectile.OnBounce
	// void OnBounce(FHitResult& ImpactResult, FVector& ImpactVelocity);                                                        // [0x1977cc0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.Projectile.FindBoneIndexFromArmor
	// class UFSDPhysicalMaterial* FindBoneIndexFromArmor(FHitResult& HitResult, int32_t& outBoneIndex);                        // [0x1977340] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Projectile.DisableHoming
	// void DisableHoming();                                                                                                    // [0x1977260] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ChargedProjectile
/// Size: 0x0008 (0x000340 - 0x000348)
class AChargedProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	DMember(bool)                                      ExplodesWhenDead                                            OFFSET(get<bool>, {0x340, 1, 0, 0})
	DMember(bool)                                      PersistentExplosion                                         OFFSET(get<bool>, {0x341, 1, 0, 0})
	DMember(bool)                                      AoEDamageInFlight                                           OFFSET(get<bool>, {0x342, 1, 0, 0})
	DMember(float)                                     DirectDamageReduction                                       OFFSET(get<float>, {0x344, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ChargedProjectile.OnAoEDamageEnabled
	// void OnAoEDamageEnabled();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Struct /Script/FSD.ClaimableRewardEntry
/// Size: 0x0090 (0x000000 - 0x000090)
class FClaimableRewardEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            Image                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UReward*>)                    Rewards                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EntryWidgetOverride                                         OFFSET(get<T>, {0x68, 40, 0, 0})
};

/// Class /Script/FSD.ClaimableRewardEntryWidget
/// Size: 0x00B8 (0x000260 - 0x000318)
class UClaimableRewardEntryWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FMulticastInlineDelegate)                  OnRewardClaimed                                             OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	SMember(FClaimableRewardEntry)                     Data                                                        OFFSET(getStruct<T>, {0x270, 144, 0, 0})
	SMember(FText)                                     ButtonText                                                  OFFSET(getStruct<T>, {0x300, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.ClaimableRewardEntryWidget.WidgetDelegate__DelegateSignature
	// void WidgetDelegate__DelegateSignature(class UClaimableRewardEntryWidget* EntryWidget);                                  // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.ClaimableRewardEntryWidget.SignalRewardClaimed
	// void SignalRewardClaimed();                                                                                              // [0x1813140] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ClaimableRewardEntryWidget.SetData
	// void SetData(FClaimableRewardEntry InData);                                                                              // [0x1812e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ClaimableRewardEntryWidget.ReceiveMoveIn
	// void ReceiveMoveIn(float InStartDelay);                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ClaimableRewardEntryWidget.ReceiveDataChanged
	// void ReceiveDataChanged();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ClaimableRewardEntryWidget.MoveIn
	// void MoveIn(float InStartDelay);                                                                                         // [0x18129c0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.ClaimableRewardView
/// Size: 0x0088 (0x000000 - 0x000088)
class FClaimableRewardView : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(class UDialogDataAsset*)                   MissionControlSpeak                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             BackgroundWidgetClass                                       OFFSET(get<T>, {0x8, 40, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          FanfareAudio                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     MoveInRewardsDelay                                          OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(TArray<FClaimableRewardEntry>)             RewardDisplays                                              OFFSET(get<T>, {0x60, 16, 0, 0})
	SMember(FText)                                     ClaimButtonText                                             OFFSET(getStruct<T>, {0x70, 24, 0, 0})
};

/// Class /Script/FSD.ClaimableRewardViewWidget
/// Size: 0x0088 (0x000260 - 0x0002E8)
class UClaimableRewardViewWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	SMember(FClaimableRewardView)                      Data                                                        OFFSET(getStruct<T>, {0x260, 136, 0, 0})


	/// Functions
	// Function /Script/FSD.ClaimableRewardViewWidget.ReceiveEndFlow
	// void ReceiveEndFlow();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ClaimableRewardViewWidget.ReceiveDataChanged
	// void ReceiveDataChanged();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ClaimableRewardViewWidget.ReceiveBeginFlow
	// void ReceiveBeginFlow();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ClaimableRewardViewWidget.EndRewardFlow
	// void EndRewardFlow();                                                                                                    // [0x1812080] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ClaimableRewardViewWidget.BeginRewardFlow
	// void BeginRewardFlow(FClaimableRewardView InViewData);                                                                   // [0x1811ca0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.RessuplyPod
/// Size: 0x00C0 (0x000220 - 0x0002E0)
class ARessuplyPod : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x228, 16, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x238, 32, 0, 0})
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x258, 8, 0, 0})
	DMember(float)                                     KillRadius                                                  OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     DropHeight                                                  OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     DropDelay                                                   OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     MissionShoutDelay                                           OFFSET(get<float>, {0x26C, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutDialogOrderAccepted                                    OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DialogOrderAccepted                                         OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DialogPodArrived                                            OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   CurrentMissionShout                                         OFFSET(get<T>, {0x290, 8, 0, 0})
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x298, 12, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0x2A4, 12, 0, 0})
	CMember(ERessuplyPodState)                         State                                                       OFFSET(get<T>, {0x2B0, 1, 0, 0})
	DMember(float)                                     TargetDropTime                                              OFFSET(get<float>, {0x2B4, 4, 0, 0})
	DMember(float)                                     ServerDropProgress                                          OFFSET(get<float>, {0x2C4, 4, 0, 0})
	CMember(class UCurveFloat*)                        DropCurve                                                   OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class AActor*)                             PlayerSpawnPoint                                            OFFSET(get<T>, {0x2D0, 8, 0, 0})
	DMember(float)                                     CloseToImpactDistance                                       OFFSET(get<float>, {0x2D8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RessuplyPod.SetIdling
	// void SetIdling();                                                                                                        // [0x198b870] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RessuplyPod.RessuplyPodStateDelegate__DelegateSignature
	// void RessuplyPodStateDelegate__DelegateSignature(class ARessuplyPod* InPod, ERessuplyPodState InState);                  // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RessuplyPod.OnTunnelBLocked
	// void OnTunnelBLocked();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RessuplyPod.OnRep_TargetLocation
	// void OnRep_TargetLocation();                                                                                             // [0x198b360] Final|Native|Protected 
	// Function /Script/FSD.RessuplyPod.OnRep_State
	// void OnRep_State(ERessuplyPodState oldState);                                                                            // [0x198b2e0] Final|Native|Protected 
	// Function /Script/FSD.RessuplyPod.OnDropStarted
	// void OnDropStarted();                                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RessuplyPod.OnDroppodImpact
	// void OnDroppodImpact();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RessuplyPod.OnDroppodCloseToImpact
	// void OnDroppodCloseToImpact();                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RessuplyPod.DropToTarget
	// class AActor* DropToTarget(class UObject* WorldContextObject, class UClass* podClass, FVector& Location, class AActor* requester); // [0x198a930] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.CleanupPod
/// Size: 0x0008 (0x0002E0 - 0x0002E8)
class ACleanupPod : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 744;

public:
	CMember(class USphereComponent*)                   RemovePlagueCollision                                       OFFSET(get<T>, {0x2E0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CleanupPod.OnObjectiveChanged
	// void OnObjectiveChanged(class UObjective* Objective);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CleanupPod.ChangedState
	// void ChangedState(class ARessuplyPod* InPod, ERessuplyPodState InState);                                                 // [0x1811f10] Final|Native|Protected 
};

/// Class /Script/FSD.RessuplyPodItem
/// Size: 0x0060 (0x0003E0 - 0x000440)
class ARessuplyPodItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(class UClass*)                             ResupplyBeacon                                              OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UClass*)                             ItemPlacerClass                                             OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UItemPlacerAggregator*)              ItemPlacerInstance                                          OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UClass*)                             SupplyPodClass                                              OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(int32_t)                                   ResourceCost                                                OFFSET(get<int32_t>, {0x400, 4, 0, 0})
	SMember(FText)                                     OrderDescription                                            OFFSET(getStruct<T>, {0x408, 24, 0, 0})
	SMember(FText)                                     LogText                                                     OFFSET(getStruct<T>, {0x420, 24, 0, 0})
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(bool)                                      Used                                                        OFFSET(get<bool>, {0x43C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RessuplyPodItem.Server_Call_Resupply
	// void Server_Call_Resupply(FVector Location);                                                                             // [0x18010b0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.RessuplyPodItem.ReceiveItemPlacerSpawned
	// void ReceiveItemPlacerSpawned(class UItemPlacerAggregator* InItemPlacer);                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RessuplyPodItem.OnRep_Used
	// void OnRep_Used();                                                                                                       // [0x198b380] Final|Native|Protected 
	// Function /Script/FSD.RessuplyPodItem.GetResourceCost
	// int32_t GetResourceCost(class UObject* WorldContextObject);                                                              // [0x198ae20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RessuplyPodItem.GetActiveAggregator
	// class UItemPlacerAggregator* GetActiveAggregator();                                                                      // [0x198aa90] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CleanupPodItem
/// Size: 0x0028 (0x000440 - 0x000468)
class ACleanupPodItem : public ARessuplyPodItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1128;

public:
	SMember(FMulticastInlineDelegate)                  OnCleaningPodLaunched                                       OFFSET(getStruct<T>, {0x448, 16, 0, 0})
	CMember(TWeakObjectPtr<class APlagueControlActor*>) PlagueController                                           OFFSET(get<T>, {0x460, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CleanupPodItem.UpdateWidget
	// void UpdateWidget(EPlaceableObstructionType reason, float TimeLeft);                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CleanupPodItem.Server_Call_CleaningPod
	// void Server_Call_CleaningPod(FVector Location, class APlagueInfectionNode* plagueNode);                                  // [0x1812ca0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.CleanupPodItem.CallUpdateWidget
	// void CallUpdateWidget();                                                                                                 // [0x1811ef0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.ClusterbombSpawner
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UClusterbombSpawner : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UClass*)                             ClusterbombClass                                            OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(int32_t)                                   GrenadeFragments                                            OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(float)                                     VelocityInheritance                                         OFFSET(get<float>, {0xBC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ClusterbombSpawner.ReleaseCluster
	// void ReleaseCluster();                                                                                                   // [0x18181d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ExampleActor
/// Size: 0x0020 (0x000220 - 0x000240)
class AExampleActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FMulticastInlineDelegate)                  OnExampleUpdatedEvent                                       OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	DMember(float)                                     Field                                                       OFFSET(get<float>, {0x230, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ExampleActor.Server_ExampleFunction
	// void Server_ExampleFunction();                                                                                           // [0x1818390] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.ExampleActor.Client_ExampleFunction
	// void Client_ExampleFunction();                                                                                           // [0x1817090] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.ExampleActor.All_ExampleFunction
	// void All_ExampleFunction();                                                                                              // [0x1816d70] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.CoilgunWeaponTrail
/// Size: 0x00B0 (0x000220 - 0x0002D0)
class ACoilgunWeaponTrail : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  Collision                                                   OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  Trail                                                       OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(float)                                     ParticleTrailOffset                                         OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     TrailHalgLength                                             OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(bool)                                      SpawnFireTrail                                              OFFSET(get<bool>, {0x240, 1, 0, 0})
	CMember(class UClass*)                             FireEffect                                                  OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UClass*)                             ElectricEffect                                              OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(TArray<class UClass*>)                     EffectsToApply                                              OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(TSet<AActor*>)                             HitActors                                                   OFFSET(get<T>, {0x268, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.CoilgunWeaponTrail.OnRep_TrailHalfLength
	// void OnRep_TrailHalfLength();                                                                                            // [0x1817b80] Final|Native|Public  
	// Function /Script/FSD.CoilgunWeaponTrail.OnRep_SpawnFireTrail
	// void OnRep_SpawnFireTrail();                                                                                             // [0x1817b60] Final|Native|Public  
	// Function /Script/FSD.CoilgunWeaponTrail.OnInited_Callback
	// void OnInited_Callback();                                                                                                // [0x1817b20] Final|Native|Public  
	// Function /Script/FSD.CoilgunWeaponTrail.OnActorLeaveTrigger
	// void OnActorLeaveTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1817610] Final|Native|Public  
	// Function /Script/FSD.CoilgunWeaponTrail.OnActorEnteredTrigger
	// void OnActorEnteredTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18173f0] Final|Native|Public|HasOutParms 
};

/// Struct /Script/FSD.ContrailSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FContrailSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     HalfLenght                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     LifeTime                                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      Hellfire                                                    OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      Electric                                                    OFFSET(get<bool>, {0xE, 1, 0, 0})
};

/// Struct /Script/FSD.CoilMaterial
/// Size: 0x0010 (0x000000 - 0x000010)
class FCoilMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMaterialInstanceDynamic*)           Material                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/FSD.CoilGun
/// Size: 0x0288 (0x000828 - 0x000AB0)
class ACoilGun : public AChargedWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2736;

public:
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x828, 8, 0, 0})
	CMember(class UDamageComponent*)                   OverchargeDamageComponent                                   OFFSET(get<T>, {0x830, 8, 0, 0})
	CMember(class UDamageComponent*)                   WeaponBlastDamage                                           OFFSET(get<T>, {0x838, 8, 0, 0})
	CMember(class UDamageComponent*)                   ShotwaveBonusDamage                                         OFFSET(get<T>, {0x840, 8, 0, 0})
	CMember(class UDamageComponent*)                   MoleBonusDamage                                             OFFSET(get<T>, {0x848, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  FullyChargedParticles                                       OFFSET(get<T>, {0x850, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  FP_OverchargeIndicatorParticles                             OFFSET(get<T>, {0x858, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  TP_FullyChargedParticles                                    OFFSET(get<T>, {0x860, 8, 0, 0})
	CMember(class UCoilgunTrailSpawner*)               TrailSpawner                                                OFFSET(get<T>, {0x868, 8, 0, 0})
	SMember(FContrailSettings)                         TrailSettings                                               OFFSET(getStruct<T>, {0x870, 16, 0, 0})
	CMember(class UStaticMesh*)                        ImpactMeshCarver                                            OFFSET(get<T>, {0x8D0, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     N_ImpactParticles                                           OFFSET(get<T>, {0x8D8, 8, 0, 0})
	CMember(class UClass*)                             ChargeResistanceStatusEffect                                OFFSET(get<T>, {0x8E0, 8, 0, 0})
	CMember(class UClass*)                             ChargeWeaknessStatusEffect                                  OFFSET(get<T>, {0x8E8, 8, 0, 0})
	CMember(TArray<class UClass*>)                     TrailClasses                                                OFFSET(get<T>, {0x8F0, 16, 0, 0})
	CMember(class UNiagaraSystem*)                     CustomMuzzleFlash                                           OFFSET(get<T>, {0x900, 8, 0, 0})
	CMember(TSet<AActor*>)                             HitActorCache                                               OFFSET(get<T>, {0x910, 80, 0, 0})
	SMember(FName)                                     CoilParamName                                               OFFSET(getStruct<T>, {0x960, 8, 0, 0})
	CMember(TArray<FCoilMaterial>)                     DynamicCoilMaterials                                        OFFSET(get<T>, {0x968, 16, 0, 0})
	SMember(FRuntimeFloatCurve)                        CoilColorCurve                                              OFFSET(getStruct<T>, {0x978, 136, 0, 0})
	CMember(TArray<class UStatusEffect*>)              RecordedAilments                                            OFFSET(get<T>, {0xA08, 16, 0, 0})
	DMember(float)                                     MaxAfflictionTime                                           OFFSET(get<float>, {0xA2C, 4, 0, 0})
	DMember(float)                                     ShotWidth                                                   OFFSET(get<float>, {0xA30, 4, 0, 0})
	DMember(float)                                     BonusShotWidth                                              OFFSET(get<float>, {0xA38, 4, 0, 0})
	DMember(float)                                     ImpactFearFactor                                            OFFSET(get<float>, {0xA3C, 4, 0, 0})
	DMember(float)                                     OverChargedShotMaxPower                                     OFFSET(get<float>, {0xA44, 4, 0, 0})
	DMember(float)                                     MaxOverchargeTime                                           OFFSET(get<float>, {0xA48, 4, 0, 0})
	DMember(float)                                     OverchargeTimeStep                                          OFFSET(get<float>, {0xA4C, 4, 0, 0})
	DMember(float)                                     BrokenShieldboostDuration                                   OFFSET(get<float>, {0xA54, 4, 0, 0})
	DMember(float)                                     MinUndercharge                                              OFFSET(get<float>, {0xA58, 4, 0, 0})
	DMember(float)                                     TriBustCancelTime                                           OFFSET(get<float>, {0xA60, 4, 0, 0})
	DMember(float)                                     TriBurstShotPowerMultiplier                                 OFFSET(get<float>, {0xA64, 4, 0, 0})
	DMember(float)                                     TriBurstAmmoMultiplier                                      OFFSET(get<float>, {0xA68, 4, 0, 0})
	DMember(float)                                     TriBurstShotCarvingMultiplier                               OFFSET(get<float>, {0xA6C, 4, 0, 0})
	DMember(int32_t)                                   FirstDynamicIndex                                           OFFSET(get<int32_t>, {0xA90, 4, 0, 0})
	DMember(int32_t)                                   LastDynamicIndex                                            OFFSET(get<int32_t>, {0xA94, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CoilGun.UpdateAfflictions
	// void UpdateAfflictions();                                                                                                // [0x1819110] Final|Native|Protected 
	// Function /Script/FSD.CoilGun.SetDynamicMaterials
	// void SetDynamicMaterials();                                                                                              // [0x1818cc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CoilGun.Server_ToggleCharingBonuses
	// void Server_ToggleCharingBonuses(bool Enabled);                                                                          // [0x1818c30] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CoilGun.Server_SpawnTrail
	// void Server_SpawnTrail(FVector_NetQuantize Location, FRotator Rotation, float HalfHeight, bool fireTrailEnabled);        // [0x1818ad0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.CoilGun.Server_SpawnGroundTrail
	// void Server_SpawnGroundTrail(FVector_NetQuantize Location, FVector Direction, float chargeMultiplier);                   // [0x18189c0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.CoilGun.Server_SetShotPower
	// void Server_SetShotPower(float Power);                                                                                   // [0x1818930] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CoilGun.Server_RegisterPrimaryHit
	// void Server_RegisterPrimaryHit(class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, FVector_NetQuantize Origin, FVector_NetQuantize Location, int32_t BoneIndex, FShotMultiplier Multiplier, int32_t mole); // [0x18186f0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CoilGun.Server_RegisterBonusHit
	// void Server_RegisterBonusHit(class AActor* Target);                                                                      // [0x1818660] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CoilGun.Server_RegisterBlastHit
	// void Server_RegisterBlastHit(class AActor* Target, FVector_NetQuantize Location, class UPrimitiveComponent* comp);       // [0x1818550] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CoilGun.Server_HitTerrain
	// void Server_HitTerrain(FVector_NetQuantize Location, FVector_NetQuantize End, float maxCarveDepth);                      // [0x1818440] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CoilGun.Server_FearTarget
	// void Server_FearTarget(class AActor* Target);                                                                            // [0x18183b0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CoilGun.Server_ClearAilments
	// void Server_ClearAilments();                                                                                             // [0x17f3ac0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CoilGun.OnTriBurstCancled
	// void OnTriBurstCancled();                                                                                                // [0x1817bc0] Final|Native|Protected 
	// Function /Script/FSD.CoilGun.OnShieldBrokenBoost
	// void OnShieldBrokenBoost();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CoilGun.OnShieldBrokeBoostStopped
	// void OnShieldBrokeBoostStopped();                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CoilGun.OnShieldBoostEnded
	// void OnShieldBoostEnded();                                                                                               // [0x1817ba0] Final|Native|Protected 
	// Function /Script/FSD.CoilGun.OnFireKill
	// void OnFireKill(class AActor* Target);                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CoilGun.OnEnemyKilled
	// void OnEnemyKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysicalMaterial, bool wasDirectHit);               // [0x1817a10] Final|Native|Protected 
	// Function /Script/FSD.CoilGun.OnDamageTarget
	// void OnDamageTarget(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* Component, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x18178b0] Final|Native|Protected 
	// Function /Script/FSD.CoilGun.OnCharacterShieldBroke
	// void OnCharacterShieldBroke(class AActor* brokeChar);                                                                    // [0x1817820] Final|Native|Protected 
	// Function /Script/FSD.CoilGun.OnBulletPathComplete
	// void OnBulletPathComplete(TArray<FBulletPathSegment>& Path);                                                             // [0x1817770] Final|Native|Public|HasOutParms 
	// Function /Script/FSD.CoilGun.All_ShowHit
	// void All_ShowHit(FVector_NetQuantize Location, FVector_NetQuantize Rotation);                                            // [0x1816db0] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FSD.CoilGun.All_ShieldBroken
	// void All_ShieldBroken();                                                                                                 // [0x1816d90] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FSD.CoilGun.All_AdjustTrail
	// void All_AdjustTrail(class ACoilgunWeaponTrail* Trail, float Length);                                                    // [0x1816c90] Net|NetReliableNative|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.CoilGunAnimInstance
/// Size: 0x0050 (0x0002E0 - 0x000330)
class UCoilGunAnimInstance : public UChargedWeaponAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 816;

public:
	DMember(float)                                     WindUpSpeed                                                 OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     WindDownSpeed                                               OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     MaxExtention                                                OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(float)                                     HandleExtend                                                OFFSET(get<float>, {0x30C, 4, 0, 0})
	DMember(float)                                     MaxCoilSpeed                                                OFFSET(get<float>, {0x310, 4, 0, 0})
	CMember(class ACoilGun*)                           CoilGun                                                     OFFSET(get<T>, {0x320, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CoilGunAnimInstance.GetCoilSpeed
	// float GetCoilSpeed(int32_t Index);                                                                                       // [0x1817150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CoilGunAnimInstance.GetCoilAngle
	// float GetCoilAngle(int32_t Index);                                                                                       // [0x18170b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CoilGunTrailSegment
/// Size: 0x0010 (0x000220 - 0x000230)
class ACoilGunTrailSegment : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	DMember(float)                                     EffectsLife                                                 OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     DeactivationTime                                            OFFSET(get<float>, {0x224, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CoilGunTrailSegment.OnStartEffects
	// void OnStartEffects();                                                                                                   // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.CoilGunTrailSegment.OnRep_EffectsLife
	// void OnRep_EffectsLife();                                                                                                // [0x1817b40] Final|Native|Protected 
	// Function /Script/FSD.CoilGunTrailSegment.OnEndEffects
	// void OnEndEffects();                                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.CoilgunTrailSpawner
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UCoilgunTrailSpawner : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(class UClass*)                             TrailSegmentClass                                           OFFSET(get<T>, {0x140, 8, 0, 0})
	DMember(float)                                     SegmentSpawnInterval                                        OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     TrailDistance                                               OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     TrailSegmentInterval                                        OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     TrailSpawnRange                                             OFFSET(get<float>, {0x154, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CoilgunTrailSpawner.SpawnSegment
	// void SpawnSegment();                                                                                                     // [0x18190f0] Final|Native|Protected 
};

/// Class /Script/FSD.CollectableResourceCreator
/// Size: 0x0000 (0x000028 - 0x000028)
class UCollectableResourceCreator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.CollectableResourceData
/// Size: 0x0050 (0x0000F0 - 0x000140)
class UCollectableResourceData : public UResourceData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(class UCollectableResourceCreator*)        ResourceCreator                                             OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0xF8, 8, 0, 0})
	DMember(float)                                     Rarity                                                      OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     InfluenceRadius                                             OFFSET(get<float>, {0x104, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<UDebrisBase*>>)      Debris                                                      OFFSET(get<T>, {0x108, 16, 0, 0})
	DMember(bool)                                      UseTerrainPlacement                                         OFFSET(get<bool>, {0x118, 1, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           CollectableClasses                                          OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<class UClass*>)                     CollectableClassesLoaded                                    OFFSET(get<T>, {0x130, 16, 0, 0})
};

/// Struct /Script/FSD.CharacterShouts
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FCharacterShouts : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(class UDialogDataAsset*)                   Attention                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Follow                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   standingDown                                                OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Downed                                                      OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   RequestRevive                                               OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Revived                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Resupply                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   FriendlyFire                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   KillCry                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Dead                                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Cheating                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ResourceFull                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ResourceFullNoDonkey                                        OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   CallDonkey                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   CallDonkey_NotInMission                                     OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Depositing                                                  OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DepositingNoDonkey                                          OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OutOfAmmo                                                   OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Reloading                                                   OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   CharacterSelected                                           OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   UpgradeBought                                               OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   WaitingInDropPod                                            OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Carrying                                                    OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   WaitingInEscapePod                                          OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Salute                                                      OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Salute_Spacerig                                             OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Drink                                                       OFFSET(get<T>, {0xD0, 8, 0, 0})
};

/// Class /Script/FSD.CharacterShoutsData
/// Size: 0x00D8 (0x000030 - 0x000108)
class UCharacterShoutsData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FCharacterShouts)                          Shouts                                                      OFFSET(getStruct<T>, {0x30, 216, 0, 0})
};

/// Class /Script/FSD.ShoutWidget
/// Size: 0x0028 (0x000260 - 0x000288)
class UShoutWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   Sender                                                      OFFSET(get<T>, {0x260, 8, 0, 0})
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x268, 24, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x280, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ShoutWidget.OnShout
	// void OnShout();                                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Struct /Script/FSD.ActiveOutline
/// Size: 0x000C (0x000000 - 0x00000C)
class FActiveOutline : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/FSD.MissionShoutQueueItem
/// Size: 0x0048 (0x000000 - 0x000048)
class FMissionShoutQueueItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TWeakObjectPtr<class USoundBase*>)         AudioPtr                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	CMember(class USoundBase*)                         LoadedAudio                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.CommunicationComponent
/// Size: 0x01A8 (0x0000B0 - 0x000258)
class UCommunicationComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	SMember(FMulticastInlineDelegate)                  OnSubtitleShout                                             OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerShout                                               OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMissionShout                                              OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMissionShoutEnd                                           OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMissionControlFinished                                    OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	DMember(bool)                                      ShoutingEnabled                                             OFFSET(get<bool>, {0x110, 1, 0, 0})
	CMember(class UClass*)                             ShoutWidgetType                                             OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UCharacterShoutsData*)               CharacterShouts                                             OFFSET(get<T>, {0x120, 8, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     MinShoutDelay                                               OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     CloseRangeShoutDistance                                     OFFSET(get<float>, {0x130, 4, 0, 0})
	CMember(TMap<class UDialogDataAsset*, float>)      DelayedShouts                                               OFFSET(get<T>, {0x138, 80, 0, 0})
	SMember(FGameplayTagContainer)                     KillShoutAllowedTags                                        OFFSET(getStruct<T>, {0x188, 32, 0, 0})
	DMember(bool)                                      bMissionControlPaused                                       OFFSET(get<bool>, {0x1A8, 1, 0, 0})
	CMember(class UAudioComponent*)                    MissionControlAudioComponent                                OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(TArray<class UShoutWidget*>)               ActiveShouts                                                OFFSET(get<T>, {0x1B8, 16, 0, 0})
	CMember(TArray<FActiveOutline>)                    ActiveOutlines                                              OFFSET(get<T>, {0x1C8, 16, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   LastShout                                                   OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAudioComponent*>)    ShoutAudioComponent                                         OFFSET(get<T>, {0x1E8, 8, 0, 0})
	CMember(TMap<class UDialogDataAsset*, float>)      ShoutHistory                                                OFFSET(get<T>, {0x1F0, 80, 0, 0})
	CMember(TArray<FMissionShoutQueueItem>)            MissionShoutQueue                                           OFFSET(get<T>, {0x248, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.CommunicationComponent.ShoutDelegate__DelegateSignature
	// void ShoutDelegate__DelegateSignature(class APlayerCharacter* InSender, FText InText, float InDuration);                 // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.CommunicationComponent.ShoutCustomOrDefault
	// void ShoutCustomOrDefault(class UDialogDataAsset* CustomShout, EShoutType DefaultShout);                                 // [0x1819020] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.ShoutCustomLocalOnly
	// void ShoutCustomLocalOnly(class UDialogDataAsset* Shout);                                                                // [0x1818f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.ShoutCustomClosestDwarf
	// void ShoutCustomClosestDwarf(class UObject* WorldContext, class UDialogDataAsset* Shout, FVector TargetLocation);        // [0x1818e80] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.ShoutCustom
	// void ShoutCustom(class UDialogDataAsset* Shout);                                                                         // [0x1818df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.Shout
	// void Shout(EShoutType Shout);                                                                                            // [0x1818d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.SetMissionControlPaused
	// void SetMissionControlPaused(bool IsPaused);                                                                             // [0x1818ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.ServerShout
	// void ServerShout(class UDialogDataAsset* Shout);                                                                         // [0x1818300] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.CommunicationComponent.ServerMissionShout
	// void ServerMissionShout(class UDialogDataAsset* Shout, int32_t Index, bool bPriority);                                   // [0x18181f0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CommunicationComponent.PlayPitchedByClass
	// class UAudioComponent* PlayPitchedByClass(class UObject* WorldContextObject, class UClass* CharacterClass, class USoundBase* Sound, class UDialogDataAsset* Shout, EShoutType ShoutType, class UAudioComponent* AudioComponent); // [0x1818000] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.PlayPitchedAsync
	// void PlayPitchedAsync(class UDialogDataAsset* Shout, EShoutType ShoutType, bool IgnoreCoolDown, class UAudioComponent* AudioComponent, class UObject* WorldContextObject, float shoutVolumeMultiplier, EAsyncLoadPriority Priority); // [0x1817dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.PlayPitched
	// class UAudioComponent* PlayPitched(class USoundBase* Sound, class UDialogDataAsset* Shout, EShoutType ShoutType, bool IgnoreCoolDown, class UAudioComponent* AudioComponent, class UObject* WorldContextObject); // [0x1817be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.MissionShoutLocally
	// int32_t MissionShoutLocally(class UObject* WorldContext, class UDialogDataAsset* Shout);                                 // [0x1817320] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.MissionShout
	// void MissionShout(class UObject* WorldContext, class UDialogDataAsset* Shout, bool bPriority);                           // [0x1817220] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.CommunicationComponent.IsMissionControlSpeaking
	// bool IsMissionControlSpeaking();                                                                                         // [0x18171f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CommunicationComponent.ClientShout
	// void ClientShout(class APlayerCharacter* Sender, class UDialogDataAsset* Shout, int32_t Index);                          // [0x1816f80] Net|Native|Event|Protected|NetClient 
	// Function /Script/FSD.CommunicationComponent.ClientMissionShout
	// void ClientMissionShout(class UDialogDataAsset* Shout, int32_t Index, bool bPriority);                                   // [0x1816e70] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Struct /Script/FSD.CommunityReward
/// Size: 0x0010 (0x000000 - 0x000010)
class FCommunityReward : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.CommnuityRewardBundle
/// Size: 0x0010 (0x000030 - 0x000040)
class UCommnuityRewardBundle : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FCommunityReward>)                  Rewards                                                     OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.CommnuityRewardBundle.AwardRewards
	// void AwardRewards(class UObject* WorldContext);                                                                          // [0x181c8d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CommnuityRewardSetup
/// Size: 0x0010 (0x000030 - 0x000040)
class UCommnuityRewardSetup : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UCommnuityRewardBundle*>)     TierRewards                                                 OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.CommnuityRewardSetup.GetResourcesTierOnlyReward
	// TMap<UResourceData*, int32_t> GetResourcesTierOnlyReward(int32_t Tier);                                                  // [0x181d5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommnuityRewardSetup.GetResourcesReward
	// TMap<UResourceData*, int32_t> GetResourcesReward(int32_t Tier);                                                          // [0x181d4b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommnuityRewardSetup.AwardTierRewards
	// void AwardTierRewards(class UObject* WorldContext, int32_t Tier);                                                        // [0x181c960] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CommunityGoalCategory
/// Size: 0x0018 (0x000030 - 0x000048)
class UCommunityGoalCategory : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Class /Script/FSD.CommunityGoalFaction
/// Size: 0x00B8 (0x000030 - 0x0000E8)
class UCommunityGoalFaction : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	SMember(FText)                                     ShortDescription                                            OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	SMember(FText)                                     JoinHeader                                                  OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	SMember(FText)                                     JoinBody                                                    OFFSET(getStruct<T>, {0x90, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UTexture2D*)                         Frame                                                       OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FSlateColor)                               Color                                                       OFFSET(getStruct<T>, {0xB8, 40, 0, 0})
	CMember(EFSDFaction)                               FactionID                                                   OFFSET(get<T>, {0xE0, 1, 0, 0})
};

/// Class /Script/FSD.CommunityGoal
/// Size: 0x0068 (0x000030 - 0x000098)
class UCommunityGoal : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      TierValuesAreInitialized                                    OFFSET(get<bool>, {0x30, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x34, 16, 0, 0})
	DMember(bool)                                      Active                                                      OFFSET(get<bool>, {0x44, 1, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	SMember(FText)                                     MetaDescription                                             OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	CMember(class UCommunityGoalCategory*)             Category                                                    OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(ECommunityGoalType)                        CommunityGoalType                                           OFFSET(get<T>, {0x80, 1, 0, 0})
	DMember(float)                                     GoalPerMemberTier1                                          OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     GoalPerMemberTier2                                          OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(float)                                     GoalPerMemberTier3                                          OFFSET(get<float>, {0x8C, 4, 0, 0})
	CMember(class UCommnuityRewardSetup*)              RewardSetup                                                 OFFSET(get<T>, {0x90, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CommunityGoal.TotalTierProgress
	// float TotalTierProgress(float Value, int32_t Members);                                                                   // [0x181e1d0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CommunityGoal.TierValue
	// float TierValue(ECommunityGoalTier Tier, float Value, int32_t Members);                                                  // [0x181e0b0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CommunityGoal.TierProgress
	// float TierProgress(ECommunityGoalTier Tier, float Value, int32_t Members);                                               // [0x181df90] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CommunityGoal.TierGoal
	// float TierGoal(ECommunityGoalTier Tier, int32_t Members);                                                                // [0x181dec0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CommunityGoal.RewardTier
	// int32_t RewardTier(float Value, int32_t Members);                                                                        // [0x181ddd0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CommunityGoal.IncrementGoal
	// void IncrementGoal(class UObject* WorldContext, float Value);                                                            // [0x181d840] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.CommunityGoal.GoalToText
	// FText GoalToText(ECommunityGoalType StatType, float Value);                                                              // [0x181d710] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CommunityGoal.GetCategoryTitle
	// FText GetCategoryTitle();                                                                                                // [0x181d1e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CommunityGoal.AreTiersInitialized
	// bool AreTiersInitialized();                                                                                              // [0x181c8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CommunityGoalSettings
/// Size: 0x0028 (0x000030 - 0x000058)
class UCommunityGoalSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<class UCommunityGoalFaction*>)      ActiveCommunityFactions                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<class UCommunityGoal*>)             ActiveCommunityGoals                                        OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(class UCommunityGoal*)                     DSMUGoal                                                    OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CommunityGoalSettings.GetGoal
	// class UCommunityGoal* GetGoal(ECommunityGoalIndex Goal);                                                                 // [0x181d290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CommunityGoalSettings.FindGoal
	// class UCommunityGoal* FindGoal(FString Goal);                                                                            // [0x181ce30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.CommunityGoalStateData
/// Size: 0x0010 (0x000000 - 0x000010)
class FCommunityGoalStateData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      isGoal                                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      isRecruitment                                               OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(float)                                     TimeLeftSeconds                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   CurrentGoalPeriodID                                         OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.CommunityFactionData
/// Size: 0x0038 (0x000000 - 0x000038)
class FCommunityFactionData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      IsValid                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TArray<FString>)                           Goals                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<float>)                             Values                                                      OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<int32_t>)                           Members                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.CommunityGoalWrapper
/// Size: 0x0218 (0x000028 - 0x000240)
class UCommunityGoalWrapper : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(bool)                                      HasCGS                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
	SMember(FCommunityGoalStateData)                   CGSData                                                     OFFSET(getStruct<T>, {0x2C, 16, 0, 0})
	DMember(int32_t)                                   LastCollectedRewardID                                       OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FCommunityFactionData)                     FactionData                                                 OFFSET(getStruct<T>, {0x48, 56, 0, 0})
	DMember(bool)                                      FreeBeerRewardActive                                        OFFSET(get<bool>, {0x80, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFreeBeerRewardChanged                                     OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FString)                                   SteamTicket                                                 OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FString)                                   SteamBranch                                                 OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFactionsDataReceived                                      OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDiscordCGSDataEvent                                       OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  UICheck                                                     OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGoalsInitializedDelegate                                  OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	DMember(bool)                                      AreAllGoalsInitialized                                      OFFSET(get<bool>, {0x138, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CommunityGoalWrapper.UpdateAllGoalsInitialized
	// void UpdateAllGoalsInitialized();                                                                                        // [0x181e2a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunityGoalWrapper.RewardReceived
	// bool RewardReceived();                                                                                                   // [0x181dda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CommunityGoalWrapper.RequestGoalStateData
	// void RequestGoalStateData();                                                                                             // [0x181dd80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunityGoalWrapper.RequestFactionsData
	// void RequestFactionsData();                                                                                              // [0x181dd60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunityGoalWrapper.NextPeriod
	// void NextPeriod();                                                                                                       // [0x181d9a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunityGoalWrapper.InitializeGoalTierTargetValues
	// void InitializeGoalTierTargetValues(class UCommunityGoal* goalToInitialize);                                             // [0x181d910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunityGoalWrapper.GetPlayerCurrentFaction
	// class UCommunityGoalFaction* GetPlayerCurrentFaction(class UObject* WorldContext);                                       // [0x181d3d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CommunityGoalWrapper.ClaimRewardMessage
	// void ClaimRewardMessage(class UObject* WorldContext, FCommunityRewardNotification rewardNotification);                   // [0x181ca70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunityGoalWrapper.ClaimReward
	// void ClaimReward();                                                                                                      // [0x181ca50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CommunityGoalWrapper.CheckUI
	// void CheckUI();                                                                                                          // [0x181ca30] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.InputTranslationEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FInputTranslationEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(EInputInteraction)                         Interaction                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	DMember(int32_t)                                   Axis                                                        OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FSD.InputTranslation
/// Size: 0x0024 (0x000000 - 0x000024)
class FInputTranslation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FInputTranslationEntry)                    Default                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bControllerOverride                                         OFFSET(get<bool>, {0x10, 1, 0, 0})
	SMember(FInputTranslationEntry)                    ControllerOverride                                          OFFSET(getStruct<T>, {0x14, 16, 0, 0})
};

/// Struct /Script/FSD.InputTranslationTable
/// Size: 0x0050 (0x000000 - 0x000050)
class FInputTranslationTable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FName, FInputTranslation>)            Entries                                                     OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FSD.ActionIconMapping
/// Size: 0x0028 (0x000000 - 0x000028)
class FActionIconMapping : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FKey)                                      ActionKey                                                   OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      DoNotTint                                                   OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/FSD.ControllerIconSettings
/// Size: 0x0090 (0x000038 - 0x0000C8)
class UControllerIconSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FInputTranslationTable)                    InputTranslationTable                                       OFFSET(getStruct<T>, {0x38, 80, 0, 0})
	CMember(TArray<FActionIconMapping>)                Xbox_KeyIcons                                               OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<FActionIconMapping>)                Playstation_KeyIcons                                        OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(TArray<FActionIconMapping>)                Playstation5_KeyIcons                                       OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TArray<FActionIconMapping>)                MouseKeyboard_KeyIcons                                      OFFSET(get<T>, {0xB8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ControllerIconSettings.FindMouseKeyboardKeyIcon
	// bool FindMouseKeyboardKeyIcon(FKey Key, FActionIconMapping& KeyIcon);                                                    // [0x181d060] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ControllerIconSettings.FindKeyIcon
	// bool FindKeyIcon(FKey Key, FActionIconMapping& KeyIcon);                                                                 // [0x181cee0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ControllerIconSettings.FindControllerKeyIcon
	// bool FindControllerKeyIcon(FKey Key, FActionIconMapping& KeyIcon);                                                       // [0x181ccb0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ConvertedRobot
/// Size: 0x0320 (0x0003B0 - 0x0006D0)
class AConvertedRobot : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1744;

public:
	CMember(class UEnemyComponent*)                    EnemyComponent                                              OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UPawnStatsComponent*)                PawnStats                                                   OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UOutlineComponent*)                  outline                                                     OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UHitscanComponent*)                  HitScan                                                     OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class USingleUsableComponent*)             Usable                                                      OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class USceneComponent*)                    TurretRoot                                                  OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             TurretMesh                                                  OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UPointLightComponent*)               MuzzleFlash                                                 OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class USpotLightComponent*)                SpotLight                                                   OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               LightCone                                                   OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               LaserBeam                                                   OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class USceneComponent*)                    ShieldRoot                                                  OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               InnerShield                                                 OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               OuterShield                                                 OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UAudioComponent*)                    PulsatingSoundComp                                          OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UAudioComponent*)                    LaserWarningSound                                           OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x438, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x440, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShieldChanged                                             OFFSET(getStruct<T>, {0x450, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnIntroductionStart                                         OFFSET(getStruct<T>, {0x460, 16, 0, 0})
	DMember(bool)                                      ForceSit                                                    OFFSET(get<bool>, {0x480, 1, 0, 0})
	CMember(class USoundBase*)                         LaserSound                                                  OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class USoundBase*)                         LastPowerDownSound                                          OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class USoundBase*)                         PowerUpSound                                                OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAudioComponent*>)    LaserSoundComp                                              OFFSET(get<T>, {0x4A0, 8, 0, 0})
	DMember(float)                                     IntroductionTime                                            OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(bool)                                      IsIntroducing                                               OFFSET(get<bool>, {0x4C4, 1, 0, 0})
	DMember(bool)                                      IntroductionDone                                            OFFSET(get<bool>, {0x4C5, 1, 0, 0})
	DMember(bool)                                      IsGrowingShield                                             OFFSET(get<bool>, {0x4C6, 1, 0, 0})
	DMember(float)                                     AimDownwardsOffset                                          OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     BigShieldScale                                              OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     SmallShieldScale                                            OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     ShieldGrowthRate                                            OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     LerpExp                                                     OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     MinimumShieldSize                                           OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     TargetShieldSize                                            OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     IdleRotationSpeed                                           OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     LaserScaleRate                                              OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     MaxSearchAngle                                              OFFSET(get<float>, {0x4F0, 4, 0, 0})
	DMember(bool)                                      DoSpecialWhenEnemy                                          OFFSET(get<bool>, {0x510, 1, 0, 0})
	DMember(bool)                                      DoSpecialWhenFriendly                                       OFFSET(get<bool>, {0x511, 1, 0, 0})
	DMember(bool)                                      PerfectTrackingWhenEnemy                                    OFFSET(get<bool>, {0x512, 1, 0, 0})
	DMember(bool)                                      PerfectTrackingWhenFriendly                                 OFFSET(get<bool>, {0x513, 1, 0, 0})
	DMember(bool)                                      ReplaceBurstAttack                                          OFFSET(get<bool>, {0x516, 1, 0, 0})
	CMember(class USoundBase*)                         GrenadeFireSound                                            OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(class UParticleSystem*)                    GrenadeFireParticle                                         OFFSET(get<T>, {0x520, 8, 0, 0})
	DMember(bool)                                      IsFiring                                                    OFFSET(get<bool>, {0x528, 1, 0, 0})
	DMember(float)                                     TurretSpinSpeed                                             OFFSET(get<float>, {0x52C, 4, 0, 0})
	CMember(TArray<class AActor*>)                     Parasites                                                   OFFSET(get<T>, {0x530, 16, 0, 0})
	DMember(int32_t)                                   SpawnParasiteNumer                                          OFFSET(get<int32_t>, {0x540, 4, 0, 0})
	DMember(int32_t)                                   MaxParasiteSlots                                            OFFSET(get<int32_t>, {0x544, 4, 0, 0})
	DMember(float)                                     ChanceToSpawnParasite                                       OFFSET(get<float>, {0x548, 4, 0, 0})
	CMember(class UClass*)                             ParasiteClass                                               OFFSET(get<T>, {0x550, 8, 0, 0})
	DMember(bool)                                      SpinTurret                                                  OFFSET(get<bool>, {0x55E, 1, 0, 0})
	CMember(class UClass*)                             SpecialAttackProjectile                                     OFFSET(get<T>, {0x570, 8, 0, 0})
	CMember(class UClass*)                             FriendlyProjectile                                          OFFSET(get<T>, {0x578, 8, 0, 0})
	DMember(bool)                                      HasLockedOn                                                 OFFSET(get<bool>, {0x58C, 1, 0, 0})
	CMember(class USoundBase*)                         TargetingSound                                              OFFSET(get<T>, {0x590, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  GrenadeShotAnimation                                        OFFSET(get<T>, {0x598, 8, 0, 0})
	DMember(float)                                     LockOnTime                                                  OFFSET(get<float>, {0x5A0, 4, 0, 0})
	CMember(class USoundCue*)                          ShootSound                                                  OFFSET(get<T>, {0x5A8, 8, 0, 0})
	DMember(float)                                     ShootSoundFadeout                                           OFFSET(get<float>, {0x5B0, 4, 0, 0})
	CMember(class UAudioComponent*)                    ShootSoundInstance                                          OFFSET(get<T>, {0x5B8, 8, 0, 0})
	CMember(class USoundCue*)                          ShootSoundTail                                              OFFSET(get<T>, {0x5C0, 8, 0, 0})
	CMember(class UParticleSystem*)                    MuzzleEffect                                                OFFSET(get<T>, {0x5C8, 8, 0, 0})
	CMember(class UParticleSystem*)                    TracerEffect                                                OFFSET(get<T>, {0x5D0, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        MuzzleLightCurve                                            OFFSET(getStruct<T>, {0x5D8, 136, 0, 0})
	DMember(float)                                     GunRange                                                    OFFSET(get<float>, {0x668, 4, 0, 0})
	DMember(float)                                     FireRate                                                    OFFSET(get<float>, {0x66C, 4, 0, 0})
	DMember(float)                                     GrenadeFireRate                                             OFFSET(get<float>, {0x670, 4, 0, 0})
	DMember(float)                                     BurstCooldown                                               OFFSET(get<float>, {0x678, 4, 0, 0})
	DMember(int32_t)                                   MinBurst                                                    OFFSET(get<int32_t>, {0x680, 4, 0, 0})
	DMember(int32_t)                                   MaxBurst                                                    OFFSET(get<int32_t>, {0x684, 4, 0, 0})
	DMember(float)                                     TurretLerpSpeed                                             OFFSET(get<float>, {0x688, 4, 0, 0})
	DMember(float)                                     DamageWhenFriendly                                          OFFSET(get<float>, {0x68C, 4, 0, 0})
	DMember(float)                                     FriendlyFriendlyFireMultiplier                              OFFSET(get<float>, {0x690, 4, 0, 0})
	DMember(bool)                                      StartedSpecialAttack                                        OFFSET(get<bool>, {0x698, 1, 0, 0})
	CMember(ERobotState)                               TeamState                                                   OFFSET(get<T>, {0x699, 1, 0, 0})
	DMember(bool)                                      IsWalking                                                   OFFSET(get<bool>, {0x6A8, 1, 0, 0})
	DMember(bool)                                      IsDoingSpecialAttack                                        OFFSET(get<bool>, {0x6A9, 1, 0, 0})
	CMember(class UStaticMeshComponent*)               TurretRotation                                              OFFSET(get<T>, {0x6B0, 8, 0, 0})
	CMember(class AActor*)                             CurrentTarget                                               OFFSET(get<T>, {0x6C0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ConvertedRobot.UpdateGunsInsideTerrain
	// void UpdateGunsInsideTerrain();                                                                                          // [0x181e2c0] Final|Native|Protected 
	// Function /Script/FSD.ConvertedRobot.StartBossFight
	// void StartBossFight();                                                                                                   // [0x181dea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ConvertedRobot.ParasiteDamaged
	// void ParasiteDamaged(float aDamage);                                                                                     // [0x181dce0] Final|Native|Protected 
	// Function /Script/FSD.ConvertedRobot.OnWeaponsFired
	// void OnWeaponsFired(FVector& aHitResult);                                                                                // [0x181dc50] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.ConvertedRobot.OnUsed
	// void OnUsed(class APlayerCharacter* aUser, EInputKeys Key);                                                              // [0x181db80] Final|Native|Protected 
	// Function /Script/FSD.ConvertedRobot.OnSeePawn
	// void OnSeePawn(class APawn* APawn);                                                                                      // [0x181daf0] Final|Native|Public  
	// Function /Script/FSD.ConvertedRobot.OnRep_TeamState
	// void OnRep_TeamState();                                                                                                  // [0x17f8010] Native|Protected     
	// Function /Script/FSD.ConvertedRobot.OnRep_Target
	// void OnRep_Target();                                                                                                     // [0x181dad0] Native|Protected     
	// Function /Script/FSD.ConvertedRobot.OnRep_SpinTurret
	// void OnRep_SpinTurret();                                                                                                 // [0x181dab0] Final|Native|Protected 
	// Function /Script/FSD.ConvertedRobot.OnRep_IsIntroducting
	// void OnRep_IsIntroducting();                                                                                             // [0x181da90] Final|Native|Protected 
	// Function /Script/FSD.ConvertedRobot.OnRep_IsFiring
	// void OnRep_IsFiring();                                                                                                   // [0x181da70] Final|Native|Protected 
	// Function /Script/FSD.ConvertedRobot.OnRep_IsDoingSpecialAttack
	// void OnRep_IsDoingSpecialAttack();                                                                                       // [0x181da50] Final|Native|Protected 
	// Function /Script/FSD.ConvertedRobot.OnParasiteDeath
	// void OnParasiteDeath(class AActor* AParasiteEnemy);                                                                      // [0x181d9c0] Final|Native|Protected 
	// Function /Script/FSD.ConvertedRobot.GetTeamState
	// ERobotState GetTeamState();                                                                                              // [0x181d6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ConvertedRobot.GetPlayerMediumPoint
	// FVector GetPlayerMediumPoint();                                                                                          // [0x181d470] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ConvertedRobot.GetParasites
	// TArray<AActor*> GetParasites();                                                                                          // [0x181d340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ConvertedRobot.GetHasPoweredDown
	// bool GetHasPoweredDown();                                                                                                // [0x181d320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ConvertedRobot.DestroyAttatchPoint
	// void DestroyAttatchPoint(class USceneComponent* aComponent);                                                             // [0x181cc20] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.ConvertedRobot.CannonEffects
	// void CannonEffects();                                                                                                    // [0x17f8340] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FSD.ConvertedRobot.BP_OnStateChanged
	// void BP_OnStateChanged(ERobotState TeamState);                                                                           // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ConvertedRobot.BP_OnShieldChanged
	// void BP_OnShieldChanged(bool isGrowing);                                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ConvertedRobot.BP_OnInstroduce
	// void BP_OnInstroduce();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.ConvertedRobotAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UConvertedRobotAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(bool)                                      HasIntroduced                                               OFFSET(get<bool>, {0x2BC, 1, 0, 0})
	DMember(bool)                                      IsWalking                                                   OFFSET(get<bool>, {0x2BD, 1, 0, 0})
	DMember(bool)                                      IsIntroducing                                               OFFSET(get<bool>, {0x2BE, 1, 0, 0})
	DMember(bool)                                      ShouldSit                                                   OFFSET(get<bool>, {0x2BF, 1, 0, 0})
	DMember(bool)                                      StopSit                                                     OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      ShouldCollapse                                              OFFSET(get<bool>, {0x2C1, 1, 0, 0})
	DMember(bool)                                      IsPoweredDown                                               OFFSET(get<bool>, {0x2C2, 1, 0, 0})
	DMember(float)                                     WalkingRate                                                 OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     NormalWalkSpeed                                             OFFSET(get<float>, {0x2C8, 4, 0, 0})
};

/// Class /Script/FSD.ConvertedRobotTurretAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UConvertedRobotTurretAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      ReplaceBurstAttack                                          OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      IsFiringGrenades                                            OFFSET(get<bool>, {0x2B9, 1, 0, 0})
	DMember(bool)                                      IsDoingSpecialAttack                                        OFFSET(get<bool>, {0x2BA, 1, 0, 0})
	DMember(bool)                                      ShouldFireBullets                                           OFFSET(get<bool>, {0x2BB, 1, 0, 0})
	DMember(bool)                                      StopFiringBullets                                           OFFSET(get<bool>, {0x2BC, 1, 0, 0})
	DMember(bool)                                      ShouldCannonDeploy                                          OFFSET(get<bool>, {0x2BD, 1, 0, 0})
};

/// Class /Script/FSD.EnemyAIController
/// Size: 0x0000 (0x000358 - 0x000358)
class AEnemyAIController : public AFSDAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
};

/// Class /Script/FSD.ConvertedRobotController
/// Size: 0x00D0 (0x000358 - 0x000428)
class AConvertedRobotController : public AEnemyAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1064;

public:
	DMember(float)                                     CheckRangeInterval                                          OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     MaxTimeInRange                                              OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     PersonalSpaceRange                                          OFFSET(get<float>, {0x364, 4, 0, 0})
	SMember(FGameplayTagQuery)                         FriendlyTargetingQuery                                      OFFSET(getStruct<T>, {0x378, 72, 0, 0})
	DMember(float)                                     SpecialAttackRange                                          OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(float)                                     SpecialAttackFireRate                                       OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     WaitBeforeSpecial                                           OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     WaitAfterSpecial                                            OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     MinSpecialAttackCooldown                                    OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(float)                                     MaxSpecialAttackCooldown                                    OFFSET(get<float>, {0x400, 4, 0, 0})
	CMember(class UBehaviorTree*)                      BehaviourTree                                               OFFSET(get<T>, {0x408, 8, 0, 0})
	DMember(float)                                     UpdateTargetInterval                                        OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     PowerDownAfterSeconds                                       OFFSET(get<float>, {0x418, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ConvertedRobotController.ResetCloseTimer
	// void ResetCloseTimer();                                                                                                  // [0x1822430] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CoolDownItemAggregator
/// Size: 0x0020 (0x0000C8 - 0x0000E8)
class UCoolDownItemAggregator : public UItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(float)                                     CooldownDuration                                            OFFSET(get<float>, {0xC8, 4, 0, 0})
	CMember(class USoundBase*)                         AudioCoolDownFinished                                       OFFSET(get<T>, {0xD0, 8, 0, 0})
	DMember(float)                                     CooldownRemaining                                           OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(bool)                                      CoolDownIsPaused                                            OFFSET(get<bool>, {0xDC, 1, 0, 0})
	CMember(class AItem*)                              Item                                                        OFFSET(get<T>, {0xE0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CoolDownItemAggregator.SetPaused
	// void SetPaused(bool IsPaused);                                                                                           // [0x18228d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CoolDownItemAggregator.IsCoolingDown
	// bool IsCoolingDown();                                                                                                    // [0x18222a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CoolDownItemAggregator.GetCoolDownProgress
	// float GetCoolDownProgress();                                                                                             // [0x1821f60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CoolDownItemAggregator.ActivateCoolDown
	// void ActivateCoolDown(bool startPaused);                                                                                 // [0x18219e0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.CoolDownProgressStyle
/// Size: 0x0040 (0x000000 - 0x000040)
class FCoolDownProgressStyle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              IconTint                                                    OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(class UClass*)                             WidgetOverride                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class USoundCue*)                          AudioCoolDownFinished                                       OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.CoolDownProgressWidget
/// Size: 0x0050 (0x000260 - 0x0002B0)
class UCoolDownProgressWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	SMember(FCoolDownProgressStyle)                    Style                                                       OFFSET(getStruct<T>, {0x260, 64, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            CoolDownObject                                              OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(bool)                                      bIsFinished                                                 OFFSET(get<bool>, {0x2A8, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CoolDownProgressWidget.UpdateProgress
	// void UpdateProgress(float Progress);                                                                                     // [0x1822a30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.CoolDownProgressWidget.ReceiveUpdateProgress
	// void ReceiveUpdateProgress(float InProgress);                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CoolDownProgressWidget.ReceiveInitWidget
	// void ReceiveInitWidget();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CoolDownProgressWidget.Init
	// void Init(class UObject* InCoolDownObject, FCoolDownProgressStyle& InStyle);                                             // [0x1822170] Final|Native|Protected|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.CopyBoneVisibilityCompleted
/// Size: 0x0000 (0x000028 - 0x000028)
class UCopyBoneVisibilityCompleted : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.CopyBoneVisibilityCompleted.CopyBoneVisibilityCompleted
	// void CopyBoneVisibilityCompleted(int32_t BoneIndex);                                                                     // [0x1821e40] Native|Public        
};

/// Class /Script/FSD.CoreRift
/// Size: 0x0078 (0x000220 - 0x000298)
class ACoreRift : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USceneComponent*)                    InitialRotationPoint                                        OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USceneComponent*)                    InstancedSpikesRoot                                         OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(TArray<class UInstancedStaticMeshComponent*>) SpikeMeshes                                              OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(class USplineComponent*)                   SpikeLocationSpline                                         OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UTerrainPlacementComponent*)         terrainPlacement                                            OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UCurveVector*)                       ScaleCurve                                                  OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UCurveFloat*)                        AlphaCurve                                                  OFFSET(get<T>, {0x278, 8, 0, 0})
	DMember(float)                                     ScaleUpInitialDelay                                         OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     ScaleUpTime                                                 OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(int32_t)                                   BonesToSpawn                                                OFFSET(get<int32_t>, {0x28C, 4, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x290, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CoreRift.SpawnSpikes
	// void SpawnSpikes();                                                                                                      // [0x18229f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CoreRift.ScaleUp
	// void ScaleUp();                                                                                                          // [0x1822450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CoreRift.OnRep_Seed
	// void OnRep_Seed();                                                                                                       // [0x18223f0] Final|Native|Protected 
};

/// Class /Script/FSD.CoreSpawnEnemyBase
/// Size: 0x0040 (0x0003B0 - 0x0003F0)
class ACoreSpawnEnemyBase : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(class UPawnStatsComponent*)                PawnStats                                                   OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UHitReactionComponent*)              HitReactions                                                OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UPawnSensingComponent*)              PawnSensing                                                 OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UEnemyComponent*)                    enemy                                                       OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UOutlineComponent*)                  outline                                                     OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UPathfinderReactiveTerrainTrackerComponent*) PathfinderReactiveTerrainTracker                    OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UPawnAlertComponent*)                PawnAlert                                                   OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UDeathComponent*)                    Death                                                       OFFSET(get<T>, {0x3E8, 8, 0, 0})
};

/// Class /Script/FSD.CraftingCostLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UCraftingCostLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.CraftingCostLibrary.ConvertResourcesToFashionite
	// FCraftingCost ConvertResourcesToFashionite(TArray<FCraftingCost> InResources);                                           // [0x1821d50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PricingTier
/// Size: 0x0010 (0x000030 - 0x000040)
class UPricingTier : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   PriceKey                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.SchematicPricingTier
/// Size: 0x0000 (0x000040 - 0x000040)
class USchematicPricingTier : public UPricingTier
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/FSD.RandomWalkCycleEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FRandomWalkCycleEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     RandomSelectionWeight                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FRandRange)                                Duration                                                    OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	CMember(class UAnimSequence*)                      Animation                                                   OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     LastTimePlayed                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Class /Script/FSD.SpiderAnimInstance
/// Size: 0x0150 (0x000350 - 0x0004A0)
class USpiderAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x358, 4, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0x35C, 12, 0, 0})
	DMember(float)                                     WalkCycleSpeed                                              OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     StartMovingSpeed                                            OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(float)                                     StopMovingSpeed                                             OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     WalkCycleMinRate                                            OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(float)                                     WalkCyclePlayRate                                           OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     MeshScale                                                   OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     Direction                                                   OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     PathDirectionLerpSpeedIn                                    OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     PathDirectionLerpSpeedOut                                   OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     PathDirection                                               OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     HorizontalAngularSpeed                                      OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     HorizontalAngularSpeed_Abs                                  OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     VerticalAngularSpeed                                        OFFSET(get<float>, {0x398, 4, 0, 0})
	CMember(EMoveDirection)                            MoveDirection                                               OFFSET(get<T>, {0x39C, 1, 0, 0})
	DMember(bool)                                      IsMoving                                                    OFFSET(get<bool>, {0x39D, 1, 0, 0})
	DMember(bool)                                      IsStrafing                                                  OFFSET(get<bool>, {0x39E, 1, 0, 0})
	DMember(bool)                                      IsMovingAndStrafing                                         OFFSET(get<bool>, {0x39F, 1, 0, 0})
	DMember(bool)                                      IsFrozen                                                    OFFSET(get<bool>, {0x3A0, 1, 0, 0})
	DMember(bool)                                      IsStaggered                                                 OFFSET(get<bool>, {0x3A1, 1, 0, 0})
	DMember(float)                                     StaggerStrength                                             OFFSET(get<float>, {0x3A4, 4, 0, 0})
	DMember(bool)                                      IsAirborne                                                  OFFSET(get<bool>, {0x3A8, 1, 0, 0})
	CMember(class UParticleSystem*)                    FootStepParticle                                            OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class USoundCue*)                          FootStepSound                                               OFFSET(get<T>, {0x3B8, 8, 0, 0})
	SMember(FName)                                     FootStepLeftBoneName                                        OFFSET(getStruct<T>, {0x3C0, 8, 0, 0})
	SMember(FName)                                     FootStepRightBoneName                                       OFFSET(getStruct<T>, {0x3C8, 8, 0, 0})
	DMember(float)                                     FootStepParticleCullDistance                                OFFSET(get<float>, {0x3D0, 4, 0, 0})
	CMember(TMap<class UEnemyPlaySoundKey*, class USoundCue*>) PlaySoundByKeyMap                                   OFFSET(get<T>, {0x3D8, 80, 0, 0})
	CMember(TMap<class UEnemySpawnEffectsKey*, class UParticleSystem*>) SpawnEffectsByKeyMap                       OFFSET(get<T>, {0x428, 80, 0, 0})
	DMember(int32_t)                                   RandomWalkCycleIndex                                        OFFSET(get<int32_t>, {0x478, 4, 0, 0})
	CMember(TArray<FRandomWalkCycleEntry>)             RandomWalkCycles                                            OFFSET(get<T>, {0x480, 16, 0, 0})
	DMember(bool)                                      TurnToIdle                                                  OFFSET(get<bool>, {0x490, 1, 0, 0})
	DMember(bool)                                      IdleToTurnLeft                                              OFFSET(get<bool>, {0x491, 1, 0, 0})
	DMember(bool)                                      IdleToTurnRight                                             OFFSET(get<bool>, {0x492, 1, 0, 0})
	DMember(bool)                                      TurnToWalk                                                  OFFSET(get<bool>, {0x493, 1, 0, 0})
	DMember(bool)                                      WalkToTurnRight                                             OFFSET(get<bool>, {0x494, 1, 0, 0})
	DMember(bool)                                      WalkToTurnLeft                                              OFFSET(get<bool>, {0x495, 1, 0, 0})
	DMember(bool)                                      ExclusiveTurnStateMode                                      OFFSET(get<bool>, {0x496, 1, 0, 0})
	DMember(bool)                                      IsInFakePhysics                                             OFFSET(get<bool>, {0x497, 1, 0, 0})
	CMember(ESpiderDeathAnimationCategory)             DeathAnimationCategory                                      OFFSET(get<T>, {0x49C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SpiderAnimInstance.SetMeshScale
	// void SetMeshScale(float NewScale);                                                                                       // [0x19be1b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SpiderAnimInstance.SetDeathAnimationCategory
	// void SetDeathAnimationCategory(ESpiderDeathAnimationCategory Category);                                                  // [0x19be0a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SpiderAnimInstance.SetDeathAnimation
	// void SetDeathAnimation(class UAnimSequenceBase* Animation);                                                              // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.SpiderAnimInstance.PlayForcedCycle
	// void PlayForcedCycle(float Duration);                                                                                    // [0x19bdee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SpiderAnimInstance.IsNotStrafing
	// bool IsNotStrafing();                                                                                                    // [0x19bdb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SpiderAnimInstance.IsNotStaggered
	// bool IsNotStaggered();                                                                                                   // [0x19bdb40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SpiderAnimInstance.IsNotMoving
	// bool IsNotMoving();                                                                                                      // [0x19bdb10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SpiderAnimInstance.IsNotFrozen
	// bool IsNotFrozen();                                                                                                      // [0x19bdae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SpiderAnimInstance.IsNotAirborne
	// bool IsNotAirborne();                                                                                                    // [0x19bdab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.CrawlerAnimInstance
/// Size: 0x0040 (0x0004A0 - 0x0004E0)
class UCrawlerAnimInstance : public USpiderAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1248;

public:
	DMember(float)                                     TotalProgressionTime                                        OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(bool)                                      bIsInBallisticMove                                          OFFSET(get<bool>, {0x4A4, 1, 0, 0})
	DMember(float)                                     BallisticPitch                                              OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     ProgressionTime                                             OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(float)                                     AttackMoveBlend                                             OFFSET(get<float>, {0x4B0, 4, 0, 0})
	CMember(TArray<class UAnimMontage*>)               HeadIdleBreakMontages                                       OFFSET(get<T>, {0x4B8, 16, 0, 0})
	SMember(FVector2D)                                 IdleBreakTimeRange                                          OFFSET(getStruct<T>, {0x4CC, 8, 0, 0})
};

/// Class /Script/FSD.CrawlerEnemy
/// Size: 0x0010 (0x0003F0 - 0x000400)
class ACrawlerEnemy : public ACoreSpawnEnemyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(class UMeleeAttackComponent*)              MeleeAttack                                                 OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UBallisticMovementComponent*)        BallisticMovement                                           OFFSET(get<T>, {0x3F8, 8, 0, 0})
};

/// Class /Script/FSD.CreditsResourceData
/// Size: 0x0000 (0x0000F0 - 0x0000F0)
class UCreditsResourceData : public UResourceData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
};

/// Class /Script/FSD.BaseCritterDescriptor
/// Size: 0x0088 (0x000030 - 0x0000B8)
class UBaseCritterDescriptor : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TSoftObjectPtr<class UClass*>)             CritterClass                                                OFFSET(get<T>, {0x30, 40, 0, 0})
	CMember(TMap<class UBiome*, TSoftObjectPtr<UClass*>>) BiomeClassOverrides                                      OFFSET(get<T>, {0x58, 80, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(DeepPathFinderType)                        PathfinderType                                              OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Class /Script/FSD.CritterDescriptor
/// Size: 0x0018 (0x0000B8 - 0x0000D0)
class UCritterDescriptor : public UBaseCritterDescriptor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FIRandRange)                               SpawnAmountPerRoom                                          OFFSET(getStruct<T>, {0xB8, 8, 0, 0})
	DMember(float)                                     SpawnChancePerRoom                                          OFFSET(get<float>, {0xC0, 4, 0, 0})
	SMember(FIRandRange)                               SpawnAmountPerLevel                                         OFFSET(getStruct<T>, {0xC4, 8, 0, 0})
};

/// Class /Script/FSD.RareCritterDescriptor
/// Size: 0x0008 (0x0000B8 - 0x0000C0)
class URareCritterDescriptor : public UBaseCritterDescriptor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(float)                                     Rarity                                                      OFFSET(get<float>, {0xB8, 4, 0, 0})
};

/// Class /Script/FSD.CritterManager
/// Size: 0x0048 (0x0000B0 - 0x0000F8)
class UCritterManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	DMember(bool)                                      DisableCritters                                             OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(float)                                     ActivationRange                                             OFFSET(get<float>, {0xB4, 4, 0, 0})
};

/// Struct /Script/FSD.ProjectileSwitch
/// Size: 0x0010 (0x000000 - 0x000010)
class FProjectileSwitch : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EProjectileSwitchCriteria)                 CriteriaType                                                OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(float)                                     CriteriaThreshhold                                          OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.Crossbow
/// Size: 0x0198 (0x000780 - 0x000918)
class ACrossbow : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2328;

public:
	SMember(FMulticastInlineDelegate)                  OnDefaultArrowEquippedChanged                               OFFSET(getStruct<T>, {0x780, 16, 0, 0})
	DMember(float)                                     FullDamageSpeed                                             OFFSET(get<float>, {0x7A0, 4, 0, 0})
	CMember(class UClass*)                             DefaultArrow                                                OFFSET(get<T>, {0x7A8, 8, 0, 0})
	CMember(class UClass*)                             SpecialArrow                                                OFFSET(get<T>, {0x7B0, 8, 0, 0})
	DMember(float)                                     SpecialStatusEffectBonusTimeScale                           OFFSET(get<float>, {0x7B8, 4, 0, 0})
	CMember(class UClass*)                             BattleFrenzyStatusEffect                                    OFFSET(get<T>, {0x7C0, 8, 0, 0})
	CMember(class UClass*)                             BasicSpawnableStuckProjectile                               OFFSET(get<T>, {0x7C8, 8, 0, 0})
	DMember(int32_t)                                   SpecialAmmoMax                                              OFFSET(get<int32_t>, {0x7D0, 4, 0, 0})
	DMember(float)                                     SwitchTime                                                  OFFSET(get<float>, {0x7D4, 4, 0, 0})
	DMember(bool)                                      CanTrifork                                                  OFFSET(get<bool>, {0x7D8, 1, 0, 0})
	DMember(bool)                                      IsDefaultArrowEquipped                                      OFFSET(get<bool>, {0x7D9, 1, 0, 0})
	DMember(float)                                     RecallProgress                                              OFFSET(get<float>, {0x7DC, 4, 0, 0})
	CMember(class UStaticMeshComponent*)               AnimatedFPMesh                                              OFFSET(get<T>, {0x7E8, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               AnimatedTPMesh                                              OFFSET(get<T>, {0x7F0, 8, 0, 0})
	DMember(bool)                                      SwitchIsQueued                                              OFFSET(get<bool>, {0x7FA, 1, 0, 0})
	CMember(ECrossbowSwitchState)                      SwitchState                                                 OFFSET(get<T>, {0x7FC, 4, 0, 0})
	DMember(float)                                     OutOfAmmoSwapDelay                                          OFFSET(get<float>, {0x810, 4, 0, 0})
	CMember(class UClass*)                             AnimatedArrowSpawnable                                      OFFSET(get<T>, {0x818, 8, 0, 0})
	DMember(float)                                     ExtraShotAngleDifference                                    OFFSET(get<float>, {0x838, 4, 0, 0})
	CMember(class UCrossbowProjectileRecallable*)      HoveringRecallable                                          OFFSET(get<T>, {0x840, 8, 0, 0})
	DMember(float)                                     SwitchTimeCof                                               OFFSET(get<float>, {0x890, 4, 0, 0})
	CMember(class UStaticMesh*)                        TriforkArrowMesh                                            OFFSET(get<T>, {0x898, 8, 0, 0})
	CMember(class UStaticMesh*)                        QuintPackArrowMesh                                          OFFSET(get<T>, {0x8A0, 8, 0, 0})
	CMember(TArray<FProjectileSwitch>)                 GearStatArrows                                              OFFSET(get<T>, {0x8A8, 16, 0, 0})
	CMember(class UAnimMontage*)                       SwitchMontage                                               OFFSET(get<T>, {0x8B8, 8, 0, 0})
	CMember(class UAnimMontage*)                       SwitchMontage_TP                                            OFFSET(get<T>, {0x8C0, 8, 0, 0})
	CMember(class UAnimMontage*)                       CharacterSwitchMontage                                      OFFSET(get<T>, {0x8C8, 8, 0, 0})
	CMember(class UAnimMontage*)                       ReloadMontage                                               OFFSET(get<T>, {0x8D0, 8, 0, 0})
	CMember(class UAnimMontage*)                       ReloadMontage_TP                                            OFFSET(get<T>, {0x8D8, 8, 0, 0})
	CMember(class UAnimMontage*)                       CharacterReloadMontage                                      OFFSET(get<T>, {0x8E0, 8, 0, 0})
	CMember(TArray<class USoundCue*>)                  ReloadSoundCues                                             OFFSET(get<T>, {0x8E8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.Crossbow.UpdateRecallProgress
	// void UpdateRecallProgress();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Crossbow.StartAmmoSwitch
	// void StartAmmoSwitch();                                                                                                  // [0x1822a10] Final|Native|Private 
	// Function /Script/FSD.Crossbow.SetAnimatedTPMeshComponentFromBP
	// void SetAnimatedTPMeshComponentFromBP(class AActor* animatedArrow);                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Crossbow.SetAnimatedTPMeshComponent
	// void SetAnimatedTPMeshComponent(class UStaticMeshComponent* Component);                                                  // [0x18227b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Crossbow.SetAnimatedFPMeshComponentFromBP
	// void SetAnimatedFPMeshComponentFromBP(class AActor* animatedArrow);                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Crossbow.SetAnimatedFPMeshComponent
	// void SetAnimatedFPMeshComponent(class UStaticMeshComponent* Component);                                                  // [0x1822720] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Crossbow.Server_UpdateRetrievableArrows
	// void Server_UpdateRetrievableArrows(int32_t defaultAmmo, int32_t specialAmmo);                                           // [0x1822650] Final|Net|NetReliableNative|Event|Private|NetServer 
	// Function /Script/FSD.Crossbow.Server_SwitchAmmoType
	// void Server_SwitchAmmoType(class UProjectileLauncherBaseComponent* projectileLauncher, ECrossbowSwitchState State);      // [0x1822580] Final|Net|NetReliableNative|Event|Private|NetServer 
	// Function /Script/FSD.Crossbow.Server_SetSwitchIsQueued
	// void Server_SetSwitchIsQueued(bool IsQueued);                                                                            // [0x17f3a30] Final|Net|NetReliableNative|Event|Private|NetServer 
	// Function /Script/FSD.Crossbow.OnRep_SwitchIsQueued
	// void OnRep_SwitchIsQueued();                                                                                             // [0x1822410] Final|Native|Private 
	// Function /Script/FSD.Crossbow.OnRep_IsDefaultArrowEquipped
	// void OnRep_IsDefaultArrowEquipped();                                                                                     // [0x18223b0] Final|Native|Private 
	// Function /Script/FSD.Crossbow.OnProjectileFired
	// void OnProjectileFired(class AProjectileBase* Projectile);                                                               // [0x1822300] Final|Native|Protected 
	// Function /Script/FSD.Crossbow.GetTotalArrowCount
	// int32_t GetTotalArrowCount(bool InDefaultArrowCount);                                                                    // [0x18220d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Crossbow.GetSpecialArrowEffectDuration
	// float GetSpecialArrowEffectDuration(class UClass*& Effect);                                                              // [0x1822000] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Crossbow.GetIsDefaultArrowEquipped
	// bool GetIsDefaultArrowEquipped();                                                                                        // [0x1821fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Crossbow.DestroyActor
	// void DestroyActor(class AActor* Actor);                                                                                  // [0x1821ed0] Final|Native|Public  
	// Function /Script/FSD.Crossbow.DefaultArrowEquippedChanged__DelegateSignature
	// void DefaultArrowEquippedChanged__DelegateSignature(bool InDefaultArrow);                                                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.Crossbow.Client_RefillSpecialAmmo
	// void Client_RefillSpecialAmmo(float percentage);                                                                         // [0x1821cc0] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/FSD.Crossbow.Client_CallAddSpecialAmmo
	// void Client_CallAddSpecialAmmo(int32_t amount);                                                                          // [0x1821c30] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/FSD.Crossbow.Client_CallAddDefaultAmmo
	// void Client_CallAddDefaultAmmo(int32_t amount);                                                                          // [0x1821ba0] Final|Net|NetReliableNative|Event|Private|NetClient 
};

/// Class /Script/FSD.CrossbowProjectileBase
/// Size: 0x0170 (0x000340 - 0x0004B0)
class ACrossbowProjectileBase : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
	SMember(FMulticastInlineDelegate)                  OnDamageDealt                                               OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	DMember(float)                                     StatusEffectTime                                            OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(bool)                                      BansheePulseActive                                          OFFSET(get<bool>, {0x368, 1, 0, 0})
	CMember(class UCrossbowProjectileMagnetic*)        MagneticComponent                                           OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UCrossbowProjectileRicochet*)        RicochetComponent                                           OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UCrossbowStuckProjectileEffectBanshee*) BansheeComponent                                         OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  BansheePulseComponent                                       OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UClass*)                             BansheeComponentClass                                       OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UClass*)                             RecallComponentClass                                        OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Icon                                                        OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         TriforkIcon                                                 OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UClass*)                             SpawnableStuckProjectile                                    OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UClass*)                             OnDamageEffect                                              OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(ECrossbowEffectApplication)                EffectApplication                                           OFFSET(get<T>, {0x400, 1, 0, 0})
	DMember(char)                                      SelectionPriority                                           OFFSET(get<char>, {0x401, 1, 0, 0})
	DMember(bool)                                      CanEverBePickedUp                                           OFFSET(get<bool>, {0x402, 1, 0, 0})
	DMember(bool)                                      Penetrates                                                  OFFSET(get<bool>, {0x403, 1, 0, 0})
	CMember(class USoundCue*)                          ImpactSound                                                 OFFSET(get<T>, {0x408, 8, 0, 0})
	DMember(bool)                                      IsASpecialProjectile                                        OFFSET(get<bool>, {0x410, 1, 0, 0})
	CMember(class UDamageComponent*)                   MainDamageComponent                                         OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UDamageComponent*)                   SimpleDamageComponent                                       OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UStaticMesh*)                        ProjectileMesh                                              OFFSET(get<T>, {0x428, 8, 0, 0})
	DMember(float)                                     KillTrailAfterTime                                          OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(bool)                                      OnlyTrailShown                                              OFFSET(get<bool>, {0x4A4, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CrossbowProjectileBase.SetSimpleDamageComponentFromBP
	// void SetSimpleDamageComponentFromBP();                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CrossbowProjectileBase.SetSimpleDamageComponent
	// void SetSimpleDamageComponent(class UDamageComponent* Component);                                                        // [0x1822960] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.CrossbowProjectileBase.SetMainDamageComponentFromBP
	// void SetMainDamageComponentFromBP();                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CrossbowProjectileBase.SetMainDamageComponent
	// void SetMainDamageComponent(class UDamageComponent* Component);                                                          // [0x1822840] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.CrossbowProjectileBase.Server_HandleImpact
	// void Server_HandleImpact(FHitResult HitResult, FVector RelativeLocation);                                                // [0x1822470] Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults 
	// Function /Script/FSD.CrossbowProjectileBase.OnRep_OnlyTrailShown
	// void OnRep_OnlyTrailShown();                                                                                             // [0x18223d0] Final|Native|Private 
	// Function /Script/FSD.CrossbowProjectileBase.OnRep_BansheePulseActive
	// void OnRep_BansheePulseActive();                                                                                         // [0x1822390] Final|Native|Public  
	// Function /Script/FSD.CrossbowProjectileBase.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x18222d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CrossbowProjectileBase.GetSpecialArrowEquipped
	// bool GetSpecialArrowEquipped();                                                                                          // [0x18220a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CrossbowProjectileBase.GetScaledStatusEffectTime
	// float GetScaledStatusEffectTime();                                                                                       // [0x1821fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CrossbowProjectileBase.ApplyDamageEffects
	// void ApplyDamageEffects(FHitResult& HitResult, FVector& RelativeLocation);                                               // [0x1821a70] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.CrossbowProjectileControlled
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UCrossbowProjectileControlled : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(class USceneComponent*)                    HomingTarget                                                OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class ACrossbowProjectileBase*)            CastedOwner                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CrossbowProjectileControlled.UpdateHomingTarget
	// void UpdateHomingTarget();                                                                                               // [0x1829420] Final|Native|Private 
	// Function /Script/FSD.CrossbowProjectileControlled.Server_UpdateHomingTarget
	// void Server_UpdateHomingTarget(FVector Target);                                                                          // [0x1829280] Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults 
	// Function /Script/FSD.CrossbowProjectileControlled.CancelControl
	// void CancelControl();                                                                                                    // [0x18286c0] Final|Native|Private 
	// Function /Script/FSD.CrossbowProjectileControlled.All_UpdateHomingTarget
	// void All_UpdateHomingTarget(FVector Target);                                                                             // [0x1828520] Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults 
};

/// Class /Script/FSD.CrossbowProjectileMagnetic
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UCrossbowProjectileMagnetic : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TArray<class UClass*>)                     ElectricEffects                                             OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TWeakObjectPtr<class AFSDPawn*>)           TargetEnemy                                                 OFFSET(get<T>, {0xD0, 8, 0, 0})
	DMember(float)                                     OverlapCheckSize                                            OFFSET(get<float>, {0xE8, 4, 0, 0})
};

/// Class /Script/FSD.CrossbowProjectileRecallable
/// Size: 0x0070 (0x0000B0 - 0x000120)
class UCrossbowProjectileRecallable : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(class UInstantUsable*)                     Usable                                                      OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class APlayerCharacter*)                   RecallTarget                                                OFFSET(get<T>, {0xB8, 8, 0, 0})
	DMember(float)                                     RecallStartTime                                             OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     RecallSpeed                                                 OFFSET(get<float>, {0xC8, 4, 0, 0})
	SMember(FTransform)                                StartTransform                                              OFFSET(getStruct<T>, {0xD0, 48, 0, 0})
	CMember(class UInterpolatedFirstPersonStaticMeshComponent*) FPMeshComponent                                    OFFSET(get<T>, {0x100, 8, 0, 0})
	DMember(bool)                                      IsRecallable                                                OFFSET(get<bool>, {0x108, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CrossbowProjectileRecallable.Server_SetRecallTarget
	// void Server_SetRecallTarget(class APlayerCharacter* Player, FTransform startTrans);                                      // [0x1829140] Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults 
};

/// Class /Script/FSD.CrossbowProjectileRicochet
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UCrossbowProjectileRicochet : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(class UNiagaraSystem*)                     NiagaraTrailParticleSystem                                  OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(int32_t)                                   RicochetMax                                                 OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(float)                                     RicochetRange                                               OFFSET(get<float>, {0xBC, 4, 0, 0})
	CMember(class ACrossbowProjectileBase*)            CastedOwner                                                 OFFSET(get<T>, {0xC8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CrossbowProjectileRicochet.Ricochet
	// void Ricochet(FHitResult& HitResult, FVector& RelativeLocation);                                                         // [0x1828ee0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.CrossbowStuckProjectileEffect
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UCrossbowStuckProjectileEffect : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FSD.CrossbowStuckProjectileEffectApplication
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UCrossbowStuckProjectileEffectApplication : public UCrossbowStuckProjectileEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	DMember(float)                                     SearchSphereSize                                            OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     SearchTime                                                  OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(bool)                                      CurrentlyActive                                             OFFSET(get<bool>, {0xC8, 1, 0, 0})
};

/// Class /Script/FSD.CrossbowStuckProjectileEffectExploding
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UCrossbowStuckProjectileEffectExploding : public UCrossbowStuckProjectileEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(class USoundCue*)                          ChemicalSoundCue                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UAudioComponent*)                    ChemicalAudioComponent                                      OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     ChemicalReactionDelay                                       OFFSET(get<float>, {0xC8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.CrossbowStuckProjectileEffectExploding.StartTimeoutTimer
	// void StartTimeoutTimer(class UHealthComponentBase* destroyed);                                                           // [0x1829390] Final|Native|Private 
	// Function /Script/FSD.CrossbowStuckProjectileEffectExploding.EnableTimeOut
	// void EnableTimeOut();                                                                                                    // [0x18286e0] Final|Native|Private 
};

/// Class /Script/FSD.CrossbowStuckProjectileEffectBanshee
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UCrossbowStuckProjectileEffectBanshee : public UCrossbowStuckProjectileEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(float)                                     SearchSphereSize                                            OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     SearchTime                                                  OFFSET(get<float>, {0xCC, 4, 0, 0})
};

/// Class /Script/FSD.CrossbowStuckProjectileEffectElectric
/// Size: 0x0048 (0x0000B0 - 0x0000F8)
class UCrossbowStuckProjectileEffectElectric : public UCrossbowStuckProjectileEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(class UClass*)                             PlasmaBeamClass                                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UClass*)                             ElectrocutionActorClass                                     OFFSET(get<T>, {0xB8, 8, 0, 0})
	DMember(float)                                     PlasmaLineMaxRange                                          OFFSET(get<float>, {0xC0, 4, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             ElectrocutionActor                                          OFFSET(get<T>, {0xE8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CrossbowStuckProjectileEffectElectric.OnElectrocutionActorDestroyed
	// void OnElectrocutionActorDestroyed(class AActor* Actor);                                                                 // [0x1828ac0] Final|Native|Public  
};

/// Class /Script/FSD.CrossbowProjectileStuck
/// Size: 0x0058 (0x000238 - 0x000290)
class ACrossbowProjectileStuck : public AFSDPhysicsActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(ECrossbowStuckType)                        StuckProjectileEffect                                       OFFSET(get<T>, {0x238, 1, 0, 0})
	DMember(bool)                                      BansheePulseEnabled                                         OFFSET(get<bool>, {0x239, 1, 0, 0})
	DMember(bool)                                      IsPlayingElectricRangeEffect                                OFFSET(get<bool>, {0x23A, 1, 0, 0})
	CMember(class UClass*)                             AppliedEffect                                               OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     StatusEffectTime                                            OFFSET(get<float>, {0x248, 4, 0, 0})
	CMember(class USphereComponent*)                   AttachmentRoot                                              OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UCrossbowProjectileRecallable*)      RecallComponent                                             OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UCrossbowStuckProjectileEffectBanshee*) BansheeComponent                                         OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  BansheePulseComponent                                       OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class USphereComponent*)                   LaserCollider                                               OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class ACrossbowProjectileBase*)            BaseProjectile                                              OFFSET(get<T>, {0x278, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CrossbowProjectileStuck.UsableChanged
	// void UsableChanged(bool CanUse);                                                                                         // [0x1829440] Final|Native|Private 
	// Function /Script/FSD.CrossbowProjectileStuck.OnUsedBy
	// void OnUsedBy(class APlayerCharacter* Player, EInputKeys Key);                                                           // [0x1828e10] Final|Native|Public  
	// Function /Script/FSD.CrossbowProjectileStuck.OnRep_BansheePulseEnabled
	// void OnRep_BansheePulseEnabled();                                                                                        // [0x1828c00] Final|Native|Public  
	// Function /Script/FSD.CrossbowProjectileStuck.MatchParentDestroy
	// void MatchParentDestroy(class UHealthComponentBase* destroyed);                                                          // [0x1828a30] Final|Native|Private 
	// Function /Script/FSD.CrossbowProjectileStuck.IsLocallyControlled
	// bool IsLocallyControlled();                                                                                              // [0x18222d0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CrossbowProjectileStuck.GetSpecialArrowEquipped
	// bool GetSpecialArrowEquipped();                                                                                          // [0x18220a0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.CrossbowProjectileStuck.All_OnCavePointRemoved
	// void All_OnCavePointRemoved(class USceneComponent* Point);                                                               // [0x1828490] Net|NetReliableNative|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.CrosshairWidget
/// Size: 0x0000 (0x000260 - 0x000260)
class UCrosshairWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:


	/// Functions
	// Function /Script/FSD.CrosshairWidget.SetData
	// void SetData(class AItem* Item);                                                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.CrosshairWidget.OnUpgraded
	// void OnUpgraded(class AItem* Item);                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.CrosshairAggregator
/// Size: 0x0048 (0x0000C8 - 0x000110)
class UCrosshairAggregator : public UItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FMulticastInlineDelegate)                  OnCrosshairCreated                                          OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(class UUserWidget*)                        CrosshairWidget                                             OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UClass*)                             CrossHairType                                               OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UCustomAmmoCountWidget*)             CustomAmmoCounterWidget                                     OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UCustomAmmoCountWidget*)             AdditionalAmmoCounterWidget                                 OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UClass*)                             CustomAmmoCounterType                                       OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UClass*)                             AdditionalAmmoCounterType                                   OFFSET(get<T>, {0x108, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CrosshairAggregator.SetCrosshair
	// void SetCrosshair(class UUserWidget* Widget);                                                                            // [0x1829300] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.CrosshairAggregator.GetOrCreateCrosshair
	// class UUserWidget* GetOrCreateCrosshair();                                                                               // [0x1828970] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CrosshairAggregator.GetCustomAmmoCounterWidget
	// class UCustomAmmoCountWidget* GetCustomAmmoCounterWidget(class UObject* WorldContext, class APlayerController* InOwner); // [0x18287d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.CrosshairAggregator.GetAdditionalAmmoCounterWidget
	// class UCustomAmmoCountWidget* GetAdditionalAmmoCounterWidget(class UObject* WorldContext, class APlayerController* InOwner); // [0x1828700] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.DecalData
/// Size: 0x0020 (0x000000 - 0x000020)
class FDecalData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UMaterialInterface*)                 DecalMaterial                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     DecalSize                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     DecalDepth                                                  OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     LifeSpan                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     StartDelay                                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     FadeInDuration                                              OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     FadeDuration                                                OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Class /Script/FSD.CryosprayItem
/// Size: 0x0190 (0x000780 - 0x000910)
class ACryosprayItem : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2320;

public:
	CMember(class UProjectileLauncherComponent*)       projectileLauncher                                          OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(class UStickyFlameSpawner*)                StickyFlames                                                OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(class UDamageComponent*)                   AoEColdDamageComponent                                      OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(class UMotionAudioController*)             VelocityAudio                                               OFFSET(get<T>, {0x7A0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           FlameParticleComponent                                      OFFSET(get<T>, {0x7A8, 8, 0, 0})
	DMember(bool)                                      PressurizedProjectileEnabled                                OFFSET(get<bool>, {0x7B0, 1, 0, 0})
	DMember(float)                                     PressurizedProjectileDelay                                  OFFSET(get<float>, {0x7B4, 4, 0, 0})
	DMember(int32_t)                                   PressurizeProjectileFullCost                                OFFSET(get<int32_t>, {0x7B8, 4, 0, 0})
	CMember(class UParticleSystem*)                    ChargeupParticles                                           OFFSET(get<T>, {0x7C8, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           ChargeupParticleInstance                                    OFFSET(get<T>, {0x7D0, 8, 0, 0})
	SMember(FDecalData)                                ImpactDecal                                                 OFFSET(getStruct<T>, {0x7D8, 32, 0, 0})
	DMember(float)                                     DecalDelay                                                  OFFSET(get<float>, {0x7F8, 4, 0, 0})
	CMember(class UParticleSystem*)                    ImpactParticles                                             OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           ImpactParticleInstance                                      OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(TArray<FName>)                             FlameParameterNames                                         OFFSET(get<T>, {0x810, 16, 0, 0})
	DMember(float)                                     DamageSphereRadius                                          OFFSET(get<float>, {0x820, 4, 0, 0})
	DMember(float)                                     MaxFlameDistance                                            OFFSET(get<float>, {0x824, 4, 0, 0})
	DMember(float)                                     FlameGrowthPerSecond                                        OFFSET(get<float>, {0x828, 4, 0, 0})
	DMember(float)                                     FriendlyFireModifier                                        OFFSET(get<float>, {0x82C, 4, 0, 0})
	DMember(float)                                     ChargeupTime                                                OFFSET(get<float>, {0x830, 4, 0, 0})
	DMember(float)                                     ChargeDownTime                                              OFFSET(get<float>, {0x834, 4, 0, 0})
	DMember(bool)                                      isCharging                                                  OFFSET(get<bool>, {0x839, 1, 0, 0})
	DMember(float)                                     ChargeProgress                                              OFFSET(get<float>, {0x83C, 4, 0, 0})
	DMember(bool)                                      bRepressurerising                                           OFFSET(get<bool>, {0x840, 1, 0, 0})
	DMember(float)                                     RepressurerisingDoneAtPct                                   OFFSET(get<float>, {0x844, 4, 0, 0})
	DMember(float)                                     ChargeUpFadeOutTime                                         OFFSET(get<float>, {0x848, 4, 0, 0})
	CMember(class UFSDAudioComponent*)                 ChargeUpAudioComponent                                      OFFSET(get<T>, {0x850, 8, 0, 0})
	DMember(float)                                     PressureTime                                                OFFSET(get<float>, {0x858, 4, 0, 0})
	DMember(float)                                     PressureDropMultiplier                                      OFFSET(get<float>, {0x85C, 4, 0, 0})
	DMember(float)                                     PressureGainMultiplier                                      OFFSET(get<float>, {0x860, 4, 0, 0})
	DMember(float)                                     CurrentPressure                                             OFFSET(get<float>, {0x864, 4, 0, 0})
	DMember(float)                                     RePressureDuration                                          OFFSET(get<float>, {0x868, 4, 0, 0})
	DMember(float)                                     RePressureProgress                                          OFFSET(get<float>, {0x86C, 4, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x870, 16, 0, 0})
	DMember(bool)                                      LongReachEnabled                                            OFFSET(get<bool>, {0x880, 1, 0, 0})
	DMember(bool)                                      AoEColdEnabled                                              OFFSET(get<bool>, {0x890, 1, 0, 0})
	CMember(TSet<AActor*>)                             HitActorCache                                               OFFSET(get<T>, {0x898, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.CryosprayItem.ServerDoDamage
	// void ServerDoDamage(FVector_NetQuantize Start, FVector_NetQuantize End, char Power);                                     // [0x1829010] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CryosprayItem.Server_TriggerAoECold
	// void Server_TriggerAoECold();                                                                                            // [0x1829260] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CryosprayItem.Server_PreLaunchProjectile
	// void Server_PreLaunchProjectile();                                                                                       // [0x17f4bd0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.CryosprayItem.ReceiveRepressurisingChanged
	// void ReceiveRepressurisingChanged(bool Value);                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CryosprayItem.OnTargetDamaged
	// void OnTargetDamaged(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x1828cb0] Final|Native|Protected 
	// Function /Script/FSD.CryosprayItem.OnRep_IsCharging
	// void OnRep_IsCharging(bool OldValue);                                                                                    // [0x1828c20] Final|Native|Protected 
	// Function /Script/FSD.CryosprayItem.OnProjectileSpawned
	// void OnProjectileSpawned(class AProjectileBase* Projectile);                                                             // [0x1828b70] Final|Native|Protected 
	// Function /Script/FSD.CryosprayItem.OnProjectileLaunched
	// void OnProjectileLaunched(FVector& Location);                                                                            // [0x1d6f900] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.CryosprayItem.OnPressurizedPartileShoot
	// void OnPressurizedPartileShoot();                                                                                        // [0x1828b50] Final|Native|Protected 
	// Function /Script/FSD.CryosprayItem.OnPreProjectileLaunch
	// void OnPreProjectileLaunch();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CryosprayItem.All_PreLaunchProjectile
	// void All_PreLaunchProjectile();                                                                                          // [0x17f4bf0] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.CryoSprayAnimInstance
/// Size: 0x0028 (0x0002B8 - 0x0002E0)
class UCryoSprayAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(class ACryosprayItem*)                     Weapon                                                      OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(bool)                                      IsFiring                                                    OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(float)                                     ChargeProgress                                              OFFSET(get<float>, {0x2C4, 4, 0, 0})
	SMember(FRotator)                                  ChargeRotation                                              OFFSET(getStruct<T>, {0x2C8, 12, 0, 0})
	DMember(float)                                     ChargeBlend                                                 OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     Pressure                                                    OFFSET(get<float>, {0x2D8, 4, 0, 0})
};

/// Class /Script/FSD.CustomKeyBindingLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UCustomKeyBindingLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FSD.CustomKeySetting
/// Size: 0x0038 (0x000000 - 0x000038)
class FCustomKeySetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     SaveID                                                      OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TArray<FName>)                             ActionNames                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(EKeyBindingAxis)                           ActionAxis                                                  OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/FSD.KeyBindingSettings
/// Size: 0x0020 (0x000030 - 0x000050)
class UKeyBindingSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FCustomKeySetting>)                 KeyboardMouseButtons                                        OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FCustomKeySetting>)                 ControllerButtons                                           OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FSD.CustomRichTextDecorator
/// Size: 0x0008 (0x000028 - 0x000030)
class UCustomRichTextDecorator : public URichTextBlockDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class URichTextBlock*)                     RichTextBlock                                               OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FSD.DailyDealSetup
/// Size: 0x0028 (0x000000 - 0x000028)
class FDailyDealSetup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EDealType)                                 DealType                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FIntPoint)                                 UnitsRange                                                  OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FVector2D)                                 DiscountRangePercent                                        OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	SMember(FVector2D)                                 ExtraValueRangePercent                                      OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
};

/// Class /Script/FSD.DailyDealSettings
/// Size: 0x0010 (0x000030 - 0x000040)
class UDailyDealSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FDailyDealSetup>)                   DailyDeals                                                  OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DailyDealSettings.IsDailyDealBought
	// bool IsDailyDealBought(class UObject* WorldContextObject);                                                               // [0x18289a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.DailyDealSettings.GetDailyDealSeed
	// int32_t GetDailyDealSeed();                                                                                              // [0x1828940] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DailyDealSettings.GetDailyDeal
	// void GetDailyDeal(FDailyDeal& outDeal);                                                                                  // [0x18288a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.DailyDealSettings.CanAffordDailyDeal
	// bool CanAffordDailyDeal(class UObject* WorldContextObject);                                                              // [0x1828630] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.DailyDealSettings.BuyDailyDeal
	// bool BuyDailyDeal(class UObject* WorldContextObject);                                                                    // [0x18285a0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.DamageAttackComponent
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class UDamageAttackComponent : public UAttackBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0xF0, 8, 0, 0})
};

/// Class /Script/FSD.DamageBonusBase
/// Size: 0x0010 (0x000030 - 0x000040)
class UDamageBonusBase : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      UseBaseDamage                                               OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(class UDamageCondition*)                   Condition                                                   OFFSET(get<T>, {0x38, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DamageBonusBase.AddDamageBonusToComponent
	// class UDamageBonusBase* AddDamageBonusToComponent(class UClass* damageBonusClass, class UDamageComponent* DamageComponent); // [0x18283c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.PluckFromZiplineBonus
/// Size: 0x0000 (0x000040 - 0x000040)
class UPluckFromZiplineBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FSD.FlatDamageBonus
/// Size: 0x0010 (0x000040 - 0x000050)
class UFlatDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.RangedFlatDamageBonus
/// Size: 0x0010 (0x000040 - 0x000050)
class URangedFlatDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UCurveFloat*)                        DamageCurve                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.TargetSpecificDamageBonus
/// Size: 0x0058 (0x000040 - 0x000098)
class UTargetSpecificDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(float)                                     Bonus                                                       OFFSET(get<float>, {0x40, 4, 0, 0})
	SMember(FGameplayTagQuery)                         tagQuery                                                    OFFSET(getStruct<T>, {0x48, 72, 0, 0})
	SMember(FName)                                     Key                                                         OFFSET(getStruct<T>, {0x90, 8, 0, 0})
};

/// Class /Script/FSD.DamageConversionBonus
/// Size: 0x0010 (0x000040 - 0x000050)
class UDamageConversionBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     ConversionPercentage                                        OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      DamageIsAdded                                               OFFSET(get<bool>, {0x4C, 1, 0, 0})
};

/// Class /Script/FSD.TargetStateDamageBonus
/// Size: 0x0010 (0x000040 - 0x000050)
class UTargetStateDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(ETargetStateDamageBonusType)               TargetState                                                 OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(float)                                     Bonus                                                       OFFSET(get<float>, {0x44, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.StatusDamageBonus
/// Size: 0x0020 (0x000040 - 0x000060)
class UStatusDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<class UClass*>)                     StatusEffects                                               OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(float)                                     Bonus                                                       OFFSET(get<float>, {0x50, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.StatusAndStateDamageBonus
/// Size: 0x0030 (0x000040 - 0x000070)
class UStatusAndStateDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<class UClass*>)                     StatusEffects                                               OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<ETargetStateDamageBonusType>)       TargetStates                                                OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(float)                                     Bonus                                                       OFFSET(get<float>, {0x60, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x68, 8, 0, 0})
};

/// Class /Script/FSD.PushStatusEffectDamageBonus
/// Size: 0x0020 (0x000040 - 0x000060)
class UPushStatusEffectDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     Chance                                                      OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      IgnoreArmorHit                                              OFFSET(get<bool>, {0x5C, 1, 0, 0})
};

/// Class /Script/FSD.PushDynamicStatusEffectDamageBonus
/// Size: 0x0028 (0x000040 - 0x000068)
class UPushDynamicStatusEffectDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UClass*)                             BaseSTE                                                     OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UStatusEffect*)                      StatusEffect                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(float)                                     Chance                                                      OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Class /Script/FSD.FearAoEBonus
/// Size: 0x0008 (0x000040 - 0x000048)
class UFearAoEBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     FearFactor                                                  OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/FSD.AmmoLeftDamageBonus
/// Size: 0x0010 (0x000050 - 0x000060)
class UAmmoLeftDamageBonus : public UFlatDamageBonus
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UCurveFloat*)                        AmmoDamageCurve                                             OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/FSD.AmmoUsedDamageBonus
/// Size: 0x0008 (0x000040 - 0x000048)
class UAmmoUsedDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     DamageBonusPerRoundFired                                    OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/FSD.RandomDamageBonus
/// Size: 0x0008 (0x000040 - 0x000048)
class URandomDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FRandRange)                                RandomDamageRange                                           OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.PercentDamageBonus
/// Size: 0x0008 (0x000040 - 0x000048)
class UPercentDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     DamageMultiplier                                            OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/FSD.GatlingHotShellsBonus
/// Size: 0x0000 (0x000050 - 0x000050)
class UGatlingHotShellsBonus : public UDamageConversionBonus
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/FSD.BreakIceBonus
/// Size: 0x0008 (0x000040 - 0x000048)
class UBreakIceBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     DeFrostAmount                                               OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/FSD.KnockbackDamageBonus
/// Size: 0x0020 (0x000040 - 0x000060)
class UKnockbackDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     KnockBackHorizontalForce                                    OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     KnockBackVerticalForce                                      OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     VerticalScaleMultiplier                                     OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     HorizontalScaleMultiplier                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     MinVerticalPower                                            OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     MinHorizontalPower                                          OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     OptimalDistance                                             OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      AllowForIncapacitadedPlayes                                 OFFSET(get<bool>, {0x5C, 1, 0, 0})
	DMember(bool)                                      KnockThowardsInstigator                                     OFFSET(get<bool>, {0x5D, 1, 0, 0})
	DMember(bool)                                      ScalePowerToInstigatorDistance                              OFFSET(get<bool>, {0x5E, 1, 0, 0})
	DMember(bool)                                      AbsoluteKnockBack                                           OFFSET(get<bool>, {0x5F, 1, 0, 0})
};

/// Class /Script/FSD.CarryElementalStatus
/// Size: 0x0010 (0x000040 - 0x000050)
class UCarryElementalStatus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     CarryBonusAmount                                            OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(class UDamageClass*)                       CarriedClass                                                OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.LockCountSTEBonus
/// Size: 0x0010 (0x000040 - 0x000050)
class ULockCountSTEBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   MinLockCount                                                OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      UseTotalLockCount                                           OFFSET(get<bool>, {0x44, 1, 0, 0})
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.TagDamageBonus
/// Size: 0x0010 (0x000040 - 0x000050)
class UTagDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<class UDamageTag*>)                 Tags                                                        OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FSD.SetImpulseDamageBonus
/// Size: 0x0008 (0x000040 - 0x000048)
class USetImpulseDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UDamageImpulse*)                     DamageImpulse                                               OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.SpawnOnImpactDamageBonus
/// Size: 0x0008 (0x000040 - 0x000048)
class USpawnOnImpactDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UClass*)                             ActorToSpawn                                                OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.ExtendSTEDurationBonus
/// Size: 0x0010 (0x000040 - 0x000050)
class UExtendSTEDurationBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     AddedDuration                                               OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/FSD.PlayerArmorDamageBonus
/// Size: 0x0008 (0x000040 - 0x000048)
class UPlayerArmorDamageBonus : public UDamageBonusBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/FSD.DamageClass
/// Size: 0x0028 (0x000030 - 0x000058)
class UDamageClass : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UPawnStat*)                          ResistanceStat                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     RagdollScale                                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      BypassesShield                                              OFFSET(get<bool>, {0x3C, 1, 0, 0})
	DMember(bool)                                      AffectedByFriendlyFire                                      OFFSET(get<bool>, {0x3D, 1, 0, 0})
	CMember(class UTexture2D*)                         IndicatorImage                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DamageShout                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UDamageImpulse*)                     DefaultDamageImpulse                                        OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/FSD.DamageComponent
/// Size: 0x0128 (0x0000B0 - 0x0001D8)
class UDamageComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	SMember(FMulticastInlineDelegate)                  OnTargetKilledEvent                                         OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTargetDamagedEvent                                        OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnNoTargetHitEvent                                          OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHitDeadTarget                                             OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAsyncAoE_Complete                                         OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	CMember(EDamageComponentType)                      DamageComponentType                                         OFFSET(get<T>, {0x108, 1, 0, 0})
	CMember(class UDamageImpulse*)                     DamageImpulse                                               OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     armorDamageMultiplier                                       OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     ArmorPenetration                                            OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(bool)                                      ShattersArmor                                               OFFSET(get<bool>, {0x124, 1, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(EArmorDamageType)                          ArmorDamageType                                             OFFSET(get<T>, {0x130, 1, 0, 0})
	DMember(float)                                     WeakpointDamageMultiplier                                   OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     FrozenDamageBonusScale                                      OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     FriendlyFireModifier                                        OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     SelfFriendlyFireMultiplier                                  OFFSET(get<float>, {0x140, 4, 0, 0})
	SMember(FGameplayTag)                              FriendlyFireTag                                             OFFSET(getStruct<T>, {0x144, 8, 0, 0})
	DMember(bool)                                      CanHitSameTypeAsOwner                                       OFFSET(get<bool>, {0x14C, 1, 0, 0})
	DMember(bool)                                      StaggerOnlyOnWeakpointHit                                   OFFSET(get<bool>, {0x14D, 1, 0, 0})
	DMember(float)                                     StaggerChance                                               OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     StaggerDuration                                             OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     FearFactor                                                  OFFSET(get<float>, {0x158, 4, 0, 0})
	CMember(TArray<class UDamageBonusBase*>)           DamageBonuses                                               OFFSET(get<T>, {0x160, 16, 0, 0})
	CMember(TArray<class UDamageModifier*>)            DamageModifiers                                             OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(TArray<class UDamageTag*>)                 damageTags                                                  OFFSET(get<T>, {0x180, 16, 0, 0})
	DMember(bool)                                      UseAreaOfEffect                                             OFFSET(get<bool>, {0x1A0, 1, 0, 0})
	DMember(float)                                     RadialDamage                                                OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(bool)                                      NoFriendlyFireFromRadial                                    OFFSET(get<bool>, {0x1A8, 1, 0, 0})
	CMember(class UDamageClass*)                       RadialDamageClass                                           OFFSET(get<T>, {0x1B0, 8, 0, 0})
	DMember(float)                                     MinDamagePct                                                OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(float)                                     DamageRadius                                                OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     MaxDamageRadius                                             OFFSET(get<float>, {0x1C0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DamageComponent.PreTestDamageConditions
	// void PreTestDamageConditions();                                                                                          // [0x182d620] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DamageComponent.GetDamageComponentCDO
	// class UDamageComponent* GetDamageComponentCDO(class UClass* DamageComponent);                                            // [0x182ce40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DamageComponent.GetDamage
	// float GetDamage();                                                                                                       // [0x1809ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DamageComponent.DamageTargetFromHit
	// void DamageTargetFromHit(FHitResult& HitResult);                                                                         // [0x182c950] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable|Const 
	// Function /Script/FSD.DamageComponent.DamageTarget_CDO
	// void DamageTarget_CDO(FVector& Location, class AActor* Owner, class AActor* hitActor);                                   // [0x182ca30] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DamageComponent.DamageTarget
	// void DamageTarget(class AActor* Target, FVector& Location, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysMat, int32_t BoneIndex); // [0x182c7a0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const 
	// Function /Script/FSD.DamageComponent.DamageArmor_Server
	// void DamageArmor_Server(class AActor* Target, class UPrimitiveComponent* collider, int32_t BoneIndex, FVector& impactLocation); // [0x182c640] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|Const 
	// Function /Script/FSD.DamageComponent.DamageArmor_All
	// void DamageArmor_All(class AActor* Target, class UPrimitiveComponent* collider, int32_t BoneIndex);                      // [0x182c530] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.DamageComponent.ArmorSupportsLocalOnlyCall
	// bool ArmorSupportsLocalOnlyCall(class AActor* Target);                                                                   // [0x182c1b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.DamageCondition
/// Size: 0x0000 (0x000028 - 0x000028)
class UDamageCondition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.FalseDamageCondition
/// Size: 0x0000 (0x000028 - 0x000028)
class UFalseDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.MultiDamageCondition
/// Size: 0x0018 (0x000028 - 0x000040)
class UMultiDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UDamageCondition*>)           Conditions                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(bool)                                      RequireAllTrue                                              OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/FSD.RandomDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class URandomDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     Chance                                                      OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/FSD.LockCountDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class ULockCountDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   MinLockCount                                                OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      UseTotalLockCount                                           OFFSET(get<bool>, {0x2C, 1, 0, 0})
};

/// Class /Script/FSD.LocksRemainingDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class ULocksRemainingDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   MaxLocksRemaining                                           OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Class /Script/FSD.TargetStateDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UTargetStateDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(ETargetStateDamageBonusType)               TargetState                                                 OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.TargetSTEDamageCondition
/// Size: 0x0010 (0x000028 - 0x000038)
class UTargetSTEDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class UClass*>)                     StatusEffects                                               OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.TargetTagsDamageCondition
/// Size: 0x0048 (0x000028 - 0x000070)
class UTargetTagsDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FGameplayTagQuery)                         tagQuery                                                    OFFSET(getStruct<T>, {0x28, 72, 0, 0})
};

/// Class /Script/FSD.WeakpointDamageCondition
/// Size: 0x0000 (0x000028 - 0x000028)
class UWeakpointDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.DirectDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UDirectDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EDirectDamageConditionEnum)                Type                                                        OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.ClipStatusDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UClipStatusDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   BulletAmount                                                OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      CountBulletsLeft                                            OFFSET(get<bool>, {0x2C, 1, 0, 0})
};

/// Class /Script/FSD.ItemTemperatureDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UItemTemperatureDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   HeatThreshold                                               OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(bool)                                      MustBeUnderThreshold                                        OFFSET(get<bool>, {0x2C, 1, 0, 0})
};

/// Class /Script/FSD.PlayerShieldsDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UPlayerShieldsDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFloatInterval)                            ShieldPercentageRequired                                    OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FSD.PlayerHealthDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UPlayerHealthDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFloatInterval)                            HealthPercentageRequired                                    OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FSD.CooldownDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UCooldownDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/FSD.BoltActionWeaponDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UBoltActionWeaponDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EBoltActionWeaponConditions)               WeaponCondition                                             OFFSET(get<T>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.PlasmaCarbineDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UPlasmaCarbineDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EPlasmaCarbineConditions)                  WeaponCondition                                             OFFSET(get<T>, {0x28, 1, 0, 0})
	DMember(int32_t)                                   Condition                                                   OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Class /Script/FSD.MaterialDamageMultiplierCondition
/// Size: 0x0010 (0x000028 - 0x000038)
class UMaterialDamageMultiplierCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FFloatInterval)                            MultiplierRangeRequired                                     OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Class /Script/FSD.MultiHitscanHitCountDamageCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UMultiHitscanHitCountDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   RequiredHitCount                                            OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Class /Script/FSD.DistanceToTargetDamageCondition
/// Size: 0x0010 (0x000028 - 0x000038)
class UDistanceToTargetDamageCondition : public UDamageCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      TestMaxDistance                                             OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     MinimumDistance                                             OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.DamageEnhancer
/// Size: 0x0090 (0x0002E8 - 0x000378)
class ADamageEnhancer : public AGrenade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(class UBoxComponent*)                      RootCollision                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UHealthComponent*)                   HealthComponent                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               Mesh                                                        OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class USphereComponent*)                   Sphere                                                      OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class UBoxComponent*)                      Box                                                         OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UHitscanComponent*)                  HitscanComponent                                            OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UReflectionHitscanComponent*)        ReflectionHitscanComponent                                  OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UCapsuleHitscanComponent*)           CapsuleHitscanComponent                                     OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(float)                                     EnhanceDamageBy                                             OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     LifetimeMaxDamage                                           OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     EnabledDuration                                             OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     TraceStepTime                                               OFFSET(get<float>, {0x35C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DamageEnhancer.HitByHitScan
	// void HitByHitScan(class UHitscanBaseComponent* Component, FVector& HitPoint, FVector& Origin);                           // [0x182d080] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.DamageEnhancer.Client_CompleteTrace
	// void Client_CompleteTrace(FEnhancedTrace trace);                                                                         // [0x182c470] Final|Net|NetReliableNative|Event|Private|NetClient 
	// Function /Script/FSD.DamageEnhancer.BeginOverlapVsProjectile
	// void BeginOverlapVsProjectile(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x182c250] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.DamageEnhancer.All_PasteHitScanComponent
	// void All_PasteHitScanComponent(class UHitscanBaseComponent* HitScan);                                                    // [0x182c120] Final|Net|NetReliableNative|Event|NetMulticast|Private 
	// Function /Script/FSD.DamageEnhancer.All_PasteDamageComponent
	// void All_PasteDamageComponent(class UDamageComponent* Damage);                                                           // [0x182c090] Final|Net|NetReliableNative|Event|NetMulticast|Private 
};

/// Class /Script/FSD.DamageFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UDamageFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.DamageFunctionLibrary.SetPhysicalMaterialOnHit
	// void SetPhysicalMaterialOnHit(class UFSDPhysicalMaterial* PhysMat, FHitResult& Hit);                                     // [0x182d640] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.DamageFunctionLibrary.IsGibbedDeath
	// bool IsGibbedDeath(TArray<UDamageTag*>& Tags);                                                                           // [0x182d570] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DamageFunctionLibrary.IsExplosiveDeath
	// bool IsExplosiveDeath(class UObject* WorldContext, class UPawnStatsComponent* PawnStats, TArray<UDamageTag*>& Tags);     // [0x182d440] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DamageFunctionLibrary.IsCorrosiveDeath
	// bool IsCorrosiveDeath(class UDamageClass* DamageClass, TArray<UDamageTag*>& Tags);                                       // [0x182d350] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DamageFunctionLibrary.IsCookedDeath
	// bool IsCookedDeath(TArray<UDamageTag*>& Tags);                                                                           // [0x182d2a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DamageFunctionLibrary.IsBurnDeath
	// bool IsBurnDeath(class UDamageClass* DamageClass, TArray<UDamageTag*>& Tags);                                            // [0x182d1b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DamageFunctionLibrary.GetForceFromDamageImpulse
	// FVector GetForceFromDamageImpulse(class AActor*& Target, FDamageData& DamageData);                                       // [0x182cf70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DamageFunctionLibrary.GetDamageImpulse
	// class UDamageImpulse* GetDamageImpulse(FDamageData& DamageData);                                                         // [0x182ced0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.DamageFunctionLibrary.FindClosestBoneIndex
	// int32_t FindClosestBoneIndex(class USkeletalMeshComponent*& Mesh, FVector& Location, class ULimbDismembermentList* dismembermentList, float MaxDistance); // [0x182ccd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DamageFunctionLibrary.FindClosestBone
	// FName FindClosestBone(class USkeletalMeshComponent*& Mesh, FVector& Location, class ULimbDismembermentList* dismembermentList, float MaxDistance); // [0x182cb40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.DamageImpulse
/// Size: 0x0010 (0x000030 - 0x000040)
class UDamageImpulse : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     ImpactForce                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     UpwardForceScale                                            OFFSET(get<float>, {0x34, 4, 0, 0})
	CMember(EImpulseDirectionSource)                   ImpulseSource                                               OFFSET(get<T>, {0x38, 1, 0, 0})
	DMember(bool)                                      ApplyImpulseToWholeBody                                     OFFSET(get<bool>, {0x39, 1, 0, 0})
};

/// Struct /Script/FSD.DamageModifierItem
/// Size: 0x000C (0x000000 - 0x00000C)
class FDamageModifierItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(EDamageUpgrade)                            DamageUpgrade                                               OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Additive                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Multiplicative                                              OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.DamageModifier
/// Size: 0x0018 (0x000030 - 0x000048)
class UDamageModifier : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UDamageCondition*)                   Condition                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<FDamageModifierItem>)               Modifiers                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FSD.DamageSettings
/// Size: 0x0158 (0x000030 - 0x000188)
class UDamageSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	DMember(float)                                     TemperatureChangePerColdDamagePoint                         OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     TemperatureChangePerIceDamagePoint                          OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     TemperatureChangePerHeatDamagePoint                         OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     TemperatureChangePerFireDamagePoint                         OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     TemperatureShockActivationWindow                            OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     FrozenDamageBonus                                           OFFSET(get<float>, {0x44, 4, 0, 0})
	CMember(class UClass*)                             EnemyOnFireStatusEffect                                     OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UClass*)                             PlayerOnFireStatusEffect                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UClass*)                             TemperatureShockFromFrozenStatusEffect                      OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UClass*)                             TemperatureShockFromBurningStatusEffect                     OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(float)                                     InfectionPerDamagePoint                                     OFFSET(get<float>, {0x68, 4, 0, 0})
	CMember(class UDamageComponent*)                   ArmorShatterDamage                                          OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UDamageComponent*)                   ChemicalExplosionDamage                                     OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ArmorShatterEmitter                                         OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class USoundCue*)                          ArmorShatterSound                                           OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(TArray<FDecalData>)                        ImpactDecals                                                OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FRuntimeFloatCurve)                        ArmorToArmorDamageBreakingCurve                             OFFSET(getStruct<T>, {0xA0, 136, 0, 0})
	DMember(float)                                     RadialHealthArmorDamageFalloff                              OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(int32_t)                                   HealthArmorBonesAffectedByRadialDamage                      OFFSET(get<int32_t>, {0x12C, 4, 0, 0})
	CMember(class UDamageTag*)                         DetonateFrozen                                              OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UDamageTag*)                         DetonateOnFire                                              OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class UDamageTag*)                         DirectHit                                                   OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UDamageTag*)                         MeltTarget                                                  OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UDamageTag*)                         CookTarget                                                  OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class UDamageTag*)                         GibTarget                                                   OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UDamageTag*)                         ExplodeOnDeath                                              OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class UDamageTag*)                         IgnoreBodypartDamageReduction                               OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UDamageImpulse*)                     DefaultDamageImpulse                                        OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UDamageImpulse*)                     DoTDamageImpulse                                            OFFSET(get<T>, {0x178, 8, 0, 0})
	DMember(float)                                     RagdollGlobalForceMultiplier                                OFFSET(get<float>, {0x180, 4, 0, 0})
};

/// Struct /Script/FSD.DamageSubsystemItem
/// Size: 0x0020 (0x000000 - 0x000020)
class FDamageSubsystemItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/FSD.DamageSubsystem
/// Size: 0x0030 (0x000030 - 0x000060)
class UDamageSubsystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<FDamageSubsystemItem>)              Items                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.DamageTag
/// Size: 0x0000 (0x000030 - 0x000030)
class UDamageTag : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FSD.DanceItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FDanceItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAnimSequence*)                      danceMove                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UAnimSequence*)                      DanceMoveWithBeer                                           OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.DanceSettings
/// Size: 0x0010 (0x000030 - 0x000040)
class UDanceSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FDanceItem>)                        DanceMoves                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.DashPoints
/// Size: 0x0120 (0x0000B0 - 0x0001D0)
class UDashPoints : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FMulticastInlineDelegate)                  OnStartDashEvent                                            OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStopDashEvent                                             OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FVector_NetQuantize)                       DashLocation                                                OFFSET(getStruct<T>, {0xDC, 12, 0, 0})
	SMember(FRuntimeFloatCurve)                        DashSpeedCurve                                              OFFSET(getStruct<T>, {0xF8, 136, 0, 0})
	DMember(float)                                     PointOffset                                                 OFFSET(get<float>, {0x198, 4, 0, 0})
	DMember(float)                                     MaxRangeFromPlayer                                          OFFSET(get<float>, {0x19C, 4, 0, 0})
	DMember(float)                                     MinRangeFromPlayer                                          OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     MinHeightAboveTarget                                        OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(float)                                     MaxHeightAboveTarget                                        OFFSET(get<float>, {0x1A8, 4, 0, 0})
	DMember(float)                                     safeReduction                                               OFFSET(get<float>, {0x1AC, 4, 0, 0})
	DMember(float)                                     AcceptedDashradius                                          OFFSET(get<float>, {0x1B0, 4, 0, 0})
	DMember(float)                                     DashSpeed                                                   OFFSET(get<float>, {0x1B4, 4, 0, 0})
	DMember(float)                                     SlowdownRadius                                              OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(int32_t)                                   IgnoreTheClosestPoints                                      OFFSET(get<int32_t>, {0x1C8, 4, 0, 0})
	CMember(EDashPointsGenerationMode)                 GenerationMode                                              OFFSET(get<T>, {0x1CC, 1, 0, 0})
	DMember(bool)                                      IsDashing                                                   OFFSET(get<bool>, {0x1CD, 1, 0, 0})
	DMember(bool)                                      IgnoreRules                                                 OFFSET(get<bool>, {0x1CE, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DashPoints.UpdateDashPointData
	// void UpdateDashPointData();                                                                                              // [0x1830e20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DashPoints.StopDashing
	// void StopDashing();                                                                                                      // [0x1830e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DashPoints.StartDashing
	// void StartDashing();                                                                                                     // [0x1830de0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DashPoints.OnRep_Dashing
	// void OnRep_Dashing();                                                                                                    // [0x1830da0] Final|Native|Public  
	// Function /Script/FSD.DashPoints.OnParentDeath
	// void OnParentDeath(class UHealthComponentBase* Health);                                                                  // [0x1830cf0] Final|Native|Protected 
	// Function /Script/FSD.DashPoints.GetDashPoint
	// FVector GetDashPoint(class AActor* fromTarget, bool& success);                                                           // [0x18309d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.DataDepositObjective
/// Size: 0x0038 (0x000180 - 0x0001B8)
class UDataDepositObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	CMember(TSoftObjectPtr<class UClass*>)             TowerClass                                                  OFFSET(get<T>, {0x180, 40, 0, 0})
	CMember(class UDebrisPositioning*)                 DebrisPositioning                                           OFFSET(get<T>, {0x1A8, 8, 0, 0})
	DMember(bool)                                      Complete                                                    OFFSET(get<bool>, {0x1B0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DataDepositObjective.OnRep_Complete
	// void OnRep_Complete();                                                                                                   // [0x1830d80] Final|Native|Protected 
	// Function /Script/FSD.DataDepositObjective.OnHackingProgressChange
	// void OnHackingProgressChange(float Progress);                                                                            // [0x1830c70] Final|Native|Protected 
};

/// Class /Script/FSD.DeadStateComponent
/// Size: 0x0008 (0x000100 - 0x000108)
class UDeadStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(float)                                     respawnDelay                                                OFFSET(get<float>, {0x100, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DeadStateComponent.SetDeathParameters
	// void SetDeathParameters(float respawnDelay, float effectDelay, class UAnimMontage* deathMontage, class UParticleSystem* deathEffect, bool useAnimationTimeAsRespawnTime); // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.DealWidget
/// Size: 0x0000 (0x000260 - 0x000260)
class UDealWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:


	/// Functions
	// Function /Script/FSD.DealWidget.UpdateDealText
	// void UpdateDealText();                                                                                                   // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.DeathComponent
/// Size: 0x0140 (0x0000B0 - 0x0001F0)
class UDeathComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(class UClass*)                             CrossbowChemicalExplosionStatusEffect                       OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UClass*)                             PlasmaExplosionStatusEffect                                 OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UClass*)                             PlasmaExplosionDOTStatusEffect                              OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     GibParticles                                                OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UStaticMesh*)                        GoreMesh                                                    OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(TArray<FName>)                             HeadGoreBoneNames                                           OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(class UFXSystemAsset*)                     deathParticles                                              OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     BloodSquirtParticles                                        OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     HeadshotParticles                                           OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     FrozenDeathParticles                                        OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     CorrosiveDeathParticles                                     OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     CookedDeathParticles                                        OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ChemicalExplosionDeathParticles                             OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UMaterialInstance*)                  DeathSplatDecal                                             OFFSET(get<T>, {0x120, 8, 0, 0})
	DMember(float)                                     DeathSplatDecalSize                                         OFFSET(get<float>, {0x128, 4, 0, 0})
	CMember(class USoundCue*)                          deathSound                                                  OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class USoundCue*)                          HeadshotGibsSound                                           OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class USoundCue*)                          BurnDeathSound                                              OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class USoundCue*)                          CorrosiveDeathSound                                         OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class USoundCue*)                          CookedDeathSound                                            OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class USoundCue*)                          ChemicalExplosionPreDeathSound                              OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class USoundCue*)                          ChemicalExplosionDeathSound                                 OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class USoundCue*)                          DeathSplatSound                                             OFFSET(get<T>, {0x168, 8, 0, 0})
	DMember(float)                                     DissolveDelay                                               OFFSET(get<float>, {0x170, 4, 0, 0})
	CMember(class UMaterialInstance*)                  DissolveBaseShader                                          OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class UMaterialInstance*)                  DissolveBaseShaderElite                                     OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class UMaterialInstance*)                  BurnBaseShader                                              OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class UMaterialInstance*)                  BurnBaseShaderElite                                         OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(class UMaterialInstance*)                  CorrosiveBaseShader                                         OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class UMaterialInstance*)                  CorrosiveBaseShaderElite                                    OFFSET(get<T>, {0x1A0, 8, 0, 0})
	SMember(FLinearColor)                              BurnColor                                                   OFFSET(getStruct<T>, {0x1A8, 16, 0, 0})
	DMember(bool)                                      RagdollEnabled                                              OFFSET(get<bool>, {0x1B8, 1, 0, 0})
	CMember(class UClass*)                             CameraShake                                                 OFFSET(get<T>, {0x1C0, 8, 0, 0})
	DMember(float)                                     DeathDuration                                               OFFSET(get<float>, {0x1C8, 4, 0, 0})
	CMember(EDeathType)                                DeathType                                                   OFFSET(get<T>, {0x1CC, 1, 0, 0})
	CMember(class UStaticMeshComponent*)               HeadGoreMesh                                                OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             SkeletalMesh                                                OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(class AEnemyDeepPathfinderCharacter*)      PFCharacter                                                 OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(class USpiderAnimInstance*)                AnimInstance                                                OFFSET(get<T>, {0x1E8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DeathComponent.OnRep_DeathType
	// void OnRep_DeathType();                                                                                                  // [0x1830dc0] Final|Native|Protected 
	// Function /Script/FSD.DeathComponent.OnDeathDetailed
	// void OnDeathDetailed(class UHealthComponent* HealthComponent, float damageAmount, FDamageData& DamageData, TArray<UDamageTag*>& Tags); // [0x1830ac0] Final|Native|Private|HasOutParms 
	// Function /Script/FSD.DeathComponent.CreateHeadGore
	// class UStaticMeshComponent* CreateHeadGore();                                                                            // [0x18309a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FSD.DeathComponent.AllRagdoll
	// void AllRagdoll(FVector Impulse, FVector Location, int32_t BoneIndex);                                                   // [0x1830860] Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults 
};

/// Class /Script/FSD.FSDDebrisSettings
/// Size: 0x0030 (0x000038 - 0x000068)
class UFSDDebrisSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FSoftObjectPath)                           DefaultInfluencerDensityCurve                               OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FSoftObjectPath)                           DefaultInfluencerSizeCurve                                  OFFSET(getStruct<T>, {0x50, 24, 0, 0})
};

/// Struct /Script/FSD.CellNoise
/// Size: 0x002C (0x000000 - 0x00002C)
class FCellNoise : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FVector)                                   CellSize                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	DMember(int32_t)                                   NumValues                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MinCellValue                                                OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   MaxCellValue                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.DebrisCellNoiseParameters
/// Size: 0x0010 (0x000000 - 0x000010)
class FDebrisCellNoiseParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UDebrisCellNoise*)                   Noise                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   MinCellValue                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   MaxCellValue                                                OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.CSGTriangleMapper
/// Size: 0x00A0 (0x000030 - 0x0000D0)
class UCSGTriangleMapper : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(class UTerrainMaterial*)                   AttachToMaterial                                            OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<class UTerrainType*>)               AttachToTypes                                               OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   CellCategories                                              OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(float)                                     DensityInM2                                                 OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     MinVerticalAngle                                            OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     MaxVerticalAngle                                            OFFSET(get<float>, {0x5C, 4, 0, 0})
	SMember(FVector)                                   ScaleMin                                                    OFFSET(getStruct<T>, {0x60, 12, 0, 0})
	SMember(FVector)                                   ScaleMax                                                    OFFSET(getStruct<T>, {0x6C, 12, 0, 0})
	DMember(float)                                     ScaleBias                                                   OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(bool)                                      IndependentScaleAxes                                        OFFSET(get<bool>, {0x7C, 1, 0, 0})
	SMember(FVector)                                   BaseNormal                                                  OFFSET(getStruct<T>, {0x80, 12, 0, 0})
	DMember(float)                                     SurfaceNormalFactor                                         OFFSET(get<float>, {0x8C, 4, 0, 0})
	SMember(FVector)                                   SurfaceNormalLimiter                                        OFFSET(getStruct<T>, {0x90, 12, 0, 0})
	DMember(float)                                     RandomNormalFactor                                          OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     RotationMinAngle                                            OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     RotationMaxAngle                                            OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     PosOffset                                                   OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     PosOffsetSurface                                            OFFSET(get<float>, {0xAC, 4, 0, 0})
	CMember(TArray<FCellNoise>)                        NoiseLayers                                                 OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FDebrisCellNoiseParameters)                CellNoiseParameters                                         OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
};

/// Class /Script/FSD.DebrisBase
/// Size: 0x0128 (0x0000D0 - 0x0001F8)
class UDebrisBase : public UCSGTriangleMapper
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	CMember(class UObject*)                            CaveInfluencer                                              OFFSET(get<T>, {0xD0, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        InfluencerDensityCurve                                      OFFSET(getStruct<T>, {0xD8, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        InfluencerSizeCurve                                         OFFSET(getStruct<T>, {0x160, 136, 0, 0})
	CMember(class UCurveFloat*)                        CaveInfluenceCurve                                          OFFSET(get<T>, {0x1E8, 8, 0, 0})
	CMember(class UCurveFloat*)                        CaveInflunceSizeCurve                                       OFFSET(get<T>, {0x1F0, 8, 0, 0})
};

/// Struct /Script/FSD.DebrisInfluence
/// Size: 0x0010 (0x000000 - 0x000010)
class FDebrisInfluence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UObject*)                            CaveInfluencer                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.DebrisCarved
/// Size: 0x0058 (0x0001F8 - 0x000250)
class UDebrisCarved : public UDebrisBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(EDebrisCarvedType)                         CarverType                                                  OFFSET(get<T>, {0x1F8, 1, 0, 0})
	CMember(TArray<FUDebrisCarveMesh>)                 Meshes                                                      OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(class UTerrainMaterial*)                   TerrainMaterial                                             OFFSET(get<T>, {0x210, 8, 0, 0})
	SMember(FDebrisInfluence)                          CaveInfluenceToAdd                                          OFFSET(getStruct<T>, {0x218, 16, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x228, 1, 0, 0})
	DMember(float)                                     ExpensiveNoise                                              OFFSET(get<float>, {0x22C, 4, 0, 0})
	CMember(CarveOptionsCellSize)                      CarveCellSize                                               OFFSET(get<T>, {0x230, 1, 0, 0})
	DMember(int32_t)                                   MinNumCarves                                                OFFSET(get<int32_t>, {0x234, 4, 0, 0})
	DMember(int32_t)                                   MaxNumCarves                                                OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	DMember(float)                                     CarveOffsetRadius                                           OFFSET(get<float>, {0x23C, 4, 0, 0})
	CMember(class UClass*)                             SpawnAttachClass                                            OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     AttachSpawnOffsetDistance                                   OFFSET(get<float>, {0x248, 4, 0, 0})
};

/// Class /Script/FSD.DebrisActorComponent
/// Size: 0x0008 (0x0001F8 - 0x000200)
class UDebrisActorComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0x1FC, 1, 0, 0})
};

/// Struct /Script/FSD.DebrisItemActorItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FDebrisItemActorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Probability                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.DebrisItemComponent
/// Size: 0x0040 (0x000200 - 0x000240)
class UDebrisItemComponent : public UDebrisActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UDebrisPositioning*)                 Debris                                                      OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(TArray<FDebrisItemActorItem>)              Actors                                                      OFFSET(get<T>, {0x208, 16, 0, 0})
	CMember(EDebrisItemPass)                           ItemPass                                                    OFFSET(get<T>, {0x218, 1, 0, 0})
	DMember(float)                                     InfluenceRange                                              OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(float)                                     MinDistanceToImportantLocations                             OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(bool)                                      UseAmount                                                   OFFSET(get<bool>, {0x224, 1, 0, 0})
	SMember(FIRandRange)                               amount                                                      OFFSET(getStruct<T>, {0x228, 8, 0, 0})
	DMember(int32_t)                                   AmountSearchMultiplier                                      OFFSET(get<int32_t>, {0x230, 4, 0, 0})
};

/// Class /Script/FSD.DebrisDataComponent
/// Size: 0x0010 (0x000200 - 0x000210)
class UDebrisDataComponent : public UDebrisActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(class UDebrisBase*)                        Debris                                                      OFFSET(get<T>, {0x200, 8, 0, 0})
};

/// Class /Script/FSD.DebrisVeinComponent
/// Size: 0x0020 (0x000200 - 0x000220)
class UDebrisVeinComponent : public UDebrisActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	CMember(class UTerrainMaterial*)                   Material                                                    OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(EDebrisCarvedType)                         CarverType                                                  OFFSET(get<T>, {0x208, 1, 0, 0})
	CMember(class UVeinResourceCreator*)               VeinCreator                                                 OFFSET(get<T>, {0x210, 8, 0, 0})
};

/// Class /Script/FSD.InfluencerComponent
/// Size: 0x0110 (0x000200 - 0x000310)
class UInfluencerComponent : public UDebrisActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	SMember(FRuntimeFloatCurve)                        ProbabilityCurve                                            OFFSET(getStruct<T>, {0x200, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        ScaleCurve                                                  OFFSET(getStruct<T>, {0x288, 136, 0, 0})
};

/// Class /Script/FSD.DebrisProbabilityComponent
/// Size: 0x0010 (0x000200 - 0x000210)
class UDebrisProbabilityComponent : public UDebrisActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	SMember(FRandRange)                                ProbabilityRange                                            OFFSET(getStruct<T>, {0x200, 8, 0, 0})
	DMember(bool)                                      IsProbabilityShared                                         OFFSET(get<bool>, {0x208, 1, 0, 0})
};

/// Class /Script/FSD.DebrisDataActor
/// Size: 0x0018 (0x000220 - 0x000238)
class ADebrisDataActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Class /Script/FSD.DebrisInstances
/// Size: 0x00D8 (0x000678 - 0x000750)
class UDebrisInstances : public UHierarchicalInstancedStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1872;

public:
	CMember(class UDebrisBase*)                        DebrisBase                                                  OFFSET(get<T>, {0x678, 8, 0, 0})
	DMember(int32_t)                                   DebrisIndex                                                 OFFSET(get<int32_t>, {0x684, 4, 0, 0})
};

/// Class /Script/FSD.DebrisLocationFinder
/// Size: 0x0090 (0x000220 - 0x0002B0)
class ADebrisLocationFinder : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	SMember(FMulticastInlineDelegate)                  OnFailedDelegate                                            OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSuceesDelegate                                            OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UTerrainPlacementComponent*)         terrainPlacement                                            OFFSET(get<T>, {0x248, 8, 0, 0})
	DMember(float)                                     MinRadius                                                   OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     MaxRadius                                                   OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     MaxExtraRadius                                              OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     MinDistanceToImportantRadius                                OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(int32_t)                                   MaxIteration                                                OFFSET(get<int32_t>, {0x260, 4, 0, 0})
	DMember(int32_t)                                   MaxChunksPerFrame                                           OFFSET(get<int32_t>, {0x264, 4, 0, 0})
	DMember(bool)                                      DestroyOnFinish                                             OFFSET(get<bool>, {0x268, 1, 0, 0})
	DMember(bool)                                      StopAtEnoughMatches                                         OFFSET(get<bool>, {0x26A, 1, 0, 0})
};

/// Struct /Script/FSD.DebrisStaticMesh
/// Size: 0x0058 (0x000000 - 0x000058)
class FDebrisStaticMesh : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UStaticMesh*)                        Mesh                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UMaterialInterface*)                 Material                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(EDebrisMeshCollisionProfile)               CollisionProfile                                            OFFSET(get<T>, {0x10, 1, 0, 0})
	DMember(float)                                     Probablity                                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(class USoundCue*)                          DestroyedSound                                              OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     DestroyedParticles                                          OFFSET(get<T>, {0x20, 8, 0, 0})
	SMember(FDecalData)                                Decal                                                       OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	DMember(bool)                                      Fragile                                                     OFFSET(get<bool>, {0x48, 1, 0, 0})
	CMember(EDebrisMeshShadows)                        CastShadows                                                 OFFSET(get<T>, {0x49, 1, 0, 0})
	DMember(bool)                                      Durable                                                     OFFSET(get<bool>, {0x4A, 1, 0, 0})
	DMember(int32_t)                                   SpecialDebrisType                                           OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(bool)                                      SpawnWhenCarving                                            OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(bool)                                      OnlySpawnWhenCarving                                        OFFSET(get<bool>, {0x51, 1, 0, 0})
};

/// Class /Script/FSD.DebrisMesh
/// Size: 0x0060 (0x0001F8 - 0x000258)
class UDebrisMesh : public UDebrisBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(TArray<FDebrisStaticMesh>)                 Meshes                                                      OFFSET(get<T>, {0x1F8, 16, 0, 0})
	CMember(class UMaterialInterface*)                 CommonMaterial                                              OFFSET(get<T>, {0x208, 8, 0, 0})
	SMember(FText)                                     InGameName                                                  OFFSET(getStruct<T>, {0x210, 24, 0, 0})
	SMember(FName)                                     GemTrackerName                                              OFFSET(getStruct<T>, {0x228, 8, 0, 0})
	SMember(FText)                                     InGameDescription                                           OFFSET(getStruct<T>, {0x230, 24, 0, 0})
	DMember(float)                                     StartCullDistance                                           OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     EndCullDistance                                             OFFSET(get<float>, {0x24C, 4, 0, 0})
};

/// Class /Script/FSD.DebrisCellNoise
/// Size: 0x0028 (0x000030 - 0x000058)
class UDebrisCellNoise : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FVector)                                   CellSize                                                    OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	DMember(int32_t)                                   NumValues                                                   OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	SMember(FVector)                                   InvCellSize                                                 OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	DMember(bool)                                      Initialized                                                 OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/FSD.DebrisPositioning
/// Size: 0x0000 (0x0001F8 - 0x0001F8)
class UDebrisPositioning : public UDebrisBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
};

/// Class /Script/FSD.DebrisSet
/// Size: 0x0010 (0x000030 - 0x000040)
class UDebrisSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<TWeakObjectPtr<UDebrisBase*>>)      Debris                                                      OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FSD.UDebrisStaticCarveMesh
/// Size: 0x0010 (0x000000 - 0x000010)
class FUDebrisStaticCarveMesh : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UStaticMeshCarver*)                  Mesh                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Probablity                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.DebrisStaticCarved
/// Size: 0x0048 (0x0001F8 - 0x000240)
class UDebrisStaticCarved : public UDebrisBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(EDebrisCarvedType)                         CarverType                                                  OFFSET(get<T>, {0x1F8, 1, 0, 0})
	CMember(TArray<FUDebrisStaticCarveMesh>)           Meshes                                                      OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(class UTerrainMaterial*)                   TerrainMaterial                                             OFFSET(get<T>, {0x210, 8, 0, 0})
	SMember(FDebrisInfluence)                          CaveInfluenceToAdd                                          OFFSET(getStruct<T>, {0x218, 16, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x228, 1, 0, 0})
	DMember(float)                                     CarveOffsetRadius                                           OFFSET(get<float>, {0x22C, 4, 0, 0})
	CMember(class UClass*)                             SpawnAttachClass                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(float)                                     AttachSpawnOffsetDistance                                   OFFSET(get<float>, {0x238, 4, 0, 0})
};

/// Class /Script/FSD.CustomItemPlacementHandling
/// Size: 0x0000 (0x000028 - 0x000028)
class UCustomItemPlacementHandling : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.InfluencerSpawnComponent
/// Size: 0x0018 (0x0001F8 - 0x000210)
class UInfluencerSpawnComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	CMember(class UCaveInfluencer*)                    Influencer                                                  OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0x200, 4, 0, 0})
};

/// Class /Script/FSD.DecalManager
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UDecalManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FSD.DecalManager.SpawnDecal
	// void SpawnDecal(FVector& Location, FVector& Normal, class UFSDPhysicalMaterial* PhysMat);                                // [0x1836470] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/FSD.DebrisWhenCarving
/// Size: 0x0030 (0x000000 - 0x000030)
class FDebrisWhenCarving : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UDebrisInstances*)                   Debris                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FSD.RuntimeSpawnedDebris
/// Size: 0x0040 (0x000000 - 0x000040)
class FRuntimeSpawnedDebris : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UDebrisInstances*>)           DebrisInstances                                             OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(class UDebrisMesh*)                        DebrisMesh                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/FSD.GrenadeExplodeOperationData
/// Size: 0x0038 (0x000000 - 0x000038)
class FGrenadeExplodeOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FVector)                                   HitPos                                                      OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   Normal                                                      OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(float)                                     NormalOffset                                                OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     NormalSqueeze                                               OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     Noise                                                       OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     BurnThickness                                               OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(bool)                                      UseBulletBurntMaterial                                      OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      DissolvePlatforms                                           OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(uint32_t)                                  OverrideBurntMaterialHandle                                 OFFSET(get<uint32_t>, {0x34, 4, 0, 0})
};

/// Struct /Script/FSD.CarveWithColliderOperationData
/// Size: 0x0070 (0x000000 - 0x000070)
class FCarveWithColliderOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(class UStaticMesh*)                        StaticMesh                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   Material                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(ECarveFilterType)                          CarveFilter                                                 OFFSET(get<T>, {0x18, 1, 0, 0})
	SMember(FMatrixWithExactSync)                      Transform                                                   OFFSET(getStruct<T>, {0x1C, 64, 0, 0})
	CMember(class ULevelGenerationCarverComponent*)    LevelGenerationComponent                                    OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(float)                                     ExpensiveNoise                                              OFFSET(get<float>, {0x68, 4, 0, 0})
	CMember(EPreciousMaterialOptions)                  Precious                                                    OFFSET(get<T>, {0x6C, 1, 0, 0})
	CMember(CarveOptionsCellSize)                      CarveCellSize                                               OFFSET(get<T>, {0x6D, 1, 0, 0})
};

/// Struct /Script/FSD.CarveWithSTLMeshOperationData
/// Size: 0x0070 (0x000000 - 0x000070)
class FCarveWithSTLMeshOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(class USTLMeshCarver*)                     STLMeshCarver                                               OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UStaticMeshCarver*)                  StaticMeshCarver                                            OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   Material                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(ECarveFilterType)                          CarveFilter                                                 OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(EPreciousMaterialOptions)                  Precious                                                    OFFSET(get<T>, {0x21, 1, 0, 0})
	SMember(FMatrixWithExactSync)                      Transform                                                   OFFSET(getStruct<T>, {0x24, 64, 0, 0})
	CMember(class ULevelGenerationCarverComponent*)    LevelGenerationComponent                                    OFFSET(get<T>, {0x68, 8, 0, 0})
};

/// Struct /Script/FSD.PickaxeDigOperationData
/// Size: 0x0028 (0x000000 - 0x000028)
class FPickaxeDigOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FVector)                                   HitPos                                                      OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   Dir                                                         OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(float)                                     DigSize                                                     OFFSET(get<float>, {0x1C, 4, 0, 0})
	CMember(class AActor*)                             Miner                                                       OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FSD.RemoveFloatingIslandOperationData
/// Size: 0x0004 (0x000000 - 0x000004)
class FRemoveFloatingIslandOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FSD.DrillOperationData
/// Size: 0x002C (0x000000 - 0x00002C)
class FDrillOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FVector)                                   HitPos                                                      OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   Dir                                                         OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector)                                   CarveSize                                                   OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	DMember(float)                                     CarveNoise                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FSD.MeltOperationData
/// Size: 0x0020 (0x000000 - 0x000020)
class FMeltOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FVector>)                           Points                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.SplineSegmentCarveOperationData
/// Size: 0x0030 (0x000000 - 0x000030)
class FSplineSegmentCarveOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FCarveSplineSegment>)               Segments                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(class UTerrainMaterial*)                   Material                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(ECarveFilterType)                          CarveFilter                                                 OFFSET(get<T>, {0x20, 1, 0, 0})
	CMember(EPreciousMaterialOptions)                  Precious                                                    OFFSET(get<T>, {0x21, 1, 0, 0})
	CMember(class ULevelGenerationCarverComponent*)    LevelGenerationComponent                                    OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FSD.CSGBuildOperationData
/// Size: 0x0060 (0x000000 - 0x000060)
class FCSGBuildOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(class UClass*)                             CSGModel                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FBakeSettings)                             CarverSettings                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FMatrixWithExactSync)                      Transform                                                   OFFSET(getStruct<T>, {0x20, 64, 0, 0})
};

/// Struct /Script/FSD.TerrainSpawnDebrisOperationData
/// Size: 0x0020 (0x000000 - 0x000020)
class FTerrainSpawnDebrisOperationData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   OperationNumber                                             OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Pos                                                         OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(class UDebrisMesh*)                        Debris                                                      OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FSD.TerrainLateJoinData
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FTerrainLateJoinData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<FGrenadeExplodeOperationData>)      Explosions                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FCarveWithColliderOperationData>)   ColliderCarves                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FCarveWithSTLMeshOperationData>)    MeshCarves                                                  OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FPickaxeDigOperationData>)          PickAxe                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FRemoveFloatingIslandOperationData>) RemoveFloating                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FDrillOperationData>)               Drills                                                      OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FMeltOperationData>)                Melts                                                       OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FSplineSegmentCarveOperationData>)  Splines                                                     OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FCSGBuildOperationData>)            CSGBuilds                                                   OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FTerrainSpawnDebrisOperationData>)  SpawnDebris                                                 OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<int32_t>)                           DebrisInstanceComponentPairs                                OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<uint32_t>)                          VisibleChunks                                               OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(int32_t)                                   OperationCount                                              OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
};

/// Class /Script/FSD.DeepCSGWorld
/// Size: 0x0650 (0x000220 - 0x000870)
class ADeepCSGWorld : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2160;

public:
	CMember(class UTerrainMaterial*)                   DebugCarveInsideTerrainMaterial                             OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   DebugCarveOutsizeTerrainMaterial                            OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   DebugCarveEdgeTerrainMaterial                               OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   GoldTerrainMaterial                                         OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   MOMTerrrainMaterial                                         OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   NitraTerrrainMaterial                                       OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   EmptyTerrainMaterial                                        OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   DefaultBurntTerrainMaterial                                 OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   DefaultHardRockMaterial                                     OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   DefaultBedRockMaterial                                      OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UTerrainType*)                       GoldTerrainType                                             OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTerrainType*)                       MOMTerrainType                                              OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UTerrainType*)                       RockTerrainType                                             OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UTerrainType*)                       CrystalTerrainType                                          OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UTerrainType*)                       EmptyTerrainType                                            OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UTerrainType*)                       DirtTerrainType                                             OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UTerrainType*)                       DefaultBurntTerrainType                                     OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UTerrainMaterialsCollection*)        TerrainMaterials                                            OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(TArray<class UDebrisSet*>)                 StandardDebrisSets                                          OFFSET(get<T>, {0x2B8, 16, 0, 0})
	CMember(TArray<class UDebrisBase*>)                DebrisLevelGenerationCarved                                 OFFSET(get<T>, {0x2C8, 16, 0, 0})
	CMember(TArray<class UDebrisBase*>)                DebrisLargeCarved                                           OFFSET(get<T>, {0x2D8, 16, 0, 0})
	CMember(TArray<class UDebrisBase*>)                DebrisSmallCarved                                           OFFSET(get<T>, {0x2E8, 16, 0, 0})
	CMember(TArray<class UDebrisBase*>)                DebrisMeshes                                                OFFSET(get<T>, {0x2F8, 16, 0, 0})
	CMember(class UMaterialInterface*)                 DefaultScannerMaterial                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UClass*)                             TestLevelCarver                                             OFFSET(get<T>, {0x310, 8, 0, 0})
	SMember(FBox)                                      TestLevelCarverBoundingBox                                  OFFSET(getStruct<T>, {0x318, 28, 0, 0})
	CMember(class ADebrisDataActor*)                   DebrisActorInstance                                         OFFSET(get<T>, {0x338, 8, 0, 0})
	DMember(int32_t)                                   DebrisActorIndex                                            OFFSET(get<int32_t>, {0x340, 4, 0, 0})
	CMember(class AProceduralSetup*)                   ProceduralSetup                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(TArray<class UObject*>)                    TerrainMaterialAssets                                       OFFSET(get<T>, {0x350, 16, 0, 0})
	CMember(class UAsyncPathRequests*)                 AsyncPathRequests                                           OFFSET(get<T>, {0x398, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBaseLayerCommitDone                                       OFFSET(getStruct<T>, {0x3A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBaseLayerFinalCommitDone                                  OFFSET(getStruct<T>, {0x3B0, 16, 0, 0})
	CMember(TArray<class AActor*>)                     TerrainAttachedActors                                       OFFSET(get<T>, {0x3C0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UObject*>>)          TerrainListeners                                            OFFSET(get<T>, {0x3D0, 16, 0, 0})
	CMember(TArray<class UDebrisBase*>)                RegisteredDebrisList                                        OFFSET(get<T>, {0x3E0, 16, 0, 0})
	CMember(TArray<FDebrisWhenCarving>)                DebrisWhenCarvingList                                       OFFSET(get<T>, {0x3F0, 16, 0, 0})
	CMember(TArray<class UDebrisInstances*>)           DebrisInstanceList                                          OFFSET(get<T>, {0x400, 16, 0, 0})
	CMember(TArray<FRuntimeSpawnedDebris>)             RuntimeSpawnedDebris                                        OFFSET(get<T>, {0x410, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UPrimitiveComponent*>>) ShowAlwaysScannerComponents                              OFFSET(get<T>, {0x420, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UPrimitiveComponent*>>) FogOfWarScannerComponents                                OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(TArray<class UDebrisBase*>)                DebrisHandles                                               OFFSET(get<T>, {0x440, 16, 0, 0})
	CMember(TArray<FVector>)                           PointsToIncludeInBoudingSphere                              OFFSET(get<T>, {0x450, 16, 0, 0})
	SMember(FTerrainLateJoinData)                      LateJoinData                                                OFFSET(getStruct<T>, {0x720, 200, 0, 0})
	CMember(TArray<FEncodedChunkId>)                   VisibleChunks                                               OFFSET(get<T>, {0x7E8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepCSGWorld.UnRegisterScannerComponent
	// void UnRegisterScannerComponent(class UPrimitiveComponent* Component);                                                   // [0x1836d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_SpawnDebris
	// void TerrainOp_SpawnDebris(FTerrainSpawnDebrisOperationData Data);                                                       // [0x1836cc0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_RemoveFloating
	// void TerrainOp_RemoveFloating(FRemoveFloatingIslandOperationData Data);                                                  // [0x1836c30] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_PickAxe
	// void TerrainOp_PickAxe(FPickaxeDigOperationData Data);                                                                   // [0x1836b70] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_Melt
	// void TerrainOp_Melt(FMeltOperationData Data);                                                                            // [0x1836ac0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_Explode
	// void TerrainOp_Explode(FGrenadeExplodeOperationData Data);                                                               // [0x18369f0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_Drill
	// void TerrainOp_Drill(FDrillOperationData Data);                                                                          // [0x1836930] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_CarveSTLMesh
	// void TerrainOp_CarveSTLMesh(FCarveWithSTLMeshOperationData Data);                                                        // [0x18367a0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_CarveSplineSegment
	// void TerrainOp_CarveSplineSegment(FSplineSegmentCarveOperationData Data);                                                // [0x1836880] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_CarveCSG
	// void TerrainOp_CarveCSG(FCSGBuildOperationData Data);                                                                    // [0x18365c0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainOp_CarveCollider
	// void TerrainOp_CarveCollider(FCarveWithColliderOperationData Data);                                                      // [0x18366b0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.TerrainMaterialDataLoaded
	// void TerrainMaterialDataLoaded();                                                                                        // [0x18365a0] Final|Native|Protected 
	// Function /Script/FSD.DeepCSGWorld.SpawnDebris
	// void SpawnDebris(class UDebrisMesh* Debris, FVector& Pos, float Radius);                                                 // [0x1836350] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.SetVisibleToScanner
	// void SetVisibleToScanner(FVector& Center, FVector& range);                                                               // [0x1836270] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.SetRockMaterialForTest
	// void SetRockMaterialForTest(class UTerrainMaterial* Material);                                                           // [0x18361e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.SelectDebrisSettings
	// void SelectDebrisSettings();                                                                                             // [0x18361c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.ResetEntireWorld
	// void ResetEntireWorld();                                                                                                 // [0x18361a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.RemoveDebrisInstance_TerrainOp2
	// void RemoveDebrisInstance_TerrainOp2(int32_t instance, int32_t Component);                                               // [0x18360d0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.DeepCSGWorld.RemoveDebrisInSphere
	// void RemoveDebrisInSphere(FVector& Position, float Radius, bool onlyFragile, bool alsoDurable, ESpecialDebrisType onlyType); // [0x1835f00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.RegisterScannerComponent
	// void RegisterScannerComponent(class UPrimitiveComponent* Component, bool useFogOfWar);                                   // [0x1835e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.Raycast
	// bool Raycast(FVector Start, FVector Direction, float MaxDistance, FCSGRaycastHitInfo& HitInfo, ELandscapeCellFilter Filter); // [0x1835c40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepCSGWorld.Linecast
	// bool Linecast(FVector Start, FVector End, FCSGRaycastHitInfo& HitInfo, ELandscapeCellFilter Filter);                     // [0x1835a90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepCSGWorld.IsPositionVisibleToScanner
	// bool IsPositionVisibleToScanner(FVector& Pos);                                                                           // [0x18359f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepCSGWorld.IsPointInsideTerrain
	// bool IsPointInsideTerrain(FVector& Pos);                                                                                 // [0x1835950] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepCSGWorld.IsComponentRegisteredWithScanner
	// bool IsComponentRegisteredWithScanner(class UPrimitiveComponent* Component);                                             // [0x18358b0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DeepCSGWorld.InitialGenerationDone
	// bool InitialGenerationDone();                                                                                            // [0x1835880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepCSGWorld.GetTerrainHash
	// int32_t GetTerrainHash();                                                                                                // [0x1835850] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DeepCSGWorld.GetShadowQuality
	// int32_t GetShadowQuality();                                                                                              // [0x1835820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DeepCSGWorld.GetDebrisDataActor
	// class ADebrisDataActor* GetDebrisDataActor();                                                                            // [0x18357f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepCSGWorld.GetAllTerrainActorsAroundPoint
	// void GetAllTerrainActorsAroundPoint(FVector& Center, FVector& range, TArray<AActor*>& TerrainActors);                    // [0x1835690] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.GenerateAllMeshes
	// void GenerateAllMeshes();                                                                                                // [0x1835670] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.FinishGeneration_Blocking
	// void FinishGeneration_Blocking();                                                                                        // [0x1835650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.FindTotalVolumeOfMaterialInWorld
	// float FindTotalVolumeOfMaterialInWorld(class UTerrainMaterial* Material);                                                // [0x18355b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithSTLMeshUsingTransform_Wait
	// void CarveWithSTLMeshUsingTransform_Wait(class ADeepCSGWorld* CSGWorld, class USTLMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FTransform& Transform, EPreciousMaterialOptions Precious, FLatentActionInfo LatentInfo); // [0x1834550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithSTLMeshUsingTransform
	// void CarveWithSTLMeshUsingTransform(class USTLMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FTransform& Transform, EPreciousMaterialOptions Precious); // [0x1834350] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithSTLMesh_Wait
	// void CarveWithSTLMesh_Wait(class ADeepCSGWorld* CSGWorld, class USTLMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FVector Pos, FQuat Orientation, FVector Scale, EPreciousMaterialOptions Precious, FLatentActionInfo LatentInfo); // [0x18347e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithSTLMesh
	// void CarveWithSTLMesh(class USTLMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FVector Pos, FQuat Orientation, FVector Scale, EPreciousMaterialOptions Precious); // [0x1834110] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithStaticMeshUsingTransform_Wait
	// void CarveWithStaticMeshUsingTransform_Wait(class ADeepCSGWorld* CSGWorld, class UStaticMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FTransform& Transform, EPreciousMaterialOptions Precious, FLatentActionInfo LatentInfo); // [0x1835320] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithStaticMeshUsingTransform
	// void CarveWithStaticMeshUsingTransform(class UStaticMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FTransform& Transform, EPreciousMaterialOptions Precious); // [0x1835120] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithStaticMesh
	// void CarveWithStaticMesh(class UStaticMeshCarver* MeshCarver, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FVector Pos, FQuat Orientation, FVector Scale, EPreciousMaterialOptions Precious); // [0x1834ee0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithSplineSegments
	// void CarveWithSplineSegments(TArray<FCarveSplineSegment>& Segments, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, EPreciousMaterialOptions Precious); // [0x1834d60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithSplineSegment
	// void CarveWithSplineSegment(FVector& SplineStart, FVector& SplineStartTangent, FVector& SplineEnd, FVector& SplineEndTangent, float Radius, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, EPreciousMaterialOptions Precious); // [0x1834ac0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithMeshUsingTransform_Wait
	// void CarveWithMeshUsingTransform_Wait(class ADeepCSGWorld* CSGWorld, class UStaticMesh* StaticMesh, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FTransform& Transform, float ExpensiveNoise, EPreciousMaterialOptions Precious, FLatentActionInfo LatentInfo); // [0x1833b90] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithMeshUsingTransform
	// void CarveWithMeshUsingTransform(class UStaticMesh* StaticMesh, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FTransform& Transform, float ExpensiveNoise, EPreciousMaterialOptions Precious, CarveOptionsCellSize CarverSize); // [0x1833910] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithMesh_Wait
	// void CarveWithMesh_Wait(class ADeepCSGWorld* CSGWorld, class UStaticMesh* StaticMesh, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FVector Pos, FQuat Orientation, FVector Scale, FLatentActionInfo LatentInfo); // [0x1833e70] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithMesh
	// void CarveWithMesh(class UStaticMesh* StaticMesh, class UTerrainMaterial* Material, ECarveFilterType CarveFilter, FVector Pos, FQuat Orientation, FVector Scale, EPreciousMaterialOptions Precious); // [0x18336d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CarveWithCSGBuild
	// void CarveWithCSGBuild(class UClass* CSGModel, FTransform& Transform);                                                   // [0x18335b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.CalcApproximateTerrainDensity
	// float CalcApproximateTerrainDensity(FVector Pos, float Radius);                                                          // [0x18334c0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.BPGetTerrainMaterial
	// class UTerrainMaterial* BPGetTerrainMaterial(int32_t Handle);                                                            // [0x18332c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepCSGWorld.BaseLayerCommitFinal
	// void BaseLayerCommitFinal(bool blocking);                                                                                // [0x1833430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.BaseLayerCommit
	// void BaseLayerCommit(bool blocking, bool scheduleTesselation);                                                           // [0x1833360] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.AttachActorToTerrain
	// void AttachActorToTerrain(class AActor* Actor, FVector Pos);                                                             // [0x18331e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepCSGWorld.ApplyBaseDebrisCarvers
	// void ApplyBaseDebrisCarvers(TArray<UDebrisBase*>& Carvers);                                                              // [0x1833130] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/FSD.DeepDiveRewardItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FDeepDiveRewardItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USchematic*)                         Schematic                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Stage                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(bool)                                      WasAlreadyGiven                                             OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Class /Script/FSD.DeepDive
/// Size: 0x0070 (0x000028 - 0x000098)
class UDeepDive : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TArray<class UGeneratedMission*>)          missions                                                    OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(class UBiome*)                             Biome                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FDeepDiveRewardItem>)               GivenRewards                                                OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   MissionsCompleted                                           OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	CMember(TArray<int32_t>)                           StagesCompleted                                             OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(int32_t)                                   CurrentMissionIndex                                         OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	CMember(class UDeepDiveTemplate*)                  Template                                                    OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FText)                                     DeepDiveName                                                OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	DMember(int32_t)                                   BestTime                                                    OFFSET(get<int32_t>, {0x90, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepDive.IsCompleted
	// bool IsCompleted();                                                                                                      // [0x183cda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDive.HasCompletedStage
	// bool HasCompletedStage(int32_t stageIndex);                                                                              // [0x183cd00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDive.GetGivenRewardAtStage
	// FDeepDiveRewardItem GetGivenRewardAtStage(int32_t stageIndex);                                                           // [0x183c460] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DeepDiveFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UDeepDiveFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.DeepDiveFunctionLibrary.IsEliteDeepDiveMission
	// bool IsEliteDeepDiveMission(class UObject* WorldContextObject, class UGeneratedMission* mission);                        // [0x183d040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DeepDiveFunctionLibrary.IsEliteDeepDive
	// bool IsEliteDeepDive(class UObject* WorldContextObject, class UDeepDive* DeepDive);                                      // [0x183cf70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DeepDiveFunctionLibrary.GetHasEverCompletedDeepDive
	// bool GetHasEverCompletedDeepDive(class UObject* WorldContextObject, class UDeepDiveTemplate* DeepDive);                  // [0x183c500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DeepDiveFunctionLibrary.GetDeepDiveFromMission
	// class UDeepDive* GetDeepDiveFromMission(class UObject* WorldContextObject, class UGeneratedMission* mission);            // [0x183c390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.DeepDiveBank
/// Size: 0x0010 (0x000000 - 0x000010)
class FDeepDiveBank : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UDeepDive*)                          NormalDeepDive                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDeepDive*)                          HardDeepDive                                                OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.DeepDiveManager
/// Size: 0x00D0 (0x000028 - 0x0000F8)
class UDeepDiveManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FMulticastInlineDelegate)                  OnDeepDivesRefresh                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      LockSeed                                                    OFFSET(get<bool>, {0x50, 1, 0, 0})
	CMember(class UFSDEventsHandler*)                  EventsHandler                                               OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UDeepDive*)                          ActiveNormalDeepDive                                        OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UDeepDive*)                          ActiveHardDeepDive                                          OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UDeepDive*)                          ActiveDeepDive                                              OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UDeepDive*)                          DebugDeepDive                                               OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UGeneratedMission*)                  CurrentMission                                              OFFSET(get<T>, {0x80, 8, 0, 0})
	DMember(float)                                     currentDepth                                                OFFSET(get<float>, {0x8C, 4, 0, 0})
	CMember(TMap<int32_t, FDeepDiveBank>)              DeepDiveBank                                                OFFSET(get<T>, {0x90, 80, 0, 0})
	DMember(int32_t)                                   BackendDataValid                                            OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	SMember(FDateTime)                                 BackendExpirationTime                                       OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	DMember(int32_t)                                   BackendSeed                                                 OFFSET(get<int32_t>, {0xF0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepDiveManager.SetDeepDive
	// void SetDeepDive(class UDeepDive* DeepDive);                                                                             // [0x183d9d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepDiveManager.ReInitialize
	// void ReInitialize();                                                                                                     // [0x183d920] Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepDiveManager.MarkGivenRewards
	// void MarkGivenRewards();                                                                                                 // [0x183d160] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepDiveManager.GetCurrentSingleMission
	// class UGeneratedMission* GetCurrentSingleMission();                                                                      // [0x183c360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDiveManager.GetCurrentDeepDiveStage
	// int32_t GetCurrentDeepDiveStage();                                                                                       // [0x183c2d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDiveManager.GetActiveNormalDeepDive
	// class UDeepDive* GetActiveNormalDeepDive();                                                                              // [0x183c1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDiveManager.GetActiveHardDeepDive
	// class UDeepDive* GetActiveHardDeepDive();                                                                                // [0x183c1a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDiveManager.GetActiveDeepDive
	// class UDeepDive* GetActiveDeepDive();                                                                                    // [0x183c180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDiveManager.GenerateDebugDeepDive
	// class UDeepDive* GenerateDebugDeepDive(TArray<FDeepDiveTesterItem> stages, class UBiome* Biome, bool IsElite);           // [0x183bff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepDiveManager.FindDeepDiveSeed
	// int32_t FindDeepDiveSeed(class UDeepDive* DeepDive);                                                                     // [0x183b1b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDiveManager.DeepDiveRefreshDelegate__DelegateSignature
	// void DeepDiveRefreshDelegate__DelegateSignature();                                                                       // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.DeepDiveManager.CompleteCurrentSingleMission
	// bool CompleteCurrentSingleMission();                                                                                     // [0x183b180] Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.DeepDiveLoaderSequence
/// Size: 0x0028 (0x000000 - 0x000028)
class FDeepDiveLoaderSequence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<class ULevelSequence*>)     LevelSequence                                               OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/FSD.DeepDiveSettings
/// Size: 0x00E0 (0x000030 - 0x000110)
class UDeepDiveSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(class UDeepDiveTemplate*)                  NormalTemplate                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDeepDiveTemplate*)                  HardTemplate                                                OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<class UMutator*>)                   BaseMutators                                                OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<class UMissionMutator*>)            Mutators                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<class UMissionWarning*>)            Warnings                                                    OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<class UDialogDataAsset*>)           DeepDiveMissionCompleteShouts                               OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FDeepDiveLoaderSequence>)           LoaderSequnces                                              OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(class UMissionNameBank*)                   DeepDiveNameBank                                            OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             MissionBar                                                  OFFSET(get<T>, {0x98, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             MissionEndScreen_Success                                    OFFSET(get<T>, {0xC0, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             MissionEndScreen_Failure                                    OFFSET(get<T>, {0xE8, 40, 0, 0})
};

/// Struct /Script/FSD.DeepDiveTemplateItem
/// Size: 0x0038 (0x000000 - 0x000038)
class FDeepDiveTemplateItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UMissionTemplate*)                   mission                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Probability                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<class UMissionDuration*>)           AllowedDurations                                            OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<class UMissionComplexity*>)         AllowedComplexities                                         OFFSET(get<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      CanOnlyAppearOnce                                           OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      CanOnlyAppearOncePerDeepDiveSet                             OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Class /Script/FSD.DeepDiveTemplate
/// Size: 0x0068 (0x000058 - 0x0000C0)
class UDeepDiveTemplate : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<class UDifficultySetting*>)         Difficulties                                                OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FDeepDiveTemplateItem>)             missions                                                    OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<ESchematicType>)                    Rewards                                                     OFFSET(get<T>, {0x78, 16, 0, 0})
	DMember(int32_t)                                   CreditsPerPrimaryObjective                                  OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(int32_t)                                   CreditsPerSecondaryObjective                                OFFSET(get<int32_t>, {0x8C, 4, 0, 0})
	DMember(int32_t)                                   XPPerPrimaryObjective                                       OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	DMember(int32_t)                                   XPPerSecondaryObjective                                     OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0x98, 4, 0, 0})
	SMember(FRandInterval)                             MutatorCount                                                OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FRandInterval)                             WarningCount                                                OFFSET(getStruct<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepDiveTemplate.IsDurationAllowed
	// bool IsDurationAllowed(class UMissionTemplate* mission, class UMissionDuration* Duration);                               // [0x183cea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDiveTemplate.IsComplexityAllowed
	// bool IsComplexityAllowed(class UMissionTemplate* mission, class UMissionComplexity* Complexity);                         // [0x183cdd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepDiveTemplate.GetStageRewardType
	// ESchematicType GetStageRewardType(int32_t stageIndex);                                                                   // [0x183cc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.AsyncPathRequestsInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UAsyncPathRequestsInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.AsyncPathRequests
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UAsyncPathRequests : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<TWeakObjectPtr<UObject*>>)          RequestListeners                                            OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/FSD.DeepPathfinderSceneComponent
/// Size: 0x0008 (0x0001F8 - 0x000200)
class UDeepPathfinderSceneComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
};

/// Class /Script/FSD.FlyingEnemyDeepPathfinderCharacter
/// Size: 0x0030 (0x0003B0 - 0x0003E0)
class AFlyingEnemyDeepPathfinderCharacter : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 992;

public:
	CMember(class UPhysicalMaterial*)                  FrozenMaterial                                              OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UPhysicsAsset*)                      FrozenAsset                                                 OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class USoundCue*)                          FrozenDeathSound                                            OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UParticleSystem*)                    FrozenDeathParticles                                        OFFSET(get<T>, {0x3D8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FlyingEnemyDeepPathfinderCharacter.TriggerFrozenRagdoll
	// void TriggerFrozenRagdoll();                                                                                             // [0x17f75b0] Native|Protected     
	// Function /Script/FSD.FlyingEnemyDeepPathfinderCharacter.OnFreezeImpact
	// void OnFreezeImpact(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x183d180] Native|Public|HasOutParms|HasDefaults 
	// Function /Script/FSD.FlyingEnemyDeepPathfinderCharacter.BP_FreezeImpact
	// void BP_FreezeImpact();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.FrozenPawnImpactComponent
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UFrozenPawnImpactComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FMulticastInlineDelegate)                  OnStartFallingEvent                                         OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFreezeImpactEvent                                         OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(class UPhysicalMaterial*)                  FrozenMaterial                                              OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UPhysicsAsset*)                      FrozenAsset                                                 OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class USoundCue*)                          FrozenDeathSound                                            OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UParticleSystem*)                    FrozenDeathParticles                                        OFFSET(get<T>, {0xF8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FrozenPawnImpactComponent.TriggerFrozenRagdoll
	// void TriggerFrozenRagdoll();                                                                                             // [0x180a020] Native|Protected     
	// Function /Script/FSD.FrozenPawnImpactComponent.OnFrozen
	// void OnFrozen(bool frozen);                                                                                              // [0x183d540] Final|Native|Protected 
	// Function /Script/FSD.FrozenPawnImpactComponent.OnFreezeImpact
	// void OnFreezeImpact(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x183d360] Native|Protected|HasOutParms|HasDefaults 
};

/// Struct /Script/FSD.DeepRepPath
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FDeepRepPath : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FVector)                                   PathBase                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(char)                                      PathLength                                                  OFFSET(get<char>, {0xC, 1, 0, 0})
	CMember(EDeepMovementState)                        State                                                       OFFSET(get<T>, {0xD, 1, 0, 0})
	DMember(char)                                      StateBits                                                   OFFSET(get<char>, {0xE, 1, 0, 0})
	SMember(FVector)                                   PathOffsets                                                 OFFSET(getStruct<T>, {0x10, 192, 0, 0})
};

/// Struct /Script/FSD.HandleRotationOptions
/// Size: 0x0001 (0x000000 - 0x000001)
class FHandleRotationOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      HandlePitch                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/FSD.FakeMoverState
/// Size: 0x0060 (0x000000 - 0x000060)
class FFakeMoverState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     TickRate                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TickTime                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FVector)                                   PrevPos                                                     OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector)                                   NextPos                                                     OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FVector)                                   PrevSurfaceNormal                                           OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector)                                   NextSurfaceNormal                                           OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	DMember(float)                                     AccumulatedTime                                             OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	DMember(bool)                                      NearSurface                                                 OFFSET(get<bool>, {0x54, 1, 0, 0})
	DMember(float)                                     SignedDistToSurface                                         OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/FSD.DeepPathfinderMovement
/// Size: 0x0318 (0x000138 - 0x000450)
class UDeepPathfinderMovement : public UPawnMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	DMember(bool)                                      UseDormancy                                                 OFFSET(get<bool>, {0x140, 1, 0, 0})
	DMember(float)                                     MaxPawnSpeed                                                OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     StrafeSpeed                                                 OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     MinSlowdownAngle                                            OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     MaxSlowdownAngle                                            OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     MaxStrafeDistance                                           OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     AlignDirectionSpeed                                         OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     FleeSpeedBoostMultiplier                                    OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     MaxAcceleration                                             OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     MaxBrakingDeceleration                                      OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(float)                                     AngleSpeedFilterFactor                                      OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(uint32_t)                                  AIAvoidanceWeight                                           OFFSET(get<uint32_t>, {0x16C, 4, 0, 0})
	CMember(DeepPathFinderType)                        PathfinderType                                              OFFSET(get<T>, {0x170, 1, 0, 0})
	CMember(DeepPathFinderSize)                        PathfinderSize                                              OFFSET(get<T>, {0x171, 1, 0, 0})
	CMember(ETeleportType)                             MovementPhysicsType                                         OFFSET(get<T>, {0x172, 1, 0, 0})
	CMember(DeepPathFinderPreference)                  PathfinderPreference                                        OFFSET(get<T>, {0x173, 1, 0, 0})
	DMember(bool)                                      AlignTowardsTargetIfStationary                              OFFSET(get<bool>, {0x174, 1, 0, 0})
	DMember(float)                                     AlignToTargetMinRequiredAngle                               OFFSET(get<float>, {0x178, 4, 0, 0})
	SMember(FVector)                                   AlignTowardsLocation                                        OFFSET(getStruct<T>, {0x17C, 12, 0, 0})
	DMember(bool)                                      AllowSlowTickRateWhenNotVisible                             OFFSET(get<bool>, {0x188, 1, 0, 0})
	DMember(bool)                                      ForceAPathIfNoneFound                                       OFFSET(get<bool>, {0x189, 1, 0, 0})
	DMember(bool)                                      DrawServerPath                                              OFFSET(get<bool>, {0x18A, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPathBegin                                                 OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPauseMovementElapsed                                      OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPathFinished                                              OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRefreshDestination                                        OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})
	DMember(bool)                                      IsStrafingOverride                                          OFFSET(get<bool>, {0x1E0, 1, 0, 0})
	CMember(class ADeepCSGWorld*)                      CSGWorld                                                    OFFSET(get<T>, {0x208, 8, 0, 0})
	DMember(uint32_t)                                  PathMovedDist                                               OFFSET(get<uint32_t>, {0x220, 4, 0, 0})
	DMember(uint32_t)                                  LocalPathMovedDist                                          OFFSET(get<uint32_t>, {0x224, 4, 0, 0})
	SMember(FDeepRepPath)                              Path                                                        OFFSET(getStruct<T>, {0x228, 208, 0, 0})
	CMember(class UFakeMoverSettings*)                 MoveSettings                                                OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class AActor*)                             TargetActor                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	DMember(int32_t)                                   CurrentPathIndex                                            OFFSET(get<int32_t>, {0x308, 4, 0, 0})
	DMember(float)                                     CurrentPathFraction                                         OFFSET(get<float>, {0x30C, 4, 0, 0})
	SMember(FVector)                                   Destination                                                 OFFSET(getStruct<T>, {0x310, 12, 0, 0})
	CMember(class AActor*)                             DestinationActor                                            OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     AcceptanceRadius                                            OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(bool)                                      OnlyPartPath                                                OFFSET(get<bool>, {0x32C, 1, 0, 0})
	DMember(float)                                     PauseMovementTime                                           OFFSET(get<float>, {0x330, 4, 0, 0})
	CMember(EDeepMovementMode)                         MoveMode                                                    OFFSET(get<T>, {0x334, 1, 0, 0})
	CMember(class UPawnStatsComponent*)                PawnStats                                                   OFFSET(get<T>, {0x338, 8, 0, 0})
	SMember(FVector)                                   LastForwardDir                                              OFFSET(getStruct<T>, {0x354, 12, 0, 0})
	DMember(float)                                     VerticalAngleSpeed                                          OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     HorizontalAngleSpeed                                        OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(bool)                                      IsStrafing                                                  OFFSET(get<bool>, {0x368, 1, 0, 0})
	DMember(bool)                                      HasOustandingPathRequest                                    OFFSET(get<bool>, {0x369, 1, 0, 0})
	DMember(bool)                                      LastPathReachedPreciseDestination                           OFFSET(get<bool>, {0x36A, 1, 0, 0})
	DMember(float)                                     PostponedTickTime                                           OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(bool)                                      LastMoveSuccessful                                          OFFSET(get<bool>, {0x394, 1, 0, 0})
	DMember(bool)                                      HandleRotation                                              OFFSET(get<bool>, {0x395, 1, 0, 0})
	DMember(bool)                                      TickAfterOwnerDeath                                         OFFSET(get<bool>, {0x396, 1, 0, 0})
	SMember(FHandleRotationOptions)                    HandleRotationOptions                                       OFFSET(getStruct<T>, {0x397, 1, 0, 0})
	SMember(FVector)                                   UnfilteredPosition                                          OFFSET(getStruct<T>, {0x3B0, 12, 0, 0})
	SMember(FVector)                                   LastDestPosUsed                                             OFFSET(getStruct<T>, {0x3BC, 12, 0, 0})
	DMember(float)                                     DampOmega                                                   OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(bool)                                      UseMovementSpring                                           OFFSET(get<bool>, {0x3CC, 1, 0, 0})
	DMember(bool)                                      SnapToPathfinderOnFirstMove                                 OFFSET(get<bool>, {0x3CD, 1, 0, 0})
	DMember(bool)                                      DisablePathfinderErrors                                     OFFSET(get<bool>, {0x3CE, 1, 0, 0})
	SMember(FFakeMoverState)                           FakePhysicsMove                                             OFFSET(getStruct<T>, {0x3D0, 96, 0, 0})
	DMember(float)                                     FakeSyncTime                                                OFFSET(get<float>, {0x430, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepPathfinderMovement.UpdateTargetActor
	// void UpdateTargetActor(class AActor* NewTarget);                                                                         // [0x183e580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.UpdateDestination
	// void UpdateDestination(FVector& Dest);                                                                                   // [0x183e4f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.UnPauseMovement
	// void UnPauseMovement();                                                                                                  // [0x183e4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.TeleportTo
	// void TeleportTo(FVector& destLoc, FRotator& destRot);                                                                    // [0x183e3c0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.StopMove
	// void StopMove();                                                                                                         // [0x183e2d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.StopAttackStance
	// void StopAttackStance();                                                                                                 // [0x183e2b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.StartMoveToActor
	// bool StartMoveToActor(class AActor* Dest, float AcceptanceRadius, bool ToCenterOfMass);                                  // [0x183e190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.StartMoveTo
	// bool StartMoveTo(FVector& Dest, float AcceptanceRadius);                                                                 // [0x183e0a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.StartFleeFrom
	// bool StartFleeFrom(FVector& dangerPos, float Distance);                                                                  // [0x183dfb0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.StartFakePhysicsMoveSet
	// void StartFakePhysicsMoveSet(class UFakeMoverSettings* MoveSettings);                                                    // [0x183df20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.StartFakePhysics
	// void StartFakePhysics(FVector& Vel);                                                                                     // [0x183de90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.StartAttackStance
	// void StartAttackStance(FVector& stancePos);                                                                              // [0x183de00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.SnapToPathfinder
	// void SnapToPathfinder();                                                                                                 // [0x183dde0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.SetSlowDownAngles
	// void SetSlowDownAngles(float Min, float Max);                                                                            // [0x183dd10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.SetMaxSpeed
	// void SetMaxSpeed(float Speed);                                                                                           // [0x183dc90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.SetMaxAcceleration
	// void SetMaxAcceleration(float Value);                                                                                    // [0x183dc10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.SetHandleRotation
	// void SetHandleRotation(bool flag);                                                                                       // [0x183daf0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.SetFreezeAlignment
	// void SetFreezeAlignment(bool Freeze);                                                                                    // [0x183da60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.SetControlledExternally
	// void SetControlledExternally(bool controlled);                                                                           // [0x183d940] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.PauseMovement
	// void PauseMovement(float Time);                                                                                          // [0x183d8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.PathExistTo
	// bool PathExistTo(FVector& Dest);                                                                                         // [0x183d700] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.PathExistsBetween
	// bool PathExistsBetween(FVector& from, FVector& to);                                                                      // [0x183d7a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.OnRep_Path
	// void OnRep_Path(FDeepRepPath& oldPath);                                                                                  // [0x183d5f0] Final|Native|Private|HasOutParms 
	// Function /Script/FSD.DeepPathfinderMovement.OnRep_MoveSettings
	// void OnRep_MoveSettings(class UFakeMoverSettings* MoveSettings);                                                         // [0x1828b70] Final|Native|Private 
	// Function /Script/FSD.DeepPathfinderMovement.IsFreezeAlignmentSet
	// bool IsFreezeAlignmentSet();                                                                                             // [0x183d110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepPathfinderMovement.GetVerticalAngleSpeed
	// float GetVerticalAngleSpeed();                                                                                           // [0x183ccd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.GetRandomSpawnPointAtApproximateDistance_Async
	// void GetRandomSpawnPointAtApproximateDistance_Async(FVector& Origin, float Distance, bool& success, FVector& outPos, FLatentActionInfo LatentInfo); // [0x183ca40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.GetRandomReachablePointAtApproximateDistance_Async
	// void GetRandomReachablePointAtApproximateDistance_Async(FVector& Origin, float Distance, bool& success, FVector& outPos, FLatentActionInfo LatentInfo); // [0x183c850] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.GetRandomReachablePointAtApproximateDistance
	// bool GetRandomReachablePointAtApproximateDistance(FVector& Origin, float Distance, FVector& outPos);                     // [0x183c720] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.GetPathForwardDirection
	// FVector GetPathForwardDirection();                                                                                       // [0x183c680] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.GetPathfinderType
	// DeepPathFinderType GetPathfinderType();                                                                                  // [0x183c6f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepPathfinderMovement.GetPathfinderSize
	// DeepPathFinderSize GetPathfinderSize();                                                                                  // [0x183c6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepPathfinderMovement.GetMovementState
	// EDeepMovementState GetMovementState();                                                                                   // [0x183c650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepPathfinderMovement.GetMaxAcceleration
	// float GetMaxAcceleration();                                                                                              // [0x183c630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepPathfinderMovement.GetIsStrafing
	// bool GetIsStrafing();                                                                                                    // [0x183c600] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.GetHorizontalAngleSpeed
	// float GetHorizontalAngleSpeed();                                                                                         // [0x183c5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.GetCurrentMovePos
	// FVector GetCurrentMovePos();                                                                                             // [0x183c320] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepPathfinderMovement.GetCurrentFakePhysicsMoveSet
	// class UFakeMoverSettings* GetCurrentFakePhysicsMoveSet();                                                                // [0x183c300] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.GetApproximatePathLength
	// float GetApproximatePathLength(FVector Start, FVector End);                                                              // [0x183c1e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepPathfinderMovement.FlyToConnectedPosition
	// bool FlyToConnectedPosition(FVector& destPos);                                                                           // [0x183bf50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.FindPointKeepingDistance
	// bool FindPointKeepingDistance(FVector& Origin, float MinDistance, float MaxDistance, FVector& Target, float idealTargetDistance, FVector& outPos); // [0x183bd20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.FindPointDiagonalTowardsTarget
	// bool FindPointDiagonalTowardsTarget(FVector& Origin, FVector& Target, float dodgeAngle, float maxSampleDistance, float moveDistance, float RandomDeviation, FVector& outPos); // [0x183bae0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.FindPathfinderPointBelow
	// FVector FindPathfinderPointBelow(FVector& Pos, float HeightOffset);                                                      // [0x183b9e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.FindPathfinderPointAbove
	// FVector FindPathfinderPointAbove(FVector& Pos, float HeightOffset);                                                      // [0x183b8e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.FindPathfinderOffsetPoint
	// FVector FindPathfinderOffsetPoint(FVector& Pos, EOffsetFrom offsetFrom, float HeightOffset);                             // [0x183b790] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.FindNearestPathfinderPointOverrideType
	// FVector FindNearestPathfinderPointOverrideType(FVector& Pos, DeepPathFinderType overrideType, float MaxDistance);        // [0x183b450] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.FindNearestPathfinderPoint_Async
	// void FindNearestPathfinderPoint_Async(FVector& Pos, float MaxDistance, bool& success, FVector& outPos, FLatentActionInfo LatentInfo); // [0x183b5a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.FindNearestPathfinderPoint
	// FVector FindNearestPathfinderPoint(FVector& Pos, float MaxDistance);                                                     // [0x183b350] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DeepPathfinderMovement.FindNearestConnectedPathfinderPoint
	// FVector FindNearestConnectedPathfinderPoint(FVector& Pos, float MaxDistance);                                            // [0x183b250] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.CalcPathfinderOrientation
	// FQuat CalcPathfinderOrientation(FVector& Pos, FVector& forwardDir);                                                      // [0x183b080] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.BackOffFrom
	// bool BackOffFrom(FVector& dangerPos, float Distance);                                                                    // [0x183af90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DeepPathfinderMovement.AddFakeMoverImpulse
	// void AddFakeMoverImpulse(FVector& Impulse);                                                                              // [0x183af00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.DeepScanHiddenCrystal
/// Size: 0x0008 (0x000220 - 0x000228)
class ADeepScanHiddenCrystal : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	DMember(int32_t)                                   CrystalIndex                                                OFFSET(get<int32_t>, {0x220, 4, 0, 0})
	DMember(bool)                                      HasEquipmentBeenCalled                                      OFFSET(get<bool>, {0x224, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepScanHiddenCrystal.SetEquipmentCalled
	// void SetEquipmentCalled();                                                                                               // [0x1843ae0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.DeepScanObjectiveBase
/// Size: 0x0048 (0x000180 - 0x0001C8)
class UDeepScanObjectiveBase : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(class UGemResourceData*)                   HiddenItemResource                                          OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TArray<class ADeepScanHiddenCrystal*>)     HiddenItemInstances                                         OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(class UDeepScanPlayerComponent*)           UIComponent                                                 OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             PlayerComponentClass                                        OFFSET(get<T>, {0x1A0, 40, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepScanObjectiveBase.OnPlayerRegistered
	// void OnPlayerRegistered(class APlayerCharacter* Player);                                                                 // [0x1843840] Final|Native|Protected 
};

/// Class /Script/FSD.DeepScanObjective
/// Size: 0x00B8 (0x0001C8 - 0x000280)
class UDeepScanObjective : public UDeepScanObjectiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	SMember(FMulticastInlineDelegate)                  OnObjectiveStateChanged                                     OFFSET(getStruct<T>, {0x1C8, 16, 0, 0})
	CMember(class UDialogDataAsset*)                   FirstScanDoneShout                                          OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   SecondToLastScanDoneShout                                   OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   GenericScanDoneShout                                        OFFSET(get<T>, {0x1E8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   AllScansDoneShout                                           OFFSET(get<T>, {0x1F0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   AllScansDoneShoutMissingSecondaries                         OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(int32_t)                                   HiddenItems                                                 OFFSET(get<int32_t>, {0x200, 4, 0, 0})
	DMember(int32_t)                                   ExtraHiddenItems                                            OFFSET(get<int32_t>, {0x204, 4, 0, 0})
	DMember(int32_t)                                   HiddenItemsFound                                            OFFSET(get<int32_t>, {0x208, 4, 0, 0})
	DMember(int32_t)                                   ResourceRoomIndex                                           OFFSET(get<int32_t>, {0x20C, 4, 0, 0})
	SMember(FRandInterval)                             ResourceVeinAmount                                          OFFSET(getStruct<T>, {0x210, 16, 0, 0})
	DMember(int32_t)                                   CollecResourcsVeinCount                                     OFFSET(get<int32_t>, {0x220, 4, 0, 0})
	CMember(class UDebrisPositioning*)                 CollectResourcePositioning                                  OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UResourceData*)                      CollectedResource                                           OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(int32_t)                                   CollectResourceTarget                                       OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	DMember(int32_t)                                   CollectResourceCurrent                                      OFFSET(get<int32_t>, {0x23C, 4, 0, 0})
	CMember(EDeepScanState)                            State                                                       OFFSET(get<T>, {0x240, 1, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             GemRoomDBA                                                  OFFSET(get<T>, {0x248, 40, 0, 0})
	SMember(FVector)                                   GeodeLocation                                               OFFSET(getStruct<T>, {0x270, 12, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepScanObjective.OnResourceChanged
	// void OnResourceChanged(class UCappedResource* CappedResource, float amount);                                             // [0x18439f0] Final|Native|Protected 
	// Function /Script/FSD.DeepScanObjective.OnRep_State
	// void OnRep_State(EDeepScanState oldState);                                                                               // [0x1843970] Final|Native|Protected 
	// Function /Script/FSD.DeepScanObjective.OnRep_ItemsCollected
	// void OnRep_ItemsCollected(int32_t prevAmount);                                                                           // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.DeepScanObjective.OnRep_CollectResourceCurrent
	// void OnRep_CollectResourceCurrent(int32_t prevAmount);                                                                   // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.DeepScanObjective.OnCrystalScanned
	// void OnCrystalScanned();                                                                                                 // [0x1843730] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.DeepScanObjective.CreateUndergroundCave
	// void CreateUndergroundCave();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DeepScanObjective.ChangeState
	// void ChangeState(EDeepScanState NewState);                                                                               // [0x18429c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.DeepScanSecondaryObjective
/// Size: 0x0010 (0x0001C8 - 0x0001D8)
class UDeepScanSecondaryObjective : public UDeepScanObjectiveBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	DMember(int32_t)                                   HiddenItems                                                 OFFSET(get<int32_t>, {0x1C8, 4, 0, 0})
	DMember(int32_t)                                   ExtraHiddenItems                                            OFFSET(get<int32_t>, {0x1CC, 4, 0, 0})
	DMember(int32_t)                                   HiddenItemsFound                                            OFFSET(get<int32_t>, {0x1D0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DeepScanSecondaryObjective.OnRep_ItemsCollected
	// void OnRep_ItemsCollected(int32_t prevAmount);                                                                           // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.DeepScanSecondaryObjective.OnCrystalScanned
	// void OnCrystalScanned();                                                                                                 // [0x1843750] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.DeepScanPlayerComponent
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UDeepScanPlayerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FSD.DeepScanPlayerComponent.HideUI
	// void HideUI();                                                                                                           // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.DefenseEvent
/// Size: 0x0018 (0x000368 - 0x000380)
class ADefenseEvent : public AGameEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	DMember(float)                                     DefendDuration                                              OFFSET(get<float>, {0x368, 4, 0, 0})
	CMember(class UClass*)                             DefendWidget                                                OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(float)                                     Progress                                                    OFFSET(get<float>, {0x378, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DefenseEvent.OnRep_Progress
	// void OnRep_Progress(float OldValue);                                                                                     // [0x18438f0] Final|Native|Protected 
};

/// Class /Script/FSD.DefensePointActor
/// Size: 0x0040 (0x000220 - 0x000260)
class ADefensePointActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(class UClass*)                             DefenseEvent                                                OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class AGameEvent*)                         ActiveDefenceEvent                                          OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(EDefendPointState)                         DefendState                                                 OFFSET(get<T>, {0x250, 1, 0, 0})
	CMember(class USingleUsableComponent*)             DefendPointUsable                                           OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DefensePointActor.SetState
	// void SetState(EDefendPointState State);                                                                                  // [0x1843b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DefensePointActor.OnRep_DefendState
	// void OnRep_DefendState();                                                                                                // [0x18438d0] Final|Native|Protected 
	// Function /Script/FSD.DefensePointActor.OnDefensePointActivated
	// void OnDefensePointActivated(class APlayerCharacter* Player, EInputKeys Key);                                            // [0x1843770] Native|Protected     
	// Function /Script/FSD.DefensePointActor.DefenseStart
	// void DefenseStart();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DefensePointActor.DefenseFail
	// void DefenseFail();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DefensePointActor.DefenseComplete
	// void DefenseComplete();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.DefenseObjective
/// Size: 0x0030 (0x000180 - 0x0001B0)
class UDefenseObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(int32_t)                                   DefensePoints                                               OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(int32_t)                                   PointsDefended                                              OFFSET(get<int32_t>, {0x184, 4, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ObjectiveDefenseClasses                                     OFFSET(get<T>, {0x188, 16, 0, 0})
	CMember(TArray<class ADefensePointActor*>)         ActiveObjectiveDefenseActors                                OFFSET(get<T>, {0x198, 16, 0, 0})
	CMember(class UDebrisPositioning*)                 DebrisPositioning                                           OFFSET(get<T>, {0x1A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DefenseObjective.PointDefended
	// void PointDefended();                                                                                                    // [0x1843ac0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DefenseObjective.OnRep_PointsRepaired
	// void OnRep_PointsRepaired();                                                                                             // [0x1830d80] Final|Native|Protected 
	// Function /Script/FSD.DefenseObjective.OnDefensePointsSpawned
	// void OnDefensePointsSpawned();                                                                                           // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.DestinationActorComponent
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UDestinationActorComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TWeakObjectPtr<class AActor*>)             DestinationActor                                            OFFSET(get<T>, {0xB0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DestinationActorComponent.GetDistToDestinationActor
	// float GetDistToDestinationActor();                                                                                       // [0x1843140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.DetailedTag
/// Size: 0x0038 (0x000058 - 0x000090)
class UDetailedTag : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FText)                                     TagName                                                     OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	CMember(class UTexture2D*)                         TagIcon                                                     OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FLinearColor)                              TagColor                                                    OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	DMember(int32_t)                                   SortingPriority                                             OFFSET(get<int32_t>, {0x88, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DetailedTag.GetTagName
	// FText GetTagName();                                                                                                      // [0x1843110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DetailedTag.GetTagIcon
	// class UTexture2D* GetTagIcon();                                                                                          // [0x183c180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DetailedTag.GetTagColor
	// FLinearColor GetTagColor();                                                                                              // [0x1842f30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DetailedTag.GetTagCategory
	// class UDetailedTagCategory* GetTagCategory();                                                                            // [0x1843170] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.DetailedTagCategory
/// Size: 0x0030 (0x000058 - 0x000088)
class UDetailedTagCategory : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FText)                                     CategoryName                                                OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	CMember(class UTexture2D*)                         CategoryIcon                                                OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FLinearColor)                              CategoryColor                                               OFFSET(getStruct<T>, {0x78, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DetailedTagCategory.GetCategoryName
	// FText GetCategoryName();                                                                                                 // [0x1843110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DetailedTagCategory.GetCategoryIcon
	// class UTexture2D* GetCategoryIcon();                                                                                     // [0x183c180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DetailedTagCategory.GetCategoryColor
	// FLinearColor GetCategoryColor();                                                                                         // [0x1842f30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.DetailedTagLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UDetailedTagLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.DetailedTagLibrary.TagsMatch
	// bool TagsMatch(TMap<UDetailedTagCategory*, FDetailedTagSet>& SearchExpr, FDetailedTagSet& Tags);                         // [0x1843f40] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.TagSetToText
	// FText TagSetToText(FDetailedTagSet& InSet);                                                                              // [0x1843da0] Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.TagQueryMatches
	// bool TagQueryMatches(FDetailedTagQuery& InQuery, FDetailedTagSet& InTags);                                               // [0x1843b90] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.MakeTagQueryFromArray
	// FDetailedTagQuery MakeTagQueryFromArray(TArray<UDetailedTag*>& InTags);                                                  // [0x18435d0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.MakeTagQuery
	// FDetailedTagQuery MakeTagQuery(FDetailedTagSet& InTags);                                                                 // [0x1843410] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.MakeDetailedTagSet
	// FDetailedTagSet MakeDetailedTagSet(TArray<UDetailedTag*>& InTags);                                                       // [0x18432e0] Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.IsSetEmpty
	// bool IsSetEmpty(FDetailedTagSet& InSet);                                                                                 // [0x18431a0] Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.GetCategoryMap
	// TMap<UDetailedTagCategory*, FDetailedTagSet> GetCategoryMap(FDetailedTagSet& InSet);                                     // [0x1842f50] Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.GetArraySorted
	// TArray<UDetailedTag*> GetArraySorted(FDetailedTagSet& InSet, bool InSortByCategory);                                     // [0x1842d50] Final|Native|Static|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.DetailedTagLibrary.GetArray
	// TArray<UDetailedTag*> GetArray(FDetailedTagSet& InSet);                                                                  // [0x1842bd0] Final|Native|Static|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.DetailedTagLibrary.Contains
	// bool Contains(FDetailedTagSet& InSet, class UDetailedTag* InTag);                                                        // [0x1842a40] Final|Native|Static|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DetailedTagLibrary.AppendSet
	// void AppendSet(FDetailedTagSet& InSet1, FDetailedTagSet& InSet2);                                                        // [0x18427a0] Final|Native|Static|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.DetailedTagLibrary.AppendArray
	// void AppendArray(FDetailedTagSet& InSet, TArray<UDetailedTag*>& inArray);                                                // [0x18425f0] Final|Native|Static|Protected|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.DetPack
/// Size: 0x0068 (0x000220 - 0x000288)
class ADetPack : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	DMember(float)                                     UpgradedStaggerChance                                       OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     UpgradedStaggerDuration                                     OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     UpgradedFearFactor                                          OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     VisualDamageRadius                                          OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     IncreasedFearRadius                                         OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     IncreasedStaggerRadius                                      OFFSET(get<float>, {0x254, 4, 0, 0})
	CMember(class UProjectileMovementComponent*)       Movement                                                    OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UExplosionComponent*)                Explosion                                                   OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class USingleUsableComponent*)             UseComp                                                     OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class USimpleHealthComponent*)             SimpleHealth                                                OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class ADetPackItem*)                       Detonator                                                   OFFSET(get<T>, {0x278, 8, 0, 0})
	DMember(bool)                                      HasExploded                                                 OFFSET(get<bool>, {0x280, 1, 0, 0})
	DMember(bool)                                      IsMoving                                                    OFFSET(get<bool>, {0x281, 1, 0, 0})
	DMember(bool)                                      ExplodesOnDeath                                             OFFSET(get<bool>, {0x282, 1, 0, 0})
	DMember(bool)                                      HasExtraStaggerRadius                                       OFFSET(get<bool>, {0x283, 1, 0, 0})
	DMember(bool)                                      HasExtraFearRadius                                          OFFSET(get<bool>, {0x284, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DetPack.UseFearStaggerUpgrades
	// void UseFearStaggerUpgrades();                                                                                           // [0x1847660] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.DetPack.RecieveHitObject
	// void RecieveHitObject();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DetPack.OnRep_IsMoving
	// void OnRep_IsMoving();                                                                                                   // [0x18470d0] Final|Native|Protected 
	// Function /Script/FSD.DetPack.OnRep_HasExploded
	// void OnRep_HasExploded();                                                                                                // [0x1847090] Final|Native|Protected 
	// Function /Script/FSD.DetPack.OnExploded
	// void OnExploded();                                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DetPack.OnDetPackPickedUp
	// void OnDetPackPickedUp(class APlayerCharacter* User, EInputKeys Key);                                                    // [0x1846fa0] Final|Native|Protected 
	// Function /Script/FSD.DetPack.OnDetPackDeath
	// void OnDetPackDeath(class UHealthComponentBase* HealthComponent);                                                        // [0x1846f10] Final|Native|Public  
};

/// Class /Script/FSD.DetPackItem
/// Size: 0x00D8 (0x0003E0 - 0x0004B8)
class ADetPackItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1208;

public:
	CMember(class UClass*)                             DetPackClass                                                OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UClass*)                             LoadoutProxy                                                OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UAnimMontage*)                       FPThrowMontage                                              OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPThrowMontage                                              OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_DetonateAnim                                             OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_DetonateAnim                                            OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_EquipDetonatorAnimation                                  OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_EquipDetonatorAnimation                                 OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             DetonatorFPMesh                                             OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             DetonatorTPMesh                                             OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               DetonatorTriggerForceFeedback                               OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UCapacityHoldingItemAggregator*)     Capacity                                                    OFFSET(get<T>, {0x448, 8, 0, 0})
	DMember(float)                                     SupplyStatusWeight                                          OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(float)                                     ThrowVelocity                                               OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(float)                                     EnheiritOwnerVelocityScale                                  OFFSET(get<float>, {0x458, 4, 0, 0})
	DMember(float)                                     ThrowAngle                                                  OFFSET(get<float>, {0x45C, 4, 0, 0})
	DMember(float)                                     CooldownAfterThrow                                          OFFSET(get<float>, {0x460, 4, 0, 0})
	DMember(float)                                     CooldownAfterDetonation                                     OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     ThrowDelay                                                  OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     ThrowZOffset                                                OFFSET(get<float>, {0x46C, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutDetPackPlaced                                          OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutOutOfAmmo                                              OFFSET(get<T>, {0x478, 8, 0, 0})
	DMember(float)                                     CooldownLeft                                                OFFSET(get<float>, {0x484, 4, 0, 0})
	CMember(TArray<class ADetPack*>)                   ThrownPacks                                                 OFFSET(get<T>, {0x488, 16, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               DetPackUpgrades                                             OFFSET(get<T>, {0x498, 16, 0, 0})
	DMember(bool)                                      IsDetonatorOut                                              OFFSET(get<bool>, {0x4B2, 1, 0, 0})
	DMember(bool)                                      HasThrownPack                                               OFFSET(get<bool>, {0x4B3, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DetPackItem.Simulate_ThrowGrenade
	// void Simulate_ThrowGrenade();                                                                                            // [0x1847640] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.DetPackItem.Server_ThrowGrenade
	// void Server_ThrowGrenade();                                                                                              // [0x1847620] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.DetPackItem.Server_Detonate
	// void Server_Detonate();                                                                                                  // [0x1847600] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.DetPackItem.Server_CycleItem
	// void Server_CycleItem();                                                                                                 // [0x17f7e30] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.DetPackItem.Receive_OnRep_IsDetonatorOut
	// void Receive_OnRep_IsDetonatorOut();                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DetPackItem.OnRep_IsDetonatorOut
	// void OnRep_IsDetonatorOut();                                                                                             // [0x18470b0] Final|Native|Protected 
	// Function /Script/FSD.DetPackItem.OnDetonatingFinished
	// void OnDetonatingFinished();                                                                                             // [0x1847070] Final|Native|Protected 
	// Function /Script/FSD.DetPackItem.GetCurrentGrenades
	// int32_t GetCurrentGrenades();                                                                                            // [0x1846a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.DialogStruct
/// Size: 0x0058 (0x000000 - 0x000058)
class FDialogStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TWeakObjectPtr<class USoundBase*>)         Audio                                                       OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(EDialogRestriction)                        Restriction                                                 OFFSET(get<T>, {0x48, 1, 0, 0})
	DMember(float)                                     Weigth                                                      OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(bool)                                      bIsValidEntry                                               OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/FSD.DialogDataAsset
/// Size: 0x0040 (0x000030 - 0x000070)
class UDialogDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      AudioOnly                                                   OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      SelectUsingWeight                                           OFFSET(get<bool>, {0x32, 1, 0, 0})
	DMember(float)                                     ShoutDelay                                                  OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     ShoutCoolDown                                               OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     ShoutChance                                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	CMember(TArray<FDialogStruct>)                     Entries                                                     OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<class USoundSubmixBase*>)           SubmixSends                                                 OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<int32_t>)                           Playlist                                                    OFFSET(get<T>, {0x60, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DialogDataAsset.SelectIndex
	// int32_t SelectIndex(class UObject* WorldContext);                                                                        // [0x1847560] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DialogDataAsset.SelectEntry
	// bool SelectEntry(class UObject* WorldContext, FDialogStruct& Dialog);                                                    // [0x18472e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DialogDataAsset.GetShout
	// FDialogStruct GetShout(int32_t Index);                                                                                   // [0x1846c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.DifficultyManager
/// Size: 0x0090 (0x0000B0 - 0x000140)
class UDifficultyManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(class UDifficultySetting*)                 CurrentVeteranCompositionSource                             OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(float)                                     MinModifierEnemyCount                                       OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     MinModifierAttackCooldown                                   OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     MinModifierSpeed                                            OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(int32_t)                                   ForcedPlayerCount                                           OFFSET(get<int32_t>, {0x128, 4, 0, 0})
	CMember(class AFSDGameMode*)                       GameMode                                                    OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class AFSDGameState*)                      GameState                                                   OFFSET(get<T>, {0x138, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DifficultyManager.SelectGameDifficulty
	// FGameDifficulty SelectGameDifficulty(int32_t Index, TArray<FDifficultyMutatorItem> Mutators);                            // [0x1847420] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DifficultyManager.SelectDifficulty
	// class UDifficultySetting* SelectDifficulty(int32_t Index);                                                               // [0x1847240] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DifficultyManager.GetSpeedModifier
	// float GetSpeedModifier();                                                                                                // [0x1846e20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetSmallEnemyDamageResistance
	// float GetSmallEnemyDamageResistance();                                                                                   // [0x1846df0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetPointExtractionScaler
	// float GetPointExtractionScaler();                                                                                        // [0x1846c60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceD
	// float GetExtraLargeEnemyDamageResistanceD();                                                                             // [0x1846c10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceC
	// float GetExtraLargeEnemyDamageResistanceC();                                                                             // [0x1846be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetExtraLargeEnemyDamageResistanceB
	// float GetExtraLargeEnemyDamageResistanceB();                                                                             // [0x1846bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetExtraLargeEnemyDamageResistance
	// float GetExtraLargeEnemyDamageResistance();                                                                              // [0x1846b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetEnemyDamageResistance
	// float GetEnemyDamageResistance();                                                                                        // [0x1846b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetEnemyDamageModifier
	// float GetEnemyDamageModifier();                                                                                          // [0x1846b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetEnemyCountModifier
	// float GetEnemyCountModifier();                                                                                           // [0x1846af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetCurrentGameDifficulty
	// FGameDifficulty GetCurrentGameDifficulty();                                                                              // [0x1846a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetCurrentDifficulty
	// class UDifficultySetting* GetCurrentDifficulty();                                                                        // [0x1846a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultyManager.GetBossDifficultyScaler
	// float GetBossDifficultyScaler();                                                                                         // [0x18469f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.VeteranComposition
/// Size: 0x0020 (0x000000 - 0x000020)
class FVeteranComposition : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FRandFloatInterval)                        Normal                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FRandFloatInterval)                        Large                                                       OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/FSD.DifficultySetting
/// Size: 0x01E8 (0x000058 - 0x000240)
class UDifficultySetting : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FText)                                     DifficultyName                                              OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	SMember(FText)                                     ShortDifficultyName                                         OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	SMember(FText)                                     UnlockRequirementDescription                                OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	CMember(class UClass*)                             CampaignRequirement                                         OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UClass*)                             SelectedByDefaultCampaignRequirement                        OFFSET(get<T>, {0xA8, 8, 0, 0})
	DMember(float)                                     EnvironmentalDamageModifier                                 OFFSET(get<float>, {0xB0, 4, 0, 0})
	CMember(TArray<float>)                             ExtraLargeEnemyDamageResistance                             OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TArray<float>)                             ExtraLargeEnemyDamageResistanceB                            OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<float>)                             ExtraLargeEnemyDamageResistanceC                            OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<float>)                             ExtraLargeEnemyDamageResistanceD                            OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<float>)                             EnemyDamageResistance                                       OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<float>)                             SmallEnemyDamageResistance                                  OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<float>)                             EnemyDamageModifier                                         OFFSET(get<T>, {0x118, 16, 0, 0})
	DMember(float)                                     EnemyToEnemyDamageModifier                                  OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(bool)                                      SupportsHazardPlus                                          OFFSET(get<bool>, {0x12C, 1, 0, 0})
	CMember(TArray<float>)                             EnemyCountModifier                                          OFFSET(get<T>, {0x130, 16, 0, 0})
	DMember(float)                                     BossDifficultyScaler                                        OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     PointExtractionScaler                                       OFFSET(get<float>, {0x144, 4, 0, 0})
	SMember(FRandInterval)                             EncounterDifficulty                                         OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	SMember(FRandInterval)                             StationaryDifficulty                                        OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	DMember(float)                                     SpecialEncounterModifier                                    OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     FriendlyFireModifier                                        OFFSET(get<float>, {0x170, 4, 0, 0})
	SMember(FRandInterval)                             EnemyWaveInterval                                           OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FRandInterval)                             EnemyNormalWaveInterval                                     OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	SMember(FRandInterval)                             EnemyNormalWaveDifficulty                                   OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	DMember(float)                                     WaveStartDelayScale                                         OFFSET(get<float>, {0x1A8, 4, 0, 0})
	SMember(FRandInterval)                             EnemyDiversity                                              OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	SMember(FRandInterval)                             StationaryEnemyDiversity                                    OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})
	SMember(FIRandRange)                               DisruptiveEnemyPoolCount                                    OFFSET(getStruct<T>, {0x1D0, 8, 0, 0})
	DMember(int32_t)                                   MinPoolSize                                                 OFFSET(get<int32_t>, {0x1D8, 4, 0, 0})
	SMember(FVeteranComposition)                       Veterans                                                    OFFSET(getStruct<T>, {0x1E0, 32, 0, 0})
	DMember(float)                                     SpeedModifier                                               OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(float)                                     AttackCooldownModifier                                      OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     ProjectileSpeedModifier                                     OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(int32_t)                                   DifficultyGroup                                             OFFSET(get<int32_t>, {0x20C, 4, 0, 0})
	DMember(int32_t)                                   DifficultyGroupIndex                                        OFFSET(get<int32_t>, {0x210, 4, 0, 0})
	CMember(TArray<class UMissionStat*>)               MissionCompletedStats                                       OFFSET(get<T>, {0x218, 16, 0, 0})
	DMember(float)                                     HeathRegenerationMax                                        OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     ReviveHealthRatio                                           OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     EliteChanceModifier                                         OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     EliteCooldown                                               OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(int32_t)                                   MaxActiveElites                                             OFFSET(get<int32_t>, {0x238, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DifficultySetting.IsUnlocked
	// bool IsUnlocked(class UObject* WorldContext);                                                                            // [0x1846e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultySetting.GetDifficultyIndex
	// int32_t GetDifficultyIndex();                                                                                            // [0x1846ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DifficultySetting.AddHazardBonus
	// float AddHazardBonus(float BaseValue);                                                                                   // [0x18468b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.DifficultyMutatorInfo
/// Size: 0x0058 (0x000000 - 0x000058)
class FDifficultyMutatorInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Icon                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.DifficultyMutatorSetupItem
/// Size: 0x0070 (0x000058 - 0x0000C8)
class UDifficultyMutatorSetupItem : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FDifficultyMutatorInfo)                    Info                                                        OFFSET(getStruct<T>, {0x58, 88, 0, 0})
	CMember(TArray<class UDifficultyMutator*>)         Mutators                                                    OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0xC0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DifficultyMutatorSetupItem.GetNumberOfLevels
	// int32_t GetNumberOfLevels();                                                                                             // [0x1846c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.DiscordServerInviteGuildData
/// Size: 0x0060 (0x000000 - 0x000060)
class FDiscordServerInviteGuildData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FString)                                   banner                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Icon                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   splash                                                      OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   ID                                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   Description                                                 OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/FSD.DiscordServerInviteData
/// Size: 0x0078 (0x000000 - 0x000078)
class FDiscordServerInviteData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FString)                                   code                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   approximate_presence_count                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   approximate_member_count                                    OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	SMember(FDiscordServerInviteGuildData)             guild                                                       OFFSET(getStruct<T>, {0x18, 96, 0, 0})
};

/// Struct /Script/FSD.DiscordRewardNotification
/// Size: 0x0040 (0x000000 - 0x000040)
class FDiscordRewardNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FLinearColor)                              IconColor                                                   OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   ID                                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FSD.DiscordEoMData
/// Size: 0x0020 (0x000000 - 0x000020)
class FDiscordEoMData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   nick                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   UserId                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/FSD.DiscordWrapper
/// Size: 0x02C8 (0x000028 - 0x0002F0)
class UDiscordWrapper : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	SMember(FDiscordServerInviteData)                  ServerInfo                                                  OFFSET(getStruct<T>, {0x38, 120, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResponseSuccessChanged                                    OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      LastResponseSuccessful                                      OFFSET(get<bool>, {0xC0, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDiscordEoMDataEvent                                       OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	DMember(bool)                                      UserIn                                                      OFFSET(get<bool>, {0x108, 1, 0, 0})
	SMember(FDiscordRewardNotification)                rewardNotification                                          OFFSET(getStruct<T>, {0x110, 64, 0, 0})
	DMember(int32_t)                                   UserInStatus                                                OFFSET(get<int32_t>, {0x150, 4, 0, 0})
	DMember(bool)                                      HasEoM                                                      OFFSET(get<bool>, {0x154, 1, 0, 0})
	SMember(FDiscordEoMData)                           EoMData                                                     OFFSET(getStruct<T>, {0x158, 32, 0, 0})
	DMember(bool)                                      IsConnected                                                 OFFSET(get<bool>, {0x278, 1, 0, 0})
	DMember(bool)                                      ServerInfoLoaded                                            OFFSET(get<bool>, {0x27A, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDiscordServerInfoLoaded                                   OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDiscordServerCountLoaded                                  OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDiscordUserInServer                                       OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DiscordWrapper.RequestUserInServer
	// void RequestUserInServer();                                                                                              // [0x1847220] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DiscordWrapper.RequestFactionAdjustment
	// void RequestFactionAdjustment(int32_t Faction, bool force);                                                              // [0x1847150] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DiscordWrapper.RequestEoMData
	// void RequestEoMData();                                                                                                   // [0x1847130] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DiscordWrapper.RequestDiscordServerInfo
	// void RequestDiscordServerInfo();                                                                                         // [0x1847110] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DiscordWrapper.RejectInviteSignature
	// void RejectInviteSignature();                                                                                            // [0x18470f0] Final|Native|Public  
	// Function /Script/FSD.DiscordWrapper.IgnoreInviteSignature
	// void IgnoreInviteSignature();                                                                                            // [0x1846e50] Final|Native|Public  
	// Function /Script/FSD.DiscordWrapper.GetAvatarURL
	// FString GetAvatarURL();                                                                                                  // [0x1846970] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DiscordWrapper.AdjustFaction
	// void AdjustFaction();                                                                                                    // [0x1846950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DiscordWrapper.AcceptInviteSignature
	// void AcceptInviteSignature();                                                                                            // [0x1846890] Final|Native|Public  
};

/// Class /Script/FSD.DisplayCaseAnimInstance
/// Size: 0x0038 (0x0002B8 - 0x0002F0)
class UDisplayCaseAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(TWeakObjectPtr<class UAnimMontage*>)       SoftReactMontage                                            OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UAnimMontage*)                       ReactMontage                                                OFFSET(get<T>, {0x2E0, 8, 0, 0})
};

/// Struct /Script/FSD.DisplayContent
/// Size: 0x0098 (0x000000 - 0x000098)
class FDisplayContent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AnimClass                                                   OFFSET(get<T>, {0x28, 40, 0, 0})
	SMember(FVector)                                   PivotOffset                                                 OFFSET(getStruct<T>, {0x50, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x5C, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	CMember(TArray<FText>)                             Description                                                 OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(class USkeletalMesh*)                      LoadedSkeletalMesh                                          OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UClass*)                             AnimClassInstance                                           OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Class /Script/FSD.DisplayCase
/// Size: 0x0218 (0x000220 - 0x000438)
class ADisplayCase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1080;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USceneComponent*)                    ContentAttachPoint                                          OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             ContentMesh                                                 OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnContentUpdated                                            OFFSET(getStruct<T>, {0x238, 16, 0, 0})
	SMember(FRuntimeFloatCurve)                        RelativeZOffset                                             OFFSET(getStruct<T>, {0x248, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        ReactZOffsetCof                                             OFFSET(getStruct<T>, {0x2D0, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        ReactTimeDilationCof                                        OFFSET(getStruct<T>, {0x358, 136, 0, 0})
	CMember(TArray<FDisplayContent>)                   Contents                                                    OFFSET(get<T>, {0x3E0, 16, 0, 0})
	DMember(float)                                     RotationSpeed                                               OFFSET(get<float>, {0x408, 4, 0, 0})
	DMember(float)                                     BeerMugSpawnChancePercent                                   OFFSET(get<float>, {0x40C, 4, 0, 0})
	DMember(float)                                     BarrelSpawnChancePercent                                    OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     TimeMultiplier                                              OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(float)                                     SizeMultiplier                                              OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(int32_t)                                   ContentIndex                                                OFFSET(get<int32_t>, {0x42C, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   BeerMugShout                                                OFFSET(get<T>, {0x430, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DisplayCase.RefreshContent
	// void RefreshContent();                                                                                                   // [0x184b010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DisplayCase.PlayReactionAnimation
	// void PlayReactionAnimation();                                                                                            // [0x184b2f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.DisplayCase.OnRep_ContentIndex
	// void OnRep_ContentIndex();                                                                                               // [0x184b010] Final|Native|Protected 
	// Function /Script/FSD.DisplayCase.IsSpecialContent
	// bool IsSpecialContent();                                                                                                 // [0x184afc0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DisplayCase.InitializeCase
	// void InitializeCase();                                                                                                   // [0x184af70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DisplayCase.GetCurrentContent
	// bool GetCurrentContent(FDisplayContent& currentContent);                                                                 // [0x184ae90] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DisplayCase.ChangeContent
	// void ChangeContent();                                                                                                    // [0x184acf0] Final|Native|Public  
};

/// Class /Script/FSD.DorrettaHead
/// Size: 0x0010 (0x000268 - 0x000278)
class ADorrettaHead : public ACarriableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(class UCarriableInstantUsable*)            Usable                                                      OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UCarriableComponent*)                CarriableComponent                                          OFFSET(get<T>, {0x270, 8, 0, 0})
};

/// Class /Script/FSD.DoubleDrillAggregator
/// Size: 0x0008 (0x000140 - 0x000148)
class UDoubleDrillAggregator : public UCapacityBasedItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
};

/// Class /Script/FSD.DualAnimatedItem
/// Size: 0x0058 (0x000380 - 0x0003D8)
class ADualAnimatedItem : public AItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 984;

public:
	CMember(class UAnimInstance*)                      FPAnimInstance                                              OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UPlayerAnimInstance*)                TPAnimInstance                                              OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             FPRMesh                                                     OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             FPLMesh                                                     OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             TPRMesh                                                     OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             TPLMesh                                                     OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_EquipAnimation                                           OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_EquipAnimation                                           OFFSET(get<T>, {0x3B8, 8, 0, 0})
	DMember(float)                                     EquipDuration                                               OFFSET(get<float>, {0x3C0, 4, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         CharacterAnimationSet                                       OFFSET(get<T>, {0x3C8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DualAnimatedItem.GetRItemMesh
	// class USkeletalMeshComponent* GetRItemMesh();                                                                            // [0x1854700] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DualAnimatedItem.GetLItemMesh
	// class USkeletalMeshComponent* GetLItemMesh();                                                                            // [0x1854680] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.DoubleDrillDamageItem
/// Size: 0x0038 (0x000000 - 0x000038)
class FDoubleDrillDamageItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TWeakObjectPtr<class UPrimitiveComponent*>) Target                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 Normal                                                      OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	CMember(class UFSDPhysicalMaterial*)               Material                                                    OFFSET(get<T>, {0x20, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(char)                                      BoneIndex                                                   OFFSET(get<char>, {0x30, 1, 0, 0})
};

/// Class /Script/FSD.DoubleDrillItem
/// Size: 0x0138 (0x0003D8 - 0x000510)
class ADoubleDrillItem : public ADualAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1296;

public:
	CMember(class UFirstPersonParticleSystemComponent*) FP_Left_DrillParticles                                     OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UFirstPersonParticleSystemComponent*) FP_Right_DrillParticles                                    OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UFSDAudioComponent*)                 AudioComponent                                              OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UDoubleDrillAggregator*)             Aggregator                                                  OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UAnimMontage*)                       FPMineMontage                                               OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPMineMontage                                               OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UAnimMontage*)                       FPOverheat                                                  OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPOverheat                                                  OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UAnimMontage*)                       FPGunsling                                                  OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPGunsling                                                  OFFSET(get<T>, {0x440, 8, 0, 0})
	SMember(FName)                                     MiningSpeedAudioParamterName                                OFFSET(getStruct<T>, {0x448, 8, 0, 0})
	CMember(class UParticleSystem*)                    DrillParticles                                              OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               DrillRumble                                                 OFFSET(get<T>, {0x458, 8, 0, 0})
	DMember(float)                                     BlockParticlesScaleFP                                       OFFSET(get<float>, {0x460, 4, 0, 0})
	DMember(float)                                     BlockParticlesScaleTP                                       OFFSET(get<float>, {0x464, 4, 0, 0})
	CMember(EDoubleDrillState)                         State                                                       OFFSET(get<T>, {0x468, 1, 0, 0})
	DMember(float)                                     MovementPenalty                                             OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     MiningRate                                                  OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     HeatReductionPerKill                                        OFFSET(get<float>, {0x474, 4, 0, 0})
	SMember(FVector)                                   CarveSize                                                   OFFSET(getStruct<T>, {0x478, 12, 0, 0})
	DMember(float)                                     CarveNoise                                                  OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     CarverRayCastLength                                         OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     CarveTerrainDistanceCheck                                   OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     TimeToNextMine                                              OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     CurrentDrillSpeed                                           OFFSET(get<float>, {0x494, 4, 0, 0})
	DMember(float)                                     DamageDistance                                              OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     DamageRadius                                                OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     FriendlyDamageRadius                                        OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     DamageRate                                                  OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     armorDamageMultiplier                                       OFFSET(get<float>, {0x4AC, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x4B0, 8, 0, 0})
	DMember(float)                                     FriendlyFireModifier                                        OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     MaxFuel                                                     OFFSET(get<float>, {0x4BC, 4, 0, 0})
	DMember(float)                                     Fuel                                                        OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     FuelUsePerDig                                               OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     FuelUsePerMelee                                             OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     SupplyStatusWeight                                          OFFSET(get<float>, {0x4CC, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutOutOfFuel                                              OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(TArray<FHitResult>)                        HitCache                                                    OFFSET(get<T>, {0x4D8, 16, 0, 0})
	CMember(TArray<FDoubleDrillDamageItem>)            DamageCache                                                 OFFSET(get<T>, {0x4E8, 16, 0, 0})
	DMember(float)                                     DrillParticlesDuration                                      OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(bool)                                      IsMining                                                    OFFSET(get<bool>, {0x50C, 1, 0, 0})
	DMember(bool)                                      IsGunslinging                                               OFFSET(get<bool>, {0x50D, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DoubleDrillItem.Server_StopMining
	// void Server_StopMining();                                                                                                // [0x181dad0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.DoubleDrillItem.Server_StartMining
	// void Server_StartMining();                                                                                               // [0x1847640] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.DoubleDrillItem.Server_DoDamage
	// void Server_DoDamage(TArray<FDoubleDrillDamageItem> Targets);                                                            // [0x184b400] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.DoubleDrillItem.Server_DigBlock
	// void Server_DigBlock(FVector_NetQuantize Start, FVector_NetQuantize End);                                                // [0x184b310] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.DoubleDrillItem.OnTargetKilled
	// void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);                       // [0x184b150] Final|Native|Public  
	// Function /Script/FSD.DoubleDrillItem.OnStopDrilling
	// void OnStopDrilling();                                                                                                   // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.DoubleDrillItem.OnStartDrilling
	// void OnStartDrilling();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.DoubleDrillItem.OnRep_SimulatingMining
	// void OnRep_SimulatingMining();                                                                                           // [0x184b0b0] Final|Native|Public  
	// Function /Script/FSD.DoubleDrillItem.OnRep_IsGunslinging
	// void OnRep_IsGunslinging();                                                                                              // [0x184b050] Final|Native|Public  
	// Function /Script/FSD.DoubleDrillItem.OnDrillParticlesTimerElapsed
	// void OnDrillParticlesTimerElapsed();                                                                                     // [0x184aff0] Final|Native|Public  
	// Function /Script/FSD.DoubleDrillItem.Client_Resupply
	// void Client_Resupply(float percentage);                                                                                  // [0x184ad10] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.DoubleDrillItem.BP_OnDrillDamage
	// void BP_OnDrillDamage();                                                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.DoubleDrillItem.All_SimulateDigDebris
	// void All_SimulateDigDebris(FVector_NetQuantize Position, int32_t DebrisIndex);                                           // [0x184ac10] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FSD.DoubleDrillItem.All_SimulateDigBlock
	// void All_SimulateDigBlock(FVector_NetQuantize Position, bool SpawnParticles, int32_t Material);                          // [0x184aae0] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FSD.DoubleDrillItem.All_SimulateDamage
	// void All_SimulateDamage(TArray<FDoubleDrillDamageItem> Targets);                                                         // [0x184aa40] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.DoubleDrillAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UDoubleDrillAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(float)                                     DrillSpeed                                                  OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(bool)                                      IsMining                                                    OFFSET(get<bool>, {0x2BC, 1, 0, 0})
	DMember(bool)                                      IsGunslinging                                               OFFSET(get<bool>, {0x2BD, 1, 0, 0})
	CMember(class ADoubleDrillItem*)                   Item                                                        OFFSET(get<T>, {0x2C0, 8, 0, 0})
};

/// Struct /Script/FSD.DeathIntroSettings
/// Size: 0x0024 (0x000000 - 0x000024)
class FDeathIntroSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	DMember(float)                                     FirstPersonDuration                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     FadeToBlackDelay                                            OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     FadeToBlackDuration                                         OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     FadeFromBlackDelay                                          OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     FadeFromBlackDuration                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     ZoomOutDuration                                             OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     ZoomOutStartDistance                                        OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Class /Script/FSD.DownedStateComponent
/// Size: 0x0050 (0x000100 - 0x000150)
class UDownedStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FDeathIntroSettings)                       Intro                                                       OFFSET(getStruct<T>, {0x100, 36, 0, 0})
	DMember(float)                                     DownedHealthLossPerSecond                                   OFFSET(get<float>, {0x124, 4, 0, 0})
	DMember(float)                                     TerrainRemovedFallThreshold                                 OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(bool)                                      DownedBombActive                                            OFFSET(get<bool>, {0x12C, 1, 0, 0})
	CMember(class UDamageComponent*)                   DownedBombDamage                                            OFFSET(get<T>, {0x138, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEnableDownedBombUIEvent                                   OFFSET(getStruct<T>, {0x140, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DownedStateComponent.TriggerDownedBombDamage
	// void TriggerDownedBombDamage();                                                                                          // [0x184b850] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.DownedStateComponent.Server_TriggerDownedBomb
	// void Server_TriggerDownedBomb();                                                                                         // [0x184b4a0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.DownedStateComponent.Receive_TriggerDownedBomb
	// void Receive_TriggerDownedBomb();                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DownedStateComponent.CreateDownedBombDamage
	// class UDamageComponent* CreateDownedBombDamage(class UClass* DamageClass);                                               // [0x184ada0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.MoveDownedPlayerCapsule
/// Size: 0x0010 (0x000470 - 0x000480)
class UMoveDownedPlayerCapsule : public UCapsuleComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1152;

public:
	CMember(TArray<class USceneComponent*>)            TargetLocations                                             OFFSET(get<T>, {0x470, 16, 0, 0})
};

/// Class /Script/FSD.Drillevator
/// Size: 0x0048 (0x000248 - 0x000290)
class ADrillevator : public ATaggedActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(EDrillevatorState)                         State                                                       OFFSET(get<T>, {0x248, 1, 0, 0})
	DMember(bool)                                      MovementEnabled                                             OFFSET(get<bool>, {0x249, 1, 0, 0})
	DMember(float)                                     TargetDepth                                                 OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     NotifyDistFromTargetDepth                                   OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     MovementSpeed                                               OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     ServerDepth                                                 OFFSET(get<float>, {0x25C, 4, 0, 0})
	SMember(FName)                                     HeatMaterialSlot                                            OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	SMember(FName)                                     HeatParamName                                               OFFSET(getStruct<T>, {0x268, 8, 0, 0})
	DMember(float)                                     CenterEngineHeatWeight                                      OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(float)                                     CenterEngineMaxHeat                                         OFFSET(get<float>, {0x274, 4, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           DynMatCenterEngineHeat                                      OFFSET(get<T>, {0x278, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.Drillevator.SetTargetDepth
	// void SetTargetDepth(float Depth);                                                                                        // [0x184b7d0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Drillevator.SetState
	// void SetState(EDrillevatorState NewState);                                                                               // [0x184b6d0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Drillevator.SetMovementSpeed
	// void SetMovementSpeed(float NewSpeed);                                                                                   // [0x184b650] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Drillevator.SetMovementEnabled
	// void SetMovementEnabled(bool Enabled);                                                                                   // [0x184b5c0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Drillevator.OnRep_State
	// void OnRep_State(EDrillevatorState oldState);                                                                            // [0x184b0d0] Final|Native|Protected 
	// Function /Script/FSD.Drillevator.OnRep_ServerDepth
	// void OnRep_ServerDepth();                                                                                                // [0x184b090] Final|Native|Protected 
	// Function /Script/FSD.Drillevator.OnRep_MovementEnabled
	// void OnRep_MovementEnabled(bool OldMovementEnabled);                                                                     // [0x17d5320] Final|Native|Protected 
	// Function /Script/FSD.Drillevator.OnMovingChanged
	// void OnMovingChanged(bool IsMoving);                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Drillevator.OnExitState
	// void OnExitState(EDrillevatorState oldState);                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Drillevator.OnEnterState
	// void OnEnterState(EDrillevatorState NewState);                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Drillevator.OnCloseToTargetDepth
	// void OnCloseToTargetDepth();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Drillevator.IsAtTargetDepth
	// bool IsAtTargetDepth();                                                                                                  // [0x184af90] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Drillevator.GetCenterEngineComponent
	// class USkeletalMeshComponent* GetCenterEngineComponent();                                                                // [0x184ae60] Native|Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/FSD.DrillevatorEngine
/// Size: 0x0040 (0x000220 - 0x000260)
class ADrillevatorEngine : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(EDrillevatorEngineState)                   State                                                       OFFSET(get<T>, {0x220, 1, 0, 0})
	DMember(float)                                     Health                                                      OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     DrainRate                                                   OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     HealthPercent_Green                                         OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     HealthPercent_Yellow                                        OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(int32_t)                                   DamageLevel                                                 OFFSET(get<int32_t>, {0x238, 4, 0, 0})
	DMember(float)                                     LastRepairProgress                                          OFFSET(get<float>, {0x23C, 4, 0, 0})
	CMember(class USingleUsableComponent*)             MaintainerUsableComponent                                   OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             EngineMeshComponent                                         OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           EngineMaterial                                              OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DrillevatorEngine.SetState
	// void SetState(EDrillevatorEngineState NewState);                                                                         // [0x184b750] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DrillevatorEngine.SetLastRepairProgress
	// void SetLastRepairProgress(float InProgress);                                                                            // [0x184b540] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DrillevatorEngine.SetHealth
	// void SetHealth(float InHealth);                                                                                          // [0x184b4c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DrillevatorEngine.OnRep_State
	// void OnRep_State(EDrillevatorEngineState oldState);                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DrillevatorEngine.OnRep_LastRepairProgress
	// void OnRep_LastRepairProgress();                                                                                         // [0x184b070] Final|Native|Protected 
	// Function /Script/FSD.DrillevatorEngine.OnRep_Health
	// void OnRep_Health();                                                                                                     // [0x184b030] Final|Native|Protected 
	// Function /Script/FSD.DrillevatorEngine.OnRep_DamageLevel
	// void OnRep_DamageLevel();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DrillevatorEngine.EvaluateDamageLevel
	// void EvaluateDamageLevel();                                                                                              // [0x184ae40] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.DrinkableActor
/// Size: 0x0010 (0x000220 - 0x000230)
class ADrinkableActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	DMember(int32_t)                                   BarSlotIndex                                                OFFSET(get<int32_t>, {0x220, 4, 0, 0})
	CMember(class UDrinkableDataAsset*)                DrinkableData                                               OFFSET(get<T>, {0x228, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DrinkableActor.Pickup
	// void Pickup(class APlayerCharacter* byCharacter);                                                                        // [0x184b260] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DrinkableActor.OnRep_DrinkableData
	// void OnRep_DrinkableData();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DrinkableActor.OnRep_BarSlotIndex
	// void OnRep_BarSlotIndex();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DrinkableActor.Fill
	// void Fill();                                                                                                             // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.DrinkableDataAsset
/// Size: 0x01D0 (0x000058 - 0x000228)
class UDrinkableDataAsset : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FText)                                     DrinkableName                                               OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	SMember(FText)                                     DrinkableDescription                                        OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	DMember(int32_t)                                   DrinkablePrice                                              OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(bool)                                      IsSpecialBeer                                               OFFSET(get<bool>, {0x8C, 1, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         DrinkableIcon                                               OFFSET(get<T>, {0x90, 8, 0, 0})
	DMember(int32_t)                                   RequiredPlayerRank                                          OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(bool)                                      ParticipatesInFreeBeerEvent                                 OFFSET(get<bool>, {0xBC, 1, 0, 0})
	CMember(EDrinkableAlcoholStrength)                 AlcoholStrength                                             OFFSET(get<T>, {0xBD, 1, 0, 0})
	CMember(class UDrinkableDataAsset*)                SpecialEdition                                              OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UDLCBase*)                           RequiredDLC                                                 OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(bool)                                      bPlayFireworks                                              OFFSET(get<bool>, {0xD0, 1, 0, 0})
	CMember(class UMissionStat*)                       StatConsumed                                                OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UMissionStat*)                       StatRoundOrdered                                            OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DrinkableActorClass                                         OFFSET(get<T>, {0xE8, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DrinkableItemClass                                          OFFSET(get<T>, {0x110, 40, 0, 0})
	CMember(class UDialogDataAsset*)                   OrderShout                                                  OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OrderCheeringShout                                          OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DrinkSaluteShout                                            OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UTemporaryBuff*)                     buff                                                        OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DrinkEffect                                                 OFFSET(get<T>, {0x158, 40, 0, 0})
	DMember(bool)                                      OneEffectComponentPerCharacter                              OFFSET(get<bool>, {0x180, 1, 0, 0})
	CMember(TMap<class UResourceData*, int32_t>)       UnlockCost                                                  OFFSET(get<T>, {0x188, 80, 0, 0})
	CMember(TMap<class UResourceData*, int32_t>)       PurchaseCost                                                OFFSET(get<T>, {0x1D8, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.DrinkableDataAsset.TryUnlockSpecialDrinks
	// bool TryUnlockSpecialDrinks(class UObject* WorldContext);                                                                // [0x18503c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.DrinkableDataAsset.TryUnlockDrink
	// bool TryUnlockDrink(class UObject* WorldContext);                                                                        // [0x1850320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DrinkableDataAsset.TryPurchaseDrink
	// bool TryPurchaseDrink(class UObject* WorldContext);                                                                      // [0x1850280] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DrinkableDataAsset.OnRoundOrdered
	// void OnRoundOrdered(class APlayerCharacter* Character);                                                                  // [0x184fb80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DrinkableDataAsset.MustBeUnlocked
	// bool MustBeUnlocked();                                                                                                   // [0x184f470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DrinkableDataAsset.IsUnlocked
	// bool IsUnlocked(class UObject* WorldContext);                                                                            // [0x184f3d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DrinkableDataAsset.IsDrinkFree
	// bool IsDrinkFree(class UObject* WorldContext);                                                                           // [0x184f330] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DrinkableDataAsset.HasSpecialEdition
	// bool HasSpecialEdition();                                                                                                // [0x184f300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DrinkableDataAsset.GetSpecialEdition
	// class UDrinkableDataAsset* GetSpecialEdition(class UObject* WorldContext);                                               // [0x184f260] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DrinkableDataAsset.GetDrinkableIcon
	// class UTexture2D* GetDrinkableIcon();                                                                                    // [0x184f210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DrinkableDataAsset.AreSpecialDrinksUnlocked
	// bool AreSpecialDrinksUnlocked(class UObject* WorldContext);                                                              // [0x184ece0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DrinkEffectComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UDrinkEffectComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(float)                                     BeerEffectDurationSeconds                                   OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(bool)                                      AutoDestroy                                                 OFFSET(get<bool>, {0xBC, 1, 0, 0})
	DMember(bool)                                      EffectIsActive                                              OFFSET(get<bool>, {0xBD, 1, 0, 0})
	DMember(bool)                                      ActivatesOnlyOnceWhenDrinking                               OFFSET(get<bool>, {0xBE, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DrinkEffectComponent.StopEffect
	// void StopEffect();                                                                                                       // [0x180a020] Native|Public|BlueprintCallable 
	// Function /Script/FSD.DrinkEffectComponent.OnStopEffect
	// void OnStopEffect();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DrinkEffectComponent.OnStartEffect
	// void OnStartEffect(class APlayerCharacter* Character);                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DrinkEffectComponent.OnChangedCharacter
	// void OnChangedCharacter(class APlayerCharacter* changedToCharacter, class UClass* DrinkEffectClass);                     // [0x184f790] Final|Native|Static|Protected|BlueprintCallable 
	// Function /Script/FSD.DrinkEffectComponent.GetActivateOnlyWhenDrinking
	// bool GetActivateOnlyWhenDrinking();                                                                                      // [0x184ef10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.DrinkableItem
/// Size: 0x0010 (0x0003E0 - 0x0003F0)
class ADrinkableItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(class UDrinkableDataAsset*)                DrinkableData                                               OFFSET(get<T>, {0x3E0, 8, 0, 0})
	DMember(int32_t)                                   BarSlotIndex                                                OFFSET(get<int32_t>, {0x3E8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DrinkableItem.ThrowDrink
	// void ThrowDrink();                                                                                                       // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.DrinkableItem.ReceiveConsumed
	// void ReceiveConsumed();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DrinkableItem.OnRep_DrinkableData
	// void OnRep_DrinkableData();                                                                                              // [0xbd29a0] Final|Native|Protected 
	// Function /Script/FSD.DrinkableItem.OnCameraModeChanged
	// void OnCameraModeChanged(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode);                        // [0x184f6c0] Final|Native|Protected 
	// Function /Script/FSD.DrinkableItem.Consume
	// void Consume();                                                                                                          // [0x184ed90] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.DrinkableItem.ClientConsumed
	// void ClientConsumed();                                                                                                   // [0x1847640] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.DrinkableItem.CheckCanSalute
	// bool CheckCanSalute();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
};

/// Struct /Script/FSD.BarleySpawnItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FBarleySpawnItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.DrinkSettings
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UDrinkSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<FBarleySpawnItem>)                  BarleySpawns                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FRandInterval)                             BarleyAmount                                                OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TMap<class UResourceData*, int32_t>)       SpecialBeerUnlockCost                                       OFFSET(get<T>, {0x50, 80, 0, 0})
	CMember(TArray<class UDrinkableDataAsset*>)        Drinkables                                                  OFFSET(get<T>, {0xA0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DrinkSettings.GetBarDrinkables
	// TArray<UDrinkableDataAsset*> GetBarDrinkables(class UObject* WorldContext, bool IncludeDailySpecial, bool includeNotUnlocked, bool includePlayerRankTooLow); // [0x184f010] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.DrinkSettings.GetBarDailySpecial
	// class UDrinkableDataAsset* GetBarDailySpecial(class UObject* WorldContext, class UDrinkableDataAsset* currentDailySpecial); // [0x184ef40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DroneBase
/// Size: 0x0028 (0x000390 - 0x0003B8)
class ADroneBase : public ADeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	CMember(class UPointLightComponent*)               StateLight                                                  OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(EDroneState)                               DefaultState                                                OFFSET(get<T>, {0x398, 1, 0, 0})
	CMember(TArray<class UDroneStateComponentBase*>)   DroneStates                                                 OFFSET(get<T>, {0x3A0, 16, 0, 0})
	CMember(EDroneState)                               CurrentState                                                OFFSET(get<T>, {0x3B0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DroneBase.OnRep_CurrentState
	// void OnRep_CurrentState(EDroneState Previous);                                                                           // [0x184fae0] Final|Native|Protected 
};

/// Class /Script/FSD.DroneTargetSensingComponent
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UDroneTargetSensingComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FGameplayTagQuery)                         TargetQuery                                                 OFFSET(getStruct<T>, {0xC8, 72, 0, 0})
	CMember(class AActor*)                             PulseFrom                                                   OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(float)                                     SensingRange                                                OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     SensingIntervals                                            OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(bool)                                      NeedsLineOfSight                                            OFFSET(get<bool>, {0x120, 1, 0, 0})
};

/// Class /Script/FSD.DroneAbillityStatsComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UDroneAbillityStatsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(bool)                                      UseOwnArmorDamageMultiplier                                 OFFSET(get<bool>, {0xB0, 1, 0, 0})
};

/// Class /Script/FSD.DroneCharacter
/// Size: 0x0018 (0x000390 - 0x0003A8)
class ADroneCharacter : public ADeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	CMember(class UHealthComponent*)                   HealthComponent                                             OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UOutlineComponent*)                  OutlineComponent                                            OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class USimpleObjectInfoComponent*)         ObjectInfo                                                  OFFSET(get<T>, {0x3A0, 8, 0, 0})
};

/// Class /Script/FSD.DroneStateComponentBase
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UDroneStateComponentBase : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(EDroneState)                               SubsequentState                                             OFFSET(get<T>, {0xB0, 1, 0, 0})
};

/// Class /Script/FSD.DroneCombatState
/// Size: 0x0090 (0x0000B8 - 0x000148)
class UDroneCombatState : public UDroneStateComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FGameplayTagQuery)                         AttackOnOrderQuery                                          OFFSET(getStruct<T>, {0xB8, 72, 0, 0})
	SMember(FGameplayTagQuery)                         AttackOnSightQuery                                          OFFSET(getStruct<T>, {0x100, 72, 0, 0})
};

/// Class /Script/FSD.DroneControllerBase
/// Size: 0x0018 (0x000328 - 0x000340)
class ADroneControllerBase : public AAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(TArray<TWeakObjectPtr<APlayerCharacter*>>) ControllingPlayers                                          OFFSET(get<T>, {0x328, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DroneControllerBase.OnShout
	// void OnShout(class APlayerCharacter* Player);                                                                            // [0x184fc10] Native|Public        
	// Function /Script/FSD.DroneControllerBase.OnSecondaryLaserPointer
	// void OnSecondaryLaserPointer(FLaserPointerTarget& HitInfo);                                                              // [0x17fc060] Native|Public|HasOutParms 
	// Function /Script/FSD.DroneControllerBase.OnSalute
	// void OnSalute(class APlayerCharacter* Player);                                                                           // [0x17fc100] Native|Public        
	// Function /Script/FSD.DroneControllerBase.OnPrimaryLaserpointer
	// void OnPrimaryLaserpointer(FLaserPointerTarget& HitInfo);                                                                // [0x184fa40] Native|Public|HasOutParms 
	// Function /Script/FSD.DroneControllerBase.OnPlayerLeave
	// void OnPlayerLeave(class AFSDPlayerState* State);                                                                        // [0x17fc220] Native|Public        
	// Function /Script/FSD.DroneControllerBase.OnPlayerJoin
	// void OnPlayerJoin(class APlayerCharacter* Player);                                                                       // [0x184f9b0] Native|Public        
};

/// Class /Script/FSD.StateDrivenDroneController
/// Size: 0x0000 (0x000340 - 0x000340)
class AStateDrivenDroneController : public ADroneControllerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
};

/// Class /Script/FSD.DroneDisplayActionComponent
/// Size: 0x0008 (0x0001F8 - 0x000200)
class UDroneDisplayActionComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(class UTextRenderComponent*)               DisplayText                                                 OFFSET(get<T>, {0x1F8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DroneDisplayActionComponent.SetMode
	// void SetMode(EDroneActions droneAction);                                                                                 // [0x184fd50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.DroneMeleeTool
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UDroneMeleeTool : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(float)                                     MeleeDamageAmount                                           OFFSET(get<float>, {0xB0, 4, 0, 0})
};

/// Class /Script/FSD.DroneMiningToolBase
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UDroneMiningToolBase : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FMulticastInlineDelegate)                  HitSomething                                                OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     SameHitDistance                                             OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     MineRadius                                                  OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(int32_t)                                   MineStrength                                                OFFSET(get<int32_t>, {0xDC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DroneMiningToolBase.StopMining
	// void StopMining();                                                                                                       // [0x1850030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DroneMiningToolBase.StartMining
	// void StartMining();                                                                                                      // [0x1850010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DroneMiningToolBase.SpawnEffects
	// void SpawnEffects(class UTerrainMaterial* aTerrainMaterial, bool aParialHit, FVector_NetQuantize aLocation, FVector_NetQuantize aImpactNormal); // [0x184fe50] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.DroneFollowState
/// Size: 0x0038 (0x0000B8 - 0x0000F0)
class UDroneFollowState : public UDroneStateComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(class AActor*)                             FollowTarget                                                OFFSET(get<T>, {0xD8, 8, 0, 0})
	DMember(float)                                     MaxFollowRadius                                             OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     MinFollowRadius                                             OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     UpdateLocationInterval                                      OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     UpdateLocationVariance                                      OFFSET(get<float>, {0xEC, 4, 0, 0})
};

/// Class /Script/FSD.DroneStream
/// Size: 0x0028 (0x000220 - 0x000248)
class ADroneStream : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  Collision                                                   OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(bool)                                      CheckStartOverlaps                                          OFFSET(get<bool>, {0x230, 1, 0, 0})
	DMember(bool)                                      CheckEndOverlaps                                            OFFSET(get<bool>, {0x231, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DroneStream.Receive_OnAbilityDataSet
	// void Receive_OnAbilityDataSet();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DroneStream.OnEndOverlap
	// void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x184f850] Final|Native|Protected 
	// Function /Script/FSD.DroneStream.OnBeginOverlap
	// void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x184f4a0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.DroneStream.GetBosco
	// class ABosco* GetBosco();                                                                                                // [0x184f1e0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.DroneVacuumStream
/// Size: 0x0018 (0x000248 - 0x000260)
class ADroneVacuumStream : public ADroneStream
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(class USceneComponent*)                    VacuumPoint                                                 OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(TArray<class AFoamPuddle*>)                PuddlesInside                                               OFFSET(get<T>, {0x250, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DroneVacuumStream.Server_StartVacuumingPuddle
	// void Server_StartVacuumingPuddle(class AFoamPuddle* puddle);                                                             // [0x182c090] Net|NetReliableNative|Event|Public|NetServer 
};

/// Class /Script/FSD.DroneUseComponent
/// Size: 0x0070 (0x0000B0 - 0x000120)
class UDroneUseComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FMulticastInlineDelegate)                  OnUsed                                                      OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBeginUse                                                  OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStopUse                                                   OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProgress                                                  OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	CMember(class UDialogDataAsset*)                   BoscoLaserpointerShout                                      OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(TWeakObjectPtr<class USingleUsableComponent*>) SyncToUsable                                            OFFSET(get<T>, {0x104, 8, 0, 0})
	DMember(float)                                     Progress                                                    OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     useDuration                                                 OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(bool)                                      ResetOnFail                                                 OFFSET(get<bool>, {0x11C, 1, 0, 0})
	DMember(bool)                                      CanUse                                                      OFFSET(get<bool>, {0x11D, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DroneUseComponent.SyncedUsableUserCountChangedResponse
	// void SyncedUsableUserCountChangedResponse(int32_t userCount);                                                            // [0x18501f0] Final|Native|Protected 
	// Function /Script/FSD.DroneUseComponent.SyncedUsableUsedResponse
	// void SyncedUsableUsedResponse(class APlayerCharacter* User, EInputKeys Key);                                             // [0x1850120] Final|Native|Protected 
	// Function /Script/FSD.DroneUseComponent.SyncedUsableBeginUseResponse
	// void SyncedUsableBeginUseResponse(class APlayerCharacter* User, EInputKeys Key);                                         // [0x1850050] Final|Native|Protected 
	// Function /Script/FSD.DroneUseComponent.SetUseDuration
	// void SetUseDuration(float useDuration);                                                                                  // [0x184fdd0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DroneUseComponent.SetCanUse
	// void SetCanUse(bool CanUse);                                                                                             // [0x184fcc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DroneUseComponent.GetProgress
	// float GetProgress();                                                                                                     // [0x184f240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DroneUseComponent.EndUse
	// void EndUse();                                                                                                           // [0x184eef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DroneUseComponent.BeginUse
	// void BeginUse();                                                                                                         // [0x184ed70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.DroppableOutpost
/// Size: 0x0070 (0x000248 - 0x0002B8)
class ADroppableOutpost : public ATaggedActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	DMember(float)                                     DropHeight                                                  OFFSET(get<float>, {0x248, 4, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0x24C, 12, 0, 0})
	CMember(class UAutoCarverComponent*)               AutoCarver                                                  OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UCurveFloat*)                        DepartCurve                                                 OFFSET(get<T>, {0x260, 8, 0, 0})
	DMember(float)                                     CarverRotationSpeed                                         OFFSET(get<float>, {0x268, 4, 0, 0})
	SMember(FVector)                                   CarverScale                                                 OFFSET(getStruct<T>, {0x26C, 12, 0, 0})
	DMember(float)                                     DepartureTime                                               OFFSET(get<float>, {0x278, 4, 0, 0})
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x280, 12, 0, 0})
	CMember(EDroppableOutpostState)                    State                                                       OFFSET(get<T>, {0x28C, 1, 0, 0})
	DMember(float)                                     DrillSpeed                                                  OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     FreeFallAcceleration                                        OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     FreeFallSpeed                                               OFFSET(get<float>, {0x29C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.DroppableOutpost.StartDrilling
	// void StartDrilling();                                                                                                    // [0x184fff0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DroppableOutpost.PrepForTakeOff
	// void PrepForTakeOff();                                                                                                   // [0x184fca0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DroppableOutpost.OnRep_State
	// void OnRep_State();                                                                                                      // [0x184fb60] Final|Native|Protected 
	// Function /Script/FSD.DroppableOutpost.OnPrepForTakeOff
	// void OnPrepForTakeOff();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DroppableOutpost.OnDroppodImpact
	// void OnDroppodImpact();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DroppableOutpost.OnDrillingStarted
	// void OnDrillingStarted();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DroppableOutpost.OnDeparting
	// void OnDeparting();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.DroppableOutpost.DropOutpostToMission
	// class ADroppableOutpost* DropOutpostToMission(class UObject* WorldContextObject, class UClass* podClass, FVector& Location); // [0x184edd0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.DroppableOutpost.Depart
	// void Depart();                                                                                                           // [0x184edb0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDMiningHead
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class AFSDMiningHead : public ADroppableOutpost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class UResourceBank*)                      ResourceBank                                                OFFSET(get<T>, {0x2B8, 8, 0, 0})
};

/// Class /Script/FSD.TeamTransport
/// Size: 0x00F0 (0x000220 - 0x000310)
class ATeamTransport : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	DMember(float)                                     DropHeight                                                  OFFSET(get<float>, {0x228, 4, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0x22C, 12, 0, 0})
	CMember(class UAutoCarverComponent*)               AutoCarver                                                  OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UCurveFloat*)                        DropCurve                                                   OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UCurveFloat*)                        DepartCurve                                                 OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UCurveFloat*)                        CarverDropCurve                                             OFFSET(get<T>, {0x268, 8, 0, 0})
	DMember(float)                                     CarverRotationSpeed                                         OFFSET(get<float>, {0x270, 4, 0, 0})
	SMember(FVector)                                   CarverScale                                                 OFFSET(getStruct<T>, {0x274, 12, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x280, 32, 0, 0})
	CMember(class UBoxComponent*)                      DwarfCheckerBox                                             OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(float)                                     DepartureTime                                               OFFSET(get<float>, {0x2A8, 4, 0, 0})
	SMember(FText)                                     DepartueCountdownName                                       OFFSET(getStruct<T>, {0x2B0, 24, 0, 0})
	CMember(EMiningPodMission)                         MissionType                                                 OFFSET(get<T>, {0x2CC, 1, 0, 0})
	DMember(bool)                                      WaitForPlayerSpawns                                         OFFSET(get<bool>, {0x2CD, 1, 0, 0})
	DMember(bool)                                      HasLanded                                                   OFFSET(get<bool>, {0x2CE, 1, 0, 0})
	CMember(class UOutlineComponent*)                  PodOutline                                                  OFFSET(get<T>, {0x2D0, 8, 0, 0})
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x2D8, 12, 0, 0})
	CMember(EMiningPodState)                           TransportState                                              OFFSET(get<T>, {0x2E4, 1, 0, 0})
	CMember(EMiningPodRampState)                       rampState                                                   OFFSET(get<T>, {0x2E5, 1, 0, 0})
	DMember(float)                                     TargetDropTime                                              OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     TargetDepartureTime                                         OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(float)                                     TimeToDrop                                                  OFFSET(get<float>, {0x2F0, 4, 0, 0})
	CMember(class UObjectivesManager*)                 ObjectivesManager                                           OFFSET(get<T>, {0x2F8, 8, 0, 0})
	DMember(bool)                                      ShouldAttachPlayers                                         OFFSET(get<bool>, {0x300, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TeamTransport.SpawnPodAtLocation
	// class ATeamTransport* SpawnPodAtLocation(class UObject* WorldContextObject, class UClass* podClass, FTransform& Transform); // [0x19c7d80] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.SetRampState
	// void SetRampState(EMiningPodRampState rampState);                                                                        // [0x19c7d00] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.SetMuleInstance
	// void SetMuleInstance(class AMolly* Donkey);                                                                              // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.RecieveReturnTimerFifteenSecondWarning
	// void RecieveReturnTimerFifteenSecondWarning();                                                                           // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.RecieveReturnTimerExpired
	// void RecieveReturnTimerExpired();                                                                                        // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.PrepForTakeOff
	// void PrepForTakeOff();                                                                                                   // [0x19c7b40] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.PowerUp
	// void PowerUp();                                                                                                          // [0x19c7b00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.PoweredUp
	// void PoweredUp();                                                                                                        // [0x19c7b20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.OnRep_State
	// void OnRep_State();                                                                                                      // [0x19c7a10] Final|Native|Protected 
	// Function /Script/FSD.TeamTransport.OnRep_RampState
	// void OnRep_RampState();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnPrepForTakeOff
	// void OnPrepForTakeOff();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnPoweringUp
	// void OnPoweringUp();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnPoweredUp
	// void OnPoweredUp();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnHostInsidePod
	// void OnHostInsidePod(bool isInside);                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnDropStarted
	// void OnDropStarted();                                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnDroppodImpact
	// void OnDroppodImpact();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnDrillingStarted
	// void OnDrillingStarted();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnDeparting
	// void OnDeparting();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.OnCountdownFinished
	// void OnCountdownFinished();                                                                                              // [0x19c7640] Final|Native|Protected 
	// Function /Script/FSD.TeamTransport.OnCountdownChanged
	// void OnCountdownChanged(int32_t newTime);                                                                                // [0x19c75b0] Native|Protected     
	// Function /Script/FSD.TeamTransport.OnAllDwavesInsidePod
	// void OnAllDwavesInsidePod(bool AllInside);                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.GetTimeToDeparture
	// int32_t GetTimeToDeparture();                                                                                            // [0x19c7200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TeamTransport.GetHasLanded
	// bool GetHasLanded();                                                                                                     // [0x19c7150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TeamTransport.ForceTakeoff
	// void ForceTakeoff();                                                                                                     // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.TeamTransport.ExitSpacerig
	// void ExitSpacerig();                                                                                                     // [0x19c7080] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.DropToTarget
	// class ATeamTransport* DropToTarget(class UObject* WorldContextObject, class UClass* podClass, FTransform& dropLocation, int32_t DropDelay); // [0x19c6ed0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.DropToMission
	// class ATeamTransport* DropToMission(class UObject* WorldContextObject, class UClass* podClass, FVector& Location);       // [0x19c6db0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.DepositAllPlayersMaterials
	// void DepositAllPlayersMaterials();                                                                                       // [0x19c6d90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.Depart
	// void Depart();                                                                                                           // [0x1816d70] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.CorrectLocationsForSpawnedOnLocation
	// void CorrectLocationsForSpawnedOnLocation();                                                                             // [0x19c6d70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.TeamTransport.AdjustLandingLocationToGround
	// FVector AdjustLandingLocationToGround(class UObject* WorldContextObjet, FVector& initialLocation, float maxDownAdjustment); // [0x19c6b70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/FSD.MiningPodDialogs
/// Size: 0x0050 (0x000000 - 0x000050)
class FMiningPodDialogs : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UDialogDataAsset*)                   DepartingIn5Min                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DepartingIn4Min                                             OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DepartingIn3Min                                             OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DepartingIn2Min                                             OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DepartingIn1Min                                             OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DepartingIn30Sec                                            OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DepartingIn10Sec                                            OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DepartingIn123Sec                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Departed                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DeepDiveDeparted                                            OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.DropPod
/// Size: 0x0050 (0x000310 - 0x000360)
class ADropPod : public ATeamTransport
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	SMember(FMiningPodDialogs)                         Dialogs                                                     OFFSET(getStruct<T>, {0x310, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.DropPod.GetDonkeyReturnPickupLocation
	// FVector GetDonkeyReturnPickupLocation();                                                                                 // [0x1d6f900] Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.DropToTerrainComponent
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UDropToTerrainComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FMulticastInlineDelegate)                  OnFallToTerrainStateChanged                                 OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      StartActive                                                 OFFSET(get<bool>, {0xC0, 1, 0, 0})
	SMember(FVector)                                   CurrentLocation                                             OFFSET(getStruct<T>, {0xC4, 12, 0, 0})
	SMember(FVector)                                   DropTarget                                                  OFFSET(getStruct<T>, {0xD0, 12, 0, 0})
	CMember(TArray<class UTerrainDetectComponent*>)    TerrainPoints                                               OFFSET(get<T>, {0xE0, 16, 0, 0})
	DMember(float)                                     FallVelocity                                                OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     TerrainTraceMaxDistance                                     OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(bool)                                      IsDetecting                                                 OFFSET(get<bool>, {0x104, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DropToTerrainComponent.StopDropDetection
	// void StopDropDetection(bool stopFalling);                                                                                // [0x1855ec0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.DropToTerrainComponent.OnTerrainRemoved
	// void OnTerrainRemoved(class USceneComponent* Point);                                                                     // [0x1854d70] Final|Native|Protected 
	// Function /Script/FSD.DropToTerrainComponent.OnRep_DropTarget
	// void OnRep_DropTarget();                                                                                                 // [0x1854cb0] Final|Native|Protected 
	// Function /Script/FSD.DropToTerrainComponent.BeginDropDetection
	// void BeginDropDetection();                                                                                               // [0x18544e0] Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.DSTelemetryWrapper
/// Size: 0x0020 (0x000030 - 0x000050)
class UDSTelemetryWrapper : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UDSTelemetry*)                       Telemetry                                                   OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DSTelemetryWrapper.RecordTreeOfVanityClaim
	// void RecordTreeOfVanityClaim(int32_t NodeID);                                                                            // [0x1855820] Final|Native|Public  
	// Function /Script/FSD.DSTelemetryWrapper.RecordSpecialEventHappening
	// void RecordSpecialEventHappening(FString EventName, bool SuccessfullySpawned);                                           // [0x18556f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordSeasonXpGained
	// void RecordSeasonXpGained(int32_t Gained, int32_t LastLevel, bool Positive);                                             // [0x18555e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordSeasonLevelUp
	// void RecordSeasonLevelUp();                                                                                              // [0xbd29a0] Final|Native|Public  
	// Function /Script/FSD.DSTelemetryWrapper.RecordSeasonChallengeReroll
	// void RecordSeasonChallengeReroll(int32_t ChallengeIndex, class USeasonChallenge* Challenge);                             // [0x1855510] Final|Native|Public  
	// Function /Script/FSD.DSTelemetryWrapper.RecordOpenScreen
	// void RecordOpenScreen(FString ScreenName, bool RecordRank);                                                              // [0x1855430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordMissionStart
	// void RecordMissionStart();                                                                                               // [0x1855410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordMissionEnd
	// void RecordMissionEnd(int32_t XPReward, int32_t CreditReward);                                                           // [0x1855340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordMachineEventEnd
	// void RecordMachineEventEnd(FString EventName, bool WasCompleted, int32_t completionTime);                                // [0x1854e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordKickPlayer
	// void RecordKickPlayer(FString reason, class APlayerController* KickedPlayer);                                            // [0x1855260] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordDeepDiveStageEnd
	// void RecordDeepDiveStageEnd(FString MissionName, int32_t StageTime, int32_t TimeSinceStartOfDive, int32_t TotalTime, int32_t NitraLeft); // [0x18550b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordContinuousDamage
	// void RecordContinuousDamage(class AActor* DamageCauser);                                                                 // [0x1828b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordCommunityEvents
	// void RecordCommunityEvents(FString EventCategory, FString EventAction, FString EventLabel, int32_t EventValue);          // [0x1854f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.RecordBossFightEnd
	// void RecordBossFightEnd(FString BossName, bool WasBossKilled, int32_t NumBossKills);                                     // [0x1854e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DSTelemetryWrapper.OnNewProceduralSetup
	// void OnNewProceduralSetup();                                                                                             // [0x1854be0] Final|Native|Private 
	// Function /Script/FSD.DSTelemetryWrapper.OnNewPlayer
	// void OnNewPlayer(class AFSDPlayerController* Controller);                                                                // [0x1854b50] Final|Native|Private 
	// Function /Script/FSD.DSTelemetryWrapper.OnNewMission
	// void OnNewMission(class UGeneratedMission* mission);                                                                     // [0x1854ac0] Final|Native|Private 
	// Function /Script/FSD.DSTelemetryWrapper.OnNewCharacter
	// void OnNewCharacter();                                                                                                   // [0x1854aa0] Final|Native|Private 
	// Function /Script/FSD.DSTelemetryWrapper.OnCharacterSaveChanged
	// void OnCharacterSaveChanged(class UClass* CharacterClass, int32_t Level, float Progress);                                // [0x1854960] Final|Native|Private 
	// Function /Script/FSD.DSTelemetryWrapper.OnCharacterPromoted
	// void OnCharacterPromoted(class UClass* CharacterClass, int32_t RetirementCount);                                         // [0x1854890] Final|Native|Private 
};

/// Class /Script/FSD.DualWieldWeapon
/// Size: 0x0040 (0x000780 - 0x0007C0)
class ADualWieldWeapon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1984;

public:
	CMember(class UFirstPersonSkeletalMeshComponent*)  FPMeshLeft                                                  OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             TPMeshLeft                                                  OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Left_Reload                                             OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Left_TP_Reload                                          OFFSET(get<T>, {0x7A0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     CasingParticlesLeft                                         OFFSET(get<T>, {0x7A8, 8, 0, 0})
	SMember(FName)                                     MuzzleLeft                                                  OFFSET(getStruct<T>, {0x7B8, 8, 0, 0})
};

/// Class /Script/FSD.DualWieldAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UDualWieldAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
};

/// Class /Script/FSD.DualMachinePistols
/// Size: 0x0010 (0x0007C0 - 0x0007D0)
class ADualMachinePistols : public ADualWieldWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2000;

public:
	CMember(class UClass*)                             EmptyClipStatusEffect                                       OFFSET(get<T>, {0x7C0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DualMachinePistols.Server_TriggerStatusEffect
	// void Server_TriggerStatusEffect();                                                                                       // [0x17f4bf0] Net|NetReliableNative|Event|Protected|NetServer 
};

/// Class /Script/FSD.DynamicIcon
/// Size: 0x0008 (0x000028 - 0x000030)
class UDynamicIcon : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/FSD.DynamicIcon.GetIconMaterial
	// class UMaterialInterface* GetIconMaterial();                                                                             // [0x18545f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DynamicIcon.GenerateIconMaterial
	// class UMaterialInstanceDynamic* GenerateIconMaterial(class UObject* materialOwner);                                      // [0x1854520] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.TwoFacetDynamicIcon
/// Size: 0x00A8 (0x000030 - 0x0000D8)
class UTwoFacetDynamicIcon : public UDynamicIcon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FLinearColor)                              Primary1Tint1                                               OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FLinearColor)                              Primary1Tint2                                               OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Primary1Texture                                             OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     Primary1Texture_BasePoint                                   OFFSET(get<float>, {0x78, 4, 0, 0})
	DMember(float)                                     Primary1Texture_Contrast                                    OFFSET(get<float>, {0x7C, 4, 0, 0})
	SMember(FLinearColor)                              Primary2Tint1                                               OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FLinearColor)                              Primary2Tint2                                               OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Primary2Texture                                             OFFSET(get<T>, {0xA0, 8, 0, 0})
	DMember(float)                                     Primary2Texture_BasePoint                                   OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     Primary2Texture_Contrast                                    OFFSET(get<float>, {0xCC, 4, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           PreviewInstance                                             OFFSET(get<T>, {0xD0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TwoFacetDynamicIcon.UpdatePreview
	// void UpdatePreview();                                                                                                    // [0x1855f90] Native|Protected     
};

/// Class /Script/FSD.TriFacetDynamicIcon
/// Size: 0x0050 (0x0000D8 - 0x000128)
class UTriFacetDynamicIcon : public UTwoFacetDynamicIcon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FLinearColor)                              Primary3Tint1                                               OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FLinearColor)                              Primary3Tint2                                               OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Primary3Texture                                             OFFSET(get<T>, {0xF8, 8, 0, 0})
	DMember(float)                                     Primary3Texture_BasePoint                                   OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(float)                                     Primary3Texture_Contrast                                    OFFSET(get<float>, {0x124, 4, 0, 0})
};

/// Class /Script/FSD.TextureDynamicIcon
/// Size: 0x0030 (0x000030 - 0x000060)
class UTextureDynamicIcon : public UDynamicIcon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TWeakObjectPtr<class UTexture2D*>)         Texture                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           PreviewInstance                                             OFFSET(get<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TextureDynamicIcon.UpdatePreview
	// void UpdatePreview();                                                                                                    // [0x1855f90] Native|Protected     
};

/// Class /Script/FSD.DynamicIconSettings
/// Size: 0x0068 (0x000030 - 0x000098)
class UDynamicIconSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(class UMaterialInstance*)                  TextureDynamicIcon                                          OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TwoFacetDynamicIcon                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TwoFacetDynamicIconTex1                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TwoFacetDynamicIconTex2                                     OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TwoFacetDynamicIconTex1Tex2                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TriFacetDynamicIcon                                         OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TriFacetDynamicIconTex1                                     OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TriFacetDynamicIconTex1Tex2                                 OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TriFacetDynamicIconTex1Tex3                                 OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TriFacetDynamicIconTex1Tex2Tex3                             OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TriFacetDynamicIconTex2                                     OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TriFacetDynamicIconTex2Tex3                                 OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UMaterialInstance*)                  TriFacetDynamicIconTex3                                     OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Class /Script/FSD.DynamicReverbComponent
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UDynamicReverbComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	DMember(float)                                     LargeCaveValue                                              OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     MediumCaveValue                                             OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     SmallCaveValue                                              OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     FadeTime                                                    OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     TunnelAmbienceFadeIn                                        OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     TunnelAmbienceFadeOut                                       OFFSET(get<float>, {0xC8, 4, 0, 0})
	CMember(class UAudioComponent*)                    TunnelSoundInstance                                         OFFSET(get<T>, {0xD8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DynamicReverbComponent.TunnelTimerTriggered
	// void TunnelTimerTriggered();                                                                                             // [0x1855f70] Final|Native|Protected 
	// Function /Script/FSD.DynamicReverbComponent.TimerTriggered
	// void TimerTriggered();                                                                                                   // [0x1855f50] Final|Native|Protected 
};

/// Class /Script/FSD.NisseAnimInstance
/// Size: 0x0010 (0x000380 - 0x000390)
class UNisseAnimInstance : public USimpleMovingEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(ENisseState)                               State                                                       OFFSET(get<T>, {0x380, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.NisseAnimInstance.IsWalking
	// bool IsWalking();                                                                                                        // [0x193a540] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NisseAnimInstance.IsRunning
	// bool IsRunning();                                                                                                        // [0x193a510] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NisseAnimInstance.IsNotWalking
	// bool IsNotWalking();                                                                                                     // [0x193a4e0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NisseAnimInstance.IsNotRunning
	// bool IsNotRunning();                                                                                                     // [0x193a4b0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NisseAnimInstance.IsNotIdle
	// bool IsNotIdle();                                                                                                        // [0x193a480] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NisseAnimInstance.IsNotFrozen
	// bool IsNotFrozen();                                                                                                      // [0x193a450] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NisseAnimInstance.IsIdle
	// bool IsIdle();                                                                                                           // [0x17e0ce0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NisseAnimInstance.IsFrozen
	// bool IsFrozen();                                                                                                         // [0x193a420] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EasterBunnyAnimInstance
/// Size: 0x0008 (0x000388 - 0x000390)
class UEasterBunnyAnimInstance : public UNisseAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(float)                                     WindUpTurnSpeed                                             OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     WindUpTimer                                                 OFFSET(get<float>, {0x38C, 4, 0, 0})
};

/// Class /Script/FSD.EffectSettings
/// Size: 0x0118 (0x000030 - 0x000148)
class UEffectSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(class UNiagaraParameterCollection*)        NiagaraParameterCollection                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        LinearFadeInLight                                           OFFSET(getStruct<T>, {0x38, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        LinearFadeOutLight                                          OFFSET(getStruct<T>, {0xC0, 136, 0, 0})
};

/// Class /Script/FSD.ElectroBeam
/// Size: 0x00A8 (0x000220 - 0x0002C8)
class AElectroBeam : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(class UCapsuleComponent*)                  collider                                                    OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TArray<class AActor*>)                     ParentPlants                                                OFFSET(get<T>, {0x228, 16, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x238, 12, 0, 0})
	SMember(FVector)                                   SourceLocation                                              OFFSET(getStruct<T>, {0x244, 12, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0x250, 12, 0, 0})
	CMember(class USceneComponent*)                    SourceComponent                                             OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class USceneComponent*)                    TargetComponent                                             OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class USceneComponent*)                    DelaySource                                                 OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class USceneComponent*)                    DelayTarget                                                 OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           BeamEffect                                                  OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UAudioComponent*)                    ZappSound                                                   OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TArray<class UClass*>)                     StatusEffectsToApply                                        OFFSET(get<T>, {0x290, 16, 0, 0})
	DMember(float)                                     MaxLitTime                                                  OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     MinLitTime                                                  OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     MaxUnlitTime                                                OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     MinUnlitTime                                                OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(bool)                                      ShouldFlicker                                               OFFSET(get<bool>, {0x2B0, 1, 0, 0})
	DMember(bool)                                      IsLit                                                       OFFSET(get<bool>, {0x2B1, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ElectroBeam.SetTargetComponent
	// void SetTargetComponent(class USceneComponent* TargetPoint);                                                             // [0x1855e10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ElectroBeam.SetSourceComponent
	// void SetSourceComponent(class USceneComponent* SourcePoint);                                                             // [0x1855d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ElectroBeam.SetParents
	// void SetParents(class AActor* firstParent, class AActor* secondParent);                                                  // [0x1855cb0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ElectroBeam.RecalculateBeam
	// void RecalculateBeam();                                                                                                  // [0x1816d70] Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ElectroBeam.OnRep_TargetComponent
	// void OnRep_TargetComponent();                                                                                            // [0x1854d50] Final|Native|Protected 
	// Function /Script/FSD.ElectroBeam.OnRep_SourceComponent
	// void OnRep_SourceComponent();                                                                                            // [0x1854d30] Final|Native|Protected 
	// Function /Script/FSD.ElectroBeam.OnRep_Flag
	// void OnRep_Flag();                                                                                                       // [0x1854cd0] Final|Native|Protected 
	// Function /Script/FSD.ElectroBeam.OnParentDeath
	// void OnParentDeath(class UHealthComponentBase* HealthComponent);                                                         // [0x1854c00] Final|Native|Protected 
	// Function /Script/FSD.ElectroBeam.GetParticleEffect
	// class UParticleSystemComponent* GetParticleEffect();                                                                     // [0x18546d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ElectroBeam.GetCollider
	// class UCapsuleComponent* GetCollider();                                                                                  // [0x11a8c50] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ElectroBeam.GetAudio
	// class UAudioComponent* GetAudio();                                                                                       // [0x18545c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ElectroBeam.DeactivateCollisionAndEffect
	// void DeactivateCollisionAndEffect();                                                                                     // [0x1854500] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.RecalculatedElectroBeam
/// Size: 0x0018 (0x0002C8 - 0x0002E0)
class ARecalculatedElectroBeam : public AElectroBeam
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	DMember(float)                                     MaxBeamRange                                                OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     UpdateRateSeconds                                           OFFSET(get<float>, {0x2CC, 4, 0, 0})
	CMember(EElectroBeamState)                         BeamState                                                   OFFSET(get<T>, {0x2D8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RecalculatedElectroBeam.StartRecalculatingBeam
	// void StartRecalculatingBeam();                                                                                           // [0x1855ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RecalculatedElectroBeam.SetMaxRange
	// void SetMaxRange(float InMaxRange);                                                                                      // [0x1855c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RecalculatedElectroBeam.OnRep_BeamState
	// void OnRep_BeamState();                                                                                                  // [0x1854c90] Final|Native|Protected 
};

/// Class /Script/FSD.SentryElectroBeam
/// Size: 0x0010 (0x0002E0 - 0x0002F0)
class ASentryElectroBeam : public ARecalculatedElectroBeam
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(TArray<class ARedeployableSentryGun*>)     Sentries                                                    OFFSET(get<T>, {0x2E0, 16, 0, 0})
};

/// Class /Script/FSD.CrossbowElectroBeam
/// Size: 0x0000 (0x0002E0 - 0x0002E0)
class ACrossbowElectroBeam : public ARecalculatedElectroBeam
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
};

/// Class /Script/FSD.ElevatorPlant
/// Size: 0x00D0 (0x000220 - 0x0002F0)
class AElevatorPlant : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	SMember(FMulticastInlineDelegate)                  OnStartTimelineEvent                                        OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  COnStateChangedEvent                                        OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	CMember(class UAudioComponent*)                    MovingSoundComponent                                        OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class USoundCue*)                          GrabSound                                                   OFFSET(get<T>, {0x248, 8, 0, 0})
	SMember(FVector)                                   RestPositionOffset                                          OFFSET(getStruct<T>, {0x250, 12, 0, 0})
	SMember(FVector)                                   RelativeRestLocation                                        OFFSET(getStruct<T>, {0x25C, 12, 0, 0})
	SMember(FVector)                                   RelativeDestinationLocation                                 OFFSET(getStruct<T>, {0x268, 12, 0, 0})
	SMember(FVector)                                   BaseTangentDirectionOffset                                  OFFSET(getStruct<T>, {0x274, 12, 0, 0})
	SMember(FVector)                                   LeafTangentDirectionOffset                                  OFFSET(getStruct<T>, {0x280, 12, 0, 0})
	SMember(FVector)                                   LeafLocationNoise                                           OFFSET(getStruct<T>, {0x28C, 12, 0, 0})
	SMember(FRotator)                                  LeafNoiseRotator                                            OFFSET(getStruct<T>, {0x298, 12, 0, 0})
	DMember(float)                                     BaseTangentLength                                           OFFSET(get<float>, {0x2A4, 4, 0, 0})
	CMember(class USplineMeshComponent*)               CSplineMesh                                                 OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class USceneComponent*)                    CVineBase                                                   OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class USceneComponent*)                    CVineLeaf                                                   OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(float)                                     InitialBaseTangentLength                                    OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     LeafLocationNoiseSize                                       OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     VineMovementAlpha                                           OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(bool)                                      IsMoving                                                    OFFSET(get<bool>, {0x2DC, 1, 0, 0})
	DMember(bool)                                      IsOpen                                                      OFFSET(get<bool>, {0x2DD, 1, 0, 0})
	DMember(bool)                                      Extend                                                      OFFSET(get<bool>, {0x2DE, 1, 0, 0})
	CMember(class UCurveFloat*)                        DipOffsetCurve                                              OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UCurveFloat*)                        LocationLerpCurve                                           OFFSET(get<T>, {0x2E8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ElevatorPlant.SetLeafNoiseRotator
	// void SetLeafNoiseRotator(FRotator& aRotator);                                                                            // [0x1855b90] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ElevatorPlant.SetLeafLocationNoise
	// void SetLeafLocationNoise(FVector& aVector);                                                                             // [0x1855af0] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ElevatorPlant.SetIsOpen
	// void SetIsOpen(bool aValue);                                                                                             // [0x1855a60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ElevatorPlant.SetIsExtended
	// void SetIsExtended(bool aValue);                                                                                         // [0x18559d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ElevatorPlant.SetBaseTangentLength
	// void SetBaseTangentLength(float Value);                                                                                  // [0x1855950] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ElevatorPlant.SetBaseTangentDirectionOffset
	// void SetBaseTangentDirectionOffset(FVector& aVector);                                                                    // [0x18558b0] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ElevatorPlant.OnRep_RelavtiveDestinationLocation
	// void OnRep_RelavtiveDestinationLocation();                                                                               // [0x1854d10] Final|Native|Protected 
	// Function /Script/FSD.ElevatorPlant.OnRep_Open
	// void OnRep_Open();                                                                                                       // [0x1854cf0] Final|Native|Protected 
	// Function /Script/FSD.ElevatorPlant.OnMatchStarted
	// void OnMatchStarted();                                                                                                   // [0x1854a80] Final|Native|Protected 
	// Function /Script/FSD.ElevatorPlant.MoreTick
	// void MoreTick(FVector& DipOffset, float aValue);                                                                         // [0x18547b0] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ElevatorPlant.GetVineMovementAlpha
	// float GetVineMovementAlpha();                                                                                            // [0x1854790] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ElevatorPlant.GetRelativeRestLocation
	// FVector GetRelativeRestLocation();                                                                                       // [0x1854760] Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ElevatorPlant.GetRelativeDestinationLocation
	// FVector GetRelativeDestinationLocation();                                                                                // [0x1854730] Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ElevatorPlant.GetLeafLocationNoiseSize
	// float GetLeafLocationNoiseSize();                                                                                        // [0x18546b0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ElevatorPlant.GetIsMoving
	// bool GetIsMoving();                                                                                                      // [0x1854660] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ElevatorPlant.GetIsExtended
	// bool GetIsExtended();                                                                                                    // [0x1854640] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ElevatorPlant.GetInitialTangentLenth
	// float GetInitialTangentLenth();                                                                                          // [0x1854620] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.EliminationDescriptors
/// Size: 0x0010 (0x000000 - 0x000010)
class FEliminationDescriptors : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UEnemyDescriptor*>)           Descriptors                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.EliminationTarget
/// Size: 0x0010 (0x000000 - 0x000010)
class FEliminationTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class AFSDPawn*>)                   Targets                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.EliminationObjective
/// Size: 0x00A0 (0x000180 - 0x000220)
class UEliminationObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	DMember(int32_t)                                   ObjectCount                                                 OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(TArray<int32_t>)                           ExcludeRoomIDs                                              OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ObjectToSpawn                                               OFFSET(get<T>, {0x1A0, 40, 0, 0})
	CMember(class UCaveInfluencer*)                    CaveInfluencer                                              OFFSET(get<T>, {0x1C8, 8, 0, 0})
	DMember(float)                                     DebrisRadius                                                OFFSET(get<float>, {0x1D0, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<UDebrisBase*>>)      ObjectDebris                                                OFFSET(get<T>, {0x1D8, 16, 0, 0})
	DMember(int32_t)                                   EnemiesKilled                                               OFFSET(get<int32_t>, {0x1E8, 4, 0, 0})
	DMember(int32_t)                                   EnemiesToKill                                               OFFSET(get<int32_t>, {0x1EC, 4, 0, 0})
	CMember(TArray<FEliminationDescriptors>)           TargetDescriptors                                           OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TArray<FEliminationDescriptors>)           TargetQueue                                                 OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(TArray<FEliminationTarget>)                ActiveEliminationTargets                                    OFFSET(get<T>, {0x210, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EliminationObjective.RegisterEliminationTargets
	// void RegisterEliminationTargets(TArray<AFSDPawn*>& Targets);                                                             // [0x185a560] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.EliminationObjective.ReceiveTargetSpawned
	// void ReceiveTargetSpawned();                                                                                             // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EliminationObjective.ReceiveTargetKilled
	// void ReceiveTargetKilled();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EliminationObjective.OnTargetKilled
	// void OnTargetKilled(class UHealthComponentBase* Health);                                                                 // [0x185a4d0] Final|Native|Protected 
	// Function /Script/FSD.EliminationObjective.OnRep_EnemiesToKill
	// void OnRep_EnemiesToKill(int32_t prevAmount);                                                                            // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.EliminationObjective.OnRep_EnemiesKilled
	// void OnRep_EnemiesKilled(int32_t prevAmount);                                                                            // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.EliminationObjective.GetNextTargetInQueue
	// TArray<UEnemyDescriptor*> GetNextTargetInQueue();                                                                        // [0x1859ee0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.EncounterActor
/// Size: 0x0000 (0x000220 - 0x000220)
class AEncounterActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:


	/// Functions
	// Function /Script/FSD.EncounterActor.Receive_EncounterHasSpawned
	// void Receive_EncounterHasSpawned(class APawn* spawnedPawn);                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Struct /Script/FSD.ManagedEncounterItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FManagedEncounterItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UEnemyDescriptor*)                   descriptor                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   amount                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.PrePlacedEncounterItem
/// Size: 0x0050 (0x000000 - 0x000050)
class FPrePlacedEncounterItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UEnemyDescriptor*)                   descriptor                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                Location                                                    OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	CMember(class AEncounterActor*)                    EncounterActor                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   RoomID                                                      OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      IsRoomID                                                    OFFSET(get<bool>, {0x4C, 1, 0, 0})
};

/// Struct /Script/FSD.EncounterManagerItem
/// Size: 0x0050 (0x000000 - 0x000050)
class FEncounterManagerItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FManagedEncounterItem>)             ManagedEcnounterItems                                       OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FPrePlacedEncounterItem>)           PrePlacedEncounterItems                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   ID                                                          OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(bool)                                      IsRoom                                                      OFFSET(get<bool>, {0x24, 1, 0, 0})
	SMember(FDelegateProperty)                         Callback                                                    OFFSET(getStruct<T>, {0x3C, 16, 0, 0})
};

/// Class /Script/FSD.EncounterManager
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UEncounterManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	DMember(float)                                     SpawnDistanceFromRoomBounds                                 OFFSET(get<float>, {0xB0, 4, 0, 0})
	CMember(TArray<FEncounterManagerItem>)             Encounters                                                  OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(class AProceduralSetup*)                   ProceduralSetup                                             OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UEnemySpawnManager*)                 SpawnManager                                                OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           EnemyPool                                                   OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           EncounterPool                                               OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<class UCritterDescriptor*>)         CritterPool                                                 OFFSET(get<T>, {0xF8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EncounterManager.ShowSpawnLocations
	// void ShowSpawnLocations();                                                                                               // [0x185a6a0] Final|Exec|Native|Public 
	// Function /Script/FSD.EncounterManager.GetEnemyPool
	// TArray<UEnemyDescriptor*> GetEnemyPool();                                                                                // [0x1859e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EncounterManager.GetEncounterPool
	// TArray<UEnemyDescriptor*> GetEncounterPool();                                                                            // [0x1859bd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EncounterManager.GetCritterPool
	// TArray<UCritterDescriptor*> GetCritterPool();                                                                            // [0x1859b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EncounterManager.AddEncounterFromGroup
	// void AddEncounterFromGroup(class UEnemyGroupDescriptor* Group, float Difficulty, FVector Location, float Radius);        // [0x1859960] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/FSD.EncounterRareCritterItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FEncounterRareCritterItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class URareCritterDescriptor*)             Critter                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Chance                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.EncounterSpecialItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FEncounterSpecialItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UEnemyDescriptor*)                   enemy                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     BaseChance                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      CanSpawnInDeepDive                                          OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Struct /Script/FSD.EliteEnemyBan
/// Size: 0x0010 (0x000000 - 0x000010)
class FEliteEnemyBan : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FInt32Interval)                            AffectedPlayerCount                                         OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UMissionTemplate*)                   Template                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FSD.EliteEnemyEntry
/// Size: 0x0040 (0x000000 - 0x000040)
class FEliteEnemyEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     HeroChance                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<class UClass*>)                     ComponentsToAdd                                             OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      OverrideHealthScaling                                       OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(TArray<FEliteEnemyBan>)                    Bans                                                        OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(EEnemyHealthScaling)                       HealthScalingOverride                                       OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Class /Script/FSD.EncounterSettings
/// Size: 0x0138 (0x000030 - 0x000168)
class UEncounterSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FIRandRange)                               StationaryEnemyCount                                        OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           CommonEnemies                                               OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           SpecialEnemies                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           DisruptiveEnemies                                           OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           StationaryEnemies                                           OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<class UCritterDescriptor*>)         CommonCritters                                              OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<FEncounterRareCritterItem>)         RareCritters                                                OFFSET(get<T>, {0x88, 16, 0, 0})
	CMember(TArray<FEncounterSpecialItem>)             SpecialEncounters                                           OFFSET(get<T>, {0x98, 16, 0, 0})
	DMember(float)                                     RequiredDifficultyPerDiversity                              OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     GlobalDifficultyScale                                       OFFSET(get<float>, {0xAC, 4, 0, 0})
	SMember(FRandInterval)                             EncounterDifficulty                                         OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FRandInterval)                             StationaryDifficulty                                        OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FRandRange)                                CritterSpawnDifficulty                                      OFFSET(getStruct<T>, {0xD0, 8, 0, 0})
	SMember(FGameplayTag)                              SmallRoomTag                                                OFFSET(getStruct<T>, {0xD8, 8, 0, 0})
	SMember(FGameplayTag)                              MediumRoomTag                                               OFFSET(getStruct<T>, {0xE0, 8, 0, 0})
	SMember(FGameplayTag)                              LargeRoomTag                                                OFFSET(getStruct<T>, {0xE8, 8, 0, 0})
	DMember(float)                                     SmallRoomDifficultyModifier                                 OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     MediumRoomDifficultyModifier                                OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     LargeRoomDifficultyModifier                                 OFFSET(get<float>, {0xF8, 4, 0, 0})
	CMember(TMap<class UEnemyDescriptor*, FEliteEnemyEntry>) HeroEnemies                                           OFFSET(get<T>, {0x100, 80, 0, 0})
	SMember(FRandInterval)                             HeroEnemySpawn                                              OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	CMember(class UMutator*)                           TestMutator                                                 OFFSET(get<T>, {0x160, 8, 0, 0})
};

/// Class /Script/FSD.EndStatusEffectOnLanding
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UEndStatusEffectOnLanding : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TWeakObjectPtr<class UStatusEffect*>)      EffectToCancel                                              OFFSET(get<T>, {0xB8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.EndStatusEffectOnLanding.OnOwnerStateChanged
	// void OnOwnerStateChanged(ECharacterState State);                                                                         // [0x185a200] Final|Native|Public  
};

/// Class /Script/FSD.EnemyFamily
/// Size: 0x0020 (0x000030 - 0x000050)
class UEnemyFamily : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x38, 24, 0, 0})
};

/// Class /Script/FSD.ObjectInfoComponent
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UObjectInfoComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FSD.ObjectInfoComponent.HasMissionControlLookAtShout
	// bool HasMissionControlLookAtShout(class UPrimitiveComponent* TargetComponent);                                           // [0x193fa30] Native|Public|Const  
	// Function /Script/FSD.ObjectInfoComponent.GetMissionControlLookAtShout
	// class UDialogDataAsset* GetMissionControlLookAtShout(class UPrimitiveComponent* TargetComponent);                        // [0x193f320] Native|Public|Const  
	// Function /Script/FSD.ObjectInfoComponent.GetLookAtShout
	// class UDialogDataAsset* GetLookAtShout(class UPrimitiveComponent* TargetComponent);                                      // [0x193f280] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectInfoComponent.GetIsPingableByLaserpointer
	// bool GetIsPingableByLaserpointer(class UPrimitiveComponent* TargetComponent);                                            // [0x193f150] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectInfoComponent.GetInGameName
	// FText GetInGameName(class UPrimitiveComponent* TargetComponent);                                                         // [0x193ef30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectInfoComponent.GetInGameIconTint
	// FLinearColor GetInGameIconTint(class UPrimitiveComponent* TargetComponent);                                              // [0x193ee80] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectInfoComponent.GetInGameIcon
	// class UTexture2D* GetInGameIcon(class UPrimitiveComponent* TargetComponent);                                             // [0x193ede0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectInfoComponent.GetInGameDescription
	// FText GetInGameDescription(class UPrimitiveComponent* TargetComponent);                                                  // [0x193ed30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectInfoComponent.GetContextWidget
	// class UActorContextWidget* GetContextWidget(class APlayerController* InPlayerController);                                // [0x193ec90] Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.SimpleObjectInfoData
/// Size: 0x0040 (0x000000 - 0x000040)
class FSimpleObjectInfoData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FText)                                     InGameName                                                  OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     InGameDescription                                           OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(class UDialogDataAsset*)                   LookAtShout                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.SimpleObjectInfoComponent
/// Size: 0x00D0 (0x0000B0 - 0x000180)
class USimpleObjectInfoComponent : public UObjectInfoComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FText)                                     InGameName                                                  OFFSET(getStruct<T>, {0xB0, 24, 0, 0})
	SMember(FText)                                     InGameDescription                                           OFFSET(getStruct<T>, {0xC8, 24, 0, 0})
	CMember(class UDialogDataAsset*)                   LookAtShout                                                 OFFSET(get<T>, {0xE0, 8, 0, 0})
	DMember(bool)                                      bHasMissionControlLookAtShout                               OFFSET(get<bool>, {0xE8, 1, 0, 0})
	CMember(class UDialogDataAsset*)                   MissionControlLookAtShout                                   OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   LookAtShoutOverride                                         OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UTexture2D*)                         IconOverride                                                OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(bool)                                      bIsPingableByLaserpointer                                   OFFSET(get<bool>, {0x118, 1, 0, 0})
	CMember(class UClass*)                             ContextWidgetClass                                          OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(TMap<TWeakObjectPtr<USceneComponent*>, FSimpleObjectInfoData>) ComponentMap                            OFFSET(get<T>, {0x128, 80, 0, 0})
	CMember(class UActorContextWidget*)                ContextWidget                                               OFFSET(get<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SimpleObjectInfoComponent.SetInGameName
	// void SetInGameName(FString GameName);                                                                                    // [0x19402a0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.SimpleObjectInfoComponent.SetInGameDescription
	// void SetInGameDescription(FString GameDescription);                                                                      // [0x1940200] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.SimpleObjectInfoComponent.SetContextWidget
	// void SetContextWidget(class UActorContextWidget* InContextWidget);                                                       // [0x1940170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SimpleObjectInfoComponent.OverrideLookAtShoutOrUseDefault
	// void OverrideLookAtShoutOrUseDefault(class UDialogDataAsset* InShout);                                                   // [0x193ffb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SimpleObjectInfoComponent.OverrideLookAtShout
	// void OverrideLookAtShout(class UDialogDataAsset* InShout);                                                               // [0x193ff20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SimpleObjectInfoComponent.OverrideIcon
	// void OverrideIcon(class UTexture2D* InTexture);                                                                          // [0x193fe90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SimpleObjectInfoComponent.GetDefaultLookAtShout
	// class UDialogDataAsset* GetDefaultLookAtShout();                                                                         // [0x180d2f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SimpleObjectInfoComponent.ClearLookAtShoutOverride
	// void ClearLookAtShoutOverride();                                                                                         // [0x193eae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SimpleObjectInfoComponent.AddComponentObjectInfo
	// void AddComponentObjectInfo(class USceneComponent* TargetComponent, FSimpleObjectInfoData& Data);                        // [0x193e750] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.EnemyComponent
/// Size: 0x0038 (0x000180 - 0x0001B8)
class UEnemyComponent : public USimpleObjectInfoComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	CMember(class UEnemyFamily*)                       Family                                                      OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   KillShout                                                   OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class UEnemyID*)                           EnemyID                                                     OFFSET(get<T>, {0x190, 8, 0, 0})
	SMember(FString)                                   mixerName                                                   OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMixerNameChange                                           OFFSET(getStruct<T>, {0x1A8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyComponent.GetID
	// class UEnemyID* GetID();                                                                                                 // [0x1859ec0] Final|Native|Public  
	// Function /Script/FSD.EnemyComponent.GetFamilyName
	// FText GetFamilyName();                                                                                                   // [0x1859e60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyComponent.GetFamilyIcon
	// class UTexture2D* GetFamilyIcon();                                                                                       // [0x1859e30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.TestAnimInstanceProxy
/// Size: 0x0020 (0x000770 - 0x000790)
class FTestAnimInstanceProxy : public FAnimInstanceProxy
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1936;

public:
	DMember(bool)                                      IsAlive                                                     OFFSET(get<bool>, {0x770, 1, 0, 0})
	DMember(float)                                     RandomStartPosition                                         OFFSET(get<float>, {0x774, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x778, 4, 0, 0})
	DMember(bool)                                      IsMoving                                                    OFFSET(get<bool>, {0x77C, 1, 0, 0})
	DMember(float)                                     WalkCyclePlayRate                                           OFFSET(get<float>, {0x780, 4, 0, 0})
};

/// Class /Script/FSD.TestAnimInstance
/// Size: 0x07B8 (0x0002B8 - 0x000A70)
class UTestAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2672;

public:
	SMember(FTestAnimInstanceProxy)                    AnimInstanceProxy                                           OFFSET(getStruct<T>, {0x2C0, 1936, 0, 0})
	DMember(float)                                     WalkCycleSpeed                                              OFFSET(get<float>, {0xA50, 4, 0, 0})
	DMember(float)                                     StartMovingSpeed                                            OFFSET(get<float>, {0xA54, 4, 0, 0})
	DMember(float)                                     StopMovingSpeed                                             OFFSET(get<float>, {0xA58, 4, 0, 0})
	DMember(float)                                     WalkCycleMinRate                                            OFFSET(get<float>, {0xA5C, 4, 0, 0})
	DMember(float)                                     MeshScale                                                   OFFSET(get<float>, {0xA60, 4, 0, 0})
};

/// Class /Script/FSD.JellyFishAnimInstance
/// Size: 0x0010 (0x000350 - 0x000360)
class UJellyFishAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(float)                                     HorizontalAngle                                             OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     VerticalSpeed                                               OFFSET(get<float>, {0x354, 4, 0, 0})
};

/// Struct /Script/FSD.GliderAnimSync
/// Size: 0x0020 (0x000000 - 0x000020)
class FGliderAnimSync : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     Time                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     AnimAlphaSync                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FVector)                                   VelocityPercent                                             OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(bool)                                      DownUpBlendBool                                             OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(bool)                                      RightLeftBlendBool                                          OFFSET(get<bool>, {0x15, 1, 0, 0})
	DMember(float)                                     VerticalAddBlend                                            OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     HorizontalAddBlend                                          OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Class /Script/FSD.GliderBeastAnimInstance
/// Size: 0x0040 (0x000350 - 0x000390)
class UGliderBeastAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(float)                                     SyncAnimLength                                              OFFSET(get<float>, {0x350, 4, 0, 0})
	SMember(FGliderAnimSync)                           AnimSync                                                    OFFSET(getStruct<T>, {0x354, 32, 0, 0})
	DMember(bool)                                      IsFrozen                                                    OFFSET(get<bool>, {0x374, 1, 0, 0})
};

/// Class /Script/FSD.EnemyAttacker
/// Size: 0x0000 (0x000028 - 0x000028)
class UEnemyAttacker : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.EnemyAttacker.GetAttackDamageModifier
	// float GetAttackDamageModifier();                                                                                         // [0x1859b10] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EnemyBufferComponent
/// Size: 0x00C8 (0x0000B0 - 0x000178)
class UEnemyBufferComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FName)                                     BufferParticleSocket                                        OFFSET(getStruct<T>, {0xB8, 8, 0, 0})
	CMember(class UParticleSystem*)                    Particles                                                   OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     ParticleTangentSize                                         OFFSET(get<float>, {0xC8, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBuffingChangedEvent                                       OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	DMember(float)                                     BuffRadius                                                  OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(int32_t)                                   MaxBuffedTargets                                            OFFSET(get<int32_t>, {0xE4, 4, 0, 0})
	SMember(FGameplayTagQuery)                         BuffQuery                                                   OFFSET(getStruct<T>, {0xE8, 72, 0, 0})
	CMember(class UClass*)                             SubclassBuffQuery                                           OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TArray<class AFSDPawn*>)                   BuffTargets                                                 OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<class UParticleSystemComponent*>)   ParticleInstances                                           OFFSET(get<T>, {0x148, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyBufferComponent.SetBuffingEnabled
	// void SetBuffingEnabled(bool Enabled);                                                                                    // [0x185a610] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyBufferComponent.OnPawnDied
	// void OnPawnDied(class UHealthComponentBase* Health);                                                                     // [0x185a280] Final|Native|Protected 
	// Function /Script/FSD.EnemyBufferComponent.OnOwnerDied
	// void OnOwnerDied(class UHealthComponentBase* Health);                                                                    // [0x185a170] Final|Native|Protected 
};

/// Struct /Script/FSD.ControlEnemyState
/// Size: 0x0060 (0x000000 - 0x000060)
class FControlEnemyState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class ADeepPathfinderCharacter*)           ControlledEnemy                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                InitialTargetTransform                                      OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	DMember(float)                                     InitialTargetBlendTotalTime                                 OFFSET(get<float>, {0x40, 4, 0, 0})
	SMember(FVector)                                   InitialCharacterVelocity                                    OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FVector)                                   InitialEnemyVelocity                                        OFFSET(getStruct<T>, {0x50, 12, 0, 0})
};

/// Class /Script/FSD.EnemyControlStateComponent
/// Size: 0x0190 (0x000100 - 0x000290)
class UEnemyControlStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	DMember(bool)                                      UseThirdPersonCam                                           OFFSET(get<bool>, {0x100, 1, 0, 0})
	SMember(FControlEnemyState)                        StateData                                                   OFFSET(getStruct<T>, {0x110, 96, 0, 0})
	CMember(EEnemyControlState)                        ControlState                                                OFFSET(get<T>, {0x178, 1, 0, 0})
	SMember(FQuat)                                     AngularVelocity                                             OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	SMember(FQuat)                                     ControlRotation                                             OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyControlStateComponent.ServerExit
	// void ServerExit();                                                                                                       // [0x184b4a0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.EnemyControlStateComponent.OnRep_StateData
	// void OnRep_StateData(FControlEnemyState& oldState);                                                                      // [0x185a3b0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.EnemyControlStateComponent.OnRep_ControlState
	// void OnRep_ControlState(EEnemyControlState oldState);                                                                    // [0x185a310] Final|Native|Protected 
	// Function /Script/FSD.EnemyControlStateComponent.OnEnemyCrashMontageEnded
	// void OnEnemyCrashMontageEnded(class UAnimMontage* Montage, bool interrupted);                                            // [0x185a0a0] Final|Native|Protected 
	// Function /Script/FSD.EnemyControlStateComponent.OnControllingEnemyAttached
	// void OnControllingEnemyAttached();                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EnemyControlStateComponent.OnControllingEnemy
	// void OnControllingEnemy(bool IsControlling);                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EnemyControlStateComponent.JumpPressed
	// void JumpPressed();                                                                                                      // [0x185a080] Final|Native|Protected 
	// Function /Script/FSD.EnemyControlStateComponent.GetAiPlayerControlComponent
	// class UAIPlayerControlComponent* GetAiPlayerControlComponent();                                                          // [0x1859ae0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.EnemyDebris
/// Size: 0x0018 (0x000000 - 0x000018)
class FEnemyDebris : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(float)                                     InfluenceRange                                              OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TArray<class UDebrisBase*>)                Debris                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.SpawnRarityItem
/// Size: 0x0008 (0x000000 - 0x000008)
class FSpawnRarityItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Rarity                                                      OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Class /Script/FSD.EnemyDescriptor
/// Size: 0x01E8 (0x000030 - 0x000218)
class UEnemyDescriptor : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	CMember(class UEnemyID*)                           EnemyID                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EnemyClass                                                  OFFSET(get<T>, {0x38, 40, 0, 0})
	CMember(EVeteranScaling)                           VeteranScaling                                              OFFSET(get<T>, {0x60, 1, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           VeteranClasses                                              OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TMap<class UBiome*, TSoftObjectPtr<UClass*>>) BiomeEnemyClassOverrides                                 OFFSET(get<T>, {0x78, 80, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EliteEnemyClass                                             OFFSET(get<T>, {0xC8, 40, 0, 0})
	CMember(TSet<UMissionTemplate*>)                   BannedMissionTypes                                          OFFSET(get<T>, {0xF0, 80, 0, 0})
	CMember(EEnemySignificance)                        EnemySignificance                                           OFFSET(get<T>, {0x140, 1, 0, 0})
	SMember(FVector)                                   SpawnOffset                                                 OFFSET(getStruct<T>, {0x144, 12, 0, 0})
	DMember(bool)                                      UsesSpawnEffects                                            OFFSET(get<bool>, {0x150, 1, 0, 0})
	CMember(ECreatureSize)                             CreatureSize                                                OFFSET(get<T>, {0x154, 4, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UCaveInfluencer*)                    CaveInfluencer                                              OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(TArray<FEnemyDebris>)                      Debris                                                      OFFSET(get<T>, {0x168, 16, 0, 0})
	DMember(float)                                     InfluencerRange                                             OFFSET(get<float>, {0x178, 4, 0, 0})
	CMember(class UClass*)                             PlacementCarver                                             OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(DeepPathFinderType)                        PathfinderType                                              OFFSET(get<T>, {0x188, 1, 0, 0})
	SMember(FGameplayTagQuery)                         PlacementRoomQuery                                          OFFSET(getStruct<T>, {0x190, 72, 0, 0})
	DMember(float)                                     SpawnSpread                                                 OFFSET(get<float>, {0x1D8, 4, 0, 0})
	DMember(int32_t)                                   IdealSpawnSize                                              OFFSET(get<int32_t>, {0x1DC, 4, 0, 0})
	DMember(bool)                                      CanBeUsedForConstantPressure                                OFFSET(get<bool>, {0x1E0, 1, 0, 0})
	DMember(bool)                                      CanBeUsedInEncounters                                       OFFSET(get<bool>, {0x1E1, 1, 0, 0})
	DMember(float)                                     DifficultyRating                                            OFFSET(get<float>, {0x1E4, 4, 0, 0})
	DMember(int32_t)                                   MinSpawnCount                                               OFFSET(get<int32_t>, {0x1E8, 4, 0, 0})
	DMember(int32_t)                                   MaxSpawnCount                                               OFFSET(get<int32_t>, {0x1EC, 4, 0, 0})
	DMember(float)                                     Rarity                                                      OFFSET(get<float>, {0x1F0, 4, 0, 0})
	DMember(float)                                     SpawnAmountModifier                                         OFFSET(get<float>, {0x1F4, 4, 0, 0})
	DMember(int32_t)                                   RequiredMainCampaignProgress                                OFFSET(get<int32_t>, {0x1F8, 4, 0, 0})
	DMember(bool)                                      UsesSpawnRarityModifiers                                    OFFSET(get<bool>, {0x1FC, 1, 0, 0})
	CMember(TArray<FSpawnRarityItem>)                  SpawnRarityModifiers                                        OFFSET(get<T>, {0x200, 16, 0, 0})
	CMember(EEnemyDescriptorCheatClass)                CheatClass                                                  OFFSET(get<T>, {0x210, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyDescriptor.GetEnemyClass
	// class UClass* GetEnemyClass(class UBiome* Biome, bool IsElite);                                                          // [0x18617a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyDescriptor.FindDescriptorsForCheatMenu
	// TArray<UEnemyDescriptor*> FindDescriptorsForCheatMenu(EEnemyDescriptorCheatClass CheatClass);                            // [0x18614f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyDescriptor.FindAllDescriptorsForCheatMenu
	// TArray<UEnemyDescriptor*> FindAllDescriptorsForCheatMenu();                                                              // [0x1861470] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.HealthComponentBase
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UHealthComponentBase : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FMulticastInlineDelegate)                  OnHealthChanged                                             OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDamageHealed                                              OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDamageTaken                                               OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHit                                                       OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBodypartHit                                               OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDeath                                                     OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRadialDamage                                              OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHitByHitScan                                              OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCanTakeDamageChanged                                      OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	DMember(bool)                                      ShowLaserPointMarkerWhenDead                                OFFSET(get<bool>, {0x14C, 1, 0, 0})
	DMember(bool)                                      canTakeDamage                                               OFFSET(get<bool>, {0x14D, 1, 0, 0})
	DMember(bool)                                      PassthroughTemperatureDamage                                OFFSET(get<bool>, {0x14E, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.HealthComponentBase.TakeRadialDamage
	// float TakeRadialDamage(float damageAmount, FVector BlastCenter, float BlastRadius, float MaxDamageRadius, float MinDamagePct, FDamageData& DamageData); // [0x18e67d0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.HealthComponentBase.TakeDamageSimple
	// void TakeDamageSimple(float damageAmount, class AActor* DamageCauser, class UDamageClass* DamageClass);                  // [0x18e65a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HealthComponentBase.SetHealthDirectly
	// void SetHealthDirectly(float newHealthValue);                                                                            // [0x18e6420] Native|Public|BlueprintCallable 
	// Function /Script/FSD.HealthComponentBase.SetCanTakeDamage
	// void SetCanTakeDamage(bool canTakeDamage);                                                                               // [0x18e6390] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HealthComponentBase.Kill
	// void Kill(class AActor* DamageCauser);                                                                                   // [0x18e5e20] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HealthComponentBase.IsDead
	// bool IsDead();                                                                                                           // [0x18e5de0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.IsAlive
	// bool IsAlive();                                                                                                          // [0x18e5da0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.Heal
	// float Heal(float amount);                                                                                                // [0x18e5c70] Native|Public|BlueprintCallable 
	// Function /Script/FSD.HealthComponentBase.GetShowHealthBar
	// bool GetShowHealthBar();                                                                                                 // [0x18e5a20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.GetHealthPct
	// float GetHealthPct();                                                                                                    // [0x18e58e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.GetHealthComponentForCollider
	// TScriptInterface<Class> GetHealthComponentForCollider(class UPrimitiveComponent* Primitive);                             // [0x18e5830] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.GetHealthBarWorldOffset
	// FVector GetHealthBarWorldOffset();                                                                                       // [0x18e57f0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.GetHealth
	// float GetHealth();                                                                                                       // [0x18e57b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.GetGenericImpactParticles
	// class UParticleSystem* GetGenericImpactParticles();                                                                      // [0x18e5690] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.GetCanTakeDamage
	// bool GetCanTakeDamage();                                                                                                 // [0x18e5540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.CanTakeDamageFrom
	// bool CanTakeDamageFrom(class UDamageClass* DamageClass);                                                                 // [0x18e52c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponentBase.CanTakeDamageDelegate__DelegateSignature
	// void CanTakeDamageDelegate__DelegateSignature(bool OutCanTakeDamage);                                                    // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.HealthComponent
/// Size: 0x0110 (0x000160 - 0x000270)
class UHealthComponent : public UHealthComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FMulticastInlineDelegate)                  OnArmorChanged                                              OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnArmorDamaged                                              OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnArmorHealed                                               OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDeathDetailed                                             OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnNewHealthSegment                                          OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x1B0, 4, 0, 0})
	CMember(TArray<float>)                             HealthSegmentSizes                                          OFFSET(get<T>, {0x1B8, 16, 0, 0})
	DMember(bool)                                      CanDamageThroughSegments                                    OFFSET(get<bool>, {0x1C8, 1, 0, 0})
	CMember(class AActor*)                             LastDamageCauser                                            OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(TArray<class USubHealthComponent*>)        SubHealthComponents                                         OFFSET(get<T>, {0x1E0, 16, 0, 0})
	DMember(bool)                                      ShouldUseLargestSubhealthDamageTaken                        OFFSET(get<bool>, {0x1F0, 1, 0, 0})
	DMember(bool)                                      InvulnerableToNonDefinedResistances                         OFFSET(get<bool>, {0x1F1, 1, 0, 0})
	CMember(TMap<class UPawnStat*, float>)             Resistances                                                 OFFSET(get<T>, {0x1F8, 80, 0, 0})
	DMember(float)                                     EnvironmentalDamageResistance                               OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(bool)                                      AffectedByGlobalWeakpointDamageMultiplier                   OFFSET(get<bool>, {0x24C, 1, 0, 0})
	DMember(bool)                                      UseDormancy                                                 OFFSET(get<bool>, {0x24D, 1, 0, 0})
	CMember(class UPawnStatsComponent*)                PawnStats                                                   OFFSET(get<T>, {0x250, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.HealthComponent.ToggleCanTakeDamage
	// void ToggleCanTakeDamage();                                                                                              // [0x18e69e0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.HealthComponent.TakePercentDamage
	// float TakePercentDamage(float PercentOfMax, FDamageData& DamageData);                                                    // [0x18e66c0] Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.HealthComponent.Resupply
	// void Resupply(float percentage);                                                                                         // [0x18e6230] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HealthComponent.OnRep_Damage
	// void OnRep_Damage(float oldDamage);                                                                                      // [0x18e5f70] Native|Protected     
	// Function /Script/FSD.HealthComponent.HealArmor
	// void HealArmor(float amount);                                                                                            // [0x18e5d10] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HealthComponent.HasArmor
	// bool HasArmor();                                                                                                         // [0x18e5c40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponent.GetMaxArmor
	// float GetMaxArmor();                                                                                                     // [0x18e59e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponent.GetHealthbarType
	// EHealthbarType GetHealthbarType();                                                                                       // [0x18e5940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponent.GetCurrentHealthSegment
	// void GetCurrentHealthSegment(int32_t& Segment, float& segmentHealth, float& segmentHealthPercent);                       // [0x18e5560] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.HealthComponent.GetArmorPct
	// float GetArmorPct();                                                                                                     // [0x18e5500] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponent.GetArmor
	// float GetArmor();                                                                                                        // [0x18e54c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HealthComponent.Client_ReceivedHit
	// void Client_ReceivedHit(float amount, FDamageData DamageData, bool anyHealthLost);                                       // [0x18e5380] Net|Native|Event|Protected|NetClient 
};

/// Class /Script/FSD.EnemyHealthComponent
/// Size: 0x0038 (0x000270 - 0x0002A8)
class UEnemyHealthComponent : public UHealthComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(EEnemyHealthScaling)                       EnemyHealthScaling                                          OFFSET(get<T>, {0x270, 1, 0, 0})
	DMember(float)                                     Courage                                                     OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(bool)                                      bShowHealthBar                                              OFFSET(get<bool>, {0x27C, 1, 0, 0})
	SMember(FVector)                                   HealthBarOffsetWorld                                        OFFSET(getStruct<T>, {0x280, 12, 0, 0})
	DMember(bool)                                      bIsBossFight                                                OFFSET(get<bool>, {0x28C, 1, 0, 0})
	DMember(int32_t)                                   BossFightHealthBarSegments                                  OFFSET(get<int32_t>, {0x290, 4, 0, 0})
	DMember(bool)                                      bRegisterEnemy                                              OFFSET(get<bool>, {0x294, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyHealthComponent.GetMaxHealth
	// float GetMaxHealth();                                                                                                    // [0x1861900] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EnemyLineOfSightComponent
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UEnemyLineOfSightComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FMulticastInlineDelegate)                  OnGaindedLineOfSight                                        OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLostLineOfSight                                           OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(class UMeshComponent*)                     OwnerMesh                                                   OFFSET(get<T>, {0xD0, 8, 0, 0})
	SMember(FName)                                     LoSFromSocketName                                           OFFSET(getStruct<T>, {0xD8, 8, 0, 0})
	DMember(float)                                     LoSInterval                                                 OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     LoSIntervalVariance                                         OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(bool)                                      AutoSetupOwnerMesh                                          OFFSET(get<bool>, {0x100, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyLineOfSightComponent.HasLineOfSight
	// bool HasLineOfSight();                                                                                                   // [0x1861960] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyLineOfSightComponent.GetIsDetecting
	// bool GetIsDetecting();                                                                                                   // [0x18618b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyLineOfSightComponent.AsyncTrace
	// void AsyncTrace();                                                                                                       // [0x18611a0] Final|Native|Protected 
};

/// Class /Script/FSD.EnemyMeleeAttackAnimNotify
/// Size: 0x0008 (0x000038 - 0x000040)
class UEnemyMeleeAttackAnimNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     AttackTag                                                   OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/FSD.EnemyAttackDescription
/// Size: 0x0020 (0x000000 - 0x000020)
class FEnemyAttackDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(EEnemyAttackType)                          range                                                       OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(EDamageType)                               DamageType                                                  OFFSET(get<T>, {0x19, 1, 0, 0})
};

/// Struct /Script/FSD.EnemyMinersManualStats
/// Size: 0x000C (0x000000 - 0x00000C)
class FEnemyMinersManualStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Health                                                      OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Damage                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   Speed                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.EnemyMinersManualData
/// Size: 0x0150 (0x000030 - 0x000180)
class UEnemyMinersManualData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(class UEnemyID*)                           EnemyID                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     RichDescription                                             OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	CMember(TArray<FText>)                             GameplayTips                                                OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(EEnemyFamily)                              Family                                                      OFFSET(get<T>, {0x78, 1, 0, 0})
	CMember(EEnemyType)                                EnemyType                                                   OFFSET(get<T>, {0x79, 1, 0, 0})
	CMember(TArray<FEnemyAttackDescription>)           AttackType                                                  OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<FEnemyAttackDescription>)           SpecialAttacks                                              OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<class UAnimSequenceBase*>)          AttackAnimations                                            OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(EArmorType)                                ArmorType                                                   OFFSET(get<T>, {0xB0, 1, 0, 0})
	SMember(FText)                                     Armor                                                       OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	SMember(FText)                                     Weakpoint                                                   OFFSET(getStruct<T>, {0xD0, 24, 0, 0})
	SMember(FEnemyMinersManualStats)                   EnemyStats                                                  OFFSET(getStruct<T>, {0xE8, 12, 0, 0})
	CMember(TArray<EDamageType>)                       Resistances                                                 OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<EDamageType>)                       Weaknesses                                                  OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<FText>)                             LoreInfo                                                    OFFSET(get<T>, {0x118, 16, 0, 0})
	DMember(bool)                                      AlwaysUnlocked                                              OFFSET(get<bool>, {0x128, 1, 0, 0})
	DMember(int32_t)                                   InfoUnlockSpeed                                             OFFSET(get<int32_t>, {0x12C, 4, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         EnemyIcon                                                   OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             PreviewActor                                                OFFSET(get<T>, {0x158, 40, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyMinersManualData.GetEnemyIcon
	// class UTexture2D* GetEnemyIcon();                                                                                        // [0x1861880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EnemyRangedAttackAnimNotify
/// Size: 0x0000 (0x000038 - 0x000038)
class UEnemyRangedAttackAnimNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FSD.StopLeadingNotify
/// Size: 0x0000 (0x000038 - 0x000038)
class UStopLeadingNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FSD.EnemySettings
/// Size: 0x0118 (0x000030 - 0x000148)
class UEnemySettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	SMember(FRandRange)                                EnemyWaveRange                                              OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(TMap<class UEnemyID*, class UEnemyDescriptor*>) EnemyDescriptor                                        OFFSET(get<T>, {0x38, 80, 0, 0})
	SMember(FGameplayTagQuery)                         EliteAllowQuery                                             OFFSET(getStruct<T>, {0x88, 72, 0, 0})
	CMember(TMap<class UEnemyDescriptor*, FEliteEnemyEntry>) HeroEnemies                                           OFFSET(get<T>, {0xD0, 80, 0, 0})
	SMember(FRandFloatInterval)                        HeroEnemySpawn                                              OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	DMember(int32_t)                                   EliteRequiredCampaignProgress                               OFFSET(get<int32_t>, {0x130, 4, 0, 0})
	CMember(TArray<class UClass*>)                     ExplodingEnemiesDamageComponents                            OFFSET(get<T>, {0x138, 16, 0, 0})
};

/// Struct /Script/FSD.SpawnRarityModifierItem
/// Size: 0x0008 (0x000000 - 0x000008)
class FSpawnRarityModifierItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/FSD.SpawnQueueItem
/// Size: 0x0080 (0x000000 - 0x000080)
class FSpawnQueueItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TSoftObjectPtr<class UClass*>)             EnemyClass                                                  OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(class UEnemyDescriptor*)                   enemy                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FDelegateProperty)                         Callback                                                    OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.EnemySpawnManager
/// Size: 0x01C0 (0x0000B0 - 0x000270)
class UEnemySpawnManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FMulticastInlineDelegate)                  OnEnemyDestroyed                                            OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEnemyDied                                                 OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEnemySpawned                                              OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(class USpawnEffectsComponent*)             SpawnEffects                                                OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(TArray<class APawn*>)                      ActiveEnemies                                               OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<class APawn*>)                      ActiveSwarmerEnemies                                        OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(TArray<class UClass*>)                     ActiveGlobalStatusEffects                                   OFFSET(get<T>, {0x110, 16, 0, 0})
	CMember(TMap<class UEnemyDescriptor*, FSpawnRarityModifierItem>) SpawnRarityModifiers                          OFFSET(get<T>, {0x120, 80, 0, 0})
	CMember(TArray<class APawn*>)                      ActiveCritters                                              OFFSET(get<T>, {0x170, 16, 0, 0})
	CMember(TArray<class APawn*>)                      CritcalEnemies                                              OFFSET(get<T>, {0x180, 16, 0, 0})
	DMember(int32_t)                                   MaxActiveEnemies                                            OFFSET(get<int32_t>, {0x190, 4, 0, 0})
	DMember(int32_t)                                   MaxActiveSwarmers                                           OFFSET(get<int32_t>, {0x194, 4, 0, 0})
	DMember(int32_t)                                   MaxActiveCritters                                           OFFSET(get<int32_t>, {0x198, 4, 0, 0})
	DMember(float)                                     MaxDistanceBeforeCleanup                                    OFFSET(get<float>, {0x19C, 4, 0, 0})
	SMember(FGameplayTag)                              SwarmerTag                                                  OFFSET(getStruct<T>, {0x1A0, 8, 0, 0})
	SMember(FGameplayTag)                              RegularTag                                                  OFFSET(getStruct<T>, {0x1A8, 8, 0, 0})
	SMember(FGameplayTag)                              CritterTag                                                  OFFSET(getStruct<T>, {0x1B0, 8, 0, 0})
	CMember(class AProceduralSetup*)                   ProceduralSetup                                             OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(TArray<FSpawnQueueItem>)                   SpawnQueue                                                  OFFSET(get<T>, {0x1C0, 16, 0, 0})
	DMember(bool)                                      bDestroyingAllEnemies                                       OFFSET(get<bool>, {0x1D0, 1, 0, 0})
	CMember(class UEliteEnemiesMutator*)               EliteMutator                                                OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UDifficultyManager*)                 DifficultyManager                                           OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemySpawnManager.SpawnerDestroyed
	// void SpawnerDestroyed(class APawn* Actor);                                                                               // [0x1862050] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemySpawnManager.SpawnEnemy
	// bool SpawnEnemy(class UEnemyDescriptor* descriptor, FTransform& Transform, FDelegateProperty& Callback, bool useSpawnFX, bool Alert); // [0x1861e30] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.EnemySpawnManager.SetSpawningEnabled
	// void SetSpawningEnabled(bool newSpawningEnabled);                                                                        // [0x1861da0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemySpawnManager.RemoveGlobalStatusEffect
	// void RemoveGlobalStatusEffect(class UClass* StatusEffect);                                                               // [0x1861d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemySpawnManager.RegisterSpawner
	// void RegisterSpawner(class APawn* Actor);                                                                                // [0x1861c80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemySpawnManager.RegisterSpawnedEnemy
	// void RegisterSpawnedEnemy(class AActor* enemy);                                                                          // [0x1861bf0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemySpawnManager.PromoteToCritical
	// void PromoteToCritical(class APawn* Pawn);                                                                               // [0x1861b60] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemySpawnManager.OnMatchStarted
	// void OnMatchStarted();                                                                                                   // [0x1861b40] Final|Native|Private 
	// Function /Script/FSD.EnemySpawnManager.OnMatchEnded
	// void OnMatchEnded();                                                                                                     // [0xbd29a0] Final|Native|Private 
	// Function /Script/FSD.EnemySpawnManager.GetSpawningEnabled
	// bool GetSpawningEnabled();                                                                                               // [0x1861940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemySpawnManager.FindEnemyByClass
	// class APawn* FindEnemyByClass(class UClass* PawnClass, bool isSwarmerEnemy);                                             // [0x18616d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemySpawnManager.FindEnemiesByClass
	// TArray<APawn*> FindEnemiesByClass(class UClass* PawnClass, bool isSwarmerEnemy);                                         // [0x18615c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemySpawnManager.EnemyDestroyed
	// void EnemyDestroyed(class AActor* Actor);                                                                                // [0x18613e0] Final|Native|Private 
	// Function /Script/FSD.EnemySpawnManager.EnemyDeath
	// void EnemyDeath(class UHealthComponentBase* HealthComponent);                                                            // [0x1861350] Final|Native|Private 
	// Function /Script/FSD.EnemySpawnManager.DestroyAllEnemies
	// void DestroyAllEnemies();                                                                                                // [0x1861260] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemySpawnManager.CanSpawn
	// bool CanSpawn(class UEnemyDescriptor* EnemyDescriptor);                                                                  // [0x18611c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemySpawnManager.AddGlobalStatusEffect
	// void AddGlobalStatusEffect(class UClass* StatusEffect);                                                                  // [0x18610d0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.SpawnEffectItem
/// Size: 0x0030 (0x00000C - 0x00003C)
class FSpawnEffectItem : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	CMember(ECreatureSize)                             CreatureSize                                                OFFSET(get<T>, {0xC, 4, 0, 0})
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
};

/// Struct /Script/FSD.SpawnEffectsArray
/// Size: 0x0018 (0x000108 - 0x000120)
class FSpawnEffectsArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TArray<FSpawnEffectItem>)                  Items                                                       OFFSET(get<T>, {0x108, 16, 0, 0})
};

/// Class /Script/FSD.SpawnEffectsComponent
/// Size: 0x0128 (0x0000B0 - 0x0001D8)
class USpawnEffectsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	SMember(FSpawnEffectsArray)                        ActiveEffects                                               OFFSET(getStruct<T>, {0xB0, 288, 0, 0})
	CMember(class UMaterialInstance*)                  BiomeMaterialOverride                                       OFFSET(get<T>, {0x1D0, 8, 0, 0})
};

/// Class /Script/FSD.PheromoneSpawnerComponent
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UPheromoneSpawnerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FRandRange)                                SpawnInterval                                               OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	DMember(float)                                     AttackPositioningCostModifier                               OFFSET(get<float>, {0xB8, 4, 0, 0})
	CMember(class UEnemyDescriptor*)                   enemy                                                       OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(TMap<class AActor*, float>)                InfectedActors                                              OFFSET(get<T>, {0xC8, 80, 0, 0})
};

/// Class /Script/FSD.EnemyDetonationSetting
/// Size: 0x0030 (0x000030 - 0x000060)
class UEnemyDetonationSetting : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UDamageComponent*)                   FireDamage                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     FireParticles                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class USoundCue*)                          FireSound                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDamageComponent*)                   IceDamage                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     IceParticles                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class USoundCue*)                          IceSound                                                    OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.TemperatureComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UTemperatureComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FMulticastInlineDelegate)                  OnTemperatureStatusChanged                                  OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     FrozenDamageBonusScale                                      OFFSET(get<float>, {0xD0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TemperatureComponent.TryPushHeatSource
	// bool TryPushHeatSource(class AActor* Target, float temperature, ETemperatureIntensity Intensity);                        // [0x19cea20] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.TemperatureComponent.TryPopHeatSource
	// bool TryPopHeatSource(class AActor* Target, float temperature, ETemperatureIntensity Intensity);                         // [0x19ce910] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.TemperatureComponent.ResetTemperature
	// void ResetTemperature();                                                                                                 // [0x17f49e0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TemperatureComponent.IsOnFire
	// bool IsOnFire();                                                                                                         // [0x19cde70] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TemperatureComponent.IsFrozen
	// bool IsFrozen();                                                                                                         // [0x19cde10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TemperatureComponent.GetCurrentTemperature
	// float GetCurrentTemperature();                                                                                           // [0x19cd850] BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TemperatureComponent.ChangeTemperature
	// void ChangeTemperature(float Degrees, class AActor* Source);                                                             // [0x19cc1a0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.EnemyTemperatureComponent
/// Size: 0x0080 (0x0000D8 - 0x000158)
class UEnemyTemperatureComponent : public UTemperatureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(float)                                     UpdateTime                                                  OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(bool)                                      DieIfFrozen                                                 OFFSET(get<bool>, {0xDC, 1, 0, 0})
	DMember(bool)                                      DieIfBurning                                                OFFSET(get<bool>, {0xDD, 1, 0, 0})
	DMember(float)                                     TemperatureChangeScale                                      OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     BurnTemperature                                             OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     DouseFireTemperature                                        OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     FreezeTemperature                                           OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     UnFreezeTemperature                                         OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(int32_t)                                   WarmingRate                                                 OFFSET(get<int32_t>, {0xF4, 4, 0, 0})
	DMember(int32_t)                                   CoolingRate                                                 OFFSET(get<int32_t>, {0xF8, 4, 0, 0})
	DMember(bool)                                      IsHeatsourceWhenOnFire                                      OFFSET(get<bool>, {0xFC, 1, 0, 0})
	DMember(float)                                     OnFireHeatRange                                             OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     MaxColdSlowdown                                             OFFSET(get<float>, {0x104, 4, 0, 0})
	CMember(class UEnemyDetonationSetting*)            DetonationSetting                                           OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UPawnStatsComponent*)                PawnStats                                                   OFFSET(get<T>, {0x118, 8, 0, 0})
	DMember(int32_t)                                   WarmingCooldown                                             OFFSET(get<int32_t>, {0x138, 4, 0, 0})
	DMember(char)                                      FireDetonationStack                                         OFFSET(get<char>, {0x144, 1, 0, 0})
	DMember(char)                                      IceDetonationStack                                          OFFSET(get<char>, {0x145, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyTemperatureComponent.TimerCallback
	// void TimerCallback();                                                                                                    // [0x18620e0] Final|Native|Protected 
	// Function /Script/FSD.EnemyTemperatureComponent.OnDeath
	// void OnDeath(class UHealthComponent* HealthComponent, float damageAmount, FDamageData& DamageData, TArray<UDamageTag*>& Tags); // [0x1861990] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.EnemyTemperatureComponent.DoTemperatureShock
	// void DoTemperatureShock(class UStatusEffectsComponent* Status, class AActor* Source);                                    // [0x1861280] Final|Native|Protected 
	// Function /Script/FSD.EnemyTemperatureComponent.All_IceDetonation
	// void All_IceDetonation();                                                                                                // [0x1861180] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FSD.EnemyTemperatureComponent.All_FireDetonation
	// void All_FireDetonation();                                                                                               // [0x1861160] Net|NetReliableNative|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.EnemyTemperatureReplicatorComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UEnemyTemperatureReplicatorComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FMulticastInlineDelegate)                  OnTemperatureEffectChanged                                  OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnIsFrozenChanged                                           OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnIsOnFireChanged                                           OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(TWeakObjectPtr<class UEnemyTemperatureComponent*>) EnemyTemperatureComponent                           OFFSET(get<T>, {0xE0, 8, 0, 0})
	DMember(int32_t)                                   TemperatureEffect                                           OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	DMember(bool)                                      bIsFrozen                                                   OFFSET(get<bool>, {0xEC, 1, 0, 0})
	DMember(bool)                                      bIsOnFire                                                   OFFSET(get<bool>, {0xED, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyTemperatureReplicatorComponent.OnRep_TemperatureEffect
	// void OnRep_TemperatureEffect();                                                                                          // [0x1865f70] Final|Native|Protected 
	// Function /Script/FSD.EnemyTemperatureReplicatorComponent.OnRep_IsOnFire
	// void OnRep_IsOnFire();                                                                                                   // [0x1865f10] Final|Native|Protected 
	// Function /Script/FSD.EnemyTemperatureReplicatorComponent.OnRep_IsFrozen
	// void OnRep_IsFrozen();                                                                                                   // [0x1865ef0] Final|Native|Protected 
	// Function /Script/FSD.EnemyTemperatureReplicatorComponent.IsOnFire
	// bool IsOnFire();                                                                                                         // [0x1865ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyTemperatureReplicatorComponent.IsFrozen
	// bool IsFrozen();                                                                                                         // [0x180d730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyTemperatureReplicatorComponent.GetTemperatureEffect
	// float GetTemperatureEffect();                                                                                            // [0x18659c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EnemyWaveController
/// Size: 0x0008 (0x000028 - 0x000030)
class UEnemyWaveController : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      IsComplete                                                  OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      IsSuitableForSolo                                           OFFSET(get<bool>, {0x29, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyWaveController.StartWave
	// void StartWave();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.EnemyWaveController.ResumeWave
	// void ResumeWave();                                                                                                       // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EnemyWaveController.PauseWave
	// void PauseWave();                                                                                                        // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EnemyWaveController.OnWaveCompleted
	// void OnWaveCompleted();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Struct /Script/FSD.WaveEntry
/// Size: 0x0030 (0x000000 - 0x000030)
class FWaveEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             WaveController                                              OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Class /Script/FSD.EnemyWaveManager
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UEnemyWaveManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(TSoftObjectPtr<class UClass*>)             AlwaysRunningWave                                           OFFSET(get<T>, {0xB0, 40, 0, 0})
	CMember(TArray<FWaveEntry>)                        ScriptedWaves                                               OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<FWaveEntry>)                        EndMissionWaves                                             OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<class UEnemyWaveController*>)       ActiveScriptedWaves                                         OFFSET(get<T>, {0xF8, 16, 0, 0})
	DMember(float)                                     StartDelay                                                  OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     spawnRadiusFromSpawnPoint                                   OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(bool)                                      ScriptedWavesEnabled                                        OFFSET(get<bool>, {0x110, 1, 0, 0})
	DMember(bool)                                      NormalWavesEnabled                                          OFFSET(get<bool>, {0x111, 1, 0, 0})
	DMember(bool)                                      OverrideDifficultyScriptedWaveInternal                      OFFSET(get<bool>, {0x112, 1, 0, 0})
	SMember(FRandRange)                                OverrideScriptedWaveInterval                                OFFSET(getStruct<T>, {0x114, 8, 0, 0})
	CMember(class AFSDGameMode*)                       GameMode                                                    OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UEnemySpawnManager*)                 SpawnManager                                                OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(TArray<class UObject*>)                    NormalWavesBlockStack                                       OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(TArray<class UObject*>)                    ScriptedWavesBlockStack                                     OFFSET(get<T>, {0x150, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyWaveManager.TriggerWave
	// class UEnemyWaveController* TriggerWave(class UClass* waveClass);                                                        // [0x1866ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyWaveManager.TriggerEndWave
	// void TriggerEndWave(bool cancelAllWaves);                                                                                // [0x1866a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyWaveManager.SpawnScriptedWave
	// void SpawnScriptedWave();                                                                                                // [0x18669f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyWaveManager.PushDisableScriptedWaves
	// void PushDisableScriptedWaves(class UObject* Owner);                                                                     // [0x1866210] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyWaveManager.PushDisableNormalWaves
	// void PushDisableNormalWaves(class UObject* Owner);                                                                       // [0x1866180] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyWaveManager.PopDisableScriptedWaves
	// void PopDisableScriptedWaves(class UObject* Owner);                                                                      // [0x18660f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyWaveManager.PopDisableNormalWaves
	// void PopDisableNormalWaves(class UObject* Owner);                                                                        // [0x1866060] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyWaveManager.OnMatchEnded
	// void OnMatchEnded();                                                                                                     // [0x1865e70] Final|Native|Protected 
	// Function /Script/FSD.EnemyWaveManager.OnEnemySpawned
	// void OnEnemySpawned(class APawn* enemy);                                                                                 // [0x1865cd0] Final|Native|Protected 
	// Function /Script/FSD.EnemyWaveManager.AreScriptedWavesBlocked
	// bool AreScriptedWavesBlocked();                                                                                          // [0x18652d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EnemyWaveManager.AreNormalWavesBlocked
	// bool AreNormalWavesBlocked();                                                                                            // [0x18652a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EscapeMenuWindow
/// Size: 0x0000 (0x0002A0 - 0x0002A0)
class UEscapeMenuWindow : public UWindowWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:


	/// Functions
	// Function /Script/FSD.EscapeMenuWindow.OpenMinersManualFromID
	// void OpenMinersManualFromID(EMinersManualSection Section, FGuid& ID);                                                    // [0x1d6f900] Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.FuelCannisterAttachedAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UFuelCannisterAttachedAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      CanBeTaken                                                  OFFSET(get<bool>, {0x2B8, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FuelCannisterAttachedAnimInstance.SetCanBeTaken
	// void SetCanBeTaken(bool canBeTakenValue);                                                                                // [0x1866420] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FuelCannisterItemAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UFuelCannisterItemAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      IsOnGround                                                  OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      IsFull                                                      OFFSET(get<bool>, {0x2B9, 1, 0, 0})
	DMember(bool)                                      IsShooting                                                  OFFSET(get<bool>, {0x2BA, 1, 0, 0})
};

/// Class /Script/FSD.EscortMuleAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UEscortMuleAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      LeftCannistersVisible                                       OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      RightCannistersVisible                                      OFFSET(get<bool>, {0x2B9, 1, 0, 0})
	DMember(bool)                                      IsEngineRunning                                             OFFSET(get<bool>, {0x2BA, 1, 0, 0})
	DMember(bool)                                      IsBeingRefueled                                             OFFSET(get<bool>, {0x2BB, 1, 0, 0})
	DMember(bool)                                      PlatformOut                                                 OFFSET(get<bool>, {0x2BC, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.EscortMuleAnimInstance.OnTookDamage
	// void OnTookDamage(class UHealthComponent* Health);                                                                       // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.EscortDestination
/// Size: 0x0050 (0x000220 - 0x000270)
class AEscortDestination : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FMulticastInlineDelegate)                  OnShellCracked                                              OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	CMember(class UDamageComponent*)                   EndExplosionDamage                                          OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(float)                                     NextBreakpoint                                              OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(int32_t)                                   StageForAnalytics                                           OFFSET(get<int32_t>, {0x23C, 4, 0, 0})
	DMember(int32_t)                                   SecondsToDestroyHeartstone                                  OFFSET(get<int32_t>, {0x240, 4, 0, 0})
	CMember(TArray<float>)                             BreakpointsPercent                                          OFFSET(get<T>, {0x248, 16, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     ShellThickness                                              OFFSET(get<float>, {0x25C, 4, 0, 0})
	CMember(TArray<EOmmoranStage>)                     OmmoranStages                                               OFFSET(get<T>, {0x260, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EscortDestination.MeltPlatforms
	// void MeltPlatforms(class ADeepCSGWorld* CSGWorld, TArray<FVector> meltPoints, float meltRadius);                         // [0x1865ae0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.EscortDestination.GetTerrainMaterialByHandle
	// class UTerrainMaterial* GetTerrainMaterialByHandle(class ADeepCSGWorld* CSGWorld, int32_t materialHandle);               // [0x18659f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.EscortDestination.GetSecondsToDestroyObjective
	// int32_t GetSecondsToDestroyObjective();                                                                                  // [0x1865980] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.EscortDestination.GetClosestPointOnRadius
	// FVector GetClosestPointOnRadius(FVector CurrentLocation, int32_t numberOfShellsCracked, FVector& dirFromCenter);         // [0x1865590] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.EscortDestination.Cheat_OverrideStages
	// void Cheat_OverrideStages(TArray<EOmmoranStage> newStages);                                                              // [0x1865320] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.MissionDNA
/// Size: 0x0028 (0x000028 - 0x000050)
class UMissionDNA : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     MissionScale                                                OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x2C, 4, 0, 0})
	CMember(class UMissionComplexity*)                 Complexity                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMissionDuration*)                   Duration                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FGameplayTagQuery>)                 RoomQueries                                                 OFFSET(get<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MissionDNA.GetDurationHazardBonus
	// float GetDurationHazardBonus();                                                                                          // [0x19318a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionDNA.GetComplexityHazardBonus
	// float GetComplexityHazardBonus();                                                                                        // [0x1931870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EscortMissionDNA
/// Size: 0x0008 (0x000050 - 0x000058)
class UEscortMissionDNA : public UMissionDNA
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(int32_t)                                   RefuelLocations                                             OFFSET(get<int32_t>, {0x50, 4, 0, 0})
};

/// Struct /Script/FSD.EscortMuleMovementState
/// Size: 0x0050 (0x000000 - 0x000050)
class FEscortMuleMovementState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FTransform)                                TargetTransform                                             OFFSET(getStruct<T>, {0x0, 48, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	SMember(FQuat)                                     AngularVelocity                                             OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FSD.EscortMuleExtractorSlot
/// Size: 0x0020 (0x000000 - 0x000020)
class FEscortMuleExtractorSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(EEscortExtractorState)                     ExtractorState                                              OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(EEscortExtractorState)                     LastState                                                   OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(class USceneComponent*)                    AttachPoint                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UInstantUsable*)                     Usable                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UWidgetComponent*)                   Widget                                                      OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Class /Script/FSD.EscortMule
/// Size: 0x01B8 (0x0002F8 - 0x0004B0)
class AEscortMule : public AFSDPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
	SMember(FMulticastInlineDelegate)                  OnMuleActivated                                             OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSpeedChanged                                              OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFullCanistersChanged                                      OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnExitGaragePathSet                                         OFFSET(getStruct<T>, {0x330, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  Cheat_SetMuleSpeed                                          OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  Cheat_JumpToNextPhase                                       OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	CMember(class UFriendlyHealthComponent*)           HealthComponent                                             OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class USimpleObjectInfoComponent*)         ObjectInfo                                                  OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class URestrictedResourceBank*)            ResourceBank                                                OFFSET(get<T>, {0x370, 8, 0, 0})
	SMember(FTransform)                                TargetTransform                                             OFFSET(getStruct<T>, {0x380, 48, 0, 0})
	SMember(FTransform)                                PreviousTransform                                           OFFSET(getStruct<T>, {0x3B0, 48, 0, 0})
	DMember(bool)                                      IsPathReady                                                 OFFSET(get<bool>, {0x3E0, 1, 0, 0})
	CMember(EEscortMissionState)                       State                                                       OFFSET(get<T>, {0x3E1, 1, 0, 0})
	CMember(class UEscortObjective*)                   EscortObjective                                             OFFSET(get<T>, {0x3E8, 8, 0, 0})
	SMember(FEscortMuleMovementState)                  MovementState                                               OFFSET(getStruct<T>, {0x410, 80, 0, 0})
	DMember(float)                                     SpeedModifier                                               OFFSET(get<float>, {0x460, 4, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UOutlineComponent*)                  OutlineComponent                                            OFFSET(get<T>, {0x470, 8, 0, 0})
	DMember(float)                                     HealPerTickNormal                                           OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     HealPerTickUnderAttack                                      OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(bool)                                      CannisterVisible_Left                                       OFFSET(get<bool>, {0x480, 1, 0, 0})
	DMember(bool)                                      CannisterVisible_Right                                      OFFSET(get<bool>, {0x481, 1, 0, 0})
	SMember(FVector)                                   NextStop                                                    OFFSET(getStruct<T>, {0x484, 12, 0, 0})
	DMember(bool)                                      IsCarvingTunnel                                             OFFSET(get<bool>, {0x490, 1, 0, 0})
	DMember(int32_t)                                   FullCanisters                                               OFFSET(get<int32_t>, {0x494, 4, 0, 0})
	CMember(TArray<FEscortMuleExtractorSlot>)          ExtractorSlots                                              OFFSET(get<T>, {0x498, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EscortMule.TryHeal
	// bool TryHeal(class APlayerCharacter* User, float amount);                                                                // [0x1866b80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.EscortMule.SetTargetTransform
	// void SetTargetTransform(FTransform InTransform);                                                                         // [0x1866900] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.EscortMule.SetSpeedModifier
	// void SetSpeedModifier(float inSpeedModifier);                                                                            // [0x1866800] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortMule.SetFullExtracterAttached
	// void SetFullExtracterAttached(class UInstantUsable* Usable);                                                             // [0x18666e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortMule.SetExtractorDetached
	// void SetExtractorDetached(class UInstantUsable* Usable);                                                                 // [0x1866650] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortMule.SetExitGaragePath
	// void SetExitGaragePath(TArray<FVector> Path);                                                                            // [0x1866560] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortMule.ResetExtractors
	// void ResetExtractors();                                                                                                  // [0x1866400] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortMule.PathIsReady
	// void PathIsReady();                                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.EscortMule.OnRep_SpeedModifier
	// void OnRep_SpeedModifier();                                                                                              // [0x1865f50] Final|Native|Protected 
	// Function /Script/FSD.EscortMule.OnRep_MovementState
	// void OnRep_MovementState();                                                                                              // [0x1865f30] Final|Native|Protected 
	// Function /Script/FSD.EscortMule.OnRep_IsCarvingTunnel
	// void OnRep_IsCarvingTunnel();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EscortMule.OnRep_ExtractorSlots
	// void OnRep_ExtractorSlots();                                                                                             // [0x1865eb0] Final|Native|Protected 
	// Function /Script/FSD.EscortMule.OnObjectiveStateChanged
	// void OnObjectiveStateChanged(EEscortMissionState oldState);                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.EscortMule.OnExtractorSlotChanged
	// void OnExtractorSlotChanged(FEscortMuleExtractorSlot& Slot, int32_t Index);                                              // [0x1d6f900] Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EscortMule.OnExtractorDetached
	// void OnExtractorDetached(class AExtractorItem* Item);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EscortMule.ObjectiveStateChange
	// void ObjectiveStateChange(EEscortMissionState NewState);                                                                 // [0x1865c50] Final|Native|Public  
	// Function /Script/FSD.EscortMule.GetIsPathReady
	// bool GetIsPathReady();                                                                                                   // [0x1865840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EscortMule.GetExtractorState
	// EEscortExtractorState GetExtractorState(class UInstantUsable* Usable);                                                   // [0x18656f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EscortMule.GetDistanceToDoretta
	// float GetDistanceToDoretta(FVector Location);                                                                            // [0x1d6f900] Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.EscortMule.ActivateMule
	// void ActivateMule();                                                                                                     // [0x1865280] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.EscortMuleTrack
/// Size: 0x0028 (0x000220 - 0x000248)
class AEscortMuleTrack : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x228, 32, 0, 0})
};

/// Class /Script/FSD.EscortMuleAIController
/// Size: 0x00B8 (0x000358 - 0x000410)
class AEscortMuleAIController : public AFSDAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	CMember(TArray<FVector>)                           CurrentPath                                                 OFFSET(get<T>, {0x368, 16, 0, 0})
	CMember(TArray<FVector>)                           GaragePath                                                  OFFSET(get<T>, {0x3C8, 16, 0, 0})
	DMember(int32_t)                                   PathIndex                                                   OFFSET(get<int32_t>, {0x3D8, 4, 0, 0})
	DMember(int32_t)                                   CurrentRoom                                                 OFFSET(get<int32_t>, {0x3DC, 4, 0, 0})
	CMember(class UEscortObjective*)                   EscortObj                                                   OFFSET(get<T>, {0x3E0, 8, 0, 0})
	DMember(int32_t)                                   TunnelStartIndex                                            OFFSET(get<int32_t>, {0x3E8, 4, 0, 0})
	DMember(int32_t)                                   TunnelEndIndex                                              OFFSET(get<int32_t>, {0x3EC, 4, 0, 0})
	SMember(FRandomStream)                             RandomStream                                                OFFSET(getStruct<T>, {0x408, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.EscortMuleAIController.SetDozerNextPathSegment
	// void SetDozerNextPathSegment();                                                                                          // [0x18664b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortMuleAIController.OnPathComplete
	// void OnPathComplete();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EscortMuleAIController.GetPointBehindEscortMule
	// FVector GetPointBehindEscortMule(float Distance);                                                                        // [0x1d6f900] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.EscortMuleAIController.GetPathForDebug
	// TArray<FVector> GetPathForDebug(int32_t Segment);                                                                        // [0x18658a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortMuleAIController.GetPathEndTagent
	// FVector GetPathEndTagent();                                                                                              // [0x1865860] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.EscortMuleAIController.GetFullPath
	// void GetFullPath(TArray<FVector>& outPath);                                                                              // [0x1865790] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EscortMuleAIController.FindDozerPath
	// void FindDozerPath(FVector StartPosition);                                                                               // [0x1865500] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.EscortMuleAIController.CHEAT_SetDozerLastPathSegment
	// void CHEAT_SetDozerLastPathSegment();                                                                                    // [0x1865300] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.EscortObjective
/// Size: 0x01C0 (0x000180 - 0x000340)
class UEscortObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	SMember(FMulticastInlineDelegate)                  OnProgressUpdated                                           OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShellBreakPauseChange                                     OFFSET(getStruct<T>, {0x190, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMuleRefueled                                              OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	DMember(bool)                                      DidRescueDorettaHead                                        OFFSET(get<bool>, {0x1B0, 1, 0, 0})
	DMember(int32_t)                                   AreasToScan                                                 OFFSET(get<int32_t>, {0x1B4, 4, 0, 0})
	DMember(int32_t)                                   ScanCount                                                   OFFSET(get<int32_t>, {0x1B8, 4, 0, 0})
	CMember(TArray<FVector>)                           ScanLocations                                               OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 EscortMulePositioning                                       OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(class UCurveFloat*)                        CostDistanceCurve                                           OFFSET(get<T>, {0x1E0, 8, 0, 0})
	DMember(float)                                     DebrisRadius                                                OFFSET(get<float>, {0x1E8, 4, 0, 0})
	CMember(TArray<class UDebrisBase*>)                ObjectDebris                                                OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             RefuelObjectClass                                           OFFSET(get<T>, {0x200, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DestinationClass                                            OFFSET(get<T>, {0x228, 40, 0, 0})
	DMember(int32_t)                                   AreasScanned                                                OFFSET(get<int32_t>, {0x250, 4, 0, 0})
	CMember(EEscortMissionState)                       State                                                       OFFSET(get<T>, {0x254, 1, 0, 0})
	DMember(bool)                                      FinalBattle                                                 OFFSET(get<bool>, {0x255, 1, 0, 0})
	CMember(class UCarvedResourceData*)                FuelResource                                                OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UResourceData*)                      GemResource                                                 OFFSET(get<T>, {0x260, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCannisterRegistered                                       OFFSET(getStruct<T>, {0x268, 16, 0, 0})
	DMember(float)                                     ServerShellProgress                                         OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(int32_t)                                   SecondsToDestroyHeartstone                                  OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	DMember(int32_t)                                   FullCanistersRequired                                       OFFSET(get<int32_t>, {0x29C, 4, 0, 0})
	DMember(int32_t)                                   FullCanisters                                               OFFSET(get<int32_t>, {0x2A0, 4, 0, 0})
	DMember(int32_t)                                   FuelResourceAmount                                          OFFSET(get<int32_t>, {0x2A4, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             GarageDropCarver                                            OFFSET(get<T>, {0x2A8, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EscortMuleDropBeaconClass                                   OFFSET(get<T>, {0x2D0, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             GarageClass                                                 OFFSET(get<T>, {0x2F8, 40, 0, 0})
	SMember(FVector)                                   EscortMuleDropLocation                                      OFFSET(getStruct<T>, {0x320, 12, 0, 0})
	CMember(class AEscortMule*)                        EscortMule                                                  OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class AEscortDestination*)                 EscortDestination                                           OFFSET(get<T>, {0x338, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.EscortObjective.SyncProgressTimer
	// void SyncProgressTimer();                                                                                                // [0x1866a30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortObjective.StartShellBreak
	// void StartShellBreak();                                                                                                  // [0x1866a10] Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FSD.EscortObjective.SpawnGarage
	// void SpawnGarage();                                                                                                      // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EscortObjective.SetState
	// void SetState(EEscortMissionState State);                                                                                // [0x1866880] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortObjective.SetShellBreakPaused
	// void SetShellBreakPaused(bool newPaused);                                                                                // [0x1866770] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortObjective.SetEscortMule
	// void SetEscortMule(class AEscortMule* MULE);                                                                             // [0x18664d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortObjective.RegisterFuelCannister
	// void RegisterFuelCannister(class AExtractorItem* extractor);                                                             // [0x1866370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EscortObjective.RecordFailStage
	// void RecordFailStage(bool muleDied, bool missionAborted);                                                                // [0x18662a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.EscortObjective.OnResourceChanged
	// void OnResourceChanged(class UCappedResource* CappedResource, float amount);                                             // [0x1865f90] Final|Native|Protected 
	// Function /Script/FSD.EscortObjective.OnRep_FullCanisters
	// void OnRep_FullCanisters();                                                                                              // [0x1865ed0] Final|Native|Protected 
	// Function /Script/FSD.EscortObjective.OnRep_EscortState
	// void OnRep_EscortState();                                                                                                // [0x1830d80] Final|Native|Protected 
	// Function /Script/FSD.EscortObjective.OnRep_EscortMule
	// void OnRep_EscortMule();                                                                                                 // [0x1865e90] Final|Native|Protected 
	// Function /Script/FSD.EscortObjective.OnRep_AreasToScan
	// void OnRep_AreasToScan(int32_t prevAmount);                                                                              // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.EscortObjective.OnRep_AreasScanned
	// void OnRep_AreasScanned(int32_t prevAmount);                                                                             // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.EscortObjective.OnMuleDied
	// void OnMuleDied(class UHealthComponentBase* HealthComponent);                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EscortObjective.OnHealthChanged
	// void OnHealthChanged(float Health);                                                                                      // [0x1865df0] Final|Native|Protected 
	// Function /Script/FSD.EscortObjective.OnFullCanistersChanged
	// void OnFullCanistersChanged(int32_t amount);                                                                             // [0x1865d60] Final|Native|Protected 
	// Function /Script/FSD.EscortObjective.OnEscortMuleSpawnedEvent
	// void OnEscortMuleSpawnedEvent();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EscortObjective.GetShellBreakProgress
	// float GetShellBreakProgress();                                                                                           // [0x18659a0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.EscortObjective.DoesPathExist
	// bool DoesPathExist(FVector Start, FVector End);                                                                          // [0x1865410] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ExpeniteSamplePod
/// Size: 0x0030 (0x0002E0 - 0x000310)
class AExpeniteSamplePod : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	DMember(float)                                     ServerReturnProgress                                        OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     ReturnDelay                                                 OFFSET(get<float>, {0x2E4, 4, 0, 0})
	CMember(class UCurveFloat*)                        ReturnCurve                                                 OFFSET(get<T>, {0x2E8, 8, 0, 0})
	DMember(float)                                     TargetReturnTime                                            OFFSET(get<float>, {0x2F0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ExpeniteSamplePod.LaunchBackToSpace
	// void LaunchBackToSpace();                                                                                                // [0x186c1c0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.ExplosiveBarrelEvent
/// Size: 0x0008 (0x000368 - 0x000370)
class AExplosiveBarrelEvent : public AGameEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UDamageComponent*)                   EndDamage                                                   OFFSET(get<T>, {0x368, 8, 0, 0})
};

/// Class /Script/FSD.ExterminationReward
/// Size: 0x0010 (0x000028 - 0x000038)
class UExterminationReward : public URunningMissionBP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     AwardSize                                                   OFFSET(get<float>, {0x30, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ExterminationReward.OnEnemyKilled
	// void OnEnemyKilled(FGameplayTagContainer& GameplayTags, class AActor* killedEnemy);                                      // [0x186c200] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FSD.ExtractorItem
/// Size: 0x01C0 (0x0003E0 - 0x0005A0)
class AExtractorItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1440;

public:
	SMember(FMulticastInlineDelegate)                  OnCurrentLoadChangedEvent                                   OFFSET(getStruct<T>, {0x3E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterEquipChange                                      OFFSET(getStruct<T>, {0x3F8, 16, 0, 0})
	CMember(class UBoxComponent*)                      DroppedCollider                                             OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             DroppedMesh                                                 OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UFirstPersonParticleSystemComponent*) FP_DrillParticles                                          OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UFSDAudioComponent*)                 AudioComponent                                              OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UPointLightComponent*)               SurfaceLight                                                OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           MeltingParticles                                            OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           InvalidSurfaceParticles                                     OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           FPMuzzleParticles                                           OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           FPMuzzleInvalidParticles                                    OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           TPMuzzleParticles                                           OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           TPMuzzleInvalidParticles                                    OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UAnimMontage*)                       FPMineMontage                                               OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPMineMontage                                               OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class UAnimMontage*)                       FPGunsling                                                  OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPGunsling                                                  OFFSET(get<T>, {0x478, 8, 0, 0})
	SMember(FName)                                     MiningSpeedAudioParamterName                                OFFSET(getStruct<T>, {0x480, 8, 0, 0})
	CMember(class UParticleSystem*)                    DrillParticles                                              OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               DrillRumble                                                 OFFSET(get<T>, {0x490, 8, 0, 0})
	DMember(float)                                     BlockParticlesScaleFP                                       OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     BlockParticlesScaleTP                                       OFFSET(get<float>, {0x49C, 4, 0, 0})
	CMember(EExtractorState)                           State                                                       OFFSET(get<T>, {0x4A0, 1, 0, 0})
	DMember(float)                                     MovementPenalty                                             OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     CarverRayCastLength                                         OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     CarveTerrainDistanceCheck                                   OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(float)                                     CurrentDrillSpeed                                           OFFSET(get<float>, {0x4B0, 4, 0, 0})
	DMember(float)                                     DrillParticlesDuration                                      OFFSET(get<float>, {0x4C8, 4, 0, 0})
	CMember(class UResourceData*)                      ExtractetMaterial                                           OFFSET(get<T>, {0x4D0, 8, 0, 0})
	DMember(float)                                     TimeBeforeInvalidShout                                      OFFSET(get<float>, {0x4D8, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   InvalidSurfaceShout                                         OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutFull                                                   OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class USoundCue*)                          DigSound                                                    OFFSET(get<T>, {0x4F0, 8, 0, 0})
	DMember(bool)                                      IsMining                                                    OFFSET(get<bool>, {0x4F8, 1, 0, 0})
	DMember(bool)                                      IsGunslinging                                               OFFSET(get<bool>, {0x4F9, 1, 0, 0})
	DMember(bool)                                      ReadyToExtract                                              OFFSET(get<bool>, {0x4FA, 1, 0, 0})
	CMember(class UParticleSystem*)                    VacuumEffect                                                OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UParticleSystem*)                    ChunkSplatEffect                                            OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class USoundCue*)                          ChunkSplatSound                                             OFFSET(get<T>, {0x518, 8, 0, 0})
	DMember(float)                                     MaxDifference                                               OFFSET(get<float>, {0x544, 4, 0, 0})
	DMember(float)                                     MeltingTime                                                 OFFSET(get<float>, {0x54C, 4, 0, 0})
	DMember(float)                                     ChunkMultiplier                                             OFFSET(get<float>, {0x550, 4, 0, 0})
	DMember(float)                                     CollectChunkCooldown                                        OFFSET(get<float>, {0x554, 4, 0, 0})
	DMember(float)                                     CrossfadeSpeed                                              OFFSET(get<float>, {0x558, 4, 0, 0})
	DMember(float)                                     VacuumEffectOffset                                          OFFSET(get<float>, {0x570, 4, 0, 0})
	DMember(float)                                     MaxCapacity                                                 OFFSET(get<float>, {0x574, 4, 0, 0})
	DMember(float)                                     PlayerCountBonus                                            OFFSET(get<float>, {0x578, 4, 0, 0})
	SMember(FColor)                                    SurfaceLightInitialColor                                    OFFSET(getStruct<T>, {0x580, 4, 0, 0})
	SMember(FColor)                                    SurfaceLightEndColor                                        OFFSET(getStruct<T>, {0x584, 4, 0, 0})
	DMember(float)                                     SurfaceLightMinIntensity                                    OFFSET(get<float>, {0x588, 4, 0, 0})
	DMember(float)                                     SurfaceLightMaxIntensity                                    OFFSET(get<float>, {0x58C, 4, 0, 0})
	DMember(float)                                     CurrentLoad                                                 OFFSET(get<float>, {0x590, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ExtractorItem.SetCanPickup
	// void SetCanPickup(bool canPickup);                                                                                       // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ExtractorItem.Server_StopMining
	// void Server_StopMining();                                                                                                // [0x186cc70] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.ExtractorItem.Server_StartMining
	// void Server_StartMining();                                                                                               // [0x186cc50] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.ExtractorItem.Server_SetReadyToExtract
	// void Server_SetReadyToExtract(bool IsReady);                                                                             // [0x186cbc0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ExtractorItem.Server_DigBlock
	// void Server_DigBlock(FVector_NetQuantize Start, FVector_NetQuantize End);                                                // [0x186cad0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.ExtractorItem.Server_CollectChunk
	// void Server_CollectChunk(class AResourceChunk* chunk);                                                                   // [0x186ca40] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.ExtractorItem.ResetCurrentLoad
	// void ResetCurrentLoad();                                                                                                 // [0x186ca00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ExtractorItem.OnValidSurfaceChanged
	// void OnValidSurfaceChanged(bool IsValid);                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ExtractorItem.OnThrown
	// void OnThrown(FVector Direction);                                                                                        // [0x1d6f900] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.ExtractorItem.OnStopDrilling
	// void OnStopDrilling();                                                                                                   // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ExtractorItem.OnStartDrilling
	// void OnStartDrilling();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ExtractorItem.OnRep_SimulatingMining
	// void OnRep_SimulatingMining();                                                                                           // [0x186c470] Final|Native|Public  
	// Function /Script/FSD.ExtractorItem.OnRep_IsGunslinging
	// void OnRep_IsGunslinging();                                                                                              // [0x186c390] Final|Native|Public  
	// Function /Script/FSD.ExtractorItem.OnRep_CurrentLoad
	// void OnRep_CurrentLoad();                                                                                                // [0x186c350] Final|Native|Protected 
	// Function /Script/FSD.ExtractorItem.OnCurrentLoadChanged
	// void OnCurrentLoadChanged(float load);                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ExtractorItem.OnChunkCooldownOver
	// void OnChunkCooldownOver();                                                                                              // [0x186c1e0] Final|Native|Public  
	// Function /Script/FSD.ExtractorItem.IsFull
	// bool IsFull();                                                                                                           // [0x186c0f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ExtractorItem.GetRootCollider
	// class UBoxComponent* GetRootCollider();                                                                                  // [0x186bd40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ExtractorItem.All_SimulateDigBlock
	// void All_SimulateDigBlock(FVector_NetQuantize Position, bool SpawnParticles, int32_t Material);                          // [0x186b100] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FSD.ExtractorItem.All_ChunkSplat
	// void All_ChunkSplat(class AResourceChunk* chunk);                                                                        // [0x186b070] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FSD.ExtractorItem.AddResource
	// void AddResource(float amount);                                                                                          // [0x186af20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ExtruderPlant
/// Size: 0x0028 (0x000220 - 0x000248)
class AExtruderPlant : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(class USkeletalMeshComponent*)             SkeletalMesh                                                OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UAnimationAsset*)                    ExtrudeAnimation                                            OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UAnimationAsset*)                    RetractAnimation                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UAudioComponent*)                    Audio                                                       OFFSET(get<T>, {0x238, 8, 0, 0})
};

/// Class /Script/FSD.EyeBrowsVanityItem
/// Size: 0x00A0 (0x000130 - 0x0001D0)
class UEyeBrowsVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AnimInstance                                                OFFSET(get<T>, {0x158, 40, 0, 0})
	CMember(TSet<UTagVanityEyebrows*>)                 VanityTags                                                  OFFSET(get<T>, {0x180, 80, 0, 0})
};

/// Class /Script/FSD.FacilityGeneratorLine
/// Size: 0x0100 (0x000220 - 0x000320)
class AFacilityGeneratorLine : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	SMember(FTransform)                                StartTransform                                              OFFSET(getStruct<T>, {0x220, 48, 0, 0})
	CMember(TArray<FTransform>)                        EndTransforms                                               OFFSET(get<T>, {0x250, 16, 0, 0})
	DMember(float)                                     HeightOffsetMin                                             OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     HeightOffsetMax                                             OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     MaxSegmentLength                                            OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     CarveRadius                                                 OFFSET(get<float>, {0x26C, 4, 0, 0})
	CMember(class USplineComponent*)                   SplineComponent                                             OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class USplineDecoratorComponent*)          SplineDecorator                                             OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TWeakObjectPtr<class UStaticMesh*>)        LineMeshPtr                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) MaterialConnected                                           OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) MaterialUnconnected                                         OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class ATetherStation*)                     Station                                                     OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UStaticMesh*)                        MeshInstance                                                OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(TArray<FVector>)                           ReplicatedPath                                              OFFSET(get<T>, {0x308, 16, 0, 0})
	DMember(bool)                                      Connected                                                   OFFSET(get<bool>, {0x318, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FacilityGeneratorLine.SetConnected
	// void SetConnected(bool InConnected);                                                                                     // [0x186cc90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityGeneratorLine.ReceiveBeginPathFinding
	// void ReceiveBeginPathFinding();                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FacilityGeneratorLine.OnRep_Path
	// void OnRep_Path();                                                                                                       // [0x186c3d0] Final|Native|Protected 
	// Function /Script/FSD.FacilityGeneratorLine.OnRep_Connected
	// void OnRep_Connected();                                                                                                  // [0x186c330] Final|Native|Protected 
};

/// Class /Script/FSD.FacilityHackingPod
/// Size: 0x0018 (0x0002E0 - 0x0002F8)
class AFacilityHackingPod : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	SMember(FMulticastInlineDelegate)                  OnHackingPodStateChanged                                    OFFSET(getStruct<T>, {0x2E0, 16, 0, 0})
	CMember(EHackingPodState)                          PodState                                                    OFFSET(get<T>, {0x2F0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FacilityHackingPod.SetState
	// void SetState(EHackingPodState aState);                                                                                  // [0x186cf40] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FacilityHackingPod.OnRep_PodState
	// void OnRep_PodState(EHackingPodState oldState);                                                                          // [0x186c3f0] Final|Native|Protected 
	// Function /Script/FSD.FacilityHackingPod.OnExitState
	// void OnExitState(EHackingPodState oldState);                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FacilityHackingPod.OnEnterState
	// void OnEnterState(EHackingPodState NextState);                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FacilityHackingPod.GetState
	// EHackingPodState GetState();                                                                                             // [0x186be00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.RGBLightManagerComponent
/// Size: 0x0058 (0x0000B0 - 0x000108)
class URGBLightManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(TArray<class UPointLightComponent*>)       Lights                                                      OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FLinearColor>)                      ColorList                                                   OFFSET(get<T>, {0xC0, 16, 0, 0})
	DMember(float)                                     NewColorsInterval                                           OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     NewColorsVariance                                           OFFSET(get<float>, {0xFC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RGBLightManagerComponent.StopRgb
	// void StopRgb();                                                                                                          // [0x186d340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RGBLightManagerComponent.StartRgb
	// void StartRgb();                                                                                                         // [0x186d320] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FacilityHackingPodAnimInstance
/// Size: 0x0038 (0x0002B8 - 0x0002F0)
class UFacilityHackingPodAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(class AActor*)                             SaluteTarget                                                OFFSET(get<T>, {0x2C0, 8, 0, 0})
	SMember(FRotator)                                  LookingDirection                                            OFFSET(getStruct<T>, {0x2C8, 12, 0, 0})
	SMember(FRotator)                                  TargetRotation                                              OFFSET(getStruct<T>, {0x2D4, 12, 0, 0})
	DMember(bool)                                      IsHacking                                                   OFFSET(get<bool>, {0x2E0, 1, 0, 0})
	CMember(EHackingPodState)                          PodState                                                    OFFSET(get<T>, {0x2E1, 1, 0, 0})
	DMember(float)                                     RadarDishAngle                                              OFFSET(get<float>, {0x2E4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.FacilityHackingPodAnimInstance.SetSaluter
	// void SetSaluter(class AActor* salutingTarget);                                                                           // [0x186ceb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityHackingPodAnimInstance.ResetSaluteTarget
	// void ResetSaluteTarget();                                                                                                // [0x186ca20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ItemDispenserAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UItemDispenserAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      IsOpen                                                      OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      HasItem                                                     OFFSET(get<bool>, {0x2B9, 1, 0, 0})
};

/// Class /Script/FSD.FacilityTetherDispenserAnimInstnace
/// Size: 0x0010 (0x0002C0 - 0x0002D0)
class UFacilityTetherDispenserAnimInstnace : public UItemDispenserAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(EHackingPodState)                          PodState                                                    OFFSET(get<T>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      ShouldShowDispenser                                         OFFSET(get<bool>, {0x2C1, 1, 0, 0})
	DMember(bool)                                      ShouldCloseFromDispenser                                    OFFSET(get<bool>, {0x2C2, 1, 0, 0})
	DMember(bool)                                      ShouldShowButton                                            OFFSET(get<bool>, {0x2C3, 1, 0, 0})
	DMember(bool)                                      ShouldHideButton                                            OFFSET(get<bool>, {0x2C4, 1, 0, 0})
};

/// Struct /Script/FSD.SubObjective
/// Size: 0x0030 (0x000000 - 0x000030)
class FSubObjective : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UDialogDataAsset*)                   OnProgressShout                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OnCompletedShout                                            OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FText)                                     ObjectiveText                                               OFFSET(getStruct<T>, {0x10, 24, 0, 0})
	DMember(int32_t)                                   Required                                                    OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Class /Script/FSD.FacilityObjective
/// Size: 0x0178 (0x000180 - 0x0002F8)
class UFacilityObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	CMember(TSoftObjectPtr<class UClass*>)             generatorClass                                              OFFSET(get<T>, {0x190, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             GeneratorBeaconClass                                        OFFSET(get<T>, {0x1B8, 40, 0, 0})
	DMember(int32_t)                                   GeneratorCount                                              OFFSET(get<int32_t>, {0x1E0, 4, 0, 0})
	DMember(int32_t)                                   ObjectivesStage                                             OFFSET(get<int32_t>, {0x1E4, 4, 0, 0})
	CMember(TArray<FSubObjective>)                     SubObjectives                                               OFFSET(get<T>, {0x1E8, 16, 0, 0})
	SMember(FDelegateProperty)                         OnFirstEncounterDroneSpawned_Delegate                       OFFSET(getStruct<T>, {0x1F8, 16, 0, 0})
	SMember(FDelegateProperty)                         OnSecondEncounterDroneSpawned_Delegate                      OFFSET(getStruct<T>, {0x208, 16, 0, 0})
	CMember(TArray<class APawn*>)                      spawnedEnemies                                              OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           TurretDescriptors                                           OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           GeneratorRoomTurretDescriptors                              OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           EncounterEnemies                                            OFFSET(get<T>, {0x260, 16, 0, 0})
	DMember(float)                                     EncounterDifficulty                                         OFFSET(get<float>, {0x270, 4, 0, 0})
	SMember(FRandInterval)                             Diversity                                                   OFFSET(getStruct<T>, {0x278, 16, 0, 0})
	SMember(FIRandRange)                               TurretEncountersRange                                       OFFSET(getStruct<T>, {0x288, 8, 0, 0})
	DMember(int32_t)                                   MinimumTurretEncounters                                     OFFSET(get<int32_t>, {0x290, 4, 0, 0})
	SMember(FIRandRange)                               TunnelTurretsRange                                          OFFSET(getStruct<T>, {0x294, 8, 0, 0})
	CMember(TArray<class AActor*>)                     SmallGenerators                                             OFFSET(get<T>, {0x2A0, 16, 0, 0})
	CMember(class ATetherStation*)                     mainFacility                                                OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(TArray<int32_t>)                           ShieldGeneratorRooms                                        OFFSET(get<T>, {0x2B8, 16, 0, 0})
	DMember(int32_t)                                   MainFacilityRoom                                            OFFSET(get<int32_t>, {0x2C8, 4, 0, 0})
	DMember(bool)                                      HasRemovedMainShield                                        OFFSET(get<bool>, {0x2CC, 1, 0, 0})
	CMember(TArray<class AActor*>)                     ShieldGenerators                                            OFFSET(get<T>, {0x2D0, 16, 0, 0})
	CMember(class UResourceData*)                      GoalResource                                                OFFSET(get<T>, {0x2E0, 8, 0, 0})
	DMember(float)                                     AmountRequired                                              OFFSET(get<float>, {0x2E8, 4, 0, 0})
	DMember(float)                                     AmountCollected                                             OFFSET(get<float>, {0x2EC, 4, 0, 0})
	DMember(int32_t)                                   GeneratorsActivated                                         OFFSET(get<int32_t>, {0x2F0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.FacilityObjective.SpawnFacilityEncounters
	// void SpawnFacilityEncounters(class AProceduralSetup* Setup, class UEncounterManager* Encounters, class UDebrisPositioning* Positioning); // [0x186d210] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.SpawnEndBattleTurrets
	// TArray<FTransform> SpawnEndBattleTurrets(int32_t amountOfTurrets, class AProceduralSetup* Setup, class UDebrisPositioning* DebrisPositioning, class UClass* terrainPlacement, TArray<AActor*>& existingTurrets, bool& success); // [0x186cfc0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.SetMainFacility
	// void SetMainFacility(class ATetherStation* mainFacility);                                                                // [0x186ce20] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.SetGeneratorRooms
	// void SetGeneratorRooms(TArray<int32_t>& generatorRoomsIndicies);                                                         // [0x186cd20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.SecondGeneratorEncounterSpawn
	// void SecondGeneratorEncounterSpawn(class APawn* spawned);                                                                // [0x186b6f0] Final|Native|Protected 
	// Function /Script/FSD.FacilityObjective.Receive_AddEnemies
	// void Receive_AddEnemies(class AProceduralSetup* Setup);                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FacilityObjective.ProgressCurrentObjective
	// void ProgressCurrentObjective();                                                                                         // [0x186c9e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.PlaceObjectInRoom
	// class AActor* PlaceObjectInRoom(class AProceduralSetup* Setup, FRoomNode& RoomNode, class UDebrisPositioning* Positioning, class UClass* placementActor, FRandomStream RandomStream, bool checkImportantLocations); // [0x186c560] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.OnResourceChanged
	// void OnResourceChanged(class UCappedResource* Resource, float amount);                                                   // [0x186c490] Final|Native|Public  
	// Function /Script/FSD.FacilityObjective.OnRep_ObjectivesStage
	// void OnRep_ObjectivesStage();                                                                                            // [0x186c3b0] Final|Native|Protected 
	// Function /Script/FSD.FacilityObjective.OnRep_GeneratorsActivated
	// void OnRep_GeneratorsActivated();                                                                                        // [0x186c370] Final|Native|Protected 
	// Function /Script/FSD.FacilityObjective.OnRep_AmountCollected
	// void OnRep_AmountCollected();                                                                                            // [0x186c310] Final|Native|Protected 
	// Function /Script/FSD.FacilityObjective.OnCoreDeposited
	// void OnCoreDeposited();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FacilityObjective.IsSubObjectiveComplete
	// bool IsSubObjectiveComplete(int32_t objectiveIndex);                                                                     // [0x186c120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FacilityObjective.InitGeneratorCount
	// void InitGeneratorCount(int32_t generators);                                                                             // [0x186c060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.GetTurretGoal
	// FTransform GetTurretGoal(class AProceduralSetup* Setup, FVector& Origin, float idealRange, class UDebrisPositioning* DebrisPositioning, class UClass* terrainPlacement, bool& success); // [0x186be20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.GetShieldGenerators
	// TArray<AActor*> GetShieldGenerators();                                                                                   // [0x186bd70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.GetShieldGeneratorCount
	// int32_t GetShieldGeneratorCount();                                                                                       // [0x1854790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FacilityObjective.GetObjectTransformInRoom
	// void GetObjectTransformInRoom(FTransform& Transform, class AProceduralSetup* Setup, FRoomNode& RoomNode, class UDebrisPositioning* Positioning, class UClass* placementActor, FRandomStream RandomStream, bool checkImportantLocations); // [0x186b840] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.GetFacilityRoomIndex
	// int32_t GetFacilityRoomIndex();                                                                                          // [0x186b820] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FacilityObjective.GetFacilityLocation
	// FVector GetFacilityLocation();                                                                                           // [0x186b7e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FacilityObjective.GetCurrentObjective
	// FSubObjective GetCurrentObjective();                                                                                     // [0x186b7a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FacilityObjective.GeneratorActivated
	// void GeneratorActivated();                                                                                               // [0x186b780] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.FirstGeneratorEncounterSpawn
	// void FirstGeneratorEncounterSpawn(class APawn* spawned);                                                                 // [0x186b6f0] Final|Native|Protected 
	// Function /Script/FSD.FacilityObjective.DropOverCharger
	// void DropOverCharger(class AProceduralSetup* Setup, int32_t roomIndex, FVector& facilityLocation, float idealRange, float idealZDistance, class UDebrisPositioning* DebrisPositioning, class UClass* generatorClass, bool AddImportantLocation); // [0x186b250] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FacilityObjective.ChangeObjective
	// void ChangeObjective();                                                                                                  // [0x186b230] Final|Native|Public  
	// Function /Script/FSD.FacilityObjective.AddShieldGenerator
	// void AddShieldGenerator(class AActor* charger, int32_t roomIndex);                                                       // [0x186afa0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.HackableBuildingObjective
/// Size: 0x0000 (0x000180 - 0x000180)
class UHackableBuildingObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:


	/// Functions
	// Function /Script/FSD.HackableBuildingObjective.DropOverCharger
	// void DropOverCharger(class AProceduralSetup* Setup, FVector& buildingLocation, float idealRange, float idealZDistance, class UDebrisPositioning* DebrisPositioning, class UClass* generatorClass, bool AddImportantLocation); // [0x186b4d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FacilityPowerStation
/// Size: 0x0038 (0x000220 - 0x000258)
class AFacilityPowerStation : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	SMember(FMulticastInlineDelegate)                  OnHackingProgressDelegate                                   OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProgresspointDelegate                                     OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	DMember(float)                                     ProgressPoint                                               OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(int32_t)                                   ProgresPointCount                                           OFFSET(get<int32_t>, {0x244, 4, 0, 0})
	DMember(float)                                     TimeToDefend                                                OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     Progress                                                    OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(bool)                                      IsHacking                                                   OFFSET(get<bool>, {0x254, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FacilityPowerStation.StopHacking
	// void StopHacking();                                                                                                      // [0x18726d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityPowerStation.StartHacking
	// void StartHacking();                                                                                                     // [0x18726b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FacilityPowerStation.OnRep_Progress
	// void OnRep_Progress();                                                                                                   // [0x1871fe0] Final|Native|Protected 
	// Function /Script/FSD.FacilityPowerStation.OnRep_IsHacking
	// void OnRep_IsHacking();                                                                                                  // [0x1871ee0] Final|Native|Protected 
	// Function /Script/FSD.FacilityPowerStation.OnHackingComplete
	// void OnHackingComplete();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FacilityPowerStation.OnHackingChanged
	// void OnHackingChanged(bool IsHacking);                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FacilityPowerStation.IsHacked
	// bool IsHacked();                                                                                                         // [0x1871b30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FacilityShieldGenerator
/// Size: 0x0028 (0x000220 - 0x000248)
class AFacilityShieldGenerator : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x228, 32, 0, 0})
};

/// Class /Script/FSD.TentacleBase
/// Size: 0x0158 (0x000348 - 0x0004A0)
class ATentacleBase : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	CMember(class USplineComponent*)                   SplineComponent                                             OFFSET(get<T>, {0x348, 8, 0, 0})
	SMember(FTransform)                                RestTransform                                               OFFSET(getStruct<T>, {0x350, 48, 0, 0})
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0x440, 12, 0, 0})
	DMember(float)                                     HeadMovementDuration                                        OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(float)                                     CanSwayCooldown                                             OFFSET(get<float>, {0x454, 4, 0, 0})
	SMember(FVector2D)                                 SwayRange                                                   OFFSET(getStruct<T>, {0x458, 8, 0, 0})
	DMember(float)                                     NeckBaseTangentLength                                       OFFSET(get<float>, {0x460, 4, 0, 0})
	SMember(FVector)                                   NeckBasePositionOffset                                      OFFSET(getStruct<T>, {0x464, 12, 0, 0})
	SMember(FVector)                                   NeckBaseTangentOffset                                       OFFSET(getStruct<T>, {0x470, 12, 0, 0})
	DMember(float)                                     NeckTopTangentLength                                        OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     DurationTentacleRetract                                     OFFSET(get<float>, {0x480, 4, 0, 0})
	DMember(float)                                     DurationTentacleFoldout                                     OFFSET(get<float>, {0x484, 4, 0, 0})
	CMember(class USceneComponent*)                    HeadRoot                                                    OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class USceneComponent*)                    HeadRotator                                                 OFFSET(get<T>, {0x490, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TentacleBase.SetRestingTransform
	// void SetRestingTransform(FTransform& restingTransform, bool startAtRest);                                                // [0x19ce550] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TentacleBase.Recieve_OnRep_Owner
	// void Recieve_OnRep_Owner();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TentacleBase.MoveHydraHead
	// void MoveHydraHead(FTransform newDesiredTransform, float newCanSwayCooldown, float newHeadMovementDuration, bool UseSpring); // [0x19cdea0] Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TentacleBase.GetStabberVineRoot
	// class AStabberVineRoot* GetStabberVineRoot();                                                                            // [0x19cdd50] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TentacleBase.GetHeadRotator
	// class USceneComponent* GetHeadRotator();                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TentacleBase.GetHeadRoot
	// class USceneComponent* GetHeadRoot();                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Struct /Script/FSD.TentacleTarget
/// Size: 0x0020 (0x000000 - 0x000020)
class FTentacleTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(float)                                     MovementDuration                                            OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(bool)                                      UseSpring                                                   OFFSET(get<bool>, {0x1C, 1, 0, 0})
};

/// Class /Script/FSD.FacilityTentacle
/// Size: 0x0068 (0x000498 - 0x000500)
class AFacilityTentacle : public ATentacleBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	DMember(float)                                     SwaySpeed                                                   OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(bool)                                      Extended                                                    OFFSET(get<bool>, {0x4A4, 1, 0, 0})
	CMember(TArray<class UAnimMontage*>)               HitReactions                                                OFFSET(get<T>, {0x4A8, 16, 0, 0})
	CMember(EFacilityTentacleState)                    TentacleState                                               OFFSET(get<T>, {0x4B8, 1, 0, 0})
	CMember(class USkeletalMeshComponent*)             HeadMesh                                                    OFFSET(get<T>, {0x4C0, 8, 0, 0})
	SMember(FTentacleTarget)                           DesiredTarget                                               OFFSET(getStruct<T>, {0x4E0, 32, 0, 0})


	/// Functions
	// Function /Script/FSD.FacilityTentacle.PlayHitReaction
	// void PlayHitReaction(float amount);                                                                                      // [0x1872160] Final|Native|Protected 
	// Function /Script/FSD.FacilityTentacle.OnStateChanged
	// void OnStateChanged(EFacilityTentacleState NewState);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FacilityTentacle.OnRep_TentacleState
	// void OnRep_TentacleState();                                                                                              // [0x1872000] Final|Native|Protected 
	// Function /Script/FSD.FacilityTentacle.OnRep_DesiredTarget
	// void OnRep_DesiredTarget();                                                                                              // [0x1871ea0] Final|Native|Protected 
	// Function /Script/FSD.FacilityTentacle.FindBurrowLocation
	// bool FindBurrowLocation(class UDebrisPositioning* Debris, FVector& Origin, float Radius, FVector& OutLocation);          // [0x1871950] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FacilityTentacleHeadAnimInstance
/// Size: 0x0010 (0x000350 - 0x000360)
class UFacilityTentacleHeadAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(bool)                                      Searching                                                   OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(bool)                                      Melee                                                       OFFSET(get<bool>, {0x351, 1, 0, 0})
	DMember(bool)                                      RangedAttack                                                OFFSET(get<bool>, {0x352, 1, 0, 0})
};

/// Class /Script/FSD.FacilityTurretController
/// Size: 0x0030 (0x000358 - 0x000388)
class AFacilityTurretController : public AFSDAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	CMember(class UAIPerceptionComponent*)             Perception                                                  OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(float)                                     RememberTargetTime                                          OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     RetargetOnAttackChance                                      OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(bool)                                      RespectAttack                                               OFFSET(get<bool>, {0x380, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FacilityTurretController.OnTurretsAttackingChanged
	// void OnTurretsAttackingChanged(bool IsAttacking);                                                                        // [0x18720d0] Final|Native|Private 
	// Function /Script/FSD.FacilityTurretController.OnTargetRevived
	// void OnTargetRevived();                                                                                                  // [0x18720b0] Final|Native|Private 
	// Function /Script/FSD.FacilityTurretController.OnTargetDied
	// void OnTargetDied(class UHealthComponentBase* Health);                                                                   // [0x1872020] Final|Native|Public  
	// Function /Script/FSD.FacilityTurretController.OnPerceptionUpdated
	// void OnPerceptionUpdated(class AActor* sensedActor, FAIStimulus Stimulus);                                               // [0x1871d10] Final|Native|Public  
};

/// Class /Script/FSD.FacilityTurret
/// Size: 0x0110 (0x000348 - 0x000458)
class AFacilityTurret : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1112;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     IndicatorActivationDelay                                    OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(bool)                                      FinishAttackIgnoreLoS                                       OFFSET(get<bool>, {0x370, 1, 0, 0})
	DMember(bool)                                      InvulnerableOnInactive                                      OFFSET(get<bool>, {0x371, 1, 0, 0})
	DMember(float)                                     FoldOutTime                                                 OFFSET(get<float>, {0x374, 4, 0, 0})
	CMember(class USoundCue*)                          EngagedAudio                                                OFFSET(get<T>, {0x380, 8, 0, 0})
	DMember(float)                                     Offset                                                      OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     AimAcceleration                                             OFFSET(get<float>, {0x3B4, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        AimSpeedCurve                                               OFFSET(getStruct<T>, {0x3C0, 136, 0, 0})
	CMember(class AActor*)                             CurrentTarget                                               OFFSET(get<T>, {0x448, 8, 0, 0})
	DMember(bool)                                      TurretEngaged                                               OFFSET(get<bool>, {0x450, 1, 0, 0})
	DMember(bool)                                      AlwaysActive                                                OFFSET(get<bool>, {0x451, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FacilityTurret.TurnOffMesh
	// void TurnOffMesh();                                                                                                      // [0x18727d0] Final|Native|Protected 
	// Function /Script/FSD.FacilityTurret.SetIsAttacking
	// void SetIsAttacking(bool IsAttacking);                                                                                   // [0x1872530] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FacilityTurret.OnRep_TurretEngaged
	// void OnRep_TurretEngaged();                                                                                              // [0x17f8010] Native|Protected     
	// Function /Script/FSD.FacilityTurret.OnProjectileSpawned
	// void OnProjectileSpawned();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FacilityTurret.OnEngagedChanged
	// void OnEngagedChanged(bool engaged);                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FacilityTurret.OnAttack
	// void OnAttack();                                                                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FacilityTurret.GetLookingDirection
	// FRotator GetLookingDirection();                                                                                          // [0x1871b00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.SpinningFacilityturret
/// Size: 0x0030 (0x000458 - 0x000488)
class ASpinningFacilityturret : public AFacilityTurret
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1160;

public:
	SMember(FRotator)                                  TargetRotation                                              OFFSET(getStruct<T>, {0x458, 12, 0, 0})
	SMember(FRandRange)                                AimAtTargetEveryTurn                                        OFFSET(getStruct<T>, {0x464, 8, 0, 0})
	DMember(float)                                     TurnCooldown                                                OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     TurnTimer                                                   OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     Acceptance                                                  OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     TurnSpeed                                                   OFFSET(get<float>, {0x478, 4, 0, 0})
};

/// Class /Script/FSD.AimingFacilityTurret
/// Size: 0x00C0 (0x000458 - 0x000518)
class AAimingFacilityTurret : public AFacilityTurret
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1304;

public:
	DMember(bool)                                      IsLockedOn                                                  OFFSET(get<bool>, {0x458, 1, 0, 0})
	CMember(class UParticleSystemComponent*)           aimIndicator                                                OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           aimIndicatorLock                                            OFFSET(get<T>, {0x468, 8, 0, 0})
	DMember(float)                                     LockOnTime                                                  OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     BurstInterval                                               OFFSET(get<float>, {0x494, 4, 0, 0})
	DMember(float)                                     FireInterval                                                OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     TurretRotationSpeed                                         OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     InitialLockonDelay                                          OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     RegainLosLockonModifier                                     OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     AimZOffset                                                  OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     TargetLeadingStrength                                       OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(float)                                     TargetLeadingResponsiveness                                 OFFSET(get<float>, {0x4B0, 4, 0, 0})
	DMember(float)                                     RaimainAfterShotTime                                        OFFSET(get<float>, {0x4B4, 4, 0, 0})
	DMember(float)                                     TargetLeadingAfterLockonMultiplier                          OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     TurningSpeedAfterLockOnMultipier                            OFFSET(get<float>, {0x4BC, 4, 0, 0})
	DMember(float)                                     PreLockonTargetChangeChance                                 OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     PreLockongTargetChangeRate                                  OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     IndicatorFlashTime                                          OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(bool)                                      TrackTargetAfterLockon                                      OFFSET(get<bool>, {0x4CC, 1, 0, 0})
	DMember(bool)                                      ConstantAimAfterLock                                        OFFSET(get<bool>, {0x4CD, 1, 0, 0})
	DMember(bool)                                      UseTraceForLockOn                                           OFFSET(get<bool>, {0x4CE, 1, 0, 0})
	CMember(EIndicatorMode)                            IndicatorMode                                               OFFSET(get<T>, {0x4E1, 1, 0, 0})
	SMember(FInt32Interval)                            BurstCount                                                  OFFSET(getStruct<T>, {0x4EC, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.AimingFacilityTurret.SetupAimindicator
	// void SetupAimindicator(class UParticleSystemComponent* aimIndicator, class UParticleSystemComponent* aimIndicatorLock);  // [0x18725c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.AimingFacilityTurret.OnRep_IsLockedOn
	// void OnRep_IsLockedOn();                                                                                                 // [0x1871f00] Final|Native|Private 
	// Function /Script/FSD.AimingFacilityTurret.OnRep_IndicatorMode
	// void OnRep_IndicatorMode();                                                                                              // [0x1871ec0] Final|Native|Private 
	// Function /Script/FSD.AimingFacilityTurret.OnLockedOn
	// void OnLockedOn(bool lockedOn);                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.FacilityTurretAnimInstance
/// Size: 0x0020 (0x000350 - 0x000370)
class UFacilityTurretAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	SMember(FRotator)                                  AimRotation                                                 OFFSET(getStruct<T>, {0x350, 12, 0, 0})
	DMember(bool)                                      IsEngaged                                                   OFFSET(get<bool>, {0x360, 1, 0, 0})
};

/// Struct /Script/FSD.FadeData
/// Size: 0x0048 (0x000000 - 0x000048)
class FFadeData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(bool)                                      bEnabled                                                    OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      bShowDebugOutput                                            OFFSET(get<bool>, {0x1, 1, 0, 0})
	CMember(class UClass*)                             WidgetType                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UFSDLevelLoadingPersistentWidget*)   Widget                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     CurrentFade                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     TargetFade                                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     FadeSpeed                                                   OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     Delay                                                       OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(bool)                                      bFadeWorldOnly                                              OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      bCapFramerate                                               OFFSET(get<bool>, {0x29, 1, 0, 0})
	DMember(bool)                                      bToSpaceRig                                                 OFFSET(get<bool>, {0x2A, 1, 0, 0})
	CMember(class UTexture*)                           LoadingImage                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FString)                                   DebugMsg                                                    OFFSET(getStruct<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FSD.FadeScreenSubSystem
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UFadeScreenSubSystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FMulticastInlineDelegate)                  OnFadeInComplete                                            OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FFadeData)                                 Fading                                                      OFFSET(getStruct<T>, {0x40, 72, 0, 0})


	/// Functions
	// Function /Script/FSD.FadeScreenSubSystem.IsScreenFadingToBlack
	// bool IsScreenFadingToBlack(class UObject* WorldContext);                                                                 // [0x1871c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FadeScreenSubSystem.IsScreenFadingFromBlack
	// bool IsScreenFadingFromBlack(class UObject* WorldContext);                                                               // [0x1871bf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FadeScreenSubSystem.IsScreenFading
	// bool IsScreenFading(class UObject* WorldContext);                                                                        // [0x1871b60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FadeScreenSubSystem.GetCurrentFadeAmount
	// float GetCurrentFadeAmount();                                                                                            // [0x1871ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FadeScreenSubSystem.FadeScreenToBlack
	// void FadeScreenToBlack(class UObject* WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig, class UTexture* LoadingImage); // [0x18716e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FadeScreenSubSystem.FadeScreenFromBlack
	// void FadeScreenFromBlack(class UObject* WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig); // [0x18714c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FadeScreenSubSystem.BlackoutScreen
	// void BlackoutScreen(class UObject* WorldContext, bool FadeWorldOnly);                                                    // [0x1870b20] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.FadeVisibilitySubSystem
/// Size: 0x0068 (0x000030 - 0x000098)
class UFadeVisibilitySubSystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:


	/// Functions
	// Function /Script/FSD.FadeVisibilitySubSystem.ScalePrimitive
	// void ScalePrimitive(class UPrimitiveComponent*& Component, FVector StartScale, FVector EndScale, float Duration);        // [0x18723a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.ScaleOutPrimitive
	// void ScaleOutPrimitive(class UPrimitiveComponent*& Component, float Duration);                                           // [0x18722c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.ScaleInPrimitive
	// void ScaleInPrimitive(class UPrimitiveComponent*& Component, float Duration);                                            // [0x18721e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.FadeOutMaterialByName
	// void FadeOutMaterialByName(class UMeshComponent*& Component, FName Name, FName ParameterName, float Duration);           // [0x1871360] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.FadeOutMaterialByIndex
	// void FadeOutMaterialByIndex(class UMeshComponent*& Component, int32_t MaterialIndex, FName ParameterName, float Duration); // [0x1871200] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.FadeOutLight
	// void FadeOutLight(class ULightComponent*& Light, float Duration);                                                        // [0x1871120] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.FadeLightByCurve
	// void FadeLightByCurve(class ULightComponent*& Light, FRuntimeFloatCurve& Curve);                                         // [0x1870fc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.FadeInMaterialByName
	// void FadeInMaterialByName(class UMeshComponent*& Component, FName Name, FName ParameterName, float Duration);            // [0x1870e60] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.FadeInMaterialByIndex
	// void FadeInMaterialByIndex(class UMeshComponent*& Component, int32_t MaterialIndex, FName ParameterName, float Duration); // [0x1870d00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FadeVisibilitySubSystem.FadeInLight
	// void FadeInLight(class ULightComponent*& Light, float Duration, float startIntensityAtPercent);                          // [0x1870be0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.FakeFallComponent
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UFakeFallComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FMulticastInlineDelegate)                  OnFallingChanged                                            OFFSET(getStruct<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FakeFallComponent.StartFakeFall
	// void StartFakeFall();                                                                                                    // [0x1872690] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.FakeMoverPropulsion
/// Size: 0x0014 (0x000000 - 0x000014)
class FFakeMoverPropulsion : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     AirAcceleration                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     AirDeceleration                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     GroundAcceleration                                          OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     GroundDeceleration                                          OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.FakeMoverTarget
/// Size: 0x001C (0x000000 - 0x00001C)
class FFakeMoverTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     InfluenceDistance                                           OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     TargetDistance                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     GetCloserAirAcceleration                                    OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     GetAwayAirAcceleration                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     GetCloserGroundAcceleration                                 OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     GetAwayGroundAcceleration                                   OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MinDistance                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Class /Script/FSD.FakeMoverSettings
/// Size: 0x0060 (0x000030 - 0x000090)
class UFakeMoverSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(DeepPathFinderSize)                        PathfinderColiSize                                          OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      StickToSurface                                              OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      AlignRotationToSurface                                      OFFSET(get<bool>, {0x32, 1, 0, 0})
	DMember(float)                                     AirFriction                                                 OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     SurfaceFriction                                             OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     Gravity                                                     OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     AirGravity                                                  OFFSET(get<float>, {0x40, 4, 0, 0})
	SMember(FFakeMoverPropulsion)                      Propulsion                                                  OFFSET(getStruct<T>, {0x44, 20, 0, 0})
	SMember(FFakeMoverTarget)                          NearestPlayerInfluence                                      OFFSET(getStruct<T>, {0x58, 28, 0, 0})
	SMember(FFakeMoverTarget)                          TargetInfluence                                             OFFSET(getStruct<T>, {0x74, 28, 0, 0})
};

/// Struct /Script/FSD.FakeMoveState
/// Size: 0x0024 (0x000000 - 0x000024)
class FFakeMoveState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FVector)                                   Pos1                                                        OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Pos2                                                        OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   Vel                                                         OFFSET(getStruct<T>, {0x18, 12, 0, 0})
};

/// Class /Script/FSD.FakePhysicsMover
/// Size: 0x00A0 (0x000220 - 0x0002C0)
class AFakePhysicsMover : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	SMember(FFakeMoverState)                           MoverState                                                  OFFSET(getStruct<T>, {0x228, 96, 0, 0})
	SMember(FFakeMoveState)                            PosVel                                                      OFFSET(getStruct<T>, {0x288, 36, 0, 0})
	CMember(class UFakeMoverSettings*)                 MoveSettings                                                OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(float)                                     SyncTime                                                    OFFSET(get<float>, {0x2B8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.FakePhysicsMover.Teleport
	// void Teleport(FVector& Pos, FVector& Vel);                                                                               // [0x18726f0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FakePhysicsMover.OnRep_PosVel
	// void OnRep_PosVel(FFakeMoveState& PosVel);                                                                               // [0x1871f20] Final|Native|Public|HasOutParms 
	// Function /Script/FSD.FakePhysicsMover.OnRep_MoveSettings
	// void OnRep_MoveSettings(class UFakeMoverSettings* MoveSettings);                                                         // [0x1828b70] Final|Native|Public  
	// Function /Script/FSD.FakePhysicsMover.ApplyImpulse
	// void ApplyImpulse(FVector& Impulse);                                                                                     // [0x1870a90] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FallingStateComponent
/// Size: 0x00B0 (0x000100 - 0x0001B0)
class UFallingStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(float)                                     FallDamageStartVelocity                                     OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     FallDamageModifier                                          OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     AutoClimbMinDelay                                           OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     AutoClimbLookForwardDistance                                OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     MaxClimbHeight                                              OFFSET(get<float>, {0x110, 4, 0, 0})
	DMember(float)                                     MinClimbHeight                                              OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     CapsuleCheckZOffset                                         OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     MinInputDotProduct                                          OFFSET(get<float>, {0x11C, 4, 0, 0})
	DMember(float)                                     JumpZVelocity                                               OFFSET(get<float>, {0x120, 4, 0, 0})
	DMember(bool)                                      DebugAutoClimb                                              OFFSET(get<bool>, {0x124, 1, 0, 0})
	CMember(class UDialogDataAsset*)                   FallingShout                                                OFFSET(get<T>, {0x128, 8, 0, 0})
	DMember(float)                                     ShoutAfterDistance                                          OFFSET(get<float>, {0x130, 4, 0, 0})
	CMember(class UUseAnimationSetting*)               ClimbUseSettings                                            OFFSET(get<T>, {0x138, 8, 0, 0})
	DMember(float)                                     HoverBootAirFriction                                        OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(float)                                     HoverBootAirControl                                         OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(float)                                     HoverBootGravityScale                                       OFFSET(get<float>, {0x174, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutHoverBootsBegin                                        OFFSET(get<T>, {0x178, 8, 0, 0})
	DMember(float)                                     HoverBootActivateDuration                                   OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(bool)                                      bHoverBootsActive                                           OFFSET(get<bool>, {0x184, 1, 0, 0})
	DMember(float)                                     HoverBootMaxDuration                                        OFFSET(get<float>, {0x188, 4, 0, 0})
	SMember(FVector2D)                                 JumpBootsVelocityWindow                                     OFFSET(getStruct<T>, {0x18C, 8, 0, 0})
	DMember(float)                                     JumpBootsZVelocity                                          OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(bool)                                      JumpBootsActive                                             OFFSET(get<bool>, {0x1A0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FallingStateComponent.ShowJumpBootsActivation
	// void ShowJumpBootsActivation();                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FallingStateComponent.Server_TakeFallDamage
	// void Server_TakeFallDamage(float amount);                                                                                // [0x18765d0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FallingStateComponent.Server_SetJumpPressed
	// void Server_SetJumpPressed(bool Pressed);                                                                                // [0x1876540] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FallingStateComponent.Server_SetHoverBootsPressed
	// void Server_SetHoverBootsPressed(bool IsPressed);                                                                        // [0x18764b0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FallingStateComponent.Server_SetFallVelocity
	// void Server_SetFallVelocity(float Velocity);                                                                             // [0x1876420] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.FallingStateComponent.Server_ClimbLedge
	// void Server_ClimbLedge(bool shouldPlayAnimation);                                                                        // [0x1876390] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FallingStateComponent.Server_ActivateJumpBoots
	// void Server_ActivateJumpBoots();                                                                                         // [0x184b4a0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FallingStateComponent.ReceiveHoverBootsTick
	// void ReceiveHoverBootsTick(float DeltaSeconds);                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FallingStateComponent.ReceiveHoverBootsActiveChanged
	// void ReceiveHoverBootsActiveChanged(bool IsActive);                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FallingStateComponent.OnRep_HoverBootsActive
	// void OnRep_HoverBootsActive();                                                                                           // [0x1875eb0] Final|Native|Protected 
	// Function /Script/FSD.FallingStateComponent.JumpReleased
	// void JumpReleased();                                                                                                     // [0x1875c90] Final|Native|Protected 
	// Function /Script/FSD.FallingStateComponent.JumpPressed
	// void JumpPressed();                                                                                                      // [0x1875c70] Final|Native|Protected 
	// Function /Script/FSD.FallingStateComponent.HoverBootsReleased
	// void HoverBootsReleased();                                                                                               // [0x1875be0] Final|Native|Protected 
	// Function /Script/FSD.FallingStateComponent.HoverBootsPressed
	// void HoverBootsPressed();                                                                                                // [0x1875bc0] Final|Native|Protected 
	// Function /Script/FSD.FallingStateComponent.All_ShowJumpBootsActivation
	// void All_ShowJumpBootsActivation();                                                                                      // [0x1875640] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.FallingStateComponent.All_ShowFallImpact
	// void All_ShowFallImpact(class UFSDPhysicalMaterial* PhysMat, FVector_NetQuantize Location);                              // [0x1875570] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.FallingStateComponent.All_ShowClimbLedge
	// void All_ShowClimbLedge();                                                                                               // [0x1875550] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.FindFriendSessionsBlueprintCallProxy
/// Size: 0x0050 (0x000030 - 0x000080)
class UFindFriendSessionsBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FindFriendSessionsBlueprintCallProxy.FindFriendSessions
	// class UFindFriendSessionsBlueprintCallProxy* FindFriendSessions(class UObject* WorldContextObject, FString FriendId);    // [0x18759a0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.FirstPersonSkeletalMeshComponent
/// Size: 0x0000 (0x000ED0 - 0x000ED0)
class UFirstPersonSkeletalMeshComponent : public USkeletalMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3792;

public:


	/// Functions
	// Function /Script/FSD.FirstPersonSkeletalMeshComponent.SetFirstPersonFOVEnabled
	// void SetFirstPersonFOVEnabled(bool bEnabled);                                                                            // [0x1876660] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FirstPersonSkeletalMeshComponent.GetSetFirstPersonFOVEnabled
	// bool GetSetFirstPersonFOVEnabled();                                                                                      // [0x1875b60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FirstPersonSkeletalMeshComponent.CalcFirstPersonFOVPositionCorrection
	// FVector CalcFirstPersonFOVPositionCorrection(class APlayerController* PlayerController, FVector& origPos);               // [0x1875750] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FirstPersonStaticMeshComponent
/// Size: 0x0010 (0x0004E0 - 0x0004F0)
class UFirstPersonStaticMeshComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	DMember(bool)                                      EnabledFPFOV                                                OFFSET(get<bool>, {0x4E0, 1, 0, 0})
};

/// Class /Script/FSD.InterpolatedFirstPersonStaticMeshComponent
/// Size: 0x0000 (0x0004F0 - 0x0004F0)
class UInterpolatedFirstPersonStaticMeshComponent : public UFirstPersonStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
};

/// Class /Script/FSD.FirstPersonWidgetComponent
/// Size: 0x0000 (0x0005A0 - 0x0005A0)
class UFirstPersonWidgetComponent : public UWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1440;

public:
};

/// Class /Script/FSD.FirstPersonParticleSystemComponent
/// Size: 0x0000 (0x0006B0 - 0x0006B0)
class UFirstPersonParticleSystemComponent : public UParticleSystemComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1712;

public:


	/// Functions
	// Function /Script/FSD.FirstPersonParticleSystemComponent.SpawnFirstPersonEmitterAttached
	// class UParticleSystemComponent* SpawnFirstPersonEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy); // [0x1876960] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FirstPersonNiagaraComponent
/// Size: 0x0000 (0x000600 - 0x000600)
class UFirstPersonNiagaraComponent : public UNiagaraComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1536;

public:


	/// Functions
	// Function /Script/FSD.FirstPersonNiagaraComponent.SpawnFirstPersonEmitterAttached
	// class UNiagaraComponent* SpawnFirstPersonEmitterAttached(class UNiagaraSystem* inNiagaraSystem, class USceneComponent* AttachToComponent, FName AttachPointName, FVector Location, FRotator Rotation, FVector Scale, TEnumAsByte<EAttachLocation> LocationType, bool inAutoDestroy); // [0x18766e0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FirstPersonPointLightComponent
/// Size: 0x0008 (0x000358 - 0x000360)
class UFirstPersonPointLightComponent : public UPointLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
};

/// Class /Script/FSD.FlameThrowerItem
/// Size: 0x02C8 (0x000780 - 0x000A48)
class AFlameThrowerItem : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2632;

public:
	CMember(class UParticleSystemComponent*)           FlameParticleComponent                                      OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(class UStickyFlameSpawner*)                StickyFlames                                                OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(class UDamageComponent*)                   AoEHeatDamageComponent                                      OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(class UDamageComponent*)                   ExplodingTargetsDamageComponent                             OFFSET(get<T>, {0x7A0, 8, 0, 0})
	CMember(class UMotionAudioController*)             MotionAudio                                                 OFFSET(get<T>, {0x7A8, 8, 0, 0})
	DMember(int32_t)                                   ShotCostProjectile                                          OFFSET(get<int32_t>, {0x7B0, 4, 0, 0})
	SMember(FDecalData)                                ImpactDecal                                                 OFFSET(getStruct<T>, {0x7B8, 32, 0, 0})
	DMember(float)                                     DecalDelay                                                  OFFSET(get<float>, {0x7D8, 4, 0, 0})
	DMember(float)                                     CurrentDecalDelay                                           OFFSET(get<float>, {0x7DC, 4, 0, 0})
	CMember(class UParticleSystem*)                    ImpactParticles                                             OFFSET(get<T>, {0x7E0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           ImpactParticleInstance                                      OFFSET(get<T>, {0x7E8, 8, 0, 0})
	CMember(class UParticleSystem*)                    FP_LongReachParticles                                       OFFSET(get<T>, {0x7F0, 8, 0, 0})
	CMember(class UParticleSystem*)                    TP_LongReachParticles                                       OFFSET(get<T>, {0x7F8, 8, 0, 0})
	DMember(float)                                     VeryLongReachThreshold                                      OFFSET(get<float>, {0x800, 4, 0, 0})
	CMember(class UParticleSystem*)                    FP_VeryLongReachParticles                                   OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(class UParticleSystem*)                    TP_VeryLongReachParticles                                   OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(TArray<FName>)                             FlameParameterNames                                         OFFSET(get<T>, {0x818, 16, 0, 0})
	DMember(float)                                     DamageSphereRadius                                          OFFSET(get<float>, {0x828, 4, 0, 0})
	DMember(float)                                     MaxFlameDistance                                            OFFSET(get<float>, {0x82C, 4, 0, 0})
	DMember(float)                                     FlameGrowthPerSecond                                        OFFSET(get<float>, {0x830, 4, 0, 0})
	DMember(float)                                     FlameEndPointResponsiveness                                 OFFSET(get<float>, {0x834, 4, 0, 0})
	DMember(float)                                     FlameIntensityPerSecond                                     OFFSET(get<float>, {0x838, 4, 0, 0})
	DMember(float)                                     DirectDamageTimeLimit                                       OFFSET(get<float>, {0x840, 4, 0, 0})
	CMember(class UClass*)                             OnFireStatusEffect                                          OFFSET(get<T>, {0x848, 8, 0, 0})
	DMember(float)                                     ChanceToFleeOnDamage                                        OFFSET(get<float>, {0x850, 4, 0, 0})
	DMember(float)                                     MeltPointRadius                                             OFFSET(get<float>, {0x854, 4, 0, 0})
	DMember(float)                                     MeltPointBuildTime                                          OFFSET(get<float>, {0x858, 4, 0, 0})
	DMember(float)                                     MeltCarveTime                                               OFFSET(get<float>, {0x85C, 4, 0, 0})
	CMember(class UParticleSystem*)                    MeltSteamParticle                                           OFFSET(get<T>, {0x860, 8, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x868, 16, 0, 0})
	DMember(bool)                                      LongReachEnabled                                            OFFSET(get<bool>, {0x878, 1, 0, 0})
	DMember(bool)                                      AoEHeatEnabled                                              OFFSET(get<bool>, {0x888, 1, 0, 0})
	DMember(float)                                     KilledTargetsExplosionChance                                OFFSET(get<float>, {0x88C, 4, 0, 0})
	DMember(float)                                     ShowDamageParticle                                          OFFSET(get<float>, {0x890, 4, 0, 0})
	CMember(class UParticleSystem*)                    DamangeTargetsParticles                                     OFFSET(get<T>, {0x898, 8, 0, 0})
	CMember(class UParticleSystem*)                    KilledTargetsExplodingParticles                             OFFSET(get<T>, {0x8A0, 8, 0, 0})
	CMember(class USoundCue*)                          KilledTargetsExplodingSound                                 OFFSET(get<T>, {0x8A8, 8, 0, 0})
	CMember(class UProjectileLauncherBaseComponent*)   ProjectileLancher                                           OFFSET(get<T>, {0x8B0, 8, 0, 0})
	SMember(FText)                                     FireProjectileHoldDescription                               OFFSET(getStruct<T>, {0x8B8, 24, 0, 0})
	DMember(float)                                     FireProjectileHoldDuration                                  OFFSET(get<float>, {0x8D0, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFireProjectileChargeBegin                                 OFFSET(getStruct<T>, {0x8D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFireProjectileChargeEnd                                   OFFSET(getStruct<T>, {0x8E8, 16, 0, 0})
	CMember(TMap<class AActor*, float>)                ExplosionCandidates                                         OFFSET(get<T>, {0x9A0, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.FlameThrowerItem.TriggerAoEHeat
	// void TriggerAoEHeat();                                                                                                   // [0x1876d80] Final|Native|Protected 
	// Function /Script/FSD.FlameThrowerItem.SetIsChargingForProjectile
	// void SetIsChargingForProjectile(bool isCharging);                                                                        // [0x17f4b40] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FlameThrowerItem.ServerMeltIce
	// void ServerMeltIce(TArray<FVector> meltPoints);                                                                          // [0x18762f0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FlameThrowerItem.ServerDoDamage
	// void ServerDoDamage(FVector_NetQuantize Start, FVector_NetQuantize End);                                                 // [0x1876200] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FlameThrowerItem.OnTargetKilled
	// void OnTargetKilled(class UHealthComponentBase* Health);                                                                 // [0x1876070] Final|Native|Protected 
	// Function /Script/FSD.FlameThrowerItem.OnTargetDamaged
	// void OnTargetDamaged(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x1875f10] Final|Native|Protected 
	// Function /Script/FSD.FlameThrowerItem.All_ShowTargetBurstIntoFire
	// void All_ShowTargetBurstIntoFire(FVector_NetQuantize Location, FRotator Rotation);                                       // [0x1875660] Net|Native|Event|NetMulticast|Protected|HasDefaults 
	// Function /Script/FSD.FlameThrowerItem.All_FlameFeedback
	// void All_FlameFeedback(FVector_NetQuantize Location, FRotator Rotation);                                                 // [0x1875460] Net|Native|Event|NetMulticast|Protected|HasDefaults 
};

/// Class /Script/FSD.FlameWallProjectile
/// Size: 0x00B0 (0x000340 - 0x0003F0)
class AFlameWallProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	SMember(FVector)                                   initialLocation                                             OFFSET(getStruct<T>, {0x340, 12, 0, 0})
	CMember(class UClass*)                             SegmentParticleClass                                        OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UClass*)                             SegmentDropClass                                            OFFSET(get<T>, {0x358, 8, 0, 0})
	DMember(int32_t)                                   SegmentCount                                                OFFSET(get<int32_t>, {0x360, 4, 0, 0})
	DMember(float)                                     WallWidth                                                   OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     WallDepth                                                   OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     SegmentDropSpacingMultiplier                                OFFSET(get<float>, {0x36C, 4, 0, 0})
	CMember(class UClass*)                             ImpactClass                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(bool)                                      OnlyImpactActorOnce                                         OFFSET(get<bool>, {0x378, 1, 0, 0})
	CMember(class UStickyFlameSpawner*)                StickyFlameSpawner                                          OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(TSet<AActor*>)                             ImpactedActors                                              OFFSET(get<T>, {0x3A0, 80, 0, 0})
};

/// Class /Script/FSD.FlameWallSegment
/// Size: 0x0060 (0x000220 - 0x000280)
class AFlameWallSegment : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class USphereComponent*)                   CollisionComponent                                          OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UStickyFlameSpawner*)                StickyFlameSpawner                                          OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(TSet<UClass*>)                             NonStoppingClasses                                          OFFSET(get<T>, {0x230, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.FlameWallSegment.OnDeactivate
	// void OnDeactivate();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FlameWallSegment.OnComponentHit
	// void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x1875cb0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.Flare
/// Size: 0x0088 (0x000238 - 0x0002C0)
class AFlare : public AFSDPhysicsActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(float)                                     InitialSpeed                                                OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     InitialAngularImpulse                                       OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     InitialAngularImpulseRandomScale                            OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(int32_t)                                   MaxFlares                                                   OFFSET(get<int32_t>, {0x264, 4, 0, 0})
	DMember(float)                                     ProductionTime                                              OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x26C, 4, 0, 0})
	SMember(FLinearColor)                              ChromaColor                                                 OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	DMember(bool)                                      IsFlareOn                                                   OFFSET(get<bool>, {0x280, 1, 0, 0})
	CMember(class AActor*)                             DamageCauser                                                OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UClass*)                             WeaponPreviewClass                                          OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UClass*)                             LoadoutItem                                                 OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class USoundCue*)                          ImpactGroundSound                                           OFFSET(get<T>, {0x2B0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.Flare.StartLightFunction
	// void StartLightFunction(class ULightComponent* mainLight, TArray<ULightComponent*> spotLights, class UCurveFloat* flutterCurve, class UCurveFloat* fadeInCurve); // [0x1876be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Flare.OnUpdateShadowRadius
	// void OnUpdateShadowRadius();                                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Flare.OnRep_IsFlareOn
	// void OnRep_IsFlareOn();                                                                                                  // [0x1875ed0] Final|Native|Protected 
	// Function /Script/FSD.Flare.OnFlareSpawnCompleted
	// void OnFlareSpawnCompleted();                                                                                            // [0x1875e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Flare.OnFlareIgnite
	// void OnFlareIgnite();                                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Flare.OnFlareExtinguish
	// void OnFlareExtinguish();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Flare.Inhibit
	// void Inhibit();                                                                                                          // [0x1875c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Flare.ImmidiateFadeLight
	// float ImmidiateFadeLight();                                                                                              // [0x1875c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Flare.GetWeaponViewClass
	// class UClass* GetWeaponViewClass();                                                                                      // [0x1875b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Flare.GetFlareDefaultObject
	// class AFlare* GetFlareDefaultObject(class UClass* flareClass);                                                           // [0x1875ad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.Flare.ActorWasHit
	// void ActorWasHit(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);             // [0x18752c0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.Flare.ActivateFlare
	// void ActivateFlare();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.NegPointLightComponent
/// Size: 0x0008 (0x000358 - 0x000360)
class UNegPointLightComponent : public UPointLightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
};

/// Struct /Script/FSD.FlareMeta
/// Size: 0x0024 (0x000000 - 0x000024)
class FFlareMeta : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Inhibit                                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     InvRadius                                                   OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FVector)                                   Pos                                                         OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	DMember(bool)                                      Moving                                                      OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/FSD.FlareController
/// Size: 0x0040 (0x000030 - 0x000070)
class UFlareController : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FMulticastInlineDelegate)                  OnShadowQualityChanged                                      OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(TArray<FFlareMeta>)                        FlaresMeta                                                  OFFSET(get<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FlareController.UnregisterFlareGunProjectile
	// void UnregisterFlareGunProjectile(class AFlareGunProjectile* flareprj);                                                  // [0x1876e20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FlareController.UnregisterFlare
	// void UnregisterFlare(class AFlare* Flare);                                                                               // [0x1876da0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FlareController.RegisterFlareGunProjectile
	// void RegisterFlareGunProjectile(class AFlareGunProjectile* flareprj);                                                    // [0x1876180] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FlareController.RegisterFlare
	// void RegisterFlare(class AFlare* Flare);                                                                                 // [0x1876100] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FlareController.FindFlareNear
	// class AActor* FindFlareNear(class UObject* WorldContextObject, FVector Pos, bool allowMoving, float maxLightRadiusFraction); // [0x1875830] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FlareGunProjectile
/// Size: 0x0010 (0x000340 - 0x000350)
class AFlareGunProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(bool)                                      IsFlareOn                                                   OFFSET(get<bool>, {0x344, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FlareGunProjectile.UpdateLightDuration
	// void UpdateLightDuration(float lightDuration);                                                                           // [0x1876ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FlareGunProjectile.OnUpdateShadowRadius
	// void OnUpdateShadowRadius();                                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FlareGunProjectile.OnRep_IsFlareOn
	// void OnRep_IsFlareOn();                                                                                                  // [0x1875ef0] Final|Native|Public  
	// Function /Script/FSD.FlareGunProjectile.OnFlareIgnite
	// void OnFlareIgnite();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FlareGunProjectile.OnFlareExtinguish
	// void OnFlareExtinguish();                                                                                                // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FlareGunProjectile.OnDroppodImpact
	// void OnDroppodImpact(class ATeamTransport* DropPod);                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FlareGunProjectile.Inhibit
	// void Inhibit();                                                                                                          // [0x1875c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FlareGunProjectile.ActivateFlare
	// void ActivateFlare();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.PerkAsset
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UPerkAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(bool)                                      bIsEquippable                                               OFFSET(get<bool>, {0x60, 1, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutOnUseCharge                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           PerkLogicClasses                                            OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             HudIconWidgetClass                                          OFFSET(get<T>, {0x80, 40, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           HudActivationWidgets                                        OFFSET(get<T>, {0xA8, 16, 0, 0})
	DMember(int32_t)                                   MaxUseCharges                                               OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(float)                                     CoolDownBetweenUse                                          OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(bool)                                      bIsHighlighted                                              OFFSET(get<bool>, {0xC0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PerkAsset.UseCharge
	// bool UseCharge(class APlayerController* PlayerController);                                                               // [0x1951850] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PerkAsset.Unequip
	// bool Unequip(class UObject* WorldContext, class UPlayerCharacterID* characterID);                                        // [0x1951780] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PerkAsset.SetHighlighted
	// void SetHighlighted(class UObject* WorldContext, bool IsHighlighted);                                                    // [0x19513f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PerkAsset.SetCharacterPerks
	// void SetCharacterPerks(class UObject* WorldContext, class UPlayerCharacterID* characterID, TArray<UPerkAsset*>& perks);  // [0x19512d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.PerkAsset.IsUsageType
	// bool IsUsageType(EPerkUsageType InType);                                                                                 // [0x1950fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.IsPerkAvailableInTier
	// bool IsPerkAvailableInTier(int32_t Tier);                                                                                // [0x1950d00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.IsEquippedBy
	// bool IsEquippedBy(class UObject* WorldContext, class UPlayerCharacterID* characterID);                                   // [0x1950c30] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetUseCoolDownTimeLeft
	// float GetUseCoolDownTimeLeft(class APlayerController* PlayerController);                                                 // [0x1950ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetUseCoolDownProgress
	// float GetUseCoolDownProgress(class APlayerController* PlayerController);                                                 // [0x1950a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetUseCoolDownDuration
	// float GetUseCoolDownDuration(class APlayerController* PlayerController);                                                 // [0x1950990] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetUsageType
	// EPerkUsageType GetUsageType();                                                                                           // [0x1950960] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetStateAtTier
	// EPerkTierState GetStateAtTier(class UObject* WorldContext, int32_t Tier);                                                // [0x1950780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetRemainingUseCharges
	// int32_t GetRemainingUseCharges(class APlayerController* PlayerController);                                               // [0x1950650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetRankTier
	// int32_t GetRankTier(int32_t Rank);                                                                                       // [0x19505b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetRankDescription
	// FText GetRankDescription(int32_t Rank);                                                                                  // [0x19504b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetRankCost
	// int32_t GetRankCost(int32_t Rank);                                                                                       // [0x1950410] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetRankAtTier
	// bool GetRankAtTier(int32_t Tier, int32_t& Rank);                                                                         // [0x1950330] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetMaxUseCharges
	// int32_t GetMaxUseCharges(class APlayerController* PlayerController);                                                     // [0x194fa20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetMaxRank
	// int32_t GetMaxRank();                                                                                                    // [0x194f9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetHudIconWidgetClass
	// class UClass* GetHudIconWidgetClass();                                                                                   // [0x194f8e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetHudActivationWidgets
	// TArray<UClass*> GetHudActivationWidgets(EPerkHUDActivationLocation Location);                                            // [0x194f800] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetDelegates
	// class UPerkDelegateItem* GetDelegates(class UObject* WorldContext);                                                      // [0x194f500] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetCurrentRank
	// int32_t GetCurrentRank(class UObject* WorldContext);                                                                     // [0x194f460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetChargesUsed
	// int32_t GetChargesUsed(class APlayerController* PlayerController);                                                       // [0x194f3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.GetAdditionalRankDescription
	// FString GetAdditionalRankDescription(int32_t Rank);                                                                      // [0x194ee90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.Equip
	// bool Equip(class UObject* WorldContext, class UPlayerCharacterID* characterID);                                          // [0x194e9f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PerkAsset.CheatSetCurrentRank
	// void CheatSetCurrentRank(class UObject* WorldContext, int32_t InRank);                                                   // [0x194e7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PerkAsset.CanUseCharge
	// bool CanUseCharge(class APlayerController* PlayerController);                                                            // [0x194e740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkAsset.BuyPerkAtTier
	// bool BuyPerkAtTier(class UObject* WorldContext, int32_t Tier);                                                           // [0x194e5e0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.FloatPerkRank
/// Size: 0x0008 (0x000000 - 0x000008)
class FFloatPerkRank : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   Tier                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Cost                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.FloatPerkRankValue
/// Size: 0x0008 (0x000000 - 0x000008)
class FFloatPerkRankValue : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   RankIndex                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.FloatPerkEffect
/// Size: 0x0030 (0x000000 - 0x000030)
class FFloatPerkEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UFloatPerkActivation*)               PerkActivation                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     FormattedDescription                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TArray<FFloatPerkRankValue>)               RankValues                                                  OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Class /Script/FSD.FloatPerkAsset
/// Size: 0x0020 (0x0000C8 - 0x0000E8)
class UFloatPerkAsset : public UPerkAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(TArray<FFloatPerkRank>)                    Ranks                                                       OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<FFloatPerkEffect>)                  Effects                                                     OFFSET(get<T>, {0xD8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FloatPerkAsset.GetPerkValue
	// float GetPerkValue(class UObject* WorldContext);                                                                         // [0x187b930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FloatPerkAsset.GetLastTierValue
	// float GetLastTierValue();                                                                                                // [0x187b830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FloatPerkAsset.GetFloatPerkValue
	// float GetFloatPerkValue(class UObject* WorldContext, class UFloatPerkAsset* Perk, float UnclaimedValue);                 // [0x187b1f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FloatPerkActivation
/// Size: 0x0000 (0x000030 - 0x000030)
class UFloatPerkActivation : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/FSD.FloatPerkActivation.Receive_ActivatePerk
	// void Receive_ActivatePerk(class APlayerCharacter* Character, float Value);                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.StatPerkActivation
/// Size: 0x0010 (0x000030 - 0x000040)
class UStatPerkActivation : public UFloatPerkActivation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UPawnStat*)                          PawnStat                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(EPawnStatType)                             StatType                                                    OFFSET(get<T>, {0x38, 1, 0, 0})
};

/// Class /Script/FSD.FloatPerkComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UFloatPerkComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(float)                                     FloatValue                                                  OFFSET(get<float>, {0xB0, 4, 0, 0})
	CMember(class APlayerCharacter*)                   PlayerCharacter                                             OFFSET(get<T>, {0xB8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FloatPerkComponent.Receive_OnInitialized
	// void Receive_OnInitialized();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.CreateComponentPerkActivation
/// Size: 0x0028 (0x000030 - 0x000058)
class UCreateComponentPerkActivation : public UFloatPerkActivation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TSoftObjectPtr<class UClass*>)             ComponentClass                                              OFFSET(get<T>, {0x30, 40, 0, 0})
};

/// Class /Script/FSD.EscapableGrabberEnemyActivation
/// Size: 0x0028 (0x000030 - 0x000058)
class UEscapableGrabberEnemyActivation : public UFloatPerkActivation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TSoftObjectPtr<class UClass*>)             EnemyGrabberClass                                           OFFSET(get<T>, {0x30, 40, 0, 0})
};

/// Class /Script/FSD.SetCooldownPerkActivation
/// Size: 0x0000 (0x000030 - 0x000030)
class USetCooldownPerkActivation : public UFloatPerkActivation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.SetMaxUsesPerkActivation
/// Size: 0x0000 (0x000030 - 0x000030)
class USetMaxUsesPerkActivation : public UFloatPerkActivation
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.KillNearbyCreaturePerkComponent
/// Size: 0x0028 (0x0000C0 - 0x0000E8)
class UKillNearbyCreaturePerkComponent : public UFloatPerkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(TSoftObjectPtr<class UClass*>)             EnemyClass                                                  OFFSET(get<T>, {0xC0, 40, 0, 0})
};

/// Class /Script/FSD.BezerkPerkComponent
/// Size: 0x0010 (0x0000C0 - 0x0000D0)
class UBezerkPerkComponent : public UFloatPerkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(class UPawnStat*)                          BoostedStat                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     AmountPerValue                                              OFFSET(get<float>, {0xC8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.BezerkPerkComponent.OnHealthChanged
	// void OnHealthChanged(float Health);                                                                                      // [0x187bc90] Final|Native|Protected 
};

/// Class /Script/FSD.EyeForEyePerkComponent
/// Size: 0x0040 (0x0000C0 - 0x000100)
class UEyeForEyePerkComponent : public UFloatPerkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0xC0, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EyeForEyeSTE                                                OFFSET(get<T>, {0xC8, 40, 0, 0})
	CMember(class UClass*)                             LoadedSTE                                                   OFFSET(get<T>, {0xF8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.EyeForEyePerkComponent.OnHit
	// void OnHit(float Damage, FDamageData& DamageData, bool anyHealthLost);                                                   // [0x187bef0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FSD.ThornsPerkComponent
/// Size: 0x0020 (0x0000C0 - 0x0000E0)
class UThornsPerkComponent : public UFloatPerkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0xC8, 4, 0, 0})
	CMember(class UClass*)                             ThornsSTE                                                   OFFSET(get<T>, {0xD0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ThornsPerkComponent.OnHit
	// void OnHit(float Damage, FDamageData& DamageData, bool anyHealthLost);                                                   // [0x187c040] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FSD.SalutePerkComponent
/// Size: 0x0010 (0x0000C0 - 0x0000D0)
class USalutePerkComponent : public UFloatPerkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     FleeRadius                                                  OFFSET(get<float>, {0xC4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SalutePerkComponent.OnSalute
	// void OnSalute();                                                                                                         // [0x187c210] Final|Native|Protected 
};

/// Class /Script/FSD.ShieldLinkComponent
/// Size: 0x0078 (0x0000C0 - 0x000138)
class UShieldLinkComponent : public UFloatPerkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(class UClass*)                             BoostedStatusEffect                                         OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UStatusEffect*)                      BoostedStatusEffectInstance                                 OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(float)                                     LinkDistance                                                OFFSET(get<float>, {0xD0, 4, 0, 0})
	CMember(TSet<APlayerCharacter*>)                   LinkedCharacters                                            OFFSET(get<T>, {0xD8, 80, 0, 0})
	CMember(class UClass*)                             LinkStatusEffect                                            OFFSET(get<T>, {0x128, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ShieldLinkComponent.TimerFunction
	// void TimerFunction();                                                                                                    // [0x187c4e0] Final|Native|Protected 
};

/// Class /Script/FSD.BeastMasterComponent
/// Size: 0x0008 (0x0000C0 - 0x0000C8)
class UBeastMasterComponent : public UFloatPerkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(bool)                                      ShowCanCharmIcon                                            OFFSET(get<bool>, {0xC0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BeastMasterComponent.SetDamage
	// void SetDamage(class UDamageComponent* cmp, float dmg);                                                                  // [0x187c390] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.BeastMasterComponent.AddPetComponent
	// class UActorComponent* AddPetComponent(class UClass* ComponentClass, class AFSDPawn* targetPet, class APlayerCharacter* petOwner); // [0x187aff0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.PetComponent
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UPetComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   OwningPlayer                                                OFFSET(get<T>, {0xB0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PetComponent.ReceiveOwningPlayerChanged
	// void ReceiveOwningPlayerChanged();                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.BeastMasterUseSphere
/// Size: 0x0000 (0x000470 - 0x000470)
class UBeastMasterUseSphere : public USphereComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
};

/// Struct /Script/FSD.LayeredNoise
/// Size: 0x0010 (0x000000 - 0x000010)
class FLayeredNoise : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UFloodFillSettings*)                 Noise                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.FloodFillSettings
/// Size: 0x0038 (0x000030 - 0x000068)
class UFloodFillSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FVector)                                   NoiseSize                                                   OFFSET(getStruct<T>, {0x30, 12, 0, 0})
	DMember(float)                                     FreqMultiplier                                              OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     AmplitudeMultiplier                                         OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(bool)                                      Turbulence                                                  OFFSET(get<bool>, {0x4C, 1, 0, 0})
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x4D, 1, 0, 0})
	DMember(int32_t)                                   Octaves                                                     OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	CMember(TArray<FLayeredNoise>)                     NoiseLayers                                                 OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/FSD.DetailNoise
/// Size: 0x0008 (0x000068 - 0x000070)
class UDetailNoise : public UFloodFillSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     NoiseRange                                                  OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/FSD.FlyingStateComponent
/// Size: 0x0000 (0x000100 - 0x000100)
class UFlyingStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Class /Script/FSD.FoamPuddle
/// Size: 0x0160 (0x000220 - 0x000380)
class AFoamPuddle : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USceneComponent*)                    PuddleRoot                                                  OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  NS_Foam                                                     OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        ScaleCurve                                                  OFFSET(getStruct<T>, {0x238, 136, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnChangeVacuumStateDelegate                                 OFFSET(getStruct<T>, {0x2E0, 16, 0, 0})
	CMember(TArray<class UClass*>)                     VacuumableActors                                            OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(class USoundCue*)                          PickupSound                                                 OFFSET(get<T>, {0x300, 8, 0, 0})
	DMember(float)                                     PickupSoundCooldown                                         OFFSET(get<float>, {0x308, 4, 0, 0})
	CMember(class USoundCue*)                          PickupFilledSound                                           OFFSET(get<T>, {0x310, 8, 0, 0})
	DMember(float)                                     PickupFilledCooldown                                        OFFSET(get<float>, {0x318, 4, 0, 0})
	CMember(class USoundCue*)                          VacuumedSound                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     VacuumedCooldown                                            OFFSET(get<float>, {0x328, 4, 0, 0})
	CMember(class USoundCue*)                          VacuumedSoundFilled                                         OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(float)                                     VacuumedSoundFilledCooldown                                 OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     InitialDebrisRadius                                         OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     TotalRadiusGrowth                                           OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     GrowthTime                                                  OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     AttractorPowerWhenVacuuming                                 OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     ScaleTimeVacuuming                                          OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x364, 4, 0, 0})
	CMember(EVacuumState)                              State                                                       OFFSET(get<T>, {0x368, 1, 0, 0})
	CMember(class USceneComponent*)                    VacuumSource                                                OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(uint16_t)                                  MaxSoapPiles                                                OFFSET(get<uint16_t>, {0x378, 2, 0, 0})
	DMember(bool)                                      UsesLocalSpace                                              OFFSET(get<bool>, {0x37A, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FoamPuddle.SetState
	// void SetState(EVacuumState State);                                                                                       // [0x187c460] Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FoamPuddle.SetPuddleLifetime
	// void SetPuddleLifetime(float LifeTime);                                                                                  // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FoamPuddle.ScaleOutAndDestroy
	// void ScaleOutAndDestroy();                                                                                               // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FoamPuddle.OnRep_State
	// void OnRep_State(EVacuumState prevState);                                                                                // [0x187c190] Final|Native|Protected 
	// Function /Script/FSD.FoamPuddle.OnHit
	// void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x187bd10] Final|Native|Public|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.FoamPuddle_WalkingPlagueheart
/// Size: 0x0008 (0x000380 - 0x000388)
class AFoamPuddle_WalkingPlagueheart : public AFoamPuddle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 904;

public:
	DMember(float)                                     FoamCleanRadius                                             OFFSET(get<float>, {0x380, 4, 0, 0})
};

/// Class /Script/FSD.ForgingFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UForgingFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.ForgingFunctionLibrary.PickForgingMasteryDefaultReward
	// class USchematic* PickForgingMasteryDefaultReward(class UObject* WorldContextObject, ESchematicType InType);             // [0x187c230] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ForgingFunctionLibrary.GiveForgingXP
	// FForgingResult GiveForgingXP(class UObject* WorldContextObject);                                                         // [0x187b9d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ForgingFunctionLibrary.GetOwnedSchematics
	// TArray<USchematic*> GetOwnedSchematics(class UObject* WorldContextObject);                                               // [0x187b860] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ForgingFunctionLibrary.GetForgingPendingMasteryRewardNewest
	// void GetForgingPendingMasteryRewardNewest(class UObject* WorldContextObject, bool& OutSuccess, FForgingPendingReward& OutReward); // [0x187b700] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ForgingFunctionLibrary.GetForgingMasteryRewardType
	// ESchematicType GetForgingMasteryRewardType(class UObject* WorldContextObject, int32_t Level, bool ReturnDefaultIfUnavailable); // [0x187b600] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ForgingFunctionLibrary.GetForgingMasteryRewardDefaultType
	// ESchematicType GetForgingMasteryRewardDefaultType(ESchematicType InType);                                                // [0x187b580] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ForgingFunctionLibrary.GetForgingLevelProgress
	// float GetForgingLevelProgress(class UObject* WorldContextObject);                                                        // [0x187b4f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ForgingFunctionLibrary.GetForgingLevel
	// int32_t GetForgingLevel(class UObject* WorldContextObject);                                                              // [0x187b460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ForgingFunctionLibrary.GetForgingHasPendingMasteryRewards
	// bool GetForgingHasPendingMasteryRewards(class UObject* WorldContextObject);                                              // [0x187b3d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ForgingFunctionLibrary.GetForgedSchematics
	// TArray<USchematic*> GetForgedSchematics(class UObject* WorldContextObject);                                              // [0x187b300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ForgingFunctionLibrary.ClaimForgingPendingMasteryReward
	// void ClaimForgingPendingMasteryReward(class UObject* WorldContextObject, int32_t Level, class USchematic* Reward);       // [0x187b0f0] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/FSD.FormationDataItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FFormationDataItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.FormationData
/// Size: 0x00A0 (0x000030 - 0x0000D0)
class UFormationData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TArray<FFormationDataItem>)                FormationItems                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FGameplayTagQuery)                         LeaderQuery                                                 OFFSET(getStruct<T>, {0x40, 72, 0, 0})
	SMember(FGameplayTagQuery)                         MemberQuery                                                 OFFSET(getStruct<T>, {0x88, 72, 0, 0})
};

/// Class /Script/FSD.GroundFormationData
/// Size: 0x0010 (0x0000D0 - 0x0000E0)
class UGroundFormationData : public UFormationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   FormationSize                                               OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(float)                                     FormationSpread                                             OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     RandomSpread                                                OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/FSD.FlyingFormationData
/// Size: 0x0010 (0x0000D0 - 0x0000E0)
class UFlyingFormationData : public UFormationData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   FormationSize                                               OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(float)                                     FormationSpread                                             OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     RandomSpread                                                OFFSET(get<float>, {0xD8, 4, 0, 0})
};

/// Class /Script/FSD.FormationsManagerComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UFormationsManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(class UEnemySpawnManager*)                 SpawnManager                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(TArray<class UFormationData*>)             FormationData                                               OFFSET(get<T>, {0xB8, 16, 0, 0})
};

/// Class /Script/FSD.FragileDebrisCleaner
/// Size: 0x0018 (0x0001F8 - 0x000210)
class UFragileDebrisCleaner : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	DMember(float)                                     CleanRadius                                                 OFFSET(get<float>, {0x1F8, 4, 0, 0})
};

/// Class /Script/FSD.FriendlyHealthComponent
/// Size: 0x0040 (0x000270 - 0x0002B0)
class UFriendlyHealthComponent : public UHealthComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     FriendlyFireModifier                                        OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     NeutralDamageModifier                                       OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     BigHitDamageModifier                                        OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     BigHitDamageReductionThreshold                              OFFSET(get<float>, {0x284, 4, 0, 0})
	CMember(class UParticleSystem*)                    GenericImpactParticles                                      OFFSET(get<T>, {0x288, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FriendlyHealthComponent.GetMaxHealth
	// float GetMaxHealth();                                                                                                    // [0x1861900] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FriendlyParasite
/// Size: 0x0090 (0x0003B0 - 0x000440)
class AFriendlyParasite : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	SMember(FMulticastInlineDelegate)                  OnIsAttackingEvent                                          OFFSET(getStruct<T>, {0x3B0, 16, 0, 0})
	CMember(class USphereComponent*)                   Collision                                                   OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class USphereComponent*)                   FindEnemyCollision                                          OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x3D0, 8, 0, 0})
	DMember(float)                                     MoveSpeed                                                   OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(float)                                     DamageBeforeDeath                                           OFFSET(get<float>, {0x3DC, 4, 0, 0})
	DMember(bool)                                      CountDirectDMG                                              OFFSET(get<bool>, {0x3E0, 1, 0, 0})
	DMember(bool)                                      CountAreaDMG                                                OFFSET(get<bool>, {0x3E1, 1, 0, 0})
	DMember(float)                                     StartFollowRange                                            OFFSET(get<float>, {0x3E4, 4, 0, 0})
	DMember(float)                                     DamageRange                                                 OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     DamageTime                                                  OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(float)                                     FoldoutRange                                                OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     SpinRange                                                   OFFSET(get<float>, {0x3F4, 4, 0, 0})
	CMember(class AFSDPawn*)                           TargetEnemy                                                 OFFSET(get<T>, {0x3F8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FriendlyParasite.SelectNewTarget
	// void SelectNewTarget(class UHealthComponentBase* Health);                                                                // [0x187c300] Final|Native|Private 
	// Function /Script/FSD.FriendlyParasite.OnEnemyCollisionEnter
	// void OnEnemyCollisionEnter(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x187ba70] Final|Native|Private|HasOutParms 
};

/// Class /Script/FSD.FriendlyParasiteAnimInstance
/// Size: 0x0010 (0x000350 - 0x000360)
class UFriendlyParasiteAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(bool)                                      InFoldoutRange                                              OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(bool)                                      InSpinRange                                                 OFFSET(get<bool>, {0x351, 1, 0, 0})
};

/// Class /Script/FSD.FrontendBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFrontendBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FrontendBlueprintLibrary.OpenURLInExternalBrowser
	// void OpenURLInExternalBrowser(FString URL);                                                                              // [0x187eb10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FrontendBlueprintLibrary.IsShippingBuild
	// bool IsShippingBuild();                                                                                                  // [0x12d8930] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FrontendBlueprintLibrary.GetStringFromClipboard
	// void GetStringFromClipboard(FString& fromClipboard);                                                                     // [0x187e820] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FrontendBlueprintLibrary.FSDTargetPlatformIsXSX
	// bool FSDTargetPlatformIsXSX();                                                                                           // [0xf12110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FrontendBlueprintLibrary.FSDTargetPlatform
	// EFSDTargetPlatform FSDTargetPlatform();                                                                                  // [0xf12110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FrontendBlueprintLibrary.CopyStringToClipboard
	// void CopyStringToClipboard(FString toClipboard);                                                                         // [0x187e230] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/FSD.InputDirectionSet
/// Size: 0x0020 (0x000000 - 0x000020)
class FInputDirectionSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<EThawInputDirection>)               Directions                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   InputCount                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(bool)                                      IsSequence                                                  OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(int32_t)                                   MaxSubsequentDuplicates                                     OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Class /Script/FSD.CharacterBreakOutState
/// Size: 0x00D0 (0x000100 - 0x0001D0)
class UCharacterBreakOutState : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FMulticastInlineDelegate)                  OnThawInputsUpdated                                         OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBreakOutInputSuccess                                      OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBreakOutInputFailed                                       OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	CMember(TArray<FInputDirectionSet>)                DirectionSets                                               OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          SuccessSound                                                OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          FailSound                                                   OFFSET(get<T>, {0x180, 8, 0, 0})
	DMember(float)                                     ErrorGracePeriod                                            OFFSET(get<float>, {0x1AC, 4, 0, 0})
	DMember(float)                                     HoldToBreakTime                                             OFFSET(get<float>, {0x1B4, 4, 0, 0})
	DMember(float)                                     WrongInputPenaltyTime                                       OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     InitialWaitPeriod                                           OFFSET(get<float>, {0x1C4, 4, 0, 0})
	DMember(bool)                                      UseLegacy                                                   OFFSET(get<bool>, {0x1CC, 1, 0, 0})
	DMember(bool)                                      ResetOnFail                                                 OFFSET(get<bool>, {0x1CE, 1, 0, 0})
};

/// Class /Script/FSD.FrozenStateComponent
/// Size: 0x00E0 (0x0001D0 - 0x0002B0)
class UFrozenStateComponent : public UCharacterBreakOutState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(TWeakObjectPtr<class USoundBase*>)         AudioFreeFromIce                                            OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFSDPhysicalMaterial*>) IcePhysicalMaterial                                       OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFSDPhysicalMaterial*>) DwarfFleshMaterial                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundBase*>)         AudioFreezeStart                                            OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundBase*>)         AudioIceTap                                                 OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(float)                                     SlowAnimationSpeed                                          OFFSET(get<float>, {0x298, 4, 0, 0})
	SMember(FRandRange)                                DeFrostAmount                                               OFFSET(getStruct<T>, {0x2A0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FrozenStateComponent.Server_ThawPlayer
	// void Server_ThawPlayer(float Percent);                                                                                   // [0x187ee20] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FrozenStateComponent.ReceiveOnDefrosting
	// void ReceiveOnDefrosting();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FrozenStateComponent.GetAudioIceTap
	// class USoundBase* GetAudioIceTap();                                                                                      // [0x187e780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FrozenStateComponent.GetAudioFreezeStart
	// class USoundBase* GetAudioFreezeStart();                                                                                 // [0x187e740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FSDAchievement
/// Size: 0x0100 (0x000058 - 0x000158)
class UFSDAchievement : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FString)                                   SteamAPIAchievementName                                     OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FString)                                   SteamAPIStatName                                            OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FString)                                   XboxAchievementID                                           OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	DMember(float)                                     AchievementTargetValue                                      OFFSET(get<float>, {0xB8, 4, 0, 0})
	CMember(EFSDAchievementType)                       AchievementType                                             OFFSET(get<T>, {0xC0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDAchievement.SetAchievementProgressForEntireServer
	// void SetAchievementProgressForEntireServer(float Progress, class UObject* WorldContext);                                 // [0x187efd0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAchievement.SetAchievementProgress
	// void SetAchievementProgress(float Progress, class AFSDPlayerController* Player, class UObject* WorldContext);            // [0x187eeb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAchievement.ResetStatForAchievement
	// void ResetStatForAchievement(class UFSDAchievement* AchievementToReset, class AFSDPlayerController* Player);             // [0x187ed40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAchievement.QueryAchievements
	// void QueryAchievements(class AFSDPlayerController* Player);                                                              // [0x187ec10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAchievement.GetAchievementTargetValue
	// float GetAchievementTargetValue();                                                                                       // [0x1846c40] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.AchievementList
/// Size: 0x0198 (0x000030 - 0x0001C8)
class UAchievementList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(class UFSDAchievement*)                    WeakspotAchievement                                         OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UFSDAchievement*)                    MissionTimeAchievement                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UFSDAchievement*)                    MissionHosterAchievement                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UFSDAchievement*)                    RollerCoasterAchievement                                    OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UFSDAchievement*)                    DrillByShootingAchievement                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UFSDAchievement*)                    BarrelKickerAchievement                                     OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard3CompletedAchievement                                 OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard3StreakAchievement                                    OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard4CompletedAchievement                                 OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard4StreakAchievement                                    OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard5CompletedAchievement                                 OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard5StreakAchievement                                    OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard3NoKillNoSupplyAchievement                            OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard4NoKillNoSupplyAchievement                            OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UFSDAchievement*)                    Hazard5NoKillNoSupplyAchievement                            OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UFSDAchievement*)                    PlayedWithLowerRankAchievement                              OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UFSDAchievement*)                    MilestoneAchievementPerfMatters                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UFSDAchievement*)                    MilestoneAchievement                                        OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UFSDAchievement*)                    OwnedPerkAchievement                                        OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UFSDAchievement*)                    MovingOnUpAchievement                                       OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UFSDAchievement*)                    CorporateClimberAchievement                                 OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UFSDAchievement*)                    HatTrickAchievement                                         OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UFSDAchievement*)                    FullTeamAchievement                                         OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UFSDAchievement*)                    SilverTierEmployeeAchievement                               OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UFSDAchievement*)                    ProTeamAchievement                                          OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UFSDAchievement*)                    GoldTierEmployeeAchievement                                 OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UFSDAchievement*)                    LegendaryTeamAchievement                                    OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UFSDAchievement*)                    AllVanityEquippedAchievement                                OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UFSDAchievement*)                    MoustacheBuyerAchievement                                   OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UFSDAchievement*)                    MutatorAchievement                                          OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UFSDAchievement*)                    StateOfTheArtAchievement                                    OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UFSDAchievement*)                    ExploringMyOptionsAchievement                               OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UFSDAchievement*)                    AdvancedRoboticsAchievement                                 OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UFSDAchievement*)                    WithoutAPaddleAchievement                                   OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class UFSDAchievement*)                    FirstMissionCompleted                                       OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UFSDAchievement*)                    HundredMissionsCompleted                                    OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UFSDAchievement*)                    TenSoloMissionsCompleted                                    OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class UFSDAchievement*)                    SupplyPodsCalledStat                                        OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UFSDAchievement*)                    LootbugsKilledStat                                          OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class UFSDAchievement*)                    PraetoriansKilledStat                                       OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UFSDAchievement*)                    NormalDeepDiveCompleted                                     OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UFSDAchievement*)                    EliteDeepDiveCompleted                                      OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class UFSDAchievement*)                    DeepDiveCompletedUnderTime                                  OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class UFSDAchievement*)                    DeepDivesCompleted                                          OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(TArray<class UFSDAchievement*>)            AllAchievements                                             OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             BarrelClass                                                 OFFSET(get<T>, {0x1A0, 40, 0, 0})
};

/// Class /Script/FSD.FSDAdvancedLabel
/// Size: 0x0038 (0x000260 - 0x000298)
class UFSDAdvancedLabel : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	SMember(FText)                                     FormattedText                                               OFFSET(getStruct<T>, {0x260, 24, 0, 0})
	SMember(FText)                                     ControllerOverrideText                                      OFFSET(getStruct<T>, {0x278, 24, 0, 0})
	DMember(bool)                                      UpperCase                                                   OFFSET(get<bool>, {0x290, 1, 0, 0})
	CMember(EFSDInputSource)                           PreviewAs                                                   OFFSET(get<T>, {0x291, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDAdvancedLabel.SetText
	// void SetText(FText NewText, FText OverrideControllerText);                                                               // [0x187f1b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAdvancedLabel.SetAlwaysShowAs
	// void SetAlwaysShowAs(EFSDInputSource InPreferredSource);                                                                 // [0x187f130] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDAdvancedLabel.Refresh
	// void Refresh();                                                                                                          // [0x187ec90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDAdvancedLabel.OnReset
	// void OnReset();                                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDAdvancedLabel.OnNewLine
	// void OnNewLine(int32_t Index);                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDAdvancedLabel.OnLanguageChanged
	// void OnLanguageChanged(FString NewCulture);                                                                              // [0x187ea70] Final|Native|Protected 
	// Function /Script/FSD.FSDAdvancedLabel.OnInputSourceChanged
	// void OnInputSourceChanged(EFSDInputSource Source);                                                                       // [0x187e9f0] Final|Native|Protected 
	// Function /Script/FSD.FSDAdvancedLabel.OnAddString
	// void OnAddString(FString Value);                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDAdvancedLabel.OnAddKeyName
	// void OnAddKeyName(FString Name);                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDAdvancedLabel.OnAddIcon
	// void OnAddIcon(FString Name, FActionIconMapping& Icon);                                                                  // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.FSDAdvancedLabel.GetText
	// FText GetText();                                                                                                         // [0x187e8c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDAdvancedLabel.GetIsDesignTime
	// bool GetIsDesignTime();                                                                                                  // [0xbbbc60] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDAdvancedLabel.GetCurrentInputSource
	// EFSDInputSource GetCurrentInputSource();                                                                                 // [0x187e7c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDAdvancedLabel.CreateTextBlock
	// class UTextBlock* CreateTextBlock(FString Text, FSlateFontInfo InFontInfo, FLinearColor Color);                          // [0x187e520] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDAdvancedLabel.CreateImageSized
	// class UImage* CreateImageSized(class UTexture2D* Texture, int32_t Width, int32_t Height);                                // [0x187e410] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDAdvancedLabel.CreateImage
	// class UImage* CreateImage(class UTexture2D* Texture, bool MatchSize);                                                    // [0x187e340] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDAdvancedLabel.CreateHorizontalBox
	// class UHorizontalBox* CreateHorizontalBox();                                                                             // [0x187e310] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.GamepadCursorSettings
/// Size: 0x0010 (0x000038 - 0x000048)
class UGamepadCursorSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     Acceleration                                                OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     StickySlowDown                                              OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     DeadZone                                                    OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/FSD.FSDAnimNotify_PlaySound
/// Size: 0x0000 (0x000058 - 0x000058)
class UFSDAnimNotify_PlaySound : public UAnimNotify_PlaySound
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FSD.AnimNotify_PlaySound2D
/// Size: 0x0010 (0x000038 - 0x000048)
class UAnimNotify_PlaySound2D : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class USoundBase*)                         Sound                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_PlaySound
/// Size: 0x0028 (0x000030 - 0x000058)
class UAnimNotifyState_PlaySound : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class USoundCue*)                          Sound                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
};

/// Class /Script/FSD.AnimNotify_FSDPlayParticleEffect
/// Size: 0x0058 (0x000038 - 0x000090)
class UAnimNotify_FSDPlayParticleEffect : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UFXSystemAsset*)                     PSTemplate                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	DMember(bool)                                      AlwaysZUp                                                   OFFSET(get<bool>, {0x58, 1, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x5C, 12, 0, 0})
	DMember(bool)                                      Attached                                                    OFFSET(get<bool>, {0x80, 1, 1, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x84, 8, 0, 0})
	DMember(bool)                                      IsFirstPerson                                               OFFSET(get<bool>, {0x8C, 1, 0, 0})
	DMember(bool)                                      UseTerainMaterial                                           OFFSET(get<bool>, {0x8D, 1, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_FSDTimedNiagaraEffect
/// Size: 0x0030 (0x000030 - 0x000060)
class UAnimNotifyState_FSDTimedNiagaraEffect : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UNiagaraSystem*)                     Template                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	DMember(bool)                                      IsFirstPerson                                               OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(bool)                                      bDestroyAtEnd                                               OFFSET(get<bool>, {0x59, 1, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_FSDTimedVanityAnimEffect
/// Size: 0x0000 (0x000060 - 0x000060)
class UAnimNotifyState_FSDTimedVanityAnimEffect : public UAnimNotifyState_FSDTimedNiagaraEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/FSD.EnemyPlaySoundKey
/// Size: 0x0000 (0x000030 - 0x000030)
class UEnemyPlaySoundKey : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.EnemyPlaySoundByKeyAnimNotify
/// Size: 0x0020 (0x000038 - 0x000058)
class UEnemyPlaySoundByKeyAnimNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UEnemyPlaySoundKey*)                 SoundKey                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     VolumeMultiplier                                            OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      bFollow                                                     OFFSET(get<bool>, {0x48, 1, 1, 0})
	SMember(FName)                                     AttachName                                                  OFFSET(getStruct<T>, {0x4C, 8, 0, 0})
};

/// Class /Script/FSD.AnimNotify_PushSoundMix
/// Size: 0x0010 (0x000038 - 0x000048)
class UAnimNotify_PushSoundMix : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class USoundMix*)                          SoundMix                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_SoundMix
/// Size: 0x0010 (0x000030 - 0x000040)
class UAnimNotifyState_SoundMix : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class USoundMix*)                          SoundMix                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/FSD.EnemySpawnEffectsKey
/// Size: 0x0000 (0x000030 - 0x000030)
class UEnemySpawnEffectsKey : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.EnemySpawnEffectsByKeyAnimNotify
/// Size: 0x0018 (0x000038 - 0x000050)
class UEnemySpawnEffectsByKeyAnimNotify : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UEnemySpawnEffectsKey*)              EffectKey                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      Attached                                                    OFFSET(get<bool>, {0x40, 1, 1, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x44, 8, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_EnemyPlaySoundByKey
/// Size: 0x0030 (0x000030 - 0x000060)
class UAnimNotifyState_EnemyPlaySoundByKey : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UEnemyPlaySoundKey*)                 SoundKey                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     FadeOut                                                     OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x50, 12, 0, 0})
};

/// Class /Script/FSD.AnimNotify_CameraShake
/// Size: 0x0018 (0x000038 - 0x000050)
class UAnimNotify_CameraShake : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     InnerRadius                                                 OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     OuterRadius                                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(bool)                                      ControllerOnly                                              OFFSET(get<bool>, {0x40, 1, 0, 0})
	CMember(class UClass*)                             CameraShake                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.AnimNotify_Shout
/// Size: 0x0010 (0x000038 - 0x000048)
class UAnimNotify_Shout : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UDialogDataAsset*)                   Shout                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      ShoutNetworked                                              OFFSET(get<bool>, {0x40, 1, 0, 0})
	DMember(float)                                     LocalShoutVolumeMultiplier                                  OFFSET(get<float>, {0x44, 4, 0, 0})
};

/// Class /Script/FSD.AnimNotify_FootStep
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotify_FootStep : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      IsLeft                                                      OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/FSD.AnimNotify_MessageOwner
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotify_MessageOwner : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     Message                                                     OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.AnimNotify_TerrainFootStep
/// Size: 0x0010 (0x000038 - 0x000048)
class UAnimNotify_TerrainFootStep : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UParticleSystem*)                    ParticleTemplate                                            OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.AnimNotify_SpawnActor
/// Size: 0x0028 (0x000038 - 0x000060)
class UAnimNotify_SpawnActor : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             Actor                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x54, 12, 0, 0})
};

/// Class /Script/FSD.AnimNotify_HideBones
/// Size: 0x0010 (0x000038 - 0x000048)
class UAnimNotify_HideBones : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FName>)                             TargetBoneNames                                             OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FSD.AnimNotify_HideBone
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotify_HideBone : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.AnimNotify_UnHideBone
/// Size: 0x0008 (0x000038 - 0x000040)
class UAnimNotify_UnHideBone : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.AnimNotify_CopyBoneVisibility
/// Size: 0x0020 (0x000038 - 0x000058)
class UAnimNotify_CopyBoneVisibility : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FName)                                     SourceBoneName                                              OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	CMember(TArray<FName>)                             TargetBoneNames                                             OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      HideSourceBone                                              OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_SpawnMesh
/// Size: 0x0050 (0x000030 - 0x000080)
class UAnimNotifyState_SpawnMesh : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UStaticMesh*)                        Mesh                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      HasOverrideMaterial                                         OFFSET(get<bool>, {0x38, 1, 0, 0})
	CMember(class UMaterialInstance*)                  OverrideMaterial                                            OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(int32_t)                                   OverrideMaterialSlot                                        OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(bool)                                      UseFirstPersonComponent                                     OFFSET(get<bool>, {0x4C, 1, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FVector)                                   ScaleOverride                                               OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x64, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x70, 12, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_SpawnSkeletalMesh
/// Size: 0x0040 (0x000030 - 0x000070)
class UAnimNotifyState_SpawnSkeletalMesh : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class USkeletalMesh*)                      Mesh                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  AnimationToPlay                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      UseFirstPersonComponent                                     OFFSET(get<bool>, {0x40, 1, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x44, 8, 0, 0})
	SMember(FVector)                                   ScaleOverride                                               OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x64, 12, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_SpawnSkinnedMesh
/// Size: 0x0028 (0x000030 - 0x000058)
class UAnimNotifyState_SpawnSkinnedMesh : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(EItemCategory)                             ItemCategory                                                OFFSET(get<T>, {0x30, 1, 0, 0})
	DMember(bool)                                      UseFirstPersonComponent                                     OFFSET(get<bool>, {0x31, 1, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x34, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x48, 12, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_HideBone
/// Size: 0x0008 (0x000030 - 0x000038)
class UAnimNotifyState_HideBone : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_Salute
/// Size: 0x0010 (0x000030 - 0x000040)
class UAnimNotifyState_Salute : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      FirstPerson                                                 OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_InputWindow
/// Size: 0x0000 (0x000030 - 0x000030)
class UAnimNotifyState_InputWindow : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.AnimNotifyState_SpawnAndReleaseActor
/// Size: 0x0030 (0x000030 - 0x000060)
class UAnimNotifyState_SpawnAndReleaseActor : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             Actor                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   LocationOffset                                              OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	DMember(bool)                                      ManualDetach                                                OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_HideEquippedItem
/// Size: 0x0000 (0x000030 - 0x000030)
class UAnimNotifyState_HideEquippedItem : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.AnimNotifyState_OverrideItemOffset
/// Size: 0x0010 (0x000030 - 0x000040)
class UAnimNotifyState_OverrideItemOffset : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FVector)                                   CameraOffset                                                OFFSET(getStruct<T>, {0x30, 12, 0, 0})
};

/// Class /Script/FSD.AnimNotifyState_WeaponReload
/// Size: 0x0000 (0x000030 - 0x000030)
class UAnimNotifyState_WeaponReload : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.AnimNotifyState_ConstrainItem
/// Size: 0x0010 (0x000030 - 0x000040)
class UAnimNotifyState_ConstrainItem : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FName)                                     OldConstraint                                               OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FName)                                     NewConstraint                                               OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.GameAnimationsSettings
/// Size: 0x0030 (0x000038 - 0x000068)
class UGameAnimationsSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FSoftObjectPath)                           FootstepTestingSound                                        OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FSoftObjectPath)                           FootstepTestingParticles                                    OFFSET(getStruct<T>, {0x50, 24, 0, 0})
};

/// Class /Script/FSD.DynamicMeshScaler
/// Size: 0x0028 (0x000030 - 0x000058)
class UDynamicMeshScaler : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FSD.AnimNotifyState_TimedParticleEffectWithImpactDecals
/// Size: 0x0020 (0x000060 - 0x000080)
class UAnimNotifyState_TimedParticleEffectWithImpactDecals : public UAnimNotifyState_TimedParticleEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UMaterialInterface*)                 DecalMaterial                                               OFFSET(get<T>, {0x60, 8, 0, 0})
	DMember(float)                                     DecalSize                                                   OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     FadeStartDelay                                              OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     FadeDuration                                                OFFSET(get<float>, {0x70, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AnimNotifyState_TimedParticleEffectWithImpactDecals.OnParticleCollision
	// void OnParticleCollision(FName EventName, float EmitterTime, int32_t ParticleTime, FVector Location, FVector Velocity, FVector Direction, FVector Normal, FName BoneName, class UPhysicalMaterial* PhysMat); // [0x188aa60] Final|Native|Protected|HasDefaults|Const 
};

/// Class /Script/FSD.FSDAnimationFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDAnimationFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDAnimationFunctionLibrary.GetAnimSequenceLength
	// float GetAnimSequenceLength(class UAnimSequence* AnimSequence);                                                          // [0x188a7e0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDAssetManager
/// Size: 0x0030 (0x000478 - 0x0004A8)
class UFSDAssetManager : public UAssetManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1192;

public:
	CMember(class UGameData*)                          GameData                                                    OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             GameDataPath                                                OFFSET(get<T>, {0x480, 40, 0, 0})
};

/// Class /Script/FSD.FSDAudioComponent
/// Size: 0x0010 (0x000860 - 0x000870)
class UFSDAudioComponent : public UAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2160;

public:
};

/// Class /Script/FSD.FSDBehaviorTreeComponent
/// Size: 0x0000 (0x000298 - 0x000298)
class UFSDBehaviorTreeComponent : public UBehaviorTreeComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
};

/// Class /Script/FSD.FSDCheatManager
/// Size: 0x0030 (0x000088 - 0x0000B8)
class UFSDCheatManager : public UCheatManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   RoomJumpCount                                               OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(float)                                     PreviousMaxDistanceBeforeCleanup                            OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(bool)                                      UnlimitedScoutFlareDuration                                 OFFSET(get<bool>, {0x90, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  ToggleHoopGameMovement                                      OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	CMember(class AActor*)                             SpawnPosMarker                                              OFFSET(get<T>, {0xA8, 8, 0, 0})
	DMember(bool)                                      EscortShowSmartRockDebug                                    OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(bool)                                      IsUsingSavedCheats                                          OFFSET(get<bool>, {0xB1, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDCheatManager.ToggleDebugEvent
	// void ToggleDebugEvent(class UFSDEvent* InEvent);                                                                         // [0x188bef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SwitchCharacter
	// void SwitchCharacter(class UPlayerCharacterID* characterID);                                                             // [0x188be60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SpawnEnemies
	// void SpawnEnemies(class UEnemyDescriptor* descriptor, int32_t Count);                                                    // [0x188bd90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SpawnCritters
	// void SpawnCritters(class UBaseCritterDescriptor* descriptor, int32_t Count);                                             // [0x188bcc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SpawnBosco
	// void SpawnBosco(TSoftObjectPtr<UClass*> droneClass, class UClass* aControllerClass);                                     // [0x188bb70] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.ShowTutorialDebug
	// void ShowTutorialDebug();                                                                                                // [0x188bb50] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SetStandingDown
	// void SetStandingDown(bool standingDown);                                                                                 // [0x1888920] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SetSpawnEnemies
	// void SetSpawnEnemies(bool SpawnEnemies);                                                                                 // [0x188bac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SetSavedCheatValue
	// bool SetSavedCheatValue(FName CheatName, int32_t& ValueToSet);                                                           // [0x14bfeb0] Final|Native|Static|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SetQuadPickAxe
	// void SetQuadPickAxe(bool quad);                                                                                          // [0x188ba30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SetHUDVisible
	// void SetHUDVisible(bool ShowHUD);                                                                                        // [0x188b9a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SetGodMode
	// void SetGodMode(bool God);                                                                                               // [0x188b910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.SetFastMovement
	// void SetFastMovement(bool fast);                                                                                         // [0x188b880] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Server_Refresh_Daily_Special
	// void Server_Refresh_Daily_Special(int32_t Index);                                                                        // [0x188b7f0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.FSDCheatManager.ResetTutorials
	// void ResetTutorials();                                                                                                   // [0x188b7d0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.ResetSpacerigIntroMessage
	// void ResetSpacerigIntroMessage();                                                                                        // [0x188b7b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_RemoveResources
	// void R_RemoveResources(int32_t Number);                                                                                  // [0x188b720] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_RemoveCredits
	// void R_RemoveCredits(int32_t Number);                                                                                    // [0x188b690] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_RemoveCraftingResource
	// void R_RemoveCraftingResource(int32_t amount, int32_t Type);                                                             // [0x188b5c0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.R_AddSeasonToken
	// void R_AddSeasonToken(class UObject* WorldContextObject, int32_t Number);                                                // [0x188b340] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddResources_Player
	// void R_AddResources_Player(float Number);                                                                                // [0x188b2c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddResources
	// void R_AddResources(float Number);                                                                                       // [0x188b240] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddPerkPoints
	// void R_AddPerkPoints(int32_t amount);                                                                                    // [0x188b1b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddNitra
	// void R_AddNitra(float amount);                                                                                           // [0x188b130] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddMorkite
	// void R_AddMorkite(float amount);                                                                                         // [0x188b0b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddMatrixCores
	// void R_AddMatrixCores(int32_t Number);                                                                                   // [0x188b020] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddHollomite
	// void R_AddHollomite(float amount);                                                                                       // [0x188afa0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddGold
	// void R_AddGold(float amount);                                                                                            // [0x188af20] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddDystrum
	// void R_AddDystrum(float amount);                                                                                         // [0x188aea0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddCredits
	// void R_AddCredits(int32_t Number);                                                                                       // [0x188ae10] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_AddCraftingResource
	// void R_AddCraftingResource(int32_t amount, int32_t Type);                                                                // [0x188ad40] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.R_Add_Phazyonite
	// void R_Add_Phazyonite(int32_t amount);                                                                                   // [0x188b530] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_Add_BitterGem
	// void R_Add_BitterGem(int32_t amount);                                                                                    // [0x188b4a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.R_Add_Aquarq
	// void R_Add_Aquarq(int32_t amount);                                                                                       // [0x188b410] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.IsInGodMode
	// bool IsInGodMode();                                                                                                      // [0x188aa30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.IsFlyModeActive
	// bool IsFlyModeActive();                                                                                                  // [0x188aa00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDCheatManager.IsFastMovementActive
	// bool IsFastMovementActive();                                                                                             // [0x188a9d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDCheatManager.InstantDropResuppyPod
	// void InstantDropResuppyPod(class ARessuplyPod* pod);                                                                     // [0x188a940] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.GetSavedCheatValue
	// bool GetSavedCheatValue(FName CheatName, int32_t& ValueToGet);                                                           // [0x14bfb90] Final|Native|Static|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.GetListOfRoomNames
	// void GetListOfRoomNames(TArray<FString>& roomNames);                                                                     // [0x188a870] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.DestroyAllInstances
	// void DestroyAllInstances(class UClass* destroy);                                                                         // [0x188a750] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.D_Rejoin_RestoreState
	// void D_Rejoin_RestoreState();                                                                                            // [0x188a730] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.D_MovieModeStartWithCameraShake
	// void D_MovieModeStartWithCameraShake(bool Value);                                                                        // [0x188a6a0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.D_MovieModeStartAtOrigin
	// void D_MovieModeStartAtOrigin(bool Value);                                                                               // [0x188a610] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.D_EnableMovieModeInSpacerig
	// void D_EnableMovieModeInSpacerig(bool Value);                                                                            // [0x188a580] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.D_EnableMovieMode
	// void D_EnableMovieMode(bool Value);                                                                                      // [0x188a4f0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.Cheat_UnlockWeapon
	// void Cheat_UnlockWeapon(class UObject* WorldContextObjectm, class UItemID* ItemID);                                      // [0x188a430] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_UnlockAllWeapons
	// void Cheat_UnlockAllWeapons(class UObject* WorldContextObject);                                                          // [0x188a2b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_UnlockAllUpgrades
	// void Cheat_UnlockAllUpgrades(class UObject* WorldContextObject);                                                         // [0x188a230] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_UnlockAll_Poses
	// void Cheat_UnlockAll_Poses(class UObject* WorldContextObject);                                                           // [0x188a3b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_UnlockAll_Beers
	// void Cheat_UnlockAll_Beers(class UObject* WorldContextObject);                                                           // [0x188a330] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_SetSpawnPosMarker
	// void Cheat_SetSpawnPosMarker(class AActor* Actor);                                                                       // [0x188a1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_SetHealth
	// void Cheat_SetHealth(float newHealthValue, class APlayerCharacter* Player);                                              // [0x188a0c0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_Schematic_UnlockAll
	// void Cheat_Schematic_UnlockAll(class UObject* WorldContextObject);                                                       // [0x188a040] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_Schematic_ResetAll
	// void Cheat_Schematic_ResetAll(class UObject* WorldContextObject);                                                        // [0x1889fc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_Schematic_GiveRandom
	// void Cheat_Schematic_GiveRandom(class UObject* WorldContextObject);                                                      // [0x1889f40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_Schematic_ForgeAll_Owned
	// void Cheat_Schematic_ForgeAll_Owned(class UObject* WorldContextObject);                                                  // [0x1889ec0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_Schematic_ForgeAll
	// void Cheat_Schematic_ForgeAll(class UObject* WorldContextObject);                                                        // [0x1889e40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_Resources
	// void Cheat_Resources(class UObject* WorldContextObject, float amount);                                                   // [0x1889d80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_ResetEquippedUpgrades
	// void Cheat_ResetEquippedUpgrades(class UObject* WorldContextObject);                                                     // [0x1889d00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_RemoveResources
	// void Cheat_RemoveResources(class UObject* WorldContextObject, int32_t amount);                                           // [0x1889c40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_PickAxeVanity_UnlockAll
	// void Cheat_PickAxeVanity_UnlockAll(class UObject* WorldContextObject);                                                   // [0x1889bc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_PickAxeVanity_ResetAll
	// void Cheat_PickAxeVanity_ResetAll(class UObject* WorldContextObject);                                                    // [0x1889b40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_MinersManual_ShowAll
	// void Cheat_MinersManual_ShowAll(class UObject* WorldContextObject);                                                      // [0x1889ac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_GenerateNewMissionSeed
	// void Cheat_GenerateNewMissionSeed(class UObject* WorldContextObject, bool Enabled);                                      // [0x1889a00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_ForceTreasure
	// void Cheat_ForceTreasure(class UObject* WorldContextObject);                                                             // [0x1889980] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_ForceLostPack
	// void Cheat_ForceLostPack(class UObject* WorldContextObject);                                                             // [0x1889900] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_DeepDives_Refresh
	// void Cheat_DeepDives_Refresh(class UObject* WorldContextObject);                                                         // [0x1889880] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_Campaign_Complete
	// void Cheat_Campaign_Complete(class UObject* WorldContextObject);                                                         // [0x1889800] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_Campaign_Advance
	// void Cheat_Campaign_Advance(class UObject* WorldContextObject);                                                          // [0x1889780] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_AddXP
	// void Cheat_AddXP(class UObject* WorldContextObject, int32_t amount);                                                     // [0x18896c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_AddPerkPoints
	// void Cheat_AddPerkPoints(class UObject* WorldContextObject, int32_t amount);                                             // [0x1889600] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.Cheat_AddCredits
	// void Cheat_AddCredits(class UObject* WorldContextObject, int32_t amount);                                                // [0x1889540] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Windows_PrintStack
	// void C_Windows_PrintStack();                                                                                             // [0x1889520] Final|Exec|Native|Public|Const 
	// Function /Script/FSD.FSDCheatManager.C_Windows_CloseAll
	// void C_Windows_CloseAll();                                                                                               // [0x1889500] Final|Exec|Native|Public|Const 
	// Function /Script/FSD.FSDCheatManager.C_WeaponMaintenance_Reset
	// void C_WeaponMaintenance_Reset();                                                                                        // [0x18894e0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_WeaponMaintenance_AddXP
	// void C_WeaponMaintenance_AddXP(int32_t XP);                                                                              // [0x1889450] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_VanityMasteryResetXP
	// void C_VanityMasteryResetXP();                                                                                           // [0x1889430] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_VanityMasteryAddXP
	// void C_VanityMasteryAddXP(int32_t Number);                                                                               // [0x18893a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_UnlockOverclocking
	// void C_UnlockOverclocking();                                                                                             // [0x1889360] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_WeaponUpgrades
	// void C_UnlockAll_WeaponUpgrades();                                                                                       // [0x1889320] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_WeaponSkins_Paintjobs
	// void C_UnlockAll_WeaponSkins_Paintjobs();                                                                                // [0x1889300] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_WeaponSkins_Frameworks
	// void C_UnlockAll_WeaponSkins_Frameworks();                                                                               // [0x18892e0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_WeaponSkins
	// void C_UnlockAll_WeaponSkins();                                                                                          // [0x18892c0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_Weapons
	// void C_UnlockAll_Weapons();                                                                                              // [0x1889340] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_StoreVanity
	// void C_UnlockAll_StoreVanity();                                                                                          // [0x18892a0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_Poses_ForAll
	// void C_UnlockAll_Poses_ForAll();                                                                                         // [0x1889280] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_Poses
	// void C_UnlockAll_Poses();                                                                                                // [0x1889260] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_PickaxeParts
	// void C_UnlockAll_PickaxeParts();                                                                                         // [0x1889240] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_Perks
	// void C_UnlockAll_Perks();                                                                                                // [0x1889220] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_Drinks
	// void C_UnlockAll_Drinks();                                                                                               // [0x1889200] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_Beers
	// void C_UnlockAll_Beers();                                                                                                // [0x18891e0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll_ArmorMats
	// void C_UnlockAll_ArmorMats();                                                                                            // [0x18891c0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_UnlockAll
	// void C_UnlockAll();                                                                                                      // [0x18891a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Unlock_Facility
	// void C_Unlock_Facility();                                                                                                // [0x1889380] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Treasures_Track
	// void C_Treasures_Track(int32_t Mode);                                                                                    // [0x1889110] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Treasures_Reward
	// void C_Treasures_Reward(int32_t Count);                                                                                  // [0x1889080] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_ToggleHoopGameMovement
	// void C_ToggleHoopGameMovement();                                                                                         // [0x1889060] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ToggleFadingEnabled
	// void C_ToggleFadingEnabled();                                                                                            // [0x1889040] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ToggleFadingDebug
	// void C_ToggleFadingDebug();                                                                                              // [0x1889020] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ToggleCanShowBlood
	// void C_ToggleCanShowBlood();                                                                                             // [0x1889000] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_TestSpecialEventChance
	// void C_TestSpecialEventChance();                                                                                         // [0x1888fe0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_TeleportToPlayer
	// void C_TeleportToPlayer(int32_t InPlayerIndex);                                                                          // [0x1888f50] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_TeleportPlayerToMe
	// void C_TeleportPlayerToMe(int32_t InPlayerIndex);                                                                        // [0x1888ec0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_TeleportAllPlayersToMe
	// void C_TeleportAllPlayersToMe();                                                                                         // [0x1888ea0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_StopMovement
	// void C_StopMovement(bool shouldMove);                                                                                    // [0x1888e10] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_StartCountDown
	// void C_StartCountDown();                                                                                                 // [0x1888df0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SpawnScriptedWaveIndex
	// void C_SpawnScriptedWaveIndex(int32_t Index);                                                                            // [0x1888d60] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SpawnScriptedWave
	// void C_SpawnScriptedWave();                                                                                              // [0x1888d40] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SpawnNormalWave
	// void C_SpawnNormalWave();                                                                                                // [0x1888d20] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SpawnEvenRewarder
	// void C_SpawnEvenRewarder();                                                                                              // [0x1888d00] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SpawnDropPodOnSelf
	// void C_SpawnDropPodOnSelf(float Delay);                                                                                  // [0x1888c80] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SpawnDancingCharacterOnSelf
	// void C_SpawnDancingCharacterOnSelf(int32_t InDanceIndex);                                                                // [0x1888bf0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SpawnBarrelOnPlayer
	// void C_SpawnBarrelOnPlayer(int32_t amount);                                                                              // [0x1888b60] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SpawnAllParticles
	// void C_SpawnAllParticles();                                                                                              // [0xbd29a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetUseSavedCheatsByDefault
	// void C_SetUseSavedCheatsByDefault(bool useSavedCheats);                                                                  // [0x1888ad0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetTestMission
	// void C_SetTestMission(int32_t missionIndex);                                                                             // [0x18889b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetTestingCharacter
	// void C_SetTestingCharacter(class UPlayerCharacterID* characterID);                                                       // [0x1888a40] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetSuperRapidFireEnabled
	// void C_SetSuperRapidFireEnabled(bool Enabled);                                                                           // [0x17d5320] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetStandingDown
	// void C_SetStandingDown(bool standingDown);                                                                               // [0x1888920] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_SetSavedCheats
	// void C_SetSavedCheats();                                                                                                 // [0x1888900] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetPlayers
	// void C_SetPlayers(int32_t Number);                                                                                       // [0x1888870] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetInWorldSubtitlesActive
	// void C_SetInWorldSubtitlesActive(bool Active);                                                                           // [0x1888750] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetInstantUsables
	// void C_SetInstantUsables(bool Value);                                                                                    // [0x18887e0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetHealth
	// void C_SetHealth(float Health);                                                                                          // [0x18886d0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_SetFlyMode
	// void C_SetFlyMode(bool flyEnabled);                                                                                      // [0x1888640] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetFastFlares
	// void C_SetFastFlares();                                                                                                  // [0x1888620] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetEnglish
	// void C_SetEnglish(int32_t Val);                                                                                          // [0x1888590] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetDancing
	// void C_SetDancing(bool shouldDance, int32_t danceMove);                                                                  // [0x18884c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetAmmoCostEnabled
	// void C_SetAmmoCostEnabled(bool Enabled);                                                                                 // [0x1888430] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_SetActorTrackingVisible
	// void C_SetActorTrackingVisible(bool Visible);                                                                            // [0x18883a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_ResetXP
	// void C_Seasons_ResetXP(class UObject* WorldContextObject);                                                               // [0x1888320] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_ResetTreeOfVanity
	// void C_Seasons_ResetTreeOfVanity();                                                                                      // [0x1888300] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_ResetToken
	// void C_Seasons_ResetToken();                                                                                             // [0x18882e0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_ResetReroll
	// void C_Seasons_ResetReroll();                                                                                            // [0x18882c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_ResetPlagueHeartsCollected
	// void C_Seasons_ResetPlagueHeartsCollected();                                                                             // [0x18882a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_PrintScripProgress
	// void C_Seasons_PrintScripProgress();                                                                                     // [0x1888280] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_IncrementChallenge
	// void C_Seasons_IncrementChallenge(int32_t Index);                                                                        // [0x18881f0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_CompleteSeasonAlmost
	// void C_Seasons_CompleteSeasonAlmost();                                                                                   // [0x18881d0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_CompleteSeason
	// void C_Seasons_CompleteSeason();                                                                                         // [0x18881b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_CompleteScripChallenge
	// void C_Seasons_CompleteScripChallenge(int32_t Number);                                                                   // [0x1888120] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_ClearSeasonCompletedAnnounced
	// void C_Seasons_ClearSeasonCompletedAnnounced();                                                                          // [0x1888100] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_ClearChallenges
	// void C_Seasons_ClearChallenges();                                                                                        // [0x18880e0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_ClearAllProgress
	// void C_Seasons_ClearAllProgress();                                                                                       // [0x18880c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_AddXP
	// void C_Seasons_AddXP(class UObject* WorldContextObject, int32_t Number);                                                 // [0x1888000] Final|Exec|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_AddHeartsCollecdted
	// void C_Seasons_AddHeartsCollecdted(int32_t Number);                                                                      // [0x1887f70] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Seasons_AddChallenge
	// void C_Seasons_AddChallenge();                                                                                           // [0x1887f50] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Season_SetActiveSeason
	// void C_Season_SetActiveSeason(class UObject* WorldContextObject, int32_t Index);                                         // [0x1887e90] Final|Exec|Native|Static|Public 
	// Function /Script/FSD.FSDCheatManager.C_Schematics_UnlockAll
	// void C_Schematics_UnlockAll();                                                                                           // [0x1887e70] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Schematics_ResetAll
	// void C_Schematics_ResetAll();                                                                                            // [0x1887e50] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Schematics_ForgeAll_Owned
	// void C_Schematics_ForgeAll_Owned();                                                                                      // [0x1887e30] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Schematics_ForgeAll
	// void C_Schematics_ForgeAll();                                                                                            // [0x1887e10] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Schematics_ClearHasSeenFirstMessage
	// void C_Schematics_ClearHasSeenFirstMessage();                                                                            // [0x1887df0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Schematic_GiveRandom
	// void C_Schematic_GiveRandom();                                                                                           // [0x1887dd0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Salvage_FixMiniMules
	// void C_Salvage_FixMiniMules();                                                                                           // [0x1887db0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Revive
	// void C_Revive();                                                                                                         // [0x1887d90] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Resupply
	// void C_Resupply();                                                                                                       // [0x1887d70] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ResetSteamAchievementStats
	// void C_ResetSteamAchievementStats();                                                                                     // [0x1887bf0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ResetForgingXP
	// void C_ResetForgingXP();                                                                                                 // [0x1887bd0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ResetCheatedResources
	// void C_ResetCheatedResources(int32_t newAmount);                                                                         // [0x1887b40] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ResetAll_Vanity
	// void C_ResetAll_Vanity();                                                                                                // [0x1887b20] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_ResetAchievements
	// void C_ResetAchievements();                                                                                              // [0x1887b00] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Reset_YearTwoGifts
	// void C_Reset_YearTwoGifts();                                                                                             // [0x1887d50] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Reset_WeaponSkinsAndUpgrades
	// void C_Reset_WeaponSkinsAndUpgrades();                                                                                   // [0x1887cf0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Reset_WeaponSkins_Paintjobs
	// void C_Reset_WeaponSkins_Paintjobs();                                                                                    // [0x1887d30] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Reset_WeaponSkins_Framworks
	// void C_Reset_WeaponSkins_Framworks();                                                                                    // [0x1887d10] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Reset_WeaponSkins
	// void C_Reset_WeaponSkins();                                                                                              // [0x1887cd0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Reset_Poses
	// void C_Reset_Poses();                                                                                                    // [0x1887cb0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Reset_PickaxeParts
	// void C_Reset_PickaxeParts();                                                                                             // [0x1887c90] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Reset_Perks
	// void C_Reset_Perks();                                                                                                    // [0x1887c70] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Reset_MinersManual
	// void C_Reset_MinersManual();                                                                                             // [0x1887c50] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Reset_EnemyKillCount
	// void C_Reset_EnemyKillCount();                                                                                           // [0x1887c30] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Reset_Drinks
	// void C_Reset_Drinks();                                                                                                   // [0x1887c10] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_RemovePlayerRanks
	// void C_RemovePlayerRanks(int32_t Number);                                                                                // [0x1887a30] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_RemoveAllWidgets
	// void C_RemoveAllWidgets();                                                                                               // [0x1887a10] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Remove_WeaponSkinsFromCrate_Framwork
	// void C_Remove_WeaponSkinsFromCrate_Framwork();                                                                           // [0x1887ae0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Remove_VictoryPose
	// void C_Remove_VictoryPose();                                                                                             // [0x1887ac0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_RefreshDailyDeal
	// void C_RefreshDailyDeal(int32_t Seed);                                                                                   // [0x18878f0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Refresh_Daily_Special
	// void C_Refresh_Daily_Special(int32_t Index);                                                                             // [0x1887980] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Refinery_BreakPipes
	// void C_Refinery_BreakPipes();                                                                                            // [0x18878d0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_RecordMode
	// void C_RecordMode();                                                                                                     // [0x18878b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_PropHunt_Stop
	// void C_PropHunt_Stop();                                                                                                  // [0x1887890] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_PropHunt_Start
	// void C_PropHunt_Start(int32_t InServerIndex);                                                                            // [0x1887800] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Promotion_SetLevelSpecific
	// void C_Promotion_SetLevelSpecific(class APlayerCharacter* onCharacter, int32_t Number);                                  // [0x1887730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Promotion_SetLevel
	// void C_Promotion_SetLevel(int32_t Number);                                                                               // [0x18876a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Promotion_SetCampaignComplete
	// void C_Promotion_SetCampaignComplete();                                                                                  // [0x1887680] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Promotion_ClearRewardsSeen
	// void C_Promotion_ClearRewardsSeen();                                                                                     // [0x1887660] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ProjectileDrawPaths
	// void C_ProjectileDrawPaths();                                                                                            // [0xbd29a0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_ProjectileDebugPrintToggle
	// void C_ProjectileDebugPrintToggle();                                                                                     // [0x1887640] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_PrintLoadout
	// void C_PrintLoadout();                                                                                                   // [0x1887620] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_PreventMeteors
	// void C_PreventMeteors();                                                                                                 // [0x1887600] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_PlayNewMusic
	// void C_PlayNewMusic(int32_t songIndex);                                                                                  // [0x1887570] Final|Exec|Native|Public|Const 
	// Function /Script/FSD.FSDCheatManager.C_MissionMap_TestDistribution
	// void C_MissionMap_TestDistribution();                                                                                    // [0x1887550] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_MissionMap_SetSeed
	// void C_MissionMap_SetSeed(int32_t Seed);                                                                                 // [0x18874c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_MissionMap_Rotate
	// void C_MissionMap_Rotate();                                                                                              // [0x18874a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_MissionMap_ForceWarning
	// void C_MissionMap_ForceWarning(int32_t Index);                                                                           // [0x1887410] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_MissionMap_ForceAnomaly
	// void C_MissionMap_ForceAnomaly(int32_t Index);                                                                           // [0x1887380] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_MissionMap_DoubleWarning
	// void C_MissionMap_DoubleWarning(int32_t indexA, int32_t indexB);                                                         // [0x18872b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_MissionMap_AutoRotate
	// void C_MissionMap_AutoRotate(bool Enabled);                                                                              // [0x1887220] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_MinersManual_EnableWorkInProgress
	// void C_MinersManual_EnableWorkInProgress(class UObject* WorldContextObject);                                             // [0x1887190] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_MachineEvents_Track
	// void C_MachineEvents_Track(bool Track);                                                                                  // [0x1887100] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_MachineEvents_FinishCurrent
	// void C_MachineEvents_FinishCurrent();                                                                                    // [0x18870e0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_LevelUpCharacter
	// void C_LevelUpCharacter(int32_t amount);                                                                                 // [0x1887050] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_KillTeam
	// void C_KillTeam();                                                                                                       // [0x1887030] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_KillPlayer
	// void C_KillPlayer();                                                                                                     // [0x1887010] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_KillAllNeutral
	// void C_KillAllNeutral();                                                                                                 // [0x1886ff0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_KillAllFriendly
	// void C_KillAllFriendly();                                                                                                // [0x1886fd0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_KillAll
	// void C_KillAll();                                                                                                        // [0x1886fb0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_JumpToNextRoom
	// void C_JumpToNextRoom();                                                                                                 // [0x1886f90] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_JetBoots_Enable_MK2
	// void C_JetBoots_Enable_MK2();                                                                                            // [0x1886f70] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_JetBoots_Enable
	// void C_JetBoots_Enable();                                                                                                // [0x1886f50] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Intoxication_SetAll
	// void C_Intoxication_SetAll(int32_t Percent);                                                                             // [0x1886ec0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Intoxication_Set
	// void C_Intoxication_Set(int32_t Percent);                                                                                // [0x1886e30] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_IncrementAllMissionStats
	// void C_IncrementAllMissionStats(int32_t amount);                                                                         // [0x1886da0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_IncreasePlagueInfection
	// void C_IncreasePlagueInfection(float Increment);                                                                         // [0x1886d20] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_GodMode
	// void C_GodMode(int32_t forceEnable);                                                                                     // [0x1886c90] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_GiveAllGenericHeroItems
	// void C_GiveAllGenericHeroItems();                                                                                        // [0x1886c70] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_GameDLC_ResetAnnouncements
	// void C_GameDLC_ResetAnnouncements();                                                                                     // [0x1886c50] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_FSDEvent_SetDebugEvent
	// void C_FSDEvent_SetDebugEvent(FString EventName);                                                                        // [0x18868b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_FSDEvent_ListEvents
	// void C_FSDEvent_ListEvents();                                                                                            // [0x1886890] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_FSDEvent_ClearSeenRewards
	// void C_FSDEvent_ClearSeenRewards();                                                                                      // [0x1886870] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_ForceCrash
	// void C_ForceCrash();                                                                                                     // [0x1886c30] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_FlareInfiniteDuration
	// void C_FlareInfiniteDuration(bool Enabled);                                                                              // [0x1886ba0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_FixedPLSSeed
	// void C_FixedPLSSeed(int32_t Seed);                                                                                       // [0x1886b10] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_FixedMissionSeed
	// void C_FixedMissionSeed(int32_t Seed);                                                                                   // [0x1886a80] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_FailMission
	// void C_FailMission();                                                                                                    // [0x1886a60] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_FadeFromBlack
	// void C_FadeFromBlack(class UObject* WorldContextObject);                                                                 // [0x18869e0] Final|Exec|Native|Static|Public 
	// Function /Script/FSD.FSDCheatManager.C_Facility_SpawnDataCore
	// void C_Facility_SpawnDataCore();                                                                                         // [0x18869c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Facility_DisableShields
	// void C_Facility_DisableShields();                                                                                        // [0x18869a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Escort_ShowSmartRockDebug
	// void C_Escort_ShowSmartRockDebug(bool shouldShow);                                                                       // [0x18867e0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Escort_SetMuleSpeed
	// void C_Escort_SetMuleSpeed(class UObject* WorldContextObject, float Speed);                                              // [0x1886710] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Escort_JumpToNextPhase
	// void C_Escort_JumpToNextPhase(class UObject* WorldContextObject);                                                        // [0x1886680] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Escort_AddOilShale
	// void C_Escort_AddOilShale(int32_t Number);                                                                               // [0x18865f0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DLC_ClearAnnounced
	// void C_DLC_ClearAnnounced();                                                                                             // [0x1886480] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DisableBackendEvents
	// void C_DisableBackendEvents();                                                                                           // [0x18865d0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DestroyAllDancingCharacters
	// void C_DestroyAllDancingCharacters();                                                                                    // [0x18865b0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DeepDives_UnlockAll
	// void C_DeepDives_UnlockAll();                                                                                            // [0x1886590] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DeepDives_SetSeed
	// void C_DeepDives_SetSeed(int32_t Seed);                                                                                  // [0x1886500] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DeepDives_Reset
	// void C_DeepDives_Reset();                                                                                                // [0x18864e0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DeepDives_Refresh
	// void C_DeepDives_Refresh();                                                                                              // [0x18864c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DeepDives_List
	// void C_DeepDives_List();                                                                                                 // [0x18864a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_DebugTargetEnemySync
	// void C_DebugTargetEnemySync(bool FindIt);                                                                                // [0x17d5320] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_CompleteObjectives
	// void C_CompleteObjectives();                                                                                             // [0x1886460] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_CompleteMission
	// void C_CompleteMission();                                                                                                // [0x1886440] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ClearAllMissionStats
	// void C_ClearAllMissionStats();                                                                                           // [0x1886420] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ClearAllMilestones
	// void C_ClearAllMilestones();                                                                                             // [0x1886400] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ClearAllDecalsLocal
	// void C_ClearAllDecalsLocal();                                                                                            // [0x18863e0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_ClearAllDecalsAll
	// void C_ClearAllDecalsAll();                                                                                              // [0x18863c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Campaign_ResetProgress
	// void C_Campaign_ResetProgress();                                                                                         // [0x18863a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Campaign_ResetCompleted
	// void C_Campaign_ResetCompleted();                                                                                        // [0x1886380] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Campaign_CompleteMain
	// void C_Campaign_CompleteMain();                                                                                          // [0x1886360] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_Campaign_CompleteCurrent
	// void C_Campaign_CompleteCurrent();                                                                                       // [0x1886340] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Campaign_CompleteAll
	// void C_Campaign_CompleteAll();                                                                                           // [0x1886320] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_Campaign_Advance
	// void C_Campaign_Advance();                                                                                               // [0x1886300] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_BreakAllEnemyArmor
	// void C_BreakAllEnemyArmor();                                                                                             // [0x18862e0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_BiomeEffectsEnabled
	// void C_BiomeEffectsEnabled(bool Enabled);                                                                                // [0x1886250] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDCheatManager.C_AddXP
	// void C_AddXP(int32_t Number);                                                                                            // [0x18861c0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_AddUncappedXP
	// void C_AddUncappedXP(int32_t amount);                                                                                    // [0x1886130] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_AddForgingXP
	// void C_AddForgingXP(int32_t Number);                                                                                     // [0x18860a0] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.C_AddAllResourcesToInventory
	// void C_AddAllResourcesToInventory(float amount);                                                                         // [0x1886020] Final|Exec|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDCheatManager.AddResourceToTeamDeposit
	// void AddResourceToTeamDeposit(class UResourceData* Resource, float amount);                                              // [0x1885f50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDCloudLoadSave
/// Size: 0x0028 (0x000028 - 0x000050)
class UFSDCloudLoadSave : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FMulticastInlineDelegate)                  OnCloudLoadAll                                              OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCloudLoadAllFailed                                        OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(class UFSDCloudSaveHandler*)               CloudSaveHandler                                            OFFSET(get<T>, {0x48, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDCloudLoadSave.StartCloudLoadAll
	// void StartCloudLoadAll(class UObject* WorldContextObject, int32_t Index, int32_t Offset);                                // [0x1894280] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDCloudSaveHandler
/// Size: 0x0130 (0x000028 - 0x000158)
class UFSDCloudSaveHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	DMember(int32_t)                                   NumFailedSaves                                              OFFSET(get<int32_t>, {0x48, 4, 0, 0})
};

/// Class /Script/FSD.FSDConversionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDConversionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDConversionLibrary.VectorToNetQuantizeNormal
	// FVector_NetQuantizeNormal VectorToNetQuantizeNormal(FVector Vec);                                                        // [0x1894610] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDConversionLibrary.VectorToNetQuantize
	// FVector_NetQuantize VectorToNetQuantize(FVector Vec);                                                                    // [0x1894570] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDConversionLibrary.QuatToVector
	// FVector QuatToVector(FQuat Quat);                                                                                        // [0x18930c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDConversionLibrary.QuatToRotator
	// FRotator QuatToRotator(FQuat Quat);                                                                                      // [0x1893020] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDConversionLibrary.QuadToNetQuantizeNormal
	// FVector_NetQuantizeNormal QuadToNetQuantizeNormal(FQuat Quat);                                                           // [0x1892f80] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDConversionLibrary.ComponentToWorldLocation
	// FVector ComponentToWorldLocation(class USceneComponent* Component);                                                      // [0x1891190] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDConversionLibrary.ActorToWorldLocation
	// FVector ActorToWorldLocation(class AActor* Actor);                                                                       // [0x1890ba0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FSDCreateSessionCallbackProxy
/// Size: 0x0068 (0x000030 - 0x000098)
class UFSDCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDCreateSessionCallbackProxy.FSDCreateSession
	// class UFSDCreateSessionCallbackProxy* FSDCreateSession(class UObject* WorldContextObject, class APlayerController* PlayerController, int32_t PublicConnections, bool bUseLAN, bool bFriendsOnly); // [0x18912d0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDCustomDPIScalingRule
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDCustomDPIScalingRule : public UDPICustomScalingRule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FSD.PlatformSpecificEventPopup
/// Size: 0x0030 (0x000000 - 0x000030)
class FPlatformSpecificEventPopup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(EFSDTargetPlatform)                        TargetPlatform                                              OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             PopupWidget                                                 OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Struct /Script/FSD.JettyBootEventSettings
/// Size: 0x0050 (0x000000 - 0x000050)
class FJettyBootEventSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TWeakObjectPtr<class UTexture2D*>)         JettyBootCharacter                                          OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             JettyBootArcadeOverlay                                      OFFSET(get<T>, {0x28, 40, 0, 0})
};

/// Class /Script/FSD.FSDEvent
/// Size: 0x0220 (0x000030 - 0x000250)
class UFSDEvent : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FMulticastInlineDelegate)                  OnActiveChanged                                             OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(bool)                                      EnableDangerousSaveGameIDEditing                            OFFSET(get<bool>, {0x40, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x44, 16, 0, 0})
	SMember(FName)                                     EventName                                                   OFFSET(getStruct<T>, {0x54, 8, 0, 0})
	SMember(FText)                                     EventDisplayText                                            OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	CMember(class UTexture2D*)                         EventThumbnail                                              OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(EHolidayType)                              EventType                                                   OFFSET(get<T>, {0x80, 1, 0, 0})
	DMember(bool)                                      bFreeBeerEvent                                              OFFSET(get<bool>, {0x81, 1, 0, 0})
	DMember(bool)                                      bFreeBeerConfettiVisible                                    OFFSET(get<bool>, {0x82, 1, 0, 0})
	CMember(class UDrinkableDataAsset*)                SpecialEventBeer                                            OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UTexture2D*)                         SeasonEndScreenImage                                        OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          EventAmbienceMusic                                          OFFSET(get<T>, {0x98, 8, 0, 0})
	DMember(bool)                                      UseDifferentBarLightColor                                   OFFSET(get<bool>, {0xC0, 1, 0, 0})
	SMember(FLinearColor)                              SpaceRigBarLightColor                                       OFFSET(getStruct<T>, {0xC4, 16, 0, 0})
	CMember(TArray<FEncounterSpecialItem>)             EventEncounters                                             OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           EventDebris                                                 OFFSET(get<T>, {0xE8, 16, 0, 0})
	DMember(bool)                                      bIsEventDebrisInDeepDives                                   OFFSET(get<bool>, {0xF8, 1, 0, 0})
	CMember(TArray<TWeakObjectPtr<UWorld*>>)           SpacerigSublevels                                           OFFSET(get<T>, {0x100, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UWorld*>>)           UnloadSpacerigSublevels                                     OFFSET(get<T>, {0x110, 16, 0, 0})
	DMember(bool)                                      bHasClaimableRewards                                        OFFSET(get<bool>, {0x120, 1, 0, 0})
	SMember(FClaimableRewardView)                      ClaimableRewards                                            OFFSET(getStruct<T>, {0x128, 136, 0, 0})
	CMember(TArray<FPlatformSpecificEventPopup>)       OptionalPopUpWindow                                         OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           Campaigns                                                   OFFSET(get<T>, {0x1C0, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         TitleScreenOverride                                         OFFSET(get<T>, {0x1D0, 8, 0, 0})
	SMember(FJettyBootEventSettings)                   JettyBootSettings                                           OFFSET(getStruct<T>, {0x1F8, 80, 0, 0})
	SMember(FDateTime)                                 EventEndTimeLocal                                           OFFSET(getStruct<T>, {0x248, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDEvent.MarkClaimableRewardsSeen
	// void MarkClaimableRewardsSeen(class UObject* WorldContext);                                                              // [0x1892a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDEvent.IsFsdEventActive
	// bool IsFsdEventActive(class UObject* WorldContext, class UFSDEvent* FSDEvent);                                           // [0x18927c0] Final|Native|Static|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDEvent.HasUnseenClaimableRewards
	// bool HasUnseenClaimableRewards(class UObject* WorldContext);                                                             // [0x1892560] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDEvent.GiveRewards
	// bool GiveRewards(class APlayerController* PlayerController);                                                             // [0x18922d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDEvent.GetTitleScreenOverride
	// class UTexture2D* GetTitleScreenOverride();                                                                              // [0x1892260] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDEvent.GetIsActive
	// bool GetIsActive(class UObject* WorldContext);                                                                           // [0x1891da0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDEvent.CreatePopupWindow
	// class UFSDEventPopupWidget* CreatePopupWindow(class APlayerController* InPlayerController);                              // [0x1891230] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDEventCollection
/// Size: 0x0060 (0x000030 - 0x000090)
class UFSDEventCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TSet<UFSDEvent*>)                          Events                                                      OFFSET(get<T>, {0x30, 80, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEventActiveChanged                                        OFFSET(getStruct<T>, {0x80, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDEventCollection.GetEventsSorted
	// TArray<UFSDEvent*> GetEventsSorted();                                                                                    // [0x1891b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDEventCollection.FindEventHandler
	// class UFSDEvent* FindEventHandler(FName& EventName);                                                                     // [0x18917c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDEventCollection.FindAllEventHandlers
	// TArray<UFSDEvent*> FindAllEventHandlers(FName& EventName);                                                               // [0x18916e0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.FSDEventWithEnd
/// Size: 0x0020 (0x000000 - 0x000020)
class FFSDEventWithEnd : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   EventName                                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   EventExpirationDate                                         OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/FSD.FSDEventManager
/// Size: 0x01C0 (0x000030 - 0x0001F0)
class UFSDEventManager : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	SMember(FMulticastInlineDelegate)                  OnFSDEventsRefresh                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEventActiveChanged                                        OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<FFSDEventWithEnd>)                  PendingActiveEvents                                         OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FFSDEventWithEnd>)                  ActiveEvents                                                OFFSET(get<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   NumFailedRequests                                           OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(bool)                                      BackendDataValid                                            OFFSET(get<bool>, {0x74, 1, 0, 0})
	SMember(FDateTime)                                 LastRequestTime                                             OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	DMember(float)                                     NextCheckTime                                               OFFSET(get<float>, {0x80, 4, 0, 0})
	SMember(FDateTime)                                 SeasonExpirationTime                                        OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	DMember(bool)                                      SeasonExpirationTimeValid                                   OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(bool)                                      BackendNotificationEventValid                               OFFSET(get<bool>, {0x91, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDEventManager.TryGetJettyBootSettings
	// void TryGetJettyBootSettings(bool& OutHasSettings, FJettyBootEventSettings& OutSettings);                                // [0x1894410] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDEventManager.RequestSeasonEndTime
	// void RequestSeasonEndTime(FDelegateProperty OnComplete);                                                                 // [0x18931a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDEventManager.IsEventTypeActive
	// bool IsEventTypeActive(EHolidayType FSDEvent);                                                                           // [0x1892700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDEventManager.IsEventActive
	// bool IsEventActive(class UFSDEvent* FSDEvent);                                                                           // [0x1892660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDEventManager.GetSeasonExpiryDate
	// bool GetSeasonExpiryDate(FDateTime& ExpiryDate);                                                                         // [0x1891fd0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDEventManager.GetHolidayType
	// EHolidayType GetHolidayType();                                                                                           // [0x1891d50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDEventManager.GetFirstActiveEventHandler
	// class UFSDEvent* GetFirstActiveEventHandler();                                                                           // [0x1891c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDEventManager.GetBackendNotificationEvent
	// bool GetBackendNotificationEvent(FBackendNotificationEvent& Notification);                                               // [0x1891900] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDEventManager.GetActiveEventHandlers
	// TArray<UFSDEvent*> GetActiveEventHandlers();                                                                             // [0x1891880] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDEventManager.FSDEventsRefreshDelegate__DelegateSignature
	// void FSDEventsRefreshDelegate__DelegateSignature();                                                                      // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDEventManager.FSDEventsReady
	// bool FSDEventsReady();                                                                                                   // [0x1891470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FSDEventPopupWidget
/// Size: 0x0008 (0x0002A0 - 0x0002A8)
class UFSDEventPopupWidget : public UWindowWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	CMember(class UFSDEvent*)                          FSDEvent                                                    OFFSET(get<T>, {0x2A0, 8, 0, 0})
};

/// Class /Script/FSD.FSDEventsHandler
/// Size: 0x0128 (0x000028 - 0x000150)
class UFSDEventsHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FDateTime)                                 LastRequestTime                                             OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   NumFailedRequests                                           OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.FSDFindSessionsCallbackProxy
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UFSDFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRefresh                                                   OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UFSDFindSteamSessions*)              FSDFindSteamSessions                                        OFFSET(get<T>, {0xA0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDFindSessionsCallbackProxy.OnFSDCompleted
	// void OnFSDCompleted(bool bSuccess, TArray<FBlueprintSessionResult>& Results);                                            // [0x1892af0] Final|Native|Private|HasOutParms 
	// Function /Script/FSD.FSDFindSessionsCallbackProxy.ManualRefreshServerList
	// void ManualRefreshServerList();                                                                                          // [0x1892a40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDFindSessionsCallbackProxy.FSDFindSessions
	// class UFSDFindSessionsCallbackProxy* FSDFindSessions(class UObject* WorldContextObject, class APlayerController* PlayerController, int32_t MaxResults, bool bUseLAN); // [0x1891590] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDFindSessionsCallbackProxy.FSDFindFullSessions
	// class UFSDFindSessionsCallbackProxy* FSDFindFullSessions(class UObject* WorldContextObject, class APlayerController* PlayerController, int32_t MaxResults); // [0x1891490] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDFindSteamSessions
/// Size: 0x0118 (0x000028 - 0x000140)
class UFSDFindSteamSessions : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FMulticastInlineDelegate)                  OnFindResult                                                OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.FSDFlyingBugController
/// Size: 0x0038 (0x000358 - 0x000390)
class AFSDFlyingBugController : public AFSDAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(class UBehaviorTree*)                      BehaviourTree                                               OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(float)                                     UpdateLosInterval                                           OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(bool)                                      SetTargetOnAlert                                            OFFSET(get<bool>, {0x384, 1, 0, 0})
	DMember(bool)                                      SyncTargetWithBB                                            OFFSET(get<bool>, {0x385, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDFlyingBugController.OnFlyingBugAlerted
	// void OnFlyingBugAlerted();                                                                                               // [0x1892c10] Final|Native|Protected 
};

/// Class /Script/FSD.DashingFlyingBugController
/// Size: 0x0000 (0x000390 - 0x000390)
class ADashingFlyingBugController : public AFSDFlyingBugController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
};

/// Struct /Script/FSD.BlueprintFriend
/// Size: 0x0038 (0x000000 - 0x000038)
class FBlueprintFriend : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   RealName                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(EFriendOnlineStatusEnum)                   OnlineStatus                                                OFFSET(get<T>, {0x20, 1, 0, 0})
	SMember(FString)                                   UniqueNetId                                                 OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.FSDFriendsAndInvites
/// Size: 0x0050 (0x000028 - 0x000078)
class UFSDFriendsAndInvites : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FMulticastInlineDelegate)                  OnFriendsChanged                                            OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFriendInvitesChanged                                      OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRequestRefresh                                            OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	CMember(TArray<FBlueprintFriend>)                  Friends                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FBlueprintFriend>)                  FriendInvites                                               OFFSET(get<T>, {0x68, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDFriendsAndInvites.Init
	// void Init();                                                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Struct /Script/FSD.GlobalMissionSeed
/// Size: 0x000C (0x000000 - 0x00000C)
class FGlobalMissionSeed : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   RandomSeed                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Season                                                      OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   MapKey                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.FSDServerSearchOptions
/// Size: 0x0068 (0x000000 - 0x000068)
class FFSDServerSearchOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(ESteamServerJoinStatus)                    JoinStatus                                                  OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(ESteamSearchRegion)                        SearchRegion                                                OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(TArray<class UDifficultySetting*>)         Difficulties                                                OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<class USeason*>)                    Seasons                                                     OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(bool)                                      DeepDive                                                    OFFSET(get<bool>, {0x28, 1, 0, 0})
	SMember(FString)                                   SearchString                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   MissionSeed                                                 OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	SMember(FGlobalMissionSeed)                        GlobalMissionSeed                                           OFFSET(getStruct<T>, {0x44, 12, 0, 0})
	CMember(TArray<EGameType>)                         GameTypes                                                   OFFSET(get<T>, {0x58, 16, 0, 0})
};

/// Class /Script/FSD.FSDGameInstance
/// Size: 0x09C8 (0x0001A8 - 0x000B70)
class UFSDGameInstance : public UGameInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2928;

public:
	SMember(FMulticastInlineDelegate)                  OnTemporaryBuffAdded                                        OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGameSettingsChanged                                       OFFSET(getStruct<T>, {0x1C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGraphicsSettingsChanged                                   OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPressStart                                                OFFSET(getStruct<T>, {0x1E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnJoinPendingInvite                                         OFFSET(getStruct<T>, {0x1F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSkinChangedEvent                                          OFFSET(getStruct<T>, {0x200, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLoaderStart                                               OFFSET(getStruct<T>, {0x210, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayLevelSequenceInCharacterWorld                         OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLoaderStop                                                OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterSelectionStart                                   OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStartForging                                              OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSkipForging                                               OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnForgingDone                                               OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterSelectionStop                                    OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowCharacterSelectionRefresh                             OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTutorialManagerSet                                        OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLocalPlayerCharacterSet                                   OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowReconnectScreen                                       OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnXBoxAccountPickerClosed                                   OFFSET(getStruct<T>, {0x2D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnXBoxChangeUser                                            OFFSET(getStruct<T>, {0x2E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHDRGammaChanged                                           OFFSET(getStruct<T>, {0x2F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGravityChanged                                            OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnNewPostProcessingManager                                  OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPreviewSkinChanged                                        OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	DMember(bool)                                      ShowingReconnectScreen                                      OFFSET(get<bool>, {0x330, 1, 0, 0})
	CMember(TWeakObjectPtr<class UMouseCursorWidget*>) MouseCursorWidget                                           OFFSET(get<T>, {0x334, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowCharacterSelector                                     OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowViewer3D                                              OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowCharacterSelectorEquipSlot                            OFFSET(getStruct<T>, {0x360, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowCharacterSelectorEquip                                OFFSET(getStruct<T>, {0x370, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowCharacterSelectorRotate                               OFFSET(getStruct<T>, {0x380, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowEndScreen                                             OFFSET(getStruct<T>, {0x390, 16, 0, 0})
	CMember(class AProceduralSetup*)                   ProceduralSetup                                             OFFSET(get<T>, {0x3B0, 8, 0, 0})
	DMember(bool)                                      HasStartedAMission                                          OFFSET(get<bool>, {0x3B8, 1, 0, 0})
	SMember(FString)                                   FSDPassword                                                 OFFSET(getStruct<T>, {0x3C0, 16, 0, 0})
	DMember(bool)                                      FSDPrivateServer                                            OFFSET(get<bool>, {0x3D0, 1, 0, 0})
	DMember(bool)                                      SoloSession                                                 OFFSET(get<bool>, {0x3D1, 1, 0, 0})
	DMember(bool)                                      IsJoiningInvite                                             OFFSET(get<bool>, {0x3D2, 1, 0, 0})
	DMember(bool)                                      FirstTimeInFrontend                                         OFFSET(get<bool>, {0x3D3, 1, 0, 0})
	DMember(bool)                                      SessionFirstStartOnSpaceRig                                 OFFSET(get<bool>, {0x3D4, 1, 0, 0})
	DMember(bool)                                      ShowFirstCharacterSelector                                  OFFSET(get<bool>, {0x3D5, 1, 0, 0})
	DMember(bool)                                      ShowSaveWarning                                             OFFSET(get<bool>, {0x3D6, 1, 0, 0})
	CMember(class AActor*)                             WorldViewTargetDummy                                        OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UMissionResultInfo*)                 MissionResultInfo                                           OFFSET(get<T>, {0x3E0, 8, 0, 0})
	DMember(bool)                                      LoaderSequencePlaying                                       OFFSET(get<bool>, {0x3E8, 1, 0, 0})
	SMember(FString)                                   LastPerksLoadout                                            OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	CMember(class AActor*)                             CharacterSelectionLastViewTarget                            OFFSET(get<T>, {0x400, 8, 0, 0})
	DMember(bool)                                      HasSeenInfoScreen                                           OFFSET(get<bool>, {0x408, 1, 0, 0})
	SMember(FTransform)                                CharacterSelectionViewTargetTransform                       OFFSET(getStruct<T>, {0x410, 48, 0, 0})
	SMember(FTransform)                                LoaderViewTargetTransform                                   OFFSET(getStruct<T>, {0x440, 48, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGeneratedMissionChanged                                   OFFSET(getStruct<T>, {0x470, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDonkeyChanged                                             OFFSET(getStruct<T>, {0x480, 16, 0, 0})
	CMember(TWeakObjectPtr<class AMolly*>)             Donkey                                                      OFFSET(get<T>, {0x490, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBoscoChanged                                              OFFSET(getStruct<T>, {0x498, 16, 0, 0})
	DMember(bool)                                      DEBUGUseDebugSeedForMissions                                OFFSET(get<bool>, {0x4A8, 1, 0, 0})
	DMember(bool)                                      DEBUGAutoRotateMissions                                     OFFSET(get<bool>, {0x4A9, 1, 0, 0})
	DMember(int32_t)                                   DEBUGFixedPLSSeed                                           OFFSET(get<int32_t>, {0x4B0, 4, 0, 0})
	DMember(int32_t)                                   DEBUGSeedOverride                                           OFFSET(get<int32_t>, {0x4C4, 4, 0, 0})
	DMember(bool)                                      CanPlayOnline                                               OFFSET(get<bool>, {0x4C8, 1, 0, 0})
	DMember(bool)                                      CanCommunicateOnline                                        OFFSET(get<bool>, {0x4C9, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSteamSearchRegionChanged                                  OFFSET(getStruct<T>, {0x4D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSteamServerJoinStatusChanged                              OFFSET(getStruct<T>, {0x4E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStartSearchForFriendsComplete                             OFFSET(getStruct<T>, {0x4F0, 16, 0, 0})
	CMember(TMap<FString, FString>)                    FriendSessions                                              OFFSET(get<T>, {0x500, 80, 0, 0})
	CMember(class UGoogleAnalyticsWrapper*)            GoogleAnalyticsWI                                           OFFSET(get<T>, {0x558, 8, 0, 0})
	CMember(class UDSTelemetryWrapper*)                DSTelemetryWrapper                                          OFFSET(get<T>, {0x560, 8, 0, 0})
	CMember(class USpecialEvent*)                      ForcedMachineEvent                                          OFFSET(get<T>, {0x568, 8, 0, 0})
	CMember(class USpecialEvent*)                      ForcedOtherEvent                                            OFFSET(get<T>, {0x570, 8, 0, 0})
	DMember(bool)                                      ShowMinerManualWorkInProgress                               OFFSET(get<bool>, {0x57A, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMinersManualNotification                                  OFFSET(getStruct<T>, {0x580, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnNewHUDWarning                                             OFFSET(getStruct<T>, {0x590, 16, 0, 0})
	DMember(float)                                     LastDreadnaughtKillTime                                     OFFSET(get<float>, {0x5C0, 4, 0, 0})
	CMember(TWeakObjectPtr<class UWindowWidget*>)      ActiveEscapeMenu                                            OFFSET(get<T>, {0x5C4, 8, 0, 0})
	CMember(TWeakObjectPtr<class APostProcessingManager*>) PostProcessingManager                                   OFFSET(get<T>, {0x5CC, 8, 0, 0})
	CMember(TWeakObjectPtr<class ABosco*>)             Drone                                                       OFFSET(get<T>, {0x5D4, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   LocalPlayerCharacter                                        OFFSET(get<T>, {0x5DC, 8, 0, 0})
	CMember(TWeakObjectPtr<class ATutorialManager*>)   TutorialManager                                             OFFSET(get<T>, {0x5E4, 8, 0, 0})
	CMember(class ACharacterSelectionSwitcher*)        CharacterSelectionSwitcher                                  OFFSET(get<T>, {0x5F0, 8, 0, 0})
	DMember(bool)                                      bGameSettingsChanged                                        OFFSET(get<bool>, {0x5F8, 1, 0, 0})
	SMember(FFSDServerSearchOptions)                   ServerSearchOptions                                         OFFSET(getStruct<T>, {0x600, 104, 0, 0})
	DMember(bool)                                      ServerSearchActive                                          OFFSET(get<bool>, {0x668, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPrivilegeCheckComplete                                    OFFSET(getStruct<T>, {0x680, 16, 0, 0})
	DMember(bool)                                      IsOnPressStartScreen                                        OFFSET(get<bool>, {0x6A0, 1, 0, 0})
	DMember(bool)                                      HasSeenStartScreen                                          OFFSET(get<bool>, {0x6A1, 1, 0, 0})
	CMember(class UClass*)                             ProceduralLevel                                             OFFSET(get<T>, {0x6A8, 8, 0, 0})
	CMember(class UClass*)                             IconGenerationManagerClass                                  OFFSET(get<T>, {0x6B0, 8, 0, 0})
	CMember(class UIconGenerationManager*)             IconGenerationManager                                       OFFSET(get<T>, {0x6B8, 8, 0, 0})
	CMember(class UCampaignManager*)                   CampaignManager                                             OFFSET(get<T>, {0x6D0, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   DeepDiveManager                                             OFFSET(get<T>, {0x6D8, 16, 0, 0})
	CMember(class UGeneratedMission*)                  GeneratedMission                                            OFFSET(get<T>, {0x6E8, 8, 0, 0})
	CMember(class UDifficultySetting*)                 DesiredDifficulty                                           OFFSET(get<T>, {0x6F0, 8, 0, 0})
	CMember(class UFSDSaveGame*)                       SaveGame                                                    OFFSET(get<T>, {0x6F8, 8, 0, 0})
	CMember(EDisconnectReason)                         DisconnectReason                                            OFFSET(get<T>, {0x700, 1, 0, 0})
	SMember(FString)                                   DisconnectErrorCode                                         OFFSET(getStruct<T>, {0x708, 16, 0, 0})
	CMember(TArray<class UWorld*>)                     AlwaysLoadedWorlds                                          OFFSET(get<T>, {0x718, 16, 0, 0})
	DMember(bool)                                      ShowCharacterSelectionWorld                                 OFFSET(get<bool>, {0x728, 1, 0, 0})
	CMember(class UClass*)                             Viewer3DClass                                               OFFSET(get<T>, {0x730, 8, 0, 0})
	DMember(bool)                                      ShowLoaderWorld                                             OFFSET(get<bool>, {0x738, 1, 0, 0})
	DMember(bool)                                      CharacterSelectionWorldActive                               OFFSET(get<bool>, {0x739, 1, 0, 0})
	DMember(bool)                                      MixerInteractivityEnabled                                   OFFSET(get<bool>, {0x73A, 1, 0, 0})
	DMember(bool)                                      LoaderWorldActive                                           OFFSET(get<bool>, {0x73B, 1, 0, 0})
	DMember(bool)                                      ResetHUDWhenReturning                                       OFFSET(get<bool>, {0x73C, 1, 0, 0})
	DMember(bool)                                      MovieModeActive                                             OFFSET(get<bool>, {0x73D, 1, 0, 0})
	DMember(bool)                                      MovieModeActiveInSpacerig                                   OFFSET(get<bool>, {0x73E, 1, 0, 0})
	DMember(bool)                                      MovieModeStartAtOrigin                                      OFFSET(get<bool>, {0x73F, 1, 0, 0})
	DMember(bool)                                      MovieModeStartWithCameraShake                               OFFSET(get<bool>, {0x740, 1, 0, 0})
	CMember(class USchematic*)                         ActiveForgeSchematic                                        OFFSET(get<T>, {0x748, 8, 0, 0})
	CMember(class UFSDCloudLoadSave*)                  FSDCloudLoadSave                                            OFFSET(get<T>, {0x750, 8, 0, 0})
	CMember(class UFSDSessionUpdater*)                 SessionUpdater                                              OFFSET(get<T>, {0x758, 8, 0, 0})
	CMember(class UFSDSendToURL*)                      SendToURL                                                   OFFSET(get<T>, {0x760, 8, 0, 0})
	CMember(class UFSDFriendsAndInvites*)              FriendsAndInvites                                           OFFSET(get<T>, {0x768, 8, 0, 0})
	DMember(double)                                    SessionStartTime                                            OFFSET(get<double>, {0x770, 8, 0, 0})
	DMember(int32_t)                                   SessionStartTimestamp                                       OFFSET(get<int32_t>, {0x778, 4, 0, 0})
	DMember(float)                                     InKBytesPerSecond                                           OFFSET(get<float>, {0x77C, 4, 0, 0})
	DMember(float)                                     OutKBytesPerSecond                                          OFFSET(get<float>, {0x780, 4, 0, 0})
	DMember(bool)                                      PreSpawnNigaraParticles                                     OFFSET(get<bool>, {0x784, 1, 0, 0})
	CMember(TArray<class UTemporaryBuff*>)             TemporaryBuffs                                              OFFSET(get<T>, {0x788, 16, 0, 0})
	CMember(TWeakObjectPtr<class ULevelSequence*>)     NextLoaderSequence                                          OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(EAlwaysLoadedWorlds)                       NextLoaderLevel                                             OFFSET(get<T>, {0x7C0, 1, 0, 0})
	CMember(TWeakObjectPtr<class ULevelSequence*>)     DeepDiveLoaderSequence                                      OFFSET(get<T>, {0x7C8, 8, 0, 0})
	CMember(TWeakObjectPtr<class ULevelSequence*>)     DeepDiveLoaderSequence2                                     OFFSET(get<T>, {0x7F0, 8, 0, 0})
	CMember(class USoundSubmix*)                       ControllerVibrationSubmix                                   OFFSET(get<T>, {0x828, 8, 0, 0})
	CMember(class USoundSubmix*)                       ControllerSpeakerSubmix                                     OFFSET(get<T>, {0x830, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDGameInstance.UpdateGlobelMissionSeed
	// void UpdateGlobelMissionSeed();                                                                                          // [0x1894550] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.UpdateDebugSeed
	// void UpdateDebugSeed();                                                                                                  // [0x1894530] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.StopPhotographyInputProcessor
	// void StopPhotographyInputProcessor();                                                                                    // [0x18943f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.StopPersonalAnalytics
	// void StopPersonalAnalytics();                                                                                            // [0x18943d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SteamServerJoinStatusDelegate__DelegateSignature
	// void SteamServerJoinStatusDelegate__DelegateSignature(ESteamServerJoinStatus Status);                                    // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDGameInstance.SteamSearchRegionDelegate__DelegateSignature
	// void SteamSearchRegionDelegate__DelegateSignature(ESteamSearchRegion Region);                                            // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDGameInstance.StartPhotographyInputProcessor
	// void StartPhotographyInputProcessor();                                                                                   // [0x18943b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.StartPersonalAnalytics
	// void StartPersonalAnalytics();                                                                                           // [0x1894390] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SpawnProcedural
	// class AProceduralSetup* SpawnProcedural();                                                                               // [0x1894250] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetViewer3DClass
	// void SetViewer3DClass(class UClass* NewClass, ECharselectionCameraLocation Location);                                    // [0x1894180] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetSteamServerJoinStatus
	// void SetSteamServerJoinStatus(ESteamServerJoinStatus NewStatus);                                                         // [0x18940f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetSteamSearchRegion
	// void SetSteamSearchRegion(ESteamSearchRegion NewRegion);                                                                 // [0x1894060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetShouldAdvertiseInServerlist
	// void SetShouldAdvertiseInServerlist(bool bShouldAdvertise);                                                              // [0x1893fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetServerSearchOptions
	// void SetServerSearchOptions(FFSDServerSearchOptions& options);                                                           // [0x1893ec0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetServerSearchActive
	// void SetServerSearchActive(bool Active);                                                                                 // [0x1893e30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetSelectedMission
	// void SetSelectedMission(class UGeneratedMission* mission, bool updateSessionSettings);                                   // [0x1893d60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetProceduralMap
	// void SetProceduralMap(class UClass* procedural);                                                                         // [0x1893cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetPendingInviteJoinModding
	// void SetPendingInviteJoinModding(FBlueprintSessionResult& Result);                                                       // [0x1893ab0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetOverrideMaxPlayerCount
	// void SetOverrideMaxPlayerCount(int32_t Count);                                                                           // [0x1893a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetMinersManualNotification
	// void SetMinersManualNotification(EMinersManualSection Section, class UObject* IdentifyingObject, FText Text);            // [0x18938b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetLoaderWorldVisible
	// void SetLoaderWorldVisible(bool V, bool resetHud);                                                                       // [0x18937e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetIsUsingOnlineFeatures
	// void SetIsUsingOnlineFeatures(bool bIsOnlineFeatureUsed);                                                                // [0x1893750] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetHasSeenInfoScreen
	// void SetHasSeenInfoScreen();                                                                                             // [0x1893730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetGlobalMissionSeed
	// void SetGlobalMissionSeed(int32_t Seed);                                                                                 // [0x18936a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetFSDPassword
	// void SetFSDPassword(FString pw);                                                                                         // [0x1893600] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetEligableForRetirementAssignment
	// void SetEligableForRetirementAssignment(bool eligable);                                                                  // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDGameInstance.SetDebugSeed
	// void SetDebugSeed(int32_t Seed);                                                                                         // [0x1893570] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetCharacterSelectionWorldVisible
	// void SetCharacterSelectionWorldVisible(bool V, ECharselectionCameraLocation cameraLocation, bool resetHud, ECharacterSelectorItemStatus itemStatus); // [0x1893400] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SetCharacterSelectionSwitcher
	// void SetCharacterSelectionSwitcher(class ACharacterSelectionSwitcher* switcher);                                         // [0x1893370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.SendSteamInfo
	// void SendSteamInfo();                                                                                                    // [0x1893350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.ScheduleResetOfWorldsAndGameDataThenOpenLevel
	// void ScheduleResetOfWorldsAndGameDataThenOpenLevel(FName LevelName);                                                     // [0x18932c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.RestoreCursors
	// void RestoreCursors();                                                                                                   // [0x18932a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.ResetViewer3DClass
	// void ResetViewer3DClass();                                                                                               // [0x1893280] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.ResetSaveGame
	// void ResetSaveGame();                                                                                                    // [0x1893260] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.ResetAlwaysLoadedWorldsAndGameData
	// void ResetAlwaysLoadedWorldsAndGameData();                                                                               // [0x1893240] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.RemoveBosco
	// void RemoveBosco();                                                                                                      // [0x1893180] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.RemoveAllTemporaryBuff
	// void RemoveAllTemporaryBuff(class APlayerController* PlayerController);                                                  // [0x1892ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.RefreshIsGameModded
	// void RefreshIsGameModded();                                                                                              // [0x1893160] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.PreClientTravelCleanup
	// void PreClientTravelCleanup(class APlayerController* PlayerController);                                                  // [0x1892ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.PostInit
	// void PostInit(bool reload);                                                                                              // [0x1892e60] Final|Native|Private|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.PairingUsePreviousProfile
	// void PairingUsePreviousProfile();                                                                                        // [0xbd29a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.PairingUseNewProfile
	// void PairingUseNewProfile();                                                                                             // [0x1892e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.OnStartSearchForFriendsComplete__DelegateSignature
	// void OnStartSearchForFriendsComplete__DelegateSignature(bool bWasSuccessful, FString ErrorStr);                          // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDGameInstance.OnNewFSDSessionID
	// void OnNewFSDSessionID(FString sessionId);                                                                               // [0x1892da0] Final|Native|Private 
	// Function /Script/FSD.FSDGameInstance.OnNetworkFailure
	// void OnNetworkFailure(class UWorld* World, class UNetDriver* NetDriver, TEnumAsByte<ENetworkFailure> failType, FString errorMessage); // [0x1892c30] Final|Native|Protected 
	// Function /Script/FSD.FSDGameInstance.OnLoadComplete
	// void OnLoadComplete(FString MapName);                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDGameInstance.NewHUDWarningDelegate__DelegateSignature
	// void NewHUDWarningDelegate__DelegateSignature(class UHUDWarningWidget* newWidget);                                       // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDGameInstance.LoadSaveGame
	// void LoadSaveGame(class UFSDSaveGame* toLoad);                                                                           // [0x18929b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.IsPendingInvitePasswordProtected
	// bool IsPendingInvitePasswordProtected();                                                                                 // [0x1892980] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.IsPendingInviteModded
	// bool IsPendingInviteModded();                                                                                            // [0x1892950] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.IsMutatorActive
	// bool IsMutatorActive(class UClass* mutatorClass);                                                                        // [0x18928b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.IsGameModded
	// bool IsGameModded();                                                                                                     // [0x1892890] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.IsFreeBeerRewardActive
	// bool IsFreeBeerRewardActive();                                                                                           // [0x1892790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.IsCharacterSelectionWorldVisible
	// bool IsCharacterSelectionWorldVisible();                                                                                 // [0x1892630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.IsCampaignMission
	// bool IsCampaignMission();                                                                                                // [0x1892600] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.HasTooManyModsEnabled
	// bool HasTooManyModsEnabled();                                                                                            // [0x1892530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.HasSignedIn
	// bool HasSignedIn();                                                                                                      // [0x1892500] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.HasRandomBeerBuff
	// bool HasRandomBeerBuff();                                                                                                // [0x18924d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.HasPendingInvite
	// bool HasPendingInvite();                                                                                                 // [0x18924b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.HasPendingActivity
	// bool HasPendingActivity();                                                                                               // [0x1892490] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.HasAnalytics
	// bool HasAnalytics();                                                                                                     // [0x1892460] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.GraphicsUserSettingsChanged
	// void GraphicsUserSettingsChanged();                                                                                      // [0x1892440] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.GiveTemporaryBuff
	// void GiveTemporaryBuff(class UTemporaryBuff* buff, class APlayerCharacter* Player);                                      // [0x1892370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.GetViewportSize
	// FVector2D GetViewportSize();                                                                                             // [0x1892290] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.GetSoftReferenceToPLS
	// TSoftObjectPtr<UClass*> GetSoftReferenceToPLS();                                                                         // [0x1892200] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.GetServersFriendsArePlaying
	// TArray<FBlueprintSessionResult> GetServersFriendsArePlaying(TArray<FBlueprintSessionResult> servers);                    // [0x1892070] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.GetOverrideMaxPlayerCount
	// int32_t GetOverrideMaxPlayerCount();                                                                                     // [0x1891fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetMutators
	// TArray<UMutator*> GetMutators(class UClass* mutatorClass);                                                               // [0x1891ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetMaxPublicConnections
	// int32_t GetMaxPublicConnections();                                                                                       // [0x1891e90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetMaxAllowedMods
	// int32_t GetMaxAllowedMods();                                                                                             // [0x1891e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetLocalFSDPlayerController
	// class AFSDPlayerController* GetLocalFSDPlayerController();                                                               // [0x1891e40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetIconGenerationManager
	// class UIconGenerationManager* GetIconGenerationManager();                                                                // [0x1891d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetHasSeenInfoScreen
	// bool GetHasSeenInfoScreen();                                                                                             // [0x1891d30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.GetGlobalMissionSeedNew
	// FGlobalMissionSeed GetGlobalMissionSeedNew();                                                                            // [0x1891cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetGeneratedMission
	// class UGeneratedMission* GetGeneratedMission();                                                                          // [0x1891cd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetFirstMutator
	// class UMutator* GetFirstMutator(class UClass* mutatorClass);                                                             // [0x1891c30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetDisconnectErrorCode
	// FString GetDisconnectErrorCode();                                                                                        // [0x1891ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameInstance.GetConnectionInfo
	// TArray<FNetworkConnectionInfo> GetConnectionInfo();                                                                      // [0x1891a30] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.GetCharacterSelectorCharacter
	// class APlayerCharacter* GetCharacterSelectorCharacter();                                                                 // [0x1891a00] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameInstance.GameUserSettingsChanged
	// void GameUserSettingsChanged();                                                                                          // [0x1891860] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.DonkeyCharacterDelegate__DelegateSignature
	// void DonkeyCharacterDelegate__DelegateSignature(class AMolly* InDonkey);                                                 // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDGameInstance.CloseSessionLobby
	// void CloseSessionLobby();                                                                                                // [0x1891170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.ClearDisconnectError
	// void ClearDisconnectError();                                                                                             // [0x1891150] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.ChangeSkinPreview
	// void ChangeSkinPreview(class UItemSkin* PreviewSkin);                                                                    // [0x18910c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.CancelJoin
	// void CancelJoin();                                                                                                       // [0x18910a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.CachePSOsOnCommand
	// void CachePSOsOnCommand();                                                                                               // [0xbd29a0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.ApplyGameUserSettings
	// void ApplyGameUserSettings(class UFSDGameUserSettings* Settings);                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDGameInstance.AddWarningToHUD
	// class UHUDWarningWidget* AddWarningToHUD(class UClass* WidgetClass, class UTexture2D* Texture, class USoundBase* PingSound); // [0x1890f90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.AddToFriendSessions
	// void AddToFriendSessions(FString friendSessionId, FString friendName);                                                   // [0x1890e10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.AddStatValue
	// void AddStatValue(FString Key, float Value);                                                                             // [0x1890d20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameInstance.AddStatCount
	// void AddStatCount(FString Key, int32_t Count);                                                                           // [0x1890c40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDGameMode
/// Size: 0x01F8 (0x000308 - 0x000500)
class AFSDGameMode : public AGameMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1280;

public:
	SMember(FMulticastInlineDelegate)                  OnMatchStarted                                              OFFSET(getStruct<T>, {0x308, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAllControllersReady                                       OFFSET(getStruct<T>, {0x318, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerLoggedIn                                            OFFSET(getStruct<T>, {0x328, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDonkeyCalled                                              OFFSET(getStruct<T>, {0x338, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDonkeyButtonPressed                                       OFFSET(getStruct<T>, {0x348, 16, 0, 0})
	DMember(bool)                                      GenerationStarted                                           OFFSET(get<bool>, {0x358, 1, 0, 0})
	CMember(class UPheromoneSpawnerComponent*)         PheromoneComponent                                          OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UEnemySpawnManager*)                 EnemySpawnManager                                           OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UObjectivesManager*)                 ObjectivesManager                                           OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UKeepInsideWorld*)                   KeepInsideWorld                                             OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class UMissionManager*)                    MissionManager                                              OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UEncounterManager*)                  EncounterManagerComponent                                   OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UCritterManager*)                    CritterManager                                              OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(TArray<class AFSDPlayerController*>)       PlayerControllers                                           OFFSET(get<T>, {0x398, 16, 0, 0})
	CMember(class UFormationsManagerComponent*)        FormationsManager                                           OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DropPodClass                                                OFFSET(get<T>, {0x3D0, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             MuleClass                                                   OFFSET(get<T>, {0x3F8, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DropodEscapeClass                                           OFFSET(get<T>, {0x420, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             droneClass                                                  OFFSET(get<T>, {0x448, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             CheatUI                                                     OFFSET(get<T>, {0x470, 40, 0, 0})
	DMember(float)                                     ContinueCountdown                                           OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(bool)                                      PreventAllLatejoin                                          OFFSET(get<bool>, {0x4A0, 1, 0, 0})
	DMember(bool)                                      AllowRejoin                                                 OFFSET(get<bool>, {0x4A1, 1, 0, 0})
	DMember(bool)                                      PreventLateJoinOnMissionStart                               OFFSET(get<bool>, {0x4A2, 1, 0, 0})
	DMember(float)                                     PlayerSpawnHeightOffset                                     OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     FriendlyFireGracePeriod                                     OFFSET(get<float>, {0x4A8, 4, 0, 0})
	CMember(TArray<class UEnemyDescriptor*>)           ForcedEnemyPool                                             OFFSET(get<T>, {0x4B0, 16, 0, 0})
	DMember(bool)                                      UseNormalEncounters                                         OFFSET(get<bool>, {0x4C0, 1, 0, 0})
	DMember(bool)                                      UseStationaryEncounter                                      OFFSET(get<bool>, {0x4C1, 1, 0, 0})
	DMember(bool)                                      AllowSpecialEncounters                                      OFFSET(get<bool>, {0x4C2, 1, 0, 0})
	CMember(class UEnemyWaveManager*)                  CachedWaveManager                                           OFFSET(get<T>, {0x4C8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDGameMode.StartGame
	// void StartGame();                                                                                                        // [0x189a730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.SpawnMissionCriticalItems
	// void SpawnMissionCriticalItems(ECriticalItemPass& pass);                                                                 // [0x1d6f900] Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.SignalEndLevelToClients
	// void SignalEndLevelToClients();                                                                                          // [0x1899e80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.SignalDonkeyPressed
	// void SignalDonkeyPressed();                                                                                              // [0x1899e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.ResetDeaths
	// void ResetDeaths();                                                                                                      // [0x18998d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.RecieveEndLevel
	// void RecieveEndLevel();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.RecieveAllDwarvesDown
	// void RecieveAllDwarvesDown();                                                                                            // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.Recieve_ContinueTimerEnded
	// void Recieve_ContinueTimerEnded();                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.ReceivePostSeamlessTravel
	// void ReceivePostSeamlessTravel();                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.OnObjectivesInitialized
	// void OnObjectivesInitialized();                                                                                          // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.OnLevelGenerationComplete
	// void OnLevelGenerationComplete(int32_t pass);                                                                            // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.OnControllerDestroyed
	// void OnControllerDestroyed(class AActor* Controller);                                                                    // [0x1899370] Final|Native|Protected 
	// Function /Script/FSD.FSDGameMode.LoadSpaceRig
	// void LoadSpaceRig();                                                                                                     // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.LoadMission
	// void LoadMission(FString MapName, TSoftObjectPtr<UClass*> optionalGameMode);                                             // [0x18991a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.HostAbortMission
	// void HostAbortMission();                                                                                                 // [0x18990e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.HandlePlayerBanning
	// void HandlePlayerBanning(class AFSDPlayerController* FSDPlayerController);                                               // [0x1899000] Final|Native|Protected 
	// Function /Script/FSD.FSDGameMode.GetWaveManager
	// class UEnemyWaveManager* GetWaveManager();                                                                               // [0x1898fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetPlayerStart
	// class AActor* GetPlayerStart(class AFSDPlayerController* Controller);                                                    // [0x1898de0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.GetMuleClass
	// class UClass* GetMuleClass();                                                                                            // [0x1898cf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetMissionWasAborted
	// bool GetMissionWasAborted();                                                                                             // [0x1898cd0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameMode.GetEncounterManager
	// class UEncounterManager* GetEncounterManager();                                                                          // [0x18988c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetDropPodPath
	// FSoftObjectPath GetDropPodPath();                                                                                        // [0x1898830] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetDropPodEscapePath
	// FSoftObjectPath GetDropPodEscapePath();                                                                                  // [0x18987a0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetDropPodEscapeClass
	// class UClass* GetDropPodEscapeClass();                                                                                   // [0x1898760] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetDropPodClass
	// class UClass* GetDropPodClass();                                                                                         // [0x1898720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetDronePath
	// FSoftObjectPath GetDronePath();                                                                                          // [0x1898690] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetDroneClass
	// class UClass* GetDroneClass();                                                                                           // [0x1898650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetDifficultyManager
	// class UDifficultyManager* GetDifficultyManager();                                                                        // [0x18985f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.GetCurrentLevel
	// int32_t GetCurrentLevel();                                                                                               // [0x18985c0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.FSDSetPause
	// bool FSDSetPause(class APlayerController* PC, EPauseReason pauseReason);                                                 // [0x1898300] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.FSDKickPlayer
	// bool FSDKickPlayer(class APlayerController* KickedPlayer, FText& KickReason);                                            // [0x18981e0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.FSDClearPause
	// bool FSDClearPause(EPauseReason pauseReason);                                                                            // [0x1898150] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.EndLevel
	// void EndLevel();                                                                                                         // [0x1898130] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.DonkeyButtonPressed
	// void DonkeyButtonPressed();                                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDGameMode.DestroyNonLocalPlayers
	// void DestroyNonLocalPlayers();                                                                                           // [0x1898110] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameMode.Debug_ShowPlayerSpheres
	// void Debug_ShowPlayerSpheres();                                                                                          // [0x18980f0] Final|Exec|Native|Public 
	// Function /Script/FSD.FSDGameMode.AllPlayersHaveSelectedCharacter
	// bool AllPlayersHaveSelectedCharacter();                                                                                  // [0x1897ba0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.AllPlayersHaveGeneratedLevel
	// bool AllPlayersHaveGeneratedLevel();                                                                                     // [0x1897b70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameMode.AddControllerForGracePeriod
	// void AddControllerForGracePeriod(class APlayerCharacter* APlayerCharacter);                                              // [0x1897ab0] Final|Native|Protected 
	// Function /Script/FSD.FSDGameMode.AboutMission
	// void AboutMission();                                                                                                     // [0x1897a90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDGameModeSpaceRig
/// Size: 0x0018 (0x000500 - 0x000518)
class AFSDGameModeSpaceRig : public AFSDGameMode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1304;

public:
	DMember(char)                                      AmountOfPlayersSpawnedInMedbay                              OFFSET(get<char>, {0x500, 1, 0, 0})
	DMember(bool)                                      StartedSession                                              OFFSET(get<bool>, {0x501, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDGameModeSpaceRig.GetFreeSpawnOfType
	// class AActor* GetFreeSpawnOfType(ESpacerigStartType aType, class AFSDPlayerController* AController);                     // [0x18989b0] Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDGameplayStatics
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDGameplayStatics : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDGameplayStatics.SpawnScaledEmitterAtLocation
	// class UFXSystemComponent* SpawnScaledEmitterAtLocation(class UObject* WorldContextObject, FScaledEffect ScaledEffect, FVector Location, FRotator Rotation, bool bAutoDestroy); // [0x189a460] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDGameplayStatics.SpawnDecalData
	// class UDecalComponent* SpawnDecalData(class UObject* WorldContextObject, FVector& Location, FVector& UpVector, FDecalData& DecalData, bool randomRollRotation); // [0x189a260] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDGameplayStatics.SpawnDecalAtActor
	// class UDecalComponent* SpawnDecalAtActor(class AActor* Actor, class UMaterialInterface* DecalMaterial, float Size, float Duration, float FadeDuration); // [0x189a0d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameplayStatics.SpawnDecal
	// class UDecalComponent* SpawnDecal(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, FVector& Location, FVector& UpVector, float Size, float Duration, float FadeDuration); // [0x1899ea0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDGameplayStatics.SetControllerVibrationSubmixSend
	// void SetControllerVibrationSubmixSend(class UObject* WorldContextObject, class UAudioComponent* AudioComponent, float SendLevel); // [0x1899ad0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameplayStatics.SetControllerSpeakerSubmixSend
	// void SetControllerSpeakerSubmixSend(class UObject* WorldContextObject, class UAudioComponent* AudioComponent, float SendLevel); // [0x18999c0] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/FSD.FSDTagsAttitude
/// Size: 0x0018 (0x000000 - 0x000018)
class FFSDTagsAttitude : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGameplayTag)                              Friendly                                                    OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FGameplayTag)                              Neutral                                                     OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FGameplayTag)                              Hostile                                                     OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FSD.FSDTagsSurfaceProperties
/// Size: 0x0008 (0x000000 - 0x000008)
class FFSDTagsSurfaceProperties : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FGameplayTag)                              MovingPlatform                                              OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.FSDTagsRoot
/// Size: 0x0020 (0x000000 - 0x000020)
class FFSDTagsRoot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FFSDTagsAttitude)                          Attitude                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FFSDTagsSurfaceProperties)                 SurfaceProperties                                           OFFSET(getStruct<T>, {0x18, 8, 0, 0})
};

/// Class /Script/FSD.FSDTagSettings
/// Size: 0x00F8 (0x000030 - 0x000128)
class UFSDTagSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FGameplayTagQuery)                         IsFriendlyQuery                                             OFFSET(getStruct<T>, {0x30, 72, 0, 0})
	SMember(FGameplayTagQuery)                         IsNeutralQuery                                              OFFSET(getStruct<T>, {0x78, 72, 0, 0})
	SMember(FGameplayTagQuery)                         IsHostileQuery                                              OFFSET(getStruct<T>, {0xC0, 72, 0, 0})
	SMember(FFSDTagsRoot)                              Root                                                        OFFSET(getStruct<T>, {0x108, 32, 0, 0})
};

/// Class /Script/FSD.FSDGameSession
/// Size: 0x0020 (0x000238 - 0x000258)
class AFSDGameSession : public AGameSession
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(TArray<FUniqueNetIdRepl>)                  KickedPlayers                                               OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(TArray<FUniqueNetIdRepl>)                  BannedPlayers                                               OFFSET(get<T>, {0x248, 16, 0, 0})
};

/// Struct /Script/FSD.ReplicatedObjectives
/// Size: 0x0018 (0x000000 - 0x000018)
class FReplicatedObjectives : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(bool)                                      HasReplicated                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TArray<class UObjective*>)                 Objectives                                                  OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.GeneratedMissionSeed
/// Size: 0x0068 (0x000000 - 0x000068)
class FGeneratedMissionSeed : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FGlobalMissionSeed)                        GlobalSeed                                                  OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	CMember(class UBiome*)                             Biome                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UMissionTemplate*)                   Template                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UMissionComplexity*)                 ComplexityLimit                                             OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UMissionDuration*)                   DurationLimit                                               OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UMissionMutator*)                    Mutator                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMissionChallenge*)                  Challenge                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<class UMissionWarning*>)            Warnings                                                    OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<class UFSDEvent*>)                  ActiveEvents                                                OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(EMissionStructure)                         MissionStructure                                            OFFSET(get<T>, {0x60, 1, 0, 0})
};

/// Struct /Script/FSD.DifficultyMutatorItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FDifficultyMutatorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UDifficultyMutatorSetupItem*)        SetupItem                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   AppliedCount                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FSD.GameDifficulty
/// Size: 0x0018 (0x000000 - 0x000018)
class FGameDifficulty : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UDifficultySetting*)                 Difficulty                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FDifficultyMutatorItem>)            Mutators                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Class /Script/FSD.FSDGameState
/// Size: 0x0438 (0x000290 - 0x0006C8)
class AFSDGameState : public AGameState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1736;

public:
	SMember(FMulticastInlineDelegate)                  OnMissionTimeUpdated                                        OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTerrainGenerated                                          OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTerrainGenerationStarting                                 OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMatchStarted                                              OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMatchEnded                                                OFFSET(getStruct<T>, {0x2D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGameEventCompletedEvent                                   OFFSET(getStruct<T>, {0x2E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerJoined                                              OFFSET(getStruct<T>, {0x2F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerLeave                                               OFFSET(getStruct<T>, {0x300, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnContinueActive                                            OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnContinueCountdownChanged                                  OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAllDwarvesDown                                            OFFSET(getStruct<T>, {0x330, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTeamMemberCampaignMissionChanged                          OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEnemyKilledEvent                                          OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerCharacterRegistered                                 OFFSET(getStruct<T>, {0x360, 16, 0, 0})
	DMember(int32_t)                                   CurrentLevel                                                OFFSET(get<int32_t>, {0x370, 4, 0, 0})
	CMember(class ATeamTransport*)                     EscapePod                                                   OFFSET(get<T>, {0x378, 8, 0, 0})
	SMember(FString)                                   FSDSessionID                                                OFFSET(getStruct<T>, {0x380, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBoscoReviveCounterChanged                                 OFFSET(getStruct<T>, {0x390, 16, 0, 0})
	DMember(bool)                                      bTeamDown                                                   OFFSET(get<bool>, {0x3A0, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTeamDown                                                  OFFSET(getStruct<T>, {0x3A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnObjectivesCompleted                                       OFFSET(getStruct<T>, {0x3C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnObjectiveAdded                                            OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDifficultyChanged                                         OFFSET(getStruct<T>, {0x3E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCountdownStarted                                          OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCountdownTimeChanged                                      OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCountdownFinished                                         OFFSET(getStruct<T>, {0x410, 16, 0, 0})
	CMember(class ADeepCSGWorld*)                      CSGWorld                                                    OFFSET(get<T>, {0x420, 8, 0, 0})
	DMember(int32_t)                                   LastSupplyPodTimeStamp                                      OFFSET(get<int32_t>, {0x428, 4, 0, 0})
	DMember(int32_t)                                   LastCleaningPodTimeStamp                                    OFFSET(get<int32_t>, {0x42C, 4, 0, 0})
	CMember(class AProceduralSetup*)                   ProceduralSetup                                             OFFSET(get<T>, {0x430, 8, 0, 0})
	DMember(bool)                                      DelayLateJoin                                               OFFSET(get<bool>, {0x438, 1, 0, 0})
	CMember(class UPrimitiveComponent*)                FakeMovementBase                                            OFFSET(get<T>, {0x440, 8, 0, 0})
	DMember(int32_t)                                   PlayerSurvivalCreditBonus                                   OFFSET(get<int32_t>, {0x448, 4, 0, 0})
	DMember(float)                                     ResourceAmountPenalty                                       OFFSET(get<float>, {0x44C, 4, 0, 0})
	DMember(float)                                     ObjectivesCreditPenalty                                     OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(float)                                     ObjectivesXPPenaltyNormal                                   OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(float)                                     ObjectivesXPPenaltyDeepDives                                OFFSET(get<float>, {0x458, 4, 0, 0})
	SMember(FText)                                     TextMissionCompleted                                        OFFSET(getStruct<T>, {0x460, 24, 0, 0})
	SMember(FText)                                     TextSecondaryObjective                                      OFFSET(getStruct<T>, {0x478, 24, 0, 0})
	SMember(FText)                                     TextSurvivalBonus                                           OFFSET(getStruct<T>, {0x490, 24, 0, 0})
	SMember(FText)                                     TextMined                                                   OFFSET(getStruct<T>, {0x4A8, 24, 0, 0})
	SMember(FText)                                     TextCollected                                               OFFSET(getStruct<T>, {0x4C0, 24, 0, 0})
	SMember(FText)                                     TextBonus                                                   OFFSET(getStruct<T>, {0x4D8, 24, 0, 0})
	DMember(int32_t)                                   BoscoReviveCounter                                          OFFSET(get<int32_t>, {0x4F0, 4, 0, 0})
	CMember(class USpawnEffectsComponent*)             SpawnEffects                                                OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UDynamicMeshScaler*)                 MeshScaler                                                  OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UGemProximityTracker*)               GemProximityTracker                                         OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UAttackerManagerComponent*)          AttackerManager                                             OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UDifficultyManager*)                 DifficultyManagerComponent                                  OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(class USoundMixManagerComponent*)          SoundMixManager                                             OFFSET(get<T>, {0x520, 8, 0, 0})
	CMember(class USeasonReplicatorComponent*)         SeasonReplicatorComponent                                   OFFSET(get<T>, {0x528, 8, 0, 0})
	CMember(class UTeamResourcesComponent*)            TeamResources                                               OFFSET(get<T>, {0x530, 8, 0, 0})
	DMember(bool)                                      IsOnSpaceRig                                                OFFSET(get<bool>, {0x538, 1, 0, 0})
	DMember(bool)                                      PlayerMadeItToDropPod                                       OFFSET(get<bool>, {0x539, 1, 0, 0})
	CMember(TArray<class APlayerCharacter*>)           ActivePlayerCharacters                                      OFFSET(get<T>, {0x540, 16, 0, 0})
	SMember(FReplicatedObjectives)                     Objectives                                                  OFFSET(getStruct<T>, {0x550, 24, 0, 0})
	SMember(FText)                                     CompletedGameEventName                                      OFFSET(getStruct<T>, {0x568, 24, 0, 0})
	SMember(FGeneratedMissionSeed)                     GeneratedMissionSeed                                        OFFSET(getStruct<T>, {0x580, 104, 0, 0})
	DMember(bool)                                      objectivesCompleted                                         OFFSET(get<bool>, {0x5E8, 1, 0, 0})
	SMember(FGameDifficulty)                           CurrentDifficultySetting                                    OFFSET(getStruct<T>, {0x5F0, 24, 0, 0})
	DMember(bool)                                      RememberDifficulty                                          OFFSET(get<bool>, {0x608, 1, 0, 0})
	CMember(class UPlayerProximityTracker*)            ProximityTracker                                            OFFSET(get<T>, {0x610, 8, 0, 0})
	CMember(class UShowroomManager*)                   ShowroomManager                                             OFFSET(get<T>, {0x618, 8, 0, 0})
	CMember(class AGameStats*)                         GameStats                                                   OFFSET(get<T>, {0x620, 8, 0, 0})
	DMember(uint32_t)                                  MissionTime                                                 OFFSET(get<uint32_t>, {0x628, 4, 0, 0})
	DMember(uint32_t)                                  MissionStartTime                                            OFFSET(get<uint32_t>, {0x630, 4, 0, 0})
	DMember(uint32_t)                                  MissionHaz                                                  OFFSET(get<uint32_t>, {0x634, 4, 0, 0})
	DMember(bool)                                      PreventLatejoinCharacterDuplication                         OFFSET(get<bool>, {0x638, 1, 0, 0})
	DMember(bool)                                      StartPressed                                                OFFSET(get<bool>, {0x639, 1, 0, 0})
	DMember(bool)                                      ContinuePressed                                             OFFSET(get<bool>, {0x63A, 1, 0, 0})
	DMember(int32_t)                                   ContinuesCountdown                                          OFFSET(get<int32_t>, {0x63C, 4, 0, 0})
	DMember(bool)                                      AllDwarvesDown                                              OFFSET(get<bool>, {0x640, 1, 0, 0})
	DMember(bool)                                      missionAborted                                              OFFSET(get<bool>, {0x641, 1, 0, 0})
	DMember(int32_t)                                   CountdownRemaining                                          OFFSET(get<int32_t>, {0x644, 4, 0, 0})
	SMember(FText)                                     countdownText                                               OFFSET(getStruct<T>, {0x648, 24, 0, 0})
	SMember(FGlobalMissionSeed)                        HostGlobalSeed                                              OFFSET(getStruct<T>, {0x660, 12, 0, 0})
	DMember(bool)                                      CanCarryOverResources                                       OFFSET(get<bool>, {0x66C, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  SessionLeaderChanged                                        OFFSET(getStruct<T>, {0x688, 16, 0, 0})
	CMember(class APlayerState*)                       CurrentPlayerSessionLeader                                  OFFSET(get<T>, {0x6A0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDGameState.WaitForInitialGenerationDone
	// void WaitForInitialGenerationDone(class AFSDGameState* GameState, FLatentActionInfo LatentInfo);                         // [0x189a750] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.StartCountdown
	// void StartCountdown(int32_t Duration, FText& countdownName);                                                             // [0x189a620] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.SetPreventLatejoinCharacterDuplication
	// void SetPreventLatejoinCharacterDuplication(bool prevent);                                                               // [0x1899dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.SetPlayersHaveReachedDroppod
	// void SetPlayersHaveReachedDroppod(bool newHasPlayerReached);                                                             // [0x1899d40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.SetGeneratedMissionParameters
	// void SetGeneratedMissionParameters(class UGeneratedMission* mission);                                                    // [0x1899cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.SetCurrentDifficulty
	// void SetCurrentDifficulty(class UDifficultySetting* Setting, bool updateSessionSettings);                                // [0x1899be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.SetCompletionData
	// void SetCompletionData(bool objectivesCompleted, int32_t playersInPod);                                                  // [0x18998f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.ReceiveGeneratedMissionReplicated
	// void ReceiveGeneratedMissionReplicated();                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDGameState.PostLocalizedGameMessage
	// void PostLocalizedGameMessage(FText& Msg, TArray<FText>& Arguments);                                                     // [0x1899740] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.PostGameMessage
	// void PostGameMessage(FString Msg);                                                                                       // [0x18996a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.OnRep_StartPressed
	// void OnRep_StartPressed(bool oldStartPressed);                                                                           // [0x1899610] Final|Native|Public  
	// Function /Script/FSD.FSDGameState.OnRep_ObjectivesCompleted
	// void OnRep_ObjectivesCompleted();                                                                                        // [0x18995f0] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_MissionTime
	// void OnRep_MissionTime();                                                                                                // [0x18995b0] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_GeneratedMissionSeed
	// void OnRep_GeneratedMissionSeed();                                                                                       // [0x1899590] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_FSDSessionID
	// void OnRep_FSDSessionID();                                                                                               // [0x1899570] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_CurrentDifficultySetting
	// void OnRep_CurrentDifficultySetting();                                                                                   // [0x1899550] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_CountdownText
	// void OnRep_CountdownText();                                                                                              // [0x1899530] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_CountdownRemaining
	// void OnRep_CountdownRemaining(int32_t prevTime);                                                                         // [0x18994a0] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_ContinuePressed
	// void OnRep_ContinuePressed();                                                                                            // [0x1899480] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_ContinueCountdown
	// void OnRep_ContinueCountdown();                                                                                          // [0x1899460] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_CompletedGameEvent
	// void OnRep_CompletedGameEvent();                                                                                         // [0x1899440] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_BoscoReviveCounter
	// void OnRep_BoscoReviveCounter();                                                                                         // [0x1899420] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.OnRep_AllDwarvesDown
	// void OnRep_AllDwarvesDown();                                                                                             // [0x1899400] Final|Native|Protected 
	// Function /Script/FSD.FSDGameState.MissionEndscreenSeed
	// int32_t MissionEndscreenSeed();                                                                                          // [0x1899340] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameState.IsTutorialMission
	// bool IsTutorialMission();                                                                                                // [0x1899170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.IsCountingDown
	// bool IsCountingDown();                                                                                                   // [0x1899140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.InitObjectives
	// void InitObjectives();                                                                                                   // [0x1899120] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.HostDisbandedTeam
	// void HostDisbandedTeam();                                                                                                // [0x1899100] Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.HasObjectivesReplicated
	// bool HasObjectivesReplicated();                                                                                          // [0x1899090] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.HandleSeamlessTravelEvent
	// void HandleSeamlessTravelEvent();                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDGameState.GetServerPlayerState
	// class AFSDPlayerState* GetServerPlayerState();                                                                           // [0x1898fa0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameState.GetSecondaryObjectives
	// TArray<UObjective*> GetSecondaryObjectives();                                                                            // [0x1898f20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetProceduralSetup
	// class AProceduralSetup* GetProceduralSetup();                                                                            // [0x1898ef0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameState.GetPrimaryObjective
	// class UObjective* GetPrimaryObjective();                                                                                 // [0x1898ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetPreventLatejoinCharacterDuplication
	// bool GetPreventLatejoinCharacterDuplication();                                                                           // [0x1898ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetPlayersHaveReachedDroppod
	// bool GetPlayersHaveReachedDroppod();                                                                                     // [0x1898e80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetPlayableCharacterIDs
	// TArray<UPlayerCharacterID*> GetPlayableCharacterIDs();                                                                   // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Script/FSD.FSDGameState.GetObjectives
	// TArray<UObjective*> GetObjectives();                                                                                     // [0x1898db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetNetworkSortedPlayerArray
	// TArray<AFSDPlayerState*> GetNetworkSortedPlayerArray();                                                                  // [0x1898d30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameState.GetMissionTime
	// int32_t GetMissionTime();                                                                                                // [0x1898cb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetMissionSuccessful
	// bool GetMissionSuccessful();                                                                                             // [0x1898c80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetMissionStartTime
	// int32_t GetMissionStartTime();                                                                                           // [0x1898c60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetMissionRewardCreditSum
	// int32_t GetMissionRewardCreditSum();                                                                                     // [0x1898ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetMissionRewardCredits
	// TArray<FCreditsReward> GetMissionRewardCredits();                                                                        // [0x1898b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetGlobalMissionSeed
	// int32_t GetGlobalMissionSeed();                                                                                          // [0x1898ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetGameStats
	// class AGameStats* GetGameStats();                                                                                        // [0x1898a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetEndscreenResources
	// TMap<UResourceData*, float> GetEndscreenResources();                                                                     // [0x18988e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetDifficultyManager
	// class UDifficultyManager* GetDifficultyManager();                                                                        // [0x1898620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetCurrentGameDifficulty
	// FGameDifficulty GetCurrentGameDifficulty();                                                                              // [0x1898590] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetCurrentDifficultySetting
	// class UDifficultySetting* GetCurrentDifficultySetting();                                                                 // [0x1898570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetCollectedResources
	// TMap<UResourceData*, float> GetCollectedResources();                                                                     // [0x18984a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.GetActiveEventsFromMission
	// TArray<UFSDEvent*> GetActiveEventsFromMission();                                                                         // [0x1898470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.FindObjective
	// class UObjective* FindObjective(class UClass* SubClass);                                                                 // [0x18983d0] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.FSDGameState.ClientNewMessage
	// void ClientNewMessage(FFSDChatMessage Msg);                                                                              // [0x1897e40] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.FSDGameState.Client_StartPressed
	// void Client_StartPressed();                                                                                              // [0x18980d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.Client_NewLocalizedMessage
	// void Client_NewLocalizedMessage(FFSDLocalizedChatMessage Msg);                                                           // [0x1897f70] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.FSDGameState.AllMissionEndResultsReceived
	// bool AllMissionEndResultsReceived();                                                                                     // [0x1897b40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameState.All_SpawnScaledEffectAt
	// void All_SpawnScaledEffectAt(FScaledEffect Effect, FVector_NetQuantize Location);                                        // [0x1897d40] Net|Native|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.All_SpawnScaledEffectAndCueAt
	// void All_SpawnScaledEffectAndCueAt(FScaledEffect Effect, class USoundCue* Audio, FVector_NetQuantize Location);          // [0x1897bf0] Net|Native|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameState.All_ServerQuit
	// void All_ServerQuit();                                                                                                   // [0x1897bd0] Net|NetReliableNative|Event|NetMulticast|Public 
};

/// Struct /Script/FSD.ModdingUISettings
/// Size: 0x0060 (0x000000 - 0x000060)
class FModdingUISettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(char)                                      SortField                                                   OFFSET(get<char>, {0x0, 1, 0, 0})
	DMember(bool)                                      SortAscending                                               OFFSET(get<bool>, {0x1, 1, 0, 0})
	CMember(TSet<char>)                                ServerFilters                                               OFFSET(get<T>, {0x8, 80, 0, 0})
	DMember(bool)                                      bShowSandboxLabel                                           OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Struct /Script/FSD.ColorVisionDeficiencySettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FColorVisionDeficiencySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(EColorVisionDeficiency)                    Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(float)                                     Severity                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.HUDElementData
/// Size: 0x0008 (0x000000 - 0x000008)
class FHUDElementData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(EHUDVisibilityMode)                        Mode                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   Version                                                     OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.HUDElements
/// Size: 0x0080 (0x000000 - 0x000080)
class FHUDElements : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FHUDElementData)                           OnScreenHelp                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FHUDElementData)                           EnemyHealth                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FHUDElementData)                           RadarDepth                                                  OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FHUDElementData)                           PlayerHealthShield                                          OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FHUDElementData)                           PlayerNameClassIcon                                         OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	SMember(FHUDElementData)                           PlayerItems                                                 OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	SMember(FHUDElementData)                           PlayerResources                                             OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FHUDElementData)                           WeaponInfo                                                  OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FHUDElementData)                           Grenades                                                    OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FHUDElementData)                           FlashLight                                                  OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FHUDElementData)                           Flares                                                      OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FHUDElementData)                           Crosshair                                                   OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FHUDElementData)                           Objectives                                                  OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FHUDElementData)                           TeamDisplay                                                 OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FHUDElementData)                           SentryGunDisplay                                            OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FHUDElementData)                           VersionNumber                                               OFFSET(getStruct<T>, {0x78, 8, 0, 0})
};

/// Struct /Script/FSD.CharacterOptions
/// Size: 0x0004 (0x000000 - 0x000004)
class FCharacterOptions : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(bool)                                      GrapplingHookAutoSwitch                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      ZiplineGunAutoSwitch                                        OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      HoldToBreakImmobilization                                   OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(bool)                                      HoldToFire                                                  OFFSET(get<bool>, {0x3, 1, 0, 0})
};

/// Struct /Script/FSD.CustomKeyBinding
/// Size: 0x0028 (0x000000 - 0x000028)
class FCustomKeyBinding : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     ActionName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FKey)                                      Key                                                         OFFSET(getStruct<T>, {0x10, 24, 0, 0})
};

/// Struct /Script/FSD.ControllerSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FControllerSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     AimInnerDeadZone                                            OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     AimSensitivity                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     AimOuterAcceleration                                        OFFSET(get<float>, {0x8, 4, 0, 0})
	CMember(ETurn180Mode)                              Turn180Mode                                                 OFFSET(get<T>, {0xC, 1, 0, 0})
	DMember(bool)                                      bPreviousItemEnabled                                        OFFSET(get<bool>, {0xD, 1, 0, 0})
	DMember(bool)                                      bChatEnabled                                                OFFSET(get<bool>, {0xE, 1, 0, 0})
};

/// Class /Script/FSD.FSDGameUserSettings
/// Size: 0x0470 (0x000120 - 0x000590)
class UFSDGameUserSettings : public UGameUserSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	SMember(FMulticastInlineDelegate)                  OnSettingsChanged                                           OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUseHoldToRunChanged                                       OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFOVChanged                                                OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLanguageChanged                                           OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGameServerNameChanged                                     OFFSET(getStruct<T>, {0x168, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFontSizeChanged                                           OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnJukeboxStreamerModeChanged                                OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	DMember(bool)                                      bJukeboxStreamerMode                                        OFFSET(get<bool>, {0x198, 1, 0, 0})
	DMember(bool)                                      bGraphicSettingsChanged                                     OFFSET(get<bool>, {0x199, 1, 0, 0})
	SMember(FString)                                   CurrentUserSetSaveSlotName                                  OFFSET(getStruct<T>, {0x1A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCanShowBloodChanged                                       OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	CMember(TMap<FName, bool>)                         NamedBoolSettings                                           OFFSET(get<T>, {0x1C0, 80, 0, 0})
	SMember(FModdingUISettings)                        ModdingUISettings                                           OFFSET(getStruct<T>, {0x210, 96, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnColorVisionDeficiencySettingsChanged                      OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	SMember(FColorVisionDeficiencySettings)            ColorVisionDeficiency                                       OFFSET(getStruct<T>, {0x280, 8, 0, 0})
	DMember(int32_t)                                   ServerSearchRegion                                          OFFSET(get<int32_t>, {0x288, 4, 0, 0})
	DMember(bool)                                      ServerSearchPasswordRequired                                OFFSET(get<bool>, {0x28C, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnModdingSettingsChanged                                    OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	DMember(float)                                     volumeCharacterVoice                                        OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     volumeMissionControl                                        OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     volumeMaster                                                OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(float)                                     volumeSFX                                                   OFFSET(get<float>, {0x2AC, 4, 0, 0})
	DMember(float)                                     volumeMusic                                                 OFFSET(get<float>, {0x2B0, 4, 0, 0})
	SMember(FString)                                   CurrentAudioOutputDeviceId                                  OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	DMember(bool)                                      UseDefaultAudioOutputDevice                                 OFFSET(get<bool>, {0x300, 1, 0, 0})
	DMember(float)                                     Sharpening                                                  OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(int32_t)                                   AntiAliasingType                                            OFFSET(get<int32_t>, {0x308, 4, 0, 0})
	DMember(bool)                                      TemporalAAUpsamplingEnabled                                 OFFSET(get<bool>, {0x30C, 1, 0, 0})
	DMember(float)                                     volumeVoice                                                 OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(int32_t)                                   UpscalingType                                               OFFSET(get<int32_t>, {0x314, 4, 0, 0})
	DMember(int32_t)                                   AmdFsrMode                                                  OFFSET(get<int32_t>, {0x318, 4, 0, 0})
	DMember(int32_t)                                   AmdFsr2Mode                                                 OFFSET(get<int32_t>, {0x31C, 4, 0, 0})
	DMember(float)                                     AmdFsrSharpness                                             OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     AmdFsr2Sharpness                                            OFFSET(get<float>, {0x324, 4, 0, 0})
	CMember(UDLSSMode)                                 NvidiaDlssMode                                              OFFSET(get<T>, {0x328, 1, 0, 0})
	DMember(float)                                     NvidiaDlssSharpness                                         OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     FSDResolutionScale                                          OFFSET(get<float>, {0x330, 4, 0, 0})
	CMember(ENVidiaReflexMode)                         ReflexMode                                                  OFFSET(get<T>, {0x334, 1, 0, 0})
	DMember(float)                                     WeaponSpwayScale                                            OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(int32_t)                                   RagdollQuality                                              OFFSET(get<int32_t>, {0x33C, 4, 0, 0})
	CMember(UFSDStreamlineDLSSGMode)                   FrameGenerationMode                                         OFFSET(get<T>, {0x340, 1, 0, 0})
	CMember(class USoundClass*)                        soundClassCharacterVoices                                   OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USoundClass*)                        soundClassMissionControl                                    OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class USoundClass*)                        soundClassMaster                                            OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class USoundClass*)                        soundClassSFX                                               OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class USoundClass*)                        soundClassUI                                                OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class USoundClass*)                        soundClassMusic                                             OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class USoundClass*)                        soundClassVoice                                             OFFSET(get<T>, {0x378, 8, 0, 0})
	DMember(int32_t)                                   ChatFontSize                                                OFFSET(get<int32_t>, {0x380, 4, 0, 0})
	DMember(bool)                                      bUseVoiceChat                                               OFFSET(get<bool>, {0x384, 1, 0, 0})
	DMember(bool)                                      bUsePushToTalk                                              OFFSET(get<bool>, {0x385, 1, 0, 0})
	SMember(FString)                                   LocalGameServerName                                         OFFSET(getStruct<T>, {0x388, 16, 0, 0})
	SMember(FString)                                   LocalGameServerNameFiltered                                 OFFSET(getStruct<T>, {0x398, 16, 0, 0})
	DMember(bool)                                      AppearOffline                                               OFFSET(get<bool>, {0x3A8, 1, 0, 0})
	DMember(bool)                                      AutoRefreshServerlist                                       OFFSET(get<bool>, {0x3A9, 1, 0, 0})
	DMember(float)                                     MouseXSensitivity                                           OFFSET(get<float>, {0x3AC, 4, 0, 0})
	DMember(float)                                     MouseYSensitivity                                           OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(bool)                                      UseSeperateSensetivity                                      OFFSET(get<bool>, {0x3B4, 1, 0, 0})
	DMember(bool)                                      InvertMouse                                                 OFFSET(get<bool>, {0x3B5, 1, 0, 0})
	DMember(bool)                                      InvertScroolWheel                                           OFFSET(get<bool>, {0x3B6, 1, 0, 0})
	DMember(bool)                                      UseHoldToRun                                                OFFSET(get<bool>, {0x3B7, 1, 0, 0})
	DMember(bool)                                      UseToggleLaserpointer                                       OFFSET(get<bool>, {0x3B8, 1, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     HeadbobbingScale                                            OFFSET(get<float>, {0x3C0, 4, 0, 0})
	DMember(float)                                     CameraShakeScale                                            OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     ChatFadeTime                                                OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(bool)                                      UseStreamerProgram                                          OFFSET(get<bool>, {0x3CC, 1, 0, 0})
	DMember(bool)                                      SoundOnChatMessage                                          OFFSET(get<bool>, {0x3CD, 1, 0, 0})
	DMember(bool)                                      PhotosensitiveMode                                          OFFSET(get<bool>, {0x3CE, 1, 0, 0})
	DMember(bool)                                      TinnitusProtection                                          OFFSET(get<bool>, {0x3CF, 1, 0, 0})
	DMember(float)                                     OverlayIntensityScale                                       OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(bool)                                      ShowUIAnimations                                            OFFSET(get<bool>, {0x3D4, 1, 0, 0})
	DMember(bool)                                      UseProfanityFilter                                          OFFSET(get<bool>, {0x3D5, 1, 0, 0})
	DMember(float)                                     ForceFeedbackScale                                          OFFSET(get<float>, {0x3D8, 4, 0, 0})
	DMember(bool)                                      InvertFlightControls                                        OFFSET(get<bool>, {0x3DC, 1, 0, 0})
	DMember(bool)                                      EnableDx12ByDefault                                         OFFSET(get<bool>, {0x3DD, 1, 0, 0})
	DMember(float)                                     HDRColorGamma                                               OFFSET(get<float>, {0x3E0, 4, 0, 0})
	CMember(EConsoleGraphicsMode)                      ConsoleGraphicsMode                                         OFFSET(get<T>, {0x3E4, 1, 0, 0})
	DMember(float)                                     StaticResoultionScale                                       OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(bool)                                      UseManuelGrahpicsMode                                       OFFSET(get<bool>, {0x3EC, 1, 0, 0})
	SMember(FHUDElements)                              HUDElements                                                 OFFSET(getStruct<T>, {0x3F0, 128, 0, 0})
	SMember(FCharacterOptions)                         CharacterOptions                                            OFFSET(getStruct<T>, {0x470, 4, 0, 0})
	DMember(float)                                     DownedTurnDirection_Controller                              OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     DownedTurnDirection_Mouse                                   OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     UIDPIScale                                                  OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(bool)                                      EnableCustomUIScale                                         OFFSET(get<bool>, {0x484, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInputSourceChanged                                        OFFSET(getStruct<T>, {0x488, 16, 0, 0})
	DMember(bool)                                      CheckCursorOutOfBounds                                      OFFSET(get<bool>, {0x498, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEnableTutorialHintsChanged                                OFFSET(getStruct<T>, {0x4A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowFPSChanged                                            OFFSET(getStruct<T>, {0x4B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowNetInfoLevelChanged                                   OFFSET(getStruct<T>, {0x4C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDx12Enabled                                               OFFSET(getStruct<T>, {0x4D0, 16, 0, 0})
	SMember(FIntPoint)                                 ResolutionToBeApplied                                       OFFSET(getStruct<T>, {0x4E0, 8, 0, 0})
	DMember(bool)                                      VSyncToBeApplied                                            OFFSET(get<bool>, {0x4E8, 1, 0, 0})
	DMember(bool)                                      Dx12ToBeApplied                                             OFFSET(get<bool>, {0x4E9, 1, 0, 0})
	CMember(TEnumAsByte<EWindowMode>)                  InFullscreenModeToBeApplied                                 OFFSET(get<T>, {0x4EA, 1, 0, 0})
	DMember(bool)                                      InFullscreenModeToBeAppliedValid                            OFFSET(get<bool>, {0x4EB, 1, 0, 0})
	DMember(bool)                                      VSyncToBeAppliedValid                                       OFFSET(get<bool>, {0x4EC, 1, 0, 0})
	DMember(bool)                                      Dx12ToBeAppliedValid                                        OFFSET(get<bool>, {0x4ED, 1, 0, 0})
	DMember(bool)                                      ResolutionToBeAppliedValid                                  OFFSET(get<bool>, {0x4EE, 1, 0, 0})
	DMember(bool)                                      EscMenuActive                                               OFFSET(get<bool>, {0x4EF, 1, 0, 0})
	DMember(bool)                                      bShowUpgradeExtraDetails                                    OFFSET(get<bool>, {0x4F0, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowUpgradeExtraDetailsChanged                            OFFSET(getStruct<T>, {0x4F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCustomKeyBindingsChanged                                  OFFSET(getStruct<T>, {0x508, 16, 0, 0})
	DMember(int32_t)                                   LastNiagaraShaderVerions                                    OFFSET(get<int32_t>, {0x518, 4, 0, 0})
	DMember(bool)                                      HasKeyboardBeenConnected                                    OFFSET(get<bool>, {0x51C, 1, 0, 0})
	CMember(EFSDInputSource)                           CurrentInputSource                                          OFFSET(get<T>, {0x51D, 1, 0, 0})
	CMember(EFSDInputSource)                           RequestedInputSource                                        OFFSET(get<T>, {0x51E, 1, 0, 0})
	CMember(TArray<FCustomKeyBinding>)                 CustomKeyBindings                                           OFFSET(get<T>, {0x520, 16, 0, 0})
	CMember(TArray<FCustomKeyBinding>)                 CustomControllerBindings                                    OFFSET(get<T>, {0x530, 16, 0, 0})
	DMember(bool)                                      SwapControllerThumbsticks                                   OFFSET(get<bool>, {0x540, 1, 0, 0})
	DMember(bool)                                      bTutorialHintsEnabled                                       OFFSET(get<bool>, {0x541, 1, 0, 0})
	DMember(bool)                                      bShowSubtitles                                              OFFSET(get<bool>, {0x542, 1, 0, 0})
	DMember(bool)                                      bShowFPS                                                    OFFSET(get<bool>, {0x543, 1, 0, 0})
	DMember(int32_t)                                   ShowNetInfoLevel                                            OFFSET(get<int32_t>, {0x544, 4, 0, 0})
	DMember(bool)                                      bCanShowBlood                                               OFFSET(get<bool>, {0x548, 1, 0, 0})
	DMember(bool)                                      PreventLatejoinCharacterDuplication                         OFFSET(get<bool>, {0x549, 1, 0, 0})
	DMember(bool)                                      TranslatorDebugModeEnabled                                  OFFSET(get<bool>, {0x54A, 1, 0, 0})
	SMember(FString)                                   PreviousCulture                                             OFFSET(getStruct<T>, {0x550, 16, 0, 0})
	SMember(FControllerSettings)                       ControllerSettings                                          OFFSET(getStruct<T>, {0x560, 16, 0, 0})
	CMember(TArray<FGuid>)                             SelectedDifficultyLevels                                    OFFSET(get<T>, {0x570, 16, 0, 0})
	CMember(TArray<FGuid>)                             DifficultyLevelsAddedByDefault                              OFFSET(get<T>, {0x580, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDGameUserSettings.UpdateVolumeSettings
	// void UpdateVolumeSettings(class USoundClass* CharacterVoices, class USoundClass* MissionControl, class USoundClass* Master, class USoundClass* Music, class USoundClass* SFX, class USoundClass* UI, class USoundClass* Voice); // [0x18a24d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.UpdateForceFeedbackScaleOnController
	// void UpdateForceFeedbackScaleOnController(class APlayerController* Controller);                                          // [0x18a2440] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.ToggleTranslatorDebugMode
	// bool ToggleTranslatorDebugMode();                                                                                        // [0x18a2410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.ToggleShowUpgradeExtraDetails
	// bool ToggleShowUpgradeExtraDetails();                                                                                    // [0x18a23b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.ToggleModdingServerFilter
	// void ToggleModdingServerFilter(char ServerFilter, bool enable);                                                          // [0x18a2220] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetZiplineGunAutoSwitch
	// void SetZiplineGunAutoSwitch(bool shouldAutoSwitch);                                                                     // [0x18a2190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetWeaponSwayScale
	// void SetWeaponSwayScale(float Scale);                                                                                    // [0x18a2110] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetVSyncEnabledToBeApplied
	// void SetVSyncEnabledToBeApplied(bool bEnable);                                                                           // [0x18a1f20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetVolume
	// void SetVolume(EVolumeType volumeType, float Volume);                                                                    // [0x18a2040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetVoiceChatEnabled
	// void SetVoiceChatEnabled(bool bEnable);                                                                                  // [0x18a1fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseToggleTerrainScanner
	// void SetUseToggleTerrainScanner(bool useToggleTerrainScanner);                                                           // [0x18a1e90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseToggleLaserpointer
	// void SetUseToggleLaserpointer(bool UseToggleLaserpointer);                                                               // [0x18a1e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseStreamerProgram
	// void SetUseStreamerProgram(bool UseStreamerProgram);                                                                     // [0x18a1d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseSeparateSensitivity
	// void SetUseSeparateSensitivity(bool newSetting);                                                                         // [0x18a1ce0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseProfanityFilter
	// void SetUseProfanityFilter(bool shouldUse);                                                                              // [0x18a1c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseManualGraphicsMode
	// void SetUseManualGraphicsMode(bool bEnabled);                                                                            // [0x17d5320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseHoldToRun
	// void SetUseHoldToRun(bool UseHoldToRun);                                                                                 // [0x18a1bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseDefaultAudioOutputDevice
	// void SetUseDefaultAudioOutputDevice(class UObject* WorldContextObject, bool UseDefault);                                 // [0x18a1af0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUseCustomUIScale
	// void SetUseCustomUIScale(bool UseCustomScale);                                                                           // [0x18a1a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUpscalingType
	// void SetUpscalingType(int32_t Type);                                                                                     // [0x18a19d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetUIDPIScale
	// void SetUIDPIScale(float uiscale);                                                                                       // [0x18a1950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetTutorialHintsEnabled
	// void SetTutorialHintsEnabled(bool Enabled);                                                                              // [0x18a18c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetTurn180Mode
	// void SetTurn180Mode(ETurn180Mode InMode);                                                                                // [0x18a1840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetTinnitusProtection
	// void SetTinnitusProtection(bool enable);                                                                                 // [0x18a17b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetTemporalAAUpscalingEnabled
	// void SetTemporalAAUpscalingEnabled(bool bEnable);                                                                        // [0x18a1720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetSwapControllerThumbsticks
	// void SetSwapControllerThumbsticks(bool InSwapThumbsticks);                                                               // [0x18a1690] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetSteamSearchRegion
	// void SetSteamSearchRegion(ESteamSearchRegion InRegion);                                                                  // [0x18a1610] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetStaticResolutionScale
	// void SetStaticResolutionScale(float percentage);                                                                         // [0x18438f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetShowUIAnimations
	// void SetShowUIAnimations(bool shouldShow);                                                                               // [0x18a1580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetShowSubtitles
	// void SetShowSubtitles(bool Show);                                                                                        // [0x18a14f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetShowSandboxLabel
	// void SetShowSandboxLabel(bool InShowLabel);                                                                              // [0x18a1460] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetShowNetInfoLevel
	// void SetShowNetInfoLevel(int32_t Level);                                                                                 // [0x18a13d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetShowFPS
	// void SetShowFPS(bool Visible);                                                                                           // [0x18a1340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetSharpening
	// void SetSharpening(float Sharpening);                                                                                    // [0x18a12c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetServerSearchPasswordRequired
	// void SetServerSearchPasswordRequired(bool InPasswordRequired);                                                           // [0x18a1230] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetScreenResolutionToBeApplied
	// void SetScreenResolutionToBeApplied(FIntPoint Resolution);                                                               // [0x18a11b0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetReflexMode
	// void SetReflexMode(ENVidiaReflexMode ReflexMode);                                                                        // [0x18a1130] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetRagdollQuality
	// void SetRagdollQuality(int32_t Value);                                                                                   // [0x18a10a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetPushToTalk
	// void SetPushToTalk(bool bEnable);                                                                                        // [0x18a1010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetPreviousItemEnabledOnController
	// void SetPreviousItemEnabledOnController(bool InEnabled);                                                                 // [0x18a0f80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetPreventLatejoinCharacterDuplication
	// void SetPreventLatejoinCharacterDuplication(bool prevent);                                                               // [0x18a0ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetPlaySoundOnChatMessage
	// void SetPlaySoundOnChatMessage(bool playSoundOnMessage);                                                                 // [0x18a0e60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetPhotosensitiveMode
	// void SetPhotosensitiveMode(bool modeOn);                                                                                 // [0x18a0dd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetOverlayIntensityScale
	// void SetOverlayIntensityScale(float Scale);                                                                              // [0x18a0d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetNvidiaDlssSharpness
	// void SetNvidiaDlssSharpness(float Sharpness);                                                                            // [0x18a0cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetNvidiaDlssMode
	// void SetNvidiaDlssMode(UDLSSMode Mode);                                                                                  // [0x18a0c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetMouseYSensitivity
	// void SetMouseYSensitivity(float newSensitivity);                                                                         // [0x18a0bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetMouseXSensitivity
	// void SetMouseXSensitivity(float newSensitivity);                                                                         // [0x18a0b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetModdingSortBy
	// void SetModdingSortBy(char SortField, bool SortAscending);                                                               // [0x18a0a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetLensFlaresEnabled
	// void SetLensFlaresEnabled(bool Enabled);                                                                                 // [0x18a09f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetJukeboxStreamerMode
	// void SetJukeboxStreamerMode(bool InStreamerMode);                                                                        // [0x18a0950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetInvertMouseWheel
	// void SetInvertMouseWheel(bool invertMouseWheel);                                                                         // [0x18a08c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetInvertMouse
	// void SetInvertMouse(bool InvertMouse);                                                                                   // [0x18a0830] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetInvertFlightControls
	// void SetInvertFlightControls(bool Invert);                                                                               // [0x18a07a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetInputSource
	// void SetInputSource(EFSDInputSource NewSource);                                                                          // [0x18a0720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetHoldToFire
	// void SetHoldToFire(bool HoldToFire);                                                                                     // [0x18a0690] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetHoldToBreakImmobilization
	// void SetHoldToBreakImmobilization(bool holdToBreak);                                                                     // [0x18a0600] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetHeadBobbingScale
	// void SetHeadBobbingScale(float HeadbobbingScale);                                                                        // [0x18a0580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetHDRColorGamma
	// void SetHDRColorGamma(float Gamma);                                                                                      // [0x18a0500] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetGrapplingHookAutoSwitch
	// void SetGrapplingHookAutoSwitch(bool shouldAutoSwitch);                                                                  // [0x18a0470] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetGamma
	// void SetGamma(float gamme);                                                                                              // [0x18a03f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetGameServerName
	// void SetGameServerName(int32_t localUserNum, FString Name);                                                              // [0x18a0310] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetFullscreenModeToBeApplied
	// void SetFullscreenModeToBeApplied(TEnumAsByte<EWindowMode> InFullscreenMode);                                            // [0x18a0290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetFrameGenerationMode
	// void SetFrameGenerationMode(UFSDStreamlineDLSSGMode NewMode);                                                            // [0x18a0210] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetFOV
	// void SetFOV(float FOV);                                                                                                  // [0x18a0110] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetForceFeedbackScale
	// void SetForceFeedbackScale(float Scale);                                                                                 // [0x18a0190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetDx12EnabledToBeApplied
	// void SetDx12EnabledToBeApplied(bool bEnable);                                                                            // [0x18a0080] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetDownCameraTurnDirection
	// void SetDownCameraTurnDirection(EFSDInputSource InputSource, float InDirection);                                         // [0x189ffb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetDisableMasterEQ
	// void SetDisableMasterEQ(bool B);                                                                                         // [0x189ff20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetDifficultySelected
	// void SetDifficultySelected(class UDifficultySetting* Difficulty, bool IsSelected);                                       // [0x189fe50] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetDebugLocalizerMode
	// void SetDebugLocalizerMode(bool bEnable);                                                                                // [0x189fdc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetCurrentUserSaveSlotName
	// void SetCurrentUserSaveSlotName(class UObject* WorldContextObject, FString saveSlotName, ESaveSlotChangeProcedure changeProcedure); // [0x189fc60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetConsoleGraphicsMode
	// void SetConsoleGraphicsMode(EConsoleGraphicsMode Mode);                                                                  // [0x189fbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetColorVisionDeficiency
	// void SetColorVisionDeficiency(EColorVisionDeficiency InType, float InSeverity);                                          // [0x189fb10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetCheckForOutOfBoundsEnabled
	// void SetCheckForOutOfBoundsEnabled(bool Enabled);                                                                        // [0x189fa80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetChatFontSize
	// void SetChatFontSize(int32_t inFontSize);                                                                                // [0x189f9f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetChatFadeTime
	// void SetChatFadeTime(float FadeTime);                                                                                    // [0x189f970] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetChatEnabledOnController
	// void SetChatEnabledOnController(bool InEnabled);                                                                         // [0x189f8e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetCanShowBlood
	// void SetCanShowBlood(bool bloodAllowed);                                                                                 // [0x189f850] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetCameraShakeScale
	// void SetCameraShakeScale(float CameraShakeScale);                                                                        // [0x189f7d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetBloomEnabled
	// void SetBloomEnabled(bool Enabled);                                                                                      // [0x189f740] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAutoRefreshServerlist
	// void SetAutoRefreshServerlist(bool Value);                                                                               // [0x12c87e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAudioOutputDevice
	// bool SetAudioOutputDevice(class UObject* WorldContextObject, FString DeviceID);                                          // [0x189f610] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAudioInputDevice
	// bool SetAudioInputDevice(FString DeviceName);                                                                            // [0x189f510] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAppearOffline
	// void SetAppearOffline(bool bEnable);                                                                                     // [0x189f480] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAntiAliasingType
	// void SetAntiAliasingType(int32_t AntiAliasingType);                                                                      // [0x189f3f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAMDFSRSharpness
	// void SetAMDFSRSharpness(float Sharpness);                                                                                // [0x189f1f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAMDFSRMode
	// void SetAMDFSRMode(int32_t Mode);                                                                                        // [0x189f160] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAMDFSR2Sharpness
	// void SetAMDFSR2Sharpness(float Sharpness);                                                                               // [0x189f0e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAMDFSR2Mode
	// void SetAMDFSR2Mode(int32_t Mode);                                                                                       // [0x189f050] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAimSensitivity
	// void SetAimSensitivity(float NewValue);                                                                                  // [0x189f370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAimOuterAcceleration
	// void SetAimOuterAcceleration(float NewValue);                                                                            // [0x189f2f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.SetAimDeadZone
	// void SetAimDeadZone(float NewValue);                                                                                     // [0x189f270] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.ResetGraphicsChanges
	// void ResetGraphicsChanges();                                                                                             // [0x189f030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.ResetControllerSettings
	// void ResetControllerSettings();                                                                                          // [0x189f010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.PostInitFSDUserSettings
	// void PostInitFSDUserSettings(class UObject* WorldContextObject);                                                         // [0x189ef80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.IsVSyncSupported
	// bool IsVSyncSupported();                                                                                                 // [0x189ef20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.IsVoiceChatEnabled
	// bool IsVoiceChatEnabled();                                                                                               // [0x189ef50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.IsUpscalingTypeSupported
	// bool IsUpscalingTypeSupported(int32_t Type);                                                                             // [0x189ee80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.IsNvReflexAvailable
	// bool IsNvReflexAvailable();                                                                                              // [0x189ee50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.IsManaulGraphicsModeAvailable
	// bool IsManaulGraphicsModeAvailable();                                                                                    // [0xbbbc60] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.IsFrameGenerationSupported
	// bool IsFrameGenerationSupported();                                                                                       // [0x189ee20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.IsDx12Enabled
	// bool IsDx12Enabled();                                                                                                    // [0x189edf0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.IsDebugLocalizerModeEnabled
	// bool IsDebugLocalizerModeEnabled();                                                                                      // [0x189edc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.IsCurrentInputSource
	// bool IsCurrentInputSource(EFSDInputSource InputSource);                                                                  // [0x189ed40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.InitializeDifficultySelection
	// void InitializeDifficultySelection(class UObject* WorldContext, TArray<UDifficultySetting*> StartSelection);             // [0x189ec10] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.HasAudioOutputDeviceChanged
	// bool HasAudioOutputDeviceChanged(FString& AudioDeviceChangedTo);                                                         // [0x189eb50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetZiplineGunAutoSwitch
	// bool GetZiplineGunAutoSwitch();                                                                                          // [0x189eb20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetWeaponSwayScale
	// float GetWeaponSwayScale();                                                                                              // [0x189eb00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetVSyncEnabledToBeApplied
	// bool GetVSyncEnabledToBeApplied();                                                                                       // [0x189ea40] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetVolume
	// float GetVolume(EVolumeType volumeType);                                                                                 // [0x189ea70] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetUseToggleTerrainScanner
	// bool GetUseToggleTerrainScanner();                                                                                       // [0x189ea10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetUseToggleLaserpointer
	// bool GetUseToggleLaserpointer();                                                                                         // [0x189e9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetUseStreamerProgram
	// bool GetUseStreamerProgram();                                                                                            // [0x189e9d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetUseSeparateSensitivity
	// bool GetUseSeparateSensitivity();                                                                                        // [0x189e9b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetUseProfanityFilter
	// bool GetUseProfanityFilter();                                                                                            // [0x189e990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetUseManualGraphicsMode
	// bool GetUseManualGraphicsMode();                                                                                         // [0x189e970] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetUseHoldToRun
	// bool GetUseHoldToRun();                                                                                                  // [0x189e950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetUseDefaultAudioOutputDevice
	// bool GetUseDefaultAudioOutputDevice();                                                                                   // [0x189e920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetUseCustomUIScale
	// bool GetUseCustomUIScale();                                                                                              // [0x189e900] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetUpscalingType
	// int32_t GetUpscalingType();                                                                                              // [0x189e8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetUIDPIScale
	// float GetUIDPIScale();                                                                                                   // [0x189e8b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetTutorialHintsEnabled
	// bool GetTutorialHintsEnabled();                                                                                          // [0x189e890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetTurn180Mode
	// ETurn180Mode GetTurn180Mode();                                                                                           // [0x181d320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetTinnitusProtection
	// bool GetTinnitusProtection();                                                                                            // [0x189e870] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetTemporalAAUpscalingEnabled
	// bool GetTemporalAAUpscalingEnabled();                                                                                    // [0x189e840] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetSteamSearchRegion
	// ESteamSearchRegion GetSteamSearchRegion();                                                                               // [0x189e810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetStaticResolutionScale
	// float GetStaticResolutionScale();                                                                                        // [0x189e7f0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetShowUIAnimations
	// bool GetShowUIAnimations();                                                                                              // [0x189e7d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetShowSubtitles
	// bool GetShowSubtitles();                                                                                                 // [0x189e7b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetShowSandboxLabel
	// bool GetShowSandboxLabel();                                                                                              // [0x189e790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetShowNetInfoLevel
	// int32_t GetShowNetInfoLevel();                                                                                           // [0x189e770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetShowFPS
	// bool GetShowFPS();                                                                                                       // [0x189e750] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetSharpening
	// float GetSharpening();                                                                                                   // [0x189e720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetScreenResolutionToBeApplied
	// FIntPoint GetScreenResolutionToBeApplied();                                                                              // [0x189e6e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetReflexMode
	// ENVidiaReflexMode GetReflexMode();                                                                                       // [0x189e6b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetRagdollQualityDurationFactor
	// float GetRagdollQualityDurationFactor();                                                                                 // [0x189e680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetRagdollQuality
	// int32_t GetRagdollQuality();                                                                                             // [0x189e650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetPushToTalk
	// bool GetPushToTalk();                                                                                                    // [0x189e620] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetPreviousItemEnabledOnController
	// bool GetPreviousItemEnabledOnController();                                                                               // [0x189e600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetPreventLatejoinCharacterDuplication
	// bool GetPreventLatejoinCharacterDuplication();                                                                           // [0x189e5e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetPlaySoundOnChatMessage
	// bool GetPlaySoundOnChatMessage();                                                                                        // [0x189e5c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetPhotosensitiveMode
	// bool GetPhotosensitiveMode();                                                                                            // [0x189e5a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetOverlayIntensityScale
	// float GetOverlayIntensityScale();                                                                                        // [0x189e580] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetNvidiaDlssSharpness
	// float GetNvidiaDlssSharpness();                                                                                          // [0x189e550] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetNvidiaDlssMode
	// UDLSSMode GetNvidiaDlssMode();                                                                                           // [0x189e520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetMouseYSensitivity
	// float GetMouseYSensitivity();                                                                                            // [0x189e4f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetMouseXSensitivity
	// float GetMouseXSensitivity();                                                                                            // [0x189e4c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetModdingServerFilterEnabled
	// bool GetModdingServerFilterEnabled(char ServerFilter);                                                                   // [0x189e3d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetLensFlaresEnabled
	// bool GetLensFlaresEnabled();                                                                                             // [0x189e3a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetIsDifficultySelected
	// bool GetIsDifficultySelected(class UDifficultySetting* Difficulty);                                                      // [0x189e300] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetInvertMouseWheel
	// bool GetInvertMouseWheel();                                                                                              // [0x189e2e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetInvertMouse
	// bool GetInvertMouse();                                                                                                   // [0x189e2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetInvertFlightControls
	// bool GetInvertFlightControls();                                                                                          // [0x189e2a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetInputSource
	// EFSDInputSource GetInputSource();                                                                                        // [0x189e270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetHoldToFire
	// bool GetHoldToFire();                                                                                                    // [0x189e240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetHoldToBreakImmobilization
	// bool GetHoldToBreakImmobilization();                                                                                     // [0x189e210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetHeadBobbingScale
	// float GetHeadBobbingScale();                                                                                             // [0x189e1f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetHDRColorGamma
	// float GetHDRColorGamma();                                                                                                // [0x189e1c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetGrapplingHookAutoSwitch
	// bool GetGrapplingHookAutoSwitch();                                                                                       // [0x189e190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetGamma
	// float GetGamma();                                                                                                        // [0x189e160] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetFullscreenModeToBeApplied
	// TEnumAsByte<EWindowMode> GetFullscreenModeToBeApplied();                                                                 // [0x189e130] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetFSDGameUserSettings
	// class UFSDGameUserSettings* GetFSDGameUserSettings();                                                                    // [0x189e0b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetFrameGenerationMode
	// UFSDStreamlineDLSSGMode GetFrameGenerationMode();                                                                        // [0x189e100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetFOV
	// float GetFOV();                                                                                                          // [0x189e080] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetForceFeedbackScale
	// float GetForceFeedbackScale();                                                                                           // [0x189e0e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetDx12EnabledToBeApplied
	// bool GetDx12EnabledToBeApplied();                                                                                        // [0x189e050] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetDownCameraTurnDirection
	// float GetDownCameraTurnDirection(EFSDInputSource InputSource);                                                           // [0x189dfc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetDisableMasterEQ
	// bool GetDisableMasterEQ();                                                                                               // [0x189df90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetCurrentUserSaveSlotName
	// FString GetCurrentUserSaveSlotName();                                                                                    // [0x189df10] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetCurrentInputSource
	// EFSDInputSource GetCurrentInputSource();                                                                                 // [0x189dee0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetCurrentAudioOutputDevice
	// bool GetCurrentAudioOutputDevice(class UObject* WorldContextObject, FString& AudioDevice);                               // [0x189dde0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetCurrentAudioInputDeviceName
	// FString GetCurrentAudioInputDeviceName();                                                                                // [0x189dd60] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetCurrentAudioInputDeviceAmplitude
	// float GetCurrentAudioInputDeviceAmplitude(int32_t localUserId);                                                          // [0x189dcc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetConsoleGraphicsMode
	// EConsoleGraphicsMode GetConsoleGraphicsMode();                                                                           // [0x189dc90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetCheckForOutOfBounds
	// bool GetCheckForOutOfBounds();                                                                                           // [0x189dc70] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetChatFontSize
	// int32_t GetChatFontSize();                                                                                               // [0x189dc50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetChatFadeTime
	// float GetChatFadeTime();                                                                                                 // [0x189dc30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetChatEnabledOnController
	// bool GetChatEnabledOnController();                                                                                       // [0x189dc10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetCameraShakeScale
	// float GetCameraShakeScale();                                                                                             // [0x189dbf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetBloomEnabled
	// bool GetBloomEnabled();                                                                                                  // [0x189dbc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAvaliableAudioOutputDevices
	// bool GetAvaliableAudioOutputDevices(class UObject* WorldContextObject, TArray<FString>& AudioDevices);                   // [0x189daa0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetAvaliableAudioInputDevices
	// bool GetAvaliableAudioInputDevices(TArray<FString>& AudioDevices);                                                       // [0x189d9c0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetAvailableScreenResolutionsForNonPrimaryMonitors
	// bool GetAvailableScreenResolutionsForNonPrimaryMonitors(TArray<FIntPoint>& Resolutions);                                 // [0x189d900] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetAutoRefreshServerlist
	// bool GetAutoRefreshServerlist();                                                                                         // [0x12c7f10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAudioOutputDeviceName
	// FString GetAudioOutputDeviceName(class UObject* WorldContextObject, FString DeviceID);                                   // [0x189d790] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetAppearOffline
	// bool GetAppearOffline();                                                                                                 // [0x189d760] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.GetAntiAliasingType
	// int32_t GetAntiAliasingType();                                                                                           // [0x189d730] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAMDFSRSharpness
	// float GetAMDFSRSharpness();                                                                                              // [0x189d670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAMDFSRMode
	// int32_t GetAMDFSRMode();                                                                                                 // [0x189d640] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAMDFSR2Sharpness
	// float GetAMDFSR2Sharpness();                                                                                             // [0x189d610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAMDFSR2Mode
	// int32_t GetAMDFSR2Mode();                                                                                                // [0x189d5e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAimSensitivity
	// float GetAimSensitivity();                                                                                               // [0x189d700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAimOuterAcceleration
	// float GetAimOuterAcceleration();                                                                                         // [0x189d6d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GetAimDeadZone
	// float GetAimDeadZone();                                                                                                  // [0x189d6a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GameServerNameFiltered
	// FString GameServerNameFiltered();                                                                                        // [0x189d560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.GameServerName
	// FString GameServerName();                                                                                                // [0x189d4e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.FSDSetResolutionScale
	// void FSDSetResolutionScale(float NewScaleNormalized);                                                                    // [0x189d460] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.FSDSetCurrentLanguage
	// bool FSDSetCurrentLanguage(class UObject* WorldContextObject, FString Culture);                                          // [0x189d380] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.FSDGameUserSettings
	// class UFSDGameUserSettings* FSDGameUserSettings();                                                                       // [0x189d350] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.ConsoleGraphicsModeAvailable
	// bool ConsoleGraphicsModeAvailable(EConsoleGraphicsMode Mode);                                                            // [0x189d2c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDGameUserSettings.ClearCustomKeyBindings
	// void ClearCustomKeyBindings(bool InGamepadKeys);                                                                         // [0x189d230] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.CanShowBlood
	// bool CanShowBlood();                                                                                                     // [0x189d200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDGameUserSettings.ApplyGraphicsChanges
	// void ApplyGraphicsChanges();                                                                                             // [0x189d1e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDGameUserSettings.ApplyConsoleGraphicsMode
	// void ApplyConsoleGraphicsMode();                                                                                         // [0x189d1c0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDHUD
/// Size: 0x0028 (0x000310 - 0x000338)
class AFSDHUD : public AHUD
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	SMember(FMulticastInlineDelegate)                  SetObjectivesVisible                                        OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHUDVisibilityChanged                                      OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	DMember(char)                                      IsVisibleFlags                                              OFFSET(get<char>, {0x330, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDHUD.ToggleHUDVisibility
	// bool ToggleHUDVisibility(EHUDVisibilityReason reason);                                                                   // [0x18a7ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDHUD.ShowObjectives
	// void ShowObjectives(bool InVisibility);                                                                                  // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDHUD.SetObjectivesVisible__DelegateSignature
	// void SetObjectivesVisible__DelegateSignature(bool InVisible, bool animate);                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDHUD.SetHUDVisible
	// void SetHUDVisible(bool IsVisible, EHUDVisibilityReason reason);                                                         // [0x18a75c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDHUD.RadarPointAdded
	// void RadarPointAdded(class URadarPointComponent* radarPoint);                                                            // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDHUD.PlayerSpawned
	// void PlayerSpawned(class APlayerCharacter* Player);                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDHUD.OnVisibilityChanged
	// void OnVisibilityChanged();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDHUD.IsHUDVisibleFlagSet
	// bool IsHUDVisibleFlagSet(EHUDVisibilityReason reason);                                                                   // [0x18a6990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDHUD.HudVisibilityChanged__DelegateSignature
	// void HudVisibilityChanged__DelegateSignature(bool InHudVisible);                                                         // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDHUD.HandleSeamlessTravel
	// void HandleSeamlessTravel();                                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDHUD.GetHUDWidget
	// class UFSDMainHUDWidget* GetHUDWidget();                                                                                 // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.FSDHUD.GetHUDVisible
	// bool GetHUDVisible();                                                                                                    // [0x18a6540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDHUD.GetFSDHUD
	// class AFSDHUD* GetFSDHUD(class APlayerController* InPlayerController);                                                   // [0x18a64b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDHUD.CameraDroneSpawned
	// void CameraDroneSpawned(class APlayerCameraDrone* Drone);                                                                // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Struct /Script/FSD.NotificationEntry
/// Size: 0x0030 (0x000000 - 0x000030)
class FNotificationEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UObject*)                            ObjectInstance                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             WindowClass                                                 OFFSET(get<T>, {0x8, 40, 0, 0})
};

/// Class /Script/FSD.SpaceRigHUD
/// Size: 0x0018 (0x000338 - 0x000350)
class ASpaceRigHUD : public AFSDHUD
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(TArray<FNotificationEntry>)                NotificationQueue                                           OFFSET(get<T>, {0x338, 16, 0, 0})
	DMember(bool)                                      bNotificationQueueActive                                    OFFSET(get<bool>, {0x348, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SpaceRigHUD.SetNotificationQueueActive
	// void SetNotificationQueueActive(bool Inactive);                                                                          // [0x18a7690] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SpaceRigHUD.ReceiveNotificationQueueActivated
	// void ReceiveNotificationQueueActivated();                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SpaceRigHUD.ReceiveNotificationAdded
	// void ReceiveNotificationAdded();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SpaceRigHUD.QueueWindowClass
	// void QueueWindowClass(TSoftObjectPtr<UClass*> InWindowType);                                                             // [0x18a7230] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SpaceRigHUD.QueueNotificationObject
	// void QueueNotificationObject(class UObject* InObject);                                                                   // [0x18a71a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SpaceRigHUD.IsNotificationQueueEmpty
	// bool IsNotificationQueueEmpty();                                                                                         // [0x18a6a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SpaceRigHUD.DequeueNotificationObject
	// class UObject* DequeueNotificationObject();                                                                              // [0x18a5ec0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDJoinSessionCallbackProxy
/// Size: 0x0168 (0x000030 - 0x000198)
class UFSDJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDJoinSessionCallbackProxy.FSDJoinSession
	// class UFSDJoinSessionCallbackProxy* FSDJoinSession(class UObject* WorldContextObject, class APlayerController* PlayerController, FBlueprintSessionResult& SearchResult, FString FSDPassword, bool fromInvite); // [0x18a5f10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.FSDKismetArrayExtensionFunctions
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDKismetArrayExtensionFunctions : public UKismetArrayLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDKismetArrayExtensionFunctions.Array_GetRandom
	// void Array_GetRandom(TArray<int32_t>& TargetArray, int32_t& Item);                                                       // [0x18a5580] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FSDLobbyHandler
/// Size: 0x0138 (0x000028 - 0x000160)
class UFSDLobbyHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
};

/// Class /Script/FSD.FSDLookupSessionId
/// Size: 0x0158 (0x000030 - 0x000188)
class UFSDLookupSessionId : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDLookupSessionId.FSDLookupSessionId
	// class UFSDLookupSessionId* FSDLookupSessionId(class UObject* WorldContextObject, FString SessionKey);                    // [0x18a6110] Final|Native|Static|Private|BlueprintCallable 
};

/// Class /Script/FSD.FSDMath
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDMath : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDMath.SphericalToCartesian
	// FVector SphericalToCartesian(float Radius, float azimuth, float elecation);                                              // [0x18a78f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDMath.SignedAngleBetweenVectorsZUp
	// float SignedAngleBetweenVectorsZUp(FVector& v1, FVector& v2);                                                            // [0x18a7800] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDMath.RoundToDecimalPlace
	// float RoundToDecimalPlace(float Number, int32_t decimalPlaces);                                                          // [0x18a7460] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDMath.RotateActorAroundOffset
	// void RotateActorAroundOffset(class AActor* Actor, FVector localSpaceOffset, FRotator Rotator);                           // [0x18a7340] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDMath.PercentageCheck
	// bool PercentageCheck(float percentage);                                                                                  // [0x18a7120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDMath.GetAzimuthAndElevation
	// void GetAzimuthAndElevation(FVector& Direction, FTransform& coordinateSystem, float& azimuth, float& elevation);         // [0x18a62b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDMath.CubicSegmentLength
	// float CubicSegmentLength(FVector p0, FVector tangent1, FVector p1, FVector tangent2);                                    // [0x18a5d30] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDMath.CubicInterpBlueprint
	// FVector CubicInterpBlueprint(FVector p0, FVector tangent1, FVector p1, FVector tangent2, float alpha);                   // [0x18a5b40] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDMath.ClampVectorToCone
	// FVector ClampVectorToCone(FVector ToConstrain, FVector ConeDirection, float ConeAngle);                                  // [0x18a59f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDMath.CartesianToSpherical
	// void CartesianToSpherical(FVector Location, float& outAzimuth, float& outElevation, float& OutRadius);                   // [0x18a5860] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDMath.AngleBetweenVectors
	// float AngleBetweenVectors(FVector& v1, FVector& v2);                                                                     // [0x18a5490] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FSDOnlineSessionClient
/// Size: 0x0000 (0x0001C8 - 0x0001C8)
class UFSDOnlineSessionClient : public UOnlineSessionClient
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
};

/// Class /Script/FSD.FSDOnlineSystemUtils
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDOnlineSystemUtils : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDOnlineSystemUtils.TryToResolvePrivilege
	// void TryToResolvePrivilege(class APlayerState* PlayerState, EBlueprintableUserPrivileges Privilege, EBlueprintablePrivilegeResults reason); // [0x18a7b80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.ShowUpgradeAccountUI
	// void ShowUpgradeAccountUI();                                                                                             // [0x18a77e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.ShowAccountPicker
	// void ShowAccountPicker(class UFSDGameInstance* gInstance, int32_t GamePlayerID);                                         // [0x18a7720] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.OpenURLInOverlay
	// void OpenURLInOverlay(FString URL, FDelegateProperty OnOverlayClosed);                                                   // [0x18a6ff0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.OpenProfileWithEvent
	// void OpenProfileWithEvent(class APlayerState* Requestor, class APlayerState* Requestee, FDelegateProperty OnProfileWindowClosed); // [0x18a6ed0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.OpenProfileByUserId
	// void OpenProfileByUserId(class APlayerState* Requestor, FString RequesteeUserID);                                        // [0x18a6e00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.OpenProfile
	// void OpenProfile(class APlayerState* Requestor, class APlayerState* Requestee);                                          // [0x18a6d40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.OnlinePlayBlockReasonToString
	// FText OnlinePlayBlockReasonToString(EBlueprintablePrivilegeResults reason);                                              // [0x18a6c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDOnlineSystemUtils.GetOnlinePlayBlockReasons
	// void GetOnlinePlayBlockReasons(TArray<EBlueprintablePrivilegeResults>& reasons);                                         // [0x18a68c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDOnlineSystemUtils.GetIsUpdatePending
	// void GetIsUpdatePending(FDelegateProperty& Delegate);                                                                    // [0x18a6820] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.GetIsPrivilegeAllowed
	// void GetIsPrivilegeAllowed(class APlayerState* PlayerState, EBlueprintableUserPrivileges Privilege, FDelegateProperty& Delegate); // [0x18a6700] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDOnlineSystemUtils.GetInviteFeatureBlockReason
	// FText GetInviteFeatureBlockReason(class UObject* WorldContextObject, EInviteBlockReason reason);                         // [0x18a65a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDOnlineSystemUtils.CanPlayerInvite
	// EInviteBlockReason CanPlayerInvite(class UObject* WorldContextObject);                                                   // [0x18a57d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FSDPhysicalMaterial
/// Size: 0x0100 (0x000080 - 0x000180)
class UFSDPhysicalMaterial : public UPhysicalMaterial
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	DMember(float)                                     BreakingDecelerationScale                                   OFFSET(get<float>, {0x80, 4, 0, 0})
	DMember(float)                                     BreakingFrictionScale                                       OFFSET(get<float>, {0x84, 4, 0, 0})
	DMember(float)                                     MaxAccelerationScale                                        OFFSET(get<float>, {0x88, 4, 0, 0})
	DMember(bool)                                      RepulsePlayer                                               OFFSET(get<bool>, {0x8C, 1, 0, 0})
	SMember(FFloatInterval)                            RepulsePlayerVelocity                                       OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	DMember(float)                                     RepulsePlayerRandomDegreeOffset                             OFFSET(get<float>, {0x98, 4, 0, 0})
	CMember(class USoundCue*)                          RepulsePlayerSound                                          OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     RepulsePlayerParticle                                       OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     ImpactParticles                                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     MeleeImpactParticles                                        OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UMaterialInstance*)                  ImpactMaterialOverride                                      OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class USoundCue*)                          ImpactSound                                                 OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class USoundCue*)                          MeleeImpactSound                                            OFFSET(get<T>, {0xD0, 8, 0, 0})
	DMember(bool)                                      UseImpactDecalOverrides                                     OFFSET(get<bool>, {0xD8, 1, 0, 0})
	CMember(TArray<FDecalData>)                        ImpactDecals                                                OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(class USoundCue*)                          FirstPersonDamageIndicatorSound                             OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(bool)                                      IsWeakPoint                                                 OFFSET(get<bool>, {0xF8, 1, 0, 0})
	DMember(bool)                                      AllowFrozenBonus                                            OFFSET(get<bool>, {0xF9, 1, 0, 0})
	DMember(bool)                                      IsSubhealthCollider                                         OFFSET(get<bool>, {0xFA, 1, 0, 0})
	DMember(float)                                     DamageMultiplier                                            OFFSET(get<float>, {0xFC, 4, 0, 0})
	CMember(class UFXSystemAsset*)                     FootStepParticle                                            OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UMaterialInstance*)                  FootstepMaterialOverride                                    OFFSET(get<T>, {0x108, 8, 0, 0})
	SMember(FDecalData)                                LeftFootprintDecal                                          OFFSET(getStruct<T>, {0x110, 32, 0, 0})
	SMember(FDecalData)                                RightFootprintDecal                                         OFFSET(getStruct<T>, {0x130, 32, 0, 0})
	CMember(class USoundCue*)                          FootStepSound                                               OFFSET(get<T>, {0x150, 8, 0, 0})
	DMember(float)                                     ExtraFallVelocity                                           OFFSET(get<float>, {0x158, 4, 0, 0})
	CMember(class UFXSystemAsset*)                     FallImpactEffect                                            OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class USoundCue*)                          FallImpactSound                                             OFFSET(get<T>, {0x168, 8, 0, 0})
	DMember(bool)                                      alwaysPenetrate                                             OFFSET(get<bool>, {0x170, 1, 0, 0})
	CMember(class UClass*)                             ReactiveTerrain                                             OFFSET(get<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDPhysicalMaterial.SpawnImpactParticlesFromHit
	// class UFXSystemComponent* SpawnImpactParticlesFromHit(class UObject* WorldContextObject, FHitResult& HitResult);         // [0x18abd10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDPhysicalMaterial.SpawnImpactParticles
	// class UFXSystemComponent* SpawnImpactParticles(class UObject* WorldContextObject, FVector Location, FVector Normal);     // [0x18abbd0] Final|Native|Public|HasDefaults|BlueprintCallable|Const 
	// Function /Script/FSD.FSDPhysicalMaterial.GetPhysicalMaterialFromPrimitive
	// class UFSDPhysicalMaterial* GetPhysicalMaterialFromPrimitive(class UPrimitiveComponent* Component);                      // [0x18aa6c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.OptionalBloodPhysicalMaterial
/// Size: 0x0008 (0x000180 - 0x000188)
class UOptionalBloodPhysicalMaterial : public UFSDPhysicalMaterial
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	CMember(class UParticleSystem*)                    BloodlessImpactParticles                                    OFFSET(get<T>, {0x180, 8, 0, 0})
};

/// Class /Script/FSD.FSDPlayerCameraManager
/// Size: 0x0010 (0x002810 - 0x002820)
class AFSDPlayerCameraManager : public APlayerCameraManager
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 10272;

public:
};

/// Struct /Script/FSD.PlatformComponent
/// Size: 0x0010 (0x000000 - 0x000010)
class FPlatformComponent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EPlatformComponentCriteria)                Criteria                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Class /Script/FSD.FSDPlayerControllerBase
/// Size: 0x0068 (0x000570 - 0x0005D8)
class AFSDPlayerControllerBase : public APlayerController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1496;

public:
	CMember(class UMaterialParameterCollection*)       GlobalMaterialParameterCollection                           OFFSET(get<T>, {0x570, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerVoiceStatusChanged                                  OFFSET(getStruct<T>, {0x578, 16, 0, 0})
	DMember(bool)                                      bStartWithBlackScreen                                       OFFSET(get<bool>, {0x58B, 1, 0, 0})
	CMember(class UWindowManager*)                     WindowManager                                               OFFSET(get<T>, {0x5A0, 8, 0, 0})
	CMember(TArray<FPlatformComponent>)                PlatformComponentClasses                                    OFFSET(get<T>, {0x5A8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDPlayerControllerBase.ToggleAnalogCursor
	// void ToggleAnalogCursor(bool Visible);                                                                                   // [0x18abe80] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerControllerBase.StopAspectRatioAxisConstraint
	// void StopAspectRatioAxisConstraint();                                                                                    // [0x18abe60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerControllerBase.StartAspectRatioAxisConstraint
	// void StartAspectRatioAxisConstraint();                                                                                   // [0x18abe40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerControllerBase.ShowEscapeMenu
	// void ShowEscapeMenu();                                                                                                   // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerControllerBase.SetHUDVisible
	// void SetHUDVisible(bool IsVisible, EHUDVisibilityReason reason);                                                         // [0x18ab660] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerControllerBase.Server_Cheat_SwitchCharacter
	// void Server_Cheat_SwitchCharacter(class UPlayerCharacterID* NewCharacter);                                               // [0x18aadf0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerControllerBase.RecievePreClientTravel
	// void RecievePreClientTravel();                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerControllerBase.RecieveHUDVisibilityChanged
	// void RecieveHUDVisibilityChanged(bool IsVisible);                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerControllerBase.OpenStandaloneMinersManualPage
	// void OpenStandaloneMinersManualPage(EMinersManualSinglePage page);                                                       // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerControllerBase.OpenStandaloneMinersManual
	// void OpenStandaloneMinersManual(EMinersManualSection Section, FGuid& ID);                                                // [0x1d6f900] Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerControllerBase.IsPlayerBlocked
	// bool IsPlayerBlocked(FString UserId);                                                                                    // [0x18aa930] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerControllerBase.IsHUDVisibleFlagSet
	// bool IsHUDVisibleFlagSet(EHUDVisibilityReason reason);                                                                   // [0x18aa8a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerControllerBase.GetEscapeMenu
	// class UEscapeMenuWindow* GetEscapeMenu();                                                                                // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerControllerBase.Client_WasKicked
	// void Client_WasKicked(EDisconnectReason reason);                                                                         // [0x18aa530] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FSD.FSDPlayerController
/// Size: 0x0140 (0x0005D8 - 0x000718)
class AFSDPlayerController : public AFSDPlayerControllerBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1816;

public:
	SMember(FMulticastInlineDelegate)                  OnEndLevelReceived                                          OFFSET(getStruct<T>, {0x5D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReceiveVoiceChanged                                       OFFSET(getStruct<T>, {0x5E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTransmitVoiceChanged                                      OFFSET(getStruct<T>, {0x5F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelFinished                                             OFFSET(getStruct<T>, {0x608, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowTutorialHint                                          OFFSET(getStruct<T>, {0x618, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowTutorialWidget                                        OFFSET(getStruct<T>, {0x628, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnChangeTutorialHintDuration                                OFFSET(getStruct<T>, {0x638, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHideCurrentTutorialHint                                   OFFSET(getStruct<T>, {0x648, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerCharacterPossesed                                   OFFSET(getStruct<T>, {0x658, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnChatOpened                                                OFFSET(getStruct<T>, {0x678, 16, 0, 0})
	CMember(class ADeepPathfinderCharacter*)           DebugEnemy                                                  OFFSET(get<T>, {0x688, 8, 0, 0})
	SMember(FVector)                                   DebugEnemyLocation                                          OFFSET(getStruct<T>, {0x690, 12, 0, 0})
	DMember(float)                                     DebugEnemySpeed                                             OFFSET(get<float>, {0x69C, 4, 0, 0})
	DMember(float)                                     DebugEnemySpeedMod                                          OFFSET(get<float>, {0x6A0, 4, 0, 0})
	CMember(class ADeepPathfinderCharacter*)           DebugEnemyLast                                              OFFSET(get<T>, {0x6B0, 8, 0, 0})
	CMember(class UPerkUsageComponent*)                PerkUsageComponent                                          OFFSET(get<T>, {0x6C8, 8, 0, 0})
	CMember(class UTerrainLatejoinComponent*)          LateJoinComponent                                           OFFSET(get<T>, {0x6D0, 8, 0, 0})
	DMember(bool)                                      IsOnSpaceRig                                                OFFSET(get<bool>, {0x6D8, 1, 0, 0})
	DMember(bool)                                      bReceivedEndLevel                                           OFFSET(get<bool>, {0x6D9, 1, 0, 0})
	CMember(TArray<class USoundMix*>)                  InitialSoundMixes                                           OFFSET(get<T>, {0x6E0, 16, 0, 0})
	DMember(bool)                                      ServerTravelDone                                            OFFSET(get<bool>, {0x6F0, 1, 0, 0})
	CMember(class UFSDWidgetEffectsComponent*)         WidgetEffects                                               OFFSET(get<T>, {0x6F8, 8, 0, 0})
	CMember(ESpacerigStartType)                        SpacerigSpawnType                                           OFFSET(get<T>, {0x700, 1, 0, 0})
	DMember(bool)                                      bDetectGravityChanges                                       OFFSET(get<bool>, {0x714, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDPlayerController.ToggleVoiceOn
	// void ToggleVoiceOn(bool Enabled);                                                                                        // [0x18abf10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.SpawnHUDLocal
	// void SpawnHUDLocal(class UClass* hudClass);                                                                              // [0x18abb40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.SpawnHUDAsync
	// void SpawnHUDAsync();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerController.ShowTutorialWidget
	// void ShowTutorialWidget(class UClass* TutorialWidget, bool ignoreQueue);                                                 // [0x18aba70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.ShowTutorialHint
	// void ShowTutorialHint(FText& Text, FText& Title, FText& TaskText, class UTexture2D* Image, float Duration);              // [0x18ab7c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.SetPlayerStart
	// void SetPlayerStart(class AActor* Start);                                                                                // [0x18ab730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.SetAchievementProgressFromServer
	// void SetAchievementProgressFromServer(class UFSDAchievement* AchievementToSet, float Progress);                          // [0x18ab580] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.ServerSetUserHoldToRun
	// void ServerSetUserHoldToRun(bool Value);                                                                                 // [0x18aad60] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Server_TravelDone
	// void Server_TravelDone();                                                                                                // [0x18ab560] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Server_TakeDamageFrom
	// void Server_TakeDamageFrom(class UDamageComponent* Damage, FVector Location);                                            // [0x18ab480] Net|NetReliableNative|Event|Public|NetServer|HasDefaults 
	// Function /Script/FSD.FSDPlayerController.Server_SetLateJoinDone
	// void Server_SetLateJoinDone();                                                                                           // [0x18ab460] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Server_SetGenerationStatus
	// void Server_SetGenerationStatus(FString Status, float Fraction);                                                         // [0x18ab370] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Server_SetGenerationFraction
	// void Server_SetGenerationFraction(float Fraction);                                                                       // [0x18ab2e0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Server_SetGenerationDone
	// void Server_SetGenerationDone();                                                                                         // [0x18ab2c0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Server_SetExtraEndScreenTime
	// void Server_SetExtraEndScreenTime(float extraTime);                                                                      // [0x18ab230] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.FSDPlayerController.Server_SetDebugEnemy
	// void Server_SetDebugEnemy(class ADeepPathfinderCharacter* NewDebugEnemy);                                                // [0x18ab1a0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.FSDPlayerController.Server_SetControllerReady
	// void Server_SetControllerReady();                                                                                        // [0x18ab180] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.FSDPlayerController.Server_ResetHUD
	// void Server_ResetHUD();                                                                                                  // [0x18ab160] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Server_Relay_SetArmorIndexDestroyed
	// void Server_Relay_SetArmorIndexDestroyed(class USimpleArmorDamageComponent* ArmorComponent, int32_t Index, EArmorDamageType DamageType); // [0x18ab050] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.FSDPlayerController.Server_NewMessage
	// void Server_NewMessage(FString Sender, FString Text, EChatSenderType SenderType);                                        // [0x18aaf10] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Server_DrawProjectileDebugPath
	// void Server_DrawProjectileDebugPath(bool bDraw);                                                                         // [0x18aae80] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FSDPlayerController.SendLevelUpStatistics
	// void SendLevelUpStatistics(int32_t currentRank);                                                                         // [0x18aacd0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerController.RecievePawnDestroyed
	// void RecievePawnDestroyed();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerController.RecieveOnControllerReady
	// void RecieveOnControllerReady();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerController.ReceivingVoiceSignature__DelegateSignature
	// void ReceivingVoiceSignature__DelegateSignature(bool isRecieving);                                                       // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDPlayerController.ReceiveEndLevel
	// void ReceiveEndLevel();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerController.ReceivedEndLevelDelegate__DelegateSignature
	// void ReceivedEndLevelDelegate__DelegateSignature();                                                                      // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDPlayerController.Receive_EndLevel_WaitForData
	// void Receive_EndLevel_WaitForData(bool areObjectivesCompleted, int32_t numberOfPlayersInPod);                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerController.ReadyToContinueFromEndScreen
	// void ReadyToContinueFromEndScreen();                                                                                     // [0x18aacb0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.OnShowTutorialHint__DelegateSignature
	// void OnShowTutorialHint__DelegateSignature(FText& Text, FText& Title, FText& TaskText, class UTexture2D* Image, float Duration); // [0x1d6f900] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FSD.FSDPlayerController.OnSaveGamePlayerProgressChanged
	// void OnSaveGamePlayerProgressChanged(int32_t Rank, int32_t Stars);                                                       // [0x18aabf0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerController.OnSaveGameCreditsChanged
	// void OnSaveGameCreditsChanged(int32_t Credits);                                                                          // [0x18aab70] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerController.OnSaveGameCharacterProgressChanged
	// void OnSaveGameCharacterProgressChanged(class UClass* CharacterClass, int32_t Level, float Progress);                    // [0x18aaa70] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerController.OnRep_DebugEnemyLocation
	// void OnRep_DebugEnemyLocation();                                                                                         // [0xbd29a0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerController.OnPlayerStateSelectedCharacterChanged
	// void OnPlayerStateSelectedCharacterChanged(class UClass* CharacterClass);                                                // [0x18aa9e0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerController.OnPlayerSpawnBegin
	// void OnPlayerSpawnBegin(int32_t PlayerId);                                                                               // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerController.OnHideTutorialHint__DelegateSignature
	// void OnHideTutorialHint__DelegateSignature(bool wasWatched);                                                             // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDPlayerController.OnGenerationDone
	// void OnGenerationDone();                                                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerController.OnChangeTutorialWidget__DelegateSignature
	// void OnChangeTutorialWidget__DelegateSignature(class UClass* TutorialWidget, bool bIgnoreQueue);                         // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDPlayerController.OnChangeTutorialHintDuration__DelegateSignature
	// void OnChangeTutorialHintDuration__DelegateSignature(float NewDuration);                                                 // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDPlayerController.LevelFinishedSignature__DelegateSignature
	// void LevelFinishedSignature__DelegateSignature();                                                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDPlayerController.HideTutorialHint
	// void HideTutorialHint(bool watched);                                                                                     // [0x18aa810] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.GetUseToggleTerrainScanner
	// bool GetUseToggleTerrainScanner();                                                                                       // [0x18aa7e0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerController.GetUseToggleLaserpointer
	// bool GetUseToggleLaserpointer();                                                                                         // [0x18aa7b0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerController.GetUseHoldToRun
	// bool GetUseHoldToRun();                                                                                                  // [0x18aa780] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerController.GetPlayerStart
	// class AActor* GetPlayerStart();                                                                                          // [0x18aa750] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.GetFSDPlayerState
	// class AFSDPlayerState* GetFSDPlayerState();                                                                              // [0x18aa690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerController.FlushRender
	// void FlushRender();                                                                                                      // [0xbd29a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.FindPlayerStart
	// class AActor* FindPlayerStart(class UPlayerCharacterID* characterID);                                                    // [0x18aa5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.EndLevel
	// void EndLevel();                                                                                                         // [0x18aa5b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerController.Client_PlayCue
	// void Client_PlayCue(class USoundCue* SoundCue);                                                                          // [0x18aa4a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.FSDPlayerController.Client_EndLevel_WaitForData
	// void Client_EndLevel_WaitForData(bool areObjectivesCompleted, int32_t numberOfPlayersInPod);                             // [0x18aa3d0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.FSDPlayerController.Client_CollectVanityItem
	// void Client_CollectVanityItem(class UTreasureRewarder* rewarder, class UVanityItem* targetItem, class UPlayerCharacterID* targetCharacter); // [0x18aa2c0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.FSDPlayerController.Client_CollectTreasureVictoryPose
	// void Client_CollectTreasureVictoryPose(class UTreasureRewarder* rewarder, class UVictoryPose* targetPose, class UPlayerCharacterID* targetCharacter); // [0x18aa1b0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.FSDPlayerController.Client_CollectTreasureSkin
	// void Client_CollectTreasureSkin(class USkinTreasureRewarder* rewarder, class UItemSkin* targetSkin, class UItemID* targetItem); // [0x18aa0a0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.FSDPlayerController.Client_CollectPickaxePart
	// void Client_CollectPickaxePart(class UTreasureRewarder* rewarder, class UPickaxePart* targetPart);                       // [0x18a9fd0] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FSD.FSDPlayerStart
/// Size: 0x0010 (0x000220 - 0x000230)
class AFSDPlayerStart : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UPlayerCharacterID*)                 PrefferedClassID                                            OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class AFSDPlayerController*)               usedBy                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/FSD.SpacerigStart
/// Size: 0x0030 (0x000250 - 0x000280)
class ASpacerigStart : public APlayerStart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	SMember(FMulticastInlineDelegate)                  OnPlayerSpawn                                               OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerLeave                                               OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	CMember(class AFSDPlayerController*)               usedBy                                                      OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(ESpacerigStartType)                        StartType                                                   OFFSET(get<T>, {0x278, 1, 0, 0})
};

/// Struct /Script/FSD.RewardTexts
/// Size: 0x0090 (0x000000 - 0x000090)
class FRewardTexts : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FText)                                     PrimaryObjective                                            OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     SecondaryObjective                                          OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     CountPrimaryObjectives                                      OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     CountSecondaryObjectives                                    OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	SMember(FText)                                     MineralsMinedByTeam                                         OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	SMember(FText)                                     HostilesKilled                                              OFFSET(getStruct<T>, {0x78, 24, 0, 0})
};

/// Class /Script/FSD.FSDPlayerState
/// Size: 0x0198 (0x000320 - 0x0004B8)
class AFSDPlayerState : public APlayerState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1208;

public:
	SMember(FMulticastInlineDelegate)                  OnPlayerCharacterSpawned                                    OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerTalkingChanged                                      OFFSET(getStruct<T>, {0x330, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSelectedCharacterChanged                                  OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	DMember(float)                                     FractionLevelGenerated                                      OFFSET(get<float>, {0x350, 4, 0, 0})
	SMember(FString)                                   LevelGenerationState                                        OFFSET(getStruct<T>, {0x358, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSupplyStatusChangedEvent                                  OFFSET(getStruct<T>, {0x368, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEnemyKilledEvent                                          OFFSET(getStruct<T>, {0x378, 16, 0, 0})
	SMember(FEquippedVanity)                           LatestEquipedVanity                                         OFFSET(getStruct<T>, {0x388, 32, 0, 0})
	CMember(class UClass*)                             SelectedCharacter                                           OFFSET(get<T>, {0x3A8, 8, 0, 0})
	DMember(bool)                                      bIsServer                                                   OFFSET(get<bool>, {0x3B0, 1, 0, 0})
	DMember(bool)                                      ShouldCopyProperties                                        OFFSET(get<bool>, {0x3B1, 1, 0, 0})
	DMember(char)                                      gameOwnerStatus                                             OFFSET(get<char>, {0x3B2, 1, 0, 0})
	DMember(bool)                                      IsOnSpaceRig                                                OFFSET(get<bool>, {0x3B3, 1, 0, 0})
	CMember(class UPlayerStatsComponent*)              PlayerStatsComponent                                        OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UPlayerRejoinState*)                 RejoinState                                                 OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class USaveGameStateComponent*)            SaveGameStateComponent                                      OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class APlayerCharacter*)                   PlayerCharacter                                             OFFSET(get<T>, {0x3D0, 8, 0, 0})
	DMember(bool)                                      IsInMission                                                 OFFSET(get<bool>, {0x3D8, 1, 0, 0})
	DMember(bool)                                      IsTalking                                                   OFFSET(get<bool>, {0x3D9, 1, 0, 0})
	DMember(bool)                                      HasGeneratedLevel                                           OFFSET(get<bool>, {0x3DA, 1, 0, 0})
	DMember(bool)                                      HasSelectedCharacter                                        OFFSET(get<bool>, {0x3DB, 1, 0, 0})
	DMember(int32_t)                                   PlayerSortId                                                OFFSET(get<int32_t>, {0x3DC, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerNameChanged                                         OFFSET(getStruct<T>, {0x3E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFractionLevelGenerated                                    OFFSET(getStruct<T>, {0x3F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLevelGenerationStateChanged                               OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	CMember(class UPlayerResourceComponent*)           PlayerResources                                             OFFSET(get<T>, {0x410, 8, 0, 0})
	DMember(char)                                      SupplyAmmoStatus                                            OFFSET(get<char>, {0x418, 1, 0, 0})
	DMember(char)                                      SupplyHealthStatus                                          OFFSET(get<char>, {0x419, 1, 0, 0})
	SMember(FRewardTexts)                              RewardTexts                                                 OFFSET(getStruct<T>, {0x420, 144, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDPlayerState.SetSelectedCharacterID
	// void SetSelectedCharacterID(class UPlayerCharacterID* characterID);                                                      // [0x18b55d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerState.SetSelectedCharacter
	// void SetSelectedCharacter(class UClass* NewCharacter);                                                                   // [0x18b5540] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerState.SetHasGeneratedLevel
	// void SetHasGeneratedLevel(bool hasgenerated);                                                                            // [0x18b5060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerState.SetCanOnlySpectate
	// void SetCanOnlySpectate(bool canOnlySpectate);                                                                           // [0x18b4b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPlayerState.ServerSetSelectedCharacter
	// void ServerSetSelectedCharacter(class UClass* NewCharacter);                                                             // [0x18b4820] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FSDPlayerState.Server_SetSupplyStatus
	// void Server_SetSupplyStatus(char StatusHealth, char StatusAmmo);                                                         // [0x18b4940] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.FSDPlayerState.Server_SetGameOwnerStatus
	// void Server_SetGameOwnerStatus(int32_t gameOwnerStatus);                                                                 // [0x18b48b0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.FSDPlayerState.OnRep_SupplyHealthStatus
	// void OnRep_SupplyHealthStatus();                                                                                         // [0xbd29a0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerState.OnRep_SupplyAmmoStatus
	// void OnRep_SupplyAmmoStatus();                                                                                           // [0x18b42f0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerState.OnRep_SelectedCharacter
	// void OnRep_SelectedCharacter();                                                                                          // [0x18b42d0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerState.OnRep_PlayerCharacter
	// void OnRep_PlayerCharacter();                                                                                            // [0x18b4230] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerState.OnRep_LevelGenerationState
	// void OnRep_LevelGenerationState();                                                                                       // [0x18b4210] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerState.OnRep_GameOwnerStatus
	// void OnRep_GameOwnerStatus();                                                                                            // [0x18b41f0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerState.OnRep_FractionLevelGenerated
	// void OnRep_FractionLevelGenerated();                                                                                     // [0x18b41d0] Final|Native|Protected 
	// Function /Script/FSD.FSDPlayerState.OnLateJoinFinished
	// void OnLateJoinFinished();                                                                                               // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FSDPlayerState.HasNormalOwnerStatus
	// bool HasNormalOwnerStatus();                                                                                             // [0x18b37c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetXPRewardsSum
	// int32_t GetXPRewardsSum();                                                                                               // [0x18b34f0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerState.GetXPRewards
	// TArray<FXPReward> GetXPRewards();                                                                                        // [0x18b34a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerState.GetXPRewardDeepDive
	// TArray<FXPReward> GetXPRewardDeepDive(int32_t StagesCompleted);                                                          // [0x18b33f0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerState.GetUIPing
	// int32_t GetUIPing();                                                                                                     // [0x18b33c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerState.GetSupplyHealthStatus
	// float GetSupplyHealthStatus();                                                                                           // [0x18b3340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetSupplyAmmoStatus
	// float GetSupplyAmmoStatus();                                                                                             // [0x18b3310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetSelectedCharacterLevel
	// int32_t GetSelectedCharacterLevel();                                                                                     // [0x18b2fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetSelectedCharacterID
	// class UPlayerCharacterID* GetSelectedCharacterID();                                                                      // [0x18b2fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetSelectedCharacter
	// class UClass* GetSelectedCharacter();                                                                                    // [0x18b2f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetSelectCharacterProgress
	// FCharacterProgress GetSelectCharacterProgress();                                                                         // [0x18b2f50] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPlayerState.GetPlayerResourceComponent
	// class UPlayerResourceComponent* GetPlayerResourceComponent();                                                            // [0x18b2a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetPlayerRank
	// int32_t GetPlayerRank();                                                                                                 // [0x18b29a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetPlayerController
	// class AFSDPlayerController* GetPlayerController();                                                                       // [0x18b2970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetHasGeneratedLevel
	// bool GetHasGeneratedLevel();                                                                                             // [0x18b2700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetGameOwnerStatus
	// bool GetGameOwnerStatus(EGameOwnerStatus Status);                                                                        // [0x18b2650] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetDeepDiveCreditsReward
	// TArray<FCreditsReward> GetDeepDiveCreditsReward(int32_t StagesCompleted, int32_t goldCollected);                         // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Script/FSD.FSDPlayerState.GetChatSenderType
	// EChatSenderType GetChatSenderType();                                                                                     // [0x18b22f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetCharacterProgress
	// FCharacterProgress GetCharacterProgress(class UPlayerCharacterID* characterID);                                          // [0x18b2190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.GetCharacterLevel
	// int32_t GetCharacterLevel(class UPlayerCharacterID* characterID);                                                        // [0x18b20f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDPlayerState.CharacterSelected
	// void CharacterSelected();                                                                                                // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.FSDPostProcessingActor
/// Size: 0x0020 (0x000220 - 0x000240)
class AFSDPostProcessingActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(EPostProcessingType)                       PostProcessingType                                          OFFSET(get<T>, {0x220, 1, 0, 0})
	CMember(class UPostProcessComponent*)              PostProcessComponent                                        OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FWeightedBlendables)                       InitialBlendables                                           OFFSET(getStruct<T>, {0x230, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendablesByType
	// void UnapplyPostProcessingBlendablesByType(class UObject* WorldContext, EPostProcessingType Type);                       // [0x18b6030] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendablesByID
	// void UnapplyPostProcessingBlendablesByID(class UObject* WorldContext, FName InID);                                       // [0x18b5f70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPostProcessingActor.UnapplyPostProcessingBlendable
	// void UnapplyPostProcessingBlendable(class UObject* WorldContext, EPostProcessingType Type, TScriptInterface<Class> InBlendableObject); // [0x18b5e50] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPostProcessingActor.UnapplyAllPostProcessingBlendables
	// void UnapplyAllPostProcessingBlendables(class UObject* WorldContext);                                                    // [0x18b5dd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPostProcessingActor.SetupHDRColorGamma
	// void SetupHDRColorGamma();                                                                                               // [0x18b5950] Final|Native|Protected 
	// Function /Script/FSD.FSDPostProcessingActor.SetPostProcessManager
	// void SetPostProcessManager(class APostProcessingManager* InManager);                                                     // [0x18b5430] Final|Native|Protected 
	// Function /Script/FSD.FSDPostProcessingActor.GetPostProcessingMaterialInstance
	// class UMaterialInstanceDynamic* GetPostProcessingMaterialInstance(class UObject* WorldContext, class UMaterialInterface* Material); // [0x18b2a50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPostProcessingActor.ApplyPostProcessingMaterial
	// class UMaterialInstanceDynamic* ApplyPostProcessingMaterial(class UObject* WorldContext, EPostProcessingType Type, class UMaterialInterface* Material, float InWeight, FName InID); // [0x18b18b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPostProcessingActor.ApplyPostProcessingBlendable
	// void ApplyPostProcessingBlendable(class UObject* WorldContext, EPostProcessingType Type, TScriptInterface<Class> InBlendableObject, float InWeight, FName InID); // [0x18b1700] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDProjectileMovementComponent
/// Size: 0x0070 (0x0001D0 - 0x000240)
class UFSDProjectileMovementComponent : public UProjectileMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	SMember(FMulticastInlineDelegate)                  OnProjectilePenetrate                                       OFFSET(getStruct<T>, {0x1D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProjectileOutOfPropulsion                                 OFFSET(getStruct<T>, {0x1E0, 16, 0, 0})
	DMember(bool)                                      bShouldPenetrate                                            OFFSET(get<bool>, {0x1F0, 1, 1, 0})
	CMember(TArray<class UClass*>)                     IgnoreCollisionAgainst                                      OFFSET(get<T>, {0x1F8, 16, 0, 0})
	DMember(bool)                                      InvertIgnoreCollisionAgainst                                OFFSET(get<bool>, {0x208, 1, 0, 0})
	CMember(class UCurveFloat*)                        AccelerationCurve                                           OFFSET(get<T>, {0x210, 8, 0, 0})
	DMember(float)                                     AccelerationMultiplier                                      OFFSET(get<float>, {0x218, 4, 0, 0})
	DMember(float)                                     MaxPropulsionTime                                           OFFSET(get<float>, {0x21C, 4, 0, 0})
	DMember(bool)                                      bCancelPenetration                                          OFFSET(get<bool>, {0x220, 1, 1, 0})
};

/// Class /Script/FSD.FSDRateLimiter
/// Size: 0x0088 (0x000028 - 0x0000B0)
class UFSDRateLimiter : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FSD.FSDRateLimiter.RateLimted
	// bool RateLimted();                                                                                                       // [0x18b4460] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDRateLimiter.K2_Enqueue
	// void K2_Enqueue(FDelegateProperty OnRateLimitOpen, FString ID);                                                          // [0x18b3cb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDRateLimiter.IsQueueEmpty
	// bool IsQueueEmpty();                                                                                                     // [0x18b3b80] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDRateLimiter.IsQueued
	// bool IsQueued(FString ID);                                                                                               // [0x18b3bb0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDRateLimiter.Init
	// void Init(int32_t rateLimit, float rateTimeLimit, bool useBurstLimit, int32_t burstLimit, float burstTimeLimit);         // [0x18b3840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDRateLimiter.IncreaseLimitCounter
	// void IncreaseLimitCounter();                                                                                             // [0x18b3820] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.GDKRateLimiter
/// Size: 0x0008 (0x000030 - 0x000038)
class UGDKRateLimiter : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UFSDRateLimiter*)                    Handler                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.FSDRefinery
/// Size: 0x0108 (0x0002B8 - 0x0003C0)
class AFSDRefinery : public ADroppableOutpost
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	SMember(FMulticastInlineDelegate)                  OnRefineryStateChanged                                      OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRefineryProgressChanged                                   OFFSET(getStruct<T>, {0x2C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPipelineRegistered                                        OFFSET(getStruct<T>, {0x2D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPipelineSegmentPlaced                                     OFFSET(getStruct<T>, {0x2E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnExtractorPodSpawned                                       OFFSET(getStruct<T>, {0x2F8, 16, 0, 0})
	CMember(class USingleUsableComponent*)             UsableStartRefining                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USingleUsableComponent*)             UsableLaunchRocket                                          OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(TMap<float, class UDialogDataAsset*>)      ProgressMissionShouts                                       OFFSET(get<T>, {0x318, 80, 0, 0})
	CMember(class UDialogDataAsset*)                   LaunchRocketButtonPressedShout                              OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UClass*)                             BuilderItem                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	DMember(float)                                     RefiningTotalDuration                                       OFFSET(get<float>, {0x378, 4, 0, 0})
	SMember(FFloatRange)                               PipelineBreakCoolDown                                       OFFSET(getStruct<T>, {0x37C, 16, 0, 0})
	DMember(float)                                     PipelineBreakTimePenaltyPerAdditionalPlayers                OFFSET(get<float>, {0x38C, 4, 0, 0})
	SMember(FInt32Range)                               MaxSegmentBreakDowns                                        OFFSET(getStruct<T>, {0x390, 16, 0, 0})
	DMember(int32_t)                                   SegmentBreakDownPenaltyPerAdditionalPlayers                 OFFSET(get<int32_t>, {0x3A0, 4, 0, 0})
	CMember(ERefineryState)                            RefineryState                                               OFFSET(get<T>, {0x3AC, 1, 0, 0})
	CMember(ERefineryState)                            PreviousRefineryState                                       OFFSET(get<T>, {0x3AD, 1, 0, 0})
	DMember(char)                                      RefiningProgressReplicated                                  OFFSET(get<char>, {0x3AE, 1, 0, 0})
	CMember(TArray<class APipelineStart*>)             PipelineStarts                                              OFFSET(get<T>, {0x3B0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDRefinery.SetRefineryState
	// void SetRefineryState(ERefineryState InState);                                                                           // [0x18b54c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FSDRefinery.RefineryStateDelegate__DelegateSignature
	// void RefineryStateDelegate__DelegateSignature(ERefineryState InRefineryState);                                           // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDRefinery.RefineryProgressDelegate__DelegateSignature
	// void RefineryProgressDelegate__DelegateSignature(float InProgress01);                                                    // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDRefinery.RefineryPipelineSegmentDelegate__DelegateSignature
	// void RefineryPipelineSegmentDelegate__DelegateSignature(class APipelineSegment* InSegment);                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDRefinery.RefineryPipelineDelegate__DelegateSignature
	// void RefineryPipelineDelegate__DelegateSignature(class APipelineStart* InPipelineStart);                                 // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDRefinery.RefineryExtractPodDelegate__DelegateSignature
	// void RefineryExtractPodDelegate__DelegateSignature(class APipelineExtractorPod* InExtractorPod);                         // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDRefinery.ReceiveRefineryStateChanged
	// void ReceiveRefineryStateChanged(ERefineryState InState);                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDRefinery.ReceivePipelineStateChanged
	// void ReceivePipelineStateChanged(class APipelineStart* InPipeline, EPipelineBuildState InState);                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDRefinery.ReceivePipelineStartReady
	// void ReceivePipelineStartReady(class APipelineStart* InPipelineStart);                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDRefinery.OnStartRefiningPressed
	// void OnStartRefiningPressed(class APlayerCharacter* InCharacter, EInputKeys Key);                                        // [0x18b4310] Final|Native|Protected 
	// Function /Script/FSD.FSDRefinery.OnRep_RefineryState
	// void OnRep_RefineryState(ERefineryState InOldState);                                                                     // [0x18b4250] Final|Native|Protected 
	// Function /Script/FSD.FSDRefinery.OnPlayerCharacterRegistered
	// void OnPlayerCharacterRegistered(class APlayerCharacter* InCharacter);                                                   // [0x18b4140] Final|Native|Protected 
	// Function /Script/FSD.FSDRefinery.OnPipelineStateChanged
	// void OnPipelineStateChanged(class APipelineStart* InPipelineStart, EPipelineBuildState InPipelineState);                 // [0x18b4070] Final|Native|Protected 
	// Function /Script/FSD.FSDRefinery.OnObjectivesChanged
	// void OnObjectivesChanged();                                                                                              // [0x18b4050] Final|Native|Protected 
	// Function /Script/FSD.FSDRefinery.OnLaunchRocketPressed
	// void OnLaunchRocketPressed(class APlayerCharacter* InCharacter, EInputKeys Key);                                         // [0x18b3f80] Final|Native|Protected 
	// Function /Script/FSD.FSDRefinery.GetRefiningProgress
	// float GetRefiningProgress();                                                                                             // [0x18b2b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FSDRefineryAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UFSDRefineryAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(ERefineryState)                            RefineryState                                               OFFSET(get<T>, {0x2B8, 1, 0, 0})
};

/// Struct /Script/FSD.MissionStatCounter
/// Size: 0x0024 (0x000000 - 0x000024)
class FMissionStatCounter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FGuid)                                     PlayerClassID                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FGuid)                                     MissionStatID                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/FSD.MissionStatSave
/// Size: 0x0018 (0x000000 - 0x000018)
class FMissionStatSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FMissionStatCounter>)               Counters                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bCharacterLevelUpFixed                                      OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      bBoughtVanityItemsFixed                                     OFFSET(get<bool>, {0x11, 1, 0, 0})
	DMember(bool)                                      bBoughtEquipmentUpgradesFixed                               OFFSET(get<bool>, {0x12, 1, 0, 0})
	DMember(bool)                                      bCampaignsCompletedFixed                                    OFFSET(get<bool>, {0x13, 1, 0, 0})
	DMember(bool)                                      WeaponUpgradesFixed                                         OFFSET(get<bool>, {0x14, 1, 0, 0})
};

/// Struct /Script/FSD.MilestoneCounter
/// Size: 0x0014 (0x000000 - 0x000014)
class FMilestoneCounter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FGuid)                                     KPIGuid                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Tier                                                        OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.MilestoneSave
/// Size: 0x0010 (0x000000 - 0x000010)
class FMilestoneSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FMilestoneCounter>)                 ClaimedKPIRewards                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.PerkClaimEntry
/// Size: 0x0014 (0x000000 - 0x000014)
class FPerkClaimEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FGuid)                                     PerkID                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   currentRank                                                 OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.PerkClaimsSave
/// Size: 0x0018 (0x000000 - 0x000018)
class FPerkClaimsSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FPerkClaimEntry>)                   PerkEntries                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      HasResetPerks2                                              OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/FSD.PerkEquipEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FPerkEquipEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FGuid)                                     characterID                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FGuid>)                             PerkIDs                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.CharacterPerksSave
/// Size: 0x0010 (0x000000 - 0x000010)
class FCharacterPerksSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FPerkEquipEntry>)                   CharacterPerks                                              OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.AchievementSaveEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FAchievementSaveEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     AchievementSaveID                                           OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     HighestSavedProgress                                        OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     CurrentProgress                                             OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/FSD.AchievementSave
/// Size: 0x0020 (0x000000 - 0x000020)
class FAchievementSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FString>)                           OfflineAchievedAchievements                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FAchievementSaveEntry>)             AchievementEntries                                          OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.VanityMasterySave
/// Size: 0x0010 (0x000000 - 0x000010)
class FVanityMasterySave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   XP                                                          OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      HasAwardedForOldPurchases                                   OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   FashionitesAwaredForOldPurchases                            OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FSD.JettyBootsScore
/// Size: 0x0018 (0x000000 - 0x000018)
class FJettyBootsScore : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   PlayerName                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Score                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.JettyBootsSave
/// Size: 0x0028 (0x000000 - 0x000028)
class FJettyBootsSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<FJettyBootsScore>)                  HighScores                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FJettyBootsScore>)                  NPC_HighScores                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bInitializeNPCs                                             OFFSET(get<bool>, {0x20, 1, 0, 0})
	DMember(int32_t)                                   LastHighScoreIndex                                          OFFSET(get<int32_t>, {0x24, 4, 0, 0})
};

/// Struct /Script/FSD.SchematicSave
/// Size: 0x0040 (0x000000 - 0x000040)
class FSchematicSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FGuid)                                     PendingReward                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      bFirstSchematicMessageShown                                 OFFSET(get<bool>, {0x10, 1, 0, 0})
	CMember(TArray<FGuid>)                             ForgedSchematics                                            OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FGuid>)                             OwnedSchematics                                             OFFSET(get<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   SkinFixupCounter                                            OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Struct /Script/FSD.PromotionRewardsSave
/// Size: 0x0058 (0x000000 - 0x000058)
class FPromotionRewardsSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(int32_t)                                   PendingPromotionGifts                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TSet<FGuid>)                               ClaimedRewards                                              OFFSET(get<T>, {0x8, 80, 0, 0})
};

/// Struct /Script/FSD.FSDEventRewardsSave
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FFSDEventRewardsSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TSet<FGuid>)                               EventsSeen                                                  OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TSet<FGuid>)                               PopupsSeen                                                  OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Struct /Script/FSD.RewardsClaimed
/// Size: 0x0002 (0x000000 - 0x000002)
class FRewardsClaimed : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	DMember(bool)                                      NormalClaimed                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      SpecialClaimed                                              OFFSET(get<bool>, {0x1, 1, 0, 0})
};

/// Struct /Script/FSD.ChallengeSaveInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FChallengeSaveInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<int32_t>)                           StatIndices                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FGuid)                                     ChallengeGuid                                               OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   CurrentWins                                                 OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   NumberOfWins                                                OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   XPCompleteGain                                              OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   TokenGain                                                   OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
};

/// Struct /Script/FSD.SeasonSaveEntry
/// Size: 0x0100 (0x000000 - 0x000100)
class FSeasonSaveEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(int32_t)                                   CountSeasonContentDisabled                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CountSeasonContentReenabled                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   XP                                                          OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   Tokens                                                      OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	CMember(TArray<FRewardsClaimed>)                   RewardsClaimed                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bSeasonCompletedAnnounced                                   OFFSET(get<bool>, {0x20, 1, 0, 0})
	DMember(bool)                                      HasClaimedAllRewards                                        OFFSET(get<bool>, {0x21, 1, 0, 0})
	DMember(int32_t)                                   RewardsClaimedAfterMaxLevel                                 OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	CMember(TMap<int32_t, bool>)                       NodesBought                                                 OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(TArray<FChallengeSaveInfo>)                ActiveChallenges                                            OFFSET(get<T>, {0x78, 16, 0, 0})
	SMember(FDateTime)                                 LastNewChallengeGiven                                       OFFSET(getStruct<T>, {0x88, 8, 0, 0})
	SMember(FDateTime)                                 LastChallengeReroll                                         OFFSET(getStruct<T>, {0x90, 8, 0, 0})
	CMember(TMap<FGuid, int32_t>)                      CompletedSpecialChallenges                                  OFFSET(get<T>, {0x98, 80, 0, 0})
	DMember(int32_t)                                   ClaimedScripChallenges                                      OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	DMember(int32_t)                                   PlagueHeartsUsed                                            OFFSET(get<int32_t>, {0xEC, 4, 0, 0})
	DMember(float)                                     TimePlayedAtSeasonStart                                     OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     ChallengesCompletedAtSeasonStart                            OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(bool)                                      OptedOutOfSeasonContent                                     OFFSET(get<bool>, {0xF8, 1, 0, 0})
};

/// Struct /Script/FSD.SeasonSave
/// Size: 0x0060 (0x000000 - 0x000060)
class FSeasonSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(int32_t)                                   SchematicsFixedUpInSeasonFive                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(bool)                                      HasFixedUpRewardsRemovedInSeasonFiveV2                      OFFSET(get<bool>, {0x4, 1, 0, 0})
	DMember(bool)                                      HasFixedUpSeason3EventScripClaimed                          OFFSET(get<bool>, {0x5, 1, 0, 0})
	CMember(TMap<FGuid, FSeasonSaveEntry>)             Seasons                                                     OFFSET(get<T>, {0x8, 80, 0, 0})
	DMember(int32_t)                                   ActiveSeason                                                OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   DesiredSeason                                               OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
};

/// Struct /Script/FSD.GameDLCSave
/// Size: 0x0050 (0x000000 - 0x000050)
class FGameDLCSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<FGuid>)                               AnnouncedIDs                                                OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FSD.WeaponMaintenanceEntry
/// Size: 0x001C (0x000000 - 0x00001C)
class FWeaponMaintenanceEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FGuid)                                     WeaponID                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   XP                                                          OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(bool)                                      LevelUpNotification                                         OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/FSD.WeaponMaintenance
/// Size: 0x0018 (0x000000 - 0x000018)
class FWeaponMaintenance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FWeaponMaintenanceEntry>)           Entries                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   MaxLevel                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.UnLockedMissionParameters
/// Size: 0x0020 (0x000000 - 0x000020)
class FUnLockedMissionParameters : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FGuid>)                             UnLockedComplexities                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FGuid>)                             UnLockedDurations                                           OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.ActiveCampaignItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FActiveCampaignItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FGuid)                                     CampaignID                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Progress                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/FSD.WeeklyCampaignItem
/// Size: 0x000C (0x000000 - 0x00000C)
class FWeeklyCampaignItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   LastCompletedWeek                                           OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   LastStartedWeek                                             OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   RewardedProgress                                            OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.CampaignSave
/// Size: 0x0050 (0x000000 - 0x000050)
class FCampaignSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FActiveCampaignItem)                       ActiveCampaign                                              OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(TArray<FGuid>)                             CompletedCampaigns                                          OFFSET(get<T>, {0x18, 16, 0, 0})
	DMember(int32_t)                                   ActiveCampaignWeek                                          OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	SMember(FWeeklyCampaignItem)                       WeeklySave                                                  OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	SMember(FWeeklyCampaignItem)                       MaxtrixCoreHuntSave                                         OFFSET(getStruct<T>, {0x38, 12, 0, 0})
	SMember(FWeeklyCampaignItem)                       SeededRandomSave                                            OFFSET(getStruct<T>, {0x44, 12, 0, 0})
};

/// Struct /Script/FSD.DeepDiveSaveRewardItem
/// Size: 0x0014 (0x000000 - 0x000014)
class FDeepDiveSaveRewardItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FGuid)                                     RewardID                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Stage                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.DeepDiveItem
/// Size: 0x0038 (0x000000 - 0x000038)
class FDeepDiveItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   Progress                                                    OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   BestTime                                                    OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FDeepDiveSaveRewardItem>)           Rewards                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      HasEverCompleted                                            OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(TArray<FGuid>)                             RewardsGiven                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FSD.DeepDiveSave
/// Size: 0x0070 (0x000000 - 0x000070)
class FDeepDiveSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FDeepDiveItem)                             NormalSave                                                  OFFSET(getStruct<T>, {0x0, 56, 0, 0})
	SMember(FDeepDiveItem)                             EliteSave                                                   OFFSET(getStruct<T>, {0x38, 56, 0, 0})
};

/// Struct /Script/FSD.CharacterVanityLoadout
/// Size: 0x0098 (0x000000 - 0x000098)
class FCharacterVanityLoadout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FGuid)                                     EquippedHeadItemID                                          OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FGuid)                                     EquippedBeardItemID                                         OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FGuid)                                     EquippedArmorItemID                                         OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FGuid)                                     EquippedArmorMaterialID                                     OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FGuid)                                     EquippedBeardColorItemID                                    OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FGuid)                                     EquippedSkinColorItemID                                     OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FGuid)                                     EquippedEyebrowsItemID                                      OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FGuid)                                     EquippedMoustacheItemID                                     OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FGuid)                                     EquippedSideburnsItemID                                     OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	DMember(bool)                                      UsingSleevelessArmor                                        OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(int32_t)                                   MedicalGownIndex                                            OFFSET(get<int32_t>, {0x94, 4, 0, 0})
};

/// Struct /Script/FSD.CharacterVanitySave
/// Size: 0x0118 (0x000000 - 0x000118)
class FCharacterVanitySave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	CMember(TArray<FCharacterVanityLoadout>)           Loadouts                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FCharacterVanityLoadout)                   RandomVanityLoadout                                         OFFSET(getStruct<T>, {0x10, 152, 0, 0})
	CMember(TArray<FGuid>)                             UnLockedVanityItemIDs                                       OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TArray<class UVanityItem*>)                UnLockedVanityItems                                         OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TMap<EVanitySlot, FGuid>)                  NewVanityItems                                              OFFSET(get<T>, {0xC8, 80, 0, 0})
};

/// Struct /Script/FSD.ItemLoadout
/// Size: 0x0084 (0x000000 - 0x000084)
class FItemLoadout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 132;

public:
	SMember(FGuid)                                     PrimaryWeapon                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FGuid)                                     SecondaryWeapon                                             OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FGuid)                                     TraversalTool                                               OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FGuid)                                     ClassTool                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FGuid)                                     Armor                                                       OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FGuid)                                     Flare                                                       OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FGuid)                                     MiningTool                                                  OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FGuid)                                     Grenade                                                     OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	DMember(int32_t)                                   iconIndex                                                   OFFSET(get<int32_t>, {0x80, 4, 0, 0})
};

/// Struct /Script/FSD.ItemUpgradeSelection
/// Size: 0x0078 (0x000000 - 0x000078)
class FItemUpgradeSelection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FGuid)                                     WeaponID                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FGuid>)                             EquippedUpgrades                                            OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FGuid>)                             PermanentUpgrades                                           OFFSET(get<T>, {0x20, 16, 0, 0})
	SMember(FGuid)                                     EquippedOverclock                                           OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(TArray<FGuid>)                             EquippedSkins                                               OFFSET(get<T>, {0x40, 16, 0, 0})
	DMember(bool)                                      OverclockingUnlocked                                        OFFSET(get<bool>, {0x50, 1, 0, 0})
	SMember(FGuid)                                     EquippedSkinColor                                           OFFSET(getStruct<T>, {0x54, 16, 0, 0})
	SMember(FGuid)                                     EquippedSkinMesh                                            OFFSET(getStruct<T>, {0x64, 16, 0, 0})
};

/// Struct /Script/FSD.UpgradeLoadout
/// Size: 0x0050 (0x000000 - 0x000050)
class FUpgradeLoadout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FGuid, FItemUpgradeSelection>)        Loadout                                                     OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FSD.VictoryPoseSave
/// Size: 0x0030 (0x000000 - 0x000030)
class FVictoryPoseSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FGuid)                                     EquippedVictoryPose                                         OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FGuid>)                             UnlockedVictoryPoses                                        OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<FGuid>)                             EquippedVictoryPoses                                        OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FSD.CharacterSave
/// Size: 0x02F8 (0x000000 - 0x0002F8)
class FCharacterSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 760;

public:
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   XP                                                          OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(bool)                                      HasCompletedRetirementCampaign                              OFFSET(get<bool>, {0x14, 1, 0, 0})
	DMember(int32_t)                                   TimesRetired                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   RetiredCharacterLevels                                      OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(bool)                                      HasSeenRetirementRewardScreen                               OFFSET(get<bool>, {0x20, 1, 0, 0})
	CMember(class UClass*)                             CharacterClass                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FCharacterVanitySave)                      Vanity                                                      OFFSET(getStruct<T>, {0x30, 280, 0, 0})
	DMember(int32_t)                                   SelectedLoadout                                             OFFSET(get<int32_t>, {0x148, 4, 0, 0})
	SMember(FItemLoadout)                              Loadout                                                     OFFSET(getStruct<T>, {0x14C, 132, 0, 0})
	CMember(TArray<FItemLoadout>)                      Loadouts                                                    OFFSET(get<T>, {0x1D0, 16, 0, 0})
	CMember(TArray<FUpgradeLoadout>)                   ItemUpgradeLoadouts                                         OFFSET(get<T>, {0x1E0, 16, 0, 0})
	SMember(FItemLoadout)                              RandomWeaponLoadout                                         OFFSET(getStruct<T>, {0x1F0, 132, 0, 0})
	SMember(FUpgradeLoadout)                           RandomItemUpgradeLoadouts                                   OFFSET(getStruct<T>, {0x278, 80, 0, 0})
	SMember(FVictoryPoseSave)                          VictoryPose                                                 OFFSET(getStruct<T>, {0x2C8, 48, 0, 0})
};

/// Struct /Script/FSD.ForgingPendingReward
/// Size: 0x0008 (0x000000 - 0x000008)
class FForgingPendingReward : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.ForgingSave
/// Size: 0x0018 (0x000000 - 0x000018)
class FForgingSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   XP                                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<FForgingPendingReward>)             PendingMasteryRewards                                       OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.DrinkSave
/// Size: 0x0058 (0x000000 - 0x000058)
class FDrinkSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TSet<FGuid>)                               UnlockedDrinks                                              OFFSET(get<T>, {0x0, 80, 0, 0})
	DMember(bool)                                      HasUnlockedSpecial                                          OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/FSD.ItemNotificationInfo
/// Size: 0x0004 (0x000000 - 0x000004)
class FItemNotificationInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   NotificationFlags                                           OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FSD.SkinList
/// Size: 0x0050 (0x000000 - 0x000050)
class FSkinList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<FGuid>)                               Skins                                                       OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FSD.EventRewardSaveItem
/// Size: 0x0020 (0x000000 - 0x000020)
class FEventRewardSaveItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FGuid)                                     CategoryID                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TArray<FGuid>)                             ClassOptions                                                OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.EventRewardSave
/// Size: 0x0050 (0x000000 - 0x000050)
class FEventRewardSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<FGuid, FEventRewardSaveItem>)         PendingRewards                                              OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FSD.UINotificationItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FUINotificationItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FGuid>)                             NotificationIDs                                             OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.ItemUINotifications
/// Size: 0x0068 (0x000000 - 0x000068)
class FItemUINotifications : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FUINotificationItem>)               UINotifications                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TSet<FGuid>)                               UINotificationSet                                           OFFSET(get<T>, {0x10, 80, 0, 0})
	CMember(class UFSDSaveGame*)                       SaveGame                                                    OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/FSD.ResourcesSave
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FResourcesSave : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TMap<FGuid, float>)                        OwnedResources                                              OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TMap<class UResourceData*, float>)         Resources                                                   OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Struct /Script/FSD.WatchedTutorial
/// Size: 0x0018 (0x000000 - 0x000018)
class FWatchedTutorial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   TutorialName                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.ConsoleOptionsInSaveGame
/// Size: 0x0158 (0x000000 - 0x000158)
class FConsoleOptionsInSaveGame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FControllerSettings)                       ControllerSettings                                          OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FHUDElements)                              HUDElements                                                 OFFSET(getStruct<T>, {0x10, 128, 0, 0})
	DMember(bool)                                      SaveGameOptionsValid                                        OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(bool)                                      bTutorialHintsEnabled                                       OFFSET(get<bool>, {0x91, 1, 0, 0})
	DMember(bool)                                      bShowFPS                                                    OFFSET(get<bool>, {0x92, 1, 0, 0})
	DMember(int32_t)                                   ShowNetInfoLevel                                            OFFSET(get<int32_t>, {0x94, 4, 0, 0})
	DMember(float)                                     FOV                                                         OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     HeadbobbingScale                                            OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(float)                                     CameraShakeScale                                            OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(float)                                     UIDPIScale                                                  OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(float)                                     volumeCharacterVoice                                        OFFSET(get<float>, {0xA8, 4, 0, 0})
	DMember(float)                                     volumeMaster                                                OFFSET(get<float>, {0xAC, 4, 0, 0})
	DMember(float)                                     volumeMissionControl                                        OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     volumeSFX                                                   OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     volumeMusic                                                 OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(bool)                                      bShowSubtitles                                              OFFSET(get<bool>, {0xBC, 1, 0, 0})
	DMember(bool)                                      InvertMouse                                                 OFFSET(get<bool>, {0xBD, 1, 0, 0})
	DMember(bool)                                      PhotosensitiveMode                                          OFFSET(get<bool>, {0xBE, 1, 0, 0})
	DMember(bool)                                      TinnitusProtection                                          OFFSET(get<bool>, {0xBF, 1, 0, 0})
	DMember(float)                                     OverlayIntensityScale                                       OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(bool)                                      bHoldToSprint                                               OFFSET(get<bool>, {0xC4, 1, 0, 0})
	DMember(bool)                                      bToggleLaserPointer                                         OFFSET(get<bool>, {0xC5, 1, 0, 0})
	DMember(bool)                                      bToggleTerrainScanner                                       OFFSET(get<bool>, {0xC6, 1, 0, 0})
	DMember(bool)                                      bUseMouseSmoothing                                          OFFSET(get<bool>, {0xC7, 1, 0, 0})
	DMember(float)                                     MouseXSensitivity                                           OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     MouseYSensitivity                                           OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(bool)                                      bUseSeperateSensitivity                                     OFFSET(get<bool>, {0xD0, 1, 0, 0})
	DMember(bool)                                      bInvertMouseWheel                                           OFFSET(get<bool>, {0xD1, 1, 0, 0})
	DMember(bool)                                      bInvertIncapacitatedX_Mouse                                 OFFSET(get<bool>, {0xD2, 1, 0, 0})
	DMember(bool)                                      bInvertIncapacitatedX_Controller                            OFFSET(get<bool>, {0xD3, 1, 0, 0})
	DMember(bool)                                      bInvertFlightControls                                       OFFSET(get<bool>, {0xD4, 1, 0, 0})
	DMember(bool)                                      bShowUIAnimations                                           OFFSET(get<bool>, {0xD5, 1, 0, 0})
	DMember(bool)                                      bPlaySoundOnChatMessage                                     OFFSET(get<bool>, {0xD6, 1, 0, 0})
	DMember(float)                                     ChatFadeTime                                                OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     ForceFeedbackScale                                          OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(int32_t)                                   ChatFontSize                                                OFFSET(get<int32_t>, {0xE0, 4, 0, 0})
	DMember(float)                                     HDRColorGamma                                               OFFSET(get<float>, {0xE4, 4, 0, 0})
	CMember(EConsoleGraphicsMode)                      ConsoleGraphicsMode                                         OFFSET(get<T>, {0xE8, 1, 0, 0})
	SMember(FString)                                   Language                                                    OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FCharacterOptions)                         CharacterOptions                                            OFFSET(getStruct<T>, {0x100, 4, 0, 0})
	CMember(TArray<FCustomKeyBinding>)                 CustomKeyBindings                                           OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<FCustomKeyBinding>)                 CustomControllerBindings                                    OFFSET(get<T>, {0x118, 16, 0, 0})
	DMember(bool)                                      SwapControllerThumbsticks                                   OFFSET(get<bool>, {0x128, 1, 0, 0})
	DMember(float)                                     FSDResolutionScale                                          OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(int32_t)                                   UpscalingType                                               OFFSET(get<int32_t>, {0x130, 4, 0, 0})
	DMember(int32_t)                                   AmdFsrMode                                                  OFFSET(get<int32_t>, {0x134, 4, 0, 0})
	DMember(int32_t)                                   AmdFsr2Mode                                                 OFFSET(get<int32_t>, {0x138, 4, 0, 0})
	CMember(UDLSSMode)                                 NvidiaDlssMode                                              OFFSET(get<T>, {0x13C, 1, 0, 0})
	DMember(float)                                     AmdFsrSharpness                                             OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     AmdFsr2Sharpness                                            OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     NvidiaDlssSharpness                                         OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(int32_t)                                   RagdollQuality                                              OFFSET(get<int32_t>, {0x14C, 4, 0, 0})
	DMember(bool)                                      PreventLatejoinCharacterDuplication                         OFFSET(get<bool>, {0x150, 1, 0, 0})
	CMember(UFSDStreamlineDLSSGMode)                   FrameGenerationMode                                         OFFSET(get<T>, {0x151, 1, 0, 0})
};

/// Struct /Script/FSD.GDKWinOptionsInSaveGame
/// Size: 0x0070 (0x000000 - 0x000070)
class FGDKWinOptionsInSaveGame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      SaveGameOptionsValid                                        OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   ScreenMode                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(uint32_t)                                  ResolutionSizeX                                             OFFSET(get<uint32_t>, {0x8, 4, 0, 0})
	DMember(uint32_t)                                  ResolutionSizeY                                             OFFSET(get<uint32_t>, {0xC, 4, 0, 0})
	DMember(bool)                                      bUseVSync                                                   OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     FrameRateLimit                                              OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     Sharpening                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   AntiAliasingType                                            OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(float)                                     Gamma                                                       OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   OverallQuality                                              OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(float)                                     ResolutionScale                                             OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   TextureQuality                                              OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   ShadowQuality                                               OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   AntiAliasingQuality                                         OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   PostProcessingQuality                                       OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   EffectsQuality                                              OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   ViewDistanceQuality                                         OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(bool)                                      PreventLatejoinCharacterDuplication                         OFFSET(get<bool>, {0x44, 1, 0, 0})
	SMember(FString)                                   LocalGameServerName                                         OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FString)                                   CurrentAudioOutputDeviceId                                  OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(bool)                                      UseDefaultAudioOutputDevice                                 OFFSET(get<bool>, {0x68, 1, 0, 0})
	DMember(int32_t)                                   RagdollQuality                                              OFFSET(get<int32_t>, {0x6C, 4, 0, 0})
};

/// Struct /Script/FSD.OptionsInSaveGame
/// Size: 0x0008 (0x000000 - 0x000008)
class FOptionsInSaveGame : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(bool)                                      SaveGameOptionsValid                                        OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   ScreenMode                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.SonyInputSettings
/// Size: 0x0030 (0x000000 - 0x000030)
class FSonyInputSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      MotionControlEnabled                                        OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     MotionControlXSensitivity                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MotionControlYSensitivity                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      MotionControlPrecisionMode                                  OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(bool)                                      MotionControlSalute                                         OFFSET(get<bool>, {0xD, 1, 0, 0})
	DMember(bool)                                      MotionControlFlight                                         OFFSET(get<bool>, {0xE, 1, 0, 0})
	CMember(ESonyControllerMotionMapping)              MotionXMapping                                              OFFSET(get<T>, {0xF, 1, 0, 0})
	DMember(bool)                                      AdaptiveTriggersEnabled                                     OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(float)                                     ControllerSpeakerVolume                                     OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      ControllerSpeakerMissionControl                             OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(bool)                                      ControllerSpeakerSalute                                     OFFSET(get<bool>, {0x19, 1, 0, 0})
	DMember(bool)                                      ControllerSpeakerFlare                                      OFFSET(get<bool>, {0x1A, 1, 0, 0})
	DMember(bool)                                      ControllerSpeakerMineralCollection                          OFFSET(get<bool>, {0x1B, 1, 0, 0})
	DMember(bool)                                      TouchPadTerrainScannerEnabled                               OFFSET(get<bool>, {0x1C, 1, 0, 0})
	DMember(float)                                     TouchPadTerrainScannerXSensitivity                          OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     TouchPadTerrainScannerYSensitivity                          OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     TouchPadTerrainScannerZoomSensitivity                       OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(bool)                                      TouchPadGesturesEnabled                                     OFFSET(get<bool>, {0x2C, 1, 0, 0})
	CMember(ESonyControllerLightMode)                  ControllerLightMode                                         OFFSET(get<T>, {0x2D, 1, 0, 0})
};

/// Class /Script/FSD.FSDSaveGame
/// Size: 0x0C30 (0x000028 - 0x000C58)
class UFSDSaveGame : public USaveGame
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3160;

public:
	SMember(FMulticastInlineDelegate)                  OnCreditsChanged                                            OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterSaveChanged                                      OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterCanRetire                                        OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterRetired                                          OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerProgressChanged                                     OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTutorialsReset                                            OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPersonalMetricsChanged                                    OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAnonymousMetricsChanged                                   OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemUnlocked                                              OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemPurchased                                             OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemUINotificationChange                                  OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	DMember(int32_t)                                   VersionNumber                                               OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	DMember(bool)                                      bMilestoneResetShown                                        OFFSET(get<bool>, {0xDC, 1, 0, 0})
	DMember(bool)                                      bYearTwoGiftClaimed                                         OFFSET(get<bool>, {0xDD, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnForgingXPChanged                                          OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResourceAmountChanged                                     OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSkinUnlocked                                              OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FDateTime)                                 SaveSlotTimeStamp                                           OFFSET(getStruct<T>, {0x120, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPerkPointsChanged                                         OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	SMember(FMissionStatSave)                          MissionStatsSave                                            OFFSET(getStruct<T>, {0x138, 24, 0, 0})
	SMember(FMilestoneSave)                            Milestones                                                  OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FPerkClaimsSave)                           OwnedPerks                                                  OFFSET(getStruct<T>, {0x160, 24, 0, 0})
	SMember(FCharacterPerksSave)                       EquippedPerks                                               OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FAchievementSave)                          AchievementSave                                             OFFSET(getStruct<T>, {0x188, 32, 0, 0})
	CMember(TArray<FCharacterPerksSave>)               EquippedPerkLoadouts                                        OFFSET(get<T>, {0x1A8, 16, 0, 0})
	SMember(FCharacterPerksSave)                       RandomEquippedPerkLoadout                                   OFFSET(getStruct<T>, {0x1B8, 16, 0, 0})
	SMember(FVanityMasterySave)                        VanityMasterySave                                           OFFSET(getStruct<T>, {0x1C8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnVanityMasteryChanged                                      OFFSET(getStruct<T>, {0x1D8, 16, 0, 0})
	SMember(FJettyBootsSave)                           JettyBootsSave                                              OFFSET(getStruct<T>, {0x1E8, 40, 0, 0})
	SMember(FSchematicSave)                            SchematicSave                                               OFFSET(getStruct<T>, {0x218, 64, 0, 0})
	SMember(FPromotionRewardsSave)                     PromotionRewardsSave                                        OFFSET(getStruct<T>, {0x258, 88, 0, 0})
	SMember(FFSDEventRewardsSave)                      FSDEventRewardsSave                                         OFFSET(getStruct<T>, {0x2B0, 160, 0, 0})
	SMember(FSeasonSave)                               SeasonSave                                                  OFFSET(getStruct<T>, {0x350, 96, 0, 0})
	SMember(FGameDLCSave)                              GameDLCSave                                                 OFFSET(getStruct<T>, {0x3B0, 80, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnWeaponMaintenanceChanged                                  OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	SMember(FWeaponMaintenance)                        WeaponMaintenance                                           OFFSET(getStruct<T>, {0x410, 24, 0, 0})
	DMember(int32_t)                                   SaveCreatedInPatch                                          OFFSET(get<int32_t>, {0x428, 4, 0, 0})
	SMember(FString)                                   AnonymousID                                                 OFFSET(getStruct<T>, {0x430, 16, 0, 0})
	DMember(int32_t)                                   PerkPoints                                                  OFFSET(get<int32_t>, {0x440, 4, 0, 0})
	DMember(bool)                                      HasRecievedDiscordReward                                    OFFSET(get<bool>, {0x444, 1, 0, 0})
	CMember(EFSDFaction)                               Faction                                                     OFFSET(get<T>, {0x445, 1, 0, 0})
	CMember(TArray<FGuid>)                             UnLockedMissions                                            OFFSET(get<T>, {0x448, 16, 0, 0})
	CMember(TMap<FGuid, FUnLockedMissionParameters>)   UnLockedMissionParameters                                   OFFSET(get<T>, {0x458, 80, 0, 0})
	CMember(TArray<FGuid>)                             UnLockedPlanetZones                                         OFFSET(get<T>, {0x4A8, 16, 0, 0})
	SMember(FCampaignSave)                             CampaignSave                                                OFFSET(getStruct<T>, {0x4B8, 80, 0, 0})
	SMember(FDeepDiveSave)                             DeepDiveSave                                                OFFSET(getStruct<T>, {0x508, 112, 0, 0})
	CMember(TArray<FCharacterSave>)                    CharacterSaves                                              OFFSET(get<T>, {0x578, 16, 0, 0})
	DMember(int32_t)                                   Credits                                                     OFFSET(get<int32_t>, {0x588, 4, 0, 0})
	DMember(int32_t)                                   LastBoughtDailyDealSeed                                     OFFSET(get<int32_t>, {0x58C, 4, 0, 0})
	SMember(FForgingSave)                              Forging                                                     OFFSET(getStruct<T>, {0x590, 24, 0, 0})
	SMember(FDrinkSave)                                Drinks                                                      OFFSET(getStruct<T>, {0x5A8, 88, 0, 0})
	CMember(TArray<FUpgradeLoadout>)                   ItemUpgradeLoadouts                                         OFFSET(get<T>, {0x600, 16, 0, 0})
	DMember(bool)                                      bIgnoreRandomLoadout                                        OFFSET(get<bool>, {0x610, 1, 0, 0})
	CMember(TArray<FGuid>)                             PurchasedItemUpgrades                                       OFFSET(get<T>, {0x618, 16, 0, 0})
	CMember(TArray<FGuid>)                             UnlockedItems                                               OFFSET(get<T>, {0x628, 16, 0, 0})
	CMember(TArray<FGuid>)                             OwnedItems                                                  OFFSET(get<T>, {0x638, 16, 0, 0})
	CMember(TMap<FGuid, int32_t>)                      EnemiesKilled                                               OFFSET(get<T>, {0x648, 80, 0, 0})
	CMember(TMap<FGuid, FItemNotificationInfo>)        ItemsWithNotification                                       OFFSET(get<T>, {0x698, 80, 0, 0})
	CMember(TMap<FGuid, FSkinList>)                    UnlockedItemSkins                                           OFFSET(get<T>, {0x6E8, 80, 0, 0})
	CMember(TSet<FGuid>)                               UnlockedPickaxeParts                                        OFFSET(get<T>, {0x738, 80, 0, 0})
	CMember(TArray<class UVanityItem*>)                UnLockedVanityItems                                         OFFSET(get<T>, {0x788, 16, 0, 0})
	CMember(TArray<FGuid>)                             UnLockedVanityItemIDs                                       OFFSET(get<T>, {0x798, 16, 0, 0})
	CMember(TArray<FGuid>)                             HiddenUICategories                                          OFFSET(get<T>, {0x7A8, 16, 0, 0})
	DMember(int32_t)                                   LastCollectedCommunityRewardPeriodID                        OFFSET(get<int32_t>, {0x7B8, 4, 0, 0})
	CMember(TSet<FGuid>)                               MinersManualKnownObjects                                    OFFSET(get<T>, {0x7C0, 80, 0, 0})
	SMember(FEventRewardSave)                          EventRewardSave                                             OFFSET(getStruct<T>, {0x810, 80, 0, 0})
	SMember(FItemUINotifications)                      ItemUINotifications                                         OFFSET(getStruct<T>, {0x860, 104, 0, 0})
	SMember(FString)                                   RejoinSessionId                                             OFFSET(getStruct<T>, {0x8C8, 16, 0, 0})
	DMember(bool)                                      FirstRejoinAttempt                                          OFFSET(get<bool>, {0x8D8, 1, 0, 0})
	DMember(bool)                                      HaveItemUpgradesBeenFixed                                   OFFSET(get<bool>, {0x8D9, 1, 0, 0})
	DMember(bool)                                      bHasOpenedDeepDiveTerminal                                  OFFSET(get<bool>, {0x8DA, 1, 0, 0})
	SMember(FResourcesSave)                            Resources                                                   OFFSET(getStruct<T>, {0x8E0, 160, 0, 0})
	DMember(bool)                                      FirstSession                                                OFFSET(get<bool>, {0x980, 1, 0, 0})
	CMember(TArray<FWatchedTutorial>)                  WatchedTutorials                                            OFFSET(get<T>, {0x988, 16, 0, 0})
	SMember(FConsoleOptionsInSaveGame)                 ConsoleOptions                                              OFFSET(getStruct<T>, {0x998, 344, 0, 0})
	SMember(FGDKWinOptionsInSaveGame)                  WinGDKOptions                                               OFFSET(getStruct<T>, {0xAF0, 112, 0, 0})
	SMember(FOptionsInSaveGame)                        WindowsOptions                                              OFFSET(getStruct<T>, {0xB60, 8, 0, 0})
	DMember(bool)                                      HasCompletedTutorial                                        OFFSET(get<bool>, {0xB68, 1, 0, 0})
	DMember(bool)                                      HasPlayedTutorial                                           OFFSET(get<bool>, {0xB69, 1, 0, 0})
	DMember(bool)                                      ShowHowToRestartTutorialPrompt                              OFFSET(get<bool>, {0xB6A, 1, 0, 0})
	DMember(bool)                                      HasPlayedIntroMessage                                       OFFSET(get<bool>, {0xB6B, 1, 0, 0})
	DMember(bool)                                      HasSentSteamInfo                                            OFFSET(get<bool>, {0xB6C, 1, 0, 0})
	DMember(bool)                                      HasClaimedSteamGroupLoot                                    OFFSET(get<bool>, {0xB6D, 1, 0, 0})
	DMember(bool)                                      IsBoscoAllowed                                              OFFSET(get<bool>, {0xB6E, 1, 0, 0})
	DMember(bool)                                      HasJoinedXboxClub                                           OFFSET(get<bool>, {0xB6F, 1, 0, 0})
	DMember(bool)                                      HasSeenAnalyticsPopUp                                       OFFSET(get<bool>, {0xB70, 1, 0, 0})
	DMember(bool)                                      AllowAnalyticsTracking                                      OFFSET(get<bool>, {0xB71, 1, 0, 0})
	DMember(bool)                                      AllowPersonalAnalyticsTracking                              OFFSET(get<bool>, {0xB72, 1, 0, 0})
	DMember(bool)                                      IsModded                                                    OFFSET(get<bool>, {0xB73, 1, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0xB74, 4, 0, 0})
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0xB78, 16, 0, 0})
	DMember(float)                                     TotalPlayTimeSeconds                                        OFFSET(get<float>, {0xB88, 4, 0, 0})
	CMember(TMap<FGuid, int32_t>)                      SelectedLoadout                                             OFFSET(get<T>, {0xB90, 80, 0, 0})
	DMember(uint32_t)                                  userIdx                                                     OFFSET(get<uint32_t>, {0xBE0, 4, 0, 0})
	DMember(uint32_t)                                  CurrLoadoutIdx                                              OFFSET(get<uint32_t>, {0xBE4, 4, 0, 0})
	DMember(uint32_t)                                  SaveToDiskCounter                                           OFFSET(get<uint32_t>, {0xBE8, 4, 0, 0})
	DMember(uint32_t)                                  BackupSaveIndex                                             OFFSET(get<uint32_t>, {0xBEC, 4, 0, 0})
	DMember(uint32_t)                                  ExternalBackupSaveIndex                                     OFFSET(get<uint32_t>, {0xBF0, 4, 0, 0})
	DMember(int32_t)                                   NumberOfGamesPlayed                                         OFFSET(get<int32_t>, {0xBF4, 4, 0, 0})
	CMember(class UPlayerCharacterID*)                 LastPlayedCharacter                                         OFFSET(get<T>, {0xBF8, 8, 0, 0})
	DMember(bool)                                      ShowInfoScreen                                              OFFSET(get<bool>, {0xC00, 1, 0, 0})
	SMember(FString)                                   LastShownVersion                                            OFFSET(getStruct<T>, {0xC08, 16, 0, 0})
	SMember(FSonyInputSettings)                        SonyInputSettings                                           OFFSET(getStruct<T>, {0xC18, 48, 0, 0})
	CMember(class UFSDGameInstance*)                   FSDGameInstance                                             OFFSET(get<T>, {0xC48, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDSaveGame.TutorialsResetDelegate__DelegateSignature
	// void TutorialsResetDelegate__DelegateSignature();                                                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.TrySellResource
	// bool TrySellResource(class UResourceData* Resource, int32_t amount, int32_t& Price);                                     // [0x18b5cb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.TryDeductResources
	// bool TryDeductResources(TMap<UResourceData*, int32_t>& Resources);                                                       // [0x18b5b60] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.TryDeductCredits
	// bool TryDeductCredits(int32_t amount);                                                                                   // [0x18b5ac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.TryBuyResource
	// bool TryBuyResource(class UResourceData* Resource, int32_t amount, int32_t& Price);                                      // [0x18b59a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SkinSignature__DelegateSignature
	// void SkinSignature__DelegateSignature(class UItemSkin* Skin, class UItemID* ItemID);                                     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.ShouldDisplayFirstSchematicMessage
	// bool ShouldDisplayFirstSchematicMessage();                                                                               // [0x18b5970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.SetSonyInputSettingMotionXMapping
	// void SetSonyInputSettingMotionXMapping(ESonyControllerMotionMapping NewValue);                                           // [0x18b58d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetSonyInputSettingLightMode
	// void SetSonyInputSettingLightMode(ESonyControllerLightMode NewValue);                                                    // [0x18b5850] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetSonyInputSettingFloat
	// void SetSonyInputSettingFloat(class UObject* WorldContext, ESonyInputSettingsFloats Setting, float NewValue);            // [0x18b5730] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetSonyInputSettingBool
	// void SetSonyInputSettingBool(ESonyInputSettingsBools Setting, bool NewValue);                                            // [0x18b5660] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetPersonalAnalytics
	// bool SetPersonalAnalytics(bool State);                                                                                   // [0x18b5390] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetIsModded
	// void SetIsModded(bool modded);                                                                                           // [0x18b5300] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetIndexAndName
	// void SetIndexAndName(int32_t Index, FString Name);                                                                       // [0x18b51d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetIgnoreRandomLoadout
	// void SetIgnoreRandomLoadout(bool inIgnoreRandomLoadout);                                                                 // [0x18b5140] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetHasSentSteamInfo
	// void SetHasSentSteamInfo();                                                                                              // [0x18b5120] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetHasJoinedXboxClub
	// void SetHasJoinedXboxClub();                                                                                             // [0x18b50f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetHasClaimSteamGroupLoot
	// void SetHasClaimSteamGroupLoot();                                                                                        // [0x18b5030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetFaction
	// void SetFaction(EFSDFaction newFaction, bool Reasign);                                                                   // [0x18b4f50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetEquippedItemID
	// void SetEquippedItemID(EItemCategory Category, class UPlayerCharacterID* PlayerId, class UItemID* Item);                 // [0x18b4e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetEquippedItem
	// void SetEquippedItem(EItemCategory Category, class UPlayerCharacterID* PlayerId, class UClass* Item);                    // [0x18b4d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetDiscordReward
	// void SetDiscordReward(bool State);                                                                                       // [0x18b4ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetCharacterLoadout
	// void SetCharacterLoadout(class UPlayerCharacterID* characterID, int32_t loadoutNumber);                                  // [0x18b4bd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetBoscoAllowed
	// void SetBoscoAllowed(bool aIsBoscoAllowed);                                                                              // [0x18b4ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SetAnonymousAnalytics
	// bool SetAnonymousAnalytics(bool State);                                                                                  // [0x18b4a10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SaveToDisk
	// void SaveToDisk();                                                                                                       // [0x18b4800] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.SaveSlotToDisk
	// bool SaveSlotToDisk(class UFSDSaveGame* SaveSlot, FString slotName, int32_t userIdx);                                    // [0x18b46a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.RetirementSignature__DelegateSignature
	// void RetirementSignature__DelegateSignature(class UClass* CharacterClass, int32_t RetirementCount);                      // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.RetireCharacter
	// int32_t RetireCharacter(class UPlayerCharacterID* characterID);                                                          // [0x18b4600] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.ResourceAmountChangedDelegate__DelegateSignature
	// void ResourceAmountChangedDelegate__DelegateSignature(class UResourceData* Resource, float currentAmount);               // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.ResetTutorials
	// void ResetTutorials();                                                                                                   // [0x18b45e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.ResetSonyTouchSettings
	// void ResetSonyTouchSettings();                                                                                           // [0x18b45c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.ResetSonyMotionSettings
	// void ResetSonyMotionSettings();                                                                                          // [0x18b45a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.ResetSonyDualSenseSettings
	// void ResetSonyDualSenseSettings();                                                                                       // [0x18b4580] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.ResetRejoinSessionId
	// void ResetRejoinSessionId();                                                                                             // [0x18b4560] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.RejoinAttempted
	// void RejoinAttempted();                                                                                                  // [0x18b4540] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.RefreshLoadoutFromCharacter
	// void RefreshLoadoutFromCharacter(class UPlayerCharacterID* characterID);                                                 // [0x18b44b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.RecievedDiscordReward
	// bool RecievedDiscordReward();                                                                                            // [0x18b4490] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.PromotedClassesString
	// FString PromotedClassesString();                                                                                         // [0x18b43e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.PlayerProgressChangedSignature__DelegateSignature
	// void PlayerProgressChangedSignature__DelegateSignature(int32_t Rank, int32_t Stars);                                     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.PersonalMatricsChangedSignature__DelegateSignature
	// void PersonalMatricsChangedSignature__DelegateSignature(bool AllowPersonalMetrics);                                      // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.PerkPointsChangedSignature__DelegateSignature
	// void PerkPointsChangedSignature__DelegateSignature(int32_t PerkPoints, int32_t Change);                                  // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.MarkRetirementRewardScreenSeen
	// void MarkRetirementRewardScreenSeen(class UPlayerCharacterID* characterID);                                              // [0x18b3ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.MarkFirstSchematicMessageSeen
	// void MarkFirstSchematicMessageSeen();                                                                                    // [0x18b3ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.LevelUpCharacter
	// void LevelUpCharacter(class UObject* WorldContext, class UPlayerCharacterID* characterID);                               // [0x18b3e00] Final|Native|Public  
	// Function /Script/FSD.FSDSaveGame.ItemUnlockedDelegate__DelegateSignature
	// void ItemUnlockedDelegate__DelegateSignature();                                                                          // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.ItemUINotificationDelegate__DelegateSignature
	// void ItemUINotificationDelegate__DelegateSignature();                                                                    // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.IsObsolete
	// bool IsObsolete();                                                                                                       // [0x18b3b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.IsInMinersManual
	// bool IsInMinersManual(FGuid ObjectID);                                                                                   // [0x18b3a00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.IsFirstRejoinAttempt
	// bool IsFirstRejoinAttempt();                                                                                             // [0x18b39e0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.HasSeenRetirementRewardScreen
	// bool HasSeenRetirementRewardScreen();                                                                                    // [0x18b37f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.HasCredits
	// bool HasCredits(int32_t amount);                                                                                         // [0x18b3720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.HasCharacterRetired
	// bool HasCharacterRetired(class UPlayerCharacterID* characterID);                                                         // [0x18b3680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.HasCharacterCompletedRetirementCampaign
	// bool HasCharacterCompletedRetirementCampaign(class UPlayerCharacterID* characterID);                                     // [0x18b35e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.HasBackupWithMoreProgress
	// bool HasBackupWithMoreProgress(class UFSDGameInstance* GameInstance);                                                    // [0x18b3550] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.HasAnyCharacterRetired
	// bool HasAnyCharacterRetired();                                                                                           // [0x18b3520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetTotalGamesPlayed
	// int32_t GetTotalGamesPlayed();                                                                                           // [0x18b33a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.GetTotalCharacterXP
	// int32_t GetTotalCharacterXP();                                                                                           // [0x18b3370] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetSonyInputSettingMotionXMapping
	// ESonyControllerMotionMapping GetSonyInputSettingMotionXMapping();                                                        // [0x18b32e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetSonyInputSettingLightMode
	// ESonyControllerLightMode GetSonyInputSettingLightMode();                                                                 // [0x18b32b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetSonyInputSettingFloat
	// float GetSonyInputSettingFloat(ESonyInputSettingsFloats Setting);                                                        // [0x18b3220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetSonyInputSettingBool
	// bool GetSonyInputSettingBool(ESonyInputSettingsBools Setting);                                                           // [0x18b3190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetSlotTimeStamp
	// FDateTime GetSlotTimeStamp();                                                                                            // [0x18b3170] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetSlotLoadedFrom
	// FString GetSlotLoadedFrom();                                                                                             // [0x18b30b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetSelectedLoadoutIndex
	// int32_t GetSelectedLoadoutIndex(class UPlayerCharacterID* characterID);                                                  // [0x18b3010] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetSaveSlotName
	// FString GetSaveSlotName(int32_t userIdx);                                                                                // [0x18b2e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetResourceSellingPrice
	// int32_t GetResourceSellingPrice(class UResourceData* Resource, int32_t amount);                                          // [0x18b2db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetResourceBuyingPrice
	// int32_t GetResourceBuyingPrice(class UResourceData* Resource, int32_t amount);                                           // [0x18b2ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetResourceAmount
	// float GetResourceAmount(class UResourceData* Resource);                                                                  // [0x18b2c40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetRequiredXPForLevel
	// int32_t GetRequiredXPForLevel(int32_t Level);                                                                            // [0x18b2ba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetRejoinSessionId
	// FString GetRejoinSessionId();                                                                                            // [0x18b2b70] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetPurchasableItemCount
	// int32_t GetPurchasableItemCount();                                                                                       // [0x18b2b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetPlayerRetirementRank
	// int32_t GetPlayerRetirementRank();                                                                                       // [0x18b2a20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetPlayerRank
	// int32_t GetPlayerRank();                                                                                                 // [0x18b29d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetPerkPoints
	// int32_t GetPerkPoints();                                                                                                 // [0x18b2950] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetName
	// FString GetName();                                                                                                       // [0x18b2890] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetMaxSaveSlots
	// int32_t GetMaxSaveSlots();                                                                                               // [0x18b2870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetMainSaves
	// int32_t GetMainSaves(class UFSDGameInstance* GameInstance, TArray<UFSDSaveGame*>& outMainSaves);                         // [0x18b2780] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetIsModded
	// bool GetIsModded();                                                                                                      // [0x18b2760] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetIndex
	// int32_t GetIndex();                                                                                                      // [0x18b2740] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetHasSentSteamInfo
	// bool GetHasSentSteamInfo();                                                                                              // [0x18b2720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.GetHasClaimedSteamGroupLoot
	// bool GetHasClaimedSteamGroupLoot();                                                                                      // [0x18b26e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.GetFaction
	// EFSDFaction GetFaction();                                                                                                // [0x18b2630] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetEquippedItemID
	// class UItemID* GetEquippedItemID(EItemCategory Category, class UPlayerCharacterID* PlayerId);                            // [0x18b2560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetEquippedItem
	// class UClass* GetEquippedItem(EItemCategory Category, class UPlayerCharacterID* PlayerId);                               // [0x18b2480] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetCredits
	// int32_t GetCredits();                                                                                                    // [0x18b2460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetClassXP
	// int32_t GetClassXP(class UPlayerCharacterID* characterID);                                                               // [0x18b23c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetClassLevel
	// int32_t GetClassLevel(class UPlayerCharacterID* characterID);                                                            // [0x18b2320] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetCharacterRetirementCount
	// int32_t GetCharacterRetirementCount(FGuid& PlayerId);                                                                    // [0x18b2240] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetBoscoAllowed
	// bool GetBoscoAllowed();                                                                                                  // [0x18b20d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.GetAvailableUserSlotIndex
	// int32_t GetAvailableUserSlotIndex(class UFSDGameInstance* GameInstance);                                                 // [0x18b2040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSaveGame.GetAllSavesFromDisk
	// TArray<UFSDSaveGame*> GetAllSavesFromDisk(class UFSDGameInstance* GameInstance);                                         // [0x18b1f70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.ForgingXPDelegate__DelegateSignature
	// void ForgingXPDelegate__DelegateSignature(float XP);                                                                     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.ForceSetIsModded
	// void ForceSetIsModded(bool modded);                                                                                      // [0x18b1ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.FixNamingOfMainSave
	// void FixNamingOfMainSave(class UFSDSaveGame* mainsave);                                                                  // [0x18b1e60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.DeleteFromDisk
	// bool DeleteFromDisk(class UFSDGameInstance* GameInstance, FString slotName, int32_t userIdx);                            // [0x18b1d00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.DeductPerkPoints
	// bool DeductPerkPoints(int32_t amount);                                                                                   // [0x18b1c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.CreditsChangedSignature__DelegateSignature
	// void CreditsChangedSignature__DelegateSignature(int32_t Credits);                                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.CraftingMasteryChanged__DelegateSignature
	// void CraftingMasteryChanged__DelegateSignature(FVanityMasteryResult Result);                                             // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.CheckPromotionAchievementProgress
	// void CheckPromotionAchievementProgress(class UObject* WorldContext, bool IsRetroactive);                                 // [0x18b1b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.CharacterSignature__DelegateSignature
	// void CharacterSignature__DelegateSignature(class UClass* CharacterClass);                                                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.CharacterProgressChangedSignature__DelegateSignature
	// void CharacterProgressChangedSignature__DelegateSignature(class UClass* CharacterClass, int32_t Level, float Progress);  // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.CanAfford
	// bool CanAfford(TMap<UResourceData*, int32_t>& Resources);                                                                // [0x18b1a40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FSDSaveGame.AnonymousMatricsChangedSignature__DelegateSignature
	// void AnonymousMatricsChangedSignature__DelegateSignature(bool AllowAnonymousMetrics);                                    // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FSDSaveGame.AddPerkPoints
	// void AddPerkPoints(int32_t amount);                                                                                      // [0x18b1670] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.AddGamePlayed
	// void AddGamePlayed();                                                                                                    // [0x18b1650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.AddCredits
	// int32_t AddCredits(int32_t amount);                                                                                      // [0x18b15b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSaveGame.AddClassXP
	// int32_t AddClassXP(class UObject* WorldContext, class UPlayerCharacterID* characterID, int32_t XP);                      // [0x18b14a0] Final|Native|Public  
};

/// Class /Script/FSD.OptionalUICategory
/// Size: 0x0038 (0x000030 - 0x000068)
class UOptionalUICategory : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMulticastInlineDelegate)                  OnVisibilityChanged                                         OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FGuid)                                     Guid                                                        OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x50, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.OptionalUICategory.VisibilityChanged__DelegateSignature
	// void VisibilityChanged__DelegateSignature(class UOptionalUICategory* Category, bool IsVisible);                          // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.OptionalUICategory.SetVisible
	// void SetVisible(class UObject* WorldContext, bool IsCategoryVisible);                                                    // [0x18bbf70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OptionalUICategory.IsVisible
	// bool IsVisible(class UObject* WorldContext);                                                                             // [0x18bbda0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FSDSendToURL
/// Size: 0x0018 (0x000028 - 0x000040)
class UFSDSendToURL : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FSD.FSDSessionHandler
/// Size: 0x0148 (0x000028 - 0x000170)
class UFSDSessionHandler : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
};

/// Class /Script/FSD.FSDSessionUpdater
/// Size: 0x0168 (0x000028 - 0x000190)
class UFSDSessionUpdater : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FMulticastInlineDelegate)                  OnNewFSDSessionID                                           OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(class UFSDSessionHandler*)                 SessionHandler                                              OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class UFSDLobbyHandler*)                   LobbyHandler                                                OFFSET(get<T>, {0x188, 8, 0, 0})
};

/// Class /Script/FSD.FSDSkeletalMeshComponent
/// Size: 0x0000 (0x000ED0 - 0x000ED0)
class UFSDSkeletalMeshComponent : public USkeletalMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3792;

public:
};

/// Class /Script/FSD.FSDSplineLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDSplineLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDSplineLibrary.SplineComponentSphereTrace
	// bool SplineComponentSphereTrace(class USplineComponent*& SplineComponent, float Radius, TEnumAsByte<ETraceTypeQuery> TraceType, float StepSize, TArray<AActor*> IgnoreActors, FHitResult& OutHitResult, FVector Offset); // [0x18bc040] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.SetStartAndEndTangentsCurve2D
	// void SetStartAndEndTangentsCurve2D(FInterpCurveVector2D& Curve, FVector2D StartTangent, FVector2D EndTangent);           // [0x18bbe40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.GetSplineComponentTransforms
	// TArray<FTransform> GetSplineComponentTransforms(class USplineComponent*& SplineComponent, float StepSize, TEnumAsByte<ESplineCoordinateSpace> Space); // [0x18bbc40] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.GetLocationAndTangentsAtSplinePoint
	// void GetLocationAndTangentsAtSplinePoint(class USplineComponent* Spline, int32_t PointIndex, FVector& Location, FVector& ArriveTangent, FVector& LeaveTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace); // [0x18bba30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSplineLibrary.EvalCurveScaled2D
	// void EvalCurveScaled2D(FInterpCurveVector2D& Curve, float Key, FVector2D ScaleBy, FVector2D& OutPosition, FVector2D& OutTangent); // [0x18bb850] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSplineLibrary.EvalCurve2D
	// void EvalCurve2D(FInterpCurveVector2D& Curve, float Key, FVector2D& OutPosition, FVector2D& OutTangent);                 // [0x18bb6d0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSplineLibrary.DrawCurveScaled2D
	// void DrawCurveScaled2D(FPaintContext& Context, FInterpCurveVector2D& Curve, FVector2D ScaleBy, FCurve2DAppearance Appearance, float Opacity); // [0x18bb4c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.DrawCurve2D
	// void DrawCurve2D(FPaintContext& Context, FInterpCurveVector2D& Curve, FCurve2DAppearance Appearance, float Opacity);     // [0x18bb2f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.DrawBezierScaled2D
	// void DrawBezierScaled2D(FPaintContext& Context, FVector2D InStartPos, FVector2D InStartTangent, FVector2D InEndPos, FVector2D InEndTangent, FCurve2DAppearance InAppearance, FVector2D ScaleBy, float Opacity, bool InClampTangents); // [0x18bb000] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.DrawBezier2D
	// void DrawBezier2D(FPaintContext& Context, FVector2D InStartPos, FVector2D InStartTangent, FVector2D InEndPos, FVector2D InEndTangent, FCurve2DAppearance InAppearance, float Opacity, bool InClampTangents); // [0x18bad50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.CreateCurveWithTangents2D
	// FInterpCurveVector2D CreateCurveWithTangents2D(TArray<FVector2D>& Positions, FVector2D StartTangent, FVector2D EndTangent, TEnumAsByte<EInterpCurveMode> Mode); // [0x18bab70] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSplineLibrary.CreateCurve2D
	// FInterpCurveVector2D CreateCurve2D(TArray<FVector2D>& Positions, TEnumAsByte<EInterpCurveMode> Mode);                    // [0x18baa20] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSplineLibrary.ConvertSplineDistanceToInputKey
	// void ConvertSplineDistanceToInputKey(class USplineComponent*& SplineComponent, class USplineComponent* OptionalTargetSpline); // [0x18ba950] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.CarveAroundSplinePoints
	// bool CarveAroundSplinePoints(class UObject* WorldContext, FVector& InStartLocation, FVector& InStartTangent, FVector& InEndLocation, FVector& InEndTangent, float InRadius, class UTerrainMaterial* InTerrainMaterial, ECarveFilterType InCarveFilter, EPreciousMaterialOptions InPrecious); // [0x18ba670] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.CarveAroundSplineMesh
	// bool CarveAroundSplineMesh(class USplineMeshComponent* InMesh, float InRadius, class UTerrainMaterial* InTerrainMaterial, ECarveFilterType InCarveFilter, EPreciousMaterialOptions InPrecious); // [0x18ba4e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSplineLibrary.ApproximateSplineDistanceAtWorldLocation
	// float ApproximateSplineDistanceAtWorldLocation(class USplineComponent* Spline, FVector& WorldLocation);                  // [0x18ba410] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FSDSteamUserStats
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UFSDSteamUserStats : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/FSD.FSDSteamUtils
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDSteamUtils : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDSteamUtils.PlayerIsFollowingUsOnSteam
	// bool PlayerIsFollowingUsOnSteam();                                                                                       // [0x18c2a20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.OpenURLInSteamBrowser
	// void OpenURLInSteamBrowser(FString URL);                                                                                 // [0x18c2990] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.OpenSteamSettings
	// void OpenSteamSettings();                                                                                                // [0x18c2970] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.IsTextFilteringInitialized
	// bool IsTextFilteringInitialized();                                                                                       // [0x18c2060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSteamUtils.IsSteamLoaded
	// bool IsSteamLoaded();                                                                                                    // [0x18c2030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSteamUtils.IsDev
	// bool IsDev(class APlayerState* PlayerState);                                                                             // [0x18c1ef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSteamUtils.InitializeFilterText
	// bool InitializeFilterText();                                                                                             // [0x18c1df0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.HasSupporterUpgrade
	// bool HasSupporterUpgrade();                                                                                              // [0x18c1dc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSteamUtils.HasDeluxeEdition
	// bool HasDeluxeEdition();                                                                                                 // [0x18c1dc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSteamUtils.HasContentCreatorEdition
	// bool HasContentCreatorEdition();                                                                                         // [0x18c1d90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDSteamUtils.GetSteamRegion
	// FString GetSteamRegion();                                                                                                // [0x18c1be0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.GetSteamLanguage
	// FString GetSteamLanguage();                                                                                              // [0x18c1b60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.GetSteamBranchString
	// FString GetSteamBranchString();                                                                                          // [0x18c1ae0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.GetSteamBranch
	// ESteamBranch GetSteamBranch();                                                                                           // [0x18c1ab0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.GetPlayerSteamName
	// FString GetPlayerSteamName();                                                                                            // [0x18c1920] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.GetPlayerSteamID
	// FString GetPlayerSteamID();                                                                                              // [0x18c18a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDSteamUtils.FilterProfanityText
	// FString FilterProfanityText(FString inputMessage);                                                                       // [0x18c0ef0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FSDPS4Utils
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDPS4Utils : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDPS4Utils.SetUGCAllowed
	// void SetUGCAllowed(bool bAllowed);                                                                                       // [0x18c3690] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDPS4Utils.IsUGCAllowed
	// bool IsUGCAllowed();                                                                                                     // [0x18c2080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPS4Utils.IsPS4SystemLoaded
	// bool IsPS4SystemLoaded();                                                                                                // [0x18c2010] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.NewPlayerMutator
/// Size: 0x0018 (0x000000 - 0x000018)
class FNewPlayerMutator : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   MinCampaignProgress                                         OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   MaxCampaignProgress                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	CMember(TArray<class UMutator*>)                   Mutators                                                    OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Class /Script/FSD.FSDTutorialSettings
/// Size: 0x0020 (0x000030 - 0x000050)
class UFSDTutorialSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(int32_t)                                   RequiredCPTreasures                                         OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   RequiredCPMachineEvents                                     OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   RequiredCPVeterans                                          OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	CMember(TArray<FNewPlayerMutator>)                 FirstMissionsMutators                                       OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FSD.FSDLevelLoadingPersistentWidget
/// Size: 0x0000 (0x000260 - 0x000260)
class UFSDLevelLoadingPersistentWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:


	/// Functions
	// Function /Script/FSD.FSDLevelLoadingPersistentWidget.SetFadeProgress
	// void SetFadeProgress(float fade, bool ToSpaceRig, class UTexture* LoadingImage);                                         // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.FSDLabelWidget
/// Size: 0x0000 (0x0002A8 - 0x0002A8)
class UFSDLabelWidget : public UTextBlock
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:


	/// Functions
	// Function /Script/FSD.FSDLabelWidget.SetWrapTextAt
	// void SetWrapTextAt(float WrapAt);                                                                                        // [0x18c3710] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDLabelWidget.SetWrappingPolicy
	// void SetWrappingPolicy(ETextWrappingPolicy Policy);                                                                      // [0x18c3790] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDLabelWidget.SetMargin
	// void SetMargin(FMargin NewMargin);                                                                                       // [0x18c31d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDLabelWidget.SetLineHeightPercentage
	// void SetLineHeightPercentage(float percentage);                                                                          // [0x18c3150] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDLabelWidget.SetFontSize
	// void SetFontSize(int32_t Size);                                                                                          // [0x18c30c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FSDLabelWidget.GetFontSize
	// int32_t GetFontSize();                                                                                                   // [0x18c1570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FSDWidgetBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.WidgetDelegate__DelegateSignature
	// void WidgetDelegate__DelegateSignature(class UUserWidget* Widget);                                                       // [0x1d6f900] Public|Delegate      
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.WidgetCreatedOrReusedDelegate__DelegateSignature
	// void WidgetCreatedOrReusedDelegate__DelegateSignature(bool WasCreated, class UUserWidget* Widget, int32_t ActiveIndex);  // [0x1d6f900] Public|Delegate      
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.ToggleAnimationLooping
	// void ToggleAnimationLooping(class UObject* WorldContext, class UWidgetAnimation* InAnimation, FWidgetAnimationSettings InSettings, bool InLoop, bool& OutPlayingChanged, bool& OutIsPlaying); // [0x18c3dc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.TextSmallerThan
	// bool TextSmallerThan(FText& Text1, FText& Text2);                                                                        // [0x18c3c50] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.TextGreaterThan
	// bool TextGreaterThan(FText& Text1, FText& Text2);                                                                        // [0x18c3ae0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.SortWidgetArray
	// TArray<UWidget*> SortWidgetArray(TArray<UWidget*>& InWidgets, FDelegateProperty& InCompareFunction);                     // [0x18c3980] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.SimpleBox
	// void SimpleBox(FPaintContext& Context, FVector2D Position, FVector2D Size, FLinearColor Tint);                           // [0x18c3810] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.SetTimerForNextTick
	// FTimerHandle SetTimerForNextTick(class UObject* WorldContext, FDelegateProperty& TimerDelegate);                         // [0x18c3590] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.SetSizeBoxSettings
	// void SetSizeBoxSettings(class USizeBox*& InSizeBox, FSizeBoxSettings& InSettings);                                       // [0x18c34a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.SetProgressBarType
	// void SetProgressBarType(class UProgressBar* InProgressBar, TEnumAsByte<EProgressBarFillType> InType);                    // [0x18c33e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.SetMousePosition
	// void SetMousePosition(class UObject* WorldContextObject, int32_t X, int32_t Y);                                          // [0x18c3260] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.SetChildrenVisibility
	// void SetChildrenVisibility(class UPanelWidget* Panel, ESlateVisibility Visibility, int32_t StartIndex, class UClass* OptionalClassFilter); // [0x18c2f80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.ScrubAnimation
	// void ScrubAnimation(class UObject* WorldContext, class UWidgetAnimation* InAnimation, float Progress01);                 // [0x18c2e70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.ScaleTextBlockToHeight
	// void ScaleTextBlockToHeight(class UTextBlock* TextBlock, float TargetHeight, bool SetMinimimumWidth);                    // [0x18c2d60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.ScaleImageToHeight
	// void ScaleImageToHeight(class UImage* Image, float TargetHeight);                                                        // [0x18c2ca0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.PrintStrings
	// void PrintStrings(class UObject* WorldContextObject, TArray<FString>& InStrings, bool bPrintToScreen, bool bPrintToLog, FLinearColor TextColor, float Duration); // [0x18c2a50] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.MidIgnoringWhiteSpace
	// FString MidIgnoringWhiteSpace(FString Source, int32_t Index, int32_t Count);                                             // [0x18c2810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.MeasureTextSize
	// FVector2D MeasureTextSize(FText& Text, FSlateFontInfo& Font);                                                            // [0x18c26a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.MeasureTextBlockSize
	// FVector2D MeasureTextBlockSize(class UTextBlock* TextBlock);                                                             // [0x18c2610] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.Line
	// void Line(FPaintContext& Context, FVector2D Pos1, FVector2D Pos2, FLinearColor Tint);                                    // [0x18c24a0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.LerpColors
	// FLinearColor LerpColors(TArray<FLinearColor>& Colors, bool Interpolate, float Progress01);                               // [0x18c2350] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.LengthIgnoringWhitespace
	// int32_t LengthIgnoringWhitespace(FString Source);                                                                        // [0x18c22b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.IsWindowsPlatform
	// bool IsWindowsPlatform(class UObject* WorldContextObject);                                                               // [0x18c2220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.IsWhiteSpaceAt
	// bool IsWhiteSpaceAt(FString Source, int32_t Index);                                                                      // [0x18c2140] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.IsWhiteSpace
	// bool IsWhiteSpace(FString Source);                                                                                       // [0x18c20a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.IsHUDVisible
	// bool IsHUDVisible(class UObject* WorldContextObject);                                                                    // [0x18c1f80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.IntToRomanNumeral
	// FString IntToRomanNumeral(int32_t Value);                                                                                // [0x18c1e20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.HasAnyVisibleChildren
	// bool HasAnyVisibleChildren(class UPanelWidget* Panel, int32_t StartIndex, class UClass* OptionalClassFilter);            // [0x18c1c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetShortTimeString
	// FString GetShortTimeString(int32_t TotalSeconds, bool BlinkDelimiter);                                                   // [0x18c19a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetParentWindowWidget
	// class UWindowWidget* GetParentWindowWidget(class UUserWidget* InWidget);                                                 // [0x18c1810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetParentUserWidget
	// class UUserWidget* GetParentUserWidget(class UUserWidget* InWidget);                                                     // [0x18c1780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetOwningFSDPlayerState
	// class AFSDPlayerState* GetOwningFSDPlayerState(class UWidget* Target);                                                   // [0x18c16f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetKeyName
	// FText GetKeyName(FKey& Key);                                                                                             // [0x18c15a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetFontMaxHeight
	// float GetFontMaxHeight(FSlateFontInfo& Font);                                                                            // [0x18c14a0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetFontBaseline
	// float GetFontBaseline(FSlateFontInfo& Font);                                                                             // [0x18c13d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetFocusedWidget
	// class UWidget* GetFocusedWidget(class UObject* WorldContextObject, class APlayerController* Controller);                 // [0x18c1300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetFocusableParentUserWidget
	// class UUserWidget* GetFocusableParentUserWidget(class UUserWidget* InWidget);                                            // [0x18c1270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetDrawSize
	// FVector2D GetDrawSize(FPaintContext& InContext);                                                                         // [0x18c1170] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.GetCheatManager
	// class UFSDCheatManager* GetCheatManager(class UObject* WorldContextObject);                                              // [0x17eadb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.FixupRetainerWidgetUpdateInEditor
	// void FixupRetainerWidgetUpdateInEditor(class URetainerBox* InWidget);                                                    // [0x17e9ea0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.FindChildWidget
	// class UWidget* FindChildWidget(class UPanelWidget*& ParentWidget, class UClass* WidgetClass, bool SearchChildren);       // [0x18c1020] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateVerticalBox
	// class UVerticalBox* CreateVerticalBox(class UObject* WorldContext);                                                      // [0x18c0e60] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateTextBlock
	// class UTextBlock* CreateTextBlock(class UObject* WorldContext, FText Text, FSlateFontInfo Font, TEnumAsByte<ETextJustify> Justification, FLinearColor Color, bool WrapText); // [0x18c0b90] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateSpacer
	// class USpacer* CreateSpacer(class UObject* WorldContext, FVector2D Size);                                                // [0x18c0ac0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildrenWithCallbackEx
	// TArray<UUserWidget*> CreateOrReuseChildrenWithCallbackEx(class UPanelWidget* Panel, int32_t Count, class UClass* WidgetClass, FDelegateProperty& OnCreatedOrReused, FDelegateProperty& OnCollapsed); // [0x18c08b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildrenWithCallback
	// TArray<UUserWidget*> CreateOrReuseChildrenWithCallback(class UPanelWidget* Panel, int32_t Count, class UClass* WidgetClass, FDelegateProperty& OnCreatedOrReused); // [0x18c06e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateOrReuseChildren
	// TArray<UUserWidget*> CreateOrReuseChildren(class UPanelWidget* Panel, int32_t Count, class UClass* WidgetClass);         // [0x18c05a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateImageSized
	// class UImage* CreateImageSized(class UObject* WorldContext, class UTexture2D* Texture, FLinearColor Tint, FVector2D Size); // [0x18c0450] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateImageFromBrush
	// class UImage* CreateImageFromBrush(class UObject* WorldContext, FSlateBrush InBrush, FLinearColor InColorAndOpacity);    // [0x18c0210] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateImage
	// class UImage* CreateImage(class UObject* WorldContext, class UTexture2D* Texture, FLinearColor Tint, bool AutoSize);     // [0x18c00c0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CreateHorizontalBox
	// class UHorizontalBox* CreateHorizontalBox(class UObject* WorldContext);                                                  // [0x18c0030] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.CompareWidgetsDelegate__DelegateSignature
	// bool CompareWidgetsDelegate__DelegateSignature(class UWidget* InFirstWidget, class UWidget* InSecondWidget);             // [0x1d6f900] Public|Delegate      
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.ClampTextLength
	// FText ClampTextLength(FText& Text, int32_t MaxLength, FText& CutOffIndicator);                                           // [0x18bfe10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.Box
	// void Box(FPaintContext& Context, FVector2D Position, FVector2D Size, FSlateBrush& Brush, FLinearColor Tint);             // [0x18bfbc0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.AreWidgetsIntersecting
	// bool AreWidgetsIntersecting(class UWidget* InWidget1, class UWidget* InWidget2);                                         // [0x18bfaf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.AddWidgetToRow
	// class UWidget* AddWidgetToRow(class UVerticalBox* VerticalBox, class UWidget* Widget, int32_t MaxWidgetsPerRow, float WidgetSpacing, float RowSpacing, class UHorizontalBoxSlot*& OutSlot, class UHorizontalBox*& OutRow); // [0x18bf8d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.AddChildToVerticalBoxEx
	// class UWidget* AddChildToVerticalBoxEx(class UVerticalBox* VerticalBox, class UWidget* Widget, TEnumAsByte<EHorizontalAlignment> HorizontalAlignment, TEnumAsByte<EVerticalAlignment> VerticalAlignment, float Size, FMargin Padding, class UVerticalBoxSlot*& OutSlot, class UVerticalBox*& OutVerticalBox); // [0x18bf2f0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.AddChildToUniformGridEx
	// class UWidget* AddChildToUniformGridEx(class UUniformGridPanel* GridPanel, class UWidget* Widget, TEnumAsByte<EHorizontalAlignment> HorizontalAlignment, TEnumAsByte<EVerticalAlignment> VerticalAlignment, int32_t Column, int32_t Row, class UUniformGridSlot*& OutSlot, class UUniformGridPanel*& OutGridPanel); // [0x18bf090] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.AddChildToOverlayEx
	// class UWidget* AddChildToOverlayEx(class UOverlay* OverlayPanel, class UWidget* Widget, TEnumAsByte<EHorizontalAlignment> HorizontalAlignment, TEnumAsByte<EVerticalAlignment> VerticalAlignment, FMargin Padding, class UOverlaySlot*& OutSlot, class UOverlay*& OutOverlayPanel); // [0x18bee50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.AddChildToHorizontalBoxEx
	// class UWidget* AddChildToHorizontalBoxEx(class UHorizontalBox* HorizontalBox, class UWidget* Widget, TEnumAsByte<EHorizontalAlignment> HorizontalAlignment, TEnumAsByte<EVerticalAlignment> VerticalAlignment, float Size, FMargin Padding, class UHorizontalBoxSlot*& OutSlot, class UHorizontalBox*& OutHorizontalBox); // [0x18bebd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.AddChildToCanvasEx
	// class UWidget* AddChildToCanvasEx(class UCanvasPanel* CanvasPanel, class UWidget* Widget, FAnchors Anchors, FMargin Offsets, bool AutoSize, int32_t Z_Order, class UCanvasPanelSlot*& OutSlot, class UCanvasPanel*& OutCanvasPanel); // [0x18be940] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetBlueprintLibrary.AddChildrenToHorizontalBox
	// class UHorizontalBox* AddChildrenToHorizontalBox(class UObject* WorldContext, class UHorizontalBox* HorizontalBox, TArray<UWidget*> Children, bool ClearHorizontalBox, FMargin Padding, TEnumAsByte<EHorizontalAlignment> HorizontalAlignment, TEnumAsByte<EVerticalAlignment> VerticalAlignment, float FillFirst, float FillMiddle, float FillLast); // [0x18bf570] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/FSD.WidgetPing
/// Size: 0x0020 (0x000000 - 0x000020)
class FWidgetPing : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<class UWidget*>)            Widget                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.WidgetFade
/// Size: 0x001C (0x000000 - 0x00001C)
class FWidgetFade : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TWeakObjectPtr<class UUserWidget*>)        Widget                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.WidgetTextCounter
/// Size: 0x001C (0x000000 - 0x00001C)
class FWidgetTextCounter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	CMember(TWeakObjectPtr<class UTextBlock*>)         Widget                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.CustomCounter
/// Size: 0x0028 (0x000000 - 0x000028)
class FCustomCounter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FDelegateProperty)                         OnCount                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TWeakObjectPtr<class UObject*>)            Owner                                                       OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FSD.WidgetMover
/// Size: 0x0028 (0x000000 - 0x000028)
class FWidgetMover : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<class UWidget*>)            Widget                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/FSD.FSDWidgetEffectsComponent
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UFSDWidgetEffectsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(TArray<FWidgetPing>)                       WidgetPings                                                 OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FWidgetFade>)                       WidgetFades                                                 OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FWidgetTextCounter>)                WidgetTextCounters                                          OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FCustomCounter>)                    CustomCounters                                              OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<FWidgetMover>)                      WidgetMovers                                                OFFSET(get<T>, {0xF0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDWidgetEffectsComponent.StartTextCounter
	// void StartTextCounter(class UObject* WorldContext, class UTextBlock*& Widget, float Start, float End, float Duration, int32_t MaxDigits, float StartDelay); // [0x18c9e10] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetEffectsComponent.StartCounter
	// void StartCounter(class UObject* WorldContext, class UObject* Owner, float Start, float End, float Duration, FDelegateProperty& OnCount, float StartDelay); // [0x18c9bd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetEffectsComponent.PingWidget
	// void PingWidget(class UObject* WorldContext, class UWidget* Widget, float amount, float Duration, EPingType PingType, float StartDelay); // [0x18c9820] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetEffectsComponent.MoveWidget
	// void MoveWidget(class UObject* WorldContext, class UUserWidget* Widget, FVector2D Start, FVector2D End, float Duration, EMoveType MoveType, float StartDelay); // [0x18c95f0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetEffectsComponent.MoveOutWidget
	// void MoveOutWidget(class UObject* WorldContext, class UUserWidget* Widget, FVector2D MoveToOffset, float Duration, float StartDelay); // [0x18c9460] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetEffectsComponent.MoveInWidget
	// void MoveInWidget(class UObject* WorldContext, class UUserWidget* Widget, FVector2D MoveFromOffset, float Duration, float StartDelay); // [0x18c92d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetEffectsComponent.FadeWidget
	// void FadeWidget(class UObject* WorldContext, class UUserWidget* Widget, float StartFade, float EndFade, float Duration, float StartDelay); // [0x18c8350] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetEffectsComponent.FadeOutWidget
	// void FadeOutWidget(class UObject* WorldContext, class UUserWidget* Widget, float Duration, float StartDelay);            // [0x18c8200] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDWidgetEffectsComponent.FadeInWidget
	// void FadeInWidget(class UObject* WorldContext, class UUserWidget* Widget, float Duration, float StartDelay);             // [0x18c80b0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDWorldSettings
/// Size: 0x0008 (0x0003A0 - 0x0003A8)
class AFSDWorldSettings : public AWorldSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	CMember(class UPlayerCharacterID*)                 CharacterClass                                              OFFSET(get<T>, {0x3A0, 8, 0, 0})
};

/// Class /Script/FSD.FSDXboxUtils
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDXboxUtils : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDXboxUtils.ShowStoreUIForStoreItem
	// void ShowStoreUIForStoreItem(class UObject* WorldContextObject, FString storeItemName);                                  // [0x18c9b00] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDXboxUtils.ShowStoreUI
	// void ShowStoreUI(class UObject* WorldContextObject);                                                                     // [0x18c9a80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.FSDXboxUtils.ShowCheatTerminal
	// bool ShowCheatTerminal();                                                                                                // [0xf12110] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDXboxUtils.IsDCLCheckComplete
	// bool IsDCLCheckComplete(class UObject* WorldContextObject);                                                              // [0x18c9160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FSDPFPUtils
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDPFPUtils : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDPFPUtils.IsPlayfabLoaded
	// bool IsPlayfabLoaded();                                                                                                  // [0x18c9210] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDPFPUtils.GetPlayfabUserId
	// FString GetPlayfabUserId();                                                                                              // [0x18c9050] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.TrackBuilderItem
/// Size: 0x0058 (0x0003E0 - 0x000438)
class ATrackBuilderItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1080;

public:
	CMember(class UCrosshairAggregator*)               CrosshairAggregator                                         OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(EPlaceableObstructionType)                 ObstructionType                                             OFFSET(get<T>, {0x3F0, 1, 0, 0})
	SMember(FVector)                                   ObstructionLocation                                         OFFSET(getStruct<T>, {0x3F4, 12, 0, 0})
	SMember(FVector)                                   GroundNormal                                                OFFSET(getStruct<T>, {0x400, 12, 0, 0})
	CMember(class UClass*)                             DefaultSegmentType                                          OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class ATrackBuilderSegment*)               NextSegment                                                 OFFSET(get<T>, {0x428, 8, 0, 0})
	DMember(bool)                                      bIsPlacingSegment                                           OFFSET(get<bool>, {0x430, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TrackBuilderItem.UpdatePlacement
	// void UpdatePlacement(FTransform& InTransform, class UTrackBuilderConnectPoint* InConnectPoint, bool bPlacementValid, bool InUpdateServer); // [0x19d88a0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TrackBuilderItem.ServerUpdatePlacement
	// void ServerUpdatePlacement(FTransform InTransform, bool bPlacementValid, class UTrackBuilderConnectPoint* InConnectPoint); // [0x19d7c60] Net|Native|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.TrackBuilderItem.ServerFinishPlacement
	// void ServerFinishPlacement(FTransform FinalLocation, class UTrackBuilderConnectPoint* ConnectPoint);                     // [0x19d7b40] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.TrackBuilderItem.ServerCancelPlacement
	// void ServerCancelPlacement();                                                                                            // [0x17f7e30] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.TrackBuilderItem.ServerBeginPlaceSegment
	// void ServerBeginPlaceSegment(class UTrackBuilderUsable* InUsable);                                                       // [0x19d7ab0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.TrackBuilderItem.ReceiveBeginPlaceSegment
	// void ReceiveBeginPlaceSegment();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TrackBuilderItem.OnRep_NextSegment
	// void OnRep_NextSegment();                                                                                                // [0x19d7830] Native|Protected     
	// Function /Script/FSD.TrackBuilderItem.GetSegmentType
	// class UClass* GetSegmentType();                                                                                          // [0x19d7680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderItem.FinishPlacement
	// void FinishPlacement(FTransform& FinalLocation, class UTrackBuilderConnectPoint* ConnectPoint);                          // [0x19d72b0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TrackBuilderItem.CancelPlacement
	// void CancelPlacement();                                                                                                  // [0x186cc50] Native|Public|BlueprintCallable 
	// Function /Script/FSD.TrackBuilderItem.AdjustInitialLocation
	// FVector AdjustInitialLocation(FVector& Location);                                                                        // [0x19d6d40] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FuelLineBuilderItem
/// Size: 0x0010 (0x000438 - 0x000448)
class AFuelLineBuilderItem : public ATrackBuilderItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1096;

public:
	CMember(class UItemPlacerAggregator*)              SegmentPlacer                                               OFFSET(get<T>, {0x438, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FuelLineBuilderItem.ReceivePlacementUpdated
	// void ReceivePlacementUpdated(bool InCanPlace, bool InConnecting, float InDistanceProgress);                              // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.FuelLineEndPoint
/// Size: 0x0020 (0x000220 - 0x000240)
class AFuelLineEndPoint : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UFuelLineConnectPoint*)              ConnectPoint                                                OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               StaticMesh                                                  OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UClass*)                             AllowedSegment                                              OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(bool)                                      OpenForConnection                                           OFFSET(get<bool>, {0x238, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FuelLineEndPoint.SetOpenForConnection
	// void SetOpenForConnection(bool Open);                                                                                    // [0x18c99f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FuelLineEndPoint.ReceivePing
	// void ReceivePing(bool InValidPlacement);                                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.FuelLineEndPoint.IsOpenForConnection
	// bool IsOpenForConnection();                                                                                              // [0x18c91f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FuelLineEndPoint.CallbackConnectedWithSegment
	// void CallbackConnectedWithSegment(class UTrackBuilderConnectPoint* InConnectPoint, class ATrackBuilderSegment* InSegment); // [0x18c7d20] Final|Native|Protected 
};

/// Class /Script/FSD.TrackBuilderConnectPoint
/// Size: 0x0040 (0x000470 - 0x0004B0)
class UTrackBuilderConnectPoint : public USphereComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
	SMember(FMulticastInlineDelegate)                  OnConnectedWithSegment                                      OFFSET(getStruct<T>, {0x470, 16, 0, 0})
	CMember(class UClass*)                             ConnectType                                                 OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(TWeakObjectPtr<class ATrackBuilderSegment*>) ConnectedSegment                                          OFFSET(get<T>, {0x488, 8, 0, 0})
	DMember(float)                                     MaxConnectRadius                                            OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     ConnectDistance                                             OFFSET(get<float>, {0x494, 4, 0, 0})
	SMember(FVector)                                   MaxAngles                                                   OFFSET(getStruct<T>, {0x498, 12, 0, 0})


	/// Functions
	// Function /Script/FSD.TrackBuilderConnectPoint.OnRep_ConnectedSegment
	// void OnRep_ConnectedSegment();                                                                                           // [0x1964c80] Native|Protected     
	// Function /Script/FSD.TrackBuilderConnectPoint.GetConnectTransform
	// FTransform GetConnectTransform(FTransform& FromWorldTransform);                                                          // [0x19d73d0] Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Script/FSD.TrackBuilderConnectPoint.Disconnect
	// bool Disconnect(class ATrackBuilderSegment* InSegment);                                                                  // [0x19d6fd0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TrackBuilderConnectPoint.ConnectionDelegate__DelegateSignature
	// void ConnectionDelegate__DelegateSignature(class UTrackBuilderConnectPoint* InConnectPoint, class ATrackBuilderSegment* InSegment); // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.TrackBuilderConnectPoint.Connect
	// bool Connect(class ATrackBuilderSegment* InSegment);                                                                     // [0x19d6f10] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TrackBuilderConnectPoint.CanConnectWith
	// bool CanConnectWith(class ATrackBuilderSegment* InSegment, FTransform& FromWorldTransform);                              // [0x19d6df0] Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure 
};

/// Class /Script/FSD.FuelLineConnectPoint
/// Size: 0x0000 (0x0004B0 - 0x0004B0)
class UFuelLineConnectPoint : public UTrackBuilderConnectPoint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
};

/// Struct /Script/FSD.TrackBuilderPoint
/// Size: 0x0028 (0x000000 - 0x000028)
class FTrackBuilderPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(ETrackBuildPlacementState)                 PlacementState                                              OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FVector_NetQuantize)                       Location                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector_NetQuantize)                       EulerRotation                                               OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(bool)                                      bPointValid                                                 OFFSET(get<bool>, {0x1C, 1, 0, 0})
	CMember(TWeakObjectPtr<class UTrackBuilderConnectPoint*>) ConnectPoint                                         OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Class /Script/FSD.TrackBuilderSegment
/// Size: 0x0070 (0x000220 - 0x000290)
class ATrackBuilderSegment : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UTrackBuilderUsable*)                NextSegmentUsable                                           OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   BuiltByCharacter                                            OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTrackBuilderUsable*>) BuiltFromUsable                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FTrackBuilderPoint)                        SegmentEndTransform                                         OFFSET(getStruct<T>, {0x238, 40, 0, 0})
	SMember(FTrackBuilderPoint)                        ServerSegmentEndTransform                                   OFFSET(getStruct<T>, {0x260, 40, 0, 0})


	/// Functions
	// Function /Script/FSD.TrackBuilderSegment.UpdatePlacement
	// bool UpdatePlacement(FTransform& InTransform, class UTrackBuilderConnectPoint* InConnectPoint, bool InPlacementValid, class AItem* PlaceableItem); // [0x19dd490] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TrackBuilderSegment.ReceivPlacementValidChanged
	// void ReceivPlacementValidChanged(bool InIsValid);                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TrackBuilderSegment.ReceivePlacementStateChanged
	// void ReceivePlacementStateChanged(ETrackBuildPlacementState NewState);                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TrackBuilderSegment.ReceivePlacementChangedEnd
	// void ReceivePlacementChangedEnd(FTransform& NewEndTransform, class UTrackBuilderConnectPoint* InConnectPoint);           // [0x1d6f900] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.TrackBuilderSegment.ReceivePlacementChangedBegin
	// void ReceivePlacementChangedBegin(FTransform& NewEndTransform, class UTrackBuilderConnectPoint* InConnectPoint);         // [0x1d6f900] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.TrackBuilderSegment.ReceiveCanPlaceAt
	// bool ReceiveCanPlaceAt(FTransform& InCandidateTransform, class UTrackBuilderConnectPoint* InConnectPoint);               // [0x19dcf50] Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.TrackBuilderSegment.OnRep_SegmentEndTransform
	// void OnRep_SegmentEndTransform();                                                                                        // [0x19dc7e0] Final|Native|Protected 
	// Function /Script/FSD.TrackBuilderSegment.GetTrackStartUsable
	// class UTrackBuilderUsable* GetTrackStartUsable();                                                                        // [0x19dc340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderSegment.GetTrackStartActor
	// class AActor* GetTrackStartActor();                                                                                      // [0x19dc310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderSegment.GetStartTransform
	// FTransform GetStartTransform();                                                                                          // [0x19dc250] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderSegment.GetSegmentEndTransform
	// FTransform GetSegmentEndTransform();                                                                                     // [0x19dc1e0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderSegment.GetPlacementState
	// ETrackBuildPlacementState GetPlacementState();                                                                           // [0x18c91f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderSegment.GetNextSegment
	// class ATrackBuilderSegment* GetNextSegment(bool bForward);                                                               // [0x19dc140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderSegment.GetIsSegmentEndTransformValid
	// bool GetIsSegmentEndTransformValid();                                                                                    // [0x19dc110] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderSegment.GetConnectPoint
	// class UTrackBuilderConnectPoint* GetConnectPoint();                                                                      // [0x19dc0c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderSegment.CanPlaceAt
	// bool CanPlaceAt(FTransform& InCandidateTransform, class UTrackBuilderConnectPoint* InConnectPoint, class AItem* PlaceableItem); // [0x19dbdb0] Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FuelLineSegment
/// Size: 0x0038 (0x000290 - 0x0002C8)
class AFuelLineSegment : public ATrackBuilderSegment
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 712;

public:
	CMember(class USplineMeshComponent*)               FuelLineSplineMesh                                          OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class USplineComponent*)                   FuelLineSplineComponent                                     OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               FuelLineEndPostMesh                                         OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class USimpleHealthComponent*)             DeconstructHealthComponent                                  OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class USceneComponent*)                    PreviewEndPostLocation                                      OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(float)                                     EndPostHeightOffset                                         OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     MaxLength                                                   OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(bool)                                      bHasMaxTurnAngle                                            OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(float)                                     MaxTurnAngle                                                OFFSET(get<float>, {0x2C4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.FuelLineSegment.ClientUpdateStartTransform
	// void ClientUpdateStartTransform(FVector NewStartLocation);                                                               // [0x18c8030] Net|Native|Event|Protected|HasDefaults|NetClient 
	// Function /Script/FSD.FuelLineSegment.ChangeStartTransform
	// void ChangeStartTransform(FTransform& ChangedStartLocation);                                                             // [0x18c7f50] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.FuelLineSegment.CallbackOnDeath
	// void CallbackOnDeath(class UHealthComponentBase* InHealthComponent);                                                     // [0x18c7ec0] Final|Native|Protected 
	// Function /Script/FSD.FuelLineSegment.CallbackCanStartNextSegmentChanged
	// void CallbackCanStartNextSegmentChanged(bool InCanStart);                                                                // [0x18c7c90] Final|Native|Protected 
};

/// Class /Script/FSD.FuelLineStart
/// Size: 0x0058 (0x000220 - 0x000278)
class AFuelLineStart : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	SMember(FMulticastInlineDelegate)                  OnFuelLineConnected                                         OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFuelLineStarted                                           OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFirstFuelLineSegment                                      OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	CMember(class UStaticMeshComponent*)               StaticMesh                                                  OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UOutlineComponent*)                  OutlineComponent                                            OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class USimpleObjectInfoComponent*)         ObjectInfoComponent                                         OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UFuelLineStartUsable*)               UsableStartFuelLine                                         OFFSET(get<T>, {0x268, 8, 0, 0})
	DMember(bool)                                      bFuelLineConnected                                          OFFSET(get<bool>, {0x270, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FuelLineStart.ReceiveFuelLineConnected
	// void ReceiveFuelLineConnected();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FuelLineStart.OnRep_FuelLineConnected
	// void OnRep_FuelLineConnected();                                                                                          // [0x18c9800] Final|Native|Protected 
	// Function /Script/FSD.FuelLineStart.FuelLineStartedDelegate__DelegateSignature
	// void FuelLineStartedDelegate__DelegateSignature(bool InFuelLineStarted);                                                 // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FuelLineStart.FuelLineConnectedDelegate__DelegateSignature
	// void FuelLineConnectedDelegate__DelegateSignature(class AFuelLineEndPoint* InFuelLineStart);                             // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FuelLineStart.FirstFuelLineDelegate__DelegateSignature
	// void FirstFuelLineDelegate__DelegateSignature(class AFuelLineSegment* InFirstSegment);                                   // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.FuelLineStart.CallbackNextSegmentChanged
	// void CallbackNextSegmentChanged(class UTrackBuilderUsable* InUsable, class ATrackBuilderSegment* InSegment);             // [0x18c7df0] Final|Native|Protected 
};

/// Class /Script/FSD.TrackBuilderUsable
/// Size: 0x0040 (0x000170 - 0x0001B0)
class UTrackBuilderUsable : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FMulticastInlineDelegate)                  OnNextSegmentChanged                                        OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	CMember(class UClass*)                             BuilderItemType                                             OFFSET(get<T>, {0x180, 8, 0, 0})
	SMember(FString)                                   ColliderName                                                OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	CMember(class USceneComponent*)                    TrackStartComponent                                         OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class ATrackBuilderSegment*)               NextSegment                                                 OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   InUseBy                                                     OFFSET(get<T>, {0x1A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TrackBuilderUsable.SegmentDelegate__DelegateSignature
	// void SegmentDelegate__DelegateSignature(class UTrackBuilderUsable* InUsable, class ATrackBuilderSegment* InSegment);     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.TrackBuilderUsable.OnRep_NextSegment
	// void OnRep_NextSegment();                                                                                                // [0x19dc7c0] Final|Native|Protected 
	// Function /Script/FSD.TrackBuilderUsable.OnNextSegmentDestroyed
	// void OnNextSegmentDestroyed(class AActor* InActor);                                                                      // [0x19dc710] Final|Native|Protected 
	// Function /Script/FSD.TrackBuilderUsable.GetStartTransform
	// FTransform GetStartTransform();                                                                                          // [0x19dc2b0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TrackBuilderUsable.FinishUse
	// void FinishUse(class APlayerCharacter* User, class ATrackBuilderSegment* InSegment);                                     // [0x19dbff0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FuelLineStartUsable
/// Size: 0x0000 (0x0001B0 - 0x0001B0)
class UFuelLineStartUsable : public UTrackBuilderUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
};

/// Class /Script/FSD.GameAnimationSettings
/// Size: 0x0000 (0x000030 - 0x000030)
class UGameAnimationSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FSD.GVisibilityGroups
/// Size: 0x0058 (0x000000 - 0x000058)
class FGVisibilityGroups : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TSet<UHUDVisibilityGroup*>)                AllGroups                                                   OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(class UHUDVisibilityGroup*)                EnemyHealth                                                 OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Struct /Script/FSD.GDItemCategoryIDs
/// Size: 0x0040 (0x000000 - 0x000040)
class FGDItemCategoryIDs : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UCategoryID*)                        OverclockID                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UCategoryID*)                        ItemSkinID                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UCategoryID*)                        VanityID                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UCategoryID*)                        PickaxePartID                                               OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UCategoryID*)                        WeaponID                                                    OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UCategoryID*)                        CraftingID                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UCategoryID*)                        ForgeID                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UCategoryID*)                        BoscoSkinID                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/FSD.GDDamageClasses
/// Size: 0x0068 (0x000000 - 0x000068)
class FGDDamageClasses : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UDamageClass*)                       Falling                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDamageClass*)                       Fire                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UDamageClass*)                       Burn                                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UDamageClass*)                       Heat                                                        OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UDamageClass*)                       Disintegrate                                                OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UDamageClass*)                       Physical                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UDamageClass*)                       Kinetic                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDamageClass*)                       Explosive                                                   OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UDamageClass*)                       Cold                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UDamageClass*)                       Ice                                                         OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UDamageClass*)                       Freezing                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UDamageClass*)                       Corrosive                                                   OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UDamageClass*)                       Infectious                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Struct /Script/FSD.GDStats
/// Size: 0x0148 (0x000000 - 0x000148)
class FGDStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(class UPawnStat*)                          MaxAmmo                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UPawnStat*)                          MaxShields                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UPawnStat*)                          ShieldRegenerationRate                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UPawnStat*)                          MaxHealth                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UPawnStat*)                          DamageResistance                                            OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UPawnStat*)                          FireResistance                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UPawnStat*)                          ColdResistance                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UPawnStat*)                          MeleeAttackDamage                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UPawnStat*)                          MovementSpeed                                               OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UPawnStat*)                          AirControl                                                  OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UPawnStat*)                          SprintSpeed                                                 OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UPawnStat*)                          CarryingSpeedModifier                                       OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UPawnStat*)                          ReviveSpeed                                                 OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UPawnStat*)                          DepositSpeed                                                OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UPawnStat*)                          RessuplySpeed                                               OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UPawnStat*)                          RedSugarHeal                                                OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UPawnStat*)                          CarryingCapacity                                            OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UPawnStat*)                          ZiplineSpeed                                                OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UPawnStat*)                          ZiplineDownwardsBoost                                       OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UPawnStat*)                          SlideDownIce                                                OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UPawnStat*)                          FriendlyFire                                                OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UPawnStat*)                          DamageFromPlayers                                           OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UPawnStat*)                          DamageBonus                                                 OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UPawnStat*)                          FlareThrowingStrength                                       OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UPawnStat*)                          CaveLeechSense                                              OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UPawnStat*)                          MorkiteMining                                               OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UPawnStat*)                          GoldMining                                                  OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UPawnStat*)                          RockMiningStrength                                          OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UPawnStat*)                          DirtMiningStrength                                          OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UPawnStat*)                          ResourceMiningStrength                                      OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UPawnStat*)                          PowerAttackCooldownRate                                     OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UPawnStat*)                          ImpactCompensation                                          OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UPawnStat*)                          MovementSpeedPenalty                                        OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UPawnStat*)                          MovementSpeedPenaltyReduction                               OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UPawnStat*)                          MovementSpeedEnvironmentalPenalty                           OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UPawnStat*)                          MovementSpeedEnvironmentalPenaltyReduction                  OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UPawnStat*)                          CarriableThrowing                                           OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UPawnStat*)                          HoverBootsDuration                                          OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UPawnStat*)                          ExplodeOnDeath                                              OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UPawnStat*)                          CritChance                                                  OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class UPawnStat*)                          CritDamageBonus                                             OFFSET(get<T>, {0x140, 8, 0, 0})
};

/// Struct /Script/FSD.GDResources
/// Size: 0x0100 (0x000000 - 0x000100)
class FGDResources : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(class UResourceData*)                      CreditsResource                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UResourceData*)                      Fashionite                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UResourceData*)                      MOMResource                                                 OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UResourceData*)                      GoldResource                                                OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UResourceData*)                      NitraResource                                               OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UResourceData*)                      HollomiteResource                                           OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UResourceData*)                      MagniteResource                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UResourceData*)                      NeromiteResource                                            OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UResourceData*)                      QuantriteResource                                           OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UResourceData*)                      UmaniteResource                                             OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UResourceData*)                      CropaniteResource                                           OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UResourceData*)                      DystrumResource                                             OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UResourceData*)                      IronResource                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UResourceData*)                      EnorResource                                                OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UResourceData*)                      BismorResource                                              OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UResourceData*)                      OilShaleResource                                            OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UResourceData*)                      ErrorCubeResource                                           OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UResourceData*)                      CompressedGoldResource                                      OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UResourceData*)                      Barly1                                                      OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UResourceData*)                      Barly2                                                      OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UResourceData*)                      Barly3                                                      OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UResourceData*)                      Barly4                                                      OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UGemResourceData*)                   JadizResource                                               OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UGemResourceData*)                   BittergemResource                                           OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UGemResourceData*)                   MotherlodeGemResource                                       OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UResourceData*)                      RedSugarResource                                            OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UResourceData*)                      BlankSchematics                                             OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(TArray<class UResourceData*>)              CraftingResources                                           OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TArray<class UResourceData*>)              AllResources                                                OFFSET(get<T>, {0xE8, 16, 0, 0})
	DMember(float)                                     FashioniteToCredits                                         OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     FashioniteToMinerals                                        OFFSET(get<float>, {0xFC, 4, 0, 0})
};

/// Struct /Script/FSD.GDTerrainTypes
/// Size: 0x0010 (0x000000 - 0x000010)
class FGDTerrainTypes : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UTerrainType*)                       Rock                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTerrainType*)                       Dirt                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FSD.GDGameStatsTracking
/// Size: 0x0020 (0x000000 - 0x000020)
class FGDGameStatsTracking : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FGameplayTagContainer)                     TotalEnemyKillsFilter                                       OFFSET(getStruct<T>, {0x0, 32, 0, 0})
};

/// Struct /Script/FSD.GDAudio
/// Size: 0x0048 (0x000000 - 0x000048)
class FGDAudio : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TWeakObjectPtr<class USoundAttenuation*>)  FirstPersonHitscanAttenuationOverride                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UClass*)                             DynamicReverbClass                                          OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     SmallCaveRadius                                             OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     MediumCaveRadius                                            OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     LargeCaveRadius                                             OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     FirstPersonPriority                                         OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     ThirdPersonPriority                                         OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/FSD.GDDifficulty
/// Size: 0x0020 (0x000000 - 0x000020)
class FGDDifficulty : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<class UDifficultySetting*>)         DifficultySettings                                          OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UDifficultyMutatorSetupItem*>) DifficultyMutators                                         OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.RetirementCostItem
/// Size: 0x0050 (0x000000 - 0x000050)
class FRetirementCostItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<class UResourceData*, int32_t>)       RetirementCost                                              OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FSD.GDCharacterRetirement
/// Size: 0x00C0 (0x000000 - 0x0000C0)
class FGDCharacterRetirement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TMap<class UPlayerCharacterID*, class UClass*>) Campaigns                                              OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TMap<class UPlayerCharacterID*, FRetirementCostItem>) RetirementCost                                   OFFSET(get<T>, {0x50, 80, 0, 0})
	CMember(TArray<float>)                             CreditsCostMultipliers                                      OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<float>)                             ResourceCostMultipliers                                     OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Struct /Script/FSD.GDPlayerAndCharacterProgression
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FGDPlayerAndCharacterProgression : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	CMember(TArray<TSoftObjectPtr<UClass*>>)           RankedHeroClasses                                           OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           TestHeroClasses                                             OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<class UClass*>)                     LoadedClasses                                               OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FText>)                             PlayerRankNames                                             OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<int32_t>)                           CharacterXPLevels                                           OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TMap<FGuid, class UPlayerCharacterID*>)    PlayerCharacterIDs                                          OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Struct /Script/FSD.AssetsToLoadSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FAssetsToLoadSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ActorsPermanently                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.GameData
/// Size: 0x07C8 (0x000028 - 0x0007F0)
class UGameData : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2032;

public:
	CMember(class UKPISettings*)                       KPI_Settings                                                OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FGVisibilityGroups)                        VisibilityGroups                                            OFFSET(getStruct<T>, {0x30, 88, 0, 0})
	CMember(class UPromotionRewardsSettings*)          PromotionRewardsSettings                                    OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UWeaponMaintenanceSettings*)         WeaponMaintenanceSettings                                   OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UPropHuntSettings*)                  PropHuntSettings                                            OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UFSDEventCollection*)                FsdEventsSettings                                           OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UGameActivitySettings*)              GameActivitySettings                                        OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UDanceSettings*)                     DanceSettings                                               OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UGameAnimationSettings*)             AnimationSettings                                           OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UEnemySettings*)                     EnemySettings                                               OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UDamageSettings*)                    DamageSettings                                              OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UPlanetZoneSetup*)                   ZoneSettings                                                OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UTreasureSettings*)                  TreasureSettings                                            OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UDrinkSettings*)                     DrinkSettings                                               OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UUpgradeSettings*)                   UpgradeSettings                                             OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class USpawnSettings*)                     SpawnSettings                                               OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UVanitySettings*)                    VanitySettings                                              OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UKeyBindingSettings*)                KeyBindingSettings                                          OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UDeepDiveSettings*)                  DeepDiveSettings                                            OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UBEESettings*)                       BEESettings                                                 OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UEncounterSettings*)                 EncounterSettings                                           OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UForginSettings*)                    ForgingSettings                                             OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class USchematicSettings*)                 SchematicSettings                                           OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UItemSkinSettings*)                  SkinSettings                                                OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class USpecialEventSettings*)              SpecialEventSettings                                        OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class UProceduralSettings*)                ProceduralSettings                                          OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UPickaxeSettings*)                   PickaxeSettings                                             OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UFSDTagSettings*)                    TagSettings                                                 OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class UItemSettings*)                      ItemSettings                                                OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UDynamicIconSettings*)               DynamicIconSettings                                         OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class UShowroomSettings*)                  ShowroomSettings                                            OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UVictoryPoseSettings*)               VictoryPoseSettings                                         OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UFSDTutorialSettings*)               TutorialSettings                                            OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class ULegacySettings*)                    LegacySettings                                              OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class UEffectSettings*)                    EffectSettings                                              OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class UAfflictionSettings*)                AfflictionSettings                                          OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(class UCommunityGoalSettings*)             CommunityGoalSettings                                       OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class UDailyDealSettings*)                 DailyDealSettings                                           OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UTerrainMaterialSettings*)           TerrainMaterialSettings                                     OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(class USaveGameSettings*)                  SaveGameSettings                                            OFFSET(get<T>, {0x1B0, 8, 0, 0})
	SMember(FGDItemCategoryIDs)                        ItemCategoryIDs                                             OFFSET(getStruct<T>, {0x1B8, 64, 0, 0})
	CMember(TArray<class UTexture2D*>)                 LoadoutIconList                                             OFFSET(get<T>, {0x1F8, 16, 0, 0})
	CMember(class UMinersManual*)                      MinersManual                                                OFFSET(get<T>, {0x208, 8, 0, 0})
	SMember(FGDDamageClasses)                          DamageClasses                                               OFFSET(getStruct<T>, {0x210, 104, 0, 0})
	SMember(FGDStats)                                  Stats                                                       OFFSET(getStruct<T>, {0x278, 328, 0, 0})
	SMember(FGDResources)                              Resources                                                   OFFSET(getStruct<T>, {0x3C0, 256, 0, 0})
	SMember(FGDTerrainTypes)                           TerrainTypes                                                OFFSET(getStruct<T>, {0x4C0, 16, 0, 0})
	SMember(FGDGameStatsTracking)                      GameStatsTracking                                           OFFSET(getStruct<T>, {0x4D0, 32, 0, 0})
	SMember(FGDAudio)                                  Audio                                                       OFFSET(getStruct<T>, {0x4F0, 72, 0, 0})
	SMember(FGDDifficulty)                             Difficulty                                                  OFFSET(getStruct<T>, {0x538, 32, 0, 0})
	CMember(class UStatusEffectSettings*)              StatusEffects                                               OFFSET(get<T>, {0x558, 8, 0, 0})
	SMember(FGDCharacterRetirement)                    Retirement                                                  OFFSET(getStruct<T>, {0x560, 192, 0, 0})
	SMember(FGDPlayerAndCharacterProgression)          PlayerAndCharacterProgression                               OFFSET(getStruct<T>, {0x620, 160, 0, 0})
	CMember(class UCharacterSettings*)                 CharacterSettings                                           OFFSET(get<T>, {0x6C0, 8, 0, 0})
	CMember(class UAchievementList*)                   Achievements                                                OFFSET(get<T>, {0x6C8, 8, 0, 0})
	CMember(class UGlobalMissionSetup*)                MissionSetup                                                OFFSET(get<T>, {0x6D0, 8, 0, 0})
	CMember(class USeasonSettings*)                    SeasonSettings                                              OFFSET(get<T>, {0x6D8, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 DefaultCharacterID                                          OFFSET(get<T>, {0x6E0, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 DefaultEditorCharacterID                                    OFFSET(get<T>, {0x6E8, 8, 0, 0})
	SMember(FGameplayTag)                              XBoxExcludeRoomTag                                          OFFSET(getStruct<T>, {0x6F0, 8, 0, 0})
	SMember(FAssetsToLoadSettings)                     AssetsToLoad                                                OFFSET(getStruct<T>, {0x7E0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.GameData.UnloadPreloadedAssets
	// void UnloadPreloadedAssets();                                                                                            // [0xbd29a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameData.LoadDefaultAssetsBlocking
	// void LoadDefaultAssetsBlocking(class UAsyncManager* AsyncManager);                                                       // [0x18c9240] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameData.IsCheatConsolesEnabled
	// bool IsCheatConsolesEnabled();                                                                                           // [0xbbbc60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetRankedHeroIDs
	// TArray<UPlayerCharacterID*> GetRankedHeroIDs();                                                                          // [0x18c90d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetPlayerRankName
	// FText GetPlayerRankName(int32_t Rank);                                                                                   // [0x18c8fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetPlayerCharacterID
	// class UPlayerCharacterID* GetPlayerCharacterID(FGuid& ID);                                                               // [0x18c8f00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetPerkData
	// FGDPerks GetPerkData();                                                                                                  // [0x18c8db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetMissionStats
	// FGDMissionStats GetMissionStats();                                                                                       // [0x18c8d70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetMileStonesData
	// FGDMilestones GetMileStonesData();                                                                                       // [0x18c8d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetInventoryList
	// class UInventoryList* GetInventoryList(class UPlayerCharacterID* characterID);                                           // [0x18c8c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetDifficultySettingIndex
	// int32_t GetDifficultySettingIndex(class UDifficultySetting* InDifficulty);                                               // [0x18c8bf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetDifficultySetting
	// class UDifficultySetting* GetDifficultySetting(int32_t Index);                                                           // [0x18c8b50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetDifficultyIndex
	// int32_t GetDifficultyIndex(class UDifficultySetting* Difficulty);                                                        // [0x18c8ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetDefaultEditorCharacter
	// class UClass* GetDefaultEditorCharacter();                                                                               // [0x18c8a70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetDefaultCharacter
	// class UClass* GetDefaultCharacter();                                                                                     // [0x18c8a30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetCharacterRetirementCost
	// FRetirementCostItem GetCharacterRetirementCost(class UObject* WorldContext, class UPlayerCharacterID* ID);               // [0x18c8860] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetAllVisibilityGroups
	// TArray<UHUDVisibilityGroup*> GetAllVisibilityGroups();                                                                   // [0x18c8660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetAllMissionStats
	// TArray<UMissionStat*> GetAllMissionStats();                                                                              // [0x18c85e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetAllMilestones
	// TArray<UMilestoneAsset*> GetAllMilestones();                                                                             // [0x18c85a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameData.GetAllInfirmaryStats
	// TArray<UMissionStat*> GetAllInfirmaryStats();                                                                            // [0x18c8520] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.GDMissionStats
/// Size: 0x0168 (0x000000 - 0x000168)
class FGDMissionStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(class UMissionStat*)                       TimePlayed                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UMissionStat*)                       DistanceTravelled                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UMissionStat*)                       EnemiesKilled                                               OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UMissionStat*)                       MineralsMined                                               OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UMissionStat*)                       MissionCompleted                                            OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UMissionStat*)                       SoloMissionCompleted                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UMissionStat*)                       SecondaryMissionCompleted                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMissionStat*)                       CharacterLevelUp                                            OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UMissionStat*)                       VanityItemsBought                                           OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UMissionStat*)                       ItemUpgradesBought                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UMissionStat*)                       CosmeticMasteryLevelledUp                                   OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UMissionStat*)                       DrinkablesConsumed                                          OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UMissionStat*)                       DrinkableRoundsOrdered                                      OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UMissionStat*)                       BartenderCreditsTipped                                      OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UMissionStat*)                       CampaignMissionsCompleted                                   OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UMissionStat*)                       CampaignsCompleted                                          OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UMissionStat*)                       TimesDowned                                                 OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UMissionStat*)                       TimesPassedOut                                              OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UMissionStat*)                       WeaponsUnlockedStat                                         OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UMissionStat*)                       SeasonEventsCompleted                                       OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UMissionStat*)                       SeasonChallengesCompleted                                   OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UMissionStat*)                       DeepDivesCompleted                                          OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UMissionStat*)                       EliteDeepDivesCompleted                                     OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UMissionStat*)                       CosmeticsCrafted                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UMissionStat*)                       WeaponSkinsCrafted                                          OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UMissionStat*)                       WeaponOverclocksCrafted                                     OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UMissionStat*)                       CraftingMasteryLevel                                        OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UMissionStat*)                       DefendBlackBoxObjectivesCompleted                           OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UMissionStat*)                       RepairMiniMuleObjectivesCompleted                           OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UMissionStat*)                       DeepDiveCompletedBestTime                                   OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UMissionStat*)                       EliteDeepDiveCompletedBestTime                              OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UMissionStat*)                       SpecialBeersUnlocked                                        OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UMissionStat*)                       JettyBootCreditsSpent                                       OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TArray<class UMissionStat*>)               AllMissionStats                                             OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TMap<class UPlayerCharacterID*, class UMissionStat*>) CharacterMissionsCompleted                       OFFSET(get<T>, {0x118, 80, 0, 0})
};

/// Struct /Script/FSD.GDMilestones
/// Size: 0x0010 (0x000000 - 0x000010)
class FGDMilestones : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UMilestoneAsset*>)            Milestones                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.GDPerks
/// Size: 0x0090 (0x000000 - 0x000090)
class FGDPerks : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UPerkAsset*>)                 PerkAssets                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<int32_t>)                           RequiredClaimsPerTier                                       OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(class UFloatPerkAsset*)                    IronWill                                                    OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    DashPerk                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    MarathonPerk                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    ShieldLink                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    Bezerk                                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    JumpBoots                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    ImpactCompensators                                          OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    BeastMaster                                                 OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    DownedBomb                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    FieldMedic                                                  OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    HeightenedSenses                                            OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    HoverBoots                                                  OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    ActivePerkSlots                                             OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UFloatPerkAsset*)                    PassivePerkSlots                                            OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/FSD.KPISettings
/// Size: 0x0208 (0x000030 - 0x000238)
class UKPISettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	SMember(FGDMissionStats)                           MissionStats                                                OFFSET(getStruct<T>, {0x30, 360, 0, 0})
	SMember(FGDMilestones)                             Milestones                                                  OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	SMember(FGDPerks)                                  perks                                                       OFFSET(getStruct<T>, {0x1A8, 144, 0, 0})
};

/// Class /Script/FSD.DLCBase
/// Size: 0x0000 (0x000030 - 0x000030)
class UDLCBase : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/FSD.DLCBase.QueryAllDLC
	// void QueryAllDLC();                                                                                                      // [0x18cf610] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.DLCBase.IsUnlocked
	// bool IsUnlocked();                                                                                                       // [0x1153030] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.DLCBase.IsDLCUnLocked
	// bool IsDLCUnLocked(class UDLCBase* DLC);                                                                                 // [0x18ceeb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GameDLC
/// Size: 0x01E8 (0x000030 - 0x000218)
class UGameDLC : public UDLCBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	DMember(bool)                                      bFakeUnlockedStateInEditor                                  OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(bool)                                      bEditorUnlockedState                                        OFFSET(get<bool>, {0x39, 1, 0, 0})
	DMember(int32_t)                                   SteamID                                                     OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FString)                                   SteamName                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   OddishID                                                    OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FString)                                   XBoxDLCName                                                 OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	CMember(TMap<FString, FString>)                    SonyAdditionalContentLabelMap                               OFFSET(get<T>, {0x70, 80, 0, 0})
	SMember(FString)                                   UWPStoreID                                                  OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(bool)                                      ShowOnDLCScreen                                             OFFSET(get<bool>, {0xD0, 1, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         banner                                                      OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Banner_16                                                   OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         InfoScreenOverlay                                           OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AnnouncementWidget                                          OFFSET(get<T>, {0x150, 40, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	CMember(TMap<class UResourceData*, int32_t>)       Resources                                                   OFFSET(get<T>, {0x188, 80, 0, 0})
	DMember(int32_t)                                   PerformancePoints                                           OFFSET(get<int32_t>, {0x1D8, 4, 0, 0})
	CMember(TWeakObjectPtr<class UFileMediaSource*>)   Movie                                                       OFFSET(get<T>, {0x1E0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GameDLC.ShouldBeAnnounced
	// bool ShouldBeAnnounced(class UObject* WorldContext);                                                                     // [0x18cfbc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameDLC.OpenStorePage
	// bool OpenStorePage(class UObject* WorldContext);                                                                         // [0x18cf4d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameDLC.MarkAnnounced
	// void MarkAnnounced(class UObject* WorldContext);                                                                         // [0x18cf070] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GameDLC.GetSonyAdditionalContentId
	// FString GetSonyAdditionalContentId();                                                                                    // [0x18ced60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameDLC.GetInfoScreenOverlay
	// class UTexture2D* GetInfoScreenOverlay();                                                                                // [0x18cec20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameDLC.GetBanner_16
	// class UTexture2D* GetBanner_16();                                                                                        // [0x18ceb70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GameDLC.GetBanner
	// class UTexture2D* GetBanner();                                                                                           // [0x18ceb40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.GameDLCSettings
/// Size: 0x0050 (0x000030 - 0x000080)
class UGameDLCSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TSet<UGameDLC*>)                           StoreDLCs                                                   OFFSET(get<T>, {0x30, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.GameDLCSettings.GetStoreDLCs
	// TArray<UGameDLC*> GetStoreDLCs(class UObject* WorldContext);                                                             // [0x18cedd0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameDLCSettings.GetAnnouncableDLCs
	// TArray<UGameDLC*> GetAnnouncableDLCs(class UObject* WorldContext);                                                       // [0x18cea60] Final|Native|Protected|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.TimedDLC
/// Size: 0x0010 (0x000030 - 0x000040)
class UTimedDLC : public UDLCBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FDateTime)                                 StartDate                                                   OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FDateTime)                                 EndDate                                                     OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.AlwaysLockedDLC
/// Size: 0x0000 (0x000030 - 0x000030)
class UAlwaysLockedDLC : public UDLCBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.PlatformExclusiveDLC
/// Size: 0x0008 (0x000030 - 0x000038)
class UPlatformExclusiveDLC : public UDLCBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(EFSDTargetPlatform)                        Platform                                                    OFFSET(get<T>, {0x30, 1, 0, 0})
};

/// Class /Script/FSD.AndDLC
/// Size: 0x0010 (0x000030 - 0x000040)
class UAndDLC : public UDLCBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UDLCBase*>)                   DLCs                                                        OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.OrDLC
/// Size: 0x0010 (0x000030 - 0x000040)
class UOrDLC : public UDLCBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UDLCBase*>)                   DLCs                                                        OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.NotDLC
/// Size: 0x0008 (0x000030 - 0x000038)
class UNotDLC : public UDLCBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UDLCBase*)                           DLC                                                         OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.EventSpawnTimer
/// Size: 0x0000 (0x000220 - 0x000220)
class AEventSpawnTimer : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:


	/// Functions
	// Function /Script/FSD.EventSpawnTimer.StopTimer
	// void StopTimer();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.EventRewardFrame
/// Size: 0x0030 (0x000220 - 0x000250)
class AEventRewardFrame : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(class USpecialEventUsableComponent*)       EventUsable                                                 OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TArray<class AEventRewardDispenser*>)      Dispensers                                                  OFFSET(get<T>, {0x228, 16, 0, 0})
	DMember(bool)                                      keyInserted                                                 OFFSET(get<bool>, {0x238, 1, 0, 0})
	CMember(TArray<FString>)                           EventPlayerIDs                                              OFFSET(get<T>, {0x240, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.EventRewardFrame.TurnOff
	// void TurnOff();                                                                                                          // [0x18cff00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EventRewardFrame.SetKeyInserted
	// void SetKeyInserted(bool keyInserted);                                                                                   // [0x18cf870] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EventRewardFrame.SetDispenseRewards
	// void SetDispenseRewards(bool dispensRewards);                                                                            // [0x18cf750] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EventRewardFrame.RegisterDispenser
	// void RegisterDispenser(class AEventRewardDispenser* Dispenser);                                                          // [0x18cf630] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.EventRewardFrame.GetDispensRewards
	// bool GetDispensRewards();                                                                                                // [0x18ceba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EventRewardDispenser
/// Size: 0x0040 (0x000220 - 0x000260)
class AEventRewardDispenser : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	SMember(FUniqueNetIdRepl)                          PlayerId                                                    OFFSET(getStruct<T>, {0x220, 40, 0, 0})
	CMember(class AEventRewardFrame*)                  DispenserFrame                                              OFFSET(get<T>, {0x248, 8, 0, 0})
	DMember(bool)                                      PoweredUp                                                   OFFSET(get<bool>, {0x250, 1, 0, 0})
	DMember(bool)                                      IsActivated                                                 OFFSET(get<bool>, {0x251, 1, 0, 0})
	CMember(class USchematic*)                         SelectedReward                                              OFFSET(get<T>, {0x258, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.EventRewardDispenser.SetSelectedReward
	// void SetSelectedReward(class USchematic* InReward);                                                                      // [0x18cfa10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EventRewardDispenser.PowerUp
	// bool PowerUp(class APlayerCharacter* InPlayerCharacter);                                                                 // [0x18cf570] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EventRewardDispenser.OnRewardSelected
	// void OnRewardSelected();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EventRewardDispenser.OnRep_SelectedReward
	// void OnRep_SelectedReward();                                                                                             // [0x18cf380] Final|Native|Protected 
	// Function /Script/FSD.EventRewardDispenser.OnRep_PoweredUp
	// void OnRep_PoweredUp();                                                                                                  // [0x18cf360] Final|Native|Protected 
	// Function /Script/FSD.EventRewardDispenser.OnRep_PlayerId
	// void OnRep_PlayerId();                                                                                                   // [0x18cf340] Final|Native|Protected 
	// Function /Script/FSD.EventRewardDispenser.OnRep_IsActivated
	// void OnRep_IsActivated();                                                                                                // [0x18cf2c0] Final|Native|Protected 
	// Function /Script/FSD.EventRewardDispenser.OnPoweredUp
	// void OnPoweredUp();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EventRewardDispenser.OnOwnerAssigned
	// void OnOwnerAssigned();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EventRewardDispenser.OnOpenDispenser
	// void OnOpenDispenser();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EventRewardDispenser.IsOwningPlayer
	// bool IsOwningPlayer(class APlayerCharacter* PlayerCharacter);                                                            // [0x18cefd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EventRewardDispenser.GetPlayerCharacter
	// class APlayerCharacter* GetPlayerCharacter();                                                                            // [0x18cecd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.EventRewardDispenser.GetPlayer
	// class AFSDPlayerState* GetPlayer();                                                                                      // [0x18ceca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EventRewardType
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UEventRewardType : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         IconFront                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         IconBack                                                    OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FLinearColor)                              IconFrontTint                                               OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FLinearColor)                              IconBackTint                                                OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	SMember(FLinearColor)                              BackgroundTint                                              OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
};

/// Class /Script/FSD.EventStarterButton
/// Size: 0x0028 (0x000220 - 0x000248)
class AEventStarterButton : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USingleUsableComponent*)             Usable                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBootupEvent                                               OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	DMember(bool)                                      Booted                                                      OFFSET(get<bool>, {0x244, 1, 0, 0})
	DMember(bool)                                      IsOpenForUse                                                OFFSET(get<bool>, {0x245, 1, 0, 0})
	DMember(bool)                                      IsEventActive                                               OFFSET(get<bool>, {0x246, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.EventStarterButton.SetIsEventActive
	// void SetIsEventActive(bool IsEventActive);                                                                               // [0x18cf7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EventStarterButton.OnUseProgress
	// void OnUseProgress(float Progress);                                                                                      // [0x18cf450] Final|Native|Public  
	// Function /Script/FSD.EventStarterButton.OnRep_OpenForUse
	// void OnRep_OpenForUse();                                                                                                 // [0x18cf320] Final|Native|Protected 
	// Function /Script/FSD.EventStarterButton.OnRep_Booted
	// void OnRep_Booted();                                                                                                     // [0x18cf240] Final|Native|Protected 
	// Function /Script/FSD.EventStarterButton.OnOpenedForUse
	// void OnOpenedForUse(bool wasOpened);                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.EventStarterButton.OnBooted
	// void OnBooted();                                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EventStarterButton.CloseForUse
	// void CloseForUse(class APlayerCharacter* User, EInputKeys Key);                                                          // [0x18ce700] Final|Native|Public  
	// Function /Script/FSD.EventStarterButton.BootUpEvent
	// void BootUpEvent();                                                                                                      // [0x18ce6c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.GameEventAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UGameEventAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(float)                                     StageProgress                                               OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(bool)                                      IsEventActive                                               OFFSET(get<bool>, {0x2BC, 1, 0, 0})
	DMember(bool)                                      AreEventStartersActive                                      OFFSET(get<bool>, {0x2BD, 1, 0, 0})
	DMember(bool)                                      EventFailed                                                 OFFSET(get<bool>, {0x2BE, 1, 0, 0})
};

/// Class /Script/FSD.EventStarterAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UEventStarterAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(float)                                     UseProgress                                                 OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(bool)                                      IsOpenForUse                                                OFFSET(get<bool>, {0x2BC, 1, 0, 0})
	DMember(bool)                                      IsBooted                                                    OFFSET(get<bool>, {0x2BD, 1, 0, 0})
	DMember(bool)                                      IsEventActive                                               OFFSET(get<bool>, {0x2BE, 1, 0, 0})
};

/// Class /Script/FSD.CoreInfuserAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UCoreInfuserAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      PoweredUp                                                   OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      IsOpen                                                      OFFSET(get<bool>, {0x2B9, 1, 0, 0})
	DMember(bool)                                      IsRewardSelected                                            OFFSET(get<bool>, {0x2BA, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CoreInfuserAnimInstance.OnRewardSelected
	// void OnRewardSelected();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.CoreInfuserPlatformAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UCoreInfuserPlatformAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      keyInserted                                                 OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      dispensRewards                                              OFFSET(get<bool>, {0x2B9, 1, 0, 0})
};

/// Class /Script/FSD.EventParticipant
/// Size: 0x0000 (0x000028 - 0x000028)
class UEventParticipant : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.EventParticipant.SetupEvent
	// bool SetupEvent(class AGameEvent* GameEvent);                                                                            // [0x18cfb20] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EventParticipant.OnEventTriggered
	// void OnEventTriggered();                                                                                                 // [0x18cf220] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EventParticipant.OnEventProgress
	// void OnEventProgress(float Progress);                                                                                    // [0x18cf190] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EventParticipant.OnEventOpened
	// void OnEventOpened();                                                                                                    // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EventParticipant.OnEventFinished
	// void OnEventFinished(bool eventSuccess);                                                                                 // [0x18cf100] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EventParticipant.AdvanceOneObjective
	// bool AdvanceOneObjective();                                                                                              // [0x18ce690] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.EventParticipant.AddEventProgress
	// bool AddEventProgress(float Progress);                                                                                   // [0x18ce580] Native|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.GameFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UGameFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.GameFunctionLibrary.SpawnOrUpdateAudio2D
	// void SpawnOrUpdateAudio2D(class UObject* WorldContext, class UAudioComponent*& AudioComponent, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, FName FloatParamName, float FloatParam); // [0x18d3f20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.GameFunctionLibrary.SetUsePushToTalk
	// void SetUsePushToTalk(bool enable);                                                                                      // [0x18d3ea0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.GameFunctionLibrary.SetGlobalGravityZ
	// void SetGlobalGravityZ(class UObject* WorldContextObject, float GravityZ);                                               // [0x18d3de0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.GameFunctionLibrary.SetGlobalGravityScale
	// void SetGlobalGravityScale(class UObject* WorldContextObject, float GravityScale);                                       // [0x18d3d20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.GameFunctionLibrary.IsWorldTickEnabled
	// bool IsWorldTickEnabled(class UObject* WorldContextObject);                                                              // [0x18d3a10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.IsTearingDown
	// void IsTearingDown(class UObject* caller, bool& IsTearingDown);                                                          // [0x18d3930] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.IsPlayingOffline
	// bool IsPlayingOffline(class UObject* WorldContextObject);                                                                // [0x18d38a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.IsPlayInEditor
	// bool IsPlayInEditor(class UObject* WorldContextObject);                                                                  // [0x18d3810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetWindowManager
	// class UWindowManager* GetWindowManager(class UObject* WorldContextObject);                                               // [0x18d36b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetUsePushToTalk
	// bool GetUsePushToTalk();                                                                                                 // [0x18d3680] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetTopWindow
	// class UWindowWidget* GetTopWindow(class UObject* WorldContextObject);                                                    // [0x18d35f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetProjectVersion
	// FString GetProjectVersion();                                                                                             // [0x18d3570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetNumPlayers
	// int32_t GetNumPlayers(class UObject* WorldContext, bool onlyAlive);                                                      // [0x18d34a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetNumAdditionalPlayers
	// int32_t GetNumAdditionalPlayers(class UObject* WorldContext);                                                            // [0x18d3410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetMajorProjectVersion
	// FString GetMajorProjectVersion();                                                                                        // [0x18d3390] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetLocalPlayerCharacter
	// class APlayerCharacter* GetLocalPlayerCharacter(class UObject* WorldContext);                                            // [0x18d3300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetGoogleAnalyticsWrapper
	// class UGoogleAnalyticsWrapper* GetGoogleAnalyticsWrapper(class UObject* WorldContextObject);                             // [0x18d3270] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetGlobalGravityZ
	// float GetGlobalGravityZ(class UObject* WorldContextObject);                                                              // [0x18d31e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetFSDSRGameMode
	// class AFSDGameModeSpaceRig* GetFSDSRGameMode(class UObject* WorldContextObject);                                         // [0x18d3030] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetFSDSaveGame
	// class UFSDSaveGame* GetFSDSaveGame(class UObject* WorldContextObject);                                                   // [0x18d30c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetFSDGameState
	// class AFSDGameState* GetFSDGameState(class UObject* WorldContextObject);                                                 // [0x18d2fa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetFSDGameMode
	// class AFSDGameMode* GetFSDGameMode(class UObject* WorldContextObject);                                                   // [0x18d2f10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetFSDGameInstance
	// class UFSDGameInstance* GetFSDGameInstance(class UObject* WorldContextObject);                                           // [0x18d2e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetFSDGameData
	// class UGameData* GetFSDGameData();                                                                                       // [0x18d2e50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetFrameRateInHz
	// float GetFrameRateInHz(class UObject* WorldContextObject);                                                               // [0x18d3150] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetDeepDiveManager
	// TScriptInterface<Class> GetDeepDiveManager(class UObject* WorldContextObject);                                           // [0x18d2db0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetCSGWorld
	// class ADeepCSGWorld* GetCSGWorld(class UObject* WorldContextObject);                                                     // [0x18d2c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetChangelist
	// int32_t GetChangelist();                                                                                                 // [0x18d2d80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetCampaingManager
	// class UCampaignManager* GetCampaingManager(class UObject* WorldContextObject);                                           // [0x18d2cf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameFunctionLibrary.GetAsyncManager
	// class UAsyncManager* GetAsyncManager(class UObject* WorldContextObject);                                                 // [0x18d2bd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GameModeFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UGameModeFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.GameModeFunctionLibrary.IsCloseToImportantLocation
	// bool IsCloseToImportantLocation(class AFSDGameState* GameState, FVector& Location);                                      // [0x18d3740] Final|Native|Static|Private|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.GameModeFunctionLibrary.FindEscapePodLocationAtDistance
	// FTransform FindEscapePodLocationAtDistance(class UObject* WorldContextObject, float Distance, float aboveDistanceBias, class AActor* optionalFrom); // [0x18d2a30] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GameModeFunctionLibrary.AddSeamlessTravelEventKey
	// void AddSeamlessTravelEventKey(class UObject* WorldContextObject, class USeamlessTravelEventKey* Key);                   // [0x18d2970] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.GameStats
/// Size: 0x0020 (0x000220 - 0x000240)
class AGameStats : public AInfo
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(int32_t)                                   NumberOfPlayersEscapedInPod                                 OFFSET(get<int32_t>, {0x220, 4, 0, 0})
	DMember(float)                                     TotalGoldMined                                              OFFSET(get<float>, {0x224, 4, 0, 0})
	DMember(int32_t)                                   TotalEnemiesKilled                                          OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(int32_t)                                   MissionHaz                                                  OFFSET(get<int32_t>, {0x22C, 4, 0, 0})
	CMember(TArray<class USeamlessTravelEventKey*>)    EventKeys                                                   OFFSET(get<T>, {0x230, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.GameStats.OnPlayerMinedGold
	// void OnPlayerMinedGold(class UCappedResource* Resource, float amount);                                                   // [0x18d3aa0] Final|Native|Public  
};

/// Class /Script/FSD.GasCloud
/// Size: 0x0000 (0x000220 - 0x000220)
class AGasCloud : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:


	/// Functions
	// Function /Script/FSD.GasCloud.Ignite
	// void Ignite();                                                                                                           // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.GasCloud.Freeze
	// void Freeze();                                                                                                           // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.ResourceBasedObjective
/// Size: 0x0000 (0x000180 - 0x000180)
class UResourceBasedObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/FSD.GatherGemsObjective
/// Size: 0x0018 (0x000180 - 0x000198)
class UGatherGemsObjective : public UResourceBasedObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	DMember(int32_t)                                   GemsRequired                                                OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(float)                                     GemsSpawnedModifier                                         OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(int32_t)                                   GemsCollected                                               OFFSET(get<int32_t>, {0x188, 4, 0, 0})
	CMember(class UGemResourceData*)                   GemResource                                                 OFFSET(get<T>, {0x190, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GatherGemsObjective.OnResourceChanged
	// void OnResourceChanged(class UCappedResource* CappedResource, float amount);                                             // [0x18d3c50] Final|Native|Protected 
	// Function /Script/FSD.GatherGemsObjective.OnRep_GemsCollected
	// void OnRep_GemsCollected(int32_t prevAmount);                                                                            // [0x17d4d70] Final|Native|Protected 
};

/// Class /Script/FSD.GatheItemsObjective
/// Size: 0x0018 (0x000180 - 0x000198)
class UGatheItemsObjective : public UResourceBasedObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	DMember(int32_t)                                   ItemsRequired                                               OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(float)                                     ItemsSpawnedModifier                                        OFFSET(get<float>, {0x184, 4, 0, 0})
	DMember(int32_t)                                   ItemsCollected                                              OFFSET(get<int32_t>, {0x188, 4, 0, 0})
	CMember(class UCollectableResourceData*)           ItemResource                                                OFFSET(get<T>, {0x190, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GatheItemsObjective.OnResourceChanged
	// void OnResourceChanged(class UCappedResource* CappedResource, float amount);                                             // [0x18d3b80] Final|Native|Protected 
	// Function /Script/FSD.GatheItemsObjective.OnRep_ItemsCollected
	// void OnRep_ItemsCollected(int32_t prevAmount);                                                                           // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.GatheItemsObjective.AddItemCollected
	// void AddItemCollected(int32_t Count);                                                                                    // [0x18d28e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.Gem
/// Size: 0x0018 (0x000268 - 0x000280)
class AGem : public ACarriableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class UCarriableInstantUsable*)            Usable                                                      OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UResourceData*)                      ResourceType                                                OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(float)                                     ResourceAmount                                              OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(bool)                                      hasBeenReleased                                             OFFSET(get<bool>, {0x27C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.Gem.SetHasBeenReleased
	// void SetHasBeenReleased(bool hasBeenReleased);                                                                           // [0x18d8bc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Gem.GetHasBeenReleased
	// bool GetHasBeenReleased();                                                                                               // [0x18d7810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.GemTracker
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UGemTracker : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	DMember(float)                                     CustomValue                                                 OFFSET(get<float>, {0xB8, 4, 0, 0})
};

/// Struct /Script/FSD.TrackPositionList
/// Size: 0x0038 (0x000000 - 0x000038)
class FTrackPositionList : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FName)                                     TrackName                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<FVector4>)                          Positions                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UGemTracker*>>)      Trackers                                                    OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UMaterialInstanceDynamic*>>) DynamicMaterials                                    OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.GemProximityTracker
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UGemProximityTracker : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TArray<TWeakObjectPtr<UGemTracker*>>)      Trackers                                                    OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FTrackPositionList>)                TrackerLists                                                OFFSET(get<T>, {0xC0, 16, 0, 0})
};

/// Class /Script/FSD.GemResourceData
/// Size: 0x0070 (0x0000F0 - 0x000160)
class UGemResourceData : public UResourceData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(class UDebrisPositioning*)                 DebrisPositioning                                           OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(bool)                                      CheckIfCompletelyCoveredByTerrain                           OFFSET(get<bool>, {0xF8, 1, 0, 0})
	SMember(FIRandRange)                               GemValue                                                    OFFSET(getStruct<T>, {0xFC, 8, 0, 0})
	CMember(class UGemResourceCreator*)                ResourceCreator                                             OFFSET(get<T>, {0x108, 8, 0, 0})
	DMember(float)                                     InfluencerRange                                             OFFSET(get<float>, {0x110, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<UDebrisBase*>>)      Debris                                                      OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           GemClasses                                                  OFFSET(get<T>, {0x128, 16, 0, 0})
	DMember(float)                                     ImportantRadius                                             OFFSET(get<float>, {0x138, 4, 0, 0})
	CMember(TArray<class UClass*>)                     GemClassesLoaded                                            OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(TArray<class UDebrisBase*>)                DebrisLoaded                                                OFFSET(get<T>, {0x150, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.GemResourceData.GetCollectedGemsCreditValue
	// int32_t GetCollectedGemsCreditValue(class AFSDGameState* GameState);                                                     // [0x18d7650] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GemResourceData.GetCollectedGemsAmount
	// int32_t GetCollectedGemsAmount(class AFSDGameState* GameState);                                                          // [0x18d75c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GemResourceCreator
/// Size: 0x0010 (0x000030 - 0x000040)
class UGemResourceCreator : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UGemResourceData*)                   ResourceData                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      CheckIfFreeSpaceAbove                                       OFFSET(get<bool>, {0x38, 1, 0, 0})
	DMember(int32_t)                                   SearchSize                                                  OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
};

/// Class /Script/FSD.RandomGemResourceCreator
/// Size: 0x0008 (0x000040 - 0x000048)
class URandomGemResourceCreator : public UGemResourceCreator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UCurveFloat*)                        PlacementDistanceProbabilityCurve                           OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.DistributedGemResourceCreator
/// Size: 0x0008 (0x000040 - 0x000048)
class UDistributedGemResourceCreator : public UGemResourceCreator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     MinDistanceBetweenGems                                      OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Struct /Script/FSD.GMMutatorItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FGMMutatorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UMutator*>)                   Mutators                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.GeneratedMission
/// Size: 0x0108 (0x000028 - 0x000130)
class UGeneratedMission : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(class UBiome*)                             Biome                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FGlobalMissionSeed)                        GlobalSeed                                                  OFFSET(getStruct<T>, {0x34, 12, 0, 0})
	CMember(class UMissionTemplate*)                   Template                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FText)                                     MissionName                                                 OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(class UClass*)                             PrimaryObjective                                            OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<class UClass*>)                     SecondaryObjectives                                         OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TMap<class UClass*, FGMMutatorItem>)       Mutators                                                    OFFSET(get<T>, {0x78, 80, 0, 0})
	CMember(TArray<class UMissionWarning*>)            MissionWarnings                                             OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(class UMissionMutator*)                    MissionMutator                                              OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UMissionChallenge*)                  MissionChallenge                                            OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UMissionComplexity*)                 ComplexityLimit                                             OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UMissionDuration*)                   DurationLimit                                               OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UClass*)                             MissionDNA                                                  OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(EMissionStructure)                         MissionStructure                                            OFFSET(get<T>, {0x100, 1, 0, 0})
	DMember(bool)                                      IsInSeasonEventZone                                         OFFSET(get<bool>, {0x101, 1, 0, 0})
	DMember(bool)                                      WouldBeInSeasonEventZone                                    OFFSET(get<bool>, {0x102, 1, 0, 0})
	DMember(bool)                                      CanHaveMutators                                             OFFSET(get<bool>, {0x103, 1, 0, 0})
	CMember(TWeakObjectPtr<class ULevelSequence*>)     LoaderLevelSequence                                         OFFSET(get<T>, {0x108, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GeneratedMission.Recieve_SetupPLS
	// void Recieve_SetupPLS(class AProceduralSetup* pls);                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GeneratedMission.IsSingleMission
	// bool IsSingleMission();                                                                                                  // [0x18d7ae0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.IsPlagueMission
	// bool IsPlagueMission();                                                                                                  // [0x18d7ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.IsLocked
	// bool IsLocked(class AFSDPlayerController* Player);                                                                       // [0x18d7a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.IsDeepDive
	// bool IsDeepDive();                                                                                                       // [0x18d79e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.GetSecondaryObjectiveIcon
	// FObjectiveMissionIcon GetSecondaryObjectiveIcon();                                                                       // [0x18d7980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.GetPLS
	// class UClass* GetPLS();                                                                                                  // [0x18d7940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.GetMutators
	// TArray<UMutator*> GetMutators(class UClass* mutatorClass);                                                               // [0x18d78a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.GetMissionScale
	// float GetMissionScale();                                                                                                 // [0x18d7860] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.GetMissionDNA
	// class UMissionDNA* GetMissionDNA();                                                                                      // [0x18d7830] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GeneratedMission.CreatePLS
	// class AProceduralSetup* CreatePLS(int32_t Seed);                                                                         // [0x18d72c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GeneratedMission.AreMissionsEqual
	// bool AreMissionsEqual(class UGeneratedMission* Other);                                                                   // [0x18d7220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.RoomGenerationItem
/// Size: 0x0000 (0x000228 - 0x000228)
class ARoomGenerationItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
};

/// Class /Script/FSD.GetFriendsListBlueprintCallProxy
/// Size: 0x0048 (0x000030 - 0x000078)
class UGetFriendsListBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GetFriendsListBlueprintCallProxy.GetFriendsList
	// class UGetFriendsListBlueprintCallProxy* GetFriendsList(class UObject* WorldContextObject, FString ListName);            // [0x18d76e0] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/FSD.MissionBiomeItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FMissionBiomeItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UBiome*)                             Biome                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Rarity                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.MissionTemplateItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FMissionTemplateItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMissionTemplate*)                   Template                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Rarity                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.GlobalMissionSetup
/// Size: 0x0108 (0x000030 - 0x000138)
class UGlobalMissionSetup : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FIRandRange)                               ExtraBiomes                                                 OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	SMember(FIRandRange)                               AdditionalMissionsForExtraBiomes                            OFFSET(getStruct<T>, {0x38, 8, 0, 0})
	SMember(FIRandRange)                               MissionsPerZone                                             OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	CMember(TArray<FMissionBiomeItem>)                 Biomes                                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FMissionTemplateItem>)              AvailableMissions                                           OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(float)                                     FacilityMutatorChance                                       OFFSET(get<float>, {0x68, 4, 0, 0})
	CMember(class UMissionNameBank*)                   MissionNames                                                OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FIRandRange)                               MutatorWarningCount                                         OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FIRandRange)                               ExtraSeasonWarningCount                                     OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	DMember(float)                                     DoubleWarningChance                                         OFFSET(get<float>, {0x88, 4, 0, 0})
	CMember(class UMissionStat*)                       DoubleWarningStat                                           OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(TArray<class UMissionMutator*>)            Mutators                                                    OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(TArray<class UMissionWarning*>)            Warnings                                                    OFFSET(get<T>, {0xA8, 16, 0, 0})
	CMember(TMap<class UMissionWarning*, class UMissionWarning*>) IncompatibleWarnings                             OFFSET(get<T>, {0xB8, 80, 0, 0})
	CMember(TArray<class UMissionChallenge*>)          Challenges                                                  OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<class UPlanetZone*>)                PlanetZones                                                 OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FRequiredMissionItem>)              GlobalRequiredMissions                                      OFFSET(get<T>, {0x128, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.GlobalMissionSetup.GetAllPossibleMissions
	// TArray<FMissionTemplateItem> GetAllPossibleMissions();                                                                   // [0x18d7380] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.GlowPlant
/// Size: 0x0070 (0x000220 - 0x000290)
class AGlowPlant : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UStaticMeshComponent*)               TrunkMesh                                                   OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UPointLightComponent*)               mainLight                                                   OFFSET(get<T>, {0x248, 8, 0, 0})
	DMember(float)                                     IntensityBase                                               OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     RadiusBase                                                  OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     IntensityPerPart                                            OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     RadiusPerPart                                               OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     IntensityAllParts                                           OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     RadiusAllParts                                              OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     MaxIntensity                                                OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(float)                                     MinIntensity                                                OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(float)                                     TimeOnMaxLight                                              OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     IntensityFadeInTime                                         OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     IntensityFadeOutTime                                        OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     MaxEmissive                                                 OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     MinEmissive                                                 OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     EmissiveFadeInTime                                          OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     EmissiveFadeOutTime                                         OFFSET(get<float>, {0x28C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.GlowPlant.OnDeath
	// void OnDeath();                                                                                                          // [0x1816d70] Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FSD.GlowPlant.OnDamage
	// void OnDamage(class UPrimitiveComponent* hitSphere);                                                                     // [0x182c120] Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable 
};

/// Struct /Script/FSD.PartyAnalyticsInformation
/// Size: 0x0014 (0x000000 - 0x000014)
class FPartyAnalyticsInformation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
};

/// Struct /Script/FSD.DeepDiveAnalyticsInformation
/// Size: 0x000C (0x000000 - 0x00000C)
class FDeepDiveAnalyticsInformation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(bool)                                      WasDeepDive                                                 OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   LastDeepDiveStage                                           OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(bool)                                      EliteDeepDive                                               OFFSET(get<bool>, {0x8, 1, 0, 0})
	DMember(bool)                                      IsReplay                                                    OFFSET(get<bool>, {0x9, 1, 0, 0})
};

/// Class /Script/FSD.GoogleAnalyticsWrapper
/// Size: 0x0128 (0x000028 - 0x000150)
class UGoogleAnalyticsWrapper : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 336;

public:
	SMember(FString)                                   LastUnlockedWeapons                                         OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   LastKnownClass                                              OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   BoscoLoadOut                                                OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(bool)                                      WasCampaign                                                 OFFSET(get<bool>, {0x60, 1, 0, 0})
	SMember(FString)                                   LastCampaignName                                            OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	DMember(int32_t)                                   LastCampaignProgress                                        OFFSET(get<int32_t>, {0x78, 4, 0, 0})
	DMember(bool)                                      WasLastCampaignMission                                      OFFSET(get<bool>, {0x7C, 1, 0, 0})
	DMember(int32_t)                                   LastCampaignSize                                            OFFSET(get<int32_t>, {0x80, 4, 0, 0})
	SMember(FString)                                   LastWeaponsLoadout                                          OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	SMember(FString)                                   LastUpgradesLoadout                                         OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FString)                                   SchematicInformation                                        OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	SMember(FPartyAnalyticsInformation)                PartyInfo                                                   OFFSET(getStruct<T>, {0xB8, 20, 0, 0})
	SMember(FDeepDiveAnalyticsInformation)             DeepDiveInfo                                                OFFSET(getStruct<T>, {0xCC, 12, 0, 0})
	SMember(FString)                                   DiscordCommunityTrackingID                                  OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FString)                                   CommunityGoalsTrackingID                                    OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	DMember(bool)                                      ShouldUpdateSchematicTrackingInformation                    OFFSET(get<bool>, {0x14C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GoogleAnalyticsWrapper.StartMissionPartyInfo
	// void StartMissionPartyInfo(class AFSDGameState* GameState);                                                              // [0x18d8c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.SetShouldUpdateSchematicInformation
	// void SetShouldUpdateSchematicInformation();                                                                              // [0x18d8c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.ResetBoscoLoadout
	// void ResetBoscoLoadout();                                                                                                // [0x18d8ae0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordTotalTimeHit
	// void RecordTotalTimeHit(FString Key, FString Campaign, bool Rank, int32_t Time);                                         // [0x18d8950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordOpenScreen
	// void RecordOpenScreen(FString Key, bool Rank);                                                                           // [0x1855430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordMachineEventEnd
	// void RecordMachineEventEnd(FString EventName, bool WasCompleted, float completionTime);                                  // [0x18d8820] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordKickPlayer
	// void RecordKickPlayer(FString reason, class APlayerController* KickedPlayer);                                            // [0x1855260] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordGAUserTiming
	// void RecordGAUserTiming(FString TimingCategory, int32_t TimingValue, FString TimingName);                                // [0x18d86e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordGaTreeOfVanityClaim
	// void RecordGaTreeOfVanityClaim(int32_t NodeID);                                                                          // [0x18aacd0] Final|Native|Public  
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordGASeasonLevelUp
	// void RecordGASeasonLevelUp();                                                                                            // [0xbd29a0] Final|Native|Public  
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordGAMissionTotalTimeHit
	// void RecordGAMissionTotalTimeHit(FString Key, FString Campaign, bool Rank, int32_t TotalTime, int32_t Progress, int32_t XP, int32_t Credits); // [0x18d84a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordGAMissionTimeEvent
	// void RecordGAMissionTimeEvent(int32_t Time);                                                                             // [0x18aacd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordGAEvent
	// void RecordGAEvent(FString EventCategory, FString EventAction, FString EventLabel, int32_t EventValue, EFSDGoogleAnalyticsProperties Property); // [0x18d82e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordGADeepDiveStageHit
	// void RecordGADeepDiveStageHit(FString Key, bool Rank, int32_t StageTime, int32_t TimeSinceStartOfDive, int32_t TotalTime, int32_t NitraLeft); // [0x18d80f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordGaChallengeReroll
	// void RecordGaChallengeReroll(int32_t ChallengeIndex, class USeasonChallenge* Challenge);                                 // [0x1855510] Final|Native|Public  
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordExtraFailInfo
	// void RecordExtraFailInfo(FString MissionName, FString Stage, FString ExtraText);                                         // [0x18d7fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordCustomGAEvent
	// void RecordCustomGAEvent(FString EventCategory, FString EventAction, FString EventLabel, int32_t EventValue, FString TrackingID); // [0x18d7d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordContinuousDamage
	// void RecordContinuousDamage(class AActor* DamageCauser);                                                                 // [0x1828b70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.RecordBossFightEnd
	// void RecordBossFightEnd(FString BossName, bool WasBossKilled, int32_t BossKills);                                        // [0x1854e00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.ProcessCampaignName
	// FString ProcessCampaignName(class UClass* Campaign);                                                                     // [0x18d7c90] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GoogleAnalyticsWrapper.PlayerLatejoin
	// void PlayerLatejoin();                                                                                                   // [0x18d7c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.PlayerDropout
	// void PlayerDropout();                                                                                                    // [0x18d7c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GoogleAnalyticsWrapper.OnPlayerLeaveBind
	// void OnPlayerLeaveBind(class AFSDPlayerState* PlayerState);                                                              // [0x18d7ba0] Final|Native|Public  
	// Function /Script/FSD.GoogleAnalyticsWrapper.OnPlayerJoinBind
	// void OnPlayerJoinBind(class AFSDPlayerState* PlayerState);                                                               // [0x18d7b10] Final|Native|Public  
	// Function /Script/FSD.GoogleAnalyticsWrapper.HandleMatchStarted
	// void HandleMatchStarted();                                                                                               // [0x18d79c0] Final|Native|Public  
	// Function /Script/FSD.GoogleAnalyticsWrapper.GetAnalyticsFText
	// FString GetAnalyticsFText(FText Text);                                                                                   // [0x18d7400] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GoogleAnalyticsWrapper.EndMissionPartyInfo
	// void EndMissionPartyInfo();                                                                                              // [0x18d7360] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.GooGun
/// Size: 0x00B0 (0x000780 - 0x000830)
class AGooGun : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:
	SMember(FMulticastInlineDelegate)                  OnStartCharging                                             OFFSET(getStruct<T>, {0x780, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndCharging                                               OFFSET(getStruct<T>, {0x790, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnChargingFailed                                            OFFSET(getStruct<T>, {0x7A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnChargeChanged                                             OFFSET(getStruct<T>, {0x7B0, 16, 0, 0})
	DMember(float)                                     ChargeTime                                                  OFFSET(get<float>, {0x7C0, 4, 0, 0})
	DMember(int32_t)                                   ShotCostCharged                                             OFFSET(get<int32_t>, {0x7C4, 4, 0, 0})
	DMember(float)                                     ChargeThreshold                                             OFFSET(get<float>, {0x7C8, 4, 0, 0})
	DMember(float)                                     AutoStopCharingAfterSeconds                                 OFFSET(get<float>, {0x7CC, 4, 0, 0})
	DMember(int32_t)                                   ShotCostCycle                                               OFFSET(get<int32_t>, {0x7D0, 4, 0, 0})
	CMember(EGooGunFireMode)                           FireMode                                                    OFFSET(get<T>, {0x7D4, 1, 0, 0})
	CMember(class USoundCue*)                          FullyChargedFireSound                                       OFFSET(get<T>, {0x7D8, 8, 0, 0})
	DMember(int32_t)                                   ChargedShotCount                                            OFFSET(get<int32_t>, {0x7E0, 4, 0, 0})
	DMember(float)                                     BuckShotSpreadV                                             OFFSET(get<float>, {0x7E4, 4, 0, 0})
	DMember(float)                                     BuckShotSpreadH                                             OFFSET(get<float>, {0x7E8, 4, 0, 0})
	DMember(float)                                     BuckshotArcCompensation                                     OFFSET(get<float>, {0x7EC, 4, 0, 0})
	CMember(class UFXSystemAsset*)                     ChargeupParticles                                           OFFSET(get<T>, {0x7F0, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     ChargeupFireMuzzleFlash                                     OFFSET(get<T>, {0x7F8, 8, 0, 0})
	CMember(class UFXSystemComponent*)                 ChargeupParticleInstance                                    OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_ChargeupMontage                                          OFFSET(get<T>, {0x808, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_ChargeupMontage                                          OFFSET(get<T>, {0x810, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GooGun.OnPuddleSuckedIn
	// void OnPuddleSuckedIn();                                                                                                 // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.GooGun.GetOverChargeProgress
	// float GetOverChargeProgress();                                                                                           // [0x18dbeb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GooGun.GetIsCharging
	// bool GetIsCharging();                                                                                                    // [0x18dbe70] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.GooGun.GetChargeProgress
	// float GetChargeProgress();                                                                                               // [0x18dbd20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GooGun.ChargingDelegate__DelegateSignature
	// void ChargingDelegate__DelegateSignature();                                                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.GooGun.ChargeChangedDelegate__DelegateSignature
	// void ChargeChangedDelegate__DelegateSignature(float charge);                                                             // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.GooGunProjectile
/// Size: 0x0008 (0x000340 - 0x000348)
class AGooGunProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:
	DMember(float)                                     PuddleLifeTime                                              OFFSET(get<float>, {0x340, 4, 0, 0})
	DMember(int32_t)                                   FragmentCount                                               OFFSET(get<int32_t>, {0x344, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.GooGunProjectile.SpawnPuddle
	// class AGooGunPuddle* SpawnPuddle(FTransform Transform, class UClass* PuddleClass);                                       // [0x18dd2c0] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.GooGunProjectile.DealSocketArmorDamage
	// void DealSocketArmorDamage(class AActor* Actor, class UPrimitiveComponent* Target);                                      // [0x18dbc30] Final|Native|Protected|BlueprintCallable 
};

/// Struct /Script/FSD.GooPuddleStatusEffectTrigger
/// Size: 0x0018 (0x000000 - 0x000018)
class FGooPuddleStatusEffectTrigger : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<class UDamageClass*>)               Trigger                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(class UClass*)                             NewStatusEffect                                             OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/FSD.GooGunPuddle
/// Size: 0x0058 (0x000220 - 0x000278)
class AGooGunPuddle : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(class USphereComponent*)                   SphereTrigger                                               OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USimpleHealthComponent*)             SimpleHealth                                                OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USoundBase*)                         SpawnSound                                                  OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(TArray<FGooPuddleStatusEffectTrigger>)     StatusEffectTriggers                                        OFFSET(get<T>, {0x238, 16, 0, 0})
	CMember(TArray<class UClass*>)                     InflictedStatusEffects                                      OFFSET(get<T>, {0x248, 16, 0, 0})
	DMember(int32_t)                                   ActiveStatusEffectTriggersMask                              OFFSET(get<int32_t>, {0x258, 4, 0, 0})
	DMember(float)                                     LifeTime                                                    OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(bool)                                      IsOnFire                                                    OFFSET(get<bool>, {0x260, 1, 0, 0})
	DMember(bool)                                      CollisionOnClients                                          OFFSET(get<bool>, {0x270, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GooGunPuddle.SetStatusEffect
	// void SetStatusEffect(class UClass* NewStatusEffect);                                                                     // [0x18dd040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GooGunPuddle.OnStatusEffectAdded
	// void OnStatusEffectAdded(FGooPuddleStatusEffectTrigger& Trigger);                                                        // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.GooGunPuddle.OnRep_IsOnFire
	// void OnRep_IsOnFire(bool Prev_IsOnFire);                                                                                 // [0x18dccf0] Final|Native|Protected 
	// Function /Script/FSD.GooGunPuddle.OnRep_ActiveStatusEffectTriggersMask
	// void OnRep_ActiveStatusEffectTriggersMask(int32_t PreviousMask);                                                         // [0x18dcbb0] Final|Native|Protected 
	// Function /Script/FSD.GooGunPuddle.OnPuddleEndOverLap
	// void OnPuddleEndOverLap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18dca30] Final|Native|Protected 
	// Function /Script/FSD.GooGunPuddle.OnPuddleBeginOverLap
	// void OnPuddleBeginOverLap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18dc810] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.GooGunPuddle.OnHit
	// void OnHit(float Damage, FDamageData& DamageData, bool anyHealthLost);                                                   // [0x18dc5f0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.GooGunPuddle.OnGooIgnited
	// void OnGooIgnited();                                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GooGunPuddle.IgniteGoo
	// void IgniteGoo();                                                                                                        // [0x18dc020] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GooGunPuddle.AddStatusEffect
	// void AddStatusEffect(class UClass* NewStatusEffect);                                                                     // [0x18dba80] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.GooGunAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UGooGunAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(bool)                                      isCharging                                                  OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(float)                                     ChargePercentVisual                                         OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     ChargePercent                                               OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     OverChargePercent                                           OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     BarrelRotationRate                                          OFFSET(get<float>, {0x2C8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.GooGunAnimInstance.SetTargetBarrelRotationRate
	// void SetTargetBarrelRotationRate(float RotationRate);                                                                    // [0x18dd0d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.GrabbedStateComponent
/// Size: 0x0020 (0x000100 - 0x000120)
class UGrabbedStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
};

/// Class /Script/FSD.FlyingLifter
/// Size: 0x00A0 (0x000430 - 0x0004D0)
class AFlyingLifter : public AAFlyingBug
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	CMember(class UPointLightComponent*)               GrabLight                                                   OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UGrabberComponent*)                  GrabberComp                                                 OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  GrabCapsule                                                 OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UAudioComponent*)                    GrabbedIdleLoop                                             OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UInDangerComponent*)                 InDanger                                                    OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UAudioComponent*)                    ScreamComponent                                             OFFSET(get<T>, {0x458, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGrabSuccess                                               OFFSET(getStruct<T>, {0x468, 16, 0, 0})
	DMember(float)                                     PreventGrabAfterSpawn                                       OFFSET(get<float>, {0x478, 4, 0, 0})
	CMember(EGrabberState)                             GrabberState                                                OFFSET(get<T>, {0x481, 1, 0, 0})
	DMember(float)                                     WanderingSpeed                                              OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     WanderingAcceleration                                       OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     ChaseSpeed                                                  OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     ChaseAcceleration                                           OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     CarrySpeed                                                  OFFSET(get<float>, {0x494, 4, 0, 0})
	DMember(float)                                     CarryAcceleration                                           OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     FleeSpeed                                                   OFFSET(get<float>, {0x49C, 4, 0, 0})
	DMember(float)                                     FleeAcceleration                                            OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     CarryCooldown                                               OFFSET(get<float>, {0x4A8, 4, 0, 0})
	CMember(class USoundBase*)                         FleeSound                                                   OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  FleeAnimation                                               OFFSET(get<T>, {0x4B8, 8, 0, 0})
	DMember(bool)                                      ParalyzeOnGrab                                              OFFSET(get<bool>, {0x4C0, 1, 0, 0})
	DMember(float)                                     ExtraUpForce                                                OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     ScreamDistance                                              OFFSET(get<float>, {0x4C8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.FlyingLifter.SelectAnotherTarget
	// bool SelectAnotherTarget();                                                                                              // [0x18dcf90] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.FlyingLifter.OnStateBroke
	// void OnStateBroke(class AActor* aReleasedPlayer, bool fullGrabElapsed);                                                  // [0x18dcea0] Final|Native|Public  
	// Function /Script/FSD.FlyingLifter.OnRep_State
	// void OnRep_State(EGrabberState oldState);                                                                                // [0x18dcd80] Final|Native|Public  
	// Function /Script/FSD.FlyingLifter.OnInDanger
	// void OnInDanger();                                                                                                       // [0x17f7e30] Native|Public|BlueprintCallable 
	// Function /Script/FSD.FlyingLifter.OnActorLeftGrabZone
	// void OnActorLeftGrabZone(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18dc3d0] Native|Protected     
	// Function /Script/FSD.FlyingLifter.OnActorEnterGrabZone
	// void OnActorEnterGrabZone(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18dc1b0] Native|Protected|HasOutParms 
	// Function /Script/FSD.FlyingLifter.GetJustGrabbed
	// bool GetJustGrabbed();                                                                                                   // [0x18dbe90] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.FlyingLifter.DropTarget
	// void DropTarget();                                                                                                       // [0x18dbd00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.FlyingLifter.ChangeState
	// void ChangeState(EGrabberState aGrabberState);                                                                           // [0x18dbbb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FlyingLifterAnimInstance
/// Size: 0x0010 (0x000380 - 0x000390)
class UFlyingLifterAnimInstance : public USimpleMovingEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(bool)                                      HasGrabbedPlayer                                            OFFSET(get<bool>, {0x380, 1, 0, 0})
	DMember(bool)                                      ToChaseLock                                                 OFFSET(get<bool>, {0x381, 1, 0, 0})
	DMember(bool)                                      ChaseToWanderLock                                           OFFSET(get<bool>, {0x382, 1, 0, 0})
	DMember(bool)                                      ToCarryLock                                                 OFFSET(get<bool>, {0x383, 1, 0, 0})
	CMember(EGrabberState)                             GrabberState                                                OFFSET(get<T>, {0x384, 1, 0, 0})
};

/// Class /Script/FSD.GrabberComponent
/// Size: 0x00E0 (0x0000B0 - 0x000190)
class UGrabberComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FMulticastInlineDelegate)                  OnGrabbedActor                                              OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReleasedActor                                             OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FGameplayTagQuery)                         TagFilter                                                   OFFSET(getStruct<T>, {0xD0, 72, 0, 0})
	CMember(class UAudioComponent*)                    GrabLoopSoundInstance                                       OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(TWeakObjectPtr<class ADeepPathfinderCharacter*>) PathfinderOwner                                       OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(TWeakObjectPtr<class USkeletalMeshComponent*>) OwnerMesh                                               OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class USoundCue*)                          BeginGrabedSound                                            OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class USoundCue*)                          GrabedLoopSound                                             OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class USoundCue*)                          EndGrabedSound                                              OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   BeginGrabbedShout                                           OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   EndGrabbedShout                                             OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   AttentionGrabbedShout                                       OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class AActor*)                             CurrentlyGrabbed                                            OFFSET(get<T>, {0x168, 8, 0, 0})
	SMember(FName)                                     GrabAttachName                                              OFFSET(getStruct<T>, {0x170, 8, 0, 0})
	DMember(float)                                     GrabTime                                                    OFFSET(get<float>, {0x178, 4, 0, 0})
	DMember(float)                                     CarryCooldown                                               OFFSET(get<float>, {0x17C, 4, 0, 0})
	DMember(float)                                     RevivedGravePeriod                                          OFFSET(get<float>, {0x180, 4, 0, 0})
	CMember(EOutline)                                  PlayerOutlineOnGrab                                         OFFSET(get<T>, {0x184, 1, 0, 0})
	CMember(EGrabbedStateCameraMode)                   CameraMode                                                  OFFSET(get<T>, {0x185, 1, 0, 0})
	DMember(bool)                                      TrackPlayerCollision                                        OFFSET(get<bool>, {0x186, 1, 0, 0})
	DMember(bool)                                      ManualGrabTime                                              OFFSET(get<bool>, {0x187, 1, 0, 0})
	DMember(bool)                                      CanPlayerShoot                                              OFFSET(get<bool>, {0x188, 1, 0, 0})
	DMember(bool)                                      HeightenSensesImmune                                        OFFSET(get<bool>, {0x18A, 1, 0, 0})
	DMember(bool)                                      NeedsPathToTarget                                           OFFSET(get<bool>, {0x18B, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GrabberComponent.Timer_ReleaseTarget
	// void Timer_ReleaseTarget();                                                                                              // [0x18dd460] Final|Native|Protected 
	// Function /Script/FSD.GrabberComponent.ReleaseTarget
	// void ReleaseTarget();                                                                                                    // [0x18dcf70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GrabberComponent.OnRep_CurrentlyGrabbed
	// void OnRep_CurrentlyGrabbed(class AActor* oldCurrentlyGrabbed);                                                          // [0x18dcc40] Final|Native|Protected 
	// Function /Script/FSD.GrabberComponent.OnPrimWake
	// void OnPrimWake(class UPrimitiveComponent* WakingComponent, FName BoneName);                                             // [0x18dc740] Final|Native|Protected 
	// Function /Script/FSD.GrabberComponent.IsGrabbedTargetValid
	// bool IsGrabbedTargetValid();                                                                                             // [0x18dc040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GrabberComponent.HasGrabbed
	// bool HasGrabbed();                                                                                                       // [0x18dbff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GrabberComponent.GrabTarget
	// bool GrabTarget(class AActor* aGrabTarget);                                                                              // [0x18dbf50] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GrabberComponent.GetGrabbedActor
	// class AActor* GetGrabbedActor();                                                                                         // [0x180d310] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GrabberComponent.CanGrabTarget
	// bool CanGrabTarget(class AActor* aTarget);                                                                               // [0x18dbb10] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.GrabAvoidClassEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FGrabAvoidClassEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UClass*)                             actorClass                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     DistanceToKeep                                              OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.AvoidActorEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FAvoidActorEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class AActor*)                             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/FSD.FakePhysGrabberComponent
/// Size: 0x0028 (0x000190 - 0x0001B8)
class UFakePhysGrabberComponent : public UGrabberComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	CMember(TArray<FGrabAvoidClassEntry>)              ActorTypesToAvoid                                           OFFSET(get<T>, {0x190, 16, 0, 0})
	CMember(TArray<FAvoidActorEntry>)                  ActorsToAvoid                                               OFFSET(get<T>, {0x1A8, 16, 0, 0})
};

/// Struct /Script/FSD.GraplingGunState
/// Size: 0x0010 (0x000000 - 0x000010)
class FGraplingGunState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector_NetQuantize)                       TargetLocation                                              OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(bool)                                      IsGrapling                                                  OFFSET(get<bool>, {0xC, 1, 1, 0})
};

/// Class /Script/FSD.GrapplingHookGun
/// Size: 0x0070 (0x0003E0 - 0x000450)
class AGrapplingHookGun : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	CMember(class UCoolDownItemAggregator*)            CoolDownAggregator                                          OFFSET(get<T>, {0x3E8, 8, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x3F0, 4, 0, 0})
	CMember(class UAnimMontage*)                       FPReloadAnim                                                OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPReloadAnim                                                OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UAnimMontage*)                       FPGunslingAnim                                              OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPGunslingAnim                                              OFFSET(get<T>, {0x410, 8, 0, 0})
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(float)                                     MaxSpeedReleaseModifier                                     OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     WindUpTime                                                  OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(bool)                                      AutoFire                                                    OFFSET(get<bool>, {0x434, 1, 0, 0})
	SMember(FGraplingGunState)                         State                                                       OFFSET(getStruct<T>, {0x438, 16, 0, 0})
	DMember(float)                                     GrapleStartTime                                             OFFSET(get<float>, {0x448, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.GrapplingHookGun.StopGrapple
	// void StopGrapple();                                                                                                      // [0x18dd440] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.GrapplingHookGun.StartGrapple
	// bool StartGrapple();                                                                                                     // [0x18dd410] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.GrapplingHookGun.Server_SetState
	// void Server_SetState(FGraplingGunState NewState);                                                                        // [0x18dcfc0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.GrapplingHookGun.OnRep_State
	// void OnRep_State(FGraplingGunState& prevState);                                                                          // [0x18dce00] Native|Protected|HasOutParms 
	// Function /Script/FSD.GrapplingHookGun.OnReleaseHook
	// void OnReleaseHook();                                                                                                    // [0x18dcb90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GrapplingHookGun.OnGrappleUpdate
	// void OnGrappleUpdate(float DeltaSeconds);                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GrapplingHookGun.OnGrappleStart
	// void OnGrappleStart();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GrapplingHookGun.OnGrappleFailed
	// void OnGrappleFailed(bool TooFar);                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GrapplingHookGun.OnGrappleEnd
	// void OnGrappleEnd();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GrapplingHookGun.GetWindUpProgress
	// float GetWindUpProgress();                                                                                               // [0x18dbf20] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GrapplingHookGun.GetCooldownDuration
	// float GetCooldownDuration(class UClass* GrapplingHookGun);                                                               // [0x18dbd50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GravityChangedComponent
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UGravityChangedComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(bool)                                      bAwakeOnGravityChanged                                      OFFSET(get<bool>, {0xB0, 1, 0, 0})
	CMember(TArray<class UPrimitiveComponent*>)        PrimitiveComponents                                         OFFSET(get<T>, {0xB8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.GravityChangedComponent.OnGravityChanged
	// void OnGravityChanged(float Gravity, float Change);                                                                      // [0x18dc520] Final|Native|Protected 
};

/// Class /Script/FSD.MolotovComponent
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UMolotovComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UClass*)                             BurningFlamesClass                                          OFFSET(get<T>, {0xB8, 8, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xC0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.MolotovComponent.Trigger
	// void Trigger();                                                                                                          // [0x18dd480] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.AreaSpawnerComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UAreaSpawnerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UClass*)                             ActorToSpawn                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(DeepPathFinderSize)                        PathfinderSize                                              OFFSET(get<T>, {0xB8, 1, 0, 0})
	DMember(float)                                     ChanceToSpawn                                               OFFSET(get<float>, {0xBC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.AreaSpawnerComponent.SpawnInArea
	// void SpawnInArea(FVector& Origin, float Radius, float maxVerticalDistance, class APawn* Instigator);                     // [0x18dd150] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.HugeExplosionComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UHugeExplosionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(class UParticleSystem*)                    ExplosionEffect                                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(float)                                     ExplosionSpeed                                              OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     ExplosionSize                                               OFFSET(get<float>, {0xBC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.HugeExplosionComponent.TriggerExplosion
	// void TriggerExplosion(FVector Location);                                                                                 // [0x18dd4a0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.GrenadeAnimationSet
/// Size: 0x0020 (0x000030 - 0x000050)
class UGrenadeAnimationSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UAnimMontage*)                       FP_EquipAnimation                                           OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_EquipAnimation                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_ThrowAnimation                                           OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_ThrowAnimation                                           OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.GrenadeProjectionSettings
/// Size: 0x0020 (0x000030 - 0x000050)
class UGrenadeProjectionSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FVector>)                           SplinePoints                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(float)                                     ProjectionScale                                             OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     VelocityScale                                               OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      ProjectionVisible                                           OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Struct /Script/FSD.StateStats
/// Size: 0x0014 (0x000000 - 0x000014)
class FStateStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     MaxAcceleration                                             OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     MaxPawnSpeed                                                OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MinSlowdownAngle                                            OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxSlowdownAngle                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxBreakingDeceleration                                     OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Class /Script/FSD.GroundToAirComponent
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UGroundToAirComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FMulticastInlineDelegate)                  OnChangedPathfinderState                                    OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	CMember(class UDeepPathfinderMovement*)            CurrentMove                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     WalkTime                                                    OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     WalkTimeMaxRandomOffset                                     OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     WalkTimeMinRandomOffset                                     OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(bool)                                      WalkUseTimer                                                OFFSET(get<bool>, {0xD4, 1, 0, 0})
	SMember(FStateStats)                               WalkStats                                                   OFFSET(getStruct<T>, {0xD8, 20, 0, 0})
	DMember(float)                                     FlyTime                                                     OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     FlyTimeMaxRandomOffset                                      OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     FlyTimeMinRandomOffset                                      OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(bool)                                      FlyUseTimer                                                 OFFSET(get<bool>, {0xF8, 1, 0, 0})
	SMember(FStateStats)                               FlyStats                                                    OFFSET(getStruct<T>, {0xFC, 20, 0, 0})
	DMember(bool)                                      IsFlying                                                    OFFSET(get<bool>, {0x110, 1, 0, 0})
	CMember(TWeakObjectPtr<class ADeepPathfinderCharacter*>) OwningPathfinder                                      OFFSET(get<T>, {0x114, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GroundToAirComponent.SetIsFlying
	// void SetIsFlying(bool aIsFlying);                                                                                        // [0x18e1b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GroundToAirComponent.SetAllowedToChangeState
	// void SetAllowedToChangeState(bool aIsAllowed);                                                                           // [0x18e1a80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GroundToAirComponent.OnRep_StateChange
	// void OnRep_StateChange();                                                                                                // [0x18e18e0] Final|Native|Protected 
	// Function /Script/FSD.GroundToAirComponent.GetIsWalking
	// bool GetIsWalking();                                                                                                     // [0x18e10b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GroundToAirComponent.GetIsFlying
	// bool GetIsFlying();                                                                                                      // [0x18e1090] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GroundToAirComponent.Engage
	// void Engage();                                                                                                           // [0x18e1050] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.GrowthComponent
/// Size: 0x0098 (0x0000B0 - 0x000148)
class UGrowthComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(class USceneComponent*)                    ScaleComponent                                              OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        CurrentGrowthCurve                                          OFFSET(getStruct<T>, {0xB8, 136, 0, 0})


	/// Functions
	// Function /Script/FSD.GrowthComponent.StopGrow
	// void StopGrow();                                                                                                         // [0x18e1f40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GrowthComponent.StartGrow
	// void StartGrow(class USceneComponent* aComponentToScale, FRuntimeFloatCurve aCurve);                                     // [0x18e1dc0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.GuntowerActivationPlatform
/// Size: 0x0080 (0x000220 - 0x0002A0)
class AGuntowerActivationPlatform : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               STMesh                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  Trigger                                                     OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProgressUpdatedDelegate                                   OFFSET(getStruct<T>, {0x238, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayersInsideChangedDelegate                              OFFSET(getStruct<T>, {0x248, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProgressFilled                                            OFFSET(getStruct<T>, {0x258, 16, 0, 0})
	CMember(class AGuntowerModule*)                    AssignedModule                                              OFFSET(get<T>, {0x280, 8, 0, 0})
	DMember(float)                                     DoneAt                                                      OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     DisabledTime                                                OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(int32_t)                                   playersInside                                               OFFSET(get<int32_t>, {0x294, 4, 0, 0})
	DMember(bool)                                      Disabled                                                    OFFSET(get<bool>, {0x298, 1, 0, 0})
	DMember(bool)                                      IsShutDown                                                  OFFSET(get<bool>, {0x299, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GuntowerActivationPlatform.ShutDown
	// void ShutDown();                                                                                                         // [0x18e1d80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GuntowerActivationPlatform.SetPlatformActive
	// void SetPlatformActive(bool IsActive);                                                                                   // [0x18e1bc0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GuntowerActivationPlatform.ReEnable
	// void ReEnable();                                                                                                         // [0x18e1a40] Final|Native|Protected 
	// Function /Script/FSD.GuntowerActivationPlatform.PlayerSteppedOn
	// void PlayerSteppedOn(int32_t CurrentCount);                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GuntowerActivationPlatform.PlayerSteppedOff
	// void PlayerSteppedOff(int32_t CurrentCount);                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GuntowerActivationPlatform.PlayerInsideRevived
	// void PlayerInsideRevived();                                                                                              // [0x18e1a20] Final|Native|Protected 
	// Function /Script/FSD.GuntowerActivationPlatform.PlayerInsideDied
	// void PlayerInsideDied(class UHealthComponentBase* Health);                                                               // [0x18e1990] Final|Native|Protected 
	// Function /Script/FSD.GuntowerActivationPlatform.OnShutDown
	// void OnShutDown();                                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GuntowerActivationPlatform.OnRep_PlayersInside
	// void OnRep_PlayersInside(int32_t OldCount);                                                                              // [0x18e17d0] Final|Native|Protected 
	// Function /Script/FSD.GuntowerActivationPlatform.OnRep_IsShutDown
	// void OnRep_IsShutDown();                                                                                                 // [0x18e1790] Final|Native|Protected 
	// Function /Script/FSD.GuntowerActivationPlatform.OnRep_Disabled
	// void OnRep_Disabled();                                                                                                   // [0x18e1710] Final|Native|Protected 
	// Function /Script/FSD.GuntowerActivationPlatform.OnPlayersInsideChanged
	// void OnPlayersInsideChanged(int32_t playersInside);                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GuntowerActivationPlatform.OnPlayerLeave
	// void OnPlayerLeave(class AFSDPlayerState* PlayerState);                                                                  // [0x18e1680] Final|Native|Protected 
	// Function /Script/FSD.GuntowerActivationPlatform.OnOverlap
	// void OnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x18e12d0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.GuntowerActivationPlatform.OnFinished
	// void OnFinished();                                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GuntowerActivationPlatform.OnDisabledChanged
	// void OnDisabledChanged(bool IsDisabled);                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GuntowerActivationPlatform.ModuleDestroyed
	// void ModuleDestroyed(class UHealthComponentBase* Health);                                                                // [0x18e11b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.GuntowerActivationPlatform.GetPlayerCount
	// int32_t GetPlayerCount();                                                                                                // [0x18e1100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GuntowerActivationPlatform.GetAssignedModule
	// class AGuntowerModule* GetAssignedModule();                                                                              // [0x18e1070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GuntowerActivationPlatform.EndOverlap
	// void EndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x18e0ef0] Final|Native|Protected 
	// Function /Script/FSD.GuntowerActivationPlatform.CanWidgetAppear
	// bool CanWidgetAppear();                                                                                                  // [0x18e0e30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GuntowerActivationPlatform.AssignModule
	// void AssignModule(class AGuntowerModule* towerModule);                                                                   // [0x18e0da0] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.GuntowerModuleLevel
/// Size: 0x0018 (0x000000 - 0x000018)
class FGuntowerModuleLevel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<class UClass*>)                     PossibleModules                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      PreventDuplication                                          OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Class /Script/FSD.GuntowerEvent
/// Size: 0x0060 (0x000368 - 0x0003C8)
class AGuntowerEvent : public AGameEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 968;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             BaseMesh                                                    OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class UDamageComponent*)                   EndExplosionDamage                                          OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(TArray<FGuntowerModuleLevel>)              GuntowerLevels                                              OFFSET(get<T>, {0x380, 16, 0, 0})
	SMember(FName)                                     ModuleAttachBone                                            OFFSET(getStruct<T>, {0x390, 8, 0, 0})
	DMember(float)                                     TowerExplodeDelay                                           OFFSET(get<float>, {0x3A8, 4, 0, 0})
	DMember(float)                                     DelayBetweenExplosions                                      OFFSET(get<float>, {0x3AC, 4, 0, 0})
	CMember(TArray<class AGuntowerModule*>)            TowerModules                                                OFFSET(get<T>, {0x3B0, 16, 0, 0})
	DMember(int32_t)                                   ActiveHostileModules                                        OFFSET(get<int32_t>, {0x3C0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.GuntowerEvent.SpawnModules
	// void SpawnModules();                                                                                                     // [0x18e1da0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GuntowerEvent.OnRep_ModuleActive
	// void OnRep_ModuleActive();                                                                                               // [0x1818390] Native|Public        
	// Function /Script/FSD.GuntowerEvent.OnModulesSpawned
	// void OnModulesSpawned();                                                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GuntowerEvent.OnModuleExploded
	// void OnModuleExploded(class AGuntowerModule* explodedModule);                                                            // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.TowerModuleBase
/// Size: 0x0070 (0x0002F8 - 0x000368)
class ATowerModuleBase : public AFSDPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             ModuleMesh                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(TArray<class UStaticMeshComponent*>)       ArmorPlates                                                 OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(class UEnemyHealthComponent*)              Health                                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	SMember(FRotator)                                  ModuleRotation                                              OFFSET(getStruct<T>, {0x328, 12, 0, 0})
	CMember(class USkeletalMesh*)                      DestroyedMesh                                               OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class USoundCue*)                          deathSound                                                  OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UParticleSystem*)                    deathParticles                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     ArmorLaunchPower                                            OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     HideArmorTime                                               OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     ModuleRotationSpeed                                         OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(bool)                                      ConstantRotation                                            OFFSET(get<bool>, {0x364, 1, 0, 0})
	CMember(EGuntowerModuleState)                      State                                                       OFFSET(get<T>, {0x365, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TowerModuleBase.SetState
	// void SetState(EGuntowerModuleState State);                                                                               // [0x18e1c50] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TowerModuleBase.OnRep_State
	// void OnRep_State(EGuntowerModuleState prevState);                                                                        // [0x18e1860] Final|Native|Protected 
	// Function /Script/FSD.TowerModuleBase.HideArmorPlates
	// void HideArmorPlates();                                                                                                  // [0x18e1140] Final|Native|Private 
	// Function /Script/FSD.TowerModuleBase.DoAttack
	// void DoAttack();                                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.AimingTowerModule
/// Size: 0x0030 (0x000368 - 0x000398)
class AAimingTowerModule : public ATowerModuleBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x368, 8, 0, 0})
	SMember(FRotator)                                  AimRotation                                                 OFFSET(getStruct<T>, {0x370, 12, 0, 0})
	DMember(float)                                     BurstTime                                                   OFFSET(get<float>, {0x37C, 4, 0, 0})
	DMember(float)                                     AttackTime                                                  OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(int32_t)                                   BurstSize                                                   OFFSET(get<int32_t>, {0x38C, 4, 0, 0})
};

/// Class /Script/FSD.GuntowerModule
/// Size: 0x00C0 (0x0002F8 - 0x0003B8)
class AGuntowerModule : public AFSDPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	CMember(class USoundCue*)                          ExposeWeakpointSound                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class USoundCue*)                          deathSound                                                  OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UParticleSystem*)                    deathParticles                                              OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(TArray<class AActor*>)                     WeakpointActors                                             OFFSET(get<T>, {0x318, 16, 0, 0})
	SMember(FName)                                     BodyBone                                                    OFFSET(getStruct<T>, {0x328, 8, 0, 0})
	SMember(FName)                                     TopConnectionPointName                                      OFFSET(getStruct<T>, {0x330, 8, 0, 0})
	SMember(FRotator)                                  CurrentTurretRotation                                       OFFSET(getStruct<T>, {0x338, 12, 0, 0})
	CMember(class UAnimSequenceBase*)                  IntroductionAnimation                                       OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               ArmorPiece1                                                 OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               ArmorPiece2                                                 OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               ArmorPiece3                                                 OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             ModuleMesh                                                  OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UGunTowerHealthComponent*)           GuntowerModuleHealth                                        OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(class AGuntowerEvent*)                     OwningEvent                                                 OFFSET(get<T>, {0x378, 8, 0, 0})
	CMember(class AGuntowerModule*)                    ChildModule                                                 OFFSET(get<T>, {0x380, 8, 0, 0})
	DMember(float)                                     WeakpointsExposedTime                                       OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     WeakpointsExposedTimeSolo                                   OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     HideArmorTime                                               OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(float)                                     ArmorShootoutDelay                                          OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(float)                                     ArmorLaunchPower                                            OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(int32_t)                                   ModuleID                                                    OFFSET(get<int32_t>, {0x3A0, 4, 0, 0})
	DMember(bool)                                      IsPassiveModule                                             OFFSET(get<bool>, {0x3A8, 1, 0, 0})
	DMember(bool)                                      ModuleIsActive                                              OFFSET(get<bool>, {0x3A9, 1, 0, 0})
	DMember(bool)                                      AreWeakpointsExposed                                        OFFSET(get<bool>, {0x3AA, 1, 0, 0})
	DMember(bool)                                      AreWeaponsExposed                                           OFFSET(get<bool>, {0x3AB, 1, 0, 0})
	DMember(bool)                                      ConstantRotation                                            OFFSET(get<bool>, {0x3AC, 1, 0, 0})
	DMember(bool)                                      IsArmorOff                                                  OFFSET(get<bool>, {0x3AD, 1, 0, 0})
	DMember(bool)                                      Exploded                                                    OFFSET(get<bool>, {0x3AE, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GuntowerModule.ShootOutArmor
	// void ShootOutArmor();                                                                                                    // [0x18e1cd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GuntowerModule.SetModuleActive
	// void SetModuleActive();                                                                                                  // [0x18e1ba0] Final|Native|Protected 
	// Function /Script/FSD.GuntowerModule.OnTearArmor
	// void OnTearArmor();                                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GuntowerModule.OnRep_IsModuleActive
	// void OnRep_IsModuleActive();                                                                                             // [0x17f7e30] Native|Protected     
	// Function /Script/FSD.GuntowerModule.OnRep_IsArmorOff
	// void OnRep_IsArmorOff();                                                                                                 // [0x1847600] Native|Protected     
	// Function /Script/FSD.GuntowerModule.OnRep_Exploded
	// void OnRep_Exploded();                                                                                                   // [0x18e1730] Native|Protected     
	// Function /Script/FSD.GuntowerModule.OnRep_AreWeakpointExposed
	// void OnRep_AreWeakpointExposed();                                                                                        // [0x1847620] Native|Protected     
	// Function /Script/FSD.GuntowerModule.OnActivationChanged
	// void OnActivationChanged(bool IsActivated);                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.GuntowerModule.Introduce
	// void Introduce();                                                                                                        // [0x18e1190] Final|Native|Public  
	// Function /Script/FSD.GuntowerModule.HideWeakpoints
	// void HideWeakpoints();                                                                                                   // [0x18e1160] Final|Native|Protected 
	// Function /Script/FSD.GuntowerModule.HideArmor
	// void HideArmor();                                                                                                        // [0x18e1120] Final|Native|Protected 
	// Function /Script/FSD.GuntowerModule.GetModuleID
	// int32_t GetModuleID();                                                                                                   // [0x18e10e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.GuntowerModule.DoExplosion
	// void DoExplosion();                                                                                                      // [0x1847640] Native|Protected     
	// Function /Script/FSD.GuntowerModule.DeactivateTowerModule
	// void DeactivateTowerModule();                                                                                            // [0x17f75b0] Native|Public        
	// Function /Script/FSD.GuntowerModule.All_PlayIntroductionAnim
	// void All_PlayIntroductionAnim();                                                                                         // [0x18e0d80] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FSD.GuntowerModule.ActivateTowerModule
	// void ActivateTowerModule();                                                                                              // [0x17f8340] Native|Public        
};

/// Class /Script/FSD.HostileGuntowerModule
/// Size: 0x0030 (0x0003B8 - 0x0003E8)
class AHostileGuntowerModule : public AGuntowerModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(class USkeletalMeshComponent*)             DestroyedMesh                                               OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           DestroyedSmoke                                              OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UEnemyComponent*)                    EnemyComponent                                              OFFSET(get<T>, {0x3D0, 8, 0, 0})
	DMember(float)                                     ModuleMaxHealth                                             OFFSET(get<float>, {0x3D8, 4, 0, 0})
	SMember(FRotator)                                  CurrentAimRotation                                          OFFSET(getStruct<T>, {0x3DC, 12, 0, 0})


	/// Functions
	// Function /Script/FSD.HostileGuntowerModule.OnWeakpointDied
	// void OnWeakpointDied(class UHealthComponentBase* Health);                                                                // [0x18e1900] Final|Native|Protected 
	// Function /Script/FSD.HostileGuntowerModule.OnRep_ModuleMaxHealth
	// void OnRep_ModuleMaxHealth();                                                                                            // [0x18e17b0] Final|Native|Protected 
	// Function /Script/FSD.HostileGuntowerModule.OnModuleDied
	// void OnModuleDied(class UHealthComponentBase* Health);                                                                   // [0x184fc10] Native|Protected     
};

/// Class /Script/FSD.HostileTargetingGuntowerModule
/// Size: 0x0040 (0x0003E8 - 0x000428)
class AHostileTargetingGuntowerModule : public AHostileGuntowerModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1064;

public:
	CMember(TArray<class AActor*>)                     SensedTargets                                               OFFSET(get<T>, {0x3E8, 16, 0, 0})
	DMember(float)                                     TurretRotationSpeed                                         OFFSET(get<float>, {0x404, 4, 0, 0})
	CMember(class AActor*)                             TargetedActor                                               OFFSET(get<T>, {0x408, 8, 0, 0})
	DMember(float)                                     TargetingRotationSpeed                                      OFFSET(get<float>, {0x410, 4, 0, 0})
	SMember(FName)                                     TargetingFromBone                                           OFFSET(getStruct<T>, {0x414, 8, 0, 0})
	DMember(float)                                     TimeUntilForgetTarget                                       OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(bool)                                      AlwaysUpdateAimRotation                                     OFFSET(get<bool>, {0x424, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.HostileTargetingGuntowerModule.OnPerceptionUpdated
	// void OnPerceptionUpdated(class AActor* sensedActor, FAIStimulus Stimulus);                                               // [0x18e14f0] Native|Public        
};

/// Class /Script/FSD.LMGGuntoweModule
/// Size: 0x0088 (0x000428 - 0x0004B0)
class ALMGGuntoweModule : public AHostileTargetingGuntowerModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1200;

public:
	CMember(class UHitscanComponent*)                  HitScanComp                                                 OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComp                                                  OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class USceneComponent*)                    AimAtWhenNoTarget                                           OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class UAudioComponent*)                    FireAudio                                                   OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UParticleSystem*)                    TracerEffect                                                OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UParticleSystem*)                    MuzzleEffect                                                OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class USoundCue*)                          ShootTailSound                                              OFFSET(get<T>, {0x468, 8, 0, 0})
	DMember(int32_t)                                   BurstSize                                                   OFFSET(get<int32_t>, {0x478, 4, 0, 0})
	DMember(float)                                     MaxAimOffset                                                OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     IdleAimRotationSpeed                                        OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     TimeBetweenShots                                            OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     TimeBetweenBursts                                           OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     AimSpeed                                                    OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(bool)                                      IsFiresoundPlaying                                          OFFSET(get<bool>, {0x4AD, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LMGGuntoweModule.ShowShot
	// void ShowShot(FVector& Location);                                                                                        // [0x18e1cf0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.LMGGuntoweModule.OnRep_IsFiresoundPlaying
	// void OnRep_IsFiresoundPlaying();                                                                                         // [0x18e1770] Final|Native|Protected 
};

/// Class /Script/FSD.RandomFiringGuntowerModule
/// Size: 0x0180 (0x0003E8 - 0x000568)
class ARandomFiringGuntowerModule : public AHostileGuntowerModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1384;

public:
	CMember(class UStaticMeshComponent*)               LaserFrontTop                                               OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               LaserFrontBottom                                            OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               LaserBackTop                                                OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               LaserBackBottom                                             OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           FrontTopLaserMuzzle                                         OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           FrontBottomLaserMuzzle                                      OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           BackTopLaserMuzzle                                          OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           BackBottomLaserMuzzle                                       OFFSET(get<T>, {0x420, 8, 0, 0})
	SMember(FRotator)                                  OtherCurrentRotation                                        OFFSET(getStruct<T>, {0x4EC, 12, 0, 0})
	CMember(class UParticleSystem*)                    LaserImpact                                                 OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UAudioComponent*)                    LaserSound                                                  OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x518, 8, 0, 0})
	DMember(float)                                     BoneSpaceTurretMaxYaw                                       OFFSET(get<float>, {0x520, 4, 0, 0})
	DMember(float)                                     BoneSpaceTurretMaxPitch                                     OFFSET(get<float>, {0x524, 4, 0, 0})
	DMember(float)                                     TimeBetweenAttacks                                          OFFSET(get<float>, {0x528, 4, 0, 0})
	DMember(float)                                     TimeUntilNextAttack                                         OFFSET(get<float>, {0x52C, 4, 0, 0})
	DMember(float)                                     ModuleRotationSpeed                                         OFFSET(get<float>, {0x530, 4, 0, 0})
	DMember(float)                                     TurretAimSpeed                                              OFFSET(get<float>, {0x534, 4, 0, 0})
	DMember(float)                                     LaserLeghtRatio                                             OFFSET(get<float>, {0x538, 4, 0, 0})
	DMember(float)                                     TimeBetweenHits                                             OFFSET(get<float>, {0x53C, 4, 0, 0})
	DMember(float)                                     ChanceToInvert                                              OFFSET(get<float>, {0x544, 4, 0, 0})
	DMember(float)                                     PlatformDissolveRadius                                      OFFSET(get<float>, {0x548, 4, 0, 0})
	DMember(float)                                     PlatformDissolveSqueeze                                     OFFSET(get<float>, {0x54C, 4, 0, 0})
	DMember(bool)                                      IsAttacking                                                 OFFSET(get<bool>, {0x560, 1, 0, 0})
};

/// Class /Script/FSD.RadialFireModule
/// Size: 0x0048 (0x0003E8 - 0x000430)
class ARadialFireModule : public AHostileGuntowerModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1072;

public:
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x3E8, 8, 0, 0})
	SMember(FRotator)                                  AttackEndRotation                                           OFFSET(getStruct<T>, {0x3F0, 12, 0, 0})
	DMember(float)                                     RotationSpeedTurret                                         OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(float)                                     DelayBetweenShots                                           OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(bool)                                      IsAttacking                                                 OFFSET(get<bool>, {0x40C, 1, 0, 0})
	SMember(FName)                                     LeftFireSocket                                              OFFSET(getStruct<T>, {0x410, 8, 0, 0})
	SMember(FName)                                     RightFireSocket                                             OFFSET(getStruct<T>, {0x418, 8, 0, 0})
	SMember(FName)                                     FrontFireSocket                                             OFFSET(getStruct<T>, {0x420, 8, 0, 0})
	SMember(FName)                                     BackFireSocket                                              OFFSET(getStruct<T>, {0x428, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RadialFireModule.OnFire
	// void OnFire();                                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.HomingFireModule
/// Size: 0x0018 (0x000428 - 0x000440)
class AHomingFireModule : public AHostileTargetingGuntowerModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	SMember(FName)                                     ShootDroneSocket                                            OFFSET(getStruct<T>, {0x428, 8, 0, 0})
	CMember(class UClass*)                             HomingProjectileClass                                       OFFSET(get<T>, {0x430, 8, 0, 0})
	DMember(float)                                     TimeBetweenShots                                            OFFSET(get<float>, {0x438, 4, 0, 0})
};

/// Class /Script/FSD.HomingDroneBomb
/// Size: 0x0050 (0x000340 - 0x000390)
class AHomingDroneBomb : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(class UEnemyHealthComponent*)              Health                                                      OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USoundCue*)                          ArmingSound                                                 OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     HomingUpdateInterval                                        OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     TargetSearchInterval                                        OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     ArmTime                                                     OFFSET(get<float>, {0x360, 4, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x368, 32, 0, 0})
	DMember(float)                                     HomingAccelerationMagnitude                                 OFFSET(get<float>, {0x388, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.HomingDroneBomb.UpdateHomingSpeed
	// void UpdateHomingSpeed();                                                                                                // [0x18e1f60] Final|Native|Public  
	// Function /Script/FSD.HomingDroneBomb.SearchForTarget
	// void SearchForTarget();                                                                                                  // [0x18e1a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HomingDroneBomb.OnRep_HomingAccelerationMagnitude
	// void OnRep_HomingAccelerationMagnitude();                                                                                // [0x18e1750] Final|Native|Protected 
};

/// Class /Script/FSD.GunTowerModuleAnimInstance
/// Size: 0x0028 (0x0002B8 - 0x0002E0)
class UGunTowerModuleAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	SMember(FRotator)                                  CurrentModuleRotation                                       OFFSET(getStruct<T>, {0x2B8, 12, 0, 0})
	SMember(FRotator)                                  CurrentLookAtRotation                                       OFFSET(getStruct<T>, {0x2C4, 12, 0, 0})
	DMember(bool)                                      IsModuleActive                                              OFFSET(get<bool>, {0x2D0, 1, 0, 0})
	DMember(bool)                                      AreWeakpointsExposed                                        OFFSET(get<bool>, {0x2D1, 1, 0, 0})
};

/// Class /Script/FSD.RandomFireModuleAnimInstance
/// Size: 0x0018 (0x0002D8 - 0x0002F0)
class URandomFireModuleAnimInstance : public UGunTowerModuleAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	SMember(FRotator)                                  OtherLookatRotation                                         OFFSET(getStruct<T>, {0x2D8, 12, 0, 0})
};

/// Class /Script/FSD.GuntowerWeakPoint
/// Size: 0x0048 (0x0002F8 - 0x000340)
class AGuntowerWeakPoint : public AFSDPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UEnemyHealthComponent*)              Health                                                      OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               Mesh                                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UWeakpointGlowComponent*)            HitGlow                                                     OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(TWeakObjectPtr<class UEnemyHealthComponent*>) ParentHealth                                             OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UDamageClass*)                       DamageToParent                                              OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UParticleSystem*)                    deathParticles                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class USoundCue*)                          deathSound                                                  OFFSET(get<T>, {0x330, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.GuntowerWeakPoint.OnExposedChanged
	// void OnExposedChanged(bool isExposed);                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.GuntowerWeakPoint.OnDeath
	// void OnDeath(class UHealthComponentBase* HealthComponent);                                                               // [0x18e1240] Final|Native|Protected 
	// Function /Script/FSD.GuntowerWeakPoint.DamageParent
	// void DamageParent(float ammount);                                                                                        // [0x18e0e70] Final|Native|Protected 
};

/// Class /Script/FSD.GunTowerHealthComponent
/// Size: 0x0000 (0x0002A8 - 0x0002A8)
class UGunTowerHealthComponent : public UEnemyHealthComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
};

/// Class /Script/FSD.HackingToolItem
/// Size: 0x0010 (0x0003E0 - 0x0003F0)
class AHackingToolItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1008;

public:
	CMember(TWeakObjectPtr<class UHackingUsableComponent*>) HackingUsable                                          OFFSET(get<T>, {0x3E0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.HackingToolItem.Server_HackingCompleted
	// void Server_HackingCompleted(class UHackingUsableComponent* InUsable, bool InHackingSuccessful);                         // [0x18e62c0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HackingToolItem.ReceiveHackingStarted
	// void ReceiveHackingStarted();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.HackingToolItem.ReceivedActionReleased
	// void ReceivedActionReleased();                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.HackingToolItem.ReceivedActionPressed
	// void ReceivedActionPressed();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.HackingToolItem.ReceiveActionClick
	// void ReceiveActionClick();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.HackingToolItem.OnRep_HackingUsable
	// void OnRep_HackingUsable();                                                                                              // [0x18e60a0] Final|Native|Protected 
	// Function /Script/FSD.HackingToolItem.HackingCompleted
	// void HackingCompleted(bool InHackingSuccessful);                                                                         // [0x18e5ae0] Final|Native|Protected|BlueprintCallable 
};

/// Struct /Script/FSD.HackingUsableState
/// Size: 0x0014 (0x000000 - 0x000014)
class FHackingUsableState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      bIsHacked                                                   OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TWeakObjectPtr<class AHackingToolItem*>)   BeingHackedByItem                                           OFFSET(get<T>, {0x4, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   HackedBy                                                    OFFSET(get<T>, {0xC, 8, 0, 0})
};

/// Class /Script/FSD.HackingUsableComponent
/// Size: 0x0088 (0x000170 - 0x0001F8)
class UHackingUsableComponent : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 504;

public:
	SMember(FMulticastInlineDelegate)                  OnHacked                                                    OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  BeingHackedUpdated                                          OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ItemType                                                    OFFSET(get<T>, {0x190, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             HackingWidgetType                                           OFFSET(get<T>, {0x1B8, 40, 0, 0})
	SMember(FHackingUsableState)                       HackingState                                                OFFSET(getStruct<T>, {0x1E0, 20, 0, 0})


	/// Functions
	// Function /Script/FSD.HackingUsableComponent.OnRep_HackingState
	// void OnRep_HackingState(FHackingUsableState& oldState);                                                                  // [0x18e6000] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.HackingUsableComponent.HackedDelegate__DelegateSignature
	// void HackedDelegate__DelegateSignature(class APlayerCharacter* InHackedBy);                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.HackingUsableComponent.GetIsHacked
	// bool GetIsHacked();                                                                                                      // [0x18e59c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HackingUsableComponent.GetIsBeingHacked
	// bool GetIsBeingHacked();                                                                                                 // [0x18e5980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HackingUsableComponent.GetHackingWidgetType
	// TSoftObjectPtr<UClass*> GetHackingWidgetType();                                                                          // [0x18e5700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HackingUsableComponent.GetHackedBy
	// class APlayerCharacter* GetHackedBy();                                                                                   // [0x18e56c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.HackingToolWidget
/// Size: 0x0050 (0x000260 - 0x0002B0)
class UHackingToolWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	SMember(FMulticastInlineDelegate)                  OnHackingFail                                               OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHackingStageCompleted                                     OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHackingCompleted                                          OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRequestUnequipHackingTool                                 OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	CMember(TWeakObjectPtr<class UHackingUsableComponent*>) HackingUsable                                          OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(TWeakObjectPtr<class AHackingToolItem*>)   HackingTool                                                 OFFSET(get<T>, {0x2A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.HackingToolWidget.StartHacking
	// void StartHacking(class UHackingUsableComponent* InHackingUsable, class AHackingToolItem* InHackingTool);                // [0x18e64d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HackingToolWidget.RequestUnequipHackingTool
	// void RequestUnequipHackingTool();                                                                                        // [0x18e61f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.HackingToolWidget.ReceiveHackingToolUnequipped
	// void ReceiveHackingToolUnequipped();                                                                                     // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.HackingToolWidget.ReceiveHackingStarted
	// void ReceiveHackingStarted();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.HackingToolWidget.ReceiveActionReleased
	// void ReceiveActionReleased();                                                                                            // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.HackingToolWidget.ReceiveActionPressed
	// void ReceiveActionPressed();                                                                                             // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.HackingToolWidget.ReceiveActionClick
	// void ReceiveActionClick();                                                                                               // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.HackingToolWidget.HackingUnequipDelegate__DelegateSignature
	// void HackingUnequipDelegate__DelegateSignature();                                                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.HackingToolWidget.HackingStageCompletedDelegate__DelegateSignature
	// void HackingStageCompletedDelegate__DelegateSignature(int32_t InNextStage, int32_t InTotalStages);                       // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.HackingToolWidget.HackingStageComplete
	// void HackingStageComplete(int32_t InNextStage, int32_t InTotalStages);                                                   // [0x18e5b70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.HackingToolWidget.HackingFailDelegate__DelegateSignature
	// void HackingFailDelegate__DelegateSignature(class USoundCue* InFailCue, class UDialogDataAsset* InShout);                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.HackingToolWidget.HackingCompleteDelegate__DelegateSignature
	// void HackingCompleteDelegate__DelegateSignature(bool InSuccess);                                                         // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.HackingToolWidget.HackingComplete
	// void HackingComplete(bool InSuccess);                                                                                    // [0x18e5a50] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.HalloweenSkull
/// Size: 0x00C0 (0x0003B0 - 0x000470)
class AHalloweenSkull : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	SMember(FVector)                                   WobbleSpeeds                                                OFFSET(getStruct<T>, {0x3B0, 12, 0, 0})
	SMember(FVector)                                   WobbleRanges                                                OFFSET(getStruct<T>, {0x3BC, 12, 0, 0})
	SMember(FRuntimeFloatCurve)                        AlertedMovement                                             OFFSET(getStruct<T>, {0x3C8, 136, 0, 0})
	DMember(float)                                     AlertedMovementScale                                        OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(float)                                     AlertedMovementTimeScale                                    OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(float)                                     JawMovementSpeed                                            OFFSET(get<float>, {0x458, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.HalloweenSkull.OnJawClosed
	// void OnJawClosed();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.HalloweenSkull.OnAlert
	// void OnAlert();                                                                                                          // [0x18e5eb0] Final|Native|Protected 
};

/// Class /Script/FSD.HalloweenSkullAnimInstance
/// Size: 0x0028 (0x0002B8 - 0x0002E0)
class UHalloweenSkullAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	DMember(float)                                     JawMovementSpeedMin                                         OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     JawMovementSpeedMax                                         OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     JawMovementRange                                            OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(float)                                     SwitchAnimationTimeMin                                      OFFSET(get<float>, {0x2C4, 4, 0, 0})
	DMember(float)                                     SwitchAnimationTimeMax                                      OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     JawPosition                                                 OFFSET(get<float>, {0x2CC, 4, 0, 0})
};

/// Class /Script/FSD.HangingFireCracker
/// Size: 0x0050 (0x000220 - 0x000270)
class AHangingFireCracker : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(class UInstantUsable*)                     Usable                                                      OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             SKMesh                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  MovingSparks                                                OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UFSDAudioComponent*)                 FuseSound                                                   OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TArray<class UStaticMeshComponent*>)       Crackers                                                    OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(class UNiagaraSystem*)                     CrackerExplosion                                            OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class USoundCue*)                          CrackerExplosionCue                                         OFFSET(get<T>, {0x258, 8, 0, 0})
	DMember(float)                                     SparkSpeed                                                  OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     ExplodeRange                                                OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     ExplodeImpulse                                              OFFSET(get<float>, {0x268, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.HangingFireCracker.StartFire
	// void StartFire();                                                                                                        // [0x18e64b0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.HeadVanityItem
/// Size: 0x0138 (0x000130 - 0x000268)
class UHeadVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AnimInstance                                                OFFSET(get<T>, {0x158, 40, 0, 0})
	CMember(EHeadVanityType)                           HeadVanityType                                              OFFSET(get<T>, {0x180, 1, 0, 0})
	DMember(bool)                                      HideEyebrows                                                OFFSET(get<bool>, {0x181, 1, 0, 0})
	DMember(bool)                                      HideSideburns                                               OFFSET(get<bool>, {0x182, 1, 0, 0})
	DMember(bool)                                      HideMoustache                                               OFFSET(get<bool>, {0x183, 1, 0, 0})
	DMember(bool)                                      HideBeard                                                   OFFSET(get<bool>, {0x184, 1, 0, 0})
	DMember(bool)                                      HideAll                                                     OFFSET(get<bool>, {0x185, 1, 0, 0})
	DMember(bool)                                      RequiresSlimArmor                                           OFFSET(get<bool>, {0x186, 1, 0, 0})
	CMember(TArray<class UArmorVanityItem*>)           ForceThickAmorsHack                                         OFFSET(get<T>, {0x188, 16, 0, 0})
	DMember(bool)                                      HideHead                                                    OFFSET(get<bool>, {0x198, 1, 0, 0})
	CMember(ECharacterHeadMesh)                        HeadMesh                                                    OFFSET(get<T>, {0x199, 1, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) MaterialOverride                                            OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(TMap<class UPlayerCharacterID*, TWeakObjectPtr<UMaterialInterface*>>) ClassMaterials                   OFFSET(get<T>, {0x1C8, 80, 0, 0})
	CMember(TSet<UTagVanityHeadwear*>)                 VanityTags                                                  OFFSET(get<T>, {0x218, 80, 0, 0})
};

/// Class /Script/FSD.WidgetComponentCustomMaterial
/// Size: 0x0010 (0x0005A0 - 0x0005B0)
class UWidgetComponentCustomMaterial : public UWidgetComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1456;

public:
	CMember(class UMaterialInterface*)                 CustomMaterial                                              OFFSET(get<T>, {0x5A0, 8, 0, 0})
};

/// Class /Script/FSD.HealthBarComponent
/// Size: 0x0000 (0x0005B0 - 0x0005B0)
class UHealthBarComponent : public UWidgetComponentCustomMaterial
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1456;

public:
};

/// Class /Script/FSD.HealthDamageTracker
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UHealthDamageTracker : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FMulticastInlineDelegate)                  OnTrackedPercentageReachedEvent                             OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     TiggerOnPercentage                                          OFFSET(get<float>, {0xC0, 4, 0, 0})
	CMember(class UHealthComponentBase*)               Health                                                      OFFSET(get<T>, {0xC8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.HealthDamageTracker.ResetTrackedDamage
	// void ResetTrackedDamage();                                                                                               // [0x18e6210] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HealthDamageTracker.OnDamageTaken
	// void OnDamageTaken(float amount);                                                                                        // [0x18e5ed0] Final|Native|Protected 
};

/// Class /Script/FSD.HeartstoneTrap
/// Size: 0x0028 (0x000220 - 0x000248)
class AHeartstoneTrap : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x228, 32, 0, 0})
};

/// Class /Script/FSD.HeavyParticleCannon
/// Size: 0x01E8 (0x000780 - 0x000968)
class AHeavyParticleCannon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2408;

public:
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(class UReflectionHitscanComponent*)        HitscanComponent                                            OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(class UStickyFlameSpawner*)                StickyFlamesSpawner                                         OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(class UFirstPersonNiagaraComponent*)       FirstPersonBeam                                             OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(class UFirstPersonNiagaraComponent*)       FirstPersonLaserSight                                       OFFSET(get<T>, {0x7A0, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  ThirdPersonBeam                                             OFFSET(get<T>, {0x7A8, 8, 0, 0})
	CMember(class USoundBase*)                         BeamHitLocationGenericSound                                 OFFSET(get<T>, {0x7C0, 8, 0, 0})
	CMember(class USoundBase*)                         BeamHitLocationEnemySound                                   OFFSET(get<T>, {0x7C8, 8, 0, 0})
	CMember(class USoundBase*)                         BeamHitLocationEnemy_Local_Sound                            OFFSET(get<T>, {0x7D0, 8, 0, 0})
	DMember(float)                                     BeamHitSoundFadeSwitchTime                                  OFFSET(get<float>, {0x7DC, 4, 0, 0})
	CMember(class USoundBase*)                         BeamHitLocationTailSound                                    OFFSET(get<T>, {0x7E0, 8, 0, 0})
	CMember(class USoundBase*)                         BoosterModuleActivated                                      OFFSET(get<T>, {0x7E8, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBoosterActiveChanged                                      OFFSET(getStruct<T>, {0x7F0, 16, 0, 0})
	CMember(class UNiagaraSystem*)                     ReflectedBeam                                               OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ReflectedBeam_PhotoSensitive                                OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ReflectedLaserSight                                         OFFSET(get<T>, {0x820, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ImpactParticle                                              OFFSET(get<T>, {0x828, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ImpactParticle_PhotoSensitive                               OFFSET(get<T>, {0x830, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ProjectionModuleParticle                                    OFFSET(get<T>, {0x838, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  ImpactParticleComp                                          OFFSET(get<T>, {0x840, 8, 0, 0})
	SMember(FDecalData)                                ImpactDecal_ShortTime                                       OFFSET(getStruct<T>, {0x848, 32, 0, 0})
	SMember(FDecalData)                                ImpactDecal_LongTime                                        OFFSET(getStruct<T>, {0x868, 32, 0, 0})
	DMember(bool)                                      bReloadOnButtonRelease                                      OFFSET(get<bool>, {0x888, 1, 0, 0})
	DMember(float)                                     MinTimeBetweenBiomassGain                                   OFFSET(get<float>, {0x88C, 4, 0, 0})
	DMember(bool)                                      BulkyBeam                                                   OFFSET(get<bool>, {0x898, 1, 0, 0})
	DMember(float)                                     NormalBeamWidth                                             OFFSET(get<float>, {0x89C, 4, 0, 0})
	DMember(float)                                     BulkyBeamWidth                                              OFFSET(get<float>, {0x8A0, 4, 0, 0})
	DMember(float)                                     ExtraRadialDamagePerSec                                     OFFSET(get<float>, {0x8A4, 4, 0, 0})
	DMember(float)                                     ExtraRadialRangePerSec                                      OFFSET(get<float>, {0x8A8, 4, 0, 0})
	DMember(float)                                     CancelCostPercentage                                        OFFSET(get<float>, {0x8C0, 4, 0, 0})
	DMember(float)                                     ChargeupTime                                                OFFSET(get<float>, {0x8C4, 4, 0, 0})
	CMember(class USoundBase*)                         StartChargeSound                                            OFFSET(get<T>, {0x8C8, 8, 0, 0})
	SMember(FVector)                                   LastDecalLocation                                           OFFSET(getStruct<T>, {0x8D8, 12, 0, 0})
	DMember(bool)                                      IsNewDecalBeam                                              OFFSET(get<bool>, {0x8E4, 1, 0, 0})
	DMember(float)                                     ProjectionModuleDamage                                      OFFSET(get<float>, {0x8E8, 4, 0, 0})
	CMember(class UTerrainType*)                       PlatformTerrainType                                         OFFSET(get<T>, {0x8F0, 8, 0, 0})
	DMember(bool)                                      BoostActive                                                 OFFSET(get<bool>, {0x904, 1, 0, 0})
	DMember(bool)                                      bReloadBoostsBeam                                           OFFSET(get<bool>, {0x905, 1, 0, 0})
	DMember(float)                                     ExtraReloadTimeAfterBoost                                   OFFSET(get<float>, {0x908, 4, 0, 0})
	DMember(float)                                     BoostExtraAmmoCost                                          OFFSET(get<float>, {0x90C, 4, 0, 0})
	DMember(float)                                     BeamDependentReloadDuration                                 OFFSET(get<float>, {0x924, 4, 0, 0})
	SMember(FVector2D)                                 BeamDistanceRange                                           OFFSET(getStruct<T>, {0x92C, 8, 0, 0})
	SMember(FVector2D)                                 BeamTesselationRange                                        OFFSET(getStruct<T>, {0x934, 8, 0, 0})
	DMember(bool)                                      bIsBeamActive                                               OFFSET(get<bool>, {0x93C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.HeavyParticleCannon.UpdateBeamsVisibility
	// void UpdateBeamsVisibility(bool isBeamVisible);                                                                          // [0x17f3a30] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.HeavyParticleCannon.UpdateBeam
	// void UpdateBeam(FReflectionTraceResult& Path);                                                                           // [0x18e6a00] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.HeavyParticleCannon.ServerSetBoostActive
	// void ServerSetBoostActive(bool newActive);                                                                               // [0x17ef280] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HeavyParticleCannon.Server_SetBeamActive
	// void Server_SetBeamActive(bool inIsBeamActive);                                                                          // [0x17f4a20] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HeavyParticleCannon.Server_ExplodePlatform
	// void Server_ExplodePlatform(FVector Location);                                                                           // [0x1d6f900] Event|Protected|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.HeavyParticleCannon.OnTargetKilled
	// void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);                       // [0x18e60e0] Final|Native|Protected 
	// Function /Script/FSD.HeavyParticleCannon.OnRep_BoostActive
	// void OnRep_BoostActive();                                                                                                // [0x18e5f50] Final|Native|Protected 
	// Function /Script/FSD.HeavyParticleCannon.OnRep_bIsBeamActive
	// void OnRep_bIsBeamActive();                                                                                              // [0x18e60c0] Final|Native|Protected 
	// Function /Script/FSD.HeavyParticleCannon.IsHittngEnemyChanged
	// void IsHittngEnemyChanged(bool isHittingEnemy);                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.HeavyParticleCannon.Client_AddAmmoOnKill
	// void Client_AddAmmoOnKill();                                                                                             // [0x17f3ac0] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.HeavyParticleCannon.ChargeUpComplete
	// void ChargeUpComplete();                                                                                                 // [0x18e5360] Final|Native|Protected 
	// Function /Script/FSD.HeavyParticleCannon.ChargeChanged
	// void ChargeChanged(bool isCharging);                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Struct /Script/FSD.PitchedUsers
/// Size: 0x0020 (0x000000 - 0x000020)
class FPitchedUsers : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class APlayerCharacter*)                   Player                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Timer                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.HeliumTank
/// Size: 0x0020 (0x000220 - 0x000240)
class AHeliumTank : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UCurveFloat*)                        PitchCurve                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TArray<FPitchedUsers>)                     PitchedUsers                                                OFFSET(get<T>, {0x228, 16, 0, 0})
	CMember(class AHeliumTank*)                        Leader                                                      OFFSET(get<T>, {0x238, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.HeliumTank.OnUsedBy
	// void OnUsedBy(class APlayerCharacter* User, EInputKeys Key);                                                             // [0x18eadf0] Final|Native|Protected 
	// Function /Script/FSD.HeliumTank.OnShoutStarted
	// void OnShoutStarted(class APlayerCharacter* Player, class UAudioComponent* Audio);                                       // [0x18ead20] Final|Native|Protected 
	// Function /Script/FSD.HeliumTank.OnRep_PitchedUsers
	// void OnRep_PitchedUsers();                                                                                               // [0x18ead00] Final|Native|Protected 
};

/// Class /Script/FSD.HeroEnemies
/// Size: 0x0098 (0x000028 - 0x0000C0)
class UHeroEnemies : public URunningMissionBP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FGameplayTagQuery)                         AllowedQuery                                                OFFSET(getStruct<T>, {0x28, 72, 0, 0})
	CMember(TMap<class UEnemyDescriptor*, FEliteEnemyEntry>) Entries                                               OFFSET(get<T>, {0x70, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.HeroEnemies.OnEnemySpawned
	// void OnEnemySpawned(class APawn* enemy, class UEnemyDescriptor* descriptor);                                             // [0x18eaaa0] Final|Native|Protected 
};

/// Struct /Script/FSD.HeroInfo
/// Size: 0x0088 (0x000000 - 0x000088)
class FHeroInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FText)                                     HeroName                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(class UTexture2D*)                         HeroIcon                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UTexture2D*)                         SmallHeroIcon                                               OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UTexture2D*)                         HeroFullSizeImage                                           OFFSET(get<T>, {0x28, 8, 0, 0})
	SMember(FLinearColor)                              HeroColor                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FText)                                     HeroShortDescription                                        OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	SMember(FText)                                     HeroLongDescription                                         OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	SMember(FText)                                     SwitchToMessage                                             OFFSET(getStruct<T>, {0x70, 24, 0, 0})
};

/// Class /Script/FSD.PlayerCharacterData
/// Size: 0x0090 (0x000030 - 0x0000C0)
class UPlayerCharacterData : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UPlayerCharacterID*)                 characterID                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FHeroInfo)                                 HeroInfo                                                    OFFSET(getStruct<T>, {0x38, 136, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerCharacterData.GetSwitchToMessage
	// FText GetSwitchToMessage();                                                                                              // [0x18ea9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterData.GetSmallIcon
	// class UTexture2D* GetSmallIcon();                                                                                        // [0x18ea9d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterData.GetShortDescription
	// FText GetShortDescription();                                                                                             // [0x18ea9a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterData.GetName
	// FText GetName();                                                                                                         // [0x18ea970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterData.GetLongDescription
	// FText GetLongDescription();                                                                                              // [0x18ea940] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterData.GetIcon
	// class UTexture2D* GetIcon();                                                                                             // [0x18ea920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterData.GetFullSizeImage
	// class UTexture2D* GetFullSizeImage();                                                                                    // [0x183c1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterData.GetColor
	// FLinearColor GetColor();                                                                                                 // [0x18ea870] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.HitReactionComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UHitReactionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TArray<class UAnimSequenceBase*>)          HitReactions                                                OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     FirstHitReactBlendIn                                        OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     OverrideHitReactBlendIn                                     OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(bool)                                      AllowHitReactions                                           OFFSET(get<bool>, {0xCC, 1, 0, 0})
	CMember(class USkeletalMeshComponent*)             SkeletalMesh                                                OFFSET(get<T>, {0xD0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.HitReactionComponent.PlayHitReaction
	// void PlayHitReaction();                                                                                                  // [0x18eaec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HitReactionComponent.OnDamageTaken
	// void OnDamageTaken(float amount);                                                                                        // [0x18eaa20] Final|Native|Protected 
};

/// Struct /Script/FSD.HitscanDelayedImpact
/// Size: 0x0028 (0x000000 - 0x000028)
class FHitscanDelayedImpact : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class USoundCue*)                          ImpactSound                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class USoundCue*)                          FirstPersonImpactSound                                      OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/FSD.HitscanComponent
/// Size: 0x00B8 (0x000258 - 0x000310)
class UHitscanComponent : public UHitscanBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	SMember(FMulticastInlineDelegate)                  OnHit                                                       OFFSET(getStruct<T>, {0x258, 16, 0, 0})
	DMember(bool)                                      CanHitInstigator                                            OFFSET(get<bool>, {0x268, 1, 0, 0})
	DMember(bool)                                      BulletsCanCarve                                             OFFSET(get<bool>, {0x269, 1, 0, 0})
	SMember(FIRandRange)                               NormalBulletsPerCarvingOne                                  OFFSET(getStruct<T>, {0x26C, 8, 0, 0})
	DMember(float)                                     CarveDiameter                                               OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     CarveNoise                                                  OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     CarveDebrisSize                                             OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     GeneralImpactAudioVolume                                    OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     ImpactDelay                                                 OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(bool)                                      OnlyUseImpactEffects                                        OFFSET(get<bool>, {0x28C, 1, 0, 0})
	CMember(class UFXSystemAsset*)                     ImpactParticles                                             OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class USoundCue*)                          ImpactSound                                                 OFFSET(get<T>, {0x298, 8, 0, 0})
	DMember(bool)                                      IgnoreAlwaysPenetrate                                       OFFSET(get<bool>, {0x2A0, 1, 0, 0})
	CMember(TArray<class AActor*>)                     DamagedActorCache                                           OFFSET(get<T>, {0x2A8, 16, 0, 0})
	CMember(TArray<FHitscanDelayedImpact>)             DelayedImpacts                                              OFFSET(get<T>, {0x2D0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.HitscanComponent.Server_RegisterRicochetHit_Terrain
	// void Server_RegisterRicochetHit_Terrain(FVector_NetQuantize Origin, FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, class UFSDPhysicalMaterial* PhysMaterial); // [0x18eb740] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HitscanComponent.Server_RegisterRicochetHit_Destructable
	// void Server_RegisterRicochetHit_Destructable(FVector_NetQuantize Origin, FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // [0x18eb530] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HitscanComponent.Server_RegisterRicochetHit
	// void Server_RegisterRicochetHit(FVector_NetQuantize Origin, FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial); // [0x18eb370] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HitscanComponent.Server_RegisterHit_Terrain
	// void Server_RegisterHit_Terrain(FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, class UFSDPhysicalMaterial* PhysMaterial); // [0x18eb230] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HitscanComponent.Server_RegisterHit_Destructable
	// void Server_RegisterHit_Destructable(FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // [0x18eb080] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HitscanComponent.Server_RegisterHit
	// void Server_RegisterHit(FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial); // [0x18eaee0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.HitscanComponent.All_ShowRicochetHit_Terrain
	// void All_ShowRicochetHit_Terrain(FVector_NetQuantize Origin, FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, char MaterialID, class UFSDPhysicalMaterial* PhysMaterial); // [0x18ea5e0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.HitscanComponent.All_ShowRicochetHit_Destructable
	// void All_ShowRicochetHit_Destructable(FVector_NetQuantize Origin, FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // [0x18ea3d0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.HitscanComponent.All_ShowRicochetHit
	// void All_ShowRicochetHit(FVector_NetQuantize Origin, FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, bool SpawnDecal, class UFSDPhysicalMaterial* PhysMaterial); // [0x18ea200] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.HitscanComponent.All_ShowHit_Terrain
	// void All_ShowHit_Terrain(FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, char MaterialID, class UFSDPhysicalMaterial* PhysMaterial); // [0x18ea060] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.HitscanComponent.All_ShowHit_Destructable
	// void All_ShowHit_Destructable(FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, class UPrimitiveComponent* Target, class UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // [0x18e9eb0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.HitscanComponent.All_ShowHit
	// void All_ShowHit(FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal, bool SpawnDecal, class UFSDPhysicalMaterial* PhysMaterial); // [0x18e9d10] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.ThrowableItem
/// Size: 0x0090 (0x0003E0 - 0x000470)
class AThrowableItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(class UClass*)                             ThrowableClass                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UAnimMontage*)                       FPThrowMontage                                              OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPThrowMontage                                              OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(float)                                     ThrowVelocity                                               OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     InheritOwnerVelocityScale                                   OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(float)                                     ThrowAngle                                                  OFFSET(get<float>, {0x408, 4, 0, 0})
	DMember(float)                                     CooldownAfterThrow                                          OFFSET(get<float>, {0x40C, 4, 0, 0})
	DMember(bool)                                      CanThrowBeforeEquipAnimFinish                               OFFSET(get<bool>, {0x410, 1, 0, 0})
	DMember(float)                                     CooldownAfterEquip                                          OFFSET(get<float>, {0x414, 4, 0, 0})
	DMember(float)                                     ThrowDelay                                                  OFFSET(get<float>, {0x418, 4, 0, 0})
	SMember(FVector)                                   ThrowOffset                                                 OFFSET(getStruct<T>, {0x41C, 12, 0, 0})
	DMember(float)                                     CooldownLeft                                                OFFSET(get<float>, {0x428, 4, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x430, 16, 0, 0})
	CMember(class UClass*)                             LoadoutItem                                                 OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<AThrowableActor*>>)  ThrownActors                                                OFFSET(get<T>, {0x448, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ThrowableItem.Simulate_Throw
	// void Simulate_Throw(class UClass* actorClass);                                                                           // [0x19d8220] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.ThrowableItem.Server_Throw
	// void Server_Throw(class UClass* actorClass, FVector Location);                                                           // [0x19d7ee0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.ThrowableItem.ReceiveItemThrown
	// void ReceiveItemThrown(class AThrowableActor* thrownActor);                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ThrowableItem.ReceiveItemSpawned
	// void ReceiveItemSpawned(class AThrowableActor* thrownActor);                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ThrowableItem.OnThrownActorDestroyed
	// void OnThrownActorDestroyed(class AActor* Actor);                                                                        // [0x19d7870] Final|Native|Protected 
};

/// Class /Script/FSD.HolidayThrowableItem
/// Size: 0x0000 (0x000470 - 0x000470)
class AHolidayThrowableItem : public AThrowableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:


	/// Functions
	// Function /Script/FSD.HolidayThrowableItem.CameraModeUpdated
	// void CameraModeUpdated(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode);                          // [0x18ea7a0] Final|Native|Protected 
};

/// Class /Script/FSD.HostileGuntowerModuleController
/// Size: 0x0010 (0x000358 - 0x000368)
class AHostileGuntowerModuleController : public AFSDAIController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UAIPerceptionComponent*)             Perception                                                  OFFSET(get<T>, {0x358, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.HostileGuntowerModuleController.OnPerceptionUpdated
	// void OnPerceptionUpdated(class AActor* sensedActor, FAIStimulus Stimulus);                                               // [0x18eab70] Native|Public        
};

/// Class /Script/FSD.HttpUtilityLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UHttpUtilityLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.HUDActorTrackingSubsystem
/// Size: 0x0020 (0x000030 - 0x000050)
class UHUDActorTrackingSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FMulticastInlineDelegate)                  OnToggleTrackingEvent                                       OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShowAlwaysTrackedEvent                                    OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FSD.HealthBarLooks
/// Size: 0x0020 (0x000000 - 0x000020)
class FHealthBarLooks : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FLinearColor)                              HealthColor                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FLinearColor)                              DamageColor                                                 OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/FSD.HUDHealthBar
/// Size: 0x00D0 (0x000280 - 0x000350)
class UHUDHealthBar : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FMulticastInlineDelegate)                  OnOwnerDead                                                 OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	SMember(FLinearColor)                              HealthColor                                                 OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FLinearColor)                              DamageColor                                                 OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	CMember(TMap<EHealthbarType, FHealthBarLooks>)     HealthBarLooks                                              OFFSET(get<T>, {0x2C0, 80, 0, 0})
	SMember(FLinearColor)                              OutlineColor                                                OFFSET(getStruct<T>, {0x310, 16, 0, 0})
	DMember(int32_t)                                   OutlineThickness                                            OFFSET(get<int32_t>, {0x320, 4, 0, 0})
	DMember(float)                                     HealthAnimationFactor                                       OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(float)                                     HealthPerCell                                               OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(int32_t)                                   MinHealthCells                                              OFFSET(get<int32_t>, {0x32C, 4, 0, 0})
	DMember(int32_t)                                   MaxHealthCells                                              OFFSET(get<int32_t>, {0x330, 4, 0, 0})
	CMember(TScriptInterface<Class>)                   TargetHealth                                                OFFSET(get<T>, {0x338, 16, 0, 0})
	DMember(float)                                     AnimatedHealth                                              OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0x34C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.HUDHealthBar.SetHealthComponent
	// void SetHealthComponent(TScriptInterface<Class>& Health, float Damage);                                                  // [0x18eb9a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.HUDHealthBar.GetCurrentHealth
	// float GetCurrentHealth();                                                                                                // [0x18ea890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.HUDVisibilityRegisteredWidget
/// Size: 0x000C (0x000000 - 0x00000C)
class FHUDVisibilityRegisteredWidget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TWeakObjectPtr<class UWidget*>)            Widget                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/FSD.HUDVisibilityGroup
/// Size: 0x0068 (0x000030 - 0x000098)
class UHUDVisibilityGroup : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FMulticastInlineDelegate)                  OnModeChanged                                               OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnVisibilityChanged                                         OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(EHUDVisibilityGroups)                      GroupID                                                     OFFSET(get<T>, {0x50, 1, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	DMember(bool)                                      AllowDynamicMode                                            OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      AllowHiddenMode                                             OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(bool)                                      bDynamicallyVisible                                         OFFSET(get<bool>, {0x78, 1, 0, 0})
	CMember(TArray<FHUDVisibilityRegisteredWidget>)    RegisteredWidgets                                           OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(EHUDVisibilityMode)                        RecommendedMode                                             OFFSET(get<T>, {0x90, 1, 0, 0})
	CMember(EHUDVisibilityMode)                        MinimalMode                                                 OFFSET(get<T>, {0x91, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.HUDVisibilityGroup.VisibilityDelegate__DelegateSignature
	// void VisibilityDelegate__DelegateSignature(class UHUDVisibilityGroup* Group, bool IsVisible);                            // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.HUDVisibilityGroup.SetModeFromPreset
	// void SetModeFromPreset(EHUDVisibilityPresets Preset);                                                                    // [0x18f1350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HUDVisibilityGroup.SetMode
	// void SetMode(EHUDVisibilityMode InMode);                                                                                 // [0x18f12d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HUDVisibilityGroup.SetHudGroupDynamicallyVisible
	// void SetHudGroupDynamicallyVisible(class UHUDVisibilityGroup* Group, bool IsVisible);                                    // [0x18f1210] Final|Native|Static|Protected|BlueprintCallable 
	// Function /Script/FSD.HUDVisibilityGroup.SetGroupDynamicallyVisible
	// void SetGroupDynamicallyVisible(bool IsVisible);                                                                         // [0x18f1180] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.HUDVisibilityGroup.RegisterWidgetWithVisibilityGroup
	// void RegisterWidgetWithVisibilityGroup(class UWidget* Widget, class UHUDVisibilityGroup* Group, ESlateVisibility VisibleMode, ESlateVisibility HiddenMode); // [0x18f1030] Final|Native|Static|Protected|BlueprintCallable 
	// Function /Script/FSD.HUDVisibilityGroup.RegisterMultipleWidgetsWithVisibilityGroup
	// void RegisterMultipleWidgetsWithVisibilityGroup(TArray<UWidget*> Widgets, class UHUDVisibilityGroup* Group, ESlateVisibility VisibleMode, ESlateVisibility HiddenMode); // [0x18f0ea0] Final|Native|Static|Protected|BlueprintCallable 
	// Function /Script/FSD.HUDVisibilityGroup.ModeDelegate__DelegateSignature
	// void ModeDelegate__DelegateSignature(class UHUDVisibilityGroup* Group, EHUDVisibilityMode Mode);                         // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.HUDVisibilityGroup.IsModeAllowed
	// bool IsModeAllowed(EHUDVisibilityMode InMode);                                                                           // [0x18f0b40] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HUDVisibilityGroup.IsInDynamicMode
	// bool IsInDynamicMode();                                                                                                  // [0x18f0b10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HUDVisibilityGroup.IsHudGroupVisible
	// bool IsHudGroupVisible(class UHUDVisibilityGroup* Group);                                                                // [0x18f0a80] Final|Native|Static|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.HUDVisibilityGroup.IsGroupVisible
	// bool IsGroupVisible();                                                                                                   // [0x18f0a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HUDVisibilityGroup.GetMode
	// EHUDVisibilityMode GetMode();                                                                                            // [0x18f0910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.HUDVisibilityGroup.GetAllowedModes
	// TArray<EHUDVisibilityMode> GetAllowedModes();                                                                            // [0x18f0710] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.HUDWarningWidget
/// Size: 0x0000 (0x000280 - 0x000280)
class UHUDWarningWidget : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:


	/// Functions
	// Function /Script/FSD.HUDWarningWidget.SetData
	// void SetData(class UTexture2D* Texture, class USoundBase* PingSound);                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.HUDWarningWidget.Ping
	// void Ping(bool DestroyAfterPing);                                                                                        // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.FSDMainHUDWidget
/// Size: 0x0000 (0x000260 - 0x000260)
class UFSDMainHUDWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:


	/// Functions
	// Function /Script/FSD.FSDMainHUDWidget.PushEvent
	// void PushEvent(class UWidget* eventWidget, bool Left);                                                                   // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDMainHUDWidget.PopEvent
	// void PopEvent(class UWidget* eventWidget, bool Left);                                                                    // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.FSDMainHUDWidget.OnRadarPointAdded
	// void OnRadarPointAdded(class URadarPointComponent* Point);                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDMainHUDWidget.GetHudJetBootsFuelVertical
	// class UJetBootsFuelWidget* GetHudJetBootsFuelVertical();                                                                 // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.FSDMainHUDWidget.AddRadarPoint
	// void AddRadarPoint(class URadarPointComponent* Point);                                                                   // [0x18ef190] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDInWorldWidget
/// Size: 0x0008 (0x000260 - 0x000268)
class UFSDInWorldWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	DMember(bool)                                      bHUDVisibile                                                OFFSET(get<bool>, {0x260, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDInWorldWidget.ReceiveHUDVisibilityChanged
	// void ReceiveHUDVisibilityChanged(bool InHudVisible);                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.FSDInWorldWidget.CallbackHUDVisibilityChanged
	// void CallbackHUDVisibilityChanged(bool InHudVisible);                                                                    // [0x18ef240] Final|Native|Protected 
};

/// Class /Script/FSD.HydraWeedCore
/// Size: 0x0000 (0x000348 - 0x000348)
class AHydraWeedCore : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:


	/// Functions
	// Function /Script/FSD.HydraWeedCore.WakupCore
	// void WakupCore();                                                                                                        // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.HydraWeedCore.OnShooterKilled
	// void OnShooterKilled(class AHydraWeedShooter* shooter);                                                                  // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.HydraWeedCore.OnHealerKilled
	// void OnHealerKilled(class AHydraWeedHealer* healer);                                                                     // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.ShootingPlant
/// Size: 0x0010 (0x000348 - 0x000358)
class AShootingPlant : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	DMember(bool)                                      IsVisible                                                   OFFSET(get<bool>, {0x348, 1, 0, 0})
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x350, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ShootingPlant.SetTarget
	// void SetTarget(class AActor* Target);                                                                                    // [0x19b41d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ShootingPlant.OnRep_Target
	// void OnRep_Target();                                                                                                     // [0x17f8340] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.HydraWeedShooter
/// Size: 0x0008 (0x000358 - 0x000360)
class AHydraWeedShooter : public AShootingPlant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class AHydraWeedCore*)                     Core                                                        OFFSET(get<T>, {0x358, 8, 0, 0})
};

/// Class /Script/FSD.HydraWeedHealer
/// Size: 0x0008 (0x000348 - 0x000350)
class AHydraWeedHealer : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class AHydraWeedCore*)                     Core                                                        OFFSET(get<T>, {0x348, 8, 0, 0})
};

/// Class /Script/FSD.HydraWeedSpawnProjectile
/// Size: 0x0010 (0x000340 - 0x000350)
class AHydraWeedSpawnProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FVector)                                   TargetLocation                                              OFFSET(getStruct<T>, {0x340, 12, 0, 0})
};

/// Class /Script/FSD.TriggerAI
/// Size: 0x0000 (0x000028 - 0x000028)
class UTriggerAI : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.TriggerAI.OnTriggerAI
	// bool OnTriggerAI(FName TriggerName);                                                                                     // [0x18f0d30] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.TriggerAI.OnMessageAI
	// void OnMessageAI(FName TriggerName);                                                                                     // [0x18f0ca0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.Aquisitionable
/// Size: 0x0000 (0x000028 - 0x000028)
class UAquisitionable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FSD.PickaxeSet
/// Size: 0x0038 (0x000000 - 0x000038)
class FPickaxeSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UPickaxePart*)                       BladeFront                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UPickaxePart*)                       OptionalBladeBack                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UPickaxePart*)                       Pommel                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UPickaxePart*)                       Handle                                                      OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UPickaxePart*)                       Shaft                                                       OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UPickaxePart*)                       Head                                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UPickaxePart*)                       Material                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FSD.GenerateIconInfo
/// Size: 0x0080 (0x000000 - 0x000080)
class FGenerateIconInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(EGeneratorIconType)                        IconType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(class UPickaxePart*)                       PickaxePart                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FPickaxeSet)                               PickaxeSet                                                  OFFSET(getStruct<T>, {0x10, 56, 0, 0})
	CMember(EPickaxePartLocation)                      PickaxePartLocation                                         OFFSET(get<T>, {0x48, 1, 0, 0})
	CMember(class UItemSkin*)                          ItemSkin                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UVanityItem*)                        Item                                                        OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 Character                                                   OFFSET(get<T>, {0x60, 8, 0, 0})
	SMember(FVector2D)                                 Size                                                        OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(bool)                                      bShowCloseUp                                                OFFSET(get<bool>, {0x70, 1, 0, 0})
	SMember(FName)                                     CancelGroup                                                 OFFSET(getStruct<T>, {0x74, 8, 0, 0})
};

/// Class /Script/FSD.IconGenerationManager
/// Size: 0x01B8 (0x000028 - 0x0001E0)
class UIconGenerationManager : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	CMember(class AIconGenerationCharacter*)           GeneratorInst                                               OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class AIconGenerationPickaxe*)             PickaxeGeneratorInst                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class AIconGenerationWeapon*)              WeaponGeneratorInst                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TArray<FGenerateIconInfo>)                 ItemGenerationQueue                                         OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<EVanitySlot>)                       VanitySlots                                                 OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<class UVanityItem*>)                HairColorHairItems                                          OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             IconCharacter                                               OFFSET(get<T>, {0xE8, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             IconPickaxe                                                 OFFSET(get<T>, {0x110, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             IconWeapon                                                  OFFSET(get<T>, {0x138, 40, 0, 0})
	CMember(class UTextureRenderTarget2D*)             LatestGeneratedTexture                                      OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class AIconGenerationBase*)                ActiveIconGenerator                                         OFFSET(get<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.IconGenerationManager.GenerateWeaponSkinIcon
	// class UTextureRenderTarget2D* GenerateWeaponSkinIcon(class UObject* WorldContextObject, class UItemSkin* Item, bool inShowCloseUp, FTransform Offset, FVector2D Size); // [0x18f0510] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.IconGenerationManager.GenerateWeaponIcon_Async
	// void GenerateWeaponIcon_Async(class UIconGenerationManager* Manager, class UItemSkin* Item, bool inShowCloseUp, class UPlayerCharacterID* Character, class UTextureRenderTarget2D*& Icon, FLatentActionInfo LatentInfo); // [0x18f0300] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.IconGenerationManager.GenerateVanityIcon_Async
	// void GenerateVanityIcon_Async(class UIconGenerationManager* Manager, class UVanityItem* Item, class UPlayerCharacterID* Character, FName CancelGroup, class UTextureRenderTarget2D*& Icon, FLatentActionInfo LatentInfo); // [0x18f0100] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.IconGenerationManager.GenerateVanityIcon
	// class UTextureRenderTarget2D* GenerateVanityIcon(class UObject* WorldContextObject, class UVanityItem* Item, class UPlayerCharacterID* Character, FTransform Offset, FVector2D Size, bool persistant); // [0x18efed0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.IconGenerationManager.GeneratePickaxeSetIcon_Async
	// void GeneratePickaxeSetIcon_Async(class UIconGenerationManager* Manager, FPickaxeSet PickaxeSet, class UPlayerCharacterID* Character, class UTextureRenderTarget2D*& Icon, FLatentActionInfo LatentInfo); // [0x18efce0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.IconGenerationManager.GeneratePickaxeSetIcon
	// class UTextureRenderTarget2D* GeneratePickaxeSetIcon(class UObject* WorldContextObject, FPickaxeSet PickaxeSet, class UPlayerCharacterID* Character, FTransform Offset, FVector2D Size); // [0x18efab0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.IconGenerationManager.GeneratePickaxePartIcon_Async
	// void GeneratePickaxePartIcon_Async(class UIconGenerationManager* Manager, class UPickaxePart* part, EPickaxePartLocation PickaxePartLocation, class UPlayerCharacterID* Character, class UTextureRenderTarget2D*& Icon, FLatentActionInfo LatentInfo); // [0x18ef8b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.IconGenerationManager.GeneratePickaxePartIcon
	// class UTextureRenderTarget2D* GeneratePickaxePartIcon(class UObject* WorldContextObject, class UPickaxePart* part, EPickaxePartLocation PickaxePartLocation, class UPlayerCharacterID* Character, FTransform Offset, FVector2D Size); // [0x18ef680] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.IconGenerationManager.CancelIconGenerations
	// void CancelIconGenerations(class UIconGenerationManager* Manager, FName CancelGroup);                                    // [0x18ef410] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.IconGeneratable
/// Size: 0x0000 (0x000028 - 0x000028)
class UIconGeneratable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.Craftable
/// Size: 0x0000 (0x000028 - 0x000028)
class UCraftable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.Craftable.PreviewItem
	// void PreviewItem(class AFSDPlayerState* PlayerState, bool Show);                                                         // [0x18f0dd0] Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.Craftable.IsOwned
	// bool IsOwned(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                                  // [0x18f0bd0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Craftable.GetResourceCost
	// TArray<FCraftingCost> GetResourceCost();                                                                                 // [0x18f09a0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Craftable.GetRequiredPlayerRank
	// int32_t GetRequiredPlayerRank();                                                                                         // [0x18f0970] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Craftable.GetFashioniteCost
	// FCraftingCost GetFashioniteCost();                                                                                       // [0x18f0840] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Craftable.GetCraftingCreditsCost
	// int32_t GetCraftingCreditsCost();                                                                                        // [0x18f0810] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Craftable.GetCraftableName
	// FText GetCraftableName();                                                                                                // [0x18f07d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Craftable.GetCraftableDescription
	// FText GetCraftableDescription();                                                                                         // [0x18f0790] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Craftable.CraftItemWithFashionite
	// void CraftItemWithFashionite(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                  // [0x18ef5b0] Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.Craftable.CraftItem
	// void CraftItem(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                                // [0x18ef4e0] Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.Craftable.CanCraftWithFashionite
	// bool CanCraftWithFashionite(class UObject* WorldContextObject);                                                          // [0x18ef370] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Craftable.CanCraft
	// bool CanCraft(class UObject* WorldContextObject);                                                                        // [0x18ef2d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FootStepNotifyTarget
/// Size: 0x0000 (0x000028 - 0x000028)
class UFootStepNotifyTarget : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.Health
/// Size: 0x0000 (0x000028 - 0x000028)
class UHealth : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.Health.IsDead
	// bool IsDead();                                                                                                           // [0x18ce690] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Health.IsAlive
	// bool IsAlive();                                                                                                          // [0x18f0a20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Health.GetOwner
	// class AActor* GetOwner();                                                                                                // [0x18f0940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Health.GetMaxHealth
	// float GetMaxHealth();                                                                                                    // [0x18f08e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Health.GetHealthbarType
	// EHealthbarType GetHealthbarType();                                                                                       // [0x18f08b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Health.GetHealth
	// float GetHealth();                                                                                                       // [0x18f0880] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.InputCompatible
/// Size: 0x0000 (0x000028 - 0x000028)
class UInputCompatible : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.AnimNotifyState_FootStep
/// Size: 0x0008 (0x000030 - 0x000038)
class UAnimNotifyState_FootStep : public UAnimNotifyState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   LegNr                                                       OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/FSD.IKLegSetup
/// Size: 0x0008 (0x000000 - 0x000008)
class FIKLegSetup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	SMember(FName)                                     EndBone                                                     OFFSET(getStruct<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.IKSyncGroup
/// Size: 0x0018 (0x000000 - 0x000018)
class FIKSyncGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<int32_t>)                           LegNumbers                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   MinDownCount                                                OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.IKStyle
/// Size: 0x0040 (0x000000 - 0x000040)
class FIKStyle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     StepAirTime                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     StepRadius                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	CMember(class UAnimSequence*)                      RandomWalkCycles                                            OFFSET(get<T>, {0x8, 48, 0, 0})
	CMember(class UAnimSequence*)                      NeutralAnimation                                            OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.IKComponent
/// Size: 0x0210 (0x0000B0 - 0x0002C0)
class UIKComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0xB0, 1, 0, 0})
	CMember(TArray<FIKLegSetup>)                       LegSetups                                                   OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TArray<FIKSyncGroup>)                      SyncGroups                                                  OFFSET(get<T>, {0xC8, 16, 0, 0})
	SMember(FIKStyle)                                  IKStyle                                                     OFFSET(getStruct<T>, {0xD8, 64, 0, 0})
	CMember(class USphereComponent*)                   BodyColi                                                    OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TArray<FEndEffector>)                      Effectors                                                   OFFSET(get<T>, {0x2A0, 16, 0, 0})
	DMember(float)                                     EffectorWeight                                              OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(bool)                                      EffectorsEnabled                                            OFFSET(get<bool>, {0x2B4, 1, 0, 0})
};

/// Class /Script/FSD.MinersManualHandler
/// Size: 0x0000 (0x000028 - 0x000028)
class UMinersManualHandler : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.MinersManualHandler.OpenMinersManualPage
	// void OpenMinersManualPage(EMinersManualSinglePage page);                                                                 // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.MinersManualHandler.OpenMinersManualFromID
	// void OpenMinersManualFromID(EMinersManualSection Section, FGuid& ID);                                                    // [0x1d6f900] Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.ImpactComponent
/// Size: 0x0070 (0x0000B0 - 0x000120)
class UImpactComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	SMember(FMulticastInlineDelegate)                  OnImpactedEvent                                             OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHighAcceleration                                          OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(bool)                                      DebugText                                                   OFFSET(get<bool>, {0xD0, 1, 0, 0})
	DMember(bool)                                      TrackAcceleration                                           OFFSET(get<bool>, {0xFC, 1, 0, 0})
	DMember(bool)                                      TrackVelocity                                               OFFSET(get<bool>, {0xFD, 1, 0, 0})
	DMember(float)                                     TriggerHighAccelAt                                          OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     TriggerAtVelocityDifference                                 OFFSET(get<float>, {0x110, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ImpactComponent.SetCheckVelocity
	// void SetCheckVelocity(bool aCheckVelocity);                                                                              // [0x18f5c90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ImpactComponent.SetCheckAcceleration
	// void SetCheckAcceleration(bool aCheckAcceleration);                                                                      // [0x18f5c00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ImpactComponent.EnableImpactCheckhing
	// void EnableImpactCheckhing(class USceneComponent* cmp);                                                                  // [0x18f4290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ImpactComponent.DisableImpactChecking
	// void DisableImpactChecking();                                                                                            // [0x18f4250] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.WeaponImpactComponent
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UWeaponImpactComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	SMember(FMulticastInlineDelegate)                  OnImpactedEvent                                             OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHighAcceleration                                          OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(bool)                                      DebugText                                                   OFFSET(get<bool>, {0xD0, 1, 0, 0})
	SMember(FName)                                     ImpactSocketName                                            OFFSET(getStruct<T>, {0xD4, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             ActiveMesh                                                  OFFSET(get<T>, {0xE0, 8, 0, 0})
	DMember(bool)                                      TrackAcceleration                                           OFFSET(get<bool>, {0x110, 1, 0, 0})
	DMember(bool)                                      TrackVelocity                                               OFFSET(get<bool>, {0x111, 1, 0, 0})
	DMember(float)                                     TriggerHighAccelAt                                          OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(float)                                     TriggerAtVelocityDifference                                 OFFSET(get<float>, {0x124, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.WeaponImpactComponent.EnableImpactCheckhing
	// void EnableImpactCheckhing(class USkeletalMeshComponent* cmp);                                                           // [0x18f4320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeaponImpactComponent.DisableImpactChecking
	// void DisableImpactChecking();                                                                                            // [0x18f4270] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ImpactAudioComponent
/// Size: 0x0030 (0x000860 - 0x000890)
class UImpactAudioComponent : public UAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2192;

public:
	SMember(FName)                                     AudioParameterSpeed                                         OFFSET(getStruct<T>, {0x860, 8, 0, 0})
	DMember(float)                                     DecelerationThreshold                                       OFFSET(get<float>, {0x87C, 4, 0, 0})
	DMember(bool)                                      ListenForDeath                                              OFFSET(get<bool>, {0x884, 1, 0, 0})
	CMember(class UHealthComponentBase*)               ParentHealth                                                OFFSET(get<T>, {0x888, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ImpactAudioComponent.OnOwnerDeath
	// void OnOwnerDeath(class UHealthComponentBase* HealthComponent);                                                          // [0x18f5a00] Final|Native|Public  
	// Function /Script/FSD.ImpactAudioComponent.AddImpactAudioToActor
	// class UImpactAudioComponent* AddImpactAudioToActor(class AActor* Actor, class USceneComponent* AttachToComponent, class UClass* ComponentClass); // [0x18f3ea0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.FSDReverbVolume
/// Size: 0x0030 (0x000220 - 0x000250)
class AFSDReverbVolume : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(class UBoxComponent*)                      BoxCollision                                                OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UReverbEffect*)                      Reverb                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USoundMix*)                          SoundMix                                                    OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class USoundCue*)                          Ambient                                                     OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UAudioComponent*)                    AmbientInstance                                             OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     Priority                                                    OFFSET(get<float>, {0x248, 4, 0, 0})
};

/// Class /Script/FSD.InDangerComponent
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UInDangerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FMulticastInlineDelegate)                  OnInDanger                                                  OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	CMember(TWeakObjectPtr<class UHealthComponentBase*>) ParentHealthComponent                                     OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     DamageTimeLimit                                             OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     DamageThreshold                                             OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(bool)                                      RunsOnClients                                               OFFSET(get<bool>, {0xD0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.InDangerComponent.SetIsActive
	// void SetIsActive(bool aFlag);                                                                                            // [0x18f5fd0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InDangerComponent.OnDamage
	// void OnDamage(float amount);                                                                                             // [0x18f5840] Native|Public        
	// Function /Script/FSD.InDangerComponent.GetIsActive
	// bool GetIsActive();                                                                                                      // [0x18f4d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.NetMontageAble
/// Size: 0x0000 (0x000028 - 0x000028)
class UNetMontageAble : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.NetMontageAble.QueueMontage
	// float QueueMontage(class UAnimMontage* Montage);                                                                         // [0x18f5b40] Native|Public|BlueprintCallable 
	// Function /Script/FSD.NetMontageAble.GetSkeletalMesh
	// class USkeletalMeshComponent* GetSkeletalMesh();                                                                         // [0x18f4d40] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NetMontageAble.GetCenterOfMassSocketName
	// FName GetCenterOfMassSocketName();                                                                                       // [0x18f4c20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.NetMontageAble.GetAnimInstance
	// class UAnimInstance* GetAnimInstance();                                                                                  // [0x18f49d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.InfectedStateComponent
/// Size: 0x0050 (0x0001D0 - 0x000220)
class UInfectedStateComponent : public UCharacterBreakOutState
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FRandRange)                                CleanseAmount                                               OFFSET(getStruct<T>, {0x1D0, 8, 0, 0})
	CMember(class USoundBase*)                         AudioFreeOfInfection                                        OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(class UFSDPhysicalMaterial*)               InfectedPhysicalMaterial                                    OFFSET(get<T>, {0x1E0, 8, 0, 0})
	CMember(class UFSDPhysicalMaterial*)               DwarfFleshMaterial                                          OFFSET(get<T>, {0x1E8, 8, 0, 0})
	CMember(class UPawnAffliction*)                    InfectedAffliction                                          OFFSET(get<T>, {0x1F0, 8, 0, 0})
	CMember(class UAnimMontage*)                       InfectedMontage                                             OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(class UAnimMontage*)                       InfectedAndBreakingFreeMontage                              OFFSET(get<T>, {0x200, 8, 0, 0})
	DMember(float)                                     BreakingFreeMontageDuration                                 OFFSET(get<float>, {0x208, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.InfectedStateComponent.Server_Breakout
	// void Server_Breakout();                                                                                                  // [0x18f5be0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.InfectedStateComponent.ReceiveOnCleansing
	// void ReceiveOnCleansing();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.InfectionMasterComponent
/// Size: 0x00A8 (0x0000B0 - 0x000158)
class UInfectionMasterComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(class UClass*)                             WeakpointPopSTE                                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(float)                                     WeakpointPopSTERange                                        OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(char)                                      InfectionPoints                                             OFFSET(get<char>, {0xBC, 1, 0, 0})
	DMember(bool)                                      ExtraInfectionPointsWithMorePlayers                         OFFSET(get<bool>, {0xBD, 1, 0, 0})
	DMember(float)                                     SpikeScale                                                  OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     InfectionScale                                              OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(bool)                                      KillWhenAllPointsDestroyed                                  OFFSET(get<bool>, {0xC8, 1, 0, 0})
	DMember(float)                                     ScaleDownOnDeathTime                                        OFFSET(get<float>, {0xCC, 4, 0, 0})
	CMember(class UMaterialInterface*)                 BaseMat                                                     OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UMaterialInterface*)                 GlowMat                                                     OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(TArray<class UStaticMesh*>)                InfectionPointMeshes                                        OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<class UStaticMesh*>)                InfectionSpikeMeshes                                        OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(class UHealthComponent*)                   HealthComponent                                             OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TArray<class UStaticMeshComponent*>)       MeshComponents                                              OFFSET(get<T>, {0x108, 16, 0, 0})
	DMember(uint32_t)                                  RandomSeed                                                  OFFSET(get<uint32_t>, {0x120, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.InfectionMasterComponent.OnRep_RandomSeed
	// void OnRep_RandomSeed();                                                                                                 // [0x18f5a90] Final|Native|Private 
	// Function /Script/FSD.InfectionMasterComponent.OnDeath
	// void OnDeath(class UHealthComponentBase* enemy);                                                                         // [0x18f58d0] Final|Native|Protected 
	// Function /Script/FSD.InfectionMasterComponent.InfectionPointDestroyed
	// void InfectionPointDestroyed(FName Name);                                                                                // [0x18f4d70] Final|Native|Private 
	// Function /Script/FSD.InfectionMasterComponent.DealWeakpointDamage
	// void DealWeakpointDamage(FName& SocketName);                                                                             // [0x18f41c0] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.NotifyMessageReceiver
/// Size: 0x0000 (0x000028 - 0x000028)
class UNotifyMessageReceiver : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.NotifyMessageReceiver.OnNotifyMessageReceived
	// bool OnNotifyMessageReceived(FName TriggerName);                                                                         // [0x18f5960] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.InputCaptureWidget
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UInputCaptureWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	SMember(FCustomKeySetting)                         Settings                                                    OFFSET(getStruct<T>, {0x260, 56, 0, 0})
	CMember(EKeyBindingSlot)                           InputSlot                                                   OFFSET(get<T>, {0x298, 1, 0, 0})
	DMember(bool)                                      bIsGamepadKey                                               OFFSET(get<bool>, {0x299, 1, 0, 0})
	DMember(bool)                                      bCapturing                                                  OFFSET(get<bool>, {0x29A, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.InputCaptureWidget.SetData
	// void SetData(FCustomKeySetting InSettings, EKeyBindingSlot InInputSlot, bool InIsGamepadKey);                            // [0x18f5df0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InputCaptureWidget.SetCurrentBinding
	// void SetCurrentBinding(FKey& InKey);                                                                                     // [0x18f5d20] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.InputCaptureWidget.ReceiveKeyChanged
	// void ReceiveKeyChanged(FKey InKey);                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.InputCaptureWidget.ReceiveKeyCaptured
	// void ReceiveKeyCaptured(FKey InKey);                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.InputCaptureWidget.ReceiveCapturingChanged
	// void ReceiveCapturingChanged(bool InCapturing);                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.InputCaptureWidget.GetCurrentBinding
	// FKey GetCurrentBinding();                                                                                                // [0x18f4c60] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InputCaptureWidget.FindCurrentSettingsForKey
	// bool FindCurrentSettingsForKey(FKey& InKey, FCustomKeySetting& OutSettings);                                             // [0x18f4480] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.InputCaptureWidget.ClearCurrentBinding
	// void ClearCurrentBinding();                                                                                              // [0x18f41a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.InputCaptureWidget.BindActionToKey
	// void BindActionToKey(FCustomKeySetting& InAction, FKey& InKey, EKeyBindingSlot InSlot, bool SaveToDisk);                 // [0x18f3fa0] Final|Native|Protected|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.InputFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UInputFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.InputFunctionLibrary.SetMouseSmoothingOn
	// void SetMouseSmoothingOn(bool smoothingOn);                                                                              // [0x18f6060] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.InputFunctionLibrary.IsMouseSmoothingOn
	// bool IsMouseSmoothingOn();                                                                                               // [0x18f5810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.IsMouseEventAction
	// bool IsMouseEventAction(FPointerEvent& MouseEvent, FName& ActionName, bool IgnoreCustomBindings);                        // [0x18f5650] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.IsKeyEventActionAny
	// bool IsKeyEventActionAny(FKeyEvent& KeyEvent, TArray<FName> ActionNames, bool IgnoreCustomBindings);                     // [0x18f5470] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.IsKeyEventAction
	// bool IsKeyEventAction(FKeyEvent& KeyEvent, FName ActionName, bool IgnoreCustomBindings);                                 // [0x18f52d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.IsInputActionDown
	// bool IsInputActionDown(class APlayerController* InPlayerController, FName InActionName);                                 // [0x18f5200] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.IsAxisMappedToDirectional
	// bool IsAxisMappedToDirectional(FName InActionName, FKey Key, int32_t Direction, bool IgnoreCustomBindings);              // [0x18f5060] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.IsAnyInputActionDown
	// bool IsAnyInputActionDown(class APlayerController* InPlayerController, TArray<FName>& InActionNames);                    // [0x18f4f70] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.IsActionMappedTo
	// bool IsActionMappedTo(FName InActionName, FKey Key, bool IgnoreCustomBindings);                                          // [0x18f4e00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.GetAxisMapping
	// bool GetAxisMapping(FName InActionName, int32_t Axis, bool InGamepadKeys, FInputAxisKeyMapping& OutResult);              // [0x18f4a00] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.GetActionMapping
	// bool GetActionMapping(FName InActionName, bool InGamepadKeys, FInputActionKeyMapping& OutResult);                        // [0x18f4800] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.InputFunctionLibrary.FindInputDisplay
	// bool FindInputDisplay(class APlayerController* PlayerController, FName InputName, EFSDInputSource InputSource, int32_t LayoutIndex, FInputDisplay& OutInputDisplay); // [0x18f4610] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.InputFunctionLibrary.FindActionIcon
	// class UTexture2D* FindActionIcon(FName InActionName, bool InGamepadKeys);                                                // [0x18f43b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.InsectSwarmEnemy
/// Size: 0x0008 (0x0003B0 - 0x0003B8)
class AInsectSwarmEnemy : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	CMember(class UParticleSystemComponent*)           SwarmParticles                                              OFFSET(get<T>, {0x3B0, 8, 0, 0})
};

/// Class /Script/FSD.InsectSwarmSpawner
/// Size: 0x0020 (0x000348 - 0x000368)
class AInsectSwarmSpawner : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 872;

public:
	CMember(class UClass*)                             SwarmType                                                   OFFSET(get<T>, {0x348, 8, 0, 0})
	DMember(float)                                     SpawnHeightOffset                                           OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     AlertDistance                                               OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(float)                                     respawnDelay                                                OFFSET(get<float>, {0x358, 4, 0, 0})
	CMember(TWeakObjectPtr<class AInsectSwarmEnemy*>)  SwarmInstance                                               OFFSET(get<T>, {0x35C, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.InsectSwarmSpawner.Receive_GetStaticMesh
	// class UStaticMeshComponent* Receive_GetStaticMesh();                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
	// Function /Script/FSD.InsectSwarmSpawner.OnSwarmSpawned
	// void OnSwarmSpawned(class AInsectSwarmEnemy* Swarm);                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.InsectSwarmSpawner.OnSwarmDestroyed
	// void OnSwarmDestroyed(class AActor* DestroyedActor);                                                                     // [0x18f5ab0] Final|Native|Protected 
};

/// Class /Script/FSD.InstancedMeshOnSpline
/// Size: 0x0038 (0x000588 - 0x0005C0)
class UInstancedMeshOnSpline : public UInstancedStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1472;

public:
	CMember(class USplineComponent*)                   Spline                                                      OFFSET(get<T>, {0x588, 8, 0, 0})
	DMember(int32_t)                                   NumInstances                                                OFFSET(get<int32_t>, {0x590, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x594, 4, 0, 0})
	DMember(float)                                     VerticalOffset                                              OFFSET(get<float>, {0x598, 4, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x59C, 12, 0, 0})
	CMember(TArray<FTransform>)                        NewInstancesTransforms                                      OFFSET(get<T>, {0x5A8, 16, 0, 0})
	DMember(float)                                     Phase                                                       OFFSET(get<float>, {0x5B8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.InstancedMeshOnSpline.SetSpeed
	// void SetSpeed(float NewSpeed);                                                                                           // [0x18fb550] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.EmitterConnection
/// Size: 0x0010 (0x000000 - 0x000010)
class FEmitterConnection : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     EmitterName                                                 OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     VariableName                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.InstancedNiagaraComponent
/// Size: 0x00B8 (0x0001F8 - 0x0002B0)
class UInstancedNiagaraComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(TArray<FEmitterConnection>)                Emitters                                                    OFFSET(get<T>, {0x1F8, 16, 0, 0})
	CMember(class UNiagaraComponent*)                  NiagaraComponent                                            OFFSET(get<T>, {0x218, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.InstancedNiagaraComponent.SpawnParticlesFromName
	// void SpawnParticlesFromName(FVector Location, FName EmitterName);                                                        // [0x18fb7e0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.InstancedNiagaraComponent.SpawnParticles
	// void SpawnParticles(FVector Location, int32_t EmitterIndex);                                                             // [0x18fb700] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Struct /Script/FSD.EquippedActorData
/// Size: 0x0010 (0x000000 - 0x000010)
class FEquippedActorData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class AActor*)                             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      IsExternalActor                                             OFFSET(get<bool>, {0x8, 1, 1, 0})
};

/// Struct /Script/FSD.DelayedActorSwitchData
/// Size: 0x0020 (0x000000 - 0x000020)
class FDelayedActorSwitchData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      IsActive                                                    OFFSET(get<bool>, {0x8, 1, 1, 0})
	DMember(bool)                                      IsExternalActor                                             OFFSET(get<bool>, {0x8, 1, 1, 1})
	DMember(bool)                                      IsUnEquipCalled                                             OFFSET(get<bool>, {0x8, 1, 1, 2})
	SMember(FEquippedActorData)                        Cached                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Class /Script/FSD.InventoryBase
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UInventoryBase : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(TArray<class AActor*>)                     ActorsSelectable                                            OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<class AActor*>)                     ActorsNonSelectable                                         OFFSET(get<T>, {0xC0, 16, 0, 0})
	SMember(FEquippedActorData)                        ReplicatedEquippedActor                                     OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FEquippedActorData)                        EquippedActor                                               OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	CMember(class AActor*)                             LastEquippedActors                                          OFFSET(get<T>, {0xF0, 16, 0, 0})
	SMember(FDelayedActorSwitchData)                   DelayedActorSwitchOldActor                                  OFFSET(getStruct<T>, {0x108, 32, 0, 0})


	/// Functions
	// Function /Script/FSD.InventoryBase.Server_SetEquippedActor
	// void Server_SetEquippedActor(FEquippedActorData Actor, bool CallClientDelayed);                                          // [0x18fb320] Final|Net|NetReliableNative|Event|Private|NetServer 
	// Function /Script/FSD.InventoryBase.Server_EquipExternalActor
	// void Server_EquipExternalActor(class AActor* Actor);                                                                     // [0x1818300] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.InventoryBase.OnRep_EquippedActor
	// void OnRep_EquippedActor(FEquippedActorData& OldActor);                                                                  // [0x18fad60] Final|Native|Private|HasOutParms 
	// Function /Script/FSD.InventoryBase.OnRep_ActorsSelectable
	// void OnRep_ActorsSelectable();                                                                                           // [0x18fad40] Native|Protected     
	// Function /Script/FSD.InventoryBase.OnRep_ActorsNonSelectable
	// void OnRep_ActorsNonSelectable();                                                                                        // [0x18fad20] Native|Protected     
	// Function /Script/FSD.InventoryBase.GetSelectableActors
	// TArray<AActor*> GetSelectableActors();                                                                                   // [0x18f9c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryBase.GetAllItems
	// TArray<AActor*> GetAllItems();                                                                                           // [0x18f9c90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryBase.EquipPrevious
	// void EquipPrevious();                                                                                                    // [0x18f9c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryBase.EquipNull
	// void EquipNull();                                                                                                        // [0x18f9c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryBase.EquipNext
	// void EquipNext();                                                                                                        // [0x18f9c30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryBase.EquipLast
	// void EquipLast();                                                                                                        // [0x18f9c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryBase.EquipAtIndex
	// void EquipAtIndex(int32_t Index, bool ignoreUsing);                                                                      // [0x18f9ab0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.InventoryComponent
/// Size: 0x0160 (0x000128 - 0x000288)
class UInventoryComponent : public UInventoryBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	SMember(FMulticastInlineDelegate)                  OnItemsLoaded                                               OFFSET(getStruct<T>, {0x128, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemClicked                                               OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemEquipped                                              OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemUnequipped                                            OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGrenadeCountChanged                                       OFFSET(getStruct<T>, {0x168, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFlareCountChanged                                         OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMaxFlareCountChanged                                      OFFSET(getStruct<T>, {0x188, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFlareProduction                                           OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResuppliedEvent                                           OFFSET(getStruct<T>, {0x1A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCarriableChangedEvent                                     OFFSET(getStruct<T>, {0x1B8, 16, 0, 0})
	CMember(class UInventoryList*)                     InventoryList                                               OFFSET(get<T>, {0x1C8, 8, 0, 0})
	CMember(class UClass*)                             ThrownGrenadeClass                                          OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(class UClass*)                             flareClass                                                  OFFSET(get<T>, {0x1D8, 8, 0, 0})
	SMember(FVector)                                   FlareOffset                                                 OFFSET(getStruct<T>, {0x1E0, 12, 0, 0})
	CMember(class USoundCue*)                          OutOfFlaresSound                                            OFFSET(get<T>, {0x1F0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OutOfFlaresShout                                            OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(float)                                     FlareAngle                                                  OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     FlareCooldown                                               OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     FlareProductionTime                                         OFFSET(get<float>, {0x20C, 4, 0, 0})
	SMember(FLinearColor)                              FlareChromaColor                                            OFFSET(getStruct<T>, {0x210, 16, 0, 0})
	DMember(float)                                     FlareProductionTimeLeft                                     OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(int32_t)                                   MaxFlares                                                   OFFSET(get<int32_t>, {0x224, 4, 0, 0})
	DMember(int32_t)                                   Flares                                                      OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(float)                                     FlareCooldownRemaining                                      OFFSET(get<float>, {0x22C, 4, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               FlareUpgrades                                               OFFSET(get<T>, {0x230, 16, 0, 0})
	DMember(bool)                                      bItemsLoaded                                                OFFSET(get<bool>, {0x240, 1, 0, 0})
	CMember(class APickaxeItem*)                       MiningItem                                                  OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class AThrownGrenadeItem*)                 GrenadeItem                                                 OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class ALaserPointerItem*)                  LaserPointerItem                                            OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class ATerrainScannerItem*)                TerrainScannerItem                                          OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class ARessuplyPodItem*)                   ResupplyItem                                                OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class ARecallableSentryGunItem*)           RecallableSentryGunItem                                     OFFSET(get<T>, {0x270, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.InventoryComponent.UpdateFromSaveGameInSlot
	// void UpdateFromSaveGameInSlot(EItemCategory Category);                                                                   // [0x18fc3d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.StartGrenadeThrow
	// void StartGrenadeThrow();                                                                                                // [0x18fc320] Final|Native|Public  
	// Function /Script/FSD.InventoryComponent.Server_ThrowItem
	// void Server_ThrowItem(class AActor* Item, FVector force, bool PlayMontage);                                              // [0x18fb420] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.InventoryComponent.Server_ThrowFlare
	// void Server_ThrowFlare();                                                                                                // [0x18fb400] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.InventoryComponent.ResupplyGrenades
	// void ResupplyGrenades(float percentage);                                                                                 // [0x18fb2a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.Resupply
	// void Resupply(float percentage);                                                                                         // [0x18fb220] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.PickupItemInstance
	// void PickupItemInstance(class AItem* Item);                                                                              // [0x18fb100] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.PickupItem
	// class AItem* PickupItem(class UClass* itemClass);                                                                        // [0x18fb060] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.OnRep_FlareClass
	// void OnRep_FlareClass();                                                                                                 // [0x18fae00] Final|Native|Protected 
	// Function /Script/FSD.InventoryComponent.IsTerrainScannerEquipped
	// bool IsTerrainScannerEquipped();                                                                                         // [0x18fac60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryComponent.HasPickedUpItem
	// bool HasPickedUpItem();                                                                                                  // [0x18fabd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryComponent.HasDrink
	// bool HasDrink();                                                                                                         // [0x18faba0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryComponent.GetTotalAmmoLeft
	// int32_t GetTotalAmmoLeft();                                                                                              // [0x18fab30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryComponent.GetRecallableSentryGunItem
	// class ARecallableSentryGunItem* GetRecallableSentryGunItem();                                                            // [0x18faaa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryComponent.GetOrCreateUnlistedItem
	// class AItem* GetOrCreateUnlistedItem(class UClass* ItemType);                                                            // [0x18fa820] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.GetItem
	// class AItem* GetItem(EItemCategory Category);                                                                            // [0x18f9ec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryComponent.GetEquippedItem
	// class AItem* GetEquippedItem();                                                                                          // [0x18f9e60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryComponent.GetCarriedItem
	// class AActor* GetCarriedItem();                                                                                          // [0x18f9e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryComponent.EquipCategory
	// bool EquipCategory(EItemCategory Category);                                                                              // [0x18f9b80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.Equip
	// void Equip(class AItem* Item);                                                                                           // [0x18f9a20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.EndGrenadeThrow
	// void EndGrenadeThrow();                                                                                                  // [0x18f9a00] Final|Native|Public  
	// Function /Script/FSD.InventoryComponent.DropPickedupItem
	// void DropPickedupItem();                                                                                                 // [0x18f99e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.Client_Resupply
	// void Client_Resupply(float percentage);                                                                                  // [0x187ee20] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.InventoryComponent.AnimationNotify2
	// void AnimationNotify2();                                                                                                 // [0x18f9930] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.AnimationNotify1
	// void AnimationNotify1();                                                                                                 // [0x18f9910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InventoryComponent.All_PlayThrowMontage
	// void All_PlayThrowMontage(class AActor* Item);                                                                           // [0x18f9880] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FSD.InventoryComponent.AddItemClass
	// void AddItemClass(class UClass* itemClass);                                                                              // [0x18f97f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.InventoryList
/// Size: 0x0158 (0x000030 - 0x000188)
class UInventoryList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	CMember(TWeakObjectPtr<class UTexture2D*>)         IconWeaponSetOutline                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         IconWeaponSetFill                                           OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) LaserpointerMarkerMaterial                                  OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) LaserpointerBeamMaterial                                    OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UItemID*)                            LaserPointerItem                                            OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UItemID*)                            TerrainScannerItem                                          OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UItemID*)                            ResupplyItem                                                OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(TArray<class UItemID*>)                    PrimaryWeapons                                              OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(TArray<class UItemID*>)                    SecondaryWeapons                                            OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<class UItemID*>)                    TraversalTools                                              OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(TArray<class UItemID*>)                    ClassTools                                                  OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<class UItemID*>)                    Armors                                                      OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<class UItemID*>)                    Flares                                                      OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<class UItemID*>)                    Grenades                                                    OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<class UItemID*>)                    MiningTools                                                 OFFSET(get<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.InventoryList.GetPreviousUnlockedItem
	// class UItemID* GetPreviousUnlockedItem(class UObject* WorldContextObject, EItemCategory Category, class UItemID* currentItem); // [0x18fa990] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetPreviousItem
	// class UItemID* GetPreviousItem(EItemCategory Category, class UItemID* currentItem);                                      // [0x18fa8c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetNumberOfItems
	// int32_t GetNumberOfItems(EItemCategory Category);                                                                        // [0x18fa790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetNextUnlockedItem
	// class UItemID* GetNextUnlockedItem(class UObject* WorldContextObject, EItemCategory Category, class UItemID* currentItem); // [0x18fa680] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetNextItem
	// class UItemID* GetNextItem(EItemCategory Category, class UItemID* currentItem);                                          // [0x18fa5b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetLoadedItemListFiltered
	// TArray<UClass*> GetLoadedItemListFiltered(EItemCategory Category, FDelegateProperty Filter);                             // [0x18fa3d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetLoadedItemList
	// TArray<UClass*> GetLoadedItemList(EItemCategory Category);                                                               // [0x18fa2f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetItemList
	// TArray<UItemID*> GetItemList(EItemCategory Category);                                                                    // [0x18fa1b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetItemIndex
	// int32_t GetItemIndex(EItemCategory Category, class UItemID* Item);                                                       // [0x18fa0e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.GetAllItemsList
	// TArray<UItemID*> GetAllItemsList();                                                                                      // [0x18f9cc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InventoryList.CheckForInventoryAchievements
	// void CheckForInventoryAchievements(class UObject* WorldContextObject);                                                   // [0x18f9950] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PlaySoundInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPlaySoundInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.ProjectileSpawner
/// Size: 0x0000 (0x000028 - 0x000028)
class UProjectileSpawner : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.RejoinListener
/// Size: 0x0000 (0x000028 - 0x000028)
class URejoinListener : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.SpawnReleasedActor
/// Size: 0x0000 (0x000028 - 0x000028)
class USpawnReleasedActor : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SpawnReleasedActor.OnSpawnRelease_Released
	// bool OnSpawnRelease_Released();                                                                                          // [0x18faf50] Native|Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.SpawnReleasedActor.OnSpawnRelease_Attached
	// bool OnSpawnRelease_Attached(class AActor* Parent);                                                                      // [0x18faeb0] Native|Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.Targetable
/// Size: 0x0000 (0x000028 - 0x000028)
class UTargetable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.Targetable.ShowDamageEffects
	// void ShowDamageEffects(class UParticleSystem* Particles, FVector Location, FRotator Orientation);                        // [0x18fb5d0] BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.Targetable.GetTargetHealthComponent
	// class UHealthComponentBase* GetTargetHealthComponent();                                                                  // [0x18fab00] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.Targetable.GetTargetCenterMass
	// FVector GetTargetCenterMass();                                                                                           // [0x18faac0] Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.Targetable.GetIsTargetable
	// bool GetIsTargetable();                                                                                                  // [0x18f0a20] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
};

/// Class /Script/FSD.AnimNotify_CycleItemComplete
/// Size: 0x0000 (0x000038 - 0x000038)
class UAnimNotify_CycleItemComplete : public UAnimNotify
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FSD.HeatMaterialComponent
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UHeatMaterialComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FName)                                     ParameterName                                               OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	DMember(float)                                     MaxEffect                                                   OFFSET(get<float>, {0xB8, 4, 0, 0})
	CMember(TArray<class UMaterialInstanceDynamic*>)   MaterialIntances                                            OFFSET(get<T>, {0xC0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.HeatMaterialComponent.OnTemperatureChanged
	// void OnTemperatureChanged(float temperature, bool overheated);                                                           // [0x18faf80] Final|Native|Protected 
	// Function /Script/FSD.HeatMaterialComponent.AddHeatMaterial
	// void AddHeatMaterial(class UMaterialInstanceDynamic* MaterialInstance);                                                  // [0x18f9760] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ItemAquisitionSource
/// Size: 0x0000 (0x000058 - 0x000058)
class UItemAquisitionSource : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/FSD.ItemLoadoutAnimations
/// Size: 0x0018 (0x000000 - 0x000018)
class FItemLoadoutAnimations : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UAnimMontage*)                       Loadout                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<class UAnimSequence*>)              Loadout_IdleBreaks                                          OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Class /Script/FSD.ItemCharacterAnimationSet
/// Size: 0x0180 (0x000030 - 0x0001B0)
class UItemCharacterAnimationSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	CMember(class UAnimSequence*)                      FP_Idle                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_InspectWeapon                                            OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_Walk                                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_Sprint                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_JumpStart_Montage                                        OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_JumpStart                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_JumpLoop                                                 OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_JumpLand                                                 OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_JumpLand_Aim                                             OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_Downed                                                   OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      TP_LookUpDown                                               OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      TP_LookUpDown_Aim                                           OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Sprint                                                   OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Idle                                                     OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Idle_Aim                                                 OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_LookForward                                              OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_LookForward_Aim                                          OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_JumpStart                                                OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_JumpStart_Aim                                            OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_JumpLoop                                                 OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_JumpLoop_Aim                                             OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_JumpLand                                                 OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Walk_Forward                                             OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Walk_Forward_Aim                                         OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Run_Forward                                              OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Run_Forward_Aim                                          OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Walk_Right                                               OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Walk_Right_Aim                                           OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Run_Right                                                OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Run_Right_Aim                                            OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Walk_Left                                                OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Walk_Left_Aim                                            OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Run_Left                                                 OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Run_Left_Aim                                             OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Walk_Back                                                OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Walk_Back_Aim                                            OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Run_Back                                                 OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Run_Back_Aim                                             OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Revived                                                  OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Downed                                                   OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Downed_Loop                                              OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_Salute                                                   OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_Salute                                                   OFFSET(get<T>, {0x180, 8, 0, 0})
	SMember(FItemLoadoutAnimations)                    LoadoutAnimations                                           OFFSET(getStruct<T>, {0x188, 24, 0, 0})
	DMember(float)                                     CameraOffset                                                OFFSET(get<float>, {0x1A0, 4, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         ParentSet                                                   OFFSET(get<T>, {0x1A8, 8, 0, 0})
};

/// Class /Script/FSD.ItemData
/// Size: 0x0118 (0x000030 - 0x000148)
class UItemData : public UPrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 328;

public:
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UTexture2D*)                         IconLine                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UTexture2D*)                         IconBG                                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UTexture2D*)                         IconDetailed                                                OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         PreviewImage                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             PreviewActor                                                OFFSET(get<T>, {0x78, 40, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	SMember(FText)                                     Category                                                    OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0xD0, 24, 0, 0})
	DMember(int32_t)                                   CreditCost                                                  OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	CMember(TMap<class UResourceData*, float>)         ResourceCost                                                OFFSET(get<T>, {0xF0, 80, 0, 0})
	DMember(int32_t)                                   RequiredCharacterLevel                                      OFFSET(get<int32_t>, {0x140, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemData.GetPreviewImage
	// class UTexture2D* GetPreviewImage(class UObject* WorldContext);                                                          // [0x1900390] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemData.GetPreviewActorClass
	// class UClass* GetPreviewActorClass();                                                                                    // [0x1900350] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemData.GetCraftingCost
	// TArray<FCraftingCost> GetCraftingCost();                                                                                 // [0x18fffb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ItemDispenser
/// Size: 0x0068 (0x000220 - 0x000288)
class AItemDispenser : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UInstantUsable*)                     Usable                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemSpawned                                               OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemTaken                                                 OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	CMember(TArray<class AActor*>)                     ItemHistory                                                 OFFSET(get<T>, {0x250, 16, 0, 0})
	CMember(class UClass*)                             itemClass                                                   OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class AActor*)                             spawnedItem                                                 OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(float)                                     ItemSpawnTime                                               OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     InitialItemSpawnTime                                        OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(bool)                                      IsOpen                                                      OFFSET(get<bool>, {0x280, 1, 0, 0})
	DMember(bool)                                      KillItemsOnDestuction                                       OFFSET(get<bool>, {0x281, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemDispenser.SpawnItem
	// void SpawnItem();                                                                                                        // [0x1900bf0] Final|Native|Protected 
	// Function /Script/FSD.ItemDispenser.Open
	// void Open();                                                                                                             // [0x1900910] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemDispenser.OnUsed
	// void OnUsed(class APlayerCharacter* User, EInputKeys Key);                                                               // [0x1900840] Final|Native|Protected 
	// Function /Script/FSD.ItemDispenser.OnRep_SpawnedItem
	// void OnRep_SpawnedItem(class AActor* oldItem);                                                                           // [0x1900700] Final|Native|Protected 
	// Function /Script/FSD.ItemDispenser.OnRep_IsOpen
	// void OnRep_IsOpen();                                                                                                     // [0x19006e0] Final|Native|Protected 
	// Function /Script/FSD.ItemDispenser.OnPickedUpItem
	// void OnPickedUpItem(class AActor* Item);                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemDispenser.OnOpenChanged
	// void OnOpenChanged(bool Open);                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemDispenser.OnItemSpawnedEvent
	// void OnItemSpawnedEvent(class AActor* Item);                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemDispenser.HasItem
	// bool HasItem();                                                                                                          // [0x1900430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemDispenser.GetItem
	// class AActor* GetItem();                                                                                                 // [0x18faaa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemDispenser.Close
	// void Close();                                                                                                            // [0x18fff90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.SpaceRigNotification
/// Size: 0x0040 (0x000000 - 0x000040)
class FSpaceRigNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FLinearColor)                              IconColor                                                   OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Class /Script/FSD.WeaponMaintenanceSettings
/// Size: 0x0060 (0x000030 - 0x000090)
class UWeaponMaintenanceSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<int32_t>)                           LevelXPRequirements                                         OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<class UItemSkin*>)                  LevelRewards                                                OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FSpaceRigNotification)                     WeaponUnlockedNotification                                  OFFSET(getStruct<T>, {0x50, 64, 0, 0})
};

/// Class /Script/FSD.WeaponMaintenanceAquisition
/// Size: 0x0000 (0x000030 - 0x000030)
class UWeaponMaintenanceAquisition : public UItemAquisitionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.WeaponMaintenanceItemWidget
/// Size: 0x0030 (0x000260 - 0x000290)
class UWeaponMaintenanceItemWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UItemID*)                            WeaponID                                                    OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 characterID                                                 OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UItemSkin*)                          Reward                                                      OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UItemData*)                          WeaponData                                                  OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(EWeaponMaintenanceState)                   MaintenanceState                                            OFFSET(get<T>, {0x280, 1, 0, 0})
	DMember(int32_t)                                   MaintenanceLevel                                            OFFSET(get<int32_t>, {0x284, 4, 0, 0})
	DMember(int32_t)                                   MaintenanceXP                                               OFFSET(get<int32_t>, {0x288, 4, 0, 0})
	DMember(int32_t)                                   MaintenanceTargetXP                                         OFFSET(get<int32_t>, {0x28C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.WeaponMaintenanceItemWidget.SetWeapon
	// void SetWeapon(class UObject* WorldContext, class UItemID* InWeaponID, class UPlayerCharacterID* InCharacterID);         // [0x1900a50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeaponMaintenanceItemWidget.RefreshFromSavegame
	// void RefreshFromSavegame(class UObject* WorldContext);                                                                   // [0x1900930] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeaponMaintenanceItemWidget.Receive_RefreshedFromSavegame
	// void Receive_RefreshedFromSavegame();                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WeaponMaintenanceItemWidget.Receive_CanLevelUp
	// void Receive_CanLevelUp();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WeaponMaintenanceItemWidget.LevelUp
	// bool LevelUp(class UObject* WorldContext);                                                                               // [0x1900620] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeaponMaintenanceItemWidget.GetMaxLevel
	// int32_t GetMaxLevel();                                                                                                   // [0x19000c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.WeaponMaintenanceTabWidget
/// Size: 0x0000 (0x0002A0 - 0x0002A0)
class UWeaponMaintenanceTabWidget : public UWindowWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:


	/// Functions
	// Function /Script/FSD.WeaponMaintenanceTabWidget.HasNewNotifications
	// bool HasNewNotifications(class UObject* WorldContext);                                                                   // [0x1900460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ItemMarker
/// Size: 0x0008 (0x000220 - 0x000228)
class AItemMarker : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	DMember(bool)                                      bMarkerValid                                                OFFSET(get<bool>, {0x220, 1, 0, 0})
	DMember(bool)                                      bMarkerVisible                                              OFFSET(get<bool>, {0x221, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemMarker.OnMarkerVisibilityChanged
	// void OnMarkerVisibilityChanged(bool Visible);                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemMarker.OnMarkerValidChanged
	// void OnMarkerValidChanged(bool Valid);                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.ItemPlacerAggregator
/// Size: 0x01F8 (0x0000C8 - 0x0002C0)
class UItemPlacerAggregator : public UItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(TArray<TWeakObjectPtr<AActor*>>)           IgnoreActors                                                OFFSET(get<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMarkerSpawned                                             OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlacementChanged                                          OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	DMember(float)                                     PlacementDistance                                           OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     MaxOffsetZ                                                  OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     MinOffsetZ                                                  OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     ItemHeight                                                  OFFSET(get<float>, {0x104, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutOnPlaced                                               OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UClass*)                             MarkerType                                                  OFFSET(get<T>, {0x110, 8, 0, 0})
	DMember(bool)                                      CanOnlyPlaceOnTerrain                                       OFFSET(get<bool>, {0x118, 1, 0, 0})
	SMember(FGameplayTagQuery)                         ExcludeTags                                                 OFFSET(getStruct<T>, {0x120, 72, 0, 0})
	SMember(FGameplayTagQuery)                         IncludeTags                                                 OFFSET(getStruct<T>, {0x168, 72, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           InvalidAroundActors                                         OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(TArray<class UTerrainMaterial*>)           InvalidMaterials                                            OFFSET(get<T>, {0x1C0, 16, 0, 0})
	DMember(float)                                     InvalidAroundSize                                           OFFSET(get<float>, {0x1D0, 4, 0, 0})
	CMember(class AItemMarker*)                        PlacementMarker                                             OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(class AItem*)                              Item                                                        OFFSET(get<T>, {0x1E0, 8, 0, 0})
	DMember(bool)                                      bIsPlacementActive                                          OFFSET(get<bool>, {0x1E8, 1, 0, 0})
	DMember(bool)                                      bIsMarkerHidden                                             OFFSET(get<bool>, {0x1E9, 1, 0, 0})
	DMember(bool)                                      bIsMarkerValid                                              OFFSET(get<bool>, {0x1EA, 1, 0, 0})
	DMember(bool)                                      bCanPlaceMarker                                             OFFSET(get<bool>, {0x1EB, 1, 0, 0})
	SMember(FTransform)                                LastPlacement                                               OFFSET(getStruct<T>, {0x1F0, 48, 0, 0})
	SMember(FHitResult)                                LastHit                                                     OFFSET(getStruct<T>, {0x220, 136, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemPlacerAggregator.ToggleValid
	// void ToggleValid(bool Valid);                                                                                            // [0x1900d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemPlacerAggregator.TogglePlacement
	// void TogglePlacement(bool Inactive);                                                                                     // [0x1900ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemPlacerAggregator.ToggleMarkerHidden
	// void ToggleMarkerHidden(bool InHidden);                                                                                  // [0x1900c10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemPlacerAggregator.PlacementUpdatedDelegate__DelegateSignature
	// void PlacementUpdatedDelegate__DelegateSignature(bool InPlacementValid, FTransform& InPlacement);                        // [0x1d6f900] MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults 
	// Function /Script/FSD.ItemPlacerAggregator.MarkerDelegate__DelegateSignature
	// void MarkerDelegate__DelegateSignature(class AItemMarker* Marker);                                                       // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.ItemPlacerAggregator.GetPlacementEx
	// void GetPlacementEx(FTransform& Placement, bool& OutValidLocation, bool& OutValidMarker);                                // [0x19001d0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemPlacerAggregator.GetPlacement
	// bool GetPlacement(FTransform& Placement);                                                                                // [0x19000f0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemPlacerAggregator.GetLastHit
	// FHitResult GetLastHit();                                                                                                 // [0x1900030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemPlacerAggregator.ClearIgnoredActors
	// void ClearIgnoredActors();                                                                                               // [0x18fff70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemPlacerAggregator.AddIgnoredActor
	// void AddIgnoredActor(class AActor* InActor);                                                                             // [0x180ce40] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ItemPreviewActor
/// Size: 0x0050 (0x000220 - 0x000270)
class AItemPreviewActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(class UItemSkin*)                          CurrentSkinColor                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UItemSkin*)                          CurrentSkinMesh                                             OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UClass*)                             itemClass                                                   OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UIconGenerationCameraKey*)           CameraKey_Normal                                            OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UIconGenerationCameraKey*)           CameraKey_CloseUp                                           OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemPreviewActor.SkinItem
	// void SkinItem(class USkinEffect* Skin);                                                                                  // [0x1900b60] Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemPreviewActor.SetItemClass
	// void SetItemClass(class UClass* itemClass);                                                                              // [0x19009c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemPreviewActor.OnSkinPreviewChanged
	// void OnSkinPreviewChanged(class UItemSkin* PreviewSkin);                                                                 // [0x19007b0] Final|Native|Protected 
	// Function /Script/FSD.ItemPreviewActor.OnSkinItem
	// void OnSkinItem(class USkinEffect* Skin);                                                                                // [0x1828490] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemPreviewActor.OnSkinChanged
	// void OnSkinChanged();                                                                                                    // [0x1900790] Final|Native|Protected 
	// Function /Script/FSD.ItemPreviewActor.ChangeSkin
	// void ChangeSkin(class UItemSkin* skinMesh, class UItemSkin* skinColor, bool isPreview);                                  // [0x18ffe60] Final|Native|Protected 
};

/// Struct /Script/FSD.ItemRefundResourceItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FItemRefundResourceItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     amount                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.ItemRefundListItem
/// Size: 0x0068 (0x000000 - 0x000068)
class FItemRefundListItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	CMember(TMap<FGuid, FItemRefundResourceItem>)      Resources                                                   OFFSET(get<T>, {0x10, 80, 0, 0})
	DMember(float)                                     CreditCost                                                  OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Class /Script/FSD.ItemRefundList
/// Size: 0x0068 (0x000030 - 0x000098)
class UItemRefundList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      ResetListOnSave                                             OFFSET(get<bool>, {0x30, 1, 0, 0})
	CMember(TArray<TWeakObjectPtr<UObject*>>)          Items                                                       OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TMap<FGuid, FItemRefundListItem>)          ItemsToRefund                                               OFFSET(get<T>, {0x48, 80, 0, 0})
};

/// Class /Script/FSD.ItemsBarIcon
/// Size: 0x0028 (0x000260 - 0x000288)
class UItemsBarIcon : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	DMember(bool)                                      Selected                                                    OFFSET(get<bool>, {0x260, 1, 0, 0})
	CMember(class UItemsBar*)                          ItemBar                                                     OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class AItem*)                              Item                                                        OFFSET(get<T>, {0x278, 8, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x280, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemsBarIcon.OnUnselect
	// void OnUnselect();                                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBarIcon.OnSelect
	// void OnSelect();                                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBarIcon.OnInit
	// void OnInit();                                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.ItemsBar
/// Size: 0x0038 (0x000280 - 0x0002B8)
class UItemsBar : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	CMember(class UClass*)                             DefaultItemWidget                                           OFFSET(get<T>, {0x280, 8, 0, 0})
	DMember(bool)                                      bShowSupplyItem                                             OFFSET(get<bool>, {0x288, 1, 0, 0})
	CMember(TArray<class UItemsBarIcon*>)              ItemIcons                                                   OFFSET(get<T>, {0x290, 16, 0, 0})
	CMember(class UItemsBarIcon*)                      SupplyIcon                                                  OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UItemsBarIcon*)                      SelectedIcon                                                OFFSET(get<T>, {0x2A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemsBar.OnSupplyItemUnequipped
	// void OnSupplyItemUnequipped(class UItemsBarIcon* ItemIcon);                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBar.OnSupplyItemEquipped
	// void OnSupplyItemEquipped(class UItemsBarIcon* ItemIcon);                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBar.OnSupplyItemAdded
	// void OnSupplyItemAdded(class UItemsBarIcon* ItemIcon);                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBar.OnItemUnequipped
	// void OnItemUnequipped(class UItemsBarIcon* ItemIcon);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBar.OnItemsLoaded
	// void OnItemsLoaded();                                                                                                    // [0x19006c0] Final|Native|Protected 
	// Function /Script/FSD.ItemsBar.OnItemEquipped
	// void OnItemEquipped(class UItemsBarIcon* ItemIcon);                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBar.OnItemClicked
	// void OnItemClicked();                                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBar.OnItemAdded
	// void OnItemAdded(class UItemsBarIcon* ItemIcon);                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBar.OnClear
	// void OnClear();                                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ItemsBar.ItemEquipped
	// void ItemEquipped(class AItem* NewItem);                                                                                 // [0x1900590] Final|Native|Protected 
	// Function /Script/FSD.ItemsBar.ItemClicked
	// void ItemClicked(class AItem* NewItem);                                                                                  // [0x1900500] Final|Native|Protected 
};

/// Class /Script/FSD.ItemSettings
/// Size: 0x0060 (0x000030 - 0x000090)
class UItemSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<class UItemRefundList*>)            ItemRefunds                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TMap<class UItemID*, class UItemData*>)    ItemData                                                    OFFSET(get<T>, {0x40, 80, 0, 0})
};

/// Class /Script/FSD.ItemSkin
/// Size: 0x0080 (0x000060 - 0x0000E0)
class UItemSkin : public USavablePrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	SMember(FMulticastInlineDelegate)                  OnSkinUnlocked                                              OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSkinEquipped                                              OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSkinUnequipped                                            OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	CMember(class UItemAquisitionBase*)                Aquisition                                                  OFFSET(get<T>, {0x98, 8, 0, 0})
	SMember(FText)                                     SkinName                                                    OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	CMember(class UItemSkinSet*)                       SkinSet                                                     OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UDynamicIcon*)                       DynamicIcon                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class USkinEffect*)                        SkinEffect                                                  OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UItemID*)                            OwningItem                                                  OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 OwningCharacter                                             OFFSET(get<T>, {0xD8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemSkin.Unlock
	// bool Unlock(class UObject* WorldContext, class UItemID* ItemID, bool broadcast);                                         // [0x1914350] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemSkin.Receive_SkinItem
	// void Receive_SkinItem(class UObject* Skinnable);                                                                         // [0x1914140] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.ItemSkin.Lock
	// void Lock(class UObject* WorldContext, class UItemID* ItemID);                                                           // [0x1913fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemSkin.ItemSkinSignature__DelegateSignature
	// void ItemSkinSignature__DelegateSignature(class UItemSkin* Skin);                                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.ItemSkin.ItemSkinEquipSignature__DelegateSignature
	// void ItemSkinEquipSignature__DelegateSignature(class UItemSkin* Skin);                                                   // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.ItemSkin.IsUnlockedFromStart
	// bool IsUnlockedFromStart();                                                                                              // [0x1913fb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemSkin.IsLocked
	// bool IsLocked(class UObject* WorldContext, class UItemID* skinnableID);                                                  // [0x1913ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemSkin.IsEquippedOnItem
	// bool IsEquippedOnItem(class UItemID* ItemID, class AFSDPlayerState* PlayerState);                                        // [0x1913e10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemSkin.GetSkinType
	// EItemSkinType GetSkinType();                                                                                             // [0x190e2c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemSkin.GetSkinName
	// FText GetSkinName();                                                                                                     // [0x190e280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemSkin.GetOwningItem
	// class UItemID* GetOwningItem();                                                                                          // [0x190e260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemSkin.GetOwningCharacter
	// class UPlayerCharacterID* GetOwningCharacter();                                                                          // [0x190e240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemSkin.CreateIcon
	// class UMaterialInstanceDynamic* CreateIcon(class UObject* Owner);                                                        // [0x190dee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ItemSkinSettings
/// Size: 0x0028 (0x000030 - 0x000058)
class UItemSkinSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UItemSkinSet*)                       StockSet                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UItemSkin*>)                  LoadedSkins                                                 OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UItemSkin*>)                  FindableSkins                                               OFFSET(get<T>, {0x48, 16, 0, 0})
};

/// Class /Script/FSD.ItemSkinFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UItemSkinFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.ItemSkinSet
/// Size: 0x0030 (0x000030 - 0x000060)
class UItemSkinSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      ColorIsLockedToSet                                          OFFSET(get<bool>, {0x30, 1, 0, 0})
	SMember(FText)                                     SkinName                                                    OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	CMember(class UDynamicIcon*)                       PaintJobDynamicIcon                                         OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UDynamicIcon*)                       FrameworkDynamicIcon                                        OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Struct /Script/FSD.ItemUpgradeStatText
/// Size: 0x0020 (0x000000 - 0x000020)
class FItemUpgradeStatText : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     StatText                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(bool)                                      IsAdventageous                                              OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Class /Script/FSD.ItemUpgrade
/// Size: 0x0100 (0x000058 - 0x000158)
class UItemUpgrade : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FMulticastInlineDelegate)                  OnCrafted                                                   OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEquipped                                                  OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUnEquipped                                                OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x90, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0xA8, 24, 0, 0})
	DMember(int32_t)                                   Cost                                                        OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(bool)                                      UseOldCost                                                  OFFSET(get<bool>, {0xC4, 1, 0, 0})
	CMember(EUpgradeTiers)                             UpgradeTier                                                 OFFSET(get<T>, {0xC5, 1, 0, 0})
	CMember(EUpgradeClass)                             upgradeClass                                                OFFSET(get<T>, {0xC6, 1, 0, 0})
	CMember(class UItemUpgradeCategory*)               Category                                                    OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(TMap<class UResourceData*, float>)         UpgradeCraftingCost                                         OFFSET(get<T>, {0xD0, 80, 0, 0})
	CMember(TArray<class UResourceData*>)              ResourceCost                                                OFFSET(get<T>, {0x120, 16, 0, 0})
	CMember(TArray<class UItemUpgradeElement*>)        Elements                                                    OFFSET(get<T>, {0x130, 16, 0, 0})
	CMember(TArray<FItemUpgradeStatText>)              StatTexts                                                   OFFSET(get<T>, {0x140, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemUpgrade.UnequipUpgrade
	// void UnequipUpgrade(class UClass* itemClass, class AFSDPlayerState* PlayerState);                                        // [0x1914280] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemUpgrade.ItemUpgradeSignature__DelegateSignature
	// void ItemUpgradeSignature__DelegateSignature(class UItemUpgrade* Upgrade);                                               // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.ItemUpgrade.GetUpgradeStatTexts
	// TArray<FItemUpgradeStatText> GetUpgradeStatTexts();                                                                      // [0x190e530] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemUpgrade.GetUpgradeName
	// FText GetUpgradeName(class UItemUpgrade* Upgrade);                                                                       // [0x190e440] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ItemUpgrade.GetUpgradeCost
	// TArray<FCraftingCost> GetUpgradeCost();                                                                                  // [0x190e3c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemUpgrade.GetSourceName
	// FString GetSourceName();                                                                                                 // [0x190e2f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemUpgrade.GetGenericUpgradedValue
	// FUpgradeValues GetGenericUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UItemUpgrade* upgradeClass); // [0x190e120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ItemUpgrade.GetCreditsCost
	// float GetCreditsCost();                                                                                                  // [0x190e0f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemUpgrade.EquipUpgrade
	// void EquipUpgrade(class UClass* itemClass, class AFSDPlayerState* PlayerState);                                          // [0x190e020] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.CombinedUpgrade
/// Size: 0x0020 (0x000158 - 0x000178)
class UCombinedUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TArray<TWeakObjectPtr<UItemUpgrade*>>)     CombinedUpgrades                                            OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               LoadedUpgrades                                              OFFSET(get<T>, {0x168, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.CombinedUpgrade.GetUpgrades
	// TArray<UItemUpgrade*> GetUpgrades();                                                                                     // [0x1913d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.OverclockUpgrade
/// Size: 0x0008 (0x000178 - 0x000180)
class UOverclockUpgrade : public UCombinedUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(class USchematicCategory*)                 SchematicCategory                                           OFFSET(get<T>, {0x178, 8, 0, 0})
};

/// Class /Script/FSD.ItemUpgradeCategory
/// Size: 0x0040 (0x000030 - 0x000070)
class UItemUpgradeCategory : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FText)                                     CategoryName                                                OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     CategoryDescription                                         OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(class UTexture2D*)                         CategoryIcon                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	SMember(FColor)                                    CategoryTint                                                OFFSET(getStruct<T>, {0x68, 4, 0, 0})
};

/// Class /Script/FSD.ItemUpgradeCondition
/// Size: 0x0000 (0x000028 - 0x000028)
class UItemUpgradeCondition : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.PlayerShieldsItemUpgradeCondition
/// Size: 0x0008 (0x000028 - 0x000030)
class UPlayerShieldsItemUpgradeCondition : public UItemUpgradeCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FFloatInterval)                            ShieldPercentageRequired                                    OFFSET(getStruct<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FSD.ProjectileClassFilterItemUpgradeCondition
/// Size: 0x0010 (0x000028 - 0x000038)
class UProjectileClassFilterItemUpgradeCondition : public UItemUpgradeCondition
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class UClass*>)                     ProjectileClasses                                           OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.ItemUpgradeElement
/// Size: 0x0000 (0x000030 - 0x000030)
class UItemUpgradeElement : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:


	/// Functions
	// Function /Script/FSD.ItemUpgradeElement.ElementOf
	// bool ElementOf(class UItemUpgrade* upg);                                                                                 // [0x190df80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.MuzzleEffectUpgradeElement
/// Size: 0x0050 (0x000030 - 0x000080)
class UMuzzleEffectUpgradeElement : public UItemUpgradeElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     FPMuzzleFlash                                               OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     TPMuzzleFlash                                               OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.FireWeaponSoundUpgradeElement
/// Size: 0x0058 (0x000030 - 0x000088)
class UFireWeaponSoundUpgradeElement : public UItemUpgradeElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TWeakObjectPtr<class USoundCue*>)          FireSound                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      OverrideTailSound                                           OFFSET(get<bool>, {0x58, 1, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          TailSound                                                   OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Class /Script/FSD.TracerUpgradeElement
/// Size: 0x0028 (0x000030 - 0x000058)
class UTracerUpgradeElement : public UItemUpgradeElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     Tracer                                                      OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.HitScanImpactUpgradeElement
/// Size: 0x0050 (0x000030 - 0x000080)
class UHitScanImpactUpgradeElement : public UItemUpgradeElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     ImpactParticle                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          ImpactSound                                                 OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.TrailUpgradeElement
/// Size: 0x0028 (0x000030 - 0x000058)
class UTrailUpgradeElement : public UItemUpgradeElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     Trail                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.ReplaceMaterialUpgradeElement
/// Size: 0x0050 (0x000030 - 0x000080)
class UReplaceMaterialUpgradeElement : public UItemUpgradeElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TWeakObjectPtr<class UMaterialInterface*>) TargetMaterial                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) ReplaceWithMaterial                                         OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.ReplaceSkeletonMeshUpgradeElement
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UReplaceSkeletonMeshUpgradeElement : public UItemUpgradeElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      TargetMesh                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      ReplaceWithMesh                                             OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ReplaceWithAnimInstance                                     OFFSET(get<T>, {0x80, 40, 0, 0})
};

/// Class /Script/FSD.ProjectileUpgradeElement
/// Size: 0x0028 (0x000030 - 0x000058)
class UProjectileUpgradeElement : public UItemUpgradeElement
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TWeakObjectPtr<class UParticleSystem*>)    NewTrailParticle                                            OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.ItemUpgradePreviewComponent
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UItemUpgradePreviewComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FMulticastInlineDelegate)                  OnPreviewUpgradeChanged                                     OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	CMember(class UItemUpgrade*)                       PreviewUpgrade                                              OFFSET(get<T>, {0xC0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemUpgradePreviewComponent.SetPreviewUpgrade
	// void SetPreviewUpgrade(class UItemUpgrade* InUpgrade);                                                                   // [0x19141f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemUpgradePreviewComponent.RefreshPreviewUpgrade
	// void RefreshPreviewUpgrade();                                                                                            // [0x19141d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemUpgradePreviewComponent.ItemUpgradeDelegate__DelegateSignature
	// void ItemUpgradeDelegate__DelegateSignature(class UItemUpgrade* PreviewUpgrade);                                         // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.StandardItemUpgrade
/// Size: 0x0008 (0x000158 - 0x000160)
class UStandardItemUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(float)                                     amount                                                      OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(bool)                                      IsPercentage                                                OFFSET(get<bool>, {0x15C, 1, 0, 0})
};

/// Class /Script/FSD.AmmoDrivenWeaponUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UAmmoDrivenWeaponUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EAmmoDrivenWeapnUpgradeType)               upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.AmmoDrivenWeaponUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EAmmoDrivenWeapnUpgradeType upgradeType); // [0x190e8a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.WeaponHitCounterUpgrade
/// Size: 0x0008 (0x000158 - 0x000160)
class UWeaponHitCounterUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x158, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.WeaponHitCounterUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, class UClass* ComponentClass);        // [0x1913a20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.BeltDrivenWeaponUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UBeltDrivenWeaponUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EBeltDrivenWeaponUpgrade)                  upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BeltDrivenWeaponUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EBeltDrivenWeaponUpgrade upgradeType); // [0x190ef60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GatlingGunUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UGatlingGunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EGatlingGunUpgrade)                        upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GatlingGunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EGatlingGunUpgrade upgradeType);      // [0x1910e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.AssaultRifleUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UAssaultRifleUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EAssaultRifleUpgrade)                      upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.AssaultRifleUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EAssaultRifleUpgrade upgradeType);    // [0x190eae0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.BoltActionRifleUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UBoltActionRifleUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EBoltActionRifleUpgrades)                  upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BoltActionRifleUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EBoltActionRifleUpgrades upgradeType); // [0x190f080] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DualMachinePistolsUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UDualMachinePistolsUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EDualMachinePistolsUpgrades)               upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DualMachinePistolsUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EDualMachinePistolsUpgrades upgradeType); // [0x1910540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ChargedWeaponUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UChargedWeaponUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EChargedWeaponUpgrades)                    upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ChargedWeaponUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EChargedWeaponUpgrades upgradeType);  // [0x190f7b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.CoilgunUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UCoilgunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ECoilgunUpgrades)                          upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CoilgunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ECoilgunUpgrades upgradeType);        // [0x190f8d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.AutoCannonUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UAutoCannonUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EAutoCannonUpgrades)                       upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.AutoCannonUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EAutoCannonUpgrades upgradeType);     // [0x190ec00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SawedOffShotgunUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class USawedOffShotgunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ESawedOffShotgunUpgrades)                  upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SawedOffShotgunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ESawedOffShotgunUpgrades upgradeType); // [0x1912e00] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.BurstWeaponUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UBurstWeaponUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EBurstWeaponUpgrades)                      upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BurstWeaponUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EBurstWeaponUpgrades upgradeType);    // [0x190f2c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.AutoShotgunUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UAutoShotgunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EAutoShotgunUpgrades)                      upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.AutoShotgunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EAutoShotgunUpgrades upgradeType);    // [0x190ed20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.BasicPistolUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UBasicPistolUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EBasicPistol)                              upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BasicPistolUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EBasicPistol upgradeType);            // [0x190ee40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.RevolverUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class URevolverUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ERevolerUpgrades)                          upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RevolverUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ERevolerUpgrades upgradeType);        // [0x1912ce0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.CryoSprayUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UCryoSprayUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ECryoSprayUpgrades)                        upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CryoSprayUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ECryoSprayUpgrades upgradeType);      // [0x190fe80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.CryoSprayProjectileUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class UCryoSprayProjectileUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	DMember(float)                                     MaxFireCost                                                 OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     BaseArch                                                    OFFSET(get<float>, {0x15C, 4, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x160, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CryoSprayProjectileUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* ProjectileClass);       // [0x190fd60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PickaxeUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UPickaxeUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EPickaxeUpgradeType)                       upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PickaxeUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EPickaxeUpgradeType upgradeType);     // [0x1912280] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FlameThrowerUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UFlameThrowerUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EFlameThrowerUpgradeType)                  upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FlameThrowerUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EFlameThrowerUpgradeType upgradeType); // [0x1910870] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.StickyFlameStatusEffectUpgrade
/// Size: 0x0030 (0x000158 - 0x000188)
class UStickyFlameStatusEffectUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ClassFilter                                                 OFFSET(get<T>, {0x160, 40, 0, 0})


	/// Functions
	// Function /Script/FSD.StickyFlameStatusEffectUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* StatusEffect);          // [0x1913530] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DoubleDrillUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UDoubleDrillUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EDoubleDrillUpgradeType)                   upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DoubleDrillUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EDoubleDrillUpgradeType upgradeType); // [0x1910420] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.InventoryItemUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UInventoryItemUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EInventoryItemUpgradeType)                 upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.InventoryItemUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EInventoryItemUpgradeType upgradeType); // [0x19117f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.CapacityUpgrade
/// Size: 0x0000 (0x000160 - 0x000160)
class UCapacityUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:


	/// Functions
	// Function /Script/FSD.CapacityUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, int32_t componentIndex);              // [0x190f3e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.CooldownUpgrade
/// Size: 0x0000 (0x000160 - 0x000160)
class UCooldownUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:


	/// Functions
	// Function /Script/FSD.CooldownUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player);                                      // [0x190fae0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.MultiHitscanUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UMultiHitscanUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EMultiHitscanUpgradeType)                  upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MultiHitscanUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EMultiHitscanUpgradeType upgradeType); // [0x1912160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ReflectionHitscanUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UReflectionHitscanUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EReflectionHitscanUpgradeType)             upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ReflectionHitscanUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EReflectionHitscanUpgradeType upgradeType); // [0x1912bc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.HitscanBaseUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UHitscanBaseUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EHitScanBaseUpgradeType)                   upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.HitscanBaseUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EHitScanBaseUpgradeType upgradeType); // [0x19116d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DamageUpgrade
/// Size: 0x0010 (0x000160 - 0x000170)
class UDamageUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(EDamageUpgrade)                            upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})
	CMember(EDamageComponentType)                      DamageComponentType                                         OFFSET(get<T>, {0x161, 1, 0, 0})
	CMember(class UClass*)                             RequiredClass                                               OFFSET(get<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DamageUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, EDamageUpgrade upgradeType, EDamageComponentType DamageComponentType); // [0x1910130] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DamageBonusBaseUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class UDamageBonusBaseUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	DMember(bool)                                      UseBaseDamage                                               OFFSET(get<bool>, {0x158, 1, 0, 0})
	CMember(class UDamageCondition*)                   Condition                                                   OFFSET(get<T>, {0x160, 8, 0, 0})
};

/// Class /Script/FSD.FlatDamageUpgrade
/// Size: 0x0028 (0x000158 - 0x000180)
class UFlatDamageUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x158, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class UClass*)                             RequiredClass                                               OFFSET(get<T>, {0x168, 8, 0, 0})
	DMember(bool)                                      MergeWithOtherFlatDamageUpgrades                            OFFSET(get<bool>, {0x170, 1, 0, 0})
	CMember(class UDamageCondition*)                   Condition                                                   OFFSET(get<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FlatDamageUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UDamageClass* DamageClass);     // [0x1910d60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.RandomDamageUpgrade
/// Size: 0x0008 (0x000168 - 0x000170)
class URandomDamageUpgrade : public UDamageBonusBaseUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FRandRange)                                DamageRange                                                 OFFSET(getStruct<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RandomDamageUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player);                                      // [0x1912ad0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DamageConversionUpgrade
/// Size: 0x0018 (0x000168 - 0x000180)
class UDamageConversionUpgrade : public UDamageBonusBaseUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x168, 8, 0, 0})
	DMember(float)                                     ConversionPercentage                                        OFFSET(get<float>, {0x170, 4, 0, 0})
	DMember(bool)                                      DamageIsAdded                                               OFFSET(get<bool>, {0x174, 1, 0, 0})
	CMember(class UClass*)                             RequiredClass                                               OFFSET(get<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.DamageConversionUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, class UDamageClass* DamageClass); // [0x190ffa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GatlingHotShellsBonusUpgrade
/// Size: 0x0018 (0x000158 - 0x000170)
class UGatlingHotShellsBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(float)                                     ConversionPercentage                                        OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(bool)                                      DamageIsAdded                                               OFFSET(get<bool>, {0x164, 1, 0, 0})
	DMember(float)                                     TemperatureRequired                                         OFFSET(get<float>, {0x168, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.GatlingHotShellsBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UDamageClass* DamageClass);     // [0x1910fa0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.TargetSpecificDamageBonusUpgrade
/// Size: 0x0058 (0x000158 - 0x0001B0)
class UTargetSpecificDamageBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	DMember(float)                                     Bonus                                                       OFFSET(get<float>, {0x158, 4, 0, 0})
	SMember(FGameplayTagQuery)                         tagQuery                                                    OFFSET(getStruct<T>, {0x160, 72, 0, 0})
	SMember(FName)                                     Key                                                         OFFSET(getStruct<T>, {0x1A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TargetSpecificDamageBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, FName Key);                           // [0x1913650] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.TargetStateDamageBonusUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class UTargetStateDamageBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ETargetStateDamageBonusType)               TargetState                                                 OFFSET(get<T>, {0x158, 1, 0, 0})
	DMember(float)                                     Bonus                                                       OFFSET(get<float>, {0x15C, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x160, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TargetStateDamageBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ETargetStateDamageBonusType TargetState); // [0x1913770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.StatusDamageBonusUpgrade
/// Size: 0x0020 (0x000158 - 0x000178)
class UStatusDamageBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TArray<class UClass*>)                     StatusEffects                                               OFFSET(get<T>, {0x158, 16, 0, 0})
	DMember(float)                                     Bonus                                                       OFFSET(get<float>, {0x168, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x170, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.StatusDamageBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* StatusEffect);          // [0x19132f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.StatusAndStateDamageBonusUpgrade
/// Size: 0x0030 (0x000158 - 0x000188)
class UStatusAndStateDamageBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	CMember(TArray<class UClass*>)                     StatusEffects                                               OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(TArray<ETargetStateDamageBonusType>)       TargetStates                                                OFFSET(get<T>, {0x168, 16, 0, 0})
	DMember(float)                                     Bonus                                                       OFFSET(get<float>, {0x178, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x180, 8, 0, 0})
};

/// Class /Script/FSD.PushSatusEffectDamageBonusUpgrade
/// Size: 0x0018 (0x000158 - 0x000170)
class UPushSatusEffectDamageBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(float)                                     Chance                                                      OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(bool)                                      IgnoreArmorHit                                              OFFSET(get<bool>, {0x164, 1, 0, 0})
	CMember(class UDamageCondition*)                   Condition                                                   OFFSET(get<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PushSatusEffectDamageBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* StatusEffect);          // [0x19129b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PushDynamicStatusEffectDamageBonusUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class UPushDynamicStatusEffectDamageBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FName)                                     Key                                                         OFFSET(getStruct<T>, {0x158, 8, 0, 0})
	CMember(class UStatusEffectItem*)                  StatusEffectItem                                            OFFSET(get<T>, {0x160, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PushDynamicStatusEffectDamageBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, FName Key);                           // [0x1912890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ModifyDynamicStatusEffectDamageBonusUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UModifyDynamicStatusEffectDamageBonusUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EModifyStatusEffectDamageUpgrade)          upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ModifyDynamicStatusEffectDamageBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, EModifyStatusEffectDamageUpgrade upgradeType); // [0x1911fd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.LockCountSTEBonusUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class ULockCountSTEBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(bool)                                      UseTotalLockCount                                           OFFSET(get<bool>, {0x160, 1, 0, 0})
	DMember(float)                                     amount                                                      OFFSET(get<float>, {0x164, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.LockCountSTEBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* StatusEffect);          // [0x1911b50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DamageTagBonusUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class UDamageTagBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(TArray<class UDamageTag*>)                 Tags                                                        OFFSET(get<T>, {0x158, 16, 0, 0})
};

/// Class /Script/FSD.ConditionalDamageTagBonusUpgrade
/// Size: 0x0018 (0x000158 - 0x000170)
class UConditionalDamageTagBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(TArray<class UDamageTag*>)                 Tags                                                        OFFSET(get<T>, {0x158, 16, 0, 0})
	CMember(class UDamageCondition*)                   Condition                                                   OFFSET(get<T>, {0x168, 8, 0, 0})
};

/// Class /Script/FSD.ConditionalDamageModifierUpgrade
/// Size: 0x0018 (0x000158 - 0x000170)
class UConditionalDamageModifierUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(class UDamageCondition*)                   Condition                                                   OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(TArray<FDamageModifierItem>)               Modifiers                                                   OFFSET(get<T>, {0x160, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ConditionalDamageModifierUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player);                                      // [0x190f9f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FearAoEBonusUpgrade
/// Size: 0x0008 (0x000158 - 0x000160)
class UFearAoEBonusUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(float)                                     FearFactor                                                  OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0x15C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.FearAoEBonusUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player);                                      // [0x1910780] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SingleUsableUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class USingleUsableUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ESingleUsableUpgradeType)                  upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SingleUsableUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* subItem, class AFSDPlayerState* Player, ESingleUsableUpgradeType upgradeType); // [0x1913160] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FlareUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UFlareUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EFlareUpgradeType)                         upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FlareUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* flareClass, EFlareUpgradeType upgradeType); // [0x1910ab0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GrenadeUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UGrenadeUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EGrenadeUpgradeType)                       upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GrenadeUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* flareClass, EGrenadeUpgradeType upgradeType); // [0x1911490] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.LineCutterUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class ULineCutterUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ELineCutterUpgradeType)                    upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LineCutterUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, ELineCutterUpgradeType upgradeType);  // [0x1911a30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.LineCutterProjectileUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class ULineCutterProjectileUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ELineCutterProjectileUpgradeType)          upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LineCutterProjectileUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, ELineCutterProjectileUpgradeType upgradeType); // [0x1911910] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ProjectileUpgrade
/// Size: 0x0018 (0x000160 - 0x000178)
class UProjectileUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(EProjectileUpgrade)                        upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UItemUpgradeCondition*)              Condition                                                   OFFSET(get<T>, {0x170, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, EProjectileUpgrade upgradeType); // [0x1912700] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.WeaponFireComponentUpgrade
/// Size: 0x0008 (0x000158 - 0x000160)
class UWeaponFireComponentUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(class UClass*)                             WeaponFireComponentClass                                    OFFSET(get<T>, {0x158, 8, 0, 0})
};

/// Class /Script/FSD.FlareGunUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UFlareGunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EFlaregunUpgrades)                         upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.FlareGunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EFlaregunUpgrades upgradeType);       // [0x1910990] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.FlaregunProjectileUpgrade
/// Size: 0x0010 (0x000160 - 0x000170)
class UFlaregunProjectileUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(EFlaregunProjectileUpgrades)               upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.FlaregunProjectileUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedItem, class AFSDPlayerState* Player, EFlaregunProjectileUpgrades upgradeType); // [0x1910bd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ChargedProjectileUpgrade
/// Size: 0x0010 (0x000160 - 0x000170)
class UChargedProjectileUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(EChargedProjectileUpgrades)                upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ChargedProjectileUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* upgradedActor, class AFSDPlayerState* Player, EChargedProjectileUpgrades upgradeType); // [0x190f620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ElectricalSMGUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UElectricalSMGUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EElectricalSMGUpgrades)                    upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ElectricalSMGUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EElectricalSMGUpgrades upgradeType);  // [0x1910660] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ZiplineGunUpgrade
/// Size: 0x0010 (0x000160 - 0x000170)
class UZiplineGunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(EZiplineGunUpgrades)                       upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ZiplineGunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EZiplineGunUpgrades upgradeType);     // [0x1913c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GrapplingHookUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UGrapplingHookUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EGrapplingHookUpgrade)                     upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GrapplingHookUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EGrapplingHookUpgrade upgradeType);   // [0x1911370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SentryGunUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class USentryGunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ESentryGunUpgradeType)                     upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SentryGunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ESentryGunUpgradeType upgradeType);   // [0x1912f20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SentryGunTypeUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class USentryGunTypeUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(class UClass*)                             SentryGunType                                               OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UClass*)                             MarkerType                                                  OFFSET(get<T>, {0x160, 8, 0, 0})
};

/// Class /Script/FSD.ShieldGeneratorUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UShieldGeneratorUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EShieldGeneratorUpgrades)                  upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ShieldGeneratorUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EShieldGeneratorUpgrades upgradeType); // [0x1913040] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.AddComponentUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class UAddComponentUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(bool)                                      ServerOnly                                                  OFFSET(get<bool>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.AddComponentUpgrade.GetUpgradedValue
	// bool GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* ComponentClass, bool includePreview); // [0x190e750] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.TriggeredStatusEffectUpgrade
/// Size: 0x0028 (0x000158 - 0x000180)
class UTriggeredStatusEffectUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(ETriggeredStatusEffectType)                upgradeType                                                 OFFSET(get<T>, {0x170, 1, 0, 0})
	DMember(float)                                     AoERange                                                    OFFSET(get<float>, {0x174, 4, 0, 0})
	CMember(class UClass*)                             OwnerEffect                                                 OFFSET(get<T>, {0x178, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TriggeredStatusEffectUpgrade.OnEffectShouldTrigger
	// void OnEffectShouldTrigger(class AActor* PlayerCharacter);                                                               // [0x19140b0] Final|Native|Public  
	// Function /Script/FSD.TriggeredStatusEffectUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, class UClass* StatusEffect, ETriggeredStatusEffectType aUpgradeType); // [0x1913890] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ArmorUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UArmorUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EArmorUpgradeType)                         upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ArmorUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* armorClass, EArmorUpgradeType aUpgradeType); // [0x190e9c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.ArmorStatUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UArmorStatUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(class UPawnStat*)                          Stat                                                        OFFSET(get<T>, {0x160, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ArmorStatUpgrade.GetUpgradedStatValue
	// FUpgradeValues GetUpgradedStatValue(class AFSDPlayerState* Player, class UClass* armorClass, class UPawnStat* Stat);     // [0x190e630] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.BoscoUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UBoscoUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EBoscoUpgrades)                            upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.BoscoUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EBoscoUpgrades upgradeType);          // [0x190f1a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PlatformGunUpgrade
/// Size: 0x0008 (0x000158 - 0x000160)
class UPlatformGunUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(EPlatformGunUpgrades)                      myUpgradeType                                               OFFSET(get<T>, {0x158, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PlatformGunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, EPlatformGunUpgrades aUpgradeType);   // [0x19124c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.DetPackUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UDetPackUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EDetPackUpgrades)                          upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.DetPackUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EDetPackUpgrades upgradeType);        // [0x1910300] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.BonusDamageUpgrade
/// Size: 0x0008 (0x000158 - 0x000160)
class UBonusDamageUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	CMember(class UDamageBonusBase*)                   DamageBonus                                                 OFFSET(get<T>, {0x158, 8, 0, 0})
};

/// Class /Script/FSD.ProjectileLauncherBaseUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UProjectileLauncherBaseUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EProjectileLauncherBaseUpgradeType)        upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileLauncherBaseUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EProjectileLauncherBaseUpgradeType upgradeType); // [0x19125e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.MicroMissileLauncherUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UMicroMissileLauncherUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EMicroMissileLauncherUpgrades)             upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MicroMissileLauncherUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EMicroMissileLauncherUpgrades upgradeType); // [0x1911d90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.WeaponSwitchProjectileUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class UWeaponSwitchProjectileUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FProjectileSwitch)                         Projectile                                                  OFFSET(getStruct<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.WeaponSwitchProjectileUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, class UClass* ComponentClass);        // [0x1913b40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GooGunUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UGooGunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EGooGunUpgrades)                           upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GooGunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EGooGunUpgrades upgradeType);         // [0x1911250] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.GooGunProjectileUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UGooGunProjectileUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EGooGunProjectileUpgrades)                 upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.GooGunProjectileUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class AFSDPlayerState* Player, class UClass* Item, class UClass* upgradedItem, EGooGunProjectileUpgrades upgradeType); // [0x19110c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.LockOnWeaponUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class ULockOnWeaponUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ELockOnWeaponUpgrades)                     upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LockOnWeaponUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ELockOnWeaponUpgrades upgradeType);   // [0x1911c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PlasmaCarbineUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UPlasmaCarbineUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EPlasmaCarbineUpgrades)                    upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PlasmaCarbineUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EPlasmaCarbineUpgrades upgradeType);  // [0x19123a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.CrossbowUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UCrossbowUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ECrossbowUpgrades)                         upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CrossbowUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class UClass* Projectile, class AFSDPlayerState* Player, ECrossbowUpgrades upgradeType); // [0x190fbd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.WeaponChargeProgressDamageBonus
/// Size: 0x0018 (0x000158 - 0x000170)
class UWeaponChargeProgressDamageBonus : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x158, 8, 0, 0})
	SMember(FFloatInterval)                            ChargeRange                                                 OFFSET(getStruct<T>, {0x160, 8, 0, 0})
	SMember(FFloatInterval)                            DamageBonusRange                                            OFFSET(getStruct<T>, {0x168, 8, 0, 0})
};

/// Class /Script/FSD.HeavyParticleCannonUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UHeavyParticleCannonUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EHeavyParticleCannonUpgrade)               upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.HeavyParticleCannonUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EHeavyParticleCannonUpgrade upgradeType); // [0x19115b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.CapsuleHitscanUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UCapsuleHitscanUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(ECapsuleHitscanUpgradeType)                upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.CapsuleHitscanUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, ECapsuleHitscanUpgradeType upgradeType); // [0x190f500] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.MicrowavegunUpgrade
/// Size: 0x0008 (0x000160 - 0x000168)
class UMicrowavegunUpgrade : public UStandardItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(EMicrowaveGunUpgrade)                      upgradeType                                                 OFFSET(get<T>, {0x160, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MicrowavegunUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, EMicrowaveGunUpgrade upgradeType);    // [0x1911eb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.StickFlameActorUpgrade
/// Size: 0x0010 (0x000158 - 0x000168)
class UStickFlameActorUpgrade : public UItemUpgrade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(class UClass*)                             stickyFlameClass                                            OFFSET(get<T>, {0x158, 8, 0, 0})
	DMember(bool)                                      OverrideFlameLifetime                                       OFFSET(get<bool>, {0x160, 1, 0, 0})
	DMember(float)                                     FlameLifetime                                               OFFSET(get<float>, {0x164, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.StickFlameActorUpgrade.GetUpgradedValue
	// FUpgradeValues GetUpgradedValue(class UClass* Item, class AFSDPlayerState* Player, class UClass* stickyFlameClass);      // [0x1913410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.Upgradable
/// Size: 0x0000 (0x000028 - 0x000028)
class UUpgradable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.Upgradable.Upgraded
	// void Upgraded(TArray<UItemUpgrade*>& Upgrades);                                                                          // [0x19189e0] Native|Event|Public|HasOutParms|BlueprintEvent 
};

/// Class /Script/FSD.UpgradableGear
/// Size: 0x0000 (0x000028 - 0x000028)
class UUpgradableGear : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.UpgradableGear.GetGearStatEntry
	// void GetGearStatEntry(class AFSDPlayerState* PlayerState, TArray<FGearStatEntry>& Stats);                                // [0x1917a30] Native|Event|Public|HasOutParms|BlueprintEvent|Const 
};

/// Class /Script/FSD.Vacuumable
/// Size: 0x0000 (0x000028 - 0x000028)
class UVacuumable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.JellyBreeder
/// Size: 0x0068 (0x000430 - 0x000498)
class AJellyBreeder : public AAFlyingBug
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1176;

public:
	CMember(class UAnimSequenceBase*)                  EggSpawnAnimation                                           OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UParticleSystem*)                    EggParticles                                                OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class USoundBase*)                         EggSound                                                    OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class UEnemyDescriptor*)                   EnemyToSpawn                                                OFFSET(get<T>, {0x448, 8, 0, 0})
	CMember(class UClass*)                             EggClass                                                    OFFSET(get<T>, {0x450, 8, 0, 0})
	DMember(float)                                     TimeBetweenBursts                                           OFFSET(get<float>, {0x458, 4, 0, 0})
	DMember(float)                                     TimeBetweenEggs                                             OFFSET(get<float>, {0x45C, 4, 0, 0})
	DMember(float)                                     CloseToSpawnEggTime                                         OFFSET(get<float>, {0x460, 4, 0, 0})
	CMember(class UPhysicalMaterial*)                  WeakPointMaterial                                           OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UPhysicalMaterial*)                  UnWeakPointMaterial                                         OFFSET(get<T>, {0x478, 8, 0, 0})
	DMember(int32_t)                                   EggBurstSize                                                OFFSET(get<int32_t>, {0x480, 4, 0, 0})
	DMember(int32_t)                                   MaxJellies                                                  OFFSET(get<int32_t>, {0x488, 4, 0, 0})
	DMember(float)                                     MultiplierOnHighPlayerCount                                 OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(bool)                                      IsInBreedMode                                               OFFSET(get<bool>, {0x494, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.JellyBreeder.SpawnEnemies
	// void SpawnEnemies(class AProjectile* Egg, int32_t AmountToSpawn);                                                        // [0x1918910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.JellyBreeder.PlaySpawnEggAnim
	// void PlaySpawnEggAnim();                                                                                                 // [0x17f7e30] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FSD.JellyBreeder.OnRep_BreedMode
	// void OnRep_BreedMode();                                                                                                  // [0x1918380] Final|Native|Protected 
	// Function /Script/FSD.JellyBreeder.OnJellyDestroyed
	// void OnJellyDestroyed(class AActor* AActor);                                                                             // [0x1918040] Final|Native|Protected 
	// Function /Script/FSD.JellyBreeder.BreedModeFlipped
	// void BreedModeFlipped(bool aIsLayingEggs);                                                                               // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.JellyBreederAnimInstance
/// Size: 0x0008 (0x000388 - 0x000390)
class UJellyBreederAnimInstance : public UFlyingBugAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(bool)                                      ReadyToSpawnEggs                                            OFFSET(get<bool>, {0x388, 1, 0, 0})
};

/// Class /Script/FSD.JellyEggAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UJellyEggAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	SMember(FVector)                                   force                                                       OFFSET(getStruct<T>, {0x2B8, 12, 0, 0})
};

/// Class /Script/FSD.JetBootsBox
/// Size: 0x0018 (0x000220 - 0x000238)
class AJetBootsBox : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class UTerrainPlacementComponent*)         terrainPlacement                                            OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USpecialEvent*)                      SpecialEvent                                                OFFSET(get<T>, {0x230, 8, 0, 0})
};

/// Class /Script/FSD.JetBootsBoxSpawner
/// Size: 0x0078 (0x000220 - 0x000298)
class AJetBootsBoxSpawner : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(TSoftObjectPtr<class UClass*>)             JetBootsBoxClass                                            OFFSET(get<T>, {0x220, 40, 0, 0})
	SMember(FFloatInterval)                            SpawnIntervalFromDropPod                                    OFFSET(getStruct<T>, {0x248, 8, 0, 0})
	DMember(int32_t)                                   MaxSpawnLocationTries                                       OFFSET(get<int32_t>, {0x250, 4, 0, 0})
	CMember(class UDebrisPositioning*)                 DebrisPositioning                                           OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UTerrainPlacementComponent*)         terrainPlacement                                            OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class AJetBootsBox*)                       JetBootsBoxInstance                                         OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UClass*)                             JetBootsBoxClassLoaded                                      OFFSET(get<T>, {0x270, 8, 0, 0})
};

/// Class /Script/FSD.JetBootsFuelWidget
/// Size: 0x0000 (0x000280 - 0x000280)
class UJetBootsFuelWidget : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:


	/// Functions
	// Function /Script/FSD.JetBootsFuelWidget.ShowMK2
	// void ShowMK2(bool IsVisible);                                                                                            // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.JetBootsFuelWidget.SetProgress
	// void SetProgress(float CurrentProgress, bool overheated);                                                                // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.JetBootsFuelWidget.SetIsActive
	// void SetIsActive(bool IsActive);                                                                                         // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.JetBootsSettings
/// Size: 0x0028 (0x000030 - 0x000058)
class UJetBootsSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     JetForce                                                    OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     AirControlSpeed                                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     MaxAirSpeedZ                                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     FallCompensationStrength                                    OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     MaxCustomMovementSpeed                                      OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     MaxJetFuel                                                  OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     JetFuelCost                                                 OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     JetFuelRechargeRate                                         OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     JetFuelRechargeDelay                                        OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     OutOfFuelRechargeDelay                                      OFFSET(get<float>, {0x54, 4, 0, 0})
};

/// Class /Script/FSD.JetBootsMovementComponent
/// Size: 0x01C8 (0x0000B0 - 0x000278)
class UJetBootsMovementComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	SMember(FMulticastInlineDelegate)                  FuelUpdated                                                 OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  FuelUpdatedNonLocal                                         OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	CMember(class UJetBootsSettings*)                  Settings                                                    OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          UseSound                                                    OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          DeactivatedSound                                            OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          OverHeatSound                                               OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UAudioComponent*)                    UseAudioComponent                                           OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UAudioComponent*)                    OverHeatAudioComponent                                      OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UAudioComponent*)                    DeactivatedAudioComponent                                   OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class UAudioComponent*)                    TP_UseAudioComponent                                        OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class UAudioComponent*)                    TP_OverHeatAudioComponent                                   OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class UAudioComponent*)                    TP_DeactivatedAudioComponent                                OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(TWeakObjectPtr<class UNiagaraSystem*>)     FootParticles                                               OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     FootParticlesFP                                             OFFSET(get<T>, {0x1C0, 8, 0, 0})
	SMember(FName)                                     FootSocketNameLeft                                          OFFSET(getStruct<T>, {0x1E8, 8, 0, 0})
	SMember(FName)                                     FootSocketNameRight                                         OFFSET(getStruct<T>, {0x1F0, 8, 0, 0})
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      FootAttachMesh                                              OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             LFootAttachMeshComponent                                    OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             RFootAttachMeshComponent                                    OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  LeftFootParticles                                           OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  RightFootParticles                                          OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UFXSystemComponent*)                 FPFootParticles                                             OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x248, 8, 0, 0})
	DMember(float)                                     FromJumpDelay                                               OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     FromTerrainStartDelay                                       OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     OverHeatAtPercent                                           OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     AddPlayerAirVelocityToThrowFactor                           OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     CurrentJetFuel                                              OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(bool)                                      isUsing                                                     OFFSET(get<bool>, {0x270, 1, 0, 0})
	DMember(bool)                                      isFromTakeOff                                               OFFSET(get<bool>, {0x271, 1, 0, 0})
	DMember(bool)                                      overheated                                                  OFFSET(get<bool>, {0x272, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.JetBootsMovementComponent.Server_SetOverheated
	// void Server_SetOverheated(bool Current);                                                                                 // [0x1855ec0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.JetBootsMovementComponent.Server_SetIsUsing
	// void Server_SetIsUsing(bool Current, bool last, bool isFromTakeOff);                                                     // [0x1918760] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.JetBootsMovementComponent.Server_SetCurrentJetFuel
	// void Server_SetCurrentJetFuel(float Current);                                                                            // [0x18f5840] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.JetBootsMovementComponent.RemoveJetBoots
	// void RemoveJetBoots();                                                                                                   // [0x19186a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.JetBootsMovementComponent.Receive_OnTakeOffLocal
	// void Receive_OnTakeOffLocal();                                                                                           // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.JetBootsMovementComponent.Receive_OnOverheatedChanged
	// void Receive_OnOverheatedChanged(bool overheated);                                                                       // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.JetBootsMovementComponent.Receive_OnDestroy
	// void Receive_OnDestroy();                                                                                                // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.JetBootsMovementComponent.Receive_OnCharacterSet
	// void Receive_OnCharacterSet(class APlayerCharacter* Player);                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.JetBootsMovementComponent.Receive_OnActiveChangedServer
	// void Receive_OnActiveChangedServer(bool IsActive, bool fromTakeOff);                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.JetBootsMovementComponent.Receive_OnActiveChangedNonLocal
	// void Receive_OnActiveChangedNonLocal(bool IsActive, bool fromTakeOff);                                                   // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.JetBootsMovementComponent.Receive_OnActiveChangedLocal
	// void Receive_OnActiveChangedLocal(bool IsActive, bool fromTakeOff);                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.JetBootsMovementComponent.OnStateChanged
	// void OnStateChanged(ECharacterState State);                                                                              // [0x1918620] Final|Native|Protected 
	// Function /Script/FSD.JetBootsMovementComponent.OnRep_OverHeated
	// void OnRep_OverHeated(bool lastOverheated);                                                                              // [0x19184d0] Final|Native|Protected 
	// Function /Script/FSD.JetBootsMovementComponent.OnRep_IsUsing
	// void OnRep_IsUsing(bool lastUsing);                                                                                      // [0x1918440] Final|Native|Protected 
	// Function /Script/FSD.JetBootsMovementComponent.OnRep_CurrentJetFuel
	// void OnRep_CurrentJetFuel();                                                                                             // [0x19183a0] Final|Native|Protected 
	// Function /Script/FSD.JetBootsMovementComponent.OnPlayerCharacterHit
	// void OnPlayerCharacterHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, FVector NormalImpulse, FHitResult& Hit); // [0x19181a0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.JetBootsMovementComponent.OnJumpReleased
	// void OnJumpReleased();                                                                                                   // [0x19180f0] Final|Native|Protected 
	// Function /Script/FSD.JetBootsMovementComponent.OnJumpPressed
	// void OnJumpPressed();                                                                                                    // [0x19180d0] Final|Native|Protected 
	// Function /Script/FSD.JetBootsMovementComponent.OnCameraModeChanged
	// void OnCameraModeChanged(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode);                        // [0x1917d70] Final|Native|Protected 
	// Function /Script/FSD.JetBootsMovementComponent.Client_SetIsUsing
	// void Client_SetIsUsing(bool isUsing);                                                                                    // [0x19178a0] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FSD.JetPackItem
/// Size: 0x0038 (0x0003E0 - 0x000418)
class AJetPackItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	DMember(float)                                     ActiveTime                                                  OFFSET(get<float>, {0x3E4, 4, 0, 0})
	CMember(class UCurveFloat*)                        VerticalAccelerationCurve                                   OFFSET(get<T>, {0x3E8, 8, 0, 0})
	DMember(float)                                     VerticalAcceleration                                        OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     MaxVerticalSpeed                                            OFFSET(get<float>, {0x3F4, 4, 0, 0})
	DMember(float)                                     MaxHorizontalSpeed                                          OFFSET(get<float>, {0x3F8, 4, 0, 0})
	DMember(float)                                     MaxHorizontalDrift                                          OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(float)                                     BurnDuration                                                OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     RechargeDuration                                            OFFSET(get<float>, {0x404, 4, 0, 0})
	DMember(float)                                     Fuel                                                        OFFSET(get<float>, {0x408, 4, 0, 0})
	DMember(bool)                                      Active                                                      OFFSET(get<bool>, {0x40C, 1, 0, 0})
	CMember(class UPlayerMovementComponent*)           CharacterMovement                                           OFFSET(get<T>, {0x410, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.JetPackItem.Server_StopThruster
	// void Server_StopThruster();                                                                                              // [0x1847640] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.JetPackItem.Server_StartThruster
	// void Server_StartThruster();                                                                                             // [0x17f7e30] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.JetPackItem.OnRep_Fuel
	// void OnRep_Fuel(float OldFuel);                                                                                          // [0x19183c0] Final|Native|Protected 
	// Function /Script/FSD.JetPackItem.OnRep_Active
	// void OnRep_Active();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.JetPackItem.OnFuelChanged
	// void OnFuelChanged(float Value, float Delta);                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Struct /Script/FSD.JettyBootsPlayer
/// Size: 0x000C (0x000000 - 0x00000C)
class FJettyBootsPlayer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   PlayerCharacter                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(bool)                                      bIsPlaying                                                  OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Struct /Script/FSD.JettyBootNPC
/// Size: 0x0030 (0x000000 - 0x000030)
class FJettyBootNPC : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   CharacterName                                               OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     HasPlayedChance                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FIRandRange)                               ScoreInterval                                               OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	CMember(TArray<int32_t>)                           StartScores                                                 OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Class /Script/FSD.JettyBootsArcadeActor
/// Size: 0x0090 (0x000220 - 0x0002B0)
class AJettyBootsArcadeActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UJettyBootUsableComponent*)          StartGameUsable                                             OFFSET(get<T>, {0x220, 8, 0, 0})
	SMember(FJettyBootsPlayer)                         Player                                                      OFFSET(getStruct<T>, {0x228, 12, 0, 0})
	DMember(int32_t)                                   MaxDistanceToPlay                                           OFFSET(get<int32_t>, {0x234, 4, 0, 0})
	CMember(class USceneComponent*)                    MaxDistanceComponent                                        OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TArray<class UAnimMontage*>)               AnimPlaying                                                 OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               AnimFailed                                                  OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               AnimSucces                                                  OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(TArray<FJettyBootNPC>)                     HighScoreNPCs                                               OFFSET(get<T>, {0x278, 16, 0, 0})
	SMember(FJettyBootsSave)                           JettyBootsSave                                              OFFSET(getStruct<T>, {0x288, 40, 0, 0})


	/// Functions
	// Function /Script/FSD.JettyBootsArcadeActor.SetActivePlayer
	// void SetActivePlayer(class APlayerCharacter* InPlayer);                                                                  // [0x1918880] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.JettyBootsArcadeActor.Server_ReplayPackage
	// void Server_ReplayPackage(FJettyBootsReplay InPackage);                                                                  // [0x19186c0] Net|Native|Event|Protected|NetServer|BlueprintCallable 
	// Function /Script/FSD.JettyBootsArcadeActor.ReceiveReplayPackage
	// void ReceiveReplayPackage(FJettyBootsReplay& InPackage);                                                                 // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.JettyBootsArcadeActor.ReceivePlayerChanged
	// void ReceivePlayerChanged();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.JettyBootsArcadeActor.ReceiveHighScoreChanged
	// void ReceiveHighScoreChanged();                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.JettyBootsArcadeActor.OnRep_Save
	// void OnRep_Save();                                                                                                       // [0x1918600] Final|Native|Protected 
	// Function /Script/FSD.JettyBootsArcadeActor.OnRep_Player
	// void OnRep_Player(FJettyBootsPlayer& OldPlayer);                                                                         // [0x1918560] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.JettyBootsArcadeActor.OnPlayerCharacterDestroyed
	// void OnPlayerCharacterDestroyed(class AActor* InActor);                                                                  // [0x1918110] Final|Native|Protected 
	// Function /Script/FSD.JettyBootsArcadeActor.OnCharacterMoved
	// void OnCharacterMoved(float DeltaSeconds, FVector OldLocation, FVector OldVelocity);                                     // [0x1917f10] Final|Native|Protected|HasDefaults 
	// Function /Script/FSD.JettyBootsArcadeActor.OnCharacterMontageEnded
	// void OnCharacterMontageEnded(class UAnimMontage* InMontage, bool InInterrupted);                                         // [0x1917e40] Final|Native|Protected 
	// Function /Script/FSD.JettyBootsArcadeActor.IsPlayerWithinDistance
	// bool IsPlayerWithinDistance();                                                                                           // [0x1917d40] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.JettyBootsArcadeActor.GetLastHighScoreIndex
	// int32_t GetLastHighScoreIndex();                                                                                         // [0x1917d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.JettyBootsArcadeActor.GetHighScores
	// TArray<FJettyBootsScore> GetHighScores();                                                                                // [0x1917c30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.JettyBootsArcadeActor.GetActivePlayer
	// class APlayerCharacter* GetActivePlayer();                                                                               // [0x1917a00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.JettyBootsArcadeActor.ClearHighScores
	// void ClearHighScores();                                                                                                  // [0x1917880] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.JettyBootsArcadeActor.All_ReplayPackage
	// void All_ReplayPackage(FJettyBootsReplay InPackage);                                                                     // [0x19177e0] Net|Native|Event|NetMulticast|Protected|BlueprintCallable 
	// Function /Script/FSD.JettyBootsArcadeActor.AddHighScoreServer
	// void AddHighScoreServer(FJettyBootsScore& InScore);                                                                      // [0x1917730] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.JettyBootsArcadeActor.AddHighScoreClient
	// void AddHighScoreClient(FJettyBootsScore& InScore);                                                                      // [0x1917680] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.SingleUsableComponent
/// Size: 0x00F0 (0x000120 - 0x000210)
class USingleUsableComponent : public UUsableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	SMember(FMulticastInlineDelegate)                  OnUsedBy                                                    OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUseBegin                                                  OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUseEnd                                                    OFFSET(getStruct<T>, {0x140, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProgress                                                  OFFSET(getStruct<T>, {0x150, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUsableChanged                                             OFFSET(getStruct<T>, {0x160, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUserCountChanged                                          OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailed                                                    OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	CMember(class USoundCue*)                          AudioBeginUse                                               OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(class USoundCue*)                          AudioFailedUse                                              OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class USoundCue*)                          AudioCompletedUse                                           OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   BoscoLaserpointerShout                                      OFFSET(get<T>, {0x1A8, 8, 0, 0})
	DMember(bool)                                      CoopUse                                                     OFFSET(get<bool>, {0x1B0, 1, 0, 0})
	CMember(class UPawnStat*)                          UseSpeedStat                                                OFFSET(get<T>, {0x1B8, 8, 0, 0})
	DMember(float)                                     CoopUseMultiplier                                           OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(bool)                                      Usable                                                      OFFSET(get<bool>, {0x1C4, 1, 0, 0})
	DMember(bool)                                      TurnOffAfterUse                                             OFFSET(get<bool>, {0x1C5, 1, 0, 0})
	DMember(bool)                                      MultipleUse                                                 OFFSET(get<bool>, {0x1C6, 1, 0, 0})
	DMember(bool)                                      bShowUsingUI                                                OFFSET(get<bool>, {0x1C8, 1, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         UsableIcon                                                  OFFSET(get<T>, {0x1D0, 8, 0, 0})
	DMember(float)                                     useDuration                                                 OFFSET(get<float>, {0x1F8, 4, 0, 0})
	DMember(float)                                     Progress                                                    OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     DesiredProgress                                             OFFSET(get<float>, {0x200, 4, 0, 0})
	DMember(int32_t)                                   userCount                                                   OFFSET(get<int32_t>, {0x204, 4, 0, 0})
	CMember(class UAudioComponent*)                    AudioBeginUseInstance                                       OFFSET(get<T>, {0x208, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SingleUsableComponent.Use
	// void Use(class APlayerCharacter* User, EInputKeys Key, float DeltaTime);                                                 // [0x19e9b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SingleUsableComponent.SetProgress
	// void SetProgress(float Value);                                                                                           // [0x19e98d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.SingleUsableComponent.SetCanUse
	// void SetCanUse(bool CanUse);                                                                                             // [0x19e96c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SingleUsableComponent.OnRep_UserCount
	// void OnRep_UserCount();                                                                                                  // [0x19e9100] Final|Native|Protected 
	// Function /Script/FSD.SingleUsableComponent.OnRep_Usable
	// void OnRep_Usable();                                                                                                     // [0x19e90e0] Final|Native|Protected 
	// Function /Script/FSD.SingleUsableComponent.OnRep_DesiredProgress
	// void OnRep_DesiredProgress();                                                                                            // [0x19e9010] Final|Native|Protected 
	// Function /Script/FSD.SingleUsableComponent.Cheat_Use
	// void Cheat_Use(class APlayerCharacter* User, EInputKeys Key);                                                            // [0x19e6650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SingleUsableComponent.All_PlayFailedAudio
	// void All_PlayFailedAudio();                                                                                              // [0x184b4a0] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.JettyBootUsableComponent
/// Size: 0x0008 (0x000210 - 0x000218)
class UJettyBootUsableComponent : public USingleUsableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	DMember(int32_t)                                   CreditPrice                                                 OFFSET(get<int32_t>, {0x210, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.JettyBootUsableComponent.DeductCredits
	// bool DeductCredits(class APlayerCharacter* User, class UMissionStat* InCreditCounter);                                   // [0x1917930] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.JettyBootsArcadeWidget
/// Size: 0x0000 (0x000260 - 0x000260)
class UJettyBootsArcadeWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
};

/// Class /Script/FSD.SpriteRectLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USpriteRectLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SpriteRectLibrary.TranslateSpriteRect
	// FSpriteRect TranslateSpriteRect(FSpriteRect Rect, FVector2D Offset);                                                     // [0x191d110] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpriteRectLibrary.SpriteRectIntersectsAny
	// bool SpriteRectIntersectsAny(FSpriteRect A, TArray<FSpriteRect> Others);                                                 // [0x191ceb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpriteRectLibrary.SpriteRectIntersects
	// bool SpriteRectIntersects(FSpriteRect A, FSpriteRect B);                                                                 // [0x191cdd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpriteRectLibrary.MoveSpriteRect
	// void MoveSpriteRect(FSpriteRect& Rect, FVector2D Offset);                                                                // [0x191c480] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpriteRectLibrary.MakeSpriteRectFromPoints
	// FSpriteRect MakeSpriteRectFromPoints(FVector2D Start, FVector2D End);                                                    // [0x191c340] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpriteRectLibrary.MakeSpriteRectFromCenter
	// FSpriteRect MakeSpriteRectFromCenter(FVector2D Center, FVector2D Size);                                                  // [0x191c280] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpriteRectLibrary.MakeGateSpriteRects
	// void MakeGateSpriteRects(int32_t CanvasHeight, int32_t GateWidth, FVector OpeningPos, float OpeningHeight, FSpriteRect& OutTopRect, FSpriteRect& OutBottomRect); // [0x191c080] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpriteRectLibrary.GetSpriteRectSize
	// FVector2D GetSpriteRectSize(FSpriteRect Rect);                                                                           // [0x191bfe0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpriteRectLibrary.GetSpriteRectCenter
	// FVector2D GetSpriteRectCenter(FSpriteRect Rect);                                                                         // [0x191bf40] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SpriteRectWidget
/// Size: 0x0010 (0x000260 - 0x000270)
class USpriteRectWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FVector2D)                                 Position                                                    OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	SMember(FVector2D)                                 Size                                                        OFFSET(getStruct<T>, {0x268, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SpriteRectWidget.SetSize
	// void SetSize(FVector2D InSize);                                                                                          // [0x191cd50] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpriteRectWidget.SetPositionAndSize
	// void SetPositionAndSize(FVector2D InPosition, FVector2D InSize);                                                         // [0x191cc90] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpriteRectWidget.SetPosition
	// void SetPosition(FVector2D InPosition);                                                                                  // [0x191cc10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpriteRectWidget.Move
	// void Move(FVector2D InOffset);                                                                                           // [0x191c400] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpriteRectWidget.GetSpriteRect
	// FSpriteRect GetSpriteRect();                                                                                             // [0x191bf00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.JettyBootSetting
/// Size: 0x0018 (0x000000 - 0x000018)
class FJettyBootSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FIRandRange)                               GateCount                                                   OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FIRandRange)                               GateSpacing                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FIRandRange)                               GateOpeningSize                                             OFFSET(getStruct<T>, {0x10, 8, 0, 0})
};

/// Class /Script/FSD.JettyBootSettings
/// Size: 0x0010 (0x000030 - 0x000040)
class UJettyBootSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FJettyBootSetting>)                 LevelSettings                                               OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.JettyBootSettings.GetLevelSetting
	// FJettyBootSetting GetLevelSetting(int32_t InLevel);                                                                      // [0x191bd70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.KeepInsideWorld
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UKeepInsideWorld : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TArray<TWeakObjectPtr<AActor*>>)           ActorsToKeepInsideWorld                                     OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(int32_t)                                   IteratorIndex                                               OFFSET(get<int32_t>, {0xC0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.KeepInsideWorld.UnregisterForKeepInsideWorld
	// void UnregisterForKeepInsideWorld(class UObject* WorldContextObject, class AActor*& Actor);                              // [0x191d2c0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.KeepInsideWorld.RegisterForKeepInsideWorld
	// void RegisterForKeepInsideWorld(class UObject* WorldContextObject, class AActor*& Actor);                                // [0x191c5e0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.KillEnemiesObjective
/// Size: 0x0020 (0x000180 - 0x0001A0)
class UKillEnemiesObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(int32_t)                                   EnemyCount                                                  OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(int32_t)                                   ExtraEnemies                                                OFFSET(get<int32_t>, {0x184, 4, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class UEnemyDescriptor*)                   EnemyTarget                                                 OFFSET(get<T>, {0x190, 8, 0, 0})
	DMember(int32_t)                                   EnemiesKilled                                               OFFSET(get<int32_t>, {0x198, 4, 0, 0})
	DMember(int32_t)                                   EnemiesToKill                                               OFFSET(get<int32_t>, {0x19C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.KillEnemiesObjective.RegisterTargetSpawned
	// void RegisterTargetSpawned(class APawn* Target);                                                                         // [0x191c6b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.KillEnemiesObjective.ReceiveTargetKilled
	// void ReceiveTargetKilled(class UHealthComponentBase* Health);                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.KillEnemiesObjective.OnTargetKilled
	// void OnTargetKilled(class UHealthComponentBase* Health);                                                                 // [0x191c550] Final|Native|Protected 
	// Function /Script/FSD.KillEnemiesObjective.OnRep_EnemiesToKill
	// void OnRep_EnemiesToKill(int32_t prevAmount);                                                                            // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.KillEnemiesObjective.OnRep_EnemiesKilled
	// void OnRep_EnemiesKilled(int32_t prevAmount);                                                                            // [0x17d4d70] Final|Native|Protected 
};

/// Struct /Script/FSD.LaserPointerData
/// Size: 0x0060 (0x000000 - 0x000060)
class FLaserPointerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(ELaserPointerTargetType)                   TargetType                                                  OFFSET(get<T>, {0x48, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x4C, 16, 0, 0})
};

/// Class /Script/FSD.LaserPointerMarker
/// Size: 0x0078 (0x000220 - 0x000298)
class ALaserPointerMarker : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	SMember(FLaserPointerData)                         LookAtData                                                  OFFSET(getStruct<T>, {0x220, 96, 0, 0})
	CMember(class AActor*)                             LookAtActor                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UPrimitiveComponent*)                LookAtComponent                                             OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   LookAtTerrainMaterial                                       OFFSET(get<T>, {0x290, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.LaserPointerMarker.GetCharacter
	// class APlayerCharacter* GetCharacter();                                                                                  // [0x191bd40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.LaserPointerWaypoint
/// Size: 0x0020 (0x000220 - 0x000240)
class ALaserPointerWaypoint : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   Character                                                   OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TWeakObjectPtr<class ALaserPointerItem*>)  LaserPointer                                                OFFSET(get<T>, {0x228, 8, 0, 0})
	SMember(FVector)                                   Normal                                                      OFFSET(getStruct<T>, {0x230, 12, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x23C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.LaserPointerWaypoint.OnShow
	// void OnShow();                                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LaserPointerWaypoint.OnHide
	// void OnHide();                                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.LaserPointerItem
/// Size: 0x01A8 (0x0003E0 - 0x000588)
class ALaserPointerItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1416;

public:
	SMember(FMulticastInlineDelegate)                  OnMarkerPlaced                                              OFFSET(getStruct<T>, {0x3E0, 16, 0, 0})
	CMember(class UClass*)                             MarkerType                                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UClass*)                             SecondaryMarkerType                                         OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(TWeakObjectPtr<class ALaserPointerMarker*>) ActiveMarker                                               OFFSET(get<T>, {0x400, 8, 0, 0})
	SMember(FGameplayTagContainer)                     enemyTags                                                   OFFSET(getStruct<T>, {0x408, 32, 0, 0})
	CMember(class UClass*)                             WaypointType                                                OFFSET(get<T>, {0x428, 8, 0, 0})
	DMember(int32_t)                                   MaxWaypoints                                                OFFSET(get<int32_t>, {0x430, 4, 0, 0})
	CMember(TArray<class ALaserPointerWaypoint*>)      Waypoints                                                   OFFSET(get<T>, {0x438, 16, 0, 0})
	DMember(int32_t)                                   NextWaypointIndex                                           OFFSET(get<int32_t>, {0x448, 4, 0, 0})
	DMember(float)                                     MarkerLifeTime                                              OFFSET(get<float>, {0x450, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   DefaultLookAtShout                                          OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DefaultEnemyShout                                           OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(class USceneComponent*)                    PointerComponent                                            OFFSET(get<T>, {0x468, 8, 0, 0})
	SMember(FHitResult)                                LookAtHit                                                   OFFSET(getStruct<T>, {0x470, 136, 0, 0})
	CMember(TWeakObjectPtr<class UObjectInfoComponent*>) LookAtInfo                                                OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTerrainMaterial*>)   LookAtTerrainMaterial                                       OFFSET(get<T>, {0x500, 8, 0, 0})
	SMember(FLaserPointerData)                         LookAtData                                                  OFFSET(getStruct<T>, {0x508, 96, 0, 0})
	DMember(float)                                     LookAtDistance                                              OFFSET(get<float>, {0x568, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   LookAtShout                                                 OFFSET(get<T>, {0x570, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   MissionControlLookAtShout                                   OFFSET(get<T>, {0x578, 8, 0, 0})
	CMember(class AFSDGameState*)                      GameState                                                   OFFSET(get<T>, {0x580, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.LaserPointerItem.UnlockToMinersManual
	// void UnlockToMinersManual(class UObject* WorldContextObject, FGuid ObjectID);                                            // [0x191d1e0] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.LaserPointerItem.ToggleLaserVisible
	// void ToggleLaserVisible(bool aVisible);                                                                                  // [0x191d080] Native|Event|Public|BlueprintEvent 
	// Function /Script/FSD.LaserPointerItem.ServerPlaceMarker
	// void ServerPlaceMarker(FVector Location, FVector Normal, class AActor* Actor, class UPrimitiveComponent* Cmponent, class UTerrainMaterial* TerrainMaterial, ELaserPointerMarkerType eMarkerType); // [0x191c740] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.LaserPointerItem.Server_SecondaryUse
	// void Server_SecondaryUse(FVector Location, FVector Normal, class AActor* Actor, class UPrimitiveComponent* Cmponent, class UTerrainMaterial* TerrainMaterial); // [0x191c940] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.LaserPointerItem.OnPointOfInterest
	// void OnPointOfInterest(class AActor* TargetActor, FVector TargetLocation, class UTexture2D* TargetIcon);                 // [0x1d6f900] Event|Protected|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.LaserPointerItem.GetPointTransform
	// void GetPointTransform(FTransform& PointTransform);                                                                      // [0x191be20] Native|Event|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure 
	// Function /Script/FSD.LaserPointerItem.GetActiveMarkerLocation
	// FVector GetActiveMarkerLocation();                                                                                       // [0x191bd00] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.LegacySettings
/// Size: 0x0010 (0x000030 - 0x000040)
class ULegacySettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<TWeakObjectPtr<USkeletalMesh*>>)    ArmorMeshes                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.LevelGenerationDebris
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class ULevelGenerationDebris : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(class UDebrisBase*)                        Debris                                                      OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UObject*)                            Influencer                                                  OFFSET(get<T>, {0xB8, 8, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(bool)                                      SelfActivate                                                OFFSET(get<bool>, {0xC4, 1, 0, 0})
};

/// Struct /Script/FSD.LightStrobeChannel
/// Size: 0x00D0 (0x000000 - 0x0000D0)
class FLightStrobeChannel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TWeakObjectPtr<class UPointLightComponent*>) Light                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInstanceDynamic*>) Mid                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMeshComponent*>)     Mesh                                                        OFFSET(get<T>, {0x10, 8, 0, 0})
	SMember(FName)                                     ParamName                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(float)                                     MinIntensity                                                OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxIntensity                                                OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     TimeScale                                                   OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     MaterialMultiplier                                          OFFSET(get<float>, {0x30, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        StrobingCurve                                               OFFSET(getStruct<T>, {0x38, 136, 0, 0})
	DMember(int32_t)                                   Loops                                                       OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	CMember(EStrobingMode)                             Mode                                                        OFFSET(get<T>, {0xC8, 1, 0, 0})
	CMember(EStrobeMaterialMode)                       MaterialMode                                                OFFSET(get<T>, {0xC9, 1, 0, 0})
};

/// Class /Script/FSD.LightStrobingComponent
/// Size: 0x00D8 (0x0000B0 - 0x000188)
class ULightStrobingComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 392;

public:
	SMember(FLightStrobeChannel)                       DefaultChannel                                              OFFSET(getStruct<T>, {0xB0, 208, 0, 0})
	DMember(float)                                     PhotosensitiveMultiplier                                    OFFSET(get<float>, {0x180, 4, 0, 0})
	DMember(bool)                                      AutoSetup                                                   OFFSET(get<bool>, {0x184, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LightStrobingComponent.StopLoop
	// void StopLoop(int32_t Channel);                                                                                          // [0x191cff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.LightStrobingComponent.AddMesh
	// void AddMesh(class UMeshComponent* Mesh);                                                                                // [0x191bc70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.LightStrobingComponent.AddMaterial
	// void AddMaterial(class UMaterialInstanceDynamic* Mid);                                                                   // [0x191bbe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.LightStrobingComponent.AddLight
	// void AddLight(class UPointLightComponent* Light);                                                                        // [0x191bb50] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.LimbDismembermentList
/// Size: 0x0010 (0x000030 - 0x000040)
class ULimbDismembermentList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FName>)                             Bones                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.GibPartsList
/// Size: 0x0010 (0x000030 - 0x000040)
class UGibPartsList : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UStaticMesh*>)                GibMeshes                                                   OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.GibPartsList.SetGibMeshesAndMaterialsOnFX
	// void SetGibMeshesAndMaterialsOnFX(class UNiagaraComponent* ns, class UMaterialInstance* Material, float Scale);          // [0x191caf0] Final|Native|Public|BlueprintCallable|Const 
};

/// Struct /Script/FSD.LineSegmentCarverPoint
/// Size: 0x0024 (0x000000 - 0x000024)
class FLineSegmentCarverPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     HRange                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     VRange                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     FloorAngle                                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     CielingNoiseRange                                           OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     WallNoiseRange                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     FloorNoiseRange                                             OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Class /Script/FSD.LineSegmentCarverComponent
/// Size: 0x0040 (0x000450 - 0x000490)
class ULineSegmentCarverComponent : public UGenerationComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(TArray<FLineSegmentCarverPoint>)           LinePoints                                                  OFFSET(get<T>, {0x450, 16, 0, 0})
	DMember(bool)                                      Visible                                                     OFFSET(get<bool>, {0x460, 1, 0, 0})
	DMember(int32_t)                                   Layer                                                       OFFSET(get<int32_t>, {0x464, 4, 0, 0})
	DMember(float)                                     Cielingheight                                               OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     FloorDepth                                                  OFFSET(get<float>, {0x46C, 4, 0, 0})
	CMember(class UFloodFillSettings*)                 CeilingNoiseOverride                                        OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 WallNoiseOverride                                           OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 FloorNoiseOverride                                          OFFSET(get<T>, {0x480, 8, 0, 0})
	DMember(bool)                                      UseDetailNoise                                              OFFSET(get<bool>, {0x488, 1, 0, 0})
};

/// Class /Script/FSD.LineSegmentCarver
/// Size: 0x0018 (0x000228 - 0x000240)
class ALineSegmentCarver : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class ULineSegmentCarverComponent*)        LineComponent                                               OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/FSD.LineCutterProjectile
/// Size: 0x01F0 (0x000340 - 0x000530)
class ALineCutterProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1328;

public:
	SMember(FScaledEffect)                             EletricHitEffect                                            OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	SMember(FScaledEffect)                             ProjectileDisappearEffect                                   OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	DMember(float)                                     SwipeRadius                                                 OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     DoubleLineDistanceMultiplier                                OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     OverlapRadius                                               OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(bool)                                      DestroyOnTerrainCollision                                   OFFSET(get<bool>, {0x36C, 1, 0, 0})
	DMember(bool)                                      IsDead                                                      OFFSET(get<bool>, {0x36D, 1, 0, 0})
	DMember(bool)                                      bHasReversedDirection                                       OFFSET(get<bool>, {0x36E, 1, 0, 0})
	DMember(bool)                                      bIsHoming                                                   OFFSET(get<bool>, {0x36F, 1, 0, 0})
	DMember(float)                                     FlyStraighTime                                              OFFSET(get<float>, {0x3C4, 4, 0, 0})
	CMember(EImpactDecalSize)                          EletricDecalSize                                            OFFSET(get<T>, {0x3C8, 1, 0, 0})
	CMember(EImpactDecalSize)                          ImpactDecalSize                                             OFFSET(get<T>, {0x3C9, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLineDestroy                                               OFFSET(getStruct<T>, {0x410, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLineLifespanEnd                                           OFFSET(getStruct<T>, {0x420, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPerformHit                                                OFFSET(getStruct<T>, {0x430, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLineEffectHide                                            OFFSET(getStruct<T>, {0x440, 16, 0, 0})
	SMember(FVector)                                   LeftLastPosition                                            OFFSET(getStruct<T>, {0x450, 12, 0, 0})
	SMember(FVector)                                   RightLastPosition                                           OFFSET(getStruct<T>, {0x45C, 12, 0, 0})
	CMember(class USceneComponent*)                    LineRoot                                                    OFFSET(get<T>, {0x468, 8, 0, 0})
	CMember(class USceneComponent*)                    LeftSphere                                                  OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class USceneComponent*)                    RightSphere                                                 OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class USceneComponent*)                    LeftSphere2                                                 OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class USceneComponent*)                    RightSphere2                                                OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class USceneComponent*)                    LeftSphere3                                                 OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class USceneComponent*)                    RightSphere3                                                OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           BeamParticle                                                OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           BeamParticle2                                               OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           BeamParticle3                                               OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           LeftHitParticles                                            OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           RightHitParticles                                           OFFSET(get<T>, {0x4C0, 8, 0, 0})
	DMember(float)                                     RotationSpeed                                               OFFSET(get<float>, {0x4C8, 4, 0, 0})
	SMember(FRotator)                                  LineRotation                                                OFFSET(getStruct<T>, {0x4CC, 12, 0, 0})
	CMember(ELineRotation)                             RotationMode                                                OFFSET(get<T>, {0x4D8, 1, 0, 0})
	DMember(bool)                                      ShouldExplode                                               OFFSET(get<bool>, {0x4D9, 1, 0, 0})
	DMember(bool)                                      OnlyOne                                                     OFFSET(get<bool>, {0x4DA, 1, 0, 0})
	DMember(bool)                                      IsDoubleLine                                                OFFSET(get<bool>, {0x4DB, 1, 0, 0})
	DMember(bool)                                      HasPlasmaTrail                                              OFFSET(get<bool>, {0x4DC, 1, 0, 0})
	DMember(float)                                     LineMaxSize                                                 OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     LineExpansionDelay                                          OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     TimeToLineExpansion                                         OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     FireRate                                                    OFFSET(get<float>, {0x4EC, 4, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UDamageComponent*)                   InitialDamageComponent                                      OFFSET(get<T>, {0x4F8, 8, 0, 0})
	DMember(int32_t)                                   InitialHitDamageMultiplier                                  OFFSET(get<int32_t>, {0x500, 4, 0, 0})
	DMember(float)                                     InhibitImpactDecalsTime                                     OFFSET(get<float>, {0x504, 4, 0, 0})
	DMember(float)                                     MinTimeBetweenImpactDecals                                  OFFSET(get<float>, {0x508, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.LineCutterProjectile.UpdateBeamLocations
	// void UpdateBeamLocations();                                                                                              // [0x1921e90] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.LineCutterProjectile.TerrainSweep
	// void TerrainSweep(FVector& Left, FVector& Right);                                                                        // [0x1921d90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.LineCutterProjectile.StartSpawningTrail
	// void StartSpawningTrail();                                                                                               // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.LineCutterProjectile.SpawnDecal
	// void SpawnDecal(FHitResult& Result);                                                                                     // [0x1921cb0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.LineCutterProjectile.SetExtraBeamVisibility
	// void SetExtraBeamVisibility(bool IsVisible);                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LineCutterProjectile.Server_RemoveDebris
	// void Server_RemoveDebris(int32_t instance, int32_t Component);                                                           // [0x1921630] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LineCutterProjectile.PerformHit__DelegateSignature
	// void PerformHit__DelegateSignature(FHitResult& Result);                                                                  // [0x1d6f900] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FSD.LineCutterProjectile.OnRep_LineRotation
	// void OnRep_LineRotation();                                                                                               // [0x19212a0] Final|Native|Protected 
	// Function /Script/FSD.LineCutterProjectile.LineLifeSpanDestroy__DelegateSignature
	// void LineLifeSpanDestroy__DelegateSignature();                                                                           // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.LineCutterProjectile.LineEffectHide__DelegateSignature
	// void LineEffectHide__DelegateSignature();                                                                                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.LineCutterProjectile.LineDestroy__DelegateSignature
	// void LineDestroy__DelegateSignature(FHitResult& Result);                                                                 // [0x1d6f900] MulticastDelegate|Public|Delegate|HasOutParms 
	// Function /Script/FSD.LineCutterProjectile.Fire
	// void Fire(FVector& Origin, FVector& Direction, float Distance);                                                          // [0x1920a90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.GuntowerLineProjectile
/// Size: 0x0070 (0x000340 - 0x0003B0)
class AGuntowerLineProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	SMember(FMulticastInlineDelegate)                  OnLineDestroy                                               OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	CMember(class USceneComponent*)                    LeftLinePoint                                               OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class USceneComponent*)                    RightLinePoint                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           BeamParticles                                               OFFSET(get<T>, {0x368, 8, 0, 0})
	DMember(float)                                     PlatformDissolveRadius                                      OFFSET(get<float>, {0x370, 4, 0, 0})
	DMember(float)                                     PlatformDissolveSqueeze                                     OFFSET(get<float>, {0x374, 4, 0, 0})
	CMember(class UParticleSystemComponent*)           HitParticles                                                OFFSET(get<T>, {0x378, 8, 0, 0})
	DMember(float)                                     TimeBetweenLineChecks                                       OFFSET(get<float>, {0x3A0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.GuntowerLineProjectile.TurnOffParticles
	// void TurnOffParticles();                                                                                                 // [0x1921e70] Final|Native|Protected 
	// Function /Script/FSD.GuntowerLineProjectile.LineDestroy__DelegateSignature
	// void LineDestroy__DelegateSignature(FHitResult Result);                                                                  // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.GuntowerLineProjectile.Fire
	// void Fire(FVector& Origin, FVector& Direction, float Distance);                                                          // [0x1920960] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Struct /Script/FSD.LineSegmentFillerPoint
/// Size: 0x0024 (0x000000 - 0x000024)
class FLineSegmentFillerPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRandRange)                                RandomRange                                                 OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FRandRange)                                RandomNoiseRange                                            OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	SMember(FRandRange)                                FillAmount                                                  OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
};

/// Class /Script/FSD.LineSegmentFillerComponent
/// Size: 0x0040 (0x000450 - 0x000490)
class ULineSegmentFillerComponent : public UGenerationComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1168;

public:
	CMember(TArray<FLineSegmentFillerPoint>)           LinePoints                                                  OFFSET(get<T>, {0x450, 16, 0, 0})
	DMember(bool)                                      Visible                                                     OFFSET(get<bool>, {0x460, 1, 0, 0})
	CMember(class UFloodFillSettings*)                 NoiseOverride                                               OFFSET(get<T>, {0x468, 8, 0, 0})
	SMember(FRandRange)                                RangeScale                                                  OFFSET(getStruct<T>, {0x470, 8, 0, 0})
	SMember(FRandRange)                                NoiseRangeScale                                             OFFSET(getStruct<T>, {0x478, 8, 0, 0})
};

/// Class /Script/FSD.LineSegmentFiller
/// Size: 0x0018 (0x000228 - 0x000240)
class ALineSegmentFiller : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class ULineSegmentFillerComponent*)        LineComponent                                               OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/FSD.LineSpikeTaskBase
/// Size: 0x0000 (0x000028 - 0x000028)
class ULineSpikeTaskBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.WaitTask
/// Size: 0x0010 (0x000028 - 0x000038)
class UWaitTask : public ULineSpikeTaskBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     WaitTime                                                    OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(bool)                                      SkipIfLast                                                  OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      OnlyOnce                                                    OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Class /Script/FSD.PlayEffectsTask
/// Size: 0x0000 (0x000028 - 0x000028)
class UPlayEffectsTask : public ULineSpikeTaskBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.ShootTask
/// Size: 0x0008 (0x000028 - 0x000030)
class UShootTask : public ULineSpikeTaskBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      HasToFinish                                                 OFFSET(get<bool>, {0x29, 1, 0, 0})
};

/// Class /Script/FSD.AquireTargetTask
/// Size: 0x0018 (0x000028 - 0x000040)
class UAquireTargetTask : public ULineSpikeTaskBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      ForceNewTarget                                              OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/FSD.SpecialAttackComponent
/// Size: 0x0030 (0x0000F0 - 0x000120)
class USpecialAttackComponent : public UAttackBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TArray<class UAnimMontage*>)               Montages                                                    OFFSET(get<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAttackActionNotify                                        OFFSET(getStruct<T>, {0x110, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.SpecialAttackComponent.TriggerAttack
	// void TriggerAttack(FName Name);                                                                                          // [0x19be830] Final|Native|Protected 
	// Function /Script/FSD.SpecialAttackComponent.SelectMontage
	// class UAnimMontage* SelectMontage();                                                                                     // [0x197d090] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/FSD.SpecialAttackComponent.Receive_OnPerformAttack
	// void Receive_OnPerformAttack();                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SpecialAttackComponent.Receive_OnAborted
	// void Receive_OnAborted();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SpecialAttackComponent.OnMontageEnded
	// void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);                                                      // [0x19bdd90] Final|Native|Protected 
	// Function /Script/FSD.SpecialAttackComponent.OnFrozen
	// void OnFrozen(bool IsFrozen);                                                                                            // [0x19178a0] Native|Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.LineSpikeAttack
/// Size: 0x0140 (0x000120 - 0x000260)
class ULineSpikeAttack : public USpecialAttackComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(class UMaterialInterface*)                 TentacleMaterial                                            OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UMaterialInstance*)                  ActiveMaterial                                              OFFSET(get<T>, {0x138, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UNiagaraComponent*>>) ActiveParticles                                            OFFSET(get<T>, {0x140, 16, 0, 0})
	CMember(class UNiagaraSystem*)                     TentacleImpactParticles                                     OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     StartWaveParticles                                          OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class USoundCue*)                          TentacleImpactSound                                         OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class USoundCue*)                          TentacleExitSound                                           OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class USoundCue*)                          StartWaveSound                                              OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  Tentacles                                                   OFFSET(get<T>, {0x1D8, 8, 0, 0})
	CMember(TArray<class ULineSpikeTaskBase*>)         Sequence                                                    OFFSET(get<T>, {0x1E0, 16, 0, 0})
	CMember(TArray<class AActor*>)                     Children                                                    OFFSET(get<T>, {0x1F0, 16, 0, 0})
	DMember(int32_t)                                   SequenceLoops                                               OFFSET(get<int32_t>, {0x200, 4, 0, 0})
	CMember(class UClass*)                             SpikeClass                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      TentaclesBurried                                            OFFSET(get<bool>, {0x228, 1, 0, 0})
	DMember(float)                                     MaxStepUpheight                                             OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     firstSpikeDelay                                             OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     firstSpikeExtraDistance                                     OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     MaxDistanceToGround                                         OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     DistanceBetweenSpikes                                       OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     TimeBetweenSpikes                                           OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     TentacleStretchPower                                        OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     TentacleSearchDistance                                      OFFSET(get<float>, {0x24C, 4, 0, 0})
	DMember(float)                                     TentacleInGroundOffset                                      OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(int32_t)                                   MinSpikeCount                                               OFFSET(get<int32_t>, {0x254, 4, 0, 0})
	DMember(int32_t)                                   MaxFails                                                    OFFSET(get<int32_t>, {0x258, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.LineSpikeAttack.OnRep_TentaclesBurried
	// void OnRep_TentaclesBurried();                                                                                           // [0x19212c0] Final|Native|Protected 
	// Function /Script/FSD.LineSpikeAttack.All_PlayEffects
	// void All_PlayEffects();                                                                                                  // [0x1920800] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.LoadoutFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class ULoadoutFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.LoadoutFunctionLibrary.SetCurrLoadout
	// void SetCurrLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, FLoadoutCopy newLoadout);     // [0x19219e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.LoadoutFunctionLibrary.RandomizeWeaponLoadout
	// void RandomizeWeaponLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, int32_t loadoutIndex); // [0x1921360] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.LoadoutFunctionLibrary.RandomizeAllRandomWeaponLoadout
	// void RandomizeAllRandomWeaponLoadout(class APlayerCharacter* Player);                                                    // [0x19212e0] Final|Native|Static|Public 
	// Function /Script/FSD.LoadoutFunctionLibrary.GetCurrentLoadout
	// FLoadoutCopy GetCurrentLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId);                   // [0x1920c90] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.LoadoutFunctionLibrary.CopyPasteWeaponLoadout
	// void CopyPasteWeaponLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, int32_t fromIndex, int32_t toIndex); // [0x1920820] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.LoadoutItem
/// Size: 0x0000 (0x000028 - 0x000028)
class ULoadoutItem : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.LoadoutItem.GetLoadoutItemClass
	// class UClass* GetLoadoutItemClass();                                                                                     // [0x17fbe70] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.LoadoutItemProxy
/// Size: 0x0020 (0x000380 - 0x0003A0)
class ALoadoutItemProxy : public AItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(class UItemCharacterAnimationSet*)         AnimationSet                                                OFFSET(get<T>, {0x380, 8, 0, 0})
	SMember(FItemLoadoutAnimations)                    LoadoutAnimations                                           OFFSET(getStruct<T>, {0x388, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.LoadoutItemProxy.GetLoadoutItemFromClass
	// class UClass* GetLoadoutItemFromClass(class UClass* actorClass);                                                         // [0x1920f80] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.LocalizationFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class ULocalizationFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.LocalizationFunctionLibrary.GetLocalizedLanguages
	// TArray<FLocalizedLanguageInfo> GetLocalizedLanguages();                                                                  // [0x1921010] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.FSDTranslationProgress
/// Size: 0x0018 (0x000000 - 0x000018)
class FFSDTranslationProgress : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   CodeName                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   TranslatedPercent                                           OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Class /Script/FSD.FSDLocalizationSettings
/// Size: 0x0010 (0x000038 - 0x000048)
class UFSDLocalizationSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FFSDTranslationProgress>)           CommunityTranslationProgress                                OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FSD.BeamCollision
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FBeamCollision : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(bool)                                      bBeamBlocked                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     BeamHitDistance                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FVector)                                   FinalTraceStart                                             OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FVector)                                   FinalTraceEnd                                               OFFSET(getStruct<T>, {0x14, 12, 0, 0})
};

/// Class /Script/FSD.LockOnBeam
/// Size: 0x0140 (0x000220 - 0x000360)
class ALockOnBeam : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	CMember(class USplineComponent*)                   BeamSpline                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USplineMeshComponent*)               BeamMeshComponent01                                         OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USplineMeshComponent*)               BeamMeshComponent02                                         OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class USplineMeshComponent*)               BeamMeshComponent03                                         OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class USceneComponent*)                    BlockedNodeComponent                                        OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class USceneComponent*)                    PreviewLocationComponent                                    OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UMaterialInterface*)                 BeamMaterial                                                OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UMaterialInterface*)                 BlockedBeamMaterial                                         OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UMaterialInterface*)                 SeekerMaterial                                              OFFSET(get<T>, {0x260, 8, 0, 0})
	DMember(float)                                     BeamThicknessScale                                          OFFSET(get<float>, {0x268, 4, 0, 0})
	CMember(TWeakObjectPtr<class ALockOnWeapon*>)      Item                                                        OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             TargetActor                                                 OFFSET(get<T>, {0x280, 8, 0, 0})
	SMember(FBeamCollision)                            Collision                                                   OFFSET(getStruct<T>, {0x298, 200, 0, 0})


	/// Functions
	// Function /Script/FSD.LockOnBeam.ReceiveItemSet
	// void ReceiveItemSet();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.LockOnTrackingWidget
/// Size: 0x0000 (0x0002B0 - 0x0002B0)
class ULockOnTrackingWidget : public UActorTrackingWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:


	/// Functions
	// Function /Script/FSD.LockOnTrackingWidget.OnLockOn
	// void OnLockOn(int32_t numberOfLockOnsOnThisTarget, int32_t totalNumberOfLockOns);                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.LockOnTrackingWidget.OnFireComplete
	// void OnFireComplete(int32_t numberOfLockOnsOnThisTarget);                                                                // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.LockOnTrackingWidget.CleanUpWidget
	// void CleanUpWidget(bool showFade);                                                                                       // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.LockOnWeapon
/// Size: 0x01C8 (0x000780 - 0x000948)
class ALockOnWeapon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2376;

public:
	SMember(FMulticastInlineDelegate)                  OnLockingStarted                                            OFFSET(getStruct<T>, {0x780, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLockingStopped                                            OFFSET(getStruct<T>, {0x790, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMaxTargetsChanged                                         OFFSET(getStruct<T>, {0x7A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLockOnCountChanged                                        OFFSET(getStruct<T>, {0x7B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLockonTargetRotationUpdated                               OFFSET(getStruct<T>, {0x7C0, 16, 0, 0})
	CMember(class AActor*)                             AimTarget                                                   OFFSET(get<T>, {0x7D0, 8, 0, 0})
	DMember(float)                                     LockOnDamageMultiplier                                      OFFSET(get<float>, {0x7D8, 4, 0, 0})
	DMember(int32_t)                                   ShotsPerTarget                                              OFFSET(get<int32_t>, {0x7DC, 4, 0, 0})
	DMember(int32_t)                                   MaxTargets                                                  OFFSET(get<int32_t>, {0x7E0, 4, 0, 0})
	DMember(float)                                     TimeBetweenLockedShots                                      OFFSET(get<float>, {0x7E4, 4, 0, 0})
	DMember(float)                                     LockOnTime                                                  OFFSET(get<float>, {0x7E8, 4, 0, 0})
	DMember(float)                                     MaxLockOnDegree                                             OFFSET(get<float>, {0x7EC, 4, 0, 0})
	DMember(float)                                     LoseLockOnDegree                                            OFFSET(get<float>, {0x7F0, 4, 0, 0})
	DMember(float)                                     DegreeTolerance                                             OFFSET(get<float>, {0x7F4, 4, 0, 0})
	DMember(float)                                     MaxLockOnRange                                              OFFSET(get<float>, {0x7F8, 4, 0, 0})
	DMember(bool)                                      bPrioritizeLowHitPoint                                      OFFSET(get<bool>, {0x7FC, 1, 0, 0})
	DMember(bool)                                      bAlwaysHitTarget                                            OFFSET(get<bool>, {0x7FD, 1, 0, 0})
	DMember(float)                                     MaxLockOnDuration                                           OFFSET(get<float>, {0x800, 4, 0, 0})
	DMember(float)                                     RateOfFireLockedOnModifier                                  OFFSET(get<float>, {0x804, 4, 0, 0})
	DMember(bool)                                      bLockOnControlsSentryGun                                    OFFSET(get<bool>, {0x808, 1, 0, 0})
	DMember(bool)                                      bSentryGunShootsOnLockedShot                                OFFSET(get<bool>, {0x809, 1, 0, 0})
	CMember(class UClass*)                             TrackingWidgetClass                                         OFFSET(get<T>, {0x810, 8, 0, 0})
	CMember(class UClass*)                             LockOnBeamClass                                             OFFSET(get<T>, {0x818, 8, 0, 0})
	CMember(class UClass*)                             AoeActorClass                                               OFFSET(get<T>, {0x820, 8, 0, 0})
	DMember(int32_t)                                   AoeHitCountThreshhold                                       OFFSET(get<int32_t>, {0x828, 4, 0, 0})
	DMember(bool)                                      UseLockOnTargetStatusEffect                                 OFFSET(get<bool>, {0x82C, 1, 0, 0})
	CMember(class UClass*)                             LockOnTargetStatusEffect                                    OFFSET(get<T>, {0x830, 8, 0, 0})
	DMember(int32_t)                                   PushStatusEffectEveryXLock                                  OFFSET(get<int32_t>, {0x838, 4, 0, 0})
	DMember(int32_t)                                   LockOnCount                                                 OFFSET(get<int32_t>, {0x86C, 4, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x8A0, 8, 0, 0})
	CMember(class UHitscanComponent*)                  HitscanComponent                                            OFFSET(get<T>, {0x8A8, 8, 0, 0})
	SMember(FTracerData)                               ChargedShotTracer                                           OFFSET(getStruct<T>, {0x8B0, 48, 0, 0})
	DMember(float)                                     ChargeSpeed                                                 OFFSET(get<float>, {0x8E0, 4, 0, 0})
	DMember(float)                                     SlowMovementAtCharge                                        OFFSET(get<float>, {0x8E4, 4, 0, 0})
	DMember(bool)                                      FearEnabled                                                 OFFSET(get<bool>, {0x8E8, 1, 0, 0})
	DMember(float)                                     FearFactorBase                                              OFFSET(get<float>, {0x8EC, 4, 0, 0})
	DMember(float)                                     FearFactorPerShotBonus                                      OFFSET(get<float>, {0x8F0, 4, 0, 0})
	DMember(float)                                     FearRange                                                   OFFSET(get<float>, {0x8F4, 4, 0, 0})
	DMember(float)                                     FearRangePerShotBonus                                       OFFSET(get<float>, {0x8F8, 4, 0, 0})
	DMember(bool)                                      IsMovementSlowed                                            OFFSET(get<bool>, {0x8FE, 1, 0, 0})
	DMember(bool)                                      Charging                                                    OFFSET(get<bool>, {0x8FF, 1, 0, 0})
	DMember(float)                                     ChargeProgress                                              OFFSET(get<float>, {0x900, 4, 0, 0})
	DMember(bool)                                      LastShotWasLockedOn                                         OFFSET(get<bool>, {0x904, 1, 0, 0})
	DMember(float)                                     LockOnRecoilMult                                            OFFSET(get<float>, {0x908, 4, 0, 0})
	DMember(bool)                                      FireOnRelease                                               OFFSET(get<bool>, {0x940, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LockOnWeapon.UpdateRifleEye
	// void UpdateRifleEye();                                                                                                   // [0x1921eb0] Final|Native|Protected 
	// Function /Script/FSD.LockOnWeapon.SetMuzzleDirection
	// void SetMuzzleDirection(FVector TargetLocation);                                                                         // [0x1d6f900] Event|Protected|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.LockOnWeapon.Server_TriggerAoe
	// void Server_TriggerAoe(FVector Location);                                                                                // [0x1921950] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.LockOnWeapon.Server_SetTotalLockCount
	// void Server_SetTotalLockCount(int32_t totalLockCount);                                                                   // [0x19218c0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LockOnWeapon.Server_SetLockCount
	// void Server_SetLockCount(FLockCounter LockCounter);                                                                      // [0x1921820] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LockOnWeapon.Server_SetIsMovementSlowed
	// void Server_SetIsMovementSlowed(bool bisMovementSlowed);                                                                 // [0x1921790] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LockOnWeapon.Server_SetIsLatestShotLockedOn
	// void Server_SetIsLatestShotLockedOn(bool bisShotLockedOn);                                                               // [0x17f4b40] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LockOnWeapon.Server_SetIsChargingShot
	// void Server_SetIsChargingShot(bool bisCharging);                                                                         // [0x1921700] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LockOnWeapon.Server_PushStatusEffect
	// void Server_PushStatusEffect(class AActor* Target);                                                                      // [0x19215a0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LockOnWeapon.Server_PopStatusEffect
	// void Server_PopStatusEffect(class AActor* Target);                                                                       // [0x1921510] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LockOnWeapon.Server_FiringComplete
	// void Server_FiringComplete(int32_t ShotsFired);                                                                          // [0x1921480] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LockOnWeapon.RefundAmmo
	// void RefundAmmo();                                                                                                       // [0x1921460] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.LockOnWeapon.OnRep_AimTarget
	// void OnRep_AimTarget();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LockOnWeapon.OnMovementSlowed
	// void OnMovementSlowed(bool isSlowed);                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LockOnWeapon.OnHitDeadTarget
	// void OnHitDeadTarget();                                                                                                  // [0x1921280] Final|Native|Protected 
	// Function /Script/FSD.LockOnWeapon.OnHit
	// void OnHit(FHitResult& Hit, bool alwaysPenetrate);                                                                       // [0x1921150] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.LockOnWeapon.OnAsyncFireComplete
	// void OnAsyncFireComplete();                                                                                              // [0x1921130] Final|Native|Protected 
	// Function /Script/FSD.LockOnWeapon.MuzzleLerpToTarget
	// void MuzzleLerpToTarget(FVector TargetLocation);                                                                         // [0x1d6f900] Event|Protected|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.LockOnWeapon.MaxTargetsDelegate__DelegateSignature
	// void MaxTargetsDelegate__DelegateSignature(int32_t InMaxTargets);                                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.LockOnWeapon.LockonTargetRotationUpdated__DelegateSignature
	// void LockonTargetRotationUpdated__DelegateSignature(bool hasTargetLockon, FRotator socketRotation);                      // [0x1d6f900] MulticastDelegate|Public|Delegate|HasDefaults 
	// Function /Script/FSD.LockOnWeapon.LockOnRifleLockingOnState__DelegateSignature
	// void LockOnRifleLockingOnState__DelegateSignature();                                                                     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.LockOnWeapon.LockOnCountDelegate__DelegateSignature
	// void LockOnCountDelegate__DelegateSignature(int32_t InCurrentCount);                                                     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.LockOnWeapon.FireWeapon
	// void FireWeapon(bool ResetUsing, bool Fire);                                                                             // [0x1920bc0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.LookingAtWidget
/// Size: 0x0048 (0x000260 - 0x0002A8)
class ULookingAtWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(float)                                     TargetSelectDuration                                        OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     TargetLostDuration                                          OFFSET(get<float>, {0x264, 4, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   Character                                                   OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(TWeakObjectPtr<class UCharacterSightComponent*>) CharacterSight                                        OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             CurrentTarget                                               OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPawnAfflictionComponent*>) CurrentTargetAfflictions                              OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   CurrentTargetHealth                                         OFFSET(get<T>, {0x288, 16, 0, 0})
	DMember(bool)                                      CanCurrentTargetTakeDamage                                  OFFSET(get<bool>, {0x298, 1, 0, 0})
	DMember(float)                                     TargetLostTime                                              OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(bool)                                      bTargetSet                                                  OFFSET(get<bool>, {0x2A0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LookingAtWidget.SetCurrentTarget
	// void SetCurrentTarget(class AActor* NewActor, TScriptInterface<Class>& HealthComponent, float OverrideTargetLostTime);   // [0x1926f30] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.LookingAtWidget.ResetCurrentTarget
	// void ResetCurrentTarget();                                                                                               // [0x1926e30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.LookingAtWidget.ReceiveUpdateTarget
	// void ReceiveUpdateTarget(class AActor* InCurrentTarget, float DeltaTime);                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LookingAtWidget.ReceiveTargetLost
	// void ReceiveTargetLost();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LookingAtWidget.ReceiveNewTarget
	// void ReceiveNewTarget(class AActor* InCurrentTarget);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LookingAtWidget.IsValidTarget
	// bool IsValidTarget(class AActor* TargetActor, TScriptInterface<Class>& TargetHealth);                                    // [0x1926340] Native|Event|Protected|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.LookingAtWidget.IsBossFight
	// bool IsBossFight(TScriptInterface<Class>& Health);                                                                       // [0x1926260] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.LookingAtWidget.GetLookingAtHealth
	// class UHealthComponentBase* GetLookingAtHealth();                                                                        // [0x1926080] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.LookingAtWidget.GetLookingAtActor
	// class AActor* GetLookingAtActor();                                                                                       // [0x1926050] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.LookingAtWidget.GetCharacterTemperatureEffect
	// bool GetCharacterTemperatureEffect(float& TemperatureEffect);                                                            // [0x1925ed0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.LookingAtContentWidget
/// Size: 0x0040 (0x000260 - 0x0002A0)
class ULookingAtContentWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(TWeakObjectPtr<class AActor*>)             CurrentTarget                                               OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPawnAfflictionComponent*>) CurrentTargetAfflictions                              OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(TWeakObjectPtr<class USimpleObjectInfoComponent*>) CurrentTargetInfo                                   OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   CurrentTargetHealth                                         OFFSET(get<T>, {0x278, 16, 0, 0})
	CMember(TWeakObjectPtr<class UHackingUsableComponent*>) CurrentHackingComponent                                OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPetComponent*>)      CurrentPetComponent                                         OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bWeakPointHit                                               OFFSET(get<bool>, {0x298, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.LookingAtContentWidget.UpdateCurrentTarget
	// void UpdateCurrentTarget(float DeltaSeconds, class AActor* InTargetActor, TScriptInterface<Class>& InTargetHealthComponent); // [0x19272d0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.LookingAtContentWidget.RegisterWeakPointHit
	// void RegisterWeakPointHit();                                                                                             // [0x1926e10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.LookingAtContentWidget.ReceiveUpdateTarget
	// void ReceiveUpdateTarget(class AActor* InCurrentTarget, float DeltaTime);                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LookingAtContentWidget.ReceiveNewTarget
	// void ReceiveNewTarget(class AActor* InCurrentTarget);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.LookingAtContentWidget.GetTargetOwnerName
	// FText GetTargetOwnerName();                                                                                              // [0x19261c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.LookingAtContentWidget.GetTargetName
	// FText GetTargetName();                                                                                                   // [0x1926120] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.LookingAtContentWidget.GetTargetHealthPct
	// float GetTargetHealthPct();                                                                                              // [0x19260f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.TreasureBeacon
/// Size: 0x0080 (0x000220 - 0x0002A0)
class ATreasureBeacon : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	CMember(class USceneComponent*)                    RootComp                                                    OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UTerrainPlacementComponent*)         terrainPlacement                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 TreasurePositioning                                         OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 DebrisPartsPositioning                                      OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UCurveFloat*)                        AvoidCostCurve                                              OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UCurveFloat*)                        AvoidCostCurveDebris                                        OFFSET(get<T>, {0x250, 8, 0, 0})
	DMember(float)                                     MaxRange                                                    OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     MinRange                                                    OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     DebrisSpawnRange                                            OFFSET(get<float>, {0x260, 4, 0, 0})
	CMember(class UClass*)                             DebrisPartClass                                             OFFSET(get<T>, {0x268, 8, 0, 0})
	DMember(int32_t)                                   DebrisPartsToSpawn                                          OFFSET(get<int32_t>, {0x270, 4, 0, 0})
	DMember(int32_t)                                   MaxSpawnLocationTries                                       OFFSET(get<int32_t>, {0x274, 4, 0, 0})
	CMember(class UClass*)                             TreasureClass                                               OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class ATreasureContainer*)                 TreasureInstance                                            OFFSET(get<T>, {0x298, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TreasureBeacon.SpawnDebreeParts
	// void SpawnDebreeParts();                                                                                                 // [0x1816d70] Native|Protected|BlueprintCallable|Const 
	// Function /Script/FSD.TreasureBeacon.ActivateTreasure
	// void ActivateTreasure();                                                                                                 // [0x1925c90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.TreasureWeight
/// Size: 0x0010 (0x000000 - 0x000010)
class FTreasureWeight : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(class UClass*)                             RewarderClass                                               OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.TreasureContainer
/// Size: 0x0070 (0x000220 - 0x000290)
class ATreasureContainer : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UOncePerPlayerUsableComponent*)      CollectUsable                                               OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UItemAquisitionSource*)              AquisitionSource                                            OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(TArray<class APlayerCharacter*>)           Collectors                                                  OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(class APlayerCharacter*)                   LastJoiner                                                  OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(TArray<FTreasureWeight>)                   PossibleRewarders                                           OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(class UTreasureRewarder*)                  TreasureRewarder                                            OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(bool)                                      PreventLatejoiners                                          OFFSET(get<bool>, {0x28A, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TreasureContainer.TestAwardTreasure
	// void TestAwardTreasure();                                                                                                // [0xbd29a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TreasureContainer.SetPreventFurtherLatejoiners
	// void SetPreventFurtherLatejoiners(bool prevent);                                                                         // [0x19270e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TreasureContainer.SetCanCollectTreasure
	// void SetCanCollectTreasure(bool canCollect);                                                                             // [0x1926ea0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TreasureContainer.OnRep_LastJoiner
	// void OnRep_LastJoiner();                                                                                                 // [0x1926c30] Final|Native|Protected 
	// Function /Script/FSD.TreasureContainer.OnRep_Collectors
	// void OnRep_Collectors();                                                                                                 // [0x1926c10] Final|Native|Protected 
	// Function /Script/FSD.TreasureContainer.OnPlayerLatejoined
	// void OnPlayerLatejoined(class APlayerCharacter* joiner);                                                                 // [0x1926b80] Final|Native|Public  
	// Function /Script/FSD.TreasureContainer.OnPlayerCollectedTreasure
	// void OnPlayerCollectedTreasure(class APlayerCharacter* collector, EInputKeys Key);                                       // [0x1926ab0] Final|Native|Protected 
	// Function /Script/FSD.TreasureContainer.OnLocalPlayerCollectedTreasure
	// void OnLocalPlayerCollectedTreasure(class APlayerCharacter* Player);                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TreasureContainer.OnDisableChestLocally
	// void OnDisableChestLocally();                                                                                            // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TreasureContainer.OnContainerActivated
	// void OnContainerActivated();                                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TreasureContainer.GetPreventFurtherLatejoiners
	// bool GetPreventFurtherLatejoiners();                                                                                     // [0x19260d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.LostPack
/// Size: 0x0000 (0x000220 - 0x000220)
class ALostPack : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/FSD.MasteryIconWidget
/// Size: 0x0000 (0x000260 - 0x000260)
class UMasteryIconWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:


	/// Functions
	// Function /Script/FSD.MasteryIconWidget.ReceiveUnlocked
	// void ReceiveUnlocked();                                                                                                  // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.MediaPlayerWidget
/// Size: 0x00B8 (0x000260 - 0x000318)
class UMediaPlayerWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	CMember(TWeakObjectPtr<class UMediaTexture*>)      SoftMediaTexture                                            OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundClass*>)        SoftMediaSoundClass                                         OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFileMediaSource*>)   SoftMediaSource                                             OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMediaTexture*>)      WeakMediaTexture                                            OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundClass*>)        WeakMediaSoundClass                                         OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMediaPlayer*>)       WeakMediaPlayer                                             OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFileMediaSource*>)   WeakMediaSource                                             OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(EMediaPlayerState)                         PlayerState                                                 OFFSET(get<T>, {0x308, 1, 0, 0})
	CMember(class UImage*)                             OutputImage                                                 OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.MediaPlayerWidget.Stop
	// void Stop();                                                                                                             // [0x1927170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MediaPlayerWidget.StateChanged__DelegateSignature
	// void StateChanged__DelegateSignature(class UMediaPlayerWidget* InPlayerWidget, EMediaPlayerState InState);               // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.MediaPlayerWidget.ReceiveStateChanged
	// void ReceiveStateChanged(EMediaPlayerState InState);                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.MediaPlayerWidget.PlaySource
	// void PlaySource(class UFileMediaSource* InSource);                                                                       // [0x1926d80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MediaPlayerWidget.PlaySoftSource
	// void PlaySoftSource(TWeakObjectPtr<UFileMediaSource*> InSource);                                                         // [0x1926c70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MediaPlayerWidget.Play
	// void Play();                                                                                                             // [0x1926c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MediaPlayerWidget.Callback_MediaPlayResumed
	// void Callback_MediaPlayResumed();                                                                                        // [0x1925de0] Final|Native|Protected 
	// Function /Script/FSD.MediaPlayerWidget.Callback_MediaOpened
	// void Callback_MediaOpened(FString URL);                                                                                  // [0x1925cf0] Final|Native|Protected 
	// Function /Script/FSD.MediaPlayerWidget.Callback_MediaEndReached
	// void Callback_MediaEndReached();                                                                                         // [0x1925cd0] Final|Native|Protected 
	// Function /Script/FSD.MediaPlayerWidget.Callback_MediaClosed
	// void Callback_MediaClosed();                                                                                             // [0x1925cb0] Final|Native|Protected 
};

/// Class /Script/FSD.MediaSoundController
/// Size: 0x0010 (0x000820 - 0x000830)
class UMediaSoundController : public UMediaSoundComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2096;

public:


	/// Functions
	// Function /Script/FSD.MediaSoundController.StopMediaSoundController
	// void StopMediaSoundController(class APlayerController* InPlayerController, class UMediaTexture* InTexture);              // [0x1927210] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.MediaSoundController.StopAllMediaSoundControllers
	// void StopAllMediaSoundControllers(class APlayerController* InPlayerController);                                          // [0x1927190] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.MeleeAttackComponent
/// Size: 0x0070 (0x0000F8 - 0x000168)
class UMeleeAttackComponent : public UDamageAttackComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(TArray<class UAnimMontage*>)               Montages                                                    OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(class UTargetValidator*)                   HitValidator                                                OFFSET(get<T>, {0x108, 8, 0, 0})
	DMember(bool)                                      CenterOnTarget                                              OFFSET(get<bool>, {0x118, 1, 0, 0})
	CMember(TArray<class UAttackEffect*>)              AttackEffects                                               OFFSET(get<T>, {0x120, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAttackStartedEvent                                        OFFSET(getStruct<T>, {0x138, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDamageAppliedEvent                                        OFFSET(getStruct<T>, {0x148, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAttackEndedEvent                                          OFFSET(getStruct<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MeleeAttackComponent.SelectMontage
	// class UAnimMontage* SelectMontage();                                                                                     // [0x1926e70] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/FSD.MeleeAttackComponent.OnPerformAttack
	// void OnPerformAttack(FName Name);                                                                                        // [0x1926a20] Final|Native|Protected 
	// Function /Script/FSD.MeleeAttackComponent.OnMontageEnded
	// void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);                                                      // [0x1926880] Final|Native|Protected 
};

/// Class /Script/FSD.MeshCarveAttackEffect
/// Size: 0x0038 (0x000028 - 0x000060)
class UMeshCarveAttackEffect : public UAttackEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(float)                                     ExpensiveNoise                                              OFFSET(get<float>, {0x28, 4, 0, 0})
	CMember(class UStaticMesh*)                        CarveMesh                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     CarverOffset                                                OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FRotator)                                  CarverOrientation                                           OFFSET(getStruct<T>, {0x3C, 12, 0, 0})
	SMember(FVector)                                   CarverScale                                                 OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FName)                                     Socket                                                      OFFSET(getStruct<T>, {0x54, 8, 0, 0})
};

/// Class /Script/FSD.MessagingSubSystem
/// Size: 0x12D8 (0x000030 - 0x001308)
class UMessagingSubSystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 4872;

public:
	SMember(FMulticastInlineDelegate)                  OnNewMessage                                                OFFSET(getStruct<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MessagingSubSystem.MessageSenderIdAsString
	// FString MessageSenderIdAsString(FFSDChatMessage& Msg);                                                                   // [0x1926710] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MessagingSubSystem.MessageAge
	// float MessageAge(FFSDChatMessage& Msg);                                                                                  // [0x19265e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.MessagingSubSystem.LatestMessages
	// void LatestMessages(int32_t Num, bool resetAge, TArray<FFSDChatMessage>& OutMessages);                                   // [0x1926430] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.MessagingSubSystem.ClearMessages
	// void ClearMessages();                                                                                                    // [0x1925e00] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.ProgressShout
/// Size: 0x0010 (0x000000 - 0x000010)
class FProgressShout : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     ProgressStamp                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   Shout                                                       OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.MeteorDefenseEvent
/// Size: 0x0048 (0x000368 - 0x0003B0)
class AMeteorDefenseEvent : public AGameEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
	CMember(TArray<FProgressShout>)                    ProgressShouts                                              OFFSET(get<T>, {0x368, 16, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x398, 4, 0, 0})
	DMember(float)                                     InitialProgress                                             OFFSET(get<float>, {0x39C, 4, 0, 0})
	CMember(class APlagueMeteor*)                      meteor                                                      OFFSET(get<T>, {0x3A0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.MeteorDefenseEvent.SetMeteor
	// void SetMeteor(class APlagueMeteor* meteor);                                                                             // [0x1927050] Final|BlueprintAuthorityOnly|Native|Private|BlueprintCallable 
	// Function /Script/FSD.MeteorDefenseEvent.GetMeteor
	// class APlagueMeteor* GetMeteor();                                                                                        // [0x19260b0] Final|Native|Private|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PlagueMeteorSpawner
/// Size: 0x0078 (0x0002B0 - 0x000328)
class APlagueMeteorSpawner : public ADebrisLocationFinder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 808;

public:
	SMember(FMulticastInlineDelegate)                  OnSpawnedMeteor                                             OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             MeteorActorClass                                            OFFSET(get<T>, {0x2C8, 40, 0, 0})
	SMember(FRandRange)                                EscortSpawnFromMuleRange                                    OFFSET(getStruct<T>, {0x2F0, 8, 0, 0})
	DMember(float)                                     EscortSpawnFromImportantRange                               OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     EscortMinimum2DSpawnDistFromPath                            OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     EscortMinimumZSpawnDistFromPath                             OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     DropLocationHeightOffset                                    OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     ImportantLocationRange                                      OFFSET(get<float>, {0x308, 4, 0, 0})
	CMember(class UClass*)                             MeteorActorClassLoaded                                      OFFSET(get<T>, {0x310, 8, 0, 0})
};

/// Class /Script/FSD.DropRockCrackerPodsSpawner
/// Size: 0x0060 (0x0002B0 - 0x000310)
class ADropRockCrackerPodsSpawner : public ADebrisLocationFinder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class APlagueMeteor*)                      meteor                                                      OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             MeteorActorClass                                            OFFSET(get<T>, {0x2B8, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             RockCrackerIndicationClass                                  OFFSET(get<T>, {0x2E0, 40, 0, 0})
};

/// Class /Script/FSD.MicroMissileLauncher
/// Size: 0x00D8 (0x000780 - 0x000858)
class AMicroMissileLauncher : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2136;

public:
	SMember(FMulticastInlineDelegate)                  OnStartCharging                                             OFFSET(getStruct<T>, {0x780, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndCharging                                               OFFSET(getStruct<T>, {0x790, 16, 0, 0})
	CMember(TArray<FName>)                             MuzzleNames                                                 OFFSET(get<T>, {0x7A0, 16, 0, 0})
	DMember(float)                                     ChargeTime                                                  OFFSET(get<float>, {0x7B0, 4, 0, 0})
	DMember(int32_t)                                   ChargeMaxFireCount                                          OFFSET(get<int32_t>, {0x7B4, 4, 0, 0})
	DMember(float)                                     BuckShotDelay                                               OFFSET(get<float>, {0x7B8, 4, 0, 0})
	DMember(float)                                     ShotDirectionHorizontalDegreeOffset                         OFFSET(get<float>, {0x7BC, 4, 0, 0})
	DMember(float)                                     ShotDirectionVerticleDegreeOffset                           OFFSET(get<float>, {0x7C0, 4, 0, 0})
	CMember(EMicroMissileLauncherFireMode)             FireMode                                                    OFFSET(get<T>, {0x7C4, 1, 0, 0})
	DMember(bool)                                      DisableHomingOnRelease                                      OFFSET(get<bool>, {0x7C5, 1, 0, 0})
	DMember(float)                                     MaxHomingProjectiles                                        OFFSET(get<float>, {0x7C8, 4, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Fire_Empty_Mag                                          OFFSET(get<T>, {0x7D0, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Fire_Level2                                             OFFSET(get<T>, {0x7D8, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Fire_Level2_Empty_Mag                                   OFFSET(get<T>, {0x7E0, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Fire_Level3                                             OFFSET(get<T>, {0x7E8, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Fire_Level3_Empty_Mag                                   OFFSET(get<T>, {0x7F0, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Mag_Feed                                                OFFSET(get<T>, {0x7F8, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_Mag_And_Barrel_Feed                                     OFFSET(get<T>, {0x800, 8, 0, 0})
	CMember(class USoundCue*)                          ChargedMissileFireSound                                     OFFSET(get<T>, {0x808, 8, 0, 0})
	DMember(bool)                                      TriggerClusterActive                                        OFFSET(get<bool>, {0x810, 1, 0, 0})
	DMember(float)                                     TriggerClusterHoldDuration                                  OFFSET(get<float>, {0x814, 4, 0, 0})
	SMember(FText)                                     TriggerClusterHoldDescription                               OFFSET(getStruct<T>, {0x820, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.MicroMissileLauncher.Server_SetIsCharging
	// void Server_SetIsCharging(bool isCharging);                                                                              // [0x17ef280] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.MicroMissileLauncher.Server_SetChargedMissile
	// void Server_SetChargedMissile(bool isCharged);                                                                           // [0x17f4ab0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.MicroMissileLauncher.OnTriggerCluster
	// void OnTriggerCluster();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.MicroMissileLauncher.IsNextShotBuckShot
	// bool IsNextShotBuckShot();                                                                                               // [0x1926310] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MicroMissileLauncher.GetFirstActiveProjectileOfType
	// class AProjectile* GetFirstActiveProjectileOfType(class UClass* Class);                                                  // [0x1925fb0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MicroMissileLauncher.GetChargeCurrentFireCount
	// int32_t GetChargeCurrentFireCount();                                                                                     // [0x1925f80] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MicroMissileLauncher.GetActiveProjectiles
	// void GetActiveProjectiles(TArray<AProjectile*>& ActiveProjectiles);                                                      // [0x1925e20] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MicroMissileLauncher.ChargingDelegate__DelegateSignature
	// void ChargingDelegate__DelegateSignature();                                                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.MicroMissileLauncher.All_SetChargedMissile
	// void All_SetChargedMissile(bool isCharged);                                                                              // [0x17f3a30] Net|NetReliableNative|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.MicroMissileLauncherAnimInstance
/// Size: 0x0068 (0x0002B8 - 0x000320)
class UMicroMissileLauncherAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(class AMicroMissileLauncher*)              Weapon                                                      OFFSET(get<T>, {0x310, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.MicroMissileLauncherAnimInstance.OnMontageEndedInternal
	// void OnMontageEndedInternal(class UAnimMontage* Montage, bool interrupted);                                              // [0x1926950] Final|Native|Protected 
};

/// Struct /Script/FSD.MicrowaveLense
/// Size: 0x0014 (0x000000 - 0x000014)
class FMicrowaveLense : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(float)                                     ShotRadiusMultiplier                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     ShotBonusDamageModifier                                     OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     HeatModifier                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     RateOfFireModifier                                          OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.MicrowaveWeapon
/// Size: 0x0240 (0x000780 - 0x0009C0)
class AMicrowaveWeapon : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2496;

public:
	CMember(class UDamageComponent*)                   DamageComp                                                  OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(class UCapsuleHitscanComponent*)           CapsuleHitscanComp                                          OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(class UFirstPersonNiagaraComponent*)       FP_MuzzleParticle                                           OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  TP_MuzzleParticle                                           OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(class UDamageComponent*)                   ExplodingTargetsDamageComponent                             OFFSET(get<T>, {0x7A0, 8, 0, 0})
	CMember(class UDamageComponent*)                   RadiantSuperheaterHeat                                      OFFSET(get<T>, {0x7A8, 8, 0, 0})
	CMember(class UDamageComponent*)                   RadiantSuperheaterFrostShock                                OFFSET(get<T>, {0x7B0, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLenseActivated                                            OFFSET(getStruct<T>, {0x7B8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLenseDeactivated                                          OFFSET(getStruct<T>, {0x7C8, 16, 0, 0})
	DMember(float)                                     SwitchTime                                                  OFFSET(get<float>, {0x7E8, 4, 0, 0})
	CMember(class UClass*)                             GammaContaminationSTE                                       OFFSET(get<T>, {0x7F8, 8, 0, 0})
	CMember(class UClass*)                             GammaContaminationZoneSTE                                   OFFSET(get<T>, {0x800, 8, 0, 0})
	DMember(float)                                     GammaContaminationRange                                     OFFSET(get<float>, {0x808, 4, 0, 0})
	CMember(class UClass*)                             ExplodableBlisterClass                                      OFFSET(get<T>, {0x840, 8, 0, 0})
	DMember(float)                                     BlisteringNecrosisChance                                    OFFSET(get<float>, {0x848, 4, 0, 0})
	DMember(float)                                     MinTimeBetweenBlisteringNecrosis                            OFFSET(get<float>, {0x84C, 4, 0, 0})
	CMember(class UClass*)                             FireEffect                                                  OFFSET(get<T>, {0x858, 8, 0, 0})
	CMember(TArray<class UClass*>)                     NeuroEffects                                                OFFSET(get<T>, {0x860, 16, 0, 0})
	CMember(class UClass*)                             NeuroToSpread                                               OFFSET(get<T>, {0x870, 8, 0, 0})
	CMember(class UClass*)                             SlowEffect                                                  OFFSET(get<T>, {0x878, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ImpactParticleEnemies                                       OFFSET(get<T>, {0x880, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     ImpactParticleTerrain                                       OFFSET(get<T>, {0x888, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     NeuroSpreadParticles                                        OFFSET(get<T>, {0x890, 8, 0, 0})
	CMember(class UParticleSystem*)                    P_NeuroSpreadParticles                                      OFFSET(get<T>, {0x898, 8, 0, 0})
	CMember(class USoundCue*)                          NeuroSpreadSound                                            OFFSET(get<T>, {0x8A0, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     MicrowaveMuzzle                                             OFFSET(get<T>, {0x8A8, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  MuzzleComp                                                  OFFSET(get<T>, {0x8B0, 8, 0, 0})
	CMember(TSet<AActor*>)                             ActorsInCapsule                                             OFFSET(get<T>, {0x8B8, 80, 0, 0})
	DMember(float)                                     WeaponRange                                                 OFFSET(get<float>, {0x908, 4, 0, 0})
	DMember(float)                                     ShotWidth                                                   OFFSET(get<float>, {0x90C, 4, 0, 0})
	DMember(float)                                     DamageInterval                                              OFFSET(get<float>, {0x910, 4, 0, 0})
	DMember(float)                                     KilledTargetsExplosionChance                                OFFSET(get<float>, {0x91C, 4, 0, 0})
	CMember(class UNiagaraSystem*)                     ExplosionOCSystem                                           OFFSET(get<T>, {0x920, 8, 0, 0})
	DMember(float)                                     NeuroSpreadRadius                                           OFFSET(get<float>, {0x934, 4, 0, 0})
	SMember(FMicrowaveLense)                           WideLense                                                   OFFSET(getStruct<T>, {0x93C, 20, 0, 0})
	SMember(FMicrowaveLense)                           FocusLense                                                  OFFSET(getStruct<T>, {0x950, 20, 0, 0})
	DMember(float)                                     TemperatureAmplification                                    OFFSET(get<float>, {0x968, 4, 0, 0})
	DMember(bool)                                      RadiantSuperheaterActive                                    OFFSET(get<bool>, {0x96C, 1, 0, 0})
	DMember(float)                                     RadiantSuperheaterFrostShockChance                          OFFSET(get<float>, {0x970, 4, 0, 0})
	DMember(float)                                     RadiantSuperheaterHeatShockChance                           OFFSET(get<float>, {0x974, 4, 0, 0})
	DMember(float)                                     RadiantSuperheaterMinColdDamage                             OFFSET(get<float>, {0x984, 4, 0, 0})
	DMember(float)                                     RadiantSuperheaterMinHeatDamage                             OFFSET(get<float>, {0x988, 4, 0, 0})
	DMember(float)                                     RadiantSuperheaterFrostTransferFactor                       OFFSET(get<float>, {0x98C, 4, 0, 0})
	DMember(float)                                     RadiantSuperheaterHeatTransferFactor                        OFFSET(get<float>, {0x990, 4, 0, 0})
	DMember(float)                                     ColdTempAmpMultiplier                                       OFFSET(get<float>, {0x994, 4, 0, 0})
	CMember(TWeakObjectPtr<class UEnemyTemperatureComponent*>) RadiantSuperheaterTarget                            OFFSET(get<T>, {0x998, 8, 0, 0})
	DMember(bool)                                      SlowOnHit                                                   OFFSET(get<bool>, {0x9A0, 1, 0, 0})
	CMember(class UClass*)                             HeatSink                                                    OFFSET(get<T>, {0x9A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.MicrowaveWeapon.UpdateMuzzleAnim
	// void UpdateMuzzleAnim(bool InIsFiring);                                                                                  // [0x192d0a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MicrowaveWeapon.SpawnExplosiveBoil
	// void SpawnExplosiveBoil(class UPrimitiveComponent* Target, FMultiHitscanHit& Hit);                                       // [0x192cfc0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.MicrowaveWeapon.ShowBoilerRayExplosion_Server
	// void ShowBoilerRayExplosion_Server(FVector_NetQuantize Location, FRotator Rotation);                                     // [0x1875460] Net|Native|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.MicrowaveWeapon.ShowBoilerRayExplosion
	// void ShowBoilerRayExplosion(FVector_NetQuantize Location, FRotator Rotation);                                            // [0x1875660] Net|Native|Event|NetMulticast|Protected|HasDefaults 
	// Function /Script/FSD.MicrowaveWeapon.Server_SetLensePower
	// void Server_SetLensePower(float lensepower);                                                                             // [0x192cdf0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.MicrowaveWeapon.OnTargetKilled
	// void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);                       // [0x192cce0] Final|Native|Protected 
	// Function /Script/FSD.MicrowaveWeapon.OnShowHitEffect
	// void OnShowHitEffect(FVector& ImpactPoint, FVector& ImpactNormal, bool hitEnemy);                                        // [0x192cbb0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.MicrowaveWeapon.OnServerHitscanHit
	// void OnServerHitscanHit(FMultiHitScanHits& Hits);                                                                        // [0x192cae0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.MicrowaveWeapon.OnRadiantSuperHeaterAoe
	// void OnRadiantSuperHeaterAoe();                                                                                          // [0x192caa0] Final|Native|Protected 
	// Function /Script/FSD.MicrowaveWeapon.OnPushedDamageEffect
	// void OnPushedDamageEffect(class UHealthComponentBase* healthComp);                                                       // [0x192ca10] Final|Native|Protected 
	// Function /Script/FSD.MicrowaveWeapon.HeatUpdated
	// void HeatUpdated(float SmoothedTemperature);                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.MicrowaveWeapon.EndCharacterOverheatAnim
	// void EndCharacterOverheatAnim();                                                                                         // [0x192ab60] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.MicrowaveWeapon.All_ShowNeuroSpread
	// void All_ShowNeuroSpread(FVector Location);                                                                              // [0x192aa20] Net|Native|Event|NetMulticast|Protected|HasDefaults 
};

/// Class /Script/FSD.Boil
/// Size: 0x0018 (0x000220 - 0x000238)
class ABoil : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(TArray<class UFSDPhysicalMaterial*>)       PhysicalMaterials                                           OFFSET(get<T>, {0x220, 16, 0, 0})
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0x230, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.Boil.OnRep_MaterialIndex
	// void OnRep_MaterialIndex();                                                                                              // [0x192cac0] Final|Native|Protected 
};

/// Struct /Script/FSD.MilestoneTier
/// Size: 0x0008 (0x000000 - 0x000008)
class FMilestoneTier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     CompletionCount                                             OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PerkPoints                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Class /Script/FSD.MilestoneAsset
/// Size: 0x00A8 (0x000030 - 0x0000D8)
class UMilestoneAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FMulticastInlineDelegate)                  OnMilestoneClaimed                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMilestoneReached                                          OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         LargeImage                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	SMember(FText)                                     FormattedTitle                                              OFFSET(getStruct<T>, {0x88, 24, 0, 0})
	DMember(int32_t)                                   FormattedValueOffset                                        OFFSET(get<int32_t>, {0xA0, 4, 0, 0})
	DMember(bool)                                      CountValueAsTotal                                           OFFSET(get<bool>, {0xA4, 1, 0, 0})
	CMember(class UMissionStat*)                       TrackingStat                                                OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 TrackingCharacterID                                         OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(TArray<FMilestoneTier>)                    Tiers                                                       OFFSET(get<T>, {0xB8, 16, 0, 0})
	DMember(int32_t)                                   LastTierReached                                             OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	DMember(bool)                                      bPendingMilestoneReached                                    OFFSET(get<bool>, {0xCC, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MilestoneAsset.SortMilestonesByProgress
	// TArray<UMilestoneAsset*> SortMilestonesByProgress(class UObject* WorldContext, TArray<UMilestoneAsset*>& Milestones);    // [0x192ce80] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.MilestoneAsset.OnMissionStatChanged
	// void OnMissionStatChanged(class UObject* WorldContext, class UMissionStat* Stat, float Value);                           // [0x192c8f0] Final|Native|Protected 
	// Function /Script/FSD.MilestoneAsset.IsCompleted
	// bool IsCompleted(class UObject* WorldContext);                                                                           // [0x192c6b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MilestoneAsset.IsClaimable
	// bool IsClaimable(class UObject* WorldContext);                                                                           // [0x192c610] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MilestoneAsset.GetTitleForTier
	// FText GetTitleForTier(int32_t Tier);                                                                                     // [0x192c270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MilestoneAsset.GetTitle
	// FText GetTitle(class UObject* WorldContext);                                                                             // [0x192c170] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MilestoneAsset.GetNextPerkPointsReward
	// int32_t GetNextPerkPointsReward(class UObject* WorldContext);                                                            // [0x192bf60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MilestoneAsset.GetCurrentProgress
	// void GetCurrentProgress(class UObject* WorldContext, int32_t& Tier, float& Progress, float& CurrentCount, float& TargetCount); // [0x192b370] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MilestoneAsset.GetClaimedTier
	// int32_t GetClaimedTier(class UObject* WorldContext);                                                                     // [0x192b2d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MilestoneAsset.GetClaimedProgress
	// bool GetClaimedProgress(class UObject* WorldContext, int32_t& Tier, float& Progress, float& CurrentCount, float& TargetCount); // [0x192b0d0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MilestoneAsset.GetCategoryIcon
	// class UTexture2D* GetCategoryIcon();                                                                                     // [0x192b0a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MilestoneAsset.ClearPendingMilestoneReached
	// void ClearPendingMilestoneReached();                                                                                     // [0x192ab40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.MilestoneAsset.ClaimNextTier
	// int32_t ClaimNextTier(class UObject* WorldContext);                                                                      // [0x192aaa0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.MineralTradeData
/// Size: 0x0010 (0x000030 - 0x000040)
class UMineralTradeData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FText>)                             MineralTradeTickerTexts                                     OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FSD.SoftMinersManualDescription
/// Size: 0x0080 (0x000000 - 0x000080)
class FSoftMinersManualDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FText)                                     Headline                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     RichDescription                                             OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         ImageFront                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         ImageBackground                                             OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.MinersManualData
/// Size: 0x0080 (0x000030 - 0x0000B0)
class UMinersManualData : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FSoftMinersManualDescription)              Description                                                 OFFSET(getStruct<T>, {0x30, 128, 0, 0})


	/// Functions
	// Function /Script/FSD.MinersManualData.GetText
	// void GetText(FText& Headline, FText& richText);                                                                          // [0x192c000] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManualData.GetFrontImage
	// class UTexture2D* GetFrontImage();                                                                                       // [0x192bb20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManualData.GetBackgroundImage
	// class UTexture2D* GetBackgroundImage();                                                                                  // [0x192ae30] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.LoreScreenMasterWidget
/// Size: 0x0078 (0x000260 - 0x0002D8)
class ULoreScreenMasterWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	SMember(FText)                                     PageName                                                    OFFSET(getStruct<T>, {0x260, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SolidImage                                                  OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         TransparentImage                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0x2C8, 16, 0, 0})
};

/// Struct /Script/FSD.SoftIconWithColor
/// Size: 0x0038 (0x000000 - 0x000038)
class FSoftIconWithColor : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TWeakObjectPtr<class UTexture2D*>)         Icon                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              Tint                                                        OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FSD.DamageTypeDescription
/// Size: 0x0078 (0x000000 - 0x000078)
class FDamageTypeDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(EDamageType)                               Type                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     RichDescription                                             OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FSoftIconWithColor)                        Icon                                                        OFFSET(getStruct<T>, {0x38, 56, 0, 0})
	DMember(float)                                     IconScale                                                   OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Struct /Script/FSD.SoftMissionStepDescription
/// Size: 0x0058 (0x000000 - 0x000058)
class FSoftMissionStepDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FText)                                     Headline                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     RichDescription                                             OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Image                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FSD.MissionTypeDescription
/// Size: 0x0028 (0x000000 - 0x000028)
class FMissionTypeDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FText)                                     InfoHeadline                                                OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(TArray<FSoftMissionStepDescription>)       Steps                                                       OFFSET(get<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FSD.BiomeFeatures
/// Size: 0x0010 (0x000000 - 0x000010)
class FBiomeFeatures : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMinersManualData*)                  Descriptions                                                OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.MinersManual
/// Size: 0x0170 (0x000030 - 0x0001A0)
class UMinersManual : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TArray<TSoftObjectPtr<UClass*>>)           BasicsPages                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TMap<int32_t, FText>)                      BasicsPageHeaders                                           OFFSET(get<T>, {0x40, 80, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           CombatPages                                                 OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ExtraMissionPages                                           OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           ResourcePages                                               OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<class UEnemyMinersManualData*>)     Enemies                                                     OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UBiome*>>)           BiomeReferences                                             OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<UMissionTemplate*>>) MissionReferences                                           OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<FDamageTypeDescription>)            DamageTypeInfo                                              OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TMap<int32_t, FMissionTypeDescription>)    MissionDescriptions                                         OFFSET(get<T>, {0x100, 80, 0, 0})
	CMember(TMap<int32_t, FBiomeFeatures>)             BiomeFeatureDescriptions                                    OFFSET(get<T>, {0x150, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.MinersManual.IsObjectInMinersManual
	// bool IsObjectInMinersManual(class UObject* WorldContext, class UObject* Object);                                         // [0x192c820] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.IsMissionUnlocked
	// bool IsMissionUnlocked(class UObject* WorldContext, class UMissionTemplate* mission);                                    // [0x192c750] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.IsBiomeUnlocked
	// bool IsBiomeUnlocked(class UObject* WorldContext, class UBiome* Biome);                                                  // [0x192c540] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetUnlockedCreatureLore
	// TArray<FText> GetUnlockedCreatureLore(class UObject* WorldContext, class UEnemyMinersManualData* enemy, float& completePercentage); // [0x192c360] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetMissions
	// TArray<TWeakObjectPtr<UMissionTemplate*>> GetMissions();                                                                 // [0x192be00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MinersManual.GetMissionInfo
	// void GetMissionInfo(int32_t MissionTypeIndex, FText& InfoHeadline, FText& InfoDescription, TArray<FMissionStepDescription>& Steps); // [0x192bb50] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetEnemyKillCount
	// int32_t GetEnemyKillCount(class UObject* WorldContext, FGuid EnemyID);                                                   // [0x192ba30] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetEnemiesSorted
	// TArray<UEnemyMinersManualData*> GetEnemiesSorted();                                                                      // [0x192b9b0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetEnemies
	// TArray<UEnemyMinersManualData*> GetEnemies();                                                                            // [0x192b8f0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetDamageTypeDescriptions
	// void GetDamageTypeDescriptions(TArray<EDamageType> damageTypes, TArray<FDamageTypeDescription>& Icon);                   // [0x192b6f0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetDamageTypeDescription
	// void GetDamageTypeDescription(EDamageType damageTypes, FDamageTypeDescription& Icon);                                    // [0x192b550] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetBiomes
	// TArray<TWeakObjectPtr<UBiome*>> GetBiomes();                                                                             // [0x192af40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MinersManual.GetBiomeFeatures
	// TArray<UMinersManualData*> GetBiomeFeatures(int32_t BiomeIndex);                                                         // [0x192ae60] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MinersManual.GetAllDamageTypeDescriptions
	// TArray<FDamageTypeDescription> GetAllDamageTypeDescriptions();                                                           // [0x192ab80] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.MissionChallenge
/// Size: 0x0018 (0x000058 - 0x000070)
class UMissionChallenge : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<class UMutator*>)                   Mutators                                                    OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(class UClass*)                             MissionBP                                                   OFFSET(get<T>, {0x68, 8, 0, 0})
};

/// Class /Script/FSD.MissionComplexity
/// Size: 0x0030 (0x000030 - 0x000060)
class UMissionComplexity : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   NumberOfDots                                                OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Class /Script/FSD.MissionDuration
/// Size: 0x0030 (0x000030 - 0x000060)
class UMissionDuration : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   NumberOfDots                                                OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Class /Script/FSD.MissionFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UMissionFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.MissionFunctionLibrary.GetSeedString
	// FString GetSeedString(class UObject* WorldContextObject);                                                                // [0x1931ea0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.MissionFunctionLibrary.GetSeedsFromString
	// bool GetSeedsFromString(FString seedString, FGlobalMissionSeed& outGlobalSeed, int32_t& outMissionSeed, int32_t& outPlsSeed); // [0x1931f70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.MissionFunctionLibrary.GetGlobalMissionBaseTime
	// FDateTime GetGlobalMissionBaseTime();                                                                                    // [0x19318d0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.MissionSetKey
/// Size: 0x0008 (0x000000 - 0x000008)
class FMissionSetKey : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/FSD.GeneratedMissionGroup
/// Size: 0x0010 (0x000000 - 0x000010)
class FGeneratedMissionGroup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UGeneratedMission*>)          AvailableMissions                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.MissionGenerationManager
/// Size: 0x0050 (0x000030 - 0x000080)
class UMissionGenerationManager : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<FMissionSetKey, FGeneratedMissionGroup>) AllMissionGroups                                         OFFSET(get<T>, {0x30, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.MissionGenerationManager.GetMissions
	// TArray<UGeneratedMission*> GetMissions(FGlobalMissionSeed& Seed);                                                        // [0x1931c30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionGenerationManager.GetMissionFromSeeds
	// class UGeneratedMission* GetMissionFromSeeds(FGlobalMissionSeed& GlobalSeed, int32_t MissionSeed);                       // [0x1931af0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionGenerationManager.GetAvailableMissions
	// TArray<UGeneratedMission*> GetAvailableMissions();                                                                       // [0x1931830] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.MissionManager
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UMissionManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<class URunningMissionBP*>)          RunningBlueprints                                           OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MissionManager.OnMatchStarted
	// void OnMatchStarted();                                                                                                   // [0x1932390] Final|Native|Protected 
};

/// Class /Script/FSD.MissionModeManager
/// Size: 0x0000 (0x000028 - 0x000028)
class UMissionModeManager : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.MissionModeManager.StartDive
	// void StartDive();                                                                                                        // [0x19323d0] BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MissionModeManager.ReInitialize
	// void ReInitialize();                                                                                                     // [0x19323b0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.MissionModeManager.IsLastStage
	// bool IsLastStage();                                                                                                      // [0x1932360] BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.IsActive
	// bool IsActive();                                                                                                         // [0x18f08b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.GetStage
	// int32_t GetStage();                                                                                                      // [0x1932150] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.GetPerObjectiveXP
	// void GetPerObjectiveXP(int32_t& perPrimary, int32_t& perSecondary);                                                      // [0x1931dc0] Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.GetNumberOfStages
	// int32_t GetNumberOfStages();                                                                                             // [0x1931cf0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.GetMissionModeCheatUI
	// TSoftObjectPtr<UClass*> GetMissionModeCheatUI();                                                                         // [0x1931be0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.MissionModeManager.GetMissionCompleteScreen
	// TSoftObjectPtr<UClass*> GetMissionCompleteScreen(bool missionSuccessful);                                                // [0x1931a30] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.GetMissionBarWidget
	// TSoftObjectPtr<UClass*> GetMissionBarWidget();                                                                           // [0x19319e0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.GetHazardBonus
	// float GetHazardBonus(class UObject* WorldContextObject, class UGeneratedMission* mission);                               // [0x1931910] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.GetActiveMission
	// class UGeneratedMission* GetActiveMission();                                                                             // [0x1931800] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.GetActiveDiveName
	// FText GetActiveDiveName();                                                                                               // [0x1931760] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionModeManager.CompleteCurrentSingleMission
	// bool CompleteCurrentSingleMission();                                                                                     // [0x1931730] Native|Public|BlueprintCallable 
	// Function /Script/FSD.MissionModeManager.AreAllSelectedClassesQualified
	// bool AreAllSelectedClassesQualified();                                                                                   // [0x1931700] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.MissionMutator
/// Size: 0x0060 (0x000030 - 0x000090)
class UMissionMutator : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UClass*)                             MissionBP                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           BannedObjectives                                            OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UMutator*>)                   Mutators                                                    OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	SMember(FText)                                     RichDescription                                             OFFSET(getStruct<T>, {0x70, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/FSD.Mutator
/// Size: 0x0000 (0x000030 - 0x000030)
class UMutator : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.VeinMutator
/// Size: 0x0010 (0x000030 - 0x000040)
class UVeinMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UVeinResourceData*)                  VeinResource                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     modifier                                                    OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/FSD.CraftingMaterialMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class UCraftingMaterialMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     modifier                                                    OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.ResourceMutator
/// Size: 0x0018 (0x000030 - 0x000048)
class UResourceMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<class UResourceData*>)              Resources                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(float)                                     modifier                                                    OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/FSD.SupplyPodMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class USupplyPodMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     CostModifier                                                OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.PlayerShieldsMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class UPlayerShieldsMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     ShieldModifier                                              OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.EnemyRarityMutator
/// Size: 0x0018 (0x000030 - 0x000048)
class UEnemyRarityMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     RarityMultiplier                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     SpawnAmountMultiplier                                       OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     DifficultyMultiplier                                        OFFSET(get<float>, {0x38, 4, 0, 0})
	CMember(class UEnemyDescriptor*)                   EnemyDescriptor                                             OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.ForceStationaryEncounterMutator
/// Size: 0x0010 (0x000030 - 0x000040)
class UForceStationaryEncounterMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UEnemyGroupDescriptor*)              EnemyGroup                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FIRandRange)                               GroupSize                                                   OFFSET(getStruct<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.EncounterOverrideMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class UEncounterOverrideMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     MobileEncounterScale                                        OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     StationaryEncounterScale                                    OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Class /Script/FSD.NoHeadlightMutator
/// Size: 0x0000 (0x000030 - 0x000030)
class UNoHeadlightMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.DifficultyMutator
/// Size: 0x0048 (0x000030 - 0x000078)
class UDifficultyMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	DMember(float)                                     ExtraLargeEnemyDamageResistanceMultiplier                   OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     EnemyDamageResistanceMultiplier                             OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     SmallEnemyDamageResistanceMultiplier                        OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     EnemyDamageModifierMultiplier                               OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     EnemyCountModifierMultiplier                                OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   EnemyPoolSize                                               OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   EnemyDisruptivePoolSize                                     OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(float)                                     VetaranChanceModifier                                       OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     WeakpointDamageMultiplier                                   OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     ProjectileSpeedModifier                                     OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     AttackCooldownModifier                                      OFFSET(get<float>, {0x5C, 4, 0, 0})
	DMember(float)                                     SpeedModifier                                               OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     MaxActiveEnemiesModifier                                    OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     MaxActiveSwarmersModifier                                   OFFSET(get<float>, {0x68, 4, 0, 0})
	DMember(float)                                     FriendlyFireModifier                                        OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(float)                                     EnvironmentalDamageModifier                                 OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Class /Script/FSD.ResourceVeinMutator
/// Size: 0x0018 (0x000030 - 0x000048)
class UResourceVeinMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     VeinLengthMultiplier                                        OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     RangeMultiplier                                             OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     NoiseRangeMultiplier                                        OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/FSD.RewardMutator
/// Size: 0x0020 (0x000030 - 0x000050)
class URewardMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FText)                                     RewardText                                                  OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	DMember(float)                                     XPMultiplier                                                OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     CreditMultiplier                                            OFFSET(get<float>, {0x4C, 4, 0, 0})
};

/// Class /Script/FSD.CommunicationMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class UCommunicationMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     PitchMultiplier                                             OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.ExplosiveEnemiesMutator
/// Size: 0x0000 (0x000030 - 0x000030)
class UExplosiveEnemiesMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.InfestedEnemiesMutator
/// Size: 0x0010 (0x000030 - 0x000040)
class UInfestedEnemiesMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UParticleSystem*>)            SpawnEffects                                                OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.InfestedEnemiesMutator.GetParticleSystem
	// class UParticleSystem* GetParticleSystem(class AFSDPawn* enemy);                                                         // [0x1931d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.NoOxygenMutator
/// Size: 0x0058 (0x000030 - 0x000088)
class UNoOxygenMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(float)                                     OxygenReplenishmentRate                                     OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             OxygenComponent                                             OFFSET(get<T>, {0x38, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ReplenishOxygenEffect                                       OFFSET(get<T>, {0x60, 40, 0, 0})
};

/// Class /Script/FSD.PlayerDamageTakenMutator
/// Size: 0x0058 (0x000030 - 0x000088)
class UPlayerDamageTakenMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	DMember(float)                                     DamageMultiplier                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(TSet<UDamageClass*>)                       SkipDamageClasses                                           OFFSET(get<T>, {0x38, 80, 0, 0})
};

/// Class /Script/FSD.PlayerStatMutator
/// Size: 0x0010 (0x000030 - 0x000040)
class UPlayerStatMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UPawnStat*)                          Stat                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     StatValue                                                   OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/FSD.CaveItemsMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class UCaveItemsMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             Item                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.DebrisActorMutator
/// Size: 0x0028 (0x000030 - 0x000058)
class UDebrisActorMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TSoftObjectPtr<class UClass*>)             DebrisActor                                                 OFFSET(get<T>, {0x30, 40, 0, 0})
};

/// Class /Script/FSD.EliteEnemiesMutator
/// Size: 0x0010 (0x000030 - 0x000040)
class UEliteEnemiesMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     SpawnChanceModifier                                         OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   MaxElites                                                   OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(float)                                     EliteCooldown                                               OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/FSD.MaxAmmoMutator
/// Size: 0x0018 (0x000030 - 0x000048)
class UMaxAmmoMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<EItemCategory>)                     ApplyToItems                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(float)                                     MaxAmmoMultiplier                                           OFFSET(get<float>, {0x40, 4, 0, 0})
};

/// Class /Script/FSD.RestrictItemCategoriesMutator
/// Size: 0x0010 (0x000030 - 0x000040)
class URestrictItemCategoriesMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<EItemCategory>)                     RestrictedCategories                                        OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.SharedHealthMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class USharedHealthMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     TotalHealthPool                                             OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.RandomSecondaryMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class URandomSecondaryMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      MustBeCompleted                                             OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Class /Script/FSD.ForcedSecondaryMutator
/// Size: 0x0008 (0x000030 - 0x000038)
class UForcedSecondaryMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             ForceSecondaryObjective                                     OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.CompleteDarkNessMutator
/// Size: 0x0020 (0x000030 - 0x000050)
class UCompleteDarkNessMutator : public UMutator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     FogDensity                                                  OFFSET(get<float>, {0x30, 4, 0, 0})
	SMember(FLinearColor)                              FogInscatteringColor                                        OFFSET(getStruct<T>, {0x34, 16, 0, 0})
	DMember(float)                                     FogMaxOpacity                                               OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     StartDistance                                               OFFSET(get<float>, {0x48, 4, 0, 0})
};

/// Class /Script/FSD.MissionPlayerAndCharacterWidget
/// Size: 0x0040 (0x000260 - 0x0002A0)
class UMissionPlayerAndCharacterWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:


	/// Functions
	// Function /Script/FSD.MissionPlayerAndCharacterWidget.UpdateValues
	// void UpdateValues(int32_t PlayerRank, int32_t PlayerStars, int32_t CharacterLevel, float CharacterProgress);             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.MissionPlayerAndCharacterWidget.StepCounter
	// void StepCounter(float TimeScale, bool& CounterFinished);                                                                // [0x19323f0] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.MissionPlayerAndCharacterWidget.PingPlayerRank
	// void PingPlayerRank();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.MissionPlayerAndCharacterWidget.PingCharacterLevel
	// void PingCharacterLevel(int32_t Level, int32_t Stars);                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.MissionPlayerAndCharacterWidget.InitCounter
	// void InitCounter(FPlayerProgress PlayerProgressStart, FCharacterProgress CharacterProgressStart, FPlayerProgress PlayerProgressFinish, FCharacterProgress CharacterProgressFinish); // [0x19321d0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.MissionResultInfo
/// Size: 0x0080 (0x000028 - 0x0000A8)
class UMissionResultInfo : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	DMember(bool)                                      HasInfo                                                     OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(float)                                     MissionTime                                                 OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     MissionTotalHazBonus                                        OFFSET(get<float>, {0x30, 4, 0, 0})
	SMember(FText)                                     MissionHazName                                              OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	DMember(float)                                     MissionHazBonus                                             OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     HazPlusBonus                                                OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     ComplexityBonus                                             OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   ComplexityDots                                              OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	DMember(float)                                     LenghtBonus                                                 OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(int32_t)                                   LenghtDots                                                  OFFSET(get<int32_t>, {0x64, 4, 0, 0})
	CMember(TArray<FText>)                             WarningTitles                                               OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<class UTexture2D*>)                 WarningIcons                                                OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(TArray<float>)                             WarningBonusses                                             OFFSET(get<T>, {0x88, 16, 0, 0})
	DMember(float)                                     TotalCreditsSum                                             OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     TotalXPSum                                                  OFFSET(get<float>, {0x9C, 4, 0, 0})
	DMember(bool)                                      wasSuccess                                                  OFFSET(get<bool>, {0xA0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MissionResultInfo.GetWarningBonusSum
	// float GetWarningBonusSum();                                                                                              // [0x1932180] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.MissionHazardSetting
/// Size: 0x0020 (0x000000 - 0x000020)
class FMissionHazardSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Class /Script/FSD.FSDMissionSettings
/// Size: 0x00B8 (0x000038 - 0x0000F0)
class UFSDMissionSettings : public UDeveloperSettings
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FSoftObjectPath)                           DefaultRoomGenerator                                        OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	CMember(TMap<int32_t, FMissionHazardSetting>)      MissionComplexitySettings                                   OFFSET(get<T>, {0x50, 80, 0, 0})
	CMember(TMap<int32_t, FMissionHazardSetting>)      MissionDurationSettings                                     OFFSET(get<T>, {0xA0, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.FSDMissionSettings.GetTotalHazPlusBonus
	// float GetTotalHazPlusBonus(FGameDifficulty& Difficulty);                                                                 // [0x1936750] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDMissionSettings.GetTotalHazardBonus
	// float GetTotalHazardBonus(class UObject* WorldContextObject, class UGeneratedMission* mission, FGameDifficulty& Difficulty); // [0x1936800] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.MissionStatCategory
/// Size: 0x0020 (0x000030 - 0x000050)
class UMissionStatCategory : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.MissionStat
/// Size: 0x0050 (0x000030 - 0x000080)
class UMissionStat : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FMulticastInlineDelegate)                  OnCountChanged                                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	CMember(class UMissionStatCategory*)               Category                                                    OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(class UFSDAchievement*)                    StatAchievement                                             OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(EMissionStatType)                          MissionStatType                                             OFFSET(get<T>, {0x78, 1, 0, 0})
	DMember(bool)                                      DoNotShowInMissionStatView                                  OFFSET(get<bool>, {0x79, 1, 0, 0})
	DMember(bool)                                      ShowAllValuesCombined                                       OFFSET(get<bool>, {0x7A, 1, 0, 0})
	DMember(bool)                                      ShowHighestValue                                            OFFSET(get<bool>, {0x7B, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MissionStat.StatCountChanged__DelegateSignature
	// void StatCountChanged__DelegateSignature(class UObject* WorldContext, class UMissionStat* MissionStat, float Value);     // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.MissionStat.SetStatValue
	// float SetStatValue(class UObject* WorldContext, class APlayerCharacter* Character, float amount);                        // [0x1937030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MissionStat.MissionStatToText
	// FText MissionStatToText(EMissionStatType StatType, float Value);                                                         // [0x1936c20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.Increment
	// void Increment(class UObject* WorldContext, class UMissionStat* Stat, class UClass* CharacterClass, float amount);       // [0x1936a30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.MissionStat.GetStatMinCount
	// float GetStatMinCount(class UObject* WorldContext);                                                                      // [0x19366b0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetStatMaxCount
	// float GetStatMaxCount(class UObject* WorldContext);                                                                      // [0x1936610] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetStatCountTotalAsText
	// FText GetStatCountTotalAsText(class UObject* WorldContext);                                                              // [0x1936510] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetStatCountTotal
	// float GetStatCountTotal(class UObject* WorldContext);                                                                    // [0x1936470] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetStatCountPct
	// float GetStatCountPct(class UObject* WorldContext, class UClass* CharacterClass);                                        // [0x19363a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetStatCountAsText
	// FText GetStatCountAsText(class UObject* WorldContext, class UPlayerCharacterID* characterID);                            // [0x1936270] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetStatCount
	// float GetStatCount(class UObject* WorldContext, class UPlayerCharacterID* characterID);                                  // [0x19361a0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetSourceTitle
	// FString GetSourceTitle();                                                                                                // [0x1936120] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetLowestStatCountAsText
	// FText GetLowestStatCountAsText(class UObject* WorldContext);                                                             // [0x1935c30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetIcon
	// class UTexture2D* GetIcon();                                                                                             // [0x1935c00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionStat.GetHighestStatCountAsText
	// FText GetHighestStatCountAsText(class UObject* WorldContext);                                                            // [0x1935b00] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionStat.GetCategoryTitle
	// FText GetCategoryTitle();                                                                                                // [0x1935a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.MissionStatsCollector
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UMissionStatsCollector : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0xB8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.MissionStatsCollector.OnResourceIncremented
	// void OnResourceIncremented(class UCappedResource* Resource, float amount);                                               // [0x1936d70] Final|Native|Protected 
};

/// Class /Script/FSD.GlobalMissionParameters
/// Size: 0x0010 (0x000030 - 0x000040)
class UGlobalMissionParameters : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FResourceSpawner>)                  DefaultResources                                            OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.MissionTemplate
/// Size: 0x01C0 (0x000058 - 0x000218)
class UMissionTemplate : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	CMember(TArray<FResourceSpawner>)                  ResourceDistribution                                        OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(class UClass*)                             PrimaryObjective                                            OFFSET(get<T>, {0x68, 8, 0, 0})
	CMember(TArray<class UClass*>)                     SecondaryObjectives                                         OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<class UClass*>)                     DeepDiveObjectives                                          OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<class UMutator*>)                   BaseMutators                                                OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             pls                                                         OFFSET(get<T>, {0xA0, 40, 0, 0})
	CMember(TWeakObjectPtr<class UWorld*>)             Level                                                       OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             GameMode                                                    OFFSET(get<T>, {0xF0, 40, 0, 0})
	CMember(TArray<class UMissionComplexity*>)         LockedComplexities                                          OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<class UMissionDuration*>)           LockedDurations                                             OFFSET(get<T>, {0x128, 16, 0, 0})
	SMember(FText)                                     MissionName                                                 OFFSET(getStruct<T>, {0x138, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         MissionImageLarge                                           OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         MissionButtonImage                                          OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class UTexture2D*)                         MissionIcon                                                 OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UTexture2D*)                         MissionIconSmall                                            OFFSET(get<T>, {0x1A8, 8, 0, 0})
	SMember(FLinearColor)                              MissionColor                                                OFFSET(getStruct<T>, {0x1B0, 16, 0, 0})
	DMember(int32_t)                                   MissionTypeIndex                                            OFFSET(get<int32_t>, {0x1C0, 4, 0, 0})
	SMember(FString)                                   MissionTypeAnalyticsIndex                                   OFFSET(getStruct<T>, {0x1C8, 16, 0, 0})
	CMember(TArray<class UClass*>)                     DNA                                                         OFFSET(get<T>, {0x1D8, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           DebrisComponents                                            OFFSET(get<T>, {0x1E8, 16, 0, 0})
	DMember(bool)                                      MustBeUnlocked                                              OFFSET(get<bool>, {0x1F8, 1, 0, 0})
	DMember(float)                                     RoomEncounerScale                                           OFFSET(get<float>, {0x1FC, 4, 0, 0})
	DMember(float)                                     StationaryEnemyScale                                        OFFSET(get<float>, {0x200, 4, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           Tutorials                                                   OFFSET(get<T>, {0x208, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MissionTemplate.Receive_SetMissionParameters
	// void Receive_SetMissionParameters(class UGeneratedMission* mission, FRandomStream& Random);                              // [0x1d6f900] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.MissionTemplate.IsLocked
	// bool IsLocked(class UFSDSaveGame* SaveGame);                                                                             // [0x1936b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionTemplate.GetValidDurations
	// TArray<UMissionDuration*> GetValidDurations();                                                                           // [0x19369b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionTemplate.GetValidComplexities
	// TArray<UMissionComplexity*> GetValidComplexities();                                                                      // [0x1936930] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionTemplate.GetSoftReferenceToPLS
	// TSoftObjectPtr<UClass*> GetSoftReferenceToPLS();                                                                         // [0x19360d0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionTemplate.GetPrimaryObjectiveIconFromAsset
	// FObjectiveMissionIcon GetPrimaryObjectiveIconFromAsset(class UMissionTemplate* mission, bool getSmallVersion);           // [0x1935e70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.MissionTemplate.GetPrimaryObjectiveIcon
	// FObjectiveMissionIcon GetPrimaryObjectiveIcon(bool getSmallVersion);                                                     // [0x1935dc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionTemplate.GetPLS
	// class UClass* GetPLS();                                                                                                  // [0x1935d80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionTemplate.GetObjectiveClass
	// class UClass* GetObjectiveClass();                                                                                       // [0x183c1a0] Final|Native|Public  
	// Function /Script/FSD.MissionTemplate.GetMissionTypeIndex
	// int32_t GetMissionTypeIndex();                                                                                           // [0x1935d60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionTemplate.GetMissionImageLarge
	// class UTexture2D* GetMissionImageLarge();                                                                                // [0x1800c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionTemplate.GetMissionButtonImage
	// class UTexture2D* GetMissionButtonImage();                                                                               // [0x1935d30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MissionTemplate.GenerateMission
	// class UGeneratedMission* GenerateMission(class UObject* WorldContextObject, class UBiome* Biome, int32_t Seed, FGlobalMissionSeed& GlobalSeed, class UMissionComplexity* limitComplexity, class UMissionDuration* limitDuration, class UMissionMutator* Mutator, TArray<UMissionWarning*> Warnings, class UMissionChallenge* Challenge, TArray<UClass*> forceSecondary, class UGemResourceData* forcedGem); // [0x1935630] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.MissionNameBank
/// Size: 0x0020 (0x000030 - 0x000050)
class UMissionNameBank : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FText>)                             FirstNames                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FText>)                             LastNames                                                   OFFSET(get<T>, {0x40, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MissionNameBank.GetRandomGeneratedNames
	// TArray<FText> GetRandomGeneratedNames(FRandomStream& Random, int32_t Count);                                             // [0x1935f50] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.MissionWarning
/// Size: 0x00C8 (0x000030 - 0x0000F8)
class UMissionWarning : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TSoftObjectPtr<class UClass*>)             MissionBP                                                   OFFSET(get<T>, {0x30, 40, 0, 0})
	DMember(bool)                                      IsOptionalExtraObjectiveMandatory                           OFFSET(get<bool>, {0x58, 1, 0, 0})
	DMember(bool)                                      OptionalExtraObjectiveIsRandom                              OFFSET(get<bool>, {0x59, 1, 0, 0})
	CMember(class UClass*)                             OptionalExtraObjective                                      OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           BannedObjectives                                            OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<class UMissionMutator*>)            BannedMutators                                              OFFSET(get<T>, {0x78, 16, 0, 0})
	DMember(bool)                                      DoubleWarning                                               OFFSET(get<bool>, {0x88, 1, 0, 0})
	CMember(TArray<class UMutator*>)                   Mutators                                                    OFFSET(get<T>, {0x90, 16, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0xA0, 24, 0, 0})
	SMember(FText)                                     RichDescription                                             OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class UTexture2D*)                         CampaignIcon                                                OFFSET(get<T>, {0xD8, 8, 0, 0})
	DMember(float)                                     HazardBonus                                                 OFFSET(get<float>, {0xE0, 4, 0, 0})
	CMember(class UMissionStat*)                       MissionCompletedStat                                        OFFSET(get<T>, {0xE8, 8, 0, 0})
	DMember(float)                                     CampaignWeight                                              OFFSET(get<float>, {0xF0, 4, 0, 0})
};

/// Class /Script/FSD.MOD_MakeEliteEnemy
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UMOD_MakeEliteEnemy : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FSD.MULE
/// Size: 0x0018 (0x000390 - 0x0003A8)
class AMULE : public ADeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	CMember(class UHealthComponent*)                   HealthComponent                                             OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class USimpleObjectInfoComponent*)         ObjectInfo                                                  OFFSET(get<T>, {0x398, 8, 0, 0})
	DMember(bool)                                      IsDown                                                      OFFSET(get<bool>, {0x3A0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MULE.SetIsDown
	// void SetIsDown(bool IsDown);                                                                                             // [0x1936ed0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MULE.SetControlledByDropShip
	// void SetControlledByDropShip(bool Control);                                                                              // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.MULE.OnRep_IsDown
	// void OnRep_IsDown();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.Molly
/// Size: 0x0040 (0x0003A8 - 0x0003E8)
class AMolly : public AMULE
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	SMember(FMulticastInlineDelegate)                  OnCalledByChanged                                           OFFSET(getStruct<T>, {0x3A8, 16, 0, 0})
	CMember(class UResourceBank*)                      ResourceBank                                                OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UOutlineComponent*)                  OutlineComponent                                            OFFSET(get<T>, {0x3C0, 8, 0, 0})
	DMember(float)                                     ShowButtonDelay                                             OFFSET(get<float>, {0x3C8, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReachedDropShip                                           OFFSET(getStruct<T>, {0x3D0, 16, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   CalledBy                                                    OFFSET(get<T>, {0x3E0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.Molly.SetOpenForDeposit
	// void SetOpenForDeposit(bool Open);                                                                                       // [0x1936fa0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Molly.SetGotoDropShip
	// void SetGotoDropShip(FVector& Location);                                                                                 // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.Molly.SetCalledBy
	// void SetCalledBy(class APlayerCharacter* InPlayer);                                                                      // [0x1936e40] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Molly.OnRep_CalledBy
	// void OnRep_CalledBy();                                                                                                   // [0x1936d50] Final|Native|Protected 
	// Function /Script/FSD.Molly.GetCallingShout
	// class UDialogDataAsset* GetCallingShout();                                                                               // [0x1935a20] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FSD.Molly.EnableButton
	// void EnableButton();                                                                                                     // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.Molly.CalledByDelegate__DelegateSignature
	// void CalledByDelegate__DelegateSignature(class APlayerCharacter* InPlayer);                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.Molly.AddTrayEffect
	// void AddTrayEffect(class UNiagaraSystem* Effect, int32_t numberOfTraysAffected);                                         // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.MiniMule
/// Size: 0x0010 (0x0003A8 - 0x0003B8)
class AMiniMule : public AMULE
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	CMember(TArray<class AGem*>)                       LostLegs                                                    OFFSET(get<T>, {0x3A8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MiniMule.SetLegsVisibleOnScanner
	// void SetLegsVisibleOnScanner();                                                                                          // [0x1936f80] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.MiniMule.OnLegsSetVisible
	// void OnLegsSetVisible();                                                                                                 // [0x1d6f900] BlueprintAuthorityOnly|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.MiniMule.FindLegsInLevelSortedByDistance
	// TArray<AGem*> FindLegsInLevelSortedByDistance();                                                                         // [0x19355b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MiniMule.CheatRepair
	// void CheatRepair();                                                                                                      // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.MorkiteSeedNut
/// Size: 0x0028 (0x000220 - 0x000248)
class AMorkiteSeedNut : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x228, 32, 0, 0})
};

/// Class /Script/FSD.MotionAudioController
/// Size: 0x0058 (0x000868 - 0x0008C0)
class UMotionAudioController : public UFSDAudioComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2240;

public:
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x868, 4, 0, 0})
	DMember(float)                                     IncreseSpeed                                                OFFSET(get<float>, {0x86C, 4, 0, 0})
	DMember(float)                                     DecaySpeed                                                  OFFSET(get<float>, {0x870, 4, 0, 0})
	DMember(bool)                                      DebugText                                                   OFFSET(get<bool>, {0x874, 1, 0, 0})
	DMember(bool)                                      Clamp                                                       OFFSET(get<bool>, {0x875, 1, 0, 0})
	DMember(bool)                                      Interp                                                      OFFSET(get<bool>, {0x876, 1, 0, 0})
	DMember(float)                                     AccelerationThreshold                                       OFFSET(get<float>, {0x878, 4, 0, 0})
	DMember(float)                                     SpeedThreshold                                              OFFSET(get<float>, {0x888, 4, 0, 0})
	DMember(float)                                     FadeInTime                                                  OFFSET(get<float>, {0x88C, 4, 0, 0})
	DMember(float)                                     FadeOutTime                                                 OFFSET(get<float>, {0x890, 4, 0, 0})
	DMember(bool)                                      AutoPlayOnSpeedThreshold                                    OFFSET(get<bool>, {0x894, 1, 0, 0})
};

/// Class /Script/FSD.MountedGun
/// Size: 0x0028 (0x000220 - 0x000248)
class AMountedGun : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UWeaponFireComponent*)               WeaponFire                                                  OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UGunLogicComponent*)                 GunLogic                                                    OFFSET(get<T>, {0x240, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.MountedGun.Server_Test
	// void Server_Test();                                                                                                      // [0x1816d70] Net|NetReliableNative|Event|Public|NetServer 
};

/// Class /Script/FSD.GunLogicComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class UGunLogicComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	CMember(class UWeaponFireComponent*)               WeaponFire                                                  OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UMeshComponent*)                     Mesh                                                        OFFSET(get<T>, {0xB8, 8, 0, 0})
	DMember(float)                                     RateOfFire                                                  OFFSET(get<float>, {0xC0, 4, 0, 0})
	CMember(class UParticleSystem*)                    MuzzleParticles                                             OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UParticleSystem*)                    TracerParticles                                             OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(class USoundCue*)                          FireSound                                                   OFFSET(get<T>, {0xD8, 8, 0, 0})
	DMember(float)                                     MinTracerDistance                                           OFFSET(get<float>, {0xE0, 4, 0, 0})
	DMember(float)                                     TracerSpeed                                                 OFFSET(get<float>, {0xE4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.GunLogicComponent.SetMesh
	// void SetMesh(class UMeshComponent* Mesh);                                                                                // [0x193af40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.GunLogicComponent.OnWeaponFireEnded
	// void OnWeaponFireEnded();                                                                                                // [0xbd29a0] Final|Native|Protected 
	// Function /Script/FSD.GunLogicComponent.OnWeaponFired
	// void OnWeaponFired(FVector& Location);                                                                                   // [0x193ac80] Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.MouseCursorWidget
/// Size: 0x0008 (0x000280 - 0x000288)
class UMouseCursorWidget : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	CMember(EFSDInputSource)                           TargetInput                                                 OFFSET(get<T>, {0x280, 1, 0, 0})
	DMember(bool)                                      bIsHovering                                                 OFFSET(get<bool>, {0x281, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MouseCursorWidget.OnUnhover
	// void OnUnhover();                                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.MouseCursorWidget.OnInputSourceChanged
	// void OnInputSourceChanged(EFSDInputSource Source);                                                                       // [0x193abe0] Final|Native|Protected 
	// Function /Script/FSD.MouseCursorWidget.OnHover
	// void OnHover();                                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.MoustacheVanityItem
/// Size: 0x00A8 (0x000130 - 0x0001D8)
class UMoustacheVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AnimInstance                                                OFFSET(get<T>, {0x158, 40, 0, 0})
	DMember(bool)                                      RequiresSlimArmor                                           OFFSET(get<bool>, {0x180, 1, 0, 0})
	CMember(TSet<UTagVanityMoustaches*>)               VanityTags                                                  OFFSET(get<T>, {0x188, 80, 0, 0})
};

/// Class /Script/FSD.MultiHitscanComponent
/// Size: 0x00C0 (0x000258 - 0x000318)
class UMultiHitscanComponent : public UHitscanBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 792;

public:
	SMember(FMulticastInlineDelegate)                  OnHit                                                       OFFSET(getStruct<T>, {0x258, 16, 0, 0})
	DMember(int32_t)                                   BulletsPerShot                                              OFFSET(get<int32_t>, {0x268, 4, 0, 0})
	DMember(float)                                     GeneralImpactAudioVolume                                    OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(bool)                                      CountMultiHits                                              OFFSET(get<bool>, {0x270, 1, 0, 0})
	CMember(TArray<class AActor*>)                     DamagedActorCache                                           OFFSET(get<T>, {0x278, 16, 0, 0})
	SMember(FMultiHitScanHits)                         Hits                                                        OFFSET(getStruct<T>, {0x288, 48, 0, 0})
	CMember(TArray<class AActor*>)                     ActorsHit                                                   OFFSET(get<T>, {0x2B8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MultiHitscanComponent.Server_RegisterHit
	// void Server_RegisterHit(FMultiHitScanHits hitResults);                                                                   // [0x1805e50] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.MultiHitscanComponent.All_ShowHit
	// void All_ShowHit(FMultiHitScanHits hitResults);                                                                          // [0x18049e0] Net|Native|Event|NetMulticast|Protected 
};

/// Struct /Script/FSD.ProjectileSpawnData
/// Size: 0x0028 (0x000000 - 0x000028)
class FProjectileSpawnData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FFloatInterval)                            HorizontalAngleOffset                                       OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FFloatInterval)                            VerticalAngleOffset                                         OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FFloatInterval)                            Delay                                                       OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	DMember(bool)                                      IsBallistic                                                 OFFSET(get<bool>, {0x20, 1, 0, 0})
};

/// Class /Script/FSD.MultiprojectileSpawner
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UMultiprojectileSpawner : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(TArray<FProjectileSpawnData>)              ProjectileData                                              OFFSET(get<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      ProjectilesIgnoreEachOther                                  OFFSET(get<bool>, {0xC0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.MultiprojectileSpawner.GetIsFiring
	// bool GetIsFiring();                                                                                                      // [0x17ee9a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.MultiprojectileSpawner.Fire
	// void Fire(FVector& Velocity, FVector& Origin);                                                                           // [0x193a340] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.MultiprojectileSpawner.FindMultiProjectileSpawner
	// class UMultiprojectileSpawner* FindMultiProjectileSpawner(class AActor* Actor, class UDataAsset* RangedAttack);          // [0x193a270] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.MultiTargeter
/// Size: 0x0000 (0x000028 - 0x000028)
class UMultiTargeter : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.MusicLibrary
/// Size: 0x0018 (0x000030 - 0x000048)
class UMusicLibrary : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<TWeakObjectPtr<USoundCue*>>)        MusicCues                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(class UMusicCategory*)                     Category                                                    OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.MusicCategory
/// Size: 0x0008 (0x000030 - 0x000038)
class UMusicCategory : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     FadeDuration                                                OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Struct /Script/FSD.MusicHandle
/// Size: 0x0004 (0x000000 - 0x000004)
class FMusicHandle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(int32_t)                                   MusicHandle                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
};

/// Struct /Script/FSD.ActiveMusicItem
/// Size: 0x0020 (0x000000 - 0x000020)
class FActiveMusicItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class USoundBase*)                         Sound                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     StartingTime                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     FadeDuration                                                OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(bool)                                      Looping                                                     OFFSET(get<bool>, {0x10, 1, 0, 0})
	SMember(FMusicHandle)                              Handle                                                      OFFSET(getStruct<T>, {0x14, 4, 0, 0})
	CMember(class UMusicCategory*)                     Category                                                    OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Class /Script/FSD.MusicReplicator
/// Size: 0x0018 (0x000220 - 0x000238)
class AMusicReplicator : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(TArray<FActiveMusicItem>)                  ActiveMusic                                                 OFFSET(get<T>, {0x220, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MusicReplicator.OnRep_ActiveMusic
	// void OnRep_ActiveMusic();                                                                                                // [0x193ac60] Final|Native|Protected 
};

/// Struct /Script/FSD.ActiveAudioItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FActiveAudioItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UAudioComponent*)                    Audio                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     FadeoutDuration                                             OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.MusicManager
/// Size: 0x0068 (0x000030 - 0x000098)
class UMusicManager : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(TMap<FMusicHandle, FActiveAudioItem>)      ActiveAudio                                                 OFFSET(get<T>, {0x40, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.MusicManager.StopHandle
	// void StopHandle(FMusicHandle Handle);                                                                                    // [0x193b420] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MusicManager.StopCategory
	// void StopCategory(class UMusicCategory* Category);                                                                       // [0x193b390] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MusicManager.SetIsPaused
	// void SetIsPaused(bool IsPaused);                                                                                         // [0x193aeb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MusicManager.PlayLibrary
	// FMusicHandle PlayLibrary(class UMusicLibrary* library, int32_t musicIndex);                                              // [0x193ade0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.MusicManager.Play
	// FMusicHandle Play(class USoundBase* Music, class UMusicCategory* Category);                                              // [0x193ad10] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.NeedleSprayer
/// Size: 0x00E0 (0x000220 - 0x000300)
class ANeedleSprayer : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 768;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             SKMesh                                                      OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UHitscanComponent*)                  FireComponent                                               OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UHitscanComponent*)                  OnSpawnedEffectComponent                                    OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UPointLightComponent*)               MuzzleFlashLight                                            OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  MuzzleFlashParticleSys                                      OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  ImpactParticleComponent                                     OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class USceneComponent*)                    ShotOriginPivot                                             OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UHitscanComponent*)                  HitscanComponent                                            OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UFSDAudioComponent*)                 SoundEnd                                                    OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UAnimMontage*)                       ReloadAnimation                                             OFFSET(get<T>, {0x278, 8, 0, 0})
	DMember(int32_t)                                   MaxRotations                                                OFFSET(get<int32_t>, {0x280, 4, 0, 0})
	DMember(int32_t)                                   LinesPerRotation                                            OFFSET(get<int32_t>, {0x284, 4, 0, 0})
	SMember(FVector2D)                                 ShotAngleFromTop                                            OFFSET(getStruct<T>, {0x288, 8, 0, 0})
	DMember(float)                                     DeployDelay                                                 OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     LifeTime                                                    OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     TimeBetweenRotations                                        OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     RearmTime                                                   OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     AvoidCloseOffset                                            OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     ShotOriginOffset                                            OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(int32_t)                                   MaxRearms                                                   OFFSET(get<int32_t>, {0x2A8, 4, 0, 0})
	DMember(bool)                                      PlayAnimationOnBeginPlay                                    OFFSET(get<bool>, {0x2B0, 1, 0, 0})
	DMember(bool)                                      PlayAnimationOnReload                                       OFFSET(get<bool>, {0x2B1, 1, 0, 0})
	DMember(bool)                                      DrawDebugLines                                              OFFSET(get<bool>, {0x2B2, 1, 0, 0})
	DMember(float)                                     DebugLinesDuration                                          OFFSET(get<float>, {0x2B4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.NeedleSprayer.OnSpinningChanged
	// void OnSpinningChanged(bool isSpinning);                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.NeedleSprayer.OnHit
	// void OnHit(FHitResult& Result, bool IsPenetrating);                                                                      // [0x193aab0] Final|Native|Public|HasOutParms 
};

/// Class /Script/FSD.NewsTextLists
/// Size: 0x0060 (0x000030 - 0x000090)
class UNewsTextLists : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TArray<FText>)                             Verb                                                        OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FText>)                             Person                                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FText>)                             Creature                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FText>)                             Resource                                                    OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<FText>)                             Minerals                                                    OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<FText>)                             MineralFactions                                             OFFSET(get<T>, {0x80, 16, 0, 0})
};

/// Class /Script/FSD.NewsTextHeadlines
/// Size: 0x0010 (0x000030 - 0x000040)
class UNewsTextHeadlines : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FText>)                             MineralTradeTicker                                          OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.NiagaraSpawnerAndCacheGenerator
/// Size: 0x0048 (0x000220 - 0x000268)
class ANiagaraSpawnerAndCacheGenerator : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(TArray<class UFXSystemAsset*>)             ToGenerate                                                  OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(TArray<class UFXSystemComponent*>)         Generating                                                  OFFSET(get<T>, {0x240, 16, 0, 0})
};

/// Class /Script/FSD.NoiseCarveAttackEffect
/// Size: 0x0020 (0x000028 - 0x000048)
class UNoiseCarveAttackEffect : public UAttackEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(float)                                     ExpensiveNoise                                              OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     CarveDiameterCM                                             OFFSET(get<float>, {0x2C, 4, 0, 0})
	DMember(float)                                     CarveNoiseCM                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     CarveBurnThicknessCM                                        OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     CarverOffset                                                OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FName)                                     Socket                                                      OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
};

/// Class /Script/FSD.NoiseFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UNoiseFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.NoiseFunctionLibrary.SphericalNoiseMovementComponent
	// void SphericalNoiseMovementComponent(class UObject* WorldContextObject, class USceneComponent* Component, FVector Center, float Radius, float Speed, float TimeOffset); // [0x193b1b0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.NoiseFunctionLibrary.SphericalNoiseMovementActor
	// void SphericalNoiseMovementActor(class UObject* WorldContextObject, class AActor* Actor, FVector Center, float Radius, float Speed, float TimeOffset); // [0x193afd0] Final|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.NoiseFunctionLibrary.NoiseSphere3D
	// FVector NoiseSphere3D(class UObject* WorldContextObject, float Time, float Radius);                                      // [0x193a9a0] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.NoiseFunctionLibrary.NoiseSphere2D
	// FVector2D NoiseSphere2D(class UObject* WorldContextObject, float Time, float Radius);                                    // [0x193a890] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.NoiseFunctionLibrary.Noise3D
	// float Noise3D(class UObject* WorldContextObject, float X, float Y, float Z);                                             // [0x193a670] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.NoiseFunctionLibrary.Noise2D
	// float Noise2D(class UObject* WorldContextObject, float X, float Y);                                                      // [0x193a570] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.NoiseFunctionLibrary.Noise
	// float Noise(class UObject* WorldContextObject, float X);                                                                 // [0x193a7c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.NoiseVisualizor
/// Size: 0x0040 (0x000220 - 0x000260)
class ANoiseVisualizor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	CMember(class UFloodFillSettings*)                 FloodFillSettings                                           OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(float)                                     FreqMultiplier                                              OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     AmplitudeMultiplier                                         OFFSET(get<float>, {0x234, 4, 0, 0})
	SMember(FVector)                                   NoiseSize                                                   OFFSET(getStruct<T>, {0x238, 12, 0, 0})
	DMember(float)                                     PointSize                                                   OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(float)                                     PostNoiseAmplitude                                          OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(int32_t)                                   Octaves                                                     OFFSET(get<int32_t>, {0x24C, 4, 0, 0})
	SMember(FVector)                                   Origin                                                      OFFSET(getStruct<T>, {0x250, 12, 0, 0})
	DMember(bool)                                      ShowNoise                                                   OFFSET(get<bool>, {0x25C, 1, 0, 0})
	DMember(bool)                                      ShowTerrainNoise                                            OFFSET(get<bool>, {0x25D, 1, 0, 0})
};

/// Class /Script/FSD.NoisyPathfinderComponent
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UNoisyPathfinderComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
};

/// Struct /Script/FSD.PathObstacle
/// Size: 0x0010 (0x000000 - 0x000010)
class FPathObstacle : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.NoisyPathfinderTest
/// Size: 0x0090 (0x000220 - 0x0002B0)
class ANoisyPathfinderTest : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	SMember(FVector)                                   Start                                                       OFFSET(getStruct<T>, {0x220, 12, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(getStruct<T>, {0x22C, 12, 0, 0})
	SMember(FVector)                                   StartDirection                                              OFFSET(getStruct<T>, {0x238, 12, 0, 0})
	SMember(FVector)                                   EndDirection                                                OFFSET(getStruct<T>, {0x244, 12, 0, 0})
	DMember(float)                                     DirectionDistance                                           OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     DirectionPenalty                                            OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     ZPenaltyPower                                               OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     ZPenaltyScale                                               OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     DistancePenaltyScale                                        OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     RandomPenaltyScale                                          OFFSET(get<float>, {0x264, 4, 0, 0})
	CMember(TArray<FPathObstacle>)                     Obstacles                                                   OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(class UTunnelSegmentSetting*)              TunnelSettings                                              OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class UTunnelParameters*)                  TunnelParameters                                            OFFSET(get<T>, {0x280, 8, 0, 0})
	DMember(int32_t)                                   StepSize                                                    OFFSET(get<int32_t>, {0x288, 4, 0, 0})
	DMember(bool)                                      Realtime                                                    OFFSET(get<bool>, {0x28C, 1, 0, 0})
	DMember(bool)                                      CarvePath                                                   OFFSET(get<bool>, {0x28D, 1, 0, 0})
	DMember(bool)                                      CanDiagonal                                                 OFFSET(get<bool>, {0x28E, 1, 0, 0})
	CMember(class UFloodFillSettings*)                 FloodFillSettings                                           OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class ADeepCSGWorld*)                      CSGWorld                                                    OFFSET(get<T>, {0x298, 8, 0, 0})
};

/// Class /Script/FSD.NoMovementStateComponent
/// Size: 0x0008 (0x000100 - 0x000108)
class UNoMovementStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(bool)                                      DisableHeadLightOnEnter                                     OFFSET(get<bool>, {0x100, 1, 0, 0})
	DMember(bool)                                      EnableHeadLightOnExit                                       OFFSET(get<bool>, {0x101, 1, 0, 0})
};

/// Class /Script/FSD.AttachedStateComponent
/// Size: 0x0030 (0x000100 - 0x000130)
class UAttachedStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	DMember(bool)                                      DisableHeadLightOnEnter                                     OFFSET(get<bool>, {0x100, 1, 0, 0})
	DMember(bool)                                      EnableHeadLightOnExit                                       OFFSET(get<bool>, {0x101, 1, 0, 0})
	DMember(float)                                     MaxPitch                                                    OFFSET(get<float>, {0x104, 4, 0, 0})
};

/// Struct /Script/FSD.OxygenCallback
/// Size: 0x0018 (0x000000 - 0x000018)
class FOxygenCallback : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FDelegateProperty)                         Delegate                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.OxygenComponent
/// Size: 0x0060 (0x0000B0 - 0x000110)
class UOxygenComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FMulticastInlineDelegate)                  OnOxygenChanged                                             OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOxygenReplenishingEvent                                   OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(float)                                     OxygenGivenOnRevive                                         OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     CurrentOxygen                                               OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     OxygenReplinishmentRate                                     OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(int32_t)                                   NetworkedOxygen                                             OFFSET(get<int32_t>, {0xDC, 4, 0, 0})
	DMember(bool)                                      IsReplenishingOxygen                                        OFFSET(get<bool>, {0xE8, 1, 0, 0})
	DMember(float)                                     OxygenDepletionPersecond                                    OFFSET(get<float>, {0xEC, 4, 0, 0})
	CMember(TArray<FOxygenCallback>)                   Callbacks                                                   OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(class UClass*)                             NoOxygenStatusEffect                                        OFFSET(get<T>, {0x108, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.OxygenComponent.RegisterOxygenEvent
	// void RegisterOxygenEvent(FDelegateProperty OxygenCallback, float oxygenLevel, bool triggerOnOxygenLoss);                 // [0x1940040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OxygenComponent.OnRevived
	// void OnRevived();                                                                                                        // [0x193fe50] Final|Native|Protected 
	// Function /Script/FSD.OxygenComponent.OnRep_NetworkedOxygen
	// void OnRep_NetworkedOxygen(int32_t OldValue);                                                                            // [0x193fdc0] Final|Native|Protected 
	// Function /Script/FSD.OxygenComponent.OnRep_IsReplenishingOxygen
	// void OnRep_IsReplenishingOxygen();                                                                                       // [0x193fda0] Final|Native|Protected 
	// Function /Script/FSD.OxygenComponent.OnDeath
	// void OnDeath(class UHealthComponentBase* HealthComponent);                                                               // [0x193fcf0] Final|Native|Protected 
};

/// Class /Script/FSD.OxygenSourceComponent
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UOxygenSourceComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	DMember(float)                                     SourceRadius                                                OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     CenterOffset                                                OFFSET(get<float>, {0xB4, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOxygenActivationChanged                                   OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	CMember(class UNoOxygenMutator*)                   Mutator                                                     OFFSET(get<T>, {0xC8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.OxygenSourceComponent.OnTimerTick
	// void OnTimerTick();                                                                                                      // [0x193fe70] Final|Native|Protected 
	// Function /Script/FSD.OxygenSourceComponent.OnSourceActivated
	// void OnSourceActivated();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.CampaignNotification
/// Size: 0x0018 (0x000028 - 0x000040)
class UCampaignNotification : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UCampaign*)                          Campaign                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UCampaignMission*)                   mission                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   Progress                                                    OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(bool)                                      bIsCampaignCompleted                                        OFFSET(get<bool>, {0x3C, 1, 0, 0})
};

/// Class /Script/FSD.NotificationSubSystem
/// Size: 0x0038 (0x000030 - 0x000068)
class UNotificationSubSystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMulticastInlineDelegate)                  OnNewSpaceRigNotificationEvent                              OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCampaignNotification                                      OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(TArray<FSpaceRigNotification>)             SpaceRigNotifications                                       OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(class UCampaignNotification*)              CampaignNotification                                        OFFSET(get<T>, {0x60, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.NotificationSubSystem.GetNextSpaceRigNotification
	// bool GetNextSpaceRigNotification(FSpaceRigNotification& NextNotification);                                               // [0x193f3c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.NotificationSubSystem.ClearCampaignNotifications
	// void ClearCampaignNotifications();                                                                                       // [0x193eac0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.NotificationSubSystem.AddSpaceRigNotification
	// void AddSpaceRigNotification(FSpaceRigNotification NewNotification, FString ID, bool TriggerEvent);                      // [0x193e8b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PlayerCharacterID
/// Size: 0x0048 (0x000058 - 0x0000A0)
class UPlayerCharacterID : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FName)                                     AssetName                                                   OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             Character                                                   OFFSET(get<T>, {0x60, 40, 0, 0})
	SMember(FString)                                   AnalyticsID                                                 OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	CMember(class UPlayerCharacterData*)               CharacterData                                               OFFSET(get<T>, {0x98, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerCharacterID.GetCharacterData
	// class UPlayerCharacterData* GetCharacterData();                                                                          // [0x193ec60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterID.GetCharacterClass
	// class UClass* GetCharacterClass();                                                                                       // [0x193ec20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacterID.GetCharacter
	// class APlayerCharacter* GetCharacter();                                                                                  // [0x193ebf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ItemID
/// Size: 0x0038 (0x000058 - 0x000090)
class UItemID : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TSoftObjectPtr<class UClass*>)             Item                                                        OFFSET(get<T>, {0x58, 40, 0, 0})
	CMember(class UPlayerCharacterID*)                 ItemOwner                                                   OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(EItemCategory)                             ItemCategory                                                OFFSET(get<T>, {0x88, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemID.IsItemClassChildOf
	// bool IsItemClassChildOf(class UClass* InParentClass);                                                                    // [0x193fb60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemID.GetItemData
	// class UItemData* GetItemData();                                                                                          // [0x193f250] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemID.GetItemClass
	// class UClass* GetItemClass();                                                                                            // [0x193f210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemID.GetItemCategory
	// EItemCategory GetItemCategory();                                                                                         // [0x193f1f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemID.GetItem
	// class AItem* GetItem();                                                                                                  // [0x193eb00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemID.GetAllSkins
	// TArray<UItemSkin*> GetAllSkins();                                                                                        // [0x193eb70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemID.GetActorClass
	// class UClass* GetActorClass();                                                                                           // [0x193eb30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemID.GetActor
	// class AActor* GetActor();                                                                                                // [0x193eb00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.EnemyID
/// Size: 0x0000 (0x000058 - 0x000058)
class UEnemyID : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FSD.CategoryID
/// Size: 0x0018 (0x000030 - 0x000048)
class UCategoryID : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FSD.PlayerInfoComponent
/// Size: 0x0030 (0x0000B0 - 0x0000E0)
class UPlayerInfoComponent : public UObjectInfoComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	CMember(TWeakObjectPtr<class UDialogDataAsset*>)   LookAtShout                                                 OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0xD8, 8, 0, 0})
};

/// Class /Script/FSD.ActorContextWidget
/// Size: 0x0010 (0x000260 - 0x000270)
class UActorContextWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(class AActor*)                             ContextActor                                                OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UPrimitiveComponent*)                ContextPrimitive                                            OFFSET(get<T>, {0x268, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ActorContextWidget.Update
	// void Update(class UPrimitiveComponent* InContextPrimitive);                                                              // [0x19403d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ActorContextWidget.Show
	// void Show(class UPrimitiveComponent* InContextPrimitive);                                                                // [0x1940340] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ActorContextWidget.ReceiveUpdate
	// void ReceiveUpdate(class UPrimitiveComponent* InContextPrimitive);                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ActorContextWidget.ReceiveShow
	// void ReceiveShow(class UPrimitiveComponent* InContextPrimitive);                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ActorContextWidget.ReceiveContextActorChanged
	// void ReceiveContextActorChanged(class AActor* InContextActor);                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.ObjectivesManager
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UObjectivesManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FMulticastInlineDelegate)                  OnObjectivesCompleted                                       OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnObjectivesChanged                                         OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAllRequiredReturnObjectivesCompleted                      OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(class UObjective*)                         Objective                                                   OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(TArray<class UObjective*>)                 SecondaryObjectives                                         OFFSET(get<T>, {0xE8, 16, 0, 0})
	DMember(bool)                                      ObjectivesInitialized                                       OFFSET(get<bool>, {0xF8, 1, 0, 0})
	DMember(bool)                                      ObjectivesStarted                                           OFFSET(get<bool>, {0xF9, 1, 0, 0})
	DMember(bool)                                      bCheatObjectivesCompleted                                   OFFSET(get<bool>, {0xFA, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ObjectivesManager.OnObjectiveChanged
	// void OnObjectiveChanged(class UObjective* obj);                                                                          // [0x19431e0] Final|Native|Protected 
	// Function /Script/FSD.ObjectivesManager.HasRequiredSecondaryObjective
	// bool HasRequiredSecondaryObjective();                                                                                    // [0x1942fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectivesManager.GetSecondaryObjectives
	// TArray<UObjective*> GetSecondaryObjectives();                                                                            // [0x1942ee0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectivesManager.GetSecondaryObjective
	// class UObjective* GetSecondaryObjective();                                                                               // [0x1942ea0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectivesManager.GetPrimaryObjective
	// class UObjective* GetPrimaryObjective();                                                                                 // [0x180d2f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectivesManager.FindSecondaryObjective
	// class UObjective* FindSecondaryObjective(class UClass* objectiveClass);                                                  // [0x1942db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ObjectivesManager.ExitPodDescending
	// void ExitPodDescending();                                                                                                // [0x1942d90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ObjectivesManager.ExitPodArrived
	// void ExitPodArrived();                                                                                                   // [0x1942d70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ObjectivesManager.DropPodExited
	// void DropPodExited();                                                                                                    // [0x1942d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ObjectivesManager.AreRequiredSecondariesComplete
	// bool AreRequiredSecondariesComplete();                                                                                   // [0x1942ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ObjectiveWidget
/// Size: 0x0060 (0x000260 - 0x0002C0)
class UObjectiveWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FMulticastInlineDelegate)                  OnObjectiveWidgetUpdated                                    OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	CMember(class UObjective*)                         MissionObjective                                            OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(bool)                                      bIsPrimaryObjective                                         OFFSET(get<bool>, {0x278, 1, 0, 0})
	SMember(FText)                                     ObjectiveText                                               OFFSET(getStruct<T>, {0x280, 24, 0, 0})
	SMember(FText)                                     ObjectiveCounterText                                        OFFSET(getStruct<T>, {0x298, 24, 0, 0})
	CMember(class UTexture2D*)                         ObjectiveCounterIcon                                        OFFSET(get<T>, {0x2B0, 8, 0, 0})
	DMember(bool)                                      bObjectiveCompleted                                         OFFSET(get<bool>, {0x2B8, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ObjectiveWidget.SetText
	// void SetText(FText& InText, FText& InCounterText, class UTexture2D* InCounterIcon, bool InObjectiveCompleted);           // [0x19438c0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ObjectiveWidget.SetSimpleText
	// void SetSimpleText(FText& InText, bool InObjectiveCompleted);                                                            // [0x19437a0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ObjectiveWidget.SetObjective
	// void SetObjective(class UObjective* InObjective, bool InIsPrimaryObjective);                                             // [0x1943650] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ObjectiveWidget.ReceiveObjectiveUpdated
	// void ReceiveObjectiveUpdated();                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ObjectiveWidget.ReceiveObjectiveInitialized
	// void ReceiveObjectiveInitialized();                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ObjectiveWidget.OnObjectiveUpdated
	// void OnObjectiveUpdated(class UObjective* InObjective);                                                                  // [0x1943270] Final|Native|Protected 
	// Function /Script/FSD.ObjectiveWidget.ObjectiveWidgetDelegate__DelegateSignature
	// void ObjectiveWidgetDelegate__DelegateSignature(class UObjectiveWidget* InObjectiveWidget);                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.ObjectTemperatureComponent
/// Size: 0x0060 (0x0000D8 - 0x000138)
class UObjectTemperatureComponent : public UTemperatureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	SMember(FMulticastInlineDelegate)                  OnStartBurning                                              OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFrozenServer                                              OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	DMember(float)                                     TemperatureChangeScale                                      OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     BurnTemperature                                             OFFSET(get<float>, {0xFC, 4, 0, 0})
	DMember(float)                                     FreezeTemperature                                           OFFSET(get<float>, {0x100, 4, 0, 0})
	DMember(float)                                     DouseFireTemperature                                        OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(int32_t)                                   CoolingRate                                                 OFFSET(get<int32_t>, {0x108, 4, 0, 0})
	DMember(bool)                                      IsHeatsourceWhenOnFire                                      OFFSET(get<bool>, {0x10C, 1, 0, 0})
	DMember(float)                                     OnFireHeatRange                                             OFFSET(get<float>, {0x110, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ObjectTemperatureComponent.TimerCallback
	// void TimerCallback();                                                                                                    // [0x1943af0] Final|Native|Protected 
	// Function /Script/FSD.ObjectTemperatureComponent.OnDeath
	// void OnDeath(class UHealthComponentBase* HealthComponent);                                                               // [0x1943010] Final|Native|Protected 
};

/// Class /Script/FSD.OldZiplineSalvage
/// Size: 0x0018 (0x000220 - 0x000238)
class AOldZiplineSalvage : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class UClass*)                             ZiplineProjectileClass                                      OFFSET(get<T>, {0x220, 8, 0, 0})
	SMember(FVector)                                   RelativeDestinationLocation                                 OFFSET(getStruct<T>, {0x228, 12, 0, 0})


	/// Functions
	// Function /Script/FSD.OldZiplineSalvage.OnMatchStarted
	// void OnMatchStarted();                                                                                                   // [0x19431c0] Final|Native|Protected 
};

/// Class /Script/FSD.OptionalObjectiveWidget
/// Size: 0x0010 (0x000260 - 0x000270)
class UOptionalObjectiveWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FMulticastInlineDelegate)                  OnWidgetUpdated                                             OFFSET(getStruct<T>, {0x260, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.OptionalObjectiveWidget.SignalWidgetUpdated
	// void SignalWidgetUpdated();                                                                                              // [0x1943ad0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OptionalObjectiveWidget.SetObjective
	// void SetObjective(class UObjective* obj);                                                                                // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.OptionalObjectiveWidget.OptionalObjectiveWidgetDelegate__DelegateSignature
	// void OptionalObjectiveWidgetDelegate__DelegateSignature(class UOptionalObjectiveWidget* InOptionalObjectiveWidget);      // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.OptionalUIWidget
/// Size: 0x0010 (0x000260 - 0x000270)
class UOptionalUIWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(class UOptionalUICategory*)                Category                                                    OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(ESlateVisibility)                          VisibleFlag                                                 OFFSET(get<T>, {0x268, 1, 0, 0})
	CMember(ESlateVisibility)                          HiddenFlag                                                  OFFSET(get<T>, {0x269, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.OptionalUIWidget.OnVisibilityChanged
	// void OnVisibilityChanged(class UOptionalUICategory* UICategory, bool IsVisible);                                         // [0x19434f0] Final|Native|Protected 
};

/// Class /Script/FSD.OutlineComponent
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UOutlineComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FMulticastInlineDelegate)                  OnOutlineChanged                                            OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPingedByLaserPointer                                      OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(EOutline)                                  DefaultOutline                                              OFFSET(get<T>, {0xD0, 1, 0, 0})
	DMember(bool)                                      ActiveOnHoldTAB                                             OFFSET(get<bool>, {0xD1, 1, 0, 0})
	DMember(float)                                     CustomLaserPointDuration                                    OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(int32_t)                                   LockCounter                                                 OFFSET(get<int32_t>, {0xD8, 4, 0, 0})
	CMember(EOutline)                                  CurrentOutline                                              OFFSET(get<T>, {0xDD, 1, 0, 0})
	CMember(TArray<class UPrimitiveComponent*>)        OutlinedComponents                                          OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<class UPrimitiveComponent*>)        ExcludedComponents                                          OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   Character                                                   OFFSET(get<T>, {0x100, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.OutlineComponent.UnlockOutline
	// void UnlockOutline();                                                                                                    // [0x1943ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OutlineComponent.ToggleDefaultOutline
	// void ToggleDefaultOutline(bool Visible);                                                                                 // [0x1943b10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OutlineComponent.SetOutline
	// void SetOutline(EOutline outline);                                                                                       // [0x1943720] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OutlineComponent.RemoveFromOutline
	// void RemoveFromOutline(class UPrimitiveComponent* Component);                                                            // [0x19435c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OutlineComponent.OutlineChanged__DelegateSignature
	// void OutlineChanged__DelegateSignature(EOutline InOutline);                                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.OutlineComponent.OnToggleOutline
	// void OnToggleOutline(bool Visible);                                                                                      // [0x1943460] Final|Native|Protected 
	// Function /Script/FSD.OutlineComponent.OnOwnerDeath
	// void OnOwnerDeath(class UHealthComponentBase* HealthComponent);                                                          // [0x1943300] Final|Native|Protected 
	// Function /Script/FSD.OutlineComponent.OnItemUnequipped
	// void OnItemUnequipped(class AItem* Item);                                                                                // [0x1943130] Final|Native|Protected 
	// Function /Script/FSD.OutlineComponent.OnItemEquipped
	// void OnItemEquipped(class AItem* Item);                                                                                  // [0x19430a0] Final|Native|Protected 
	// Function /Script/FSD.OutlineComponent.LockOutline
	// void LockOutline();                                                                                                      // [0x1942ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OutlineComponent.EnableActivateOnHoldTab
	// void EnableActivateOnHoldTab();                                                                                          // [0x1942d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OutlineComponent.DisableActiveOnHoldTab
	// void DisableActiveOnHoldTab();                                                                                           // [0x1942d10] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OutlineComponent.AddToOutline
	// void AddToOutline(class UPrimitiveComponent* Component);                                                                 // [0x1942c50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.OutlineComponent.AddActorToOutline
	// void AddActorToOutline(class AActor* Actor);                                                                             // [0x1942bc0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.OverclockBank
/// Size: 0x0060 (0x000030 - 0x000090)
class UOverclockBank : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(TMap<class UOverclockUpgrade*, class USchematic*>) Overclocks                                          OFFSET(get<T>, {0x38, 80, 0, 0})
	CMember(class UItemID*)                            OwningItem                                                  OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Class /Script/FSD.OverheatingAggregator
/// Size: 0x0038 (0x0000C8 - 0x000100)
class UOverheatingAggregator : public UItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FMulticastInlineDelegate)                  OnOverheatingProgressChanged                                OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOverheatedChanged                                         OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	DMember(float)                                     HeatLossPerSecond                                           OFFSET(get<float>, {0xEC, 4, 0, 0})
	DMember(float)                                     OverheatedDuration                                          OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(bool)                                      bIsOverheated                                               OFFSET(get<bool>, {0xF4, 1, 0, 0})
	DMember(float)                                     temperature                                                 OFFSET(get<float>, {0xF8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.OverheatingAggregator.Server_SetTemperature
	// void Server_SetTemperature(float NewTemperature);                                                                        // [0x18e6420] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.OverheatingAggregator.Server_SetIsOverheated
	// void Server_SetIsOverheated(bool NewOverheated);                                                                         // [0x1855ec0] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.OverheatingAggregator.OverheatingProgressChanged__DelegateSignature
	// void OverheatingProgressChanged__DelegateSignature(float Progress);                                                      // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.OverheatingAggregator.OverheatedChanged__DelegateSignature
	// void OverheatedChanged__DelegateSignature(bool overheated);                                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.OverheatingAggregator.OnRep_Temperature
	// void OnRep_Temperature();                                                                                                // [0x19433b0] Final|Native|Protected 
	// Function /Script/FSD.OverheatingAggregator.OnRep_IsOverheated
	// void OnRep_IsOverheated();                                                                                               // [0x1943390] Final|Native|Protected 
	// Function /Script/FSD.OverheatingAggregator.GetTemperature
	// float GetTemperature();                                                                                                  // [0x1942fa0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.OverheatingAggregator.GetOverheatingProgress
	// float GetOverheatingProgress();                                                                                          // [0x1942e70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.OverheatingAggregator.GetIsOverheated
	// bool GetIsOverheated();                                                                                                  // [0x1942e50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ParalyzedStateComponent
/// Size: 0x0040 (0x000100 - 0x000140)
class UParalyzedStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	CMember(TSoftObjectPtr<class UClass*>)             CaveLeechClass                                              OFFSET(get<T>, {0x108, 40, 0, 0})
	DMember(float)                                     CameraArmHeightOffset                                       OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     CameraArmSpeed                                              OFFSET(get<float>, {0x138, 4, 0, 0})
};

/// Class /Script/FSD.ParasiteEnemy
/// Size: 0x0058 (0x000348 - 0x0003A0)
class AParasiteEnemy : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 928;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               Tentacles1                                                  OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               Tentacles2                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UOutlineComponent*)                  outline                                                     OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UParticleSystem*)                    deathParticles                                              OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class USoundBase*)                         deathSound                                                  OFFSET(get<T>, {0x390, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ParasiteEnemy.OnSelfDeath
	// void OnSelfDeath(class UHealthComponentBase* aHealthComponent);                                                          // [0x19433d0] Final|Native|Protected 
};

/// Class /Script/FSD.PassedOutStateComponent
/// Size: 0x0010 (0x000100 - 0x000110)
class UPassedOutStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(class UDialogDataAsset*)                   ReviveShout                                                 OFFSET(get<T>, {0x100, 8, 0, 0})
	DMember(bool)                                      bAllPlayersPassedOut                                        OFFSET(get<bool>, {0x108, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PassedOutStateComponent.ReceiveTeamPassedOut
	// void ReceiveTeamPassedOut();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.PathfinderCollisionComponent
/// Size: 0x0010 (0x0004E0 - 0x0004F0)
class UPathfinderCollisionComponent : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	DMember(bool)                                      ActivatePFCollisionAtInit                                   OFFSET(get<bool>, {0x4E0, 1, 0, 0})
	CMember(PFCollisionType)                           PFColiType                                                  OFFSET(get<T>, {0x4E1, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PathfinderCollisionComponent.DisablePFCollision
	// void DisablePFCollision();                                                                                               // [0x194a740] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PathfinderCollisionComponent.ActivatePFCollision
	// void ActivatePFCollision();                                                                                              // [0x194a450] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PathfinderSplineSegmentCollisionComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UPathfinderSplineSegmentCollisionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xB0, 4, 0, 0})
	CMember(PFCollisionType)                           CollisionType                                               OFFSET(get<T>, {0xB4, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PathfinderSplineSegmentCollisionComponent.UpdateFromSpline
	// void UpdateFromSpline(class USplineComponent* SplineComponent, int32_t StartIndex);                                      // [0x194bc20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PathfinderSplineSegmentCollisionComponent.Update
	// void Update(FVector& SplineStart, FVector& SplineStartTangent, FVector& SplineEnd, FVector& SplineEndTangent);           // [0x194ba90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PathfinderSplineSegmentCollisionComponent.Clear
	// void Clear();                                                                                                            // [0x194a700] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PathfinderDebugProbe
/// Size: 0x0008 (0x000220 - 0x000228)
class APathfinderDebugProbe : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class AActor*)                             Dest                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/FSD.RaycastDebugProbe
/// Size: 0x0008 (0x000220 - 0x000228)
class ARaycastDebugProbe : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	CMember(class UTerrainType*)                       TerrainType                                                 OFFSET(get<T>, {0x220, 8, 0, 0})
};

/// Class /Script/FSD.FindPointKeepingDistanceProbe
/// Size: 0x0018 (0x000220 - 0x000238)
class AFindPointKeepingDistanceProbe : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	DMember(float)                                     MinDistance                                                 OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x224, 4, 0, 0})
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	DMember(float)                                     IdealTargetDist                                             OFFSET(get<float>, {0x230, 4, 0, 0})
};

/// Class /Script/FSD.DistanceTestProbe
/// Size: 0x0018 (0x000220 - 0x000238)
class ADistanceTestProbe : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(int32_t)                                   NumX                                                        OFFSET(get<int32_t>, {0x224, 4, 0, 0})
	DMember(int32_t)                                   NumY                                                        OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(float)                                     DeltaX                                                      OFFSET(get<float>, {0x22C, 4, 0, 0})
	DMember(float)                                     DeltaY                                                      OFFSET(get<float>, {0x230, 4, 0, 0})
};

/// Class /Script/FSD.PathfinderFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPathfinderFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.PathfinderFunctionLibrary.SnapToGrid
	// FVector SnapToGrid(class UObject* WorldContextObject, FVector& Origin, DeepPathFinderType PathType, DeepPathFinderSize PathSize, bool& success, float maxSnapDistance); // [0x194b860] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PathfinderFunctionLibrary.IsPathfinderReady
	// bool IsPathfinderReady(class UObject* WorldContextObject);                                                               // [0x194ad80] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PathfinderFunctionLibrary.FindRandomPositionOnNavmeshAtDistance
	// FVector FindRandomPositionOnNavmeshAtDistance(class UObject* WorldContextObject, FVector& Origin, float atDistance);     // [0x194aa50] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PathfinderFunctionLibrary.FindRandomNearbyPositionOnNavmesh
	// FVector FindRandomNearbyPositionOnNavmesh(class UObject* WorldContextObject, FVector& Origin, float Radius);             // [0x194a920] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PathfinderFunctionLibrary.FindPointAlongPathTo
	// FVector FindPointAlongPathTo(class UObject* WorldContextObject, FVector& Origin, FVector& Destination, float atDistance); // [0x194a780] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PathfinderVehicle
/// Size: 0x0030 (0x000280 - 0x0002B0)
class APathfinderVehicle : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UDeepPathfinderMovement*)            PathfinderMovement                                          OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UHealthComponent*)                   HealthComponent                                             OFFSET(get<T>, {0x2A0, 8, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x2A8, 4, 0, 0})
};

/// Class /Script/FSD.PatrolBot
/// Size: 0x0250 (0x0003B0 - 0x000600)
class APatrolBot : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1536;

public:
	CMember(class UHackingUsableComponent*)            HackingUsable                                               OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UPawnSensingComponent*)              PawnSensing                                                 OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class USphereComponent*)                   CollisionSphere                                             OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class USphereComponent*)                   NearTargetSphere                                            OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           LaserBeam                                                   OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           TearingGroundParticles                                      OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UEnemyComponent*)                    EnemyComponent                                              OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UDamageComponent*)                   BumpDamage                                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UPawnAlertComponent*)                Alert                                                       OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UPlayerImpactCooldownComponent*)     ImpactCooldown                                              OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UAvoidCeilingComponent*)             CeilingAvoidance                                            OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class UAudioComponent*)                    RollingAudio                                                OFFSET(get<T>, {0x410, 8, 0, 0})
	CMember(class UAudioComponent*)                    FlyingAudio                                                 OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UProjectileAttackComponent*)         RollingRangedAttack                                         OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UProjectileAttackComponent*)         FlyingRangedAttack                                          OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UProjectileAttackComponent*)         MissileAttack                                               OFFSET(get<T>, {0x430, 8, 0, 0})
	DMember(float)                                     MaxMotionSoundVelThresholdFlying                            OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(float)                                     MaxMotionSoundVelThreshold                                  OFFSET(get<float>, {0x448, 4, 0, 0})
	DMember(float)                                     MaxTurningMotionSoundVelThreshold                           OFFSET(get<float>, {0x44C, 4, 0, 0})
	DMember(bool)                                      DebugAudio                                                  OFFSET(get<bool>, {0x450, 1, 0, 0})
	DMember(float)                                     HackedAttackMultiplier                                      OFFSET(get<float>, {0x454, 4, 0, 0})
	DMember(bool)                                      IsLockedOn                                                  OFFSET(get<bool>, {0x470, 1, 0, 0})
	DMember(float)                                     DelayAfterLockOn                                            OFFSET(get<float>, {0x474, 4, 0, 0})
	CMember(class USoundCue*)                          ImpactCue                                                   OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class USoundCue*)                          JumpSound                                                   OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class USoundCue*)                          StartupAccelerationSound                                    OFFSET(get<T>, {0x488, 8, 0, 0})
	DMember(float)                                     LaunchPower                                                 OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     SpawnRocketsTime                                            OFFSET(get<float>, {0x498, 4, 0, 0})
	CMember(EPatrolBotState)                           State                                                       OFFSET(get<T>, {0x49D, 1, 0, 0})
	CMember(EPatrolBotControlState)                    ControlState                                                OFFSET(get<T>, {0x49F, 1, 0, 0})
	DMember(float)                                     HackedAttackSpeedMultiplier                                 OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     LaserPenetrationDistance                                    OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     MinTurretAngle                                              OFFSET(get<float>, {0x4EC, 4, 0, 0})
	DMember(float)                                     MaxTurretAngle                                              OFFSET(get<float>, {0x4F0, 4, 0, 0})
	DMember(float)                                     SpawnRocketsChance                                          OFFSET(get<float>, {0x4F4, 4, 0, 0})
	DMember(float)                                     GunRange                                                    OFFSET(get<float>, {0x4F8, 4, 0, 0})
	DMember(float)                                     RollingAttackCooldown                                       OFFSET(get<float>, {0x4FC, 4, 0, 0})
	DMember(float)                                     FlyingAttackCooldown                                        OFFSET(get<float>, {0x500, 4, 0, 0})
	DMember(float)                                     TurretLerpSpeed                                             OFFSET(get<float>, {0x504, 4, 0, 0})
	DMember(float)                                     AimDownwardsOffset                                          OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(float)                                     AccelerationThreshold                                       OFFSET(get<float>, {0x510, 4, 0, 0})
	DMember(float)                                     LowSpeedThreshold                                           OFFSET(get<float>, {0x514, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        SpeedTiltCurve                                              OFFSET(getStruct<T>, {0x520, 136, 0, 0})
	CMember(class UFakeMoverSettings*)                 RollSettings                                                OFFSET(get<T>, {0x5A8, 8, 0, 0})
	CMember(class UFakeMoverSettings*)                 JumpSettings                                                OFFSET(get<T>, {0x5B0, 8, 0, 0})
	CMember(class UFakeMoverSettings*)                 SpawnRocketsSettings                                        OFFSET(get<T>, {0x5B8, 8, 0, 0})
	DMember(bool)                                      CanJump                                                     OFFSET(get<bool>, {0x5C0, 1, 0, 0})
	DMember(float)                                     JumpForce                                                   OFFSET(get<float>, {0x5C4, 4, 0, 0})
	DMember(float)                                     StartFlyingTimer                                            OFFSET(get<float>, {0x5C8, 4, 0, 0})
	DMember(float)                                     MinRollingTime                                              OFFSET(get<float>, {0x5CC, 4, 0, 0})
	DMember(float)                                     MaxRollingTime                                              OFFSET(get<float>, {0x5D0, 4, 0, 0})
	DMember(float)                                     MinFlyingTime                                               OFFSET(get<float>, {0x5D4, 4, 0, 0})
	DMember(float)                                     MaxFlyingTime                                               OFFSET(get<float>, {0x5D8, 4, 0, 0})
	DMember(float)                                     SinSpeed                                                    OFFSET(get<float>, {0x5E0, 4, 0, 0})
	DMember(float)                                     SinSize                                                     OFFSET(get<float>, {0x5E4, 4, 0, 0})
	DMember(float)                                     FlyingDampOmega                                             OFFSET(get<float>, {0x5EC, 4, 0, 0})
	DMember(float)                                     RollingDampOmega                                            OFFSET(get<float>, {0x5F0, 4, 0, 0})
	DMember(bool)                                      FiringRockets                                               OFFSET(get<bool>, {0x5F4, 1, 0, 0})
	DMember(bool)                                      Alerted                                                     OFFSET(get<bool>, {0x5F5, 1, 0, 0})
	CMember(class AActor*)                             CurrentTarget                                               OFFSET(get<T>, {0x5F8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PatrolBot.SetIsPatrolling
	// void SetIsPatrolling(bool patroling);                                                                                    // [0x194b7d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PatrolBot.SetHacked
	// void SetHacked();                                                                                                        // [0x194b7b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PatrolBot.SetFiringRockets
	// void SetFiringRockets(bool firing);                                                                                      // [0x194b720] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PatrolBot.ReviveDrone
	// void ReviveDrone();                                                                                                      // [0x194b700] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PatrolBot.OnStateChangedEvent
	// void OnStateChangedEvent(EPatrolBotState CurrentState);                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnSpawnRocketsEvent
	// void OnSpawnRocketsEvent();                                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnRocketsEnded
	// void OnRocketsEnded();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnRevived
	// void OnRevived();                                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnRep_State
	// void OnRep_State();                                                                                                      // [0x194b4b0] Final|Native|Protected 
	// Function /Script/FSD.PatrolBot.OnRep_IsLockedOn
	// void OnRep_IsLockedOn();                                                                                                 // [0x194b490] Final|Native|Protected 
	// Function /Script/FSD.PatrolBot.OnRep_FiringRockets
	// void OnRep_FiringRockets();                                                                                              // [0x194b470] Final|Native|Protected 
	// Function /Script/FSD.PatrolBot.OnRep_ControlState
	// void OnRep_ControlState(EPatrolBotControlState oldState);                                                                // [0x194b3f0] Final|Native|Protected 
	// Function /Script/FSD.PatrolBot.OnProjectileSpawned
	// void OnProjectileSpawned();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnMovementStateChanged
	// void OnMovementStateChanged(EDeepMovementState State);                                                                   // [0x194b2e0] Final|Native|Public  
	// Function /Script/FSD.PatrolBot.OnLockedOn
	// void OnLockedOn();                                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnLandedEvent
	// void OnLandedEvent();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnJumpEvent
	// void OnJumpEvent();                                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnFireRockets
	// void OnFireRockets();                                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnDroneHacked
	// void OnDroneHacked();                                                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnDroneAlerted
	// void OnDroneAlerted();                                                                                                   // [0x194b170] Final|Native|Public  
	// Function /Script/FSD.PatrolBot.OnDisabled
	// void OnDisabled();                                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnDeath
	// void OnDeath(class UHealthComponentBase* aHealthComponent);                                                              // [0x194b050] Final|Native|Private 
	// Function /Script/FSD.PatrolBot.OnControlStateChanged
	// void OnControlStateChanged(EPatrolBotControlState ControlState);                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PatrolBot.OnCollided
	// void OnCollided(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x194ae30] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.PatrolBot.Jumped
	// void Jumped();                                                                                                           // [0x17f8010] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.PatrolBot.IsHacked
	// bool IsHacked();                                                                                                         // [0x194ad50] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PatrolBot.ImpactSound
	// void ImpactSound();                                                                                                      // [0x17f75b0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.PatrolBot.EndFireRockets
	// void EndFireRockets();                                                                                                   // [0x194a760] Final|Native|Protected 
	// Function /Script/FSD.PatrolBot.DisableDrone
	// void DisableDrone();                                                                                                     // [0x194a720] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PatrolBot.All_SetLaserBeamActive
	// void All_SetLaserBeamActive(bool Active);                                                                                // [0x194a560] Final|Net|NetReliableNative|Event|NetMulticast|Private 
};

/// Class /Script/FSD.PatrolBotAnimInstance
/// Size: 0x0050 (0x0004A0 - 0x0004F0)
class UPatrolBotAnimInstance : public USpiderAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	CMember(class APatrolBot*)                         PatrolBot                                                   OFFSET(get<T>, {0x4A0, 8, 0, 0})
	SMember(FRotator)                                  TurretRotation                                              OFFSET(getStruct<T>, {0x4A8, 12, 0, 0})
	DMember(float)                                     Tilt                                                        OFFSET(get<float>, {0x4B4, 4, 0, 0})
	DMember(bool)                                      Rolling                                                     OFFSET(get<bool>, {0x4B8, 1, 0, 0})
	DMember(bool)                                      NotRolling                                                  OFFSET(get<bool>, {0x4B9, 1, 0, 0})
	DMember(bool)                                      Disabled                                                    OFFSET(get<bool>, {0x4BA, 1, 0, 0})
	DMember(bool)                                      FlyingDisable                                               OFFSET(get<bool>, {0x4BB, 1, 0, 0})
	SMember(FRotator)                                  WheelRotation                                               OFFSET(getStruct<T>, {0x4BC, 12, 0, 0})
	SMember(FRotator)                                  WheelCenterRotation                                         OFFSET(getStruct<T>, {0x4C8, 12, 0, 0})
	SMember(FRotator)                                  FloatCenterRotation                                         OFFSET(getStruct<T>, {0x4D4, 12, 0, 0})
	DMember(float)                                     CurrentTilt                                                 OFFSET(get<float>, {0x4E0, 4, 0, 0})
	DMember(float)                                     TiltSpeed                                                   OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     WheelSpeedModifier                                          OFFSET(get<float>, {0x4E8, 4, 0, 0})
};

/// Class /Script/FSD.PawnAffliction
/// Size: 0x0060 (0x000030 - 0x000090)
class UPawnAffliction : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FColor)                                    IconColor                                                   OFFSET(getStruct<T>, {0x40, 4, 0, 0})
	SMember(FColor)                                    IconColorBG                                                 OFFSET(getStruct<T>, {0x44, 4, 0, 0})
	DMember(bool)                                      bShowPlayerIcon                                             OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      bShowOnEnemyHealthbar                                       OFFSET(get<bool>, {0x49, 1, 0, 0})
	CMember(class UPlayerAfflictionOverlay*)           AfflictionOverlay                                           OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           EnemyEffects                                                OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           PlayerFirstPersonEffects                                    OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           PlayerThirdPersonEffects                                    OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(class UDialogDataAsset*)                   PlayerShoutOnBegin                                          OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Struct /Script/FSD.PawnAfflictionItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FPawnAfflictionItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<class UAfflictionEffect*>)          Afflictions                                                 OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.AfflictionEntry
/// Size: 0x000C (0x00000C - 0x000018)
class FAfflictionEntry : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UPawnAffliction*)                    Affliction                                                  OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FSD.AfflictionEntriesArray
/// Size: 0x0018 (0x000108 - 0x000120)
class FAfflictionEntriesArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TArray<FAfflictionEntry>)                  Items                                                       OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(class UPawnAfflictionComponent*)           Owner                                                       OFFSET(get<T>, {0x118, 8, 0, 0})
};

/// Class /Script/FSD.PawnAfflictionComponent
/// Size: 0x01B0 (0x0000B0 - 0x000260)
class UPawnAfflictionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	SMember(FMulticastInlineDelegate)                  OnAfflictionActivatedEvent                                  OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAfflictionDeactivatedEvent                                OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(TMap<class UPawnAffliction*, FPawnAfflictionItem>) ActiveAfflictions                                   OFFSET(get<T>, {0xD0, 80, 0, 0})
	SMember(FAfflictionEntriesArray)                   NetworkedAfflictions                                        OFFSET(getStruct<T>, {0x120, 288, 0, 0})
	CMember(class UClass*)                             FrozenEffect                                                OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UClass*)                             BurningEffect                                               OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(EFrozenBitsSize)                           EffectSize                                                  OFFSET(get<T>, {0x250, 1, 0, 0})
	DMember(float)                                     BaseEffectScale                                             OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(bool)                                      UseDormancy                                                 OFFSET(get<bool>, {0x258, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PawnAfflictionComponent.PushAffliction
	// void PushAffliction(class UPawnAffliction* Affliction, bool onlyIfNotActive);                                            // [0x194b560] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PawnAfflictionComponent.PopAffliction
	// void PopAffliction(class UPawnAffliction* Affliction);                                                                   // [0x194b4d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PawnAfflictionComponent.OnDeath
	// void OnDeath(class UHealthComponentBase* HealthComponent);                                                               // [0x194b0e0] Final|Native|Protected 
	// Function /Script/FSD.PawnAfflictionComponent.IsAfflictedBy
	// bool IsAfflictedBy(class UPawnAffliction* Affliction);                                                                   // [0x194acb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PawnAfflictionComponent.GetActiveAfflictions
	// TArray<UPawnAffliction*> GetActiveAfflictions();                                                                         // [0x194ab80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PawnAlertComponent
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UPawnAlertComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FMulticastInlineDelegate)                  OnAlertedFromDamage                                         OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      AutoAlertAI                                                 OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      ShouldAlertNearby                                           OFFSET(get<bool>, {0xC1, 1, 0, 0})
	DMember(float)                                     AlertRadius                                                 OFFSET(get<float>, {0xC4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PawnAlertComponent.StopAutoAlerting
	// void StopAutoAlerting();                                                                                                 // [0x194ba70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PawnAlertComponent.OnPawnSeen
	// void OnPawnSeen(class APawn* Pawn);                                                                                      // [0x194b360] Final|Native|Protected 
	// Function /Script/FSD.PawnAlertComponent.OnHit
	// void OnHit(float Damage, FDamageData& DamageData, bool anyHealthLost);                                                   // [0x194b190] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.PawnAlertComponent.OnAlerted
	// void OnAlerted();                                                                                                        // [0x194ae10] Final|Native|Protected 
	// Function /Script/FSD.PawnAlertComponent.AleartNearby
	// void AleartNearby();                                                                                                     // [0x194a540] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PawnStat
/// Size: 0x0008 (0x000030 - 0x000038)
class UPawnStat : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     StartingValue                                               OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(EPawnStatType)                             PawnStatType                                                OFFSET(get<T>, {0x34, 1, 0, 0})
	CMember(EPawnStatType)                             ValueModificationType                                       OFFSET(get<T>, {0x35, 1, 0, 0})
};

/// Struct /Script/FSD.PawnStatEntry
/// Size: 0x0024 (0x00000C - 0x000030)
class FPawnStatEntry : public FFastArraySerializerItem
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UPawnStat*)                          PawnStat                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Struct /Script/FSD.PawnStatEntriesArray
/// Size: 0x0018 (0x000108 - 0x000120)
class FPawnStatEntriesArray : public FFastArraySerializer
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TArray<FPawnStatEntry>)                    Items                                                       OFFSET(get<T>, {0x108, 16, 0, 0})
	CMember(class UPawnStatsComponent*)                Owner                                                       OFFSET(get<T>, {0x118, 8, 0, 0})
};

/// Class /Script/FSD.PawnStatsComponent
/// Size: 0x0128 (0x0000B0 - 0x0001D8)
class UPawnStatsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	SMember(FPawnStatEntriesArray)                     Stats                                                       OFFSET(getStruct<T>, {0xB0, 288, 0, 0})
	DMember(bool)                                      UseDormancy                                                 OFFSET(get<bool>, {0x1D0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PawnStatsComponent.RemoveModifier
	// void RemoveModifier(class UPawnStat* Stat, float Value);                                                                 // [0x194b630] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PawnStatsComponent.GetStatValue
	// float GetStatValue(class UPawnStat* Stat);                                                                               // [0x194ac10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PawnStatsComponent.ChangeModifier
	// void ChangeModifier(class UPawnStat* Stat, float CurrentValue, float NewValue);                                          // [0x194a5f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PawnStatsComponent.AddModifier
	// int32_t AddModifier(class UPawnStat* Stat, float Value);                                                                 // [0x194a470] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PerkLogic
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UPerkLogic : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FSD.PerkLogic.StartLogic
	// void StartLogic(int32_t Rank);                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PerkLogic.GetCharacter
	// class APlayerCharacter* GetCharacter();                                                                                  // [0x194f170] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkLogic.GetAdditionalText
	// FText GetAdditionalText(int32_t Rank);                                                                                   // [0x194ef70] Native|Event|Public|BlueprintEvent|Const 
};

/// Class /Script/FSD.PerkDelegateItem
/// Size: 0x0050 (0x000028 - 0x000078)
class UPerkDelegateItem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FMulticastInlineDelegate)                  OnPerkClaimed                                               OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPerkEquipped                                              OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPerkUnequipped                                            OFFSET(getStruct<T>, {0x48, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPerkHighlighted                                           OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnChargesUsedChanged                                        OFFSET(getStruct<T>, {0x68, 16, 0, 0})
};

/// Class /Script/FSD.PerkSubsystem
/// Size: 0x0050 (0x000030 - 0x000080)
class UPerkSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<class UPerkAsset*, class UPerkDelegateItem*>) PerkDelegates                                       OFFSET(get<T>, {0x30, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.PerkSubsystem.GetPerkDelegates
	// class UPerkDelegateItem* GetPerkDelegates(class UPerkAsset* Perk);                                                       // [0x194fca0] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PerkHUDWidget
/// Size: 0x0008 (0x000260 - 0x000268)
class UPerkHUDWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(class UPerkAsset*)                         PerkAsset                                                   OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PerkHUDWidget.SetPerkAsset
	// void SetPerkAsset(class UPerkAsset* InPerk);                                                                             // [0x19514c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PerkHUDWidget.ReceivePerkAssetChanged
	// void ReceivePerkAssetChanged();                                                                                          // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.PerkHUDWidget.GetFSDPlayerState
	// class AFSDPlayerState* GetFSDPlayerState();                                                                              // [0x194f7a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PerkHUDWidget.GetCharacter
	// class APlayerCharacter* GetCharacter();                                                                                  // [0x194f140] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PerkHUDIconWidget
/// Size: 0x0008 (0x000268 - 0x000270)
class UPerkHUDIconWidget : public UPerkHUDWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	DMember(float)                                     CoolDownProgress                                            OFFSET(get<float>, {0x268, 4, 0, 0})
};

/// Class /Script/FSD.PerkHUDActivationWidget
/// Size: 0x0008 (0x000268 - 0x000270)
class UPerkHUDActivationWidget : public UPerkHUDWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	CMember(EPerkHUDActivationLocation)                Location                                                    OFFSET(get<T>, {0x268, 1, 0, 0})
};

/// Class /Script/FSD.PerkFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPerkFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.PerkFunctionLibrary.SplitPerksByUsage
	// void SplitPerksByUsage(TArray<UPerkAsset*>& perks, TArray<UPerkAsset*>& OutPassivePerks, TArray<UPerkAsset*>& OutActivePerks); // [0x1951600] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.PerkFunctionLibrary.SortPerksByUsage
	// TArray<UPerkAsset*> SortPerksByUsage(TArray<UPerkAsset*>& perks);                                                        // [0x1951550] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.PerkFunctionLibrary.RandomizePerkLoadout
	// void RandomizePerkLoadout(class UObject* WorldContext, class UPlayerCharacterID* characterID);                           // [0x1951080] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.PerkFunctionLibrary.IsPerkTierUnLocked
	// bool IsPerkTierUnLocked(class UObject* WorldContext, int32_t Tier);                                                      // [0x1950da0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetRequiredPerkClaimsForTier
	// int32_t GetRequiredPerkClaimsForTier(int32_t Tier);                                                                      // [0x19506f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetPerkTierState
	// void GetPerkTierState(class UObject* WorldContext, int32_t Tier, bool& TierUnLocked, int32_t& NextRequiredCount, int32_t& NextProgressCount); // [0x1950070] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetPerkEquipSlots
	// void GetPerkEquipSlots(class UObject* WorldContext, EPerkUsageType InType, class UClass* InCharacterClass, int32_t& OutAvailableSlots, int32_t& OutUnavailableSlots, int32_t& OutPromotionLockedSlots); // [0x194fe80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetPerkEquipSlotLayout
	// TArray<EPerkSlotType> GetPerkEquipSlotLayout(class UObject* WorldContext, EPerkUsageType InType, class UClass* InCharacterClass); // [0x194fd40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetOwnedPerksByType
	// TArray<UPerkAsset*> GetOwnedPerksByType(class UObject* WorldContext, EPerkUsageType InType);                             // [0x194fb90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetOwnedPerks
	// TArray<UPerkAsset*> GetOwnedPerks(class UObject* WorldContext);                                                          // [0x194fac0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetHighestPerkTier
	// int32_t GetHighestPerkTier();                                                                                            // [0x194f7d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetCharacterNonEquippedPerks
	// TArray<UPerkAsset*> GetCharacterNonEquippedPerks(class UObject* WorldContext, class UPlayerCharacterID* characterID);    // [0x194f2b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetCharacterEquippedPerks
	// TArray<UPerkAsset*> GetCharacterEquippedPerks(class UObject* WorldContext, class UPlayerCharacterID* characterID);       // [0x194f1a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetAvailablePerks
	// TArray<UPerkAsset*> GetAvailablePerks();                                                                                 // [0x194f100] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.GetAmountOfPurchasedPerks
	// int32_t GetAmountOfPurchasedPerks(class UObject* WorldContext);                                                          // [0x194f070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.FormatRichText
	// FText FormatRichText(FText& SourceText, bool UpperCase, TMap<FString, FString> CharTagMap);                              // [0x194ec10] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PerkFunctionLibrary.CalculateClaimablePerkPoints
	// int32_t CalculateClaimablePerkPoints(class UObject* WorldContext);                                                       // [0x194e6b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.PerkUsage
/// Size: 0x0018 (0x000000 - 0x000018)
class FPerkUsage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UPerkAsset*)                         Perk                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   UsedCount                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.PerkUsageComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UPerkUsageComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TArray<FPerkUsage>)                        PerkUsageReplicated                                         OFFSET(get<T>, {0xB8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PerkUsageComponent.Server_MarkPerkUsed
	// void Server_MarkPerkUsed(class UPerkAsset* Perk);                                                                        // [0x1818300] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PerkUsageComponent.Server_CheatReset
	// void Server_CheatReset();                                                                                                // [0x18544e0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PerkUsageComponent.OnRep_PerkUsageReplicated
	// void OnRep_PerkUsageReplicated();                                                                                        // [0x1951060] Final|Native|Protected 
};

/// Class /Script/FSD.PhotographyStateComponent
/// Size: 0x0000 (0x000100 - 0x000100)
class UPhotographyStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Class /Script/FSD.PickaxeFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPickaxeFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.PickaxeFunctionLibrary.RemovePickaxePartFromOwned
	// bool RemovePickaxePartFromOwned(class UObject* WorldContextObject, class UPickaxePart* part);                            // [0x1951200] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxeFunctionLibrary.RandomizePickaxe
	// void RandomizePickaxe(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId);                            // [0x1951140] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxeFunctionLibrary.IsPickaxePartEquipped
	// bool IsPickaxePartEquipped(class UObject* WorldContextObject, EPickaxePartLocation Location, class UPickaxePart* part, class UItemID* pickaxeID); // [0x1950e70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PickaxeFunctionLibrary.GivePickaxePart
	// void GivePickaxePart(class UObject* WorldContextObject, class UPickaxePart* part);                                       // [0x1950b70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxeFunctionLibrary.GetUnlockedPickaxeParts
	// TArray<UPickaxePart*> GetUnlockedPickaxeParts(class UObject* WorldContextObject, EPickaxePartLocation Category);         // [0x1950850] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxeFunctionLibrary.GetPickaxeParts
	// TArray<UPickaxePart*> GetPickaxeParts(class UObject* WorldContextObject, EPickaxePartLocation Category);                 // [0x1950220] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxeFunctionLibrary.GetIsPickAxePartAcquired
	// bool GetIsPickAxePartAcquired(class UObject* WorldContextObject, class UPickaxePart* InPickaxePart);                     // [0x194f920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PickaxeFunctionLibrary.GetEquippedPickaxeSet
	// FPickaxeSet GetEquippedPickaxeSet(class UObject* WorldContextObject, class UItemID* pickaxeID);                          // [0x194f6a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PickaxeFunctionLibrary.GetEquippedPickaxePart
	// class UPickaxePart* GetEquippedPickaxePart(class UObject* WorldContextObject, EPickaxePartLocation partLocation, class UItemID* pickaxeID); // [0x194f5a0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PickaxeFunctionLibrary.EquipPickaxePart
	// void EquipPickaxePart(class UObject* WorldContextObject, class UPickaxePart* part, EPickaxePartLocation partLocation, class UItemID* pickaxeID); // [0x194eac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxeFunctionLibrary.CopyPastePickaxeLoadout
	// void CopyPastePickaxeLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, int32_t fromIndex, int32_t toIndex); // [0x194e8b0] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/FSD.PickaxeMeshInstance
/// Size: 0x0010 (0x000000 - 0x000010)
class FPickaxeMeshInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMeshComponent*)                     FP_Mesh                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UMeshComponent*)                     TP_Mesh                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.PickaxeItem
/// Size: 0x0360 (0x000380 - 0x0006E0)
class APickaxeItem : public AItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1760;

public:
	DMember(bool)                                      QuadDamageCarving                                           OFFSET(get<bool>, {0x390, 1, 0, 0})
	CMember(class USceneComponent*)                    FP_Root                                                     OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class USceneComponent*)                    TP_Root                                                     OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class USceneComponent*)                    FP_Scale                                                    OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class USceneComponent*)                    TP_Scale                                                    OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UPlayerAnimInstance*)                FPAnimInstance                                              OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UPlayerAnimInstance*)                TPAnimInstance                                              OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_EquipAnimation                                           OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_EquipAnimation                                           OFFSET(get<T>, {0x3D0, 8, 0, 0})
	DMember(float)                                     EquipDuration                                               OFFSET(get<float>, {0x3D8, 4, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         CharacterAnimationSet                                       OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UDamageComponent*)                   SpecialDamageComponent                                      OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(float)                                     SpecialCooldown                                             OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(float)                                     SpecialCooldownRemaining                                    OFFSET(get<float>, {0x404, 4, 0, 0})
	SMember(FCoolDownProgressStyle)                    SpecialCooldownUI                                           OFFSET(getStruct<T>, {0x420, 64, 0, 0})
	DMember(int32_t)                                   RockMiningBonus                                             OFFSET(get<int32_t>, {0x460, 4, 0, 0})
	DMember(int32_t)                                   DirtMiningBonus                                             OFFSET(get<int32_t>, {0x464, 4, 0, 0})
	DMember(float)                                     DamageRange                                                 OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     MiningRange                                                 OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     DamageRadius                                                OFFSET(get<float>, {0x470, 4, 0, 0})
	CMember(class UClass*)                             OnDamageEnemySlowdownEffect                                 OFFSET(get<T>, {0x478, 8, 0, 0})
	SMember(FGameplayTagContainer)                     WideDamageTrackingTags                                      OFFSET(getStruct<T>, {0x480, 32, 0, 0})
	CMember(class USoundCue*)                          MiningSound                                                 OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               MineRumble                                                  OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               PartialMineRumble                                           OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               DamageRumble                                                OFFSET(get<T>, {0x4B8, 8, 0, 0})
	DMember(float)                                     GeneralImpactAudioVolume                                    OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     HitCooldown                                                 OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     MiningDuration                                              OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     DistanceConsideredSameHit                                   OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     BlockParticlesScaleFP                                       OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     BlockParticlesScaleTP                                       OFFSET(get<float>, {0x4D4, 4, 0, 0})
	CMember(EPickaxeState)                             State                                                       OFFSET(get<T>, {0x4D8, 1, 0, 0})
	CMember(class USoundCue*)                          PowerAttackRefreshedSound                                   OFFSET(get<T>, {0x640, 8, 0, 0})
	DMember(bool)                                      PreventQMining                                              OFFSET(get<bool>, {0x648, 1, 0, 0})
	DMember(float)                                     QMiningExpectedDelay                                        OFFSET(get<float>, {0x64C, 4, 0, 0})
	DMember(float)                                     QMiningInitialDelay                                         OFFSET(get<float>, {0x650, 4, 0, 0})
	DMember(float)                                     QMiningReducedPlayRatePct                                   OFFSET(get<float>, {0x654, 4, 0, 0})
	DMember(double)                                    QMiningLastHitTime                                          OFFSET(get<double>, {0x658, 8, 0, 0})
	DMember(bool)                                      CanBezerk                                                   OFFSET(get<bool>, {0x661, 1, 0, 0})
	CMember(class UClass*)                             BezerkStatusEffect                                          OFFSET(get<T>, {0x668, 8, 0, 0})
	DMember(bool)                                      PowerAttackEnabled                                          OFFSET(get<bool>, {0x672, 1, 0, 0})
	CMember(TMap<EPickaxePartLocation, FPickaxeMeshInstance>) EquippedParts                                        OFFSET(get<T>, {0x678, 80, 0, 0})
	CMember(class UMaterialInterface*)                 EquippedMaterial                                            OFFSET(get<T>, {0x6C8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PickaxeItem.SpecialTargetDamageEffects
	// void SpecialTargetDamageEffects(FVector& ImpactPoint, FVector& ImpactNormal);                                            // [0x1d6f900] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.PickaxeItem.SetSpecialCoolDownDuration
	// void SetSpecialCoolDownDuration(float newCooldownDuration);                                                              // [0x19572f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxeItem.Server_TriggerBezerk
	// void Server_TriggerBezerk();                                                                                             // [0x19570e0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PickaxeItem.Server_SetState
	// void Server_SetState(EPickaxeState NewState);                                                                            // [0x1957060] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PickaxeItem.Server_RemoveDebrisInstance
	// void Server_RemoveDebrisInstance(FVector_NetQuantize HitPos, int32_t DebrisIndex, int32_t remappedIndex);                // [0x1956f40] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PickaxeItem.Server_HitBlock
	// void Server_HitBlock(FVector_NetQuantize Position, int32_t Material, bool removeDebris, bool isSpecial);                 // [0x1956ca0] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.PickaxeItem.Server_DoPowerAttack
	// void Server_DoPowerAttack();                                                                                             // [0x17f8340] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PickaxeItem.Server_DigBlock
	// void Server_DigBlock(FVector carvePos, FVector carveDirection, int32_t TerrainMaterial, bool isSpecial);                 // [0x1956b00] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.PickaxeItem.Server_DamageTarget
	// void Server_DamageTarget(class UPrimitiveComponent* TargetComponent, bool isSpecial, FVector_NetQuantize ImpactPoint, FVector_NetQuantizeNormal ImpactNormal, class UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // [0x19568f0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PickaxeItem.RefreshSpecialCooldown
	// void RefreshSpecialCooldown();                                                                                           // [0x19568d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxeItem.OnRep_State
	// void OnRep_State(EPickaxeState oldState);                                                                                // [0x1956760] Final|Native|Protected 
	// Function /Script/FSD.PickaxeItem.OnLoadoutChanged
	// void OnLoadoutChanged();                                                                                                 // [0x19566a0] Final|Native|Protected 
	// Function /Script/FSD.PickaxeItem.GetSpecialCooldownProgress
	// float GetSpecialCooldownProgress();                                                                                      // [0x1956340] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PickaxeItem.All_SimulateHitBlock
	// void All_SimulateHitBlock(FVector_NetQuantize Position, int32_t materia, bool removeDebris, bool isSpecial);             // [0x1955af0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.PickaxeItem.All_SimulateDigDebris
	// void All_SimulateDigDebris(FVector_NetQuantize Position, class UFXSystemAsset* Particles, class USoundCue* cue);         // [0x19559c0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.PickaxeItem.All_SimulateDigBlock
	// void All_SimulateDigBlock(FVector_NetQuantize Position, bool SpawnParticles, int32_t Material, float Density, bool isSpecial); // [0x19557d0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.PickaxeItem.All_SimulateDamageTarget
	// void All_SimulateDamageTarget(class UPrimitiveComponent* TargetComponent, bool isSpecial, FVector_NetQuantize ImpactPoint, FVector_NetQuantizeNormal ImpactNormal, class UFSDPhysicalMaterial* PhysMaterial, char BoneIndex); // [0x19555c0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.PickaxeItem.All_DoPowerAttack
	// void All_DoPowerAttack();                                                                                                // [0x18e0d80] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.PickaxePreviewActor
/// Size: 0x0090 (0x000220 - 0x0002B0)
class APickaxePreviewActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class USceneComponent*)                    TP_Root                                                     OFFSET(get<T>, {0x238, 8, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x240, 12, 0, 0})
	CMember(TMap<EPickaxePartLocation, FPickaxeMeshInstance>) EquippedParts                                        OFFSET(get<T>, {0x250, 80, 0, 0})
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UMaterialInterface*)                 EquippedMaterial                                            OFFSET(get<T>, {0x2A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PickaxePreviewActor.PreviewParts
	// void PreviewParts(EPickaxePartLocation PreviewLocation, class UPickaxePart* PreviewPart);                                // [0x1956800] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PickaxePreviewActor.EquipParts
	// void EquipParts();                                                                                                       // [0x19561f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PickaxePart
/// Size: 0x0028 (0x000060 - 0x000088)
class UPickaxePart : public USavablePrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x60, 24, 0, 0})
	CMember(class UItemAquisitionBase*)                Aquisition                                                  OFFSET(get<T>, {0x78, 8, 0, 0})
	CMember(class UPickaxePartItem*)                   Item                                                        OFFSET(get<T>, {0x80, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PickaxePart.GetUnlockedFromStart
	// bool GetUnlockedFromStart();                                                                                             // [0x1956370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PickaxePart.GetPrefferedLocation
	// EPickaxePartLocation GetPrefferedLocation();                                                                             // [0x1956310] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PickaxePartItem
/// Size: 0x0008 (0x000028 - 0x000030)
class UPickaxePartItem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.PickaxeMaterialPart
/// Size: 0x0030 (0x000030 - 0x000060)
class UPickaxeMaterialPart : public UPickaxePartItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TWeakObjectPtr<class UMaterialInterface*>) Material                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDynamicIcon*)                       DynamicIcon                                                 OFFSET(get<T>, {0x58, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PickaxeMaterialPart.CreateIcon
	// class UMaterialInstanceDynamic* CreateIcon(class UObject* Owner);                                                        // [0x1956150] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PickaxeMeshPart
/// Size: 0x0028 (0x000030 - 0x000058)
class UPickaxeMeshPart : public UPickaxePartItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TWeakObjectPtr<class UStaticMesh*>)        Mesh                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.PickaxeHeadPart
/// Size: 0x0000 (0x000058 - 0x000058)
class UPickaxeHeadPart : public UPickaxeMeshPart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FSD.PickaxeBladePart
/// Size: 0x0008 (0x000058 - 0x000060)
class UPickaxeBladePart : public UPickaxeMeshPart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	DMember(bool)                                      RestrictedToBackside                                        OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/FSD.PickaxeShaftPart
/// Size: 0x0000 (0x000058 - 0x000058)
class UPickaxeShaftPart : public UPickaxeMeshPart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FSD.PickaxeHandlePart
/// Size: 0x0000 (0x000058 - 0x000058)
class UPickaxeHandlePart : public UPickaxeMeshPart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Class /Script/FSD.PickaxePommelPart
/// Size: 0x0000 (0x000058 - 0x000058)
class UPickaxePommelPart : public UPickaxeMeshPart
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
};

/// Struct /Script/FSD.DefaultPickaxeParts
/// Size: 0x0050 (0x000000 - 0x000050)
class FDefaultPickaxeParts : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<EPickaxePartLocation, class UPickaxePart*>) Parts                                                 OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/FSD.PickaxeSettings
/// Size: 0x00D0 (0x000030 - 0x000100)
class UPickaxeSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	CMember(TMap<class UPlayerCharacterID*, class UClass*>) PickaxePreviewActors                                   OFFSET(get<T>, {0x30, 80, 0, 0})
	CMember(class UAnimMontage*)                       Salute_FP                                                   OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UAnimMontage*)                       Salute_TP                                                   OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(TArray<class UPickaxePart*>)               Parts                                                       OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TMap<class UItemID*, FDefaultPickaxeParts>) DefaultParts                                               OFFSET(get<T>, {0xA0, 80, 0, 0})
};

/// Class /Script/FSD.PickaxePartEquip
/// Size: 0x0000 (0x000028 - 0x000028)
class UPickaxePartEquip : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Struct /Script/FSD.PillarSegment
/// Size: 0x0008 (0x000000 - 0x000008)
class FPillarSegment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     HeightOffset                                                OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Class /Script/FSD.PillarSettings
/// Size: 0x0038 (0x000030 - 0x000068)
class UPillarSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FPillarSegment>)                    PillarSegments                                              OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FRandRange)                                PointRange                                                  OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	SMember(FRandRange)                                PointNoiseRange                                             OFFSET(getStruct<T>, {0x48, 8, 0, 0})
	SMember(FRandRange)                                PillarRangeScale                                            OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	SMember(FRandRange)                                PillarNoiseRangeScale                                       OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 Noise                                                       OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Class /Script/FSD.PillarGenerationComponent
/// Size: 0x0020 (0x000450 - 0x000470)
class UPillarGenerationComponent : public UGenerationComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(TArray<FVector>)                           Points                                                      OFFSET(get<T>, {0x450, 16, 0, 0})
	DMember(bool)                                      Visible                                                     OFFSET(get<bool>, {0x460, 1, 0, 0})
	CMember(class UPillarSettings*)                    PillarSettings                                              OFFSET(get<T>, {0x468, 8, 0, 0})
};

/// Class /Script/FSD.PillarGenerationItem
/// Size: 0x0008 (0x000228 - 0x000230)
class APillarGenerationItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	CMember(class UPillarGenerationComponent*)         PillarComponent                                             OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/FSD.PilotingStateComponent
/// Size: 0x0020 (0x000100 - 0x000120)
class UPilotingStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(class AActor*)                             Vehicle                                                     OFFSET(get<T>, {0x100, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PilotingStateComponent.Server_MoveRight
	// void Server_MoveRight(float Value);                                                                                      // [0x1956eb0] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.PilotingStateComponent.Server_MoveForward
	// void Server_MoveForward(float Value);                                                                                    // [0x1956e20] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.PilotingStateComponent.OnRep_Vehicle
	// void OnRep_Vehicle();                                                                                                    // [0x19567e0] Final|Native|Protected 
};

/// Class /Script/FSD.PipelineBuilderItem
/// Size: 0x0008 (0x000438 - 0x000440)
class APipelineBuilderItem : public ATrackBuilderItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1088;

public:
	CMember(class UItemPlacerAggregator*)              SegmentPlacer                                               OFFSET(get<T>, {0x438, 8, 0, 0})
};

/// Class /Script/FSD.PipelineFinish
/// Size: 0x0028 (0x000220 - 0x000248)
class APipelineFinish : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(class UTrackBuilderConnectPoint*)          PipelineEndConnection                                       OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USingleUsableComponent*)             UsableOrderExtractor                                        OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UClass*)                             ExtractPodClass                                             OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class APipelineExtractorPod*)              ExtractorPod                                                OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(bool)                                      bPipelineCompleted                                          OFFSET(get<bool>, {0x240, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PipelineFinish.ReceivePipelineCompleted
	// void ReceivePipelineCompleted();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineFinish.ReceiveExtractorPodSpawned
	// void ReceiveExtractorPodSpawned(class APipelineExtractorPod* InExtractorPod);                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineFinish.OnRep_PipelineCompleted
	// void OnRep_PipelineCompleted();                                                                                          // [0x1956700] Final|Native|Protected 
	// Function /Script/FSD.PipelineFinish.OnRep_ExtractorPod
	// void OnRep_ExtractorPod();                                                                                               // [0x19566e0] Final|Native|Protected 
	// Function /Script/FSD.PipelineFinish.OnExtractorPodStateChanged
	// void OnExtractorPodStateChanged(class ARessuplyPod* InExtractorPod, ERessuplyPodState InState);                          // [0x19565d0] Final|Native|Protected 
	// Function /Script/FSD.PipelineFinish.OnExtractorPodOrdered
	// void OnExtractorPodOrdered(class APlayerCharacter* InUser, EInputKeys Key);                                              // [0x1956500] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PipelineFinish.OnConnectedWithSegment
	// void OnConnectedWithSegment(class UTrackBuilderConnectPoint* InConnectPoint, class ATrackBuilderSegment* InSegment);     // [0x1956430] Final|Native|Protected 
	// Function /Script/FSD.PipelineFinish.OnConnectedSegmentActivated
	// void OnConnectedSegmentActivated(class APipelineSegment* InSegment);                                                     // [0x19563a0] Final|Native|Protected 
	// Function /Script/FSD.PipelineFinish.GetLandingOffset
	// FVector GetLandingOffset();                                                                                              // [0x1d6f900] Event|Protected|HasDefaults|BlueprintEvent 
};

/// Class /Script/FSD.PipelineExtractorPod
/// Size: 0x0010 (0x0002E0 - 0x0002F0)
class APipelineExtractorPod : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	CMember(TWeakObjectPtr<class APipelineSegment*>)   ConnectedSegment                                            OFFSET(get<T>, {0x2E0, 8, 0, 0})
	DMember(float)                                     TargetRotation                                              OFFSET(get<float>, {0x2E8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PipelineExtractorPod.SetTargetRotation
	// void SetTargetRotation(class APipelineSegment* InPipelineSegment);                                                       // [0x1957370] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PipelineExtractorPod.ReceiveConnectedToSegment
	// void ReceiveConnectedToSegment(class APipelineSegment* InConnectedSegment);                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineExtractorPod.OnRep_ConnectedSegment
	// void OnRep_ConnectedSegment();                                                                                           // [0x19566c0] Final|Native|Protected 
	// Function /Script/FSD.PipelineExtractorPod.ExtractorPodOrderedEvent
	// void ExtractorPodOrderedEvent(class APlayerCharacter* InUser);                                                           // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.PipelineExtractorPodAnimInstance
/// Size: 0x0038 (0x0002B8 - 0x0002F0)
class UPipelineExtractorPodAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 752;

public:
	DMember(float)                                     ConnectionRotation                                          OFFSET(get<float>, {0x2B8, 4, 0, 0})
	CMember(EPipelineExtractorPodAnimState)            AnimState                                                   OFFSET(get<T>, {0x2BC, 1, 0, 0})
	CMember(ERessuplyPodState)                         PodState                                                    OFFSET(get<T>, {0x2BD, 1, 0, 0})
	CMember(EPipelineBuildState)                       PipelineState                                               OFFSET(get<T>, {0x2BE, 1, 0, 0})
	CMember(ERefineryState)                            RefineryState                                               OFFSET(get<T>, {0x2BF, 1, 0, 0})
	DMember(float)                                     RotationSpeed                                               OFFSET(get<float>, {0x2C0, 4, 0, 0})
	CMember(TWeakObjectPtr<class APipelineExtractorPod*>) pod                                                      OFFSET(get<T>, {0x2C4, 8, 0, 0})
	CMember(TWeakObjectPtr<class APipelineSegment*>)   ConnectedSegment                                            OFFSET(get<T>, {0x2CC, 8, 0, 0})
	CMember(TWeakObjectPtr<class APipelineStart*>)     PipelineStart                                               OFFSET(get<T>, {0x2D4, 8, 0, 0})
	CMember(TWeakObjectPtr<class AFSDRefinery*>)       Refinery                                                    OFFSET(get<T>, {0x2DC, 8, 0, 0})
};

/// Class /Script/FSD.PipelineSegment
/// Size: 0x0118 (0x000290 - 0x0003A8)
class APipelineSegment : public ATrackBuilderSegment
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	SMember(FMulticastInlineDelegate)                  OnPipelineBroken                                            OFFSET(getStruct<T>, {0x290, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPipelineRepaired                                          OFFSET(getStruct<T>, {0x2A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPipelineActivated                                         OFFSET(getStruct<T>, {0x2B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPipelineStateChanged                                      OFFSET(getStruct<T>, {0x2C0, 16, 0, 0})
	CMember(class UStaticMesh*)                        StaticMeshUnassembled                                       OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UStaticMesh*)                        StaticMeshAssembled                                         OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UStaticMesh*)                        StaticMeshFinal                                             OFFSET(get<T>, {0x2E0, 8, 0, 0})
	SMember(FVector)                                   EditorEndLocation                                           OFFSET(getStruct<T>, {0x2E8, 12, 0, 0})
	CMember(TEnumAsByte<ETraceTypeQuery>)              CarvingTraceType                                            OFFSET(get<T>, {0x2F4, 1, 0, 0})
	CMember(class UMaterialInterface*)                 NumberMaterial                                              OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class USingleUsableComponent*)             RepairSegmentUsable                                         OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class USingleUsableComponent*)             ActivateSegmentUsable                                       OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UDroneUseComponent*)                 DroneUsable                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USimpleHealthComponent*)             SegmentHealthComponent                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class USplineComponent*)                   MovementSpline                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class USplineComponent*)                   MovementSplineRight                                         OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class USplineComponent*)                   MovementSplineLeft                                          OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class USplineMeshComponent*)               PipelineMesh                                                OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class USplineMeshComponent*)               PipelineOuterMesh                                           OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             PipelineCapMesh                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             EndPostMesh                                                 OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               EndPostMeshStatic                                           OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UPathfinderSplineSegmentCollisionComponent*) PathfinderComponent                                 OFFSET(get<T>, {0x368, 8, 0, 0})
	DMember(bool)                                      bSegmentBroken                                              OFFSET(get<bool>, {0x370, 1, 0, 0})
	DMember(float)                                     SegmentActivatedProgress                                    OFFSET(get<float>, {0x374, 4, 0, 0})
	CMember(EPipelineBuildState)                       PipelineState                                               OFFSET(get<T>, {0x378, 1, 0, 0})
	CMember(TWeakObjectPtr<class APipelineStart*>)     PipelineStart                                               OFFSET(get<T>, {0x37C, 8, 0, 0})
	DMember(float)                                     MinValidLength                                              OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     MaxValidLength                                              OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     TooSharpExtraLength                                         OFFSET(get<float>, {0x38C, 4, 0, 0})
	DMember(float)                                     TooSteepExtraLength                                         OFFSET(get<float>, {0x390, 4, 0, 0})
	DMember(float)                                     BlockedSphereSize                                           OFFSET(get<float>, {0x394, 4, 0, 0})
	DMember(int32_t)                                   BlockedExtraRaytraceRotationOffset                          OFFSET(get<int32_t>, {0x398, 4, 0, 0})
	DMember(float)                                     BlockedExtraRaytraces                                       OFFSET(get<float>, {0x39C, 4, 0, 0})
	DMember(float)                                     BlockedExtraRaytraceDist                                    OFFSET(get<float>, {0x3A0, 4, 0, 0})
	DMember(float)                                     BlockedRayTraceSuccesses                                    OFFSET(get<float>, {0x3A4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PipelineSegment.UpdateSplineMesh
	// void UpdateSplineMesh(class USplineMeshComponent* InMesh, float InProgress, bool InMoveEndCap);                          // [0x1957400] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PipelineSegment.SetSegmentBroken
	// void SetSegmentBroken(class APlayerCharacter* InUser, bool InSegmentBroken);                                             // [0x1957220] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PipelineSegment.SetPipelineNumberMaterial
	// void SetPipelineNumberMaterial(class UMaterialInterface* InNumberMaterial);                                              // [0x1957190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PipelineSegment.SetEndPostVisible
	// void SetEndPostVisible(bool InVisible);                                                                                  // [0x1957100] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PipelineSegment.ReceiveSegmentBrokenChanged
	// void ReceiveSegmentBrokenChanged(bool InSegmentBroken);                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineSegment.ReceiveSegmentActivatedProgress
	// void ReceiveSegmentActivatedProgress(float InProgress);                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineSegment.ReceiveSegmentActivated
	// void ReceiveSegmentActivated();                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineSegment.ReceivePlacementFinished
	// void ReceivePlacementFinished();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineSegment.ReceivePlacementBegin
	// void ReceivePlacementBegin();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineSegment.PipelineStateDelegate__DelegateSignature
	// void PipelineStateDelegate__DelegateSignature(EPipelineBuildState InPipelineState);                                      // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PipelineSegment.PipelineSegmentDelegate__DelegateSignature
	// void PipelineSegmentDelegate__DelegateSignature(class APipelineSegment* InPipelineSegment);                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PipelineSegment.OnRepaired
	// void OnRepaired(class APlayerCharacter* InUser);                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineSegment.OnRep_SegmentBroken
	// void OnRep_SegmentBroken();                                                                                              // [0x1956740] Final|Native|Protected 
	// Function /Script/FSD.PipelineSegment.OnRep_SegmentActivatedProgress
	// void OnRep_SegmentActivatedProgress();                                                                                   // [0x1956720] Final|Native|Protected 
	// Function /Script/FSD.PipelineSegment.GetPipelineStart
	// class APipelineStart* GetPipelineStart();                                                                                // [0x19562e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PipelineSegment.GetNextPipelineSegment
	// class APipelineSegment* GetNextPipelineSegment(bool bForward);                                                           // [0x1956240] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PipelineSegment.GetIsSegmentActivated
	// bool GetIsSegmentActivated();                                                                                            // [0x1956210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PipelineSegment.CallbackSegmentRepaired
	// void CallbackSegmentRepaired(class APlayerCharacter* InUser, EInputKeys Key);                                            // [0x1956080] Final|Native|Protected 
	// Function /Script/FSD.PipelineSegment.CallbackSegmentDestroyed
	// void CallbackSegmentDestroyed(class UHealthComponentBase* InHealth);                                                     // [0x1955ff0] Final|Native|Protected 
	// Function /Script/FSD.PipelineSegment.CallbackSegmentActivatedProgress
	// void CallbackSegmentActivatedProgress(float InProgress);                                                                 // [0x1955f70] Final|Native|Protected 
	// Function /Script/FSD.PipelineSegment.CallbackSegmentActivated
	// void CallbackSegmentActivated(class APlayerCharacter* InUser, EInputKeys Key);                                           // [0x1955ea0] Final|Native|Protected 
	// Function /Script/FSD.PipelineSegment.CallbackPipelineStateChanged
	// void CallbackPipelineStateChanged(class APipelineStart* InPipelineStart, EPipelineBuildState InState);                   // [0x1955dd0] Final|Native|Protected 
	// Function /Script/FSD.PipelineSegment.CallbackNextSegmentChanged
	// void CallbackNextSegmentChanged(class UTrackBuilderUsable* InUsable, class ATrackBuilderSegment* InSegment);             // [0x1955d00] Final|Native|Protected 
	// Function /Script/FSD.PipelineSegment.CallbackDroneUsed
	// void CallbackDroneUsed(int32_t TimesUsed);                                                                               // [0x1955c70] Final|Native|Protected 
};

/// Class /Script/FSD.PipelineSegmentEndPostAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UPipelineSegmentEndPostAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(float)                                     AssemblyAnimLength                                          OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     AssemblyTimeTarget                                          OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(float)                                     AssemblyTime                                                OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(bool)                                      bAssembling                                                 OFFSET(get<bool>, {0x2C4, 1, 0, 0})
};

/// Class /Script/FSD.PipelineStart
/// Size: 0x0050 (0x000220 - 0x000270)
class APipelineStart : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	SMember(FMulticastInlineDelegate)                  OnBuildStateChanged                                         OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	DMember(int32_t)                                   PipelineID                                                  OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	CMember(class UTrackBuilderUsable*)                PipelineStartUsable                                         OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(EPipelineBuildState)                       BuildState                                                  OFFSET(get<T>, {0x240, 1, 0, 0})
	CMember(class APipelineFinish*)                    PipelineFinish                                              OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class AFSDRefinery*)                       Refinery                                                    OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<APipelineSegment*>>) BrokenSegments                                              OFFSET(get<T>, {0x258, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PipelineStart.ReceiveBuildStateChanged
	// void ReceiveBuildStateChanged(EPipelineBuildState InBuildState);                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PipelineStart.PipelineStartStateDelegate__DelegateSignature
	// void PipelineStartStateDelegate__DelegateSignature(class APipelineStart* InPipelineStart, EPipelineBuildState InPipelineState); // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PipelineStart.PipelineCompleted
	// void PipelineCompleted(class APipelineFinish* InPipelineFinish);                                                         // [0x195b520] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PipelineStart.OnRep_BuildState
	// void OnRep_BuildState();                                                                                                 // [0x195b310] Final|Native|Protected 
	// Function /Script/FSD.PipelineStart.OnNextSegmentChanged
	// void OnNextSegmentChanged(class UTrackBuilderUsable* InUsable, class ATrackBuilderSegment* InSegment);                   // [0x195b0e0] Final|Native|Protected 
	// Function /Script/FSD.PipelineStart.GetAllPipelineSegments
	// TArray<APipelineSegment*> GetAllPipelineSegments();                                                                      // [0x195a9a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PlaceableInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UPlaceableInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.PlaceableItem
/// Size: 0x0028 (0x0003E0 - 0x000408)
class APlaceableItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1032;

public:
	CMember(class UCapacityHoldingItemAggregator*)     Capacity                                                    OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UItemPlacerAggregator*)              ItemPlacer                                                  OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UClass*)                             PlacableClass                                               OFFSET(get<T>, {0x400, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlaceableItem.Server_SpawnItem
	// void Server_SpawnItem(FVector Location);                                                                                 // [0x195b690] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.PlaceableItem.ReceiveItemSpawned
	// void ReceiveItemSpawned(class AActor* SpawnedActor);                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlaceableItem.OnCarriedAmountChanged
	// void OnCarriedAmountChanged(int32_t newAmount);                                                                          // [0x195afc0] Final|Native|Protected 
};

/// Class /Script/FSD.PlagueCleaning
/// Size: 0x0000 (0x000028 - 0x000028)
class UPlagueCleaning : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.PlagueCleaning.GetCleaningPoints
	// class UInfectionPointCleaningComponent* GetCleaningPoints(FVector fromLocation);                                         // [0x195aab0] Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.PlagueCleanupItem
/// Size: 0x0090 (0x0003E0 - 0x000470)
class APlagueCleanupItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1136;

public:
	CMember(class UBoxComponent*)                      DroppedCollider                                             OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UInstantUsable*)                     PickupUsable                                                OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class USphereComponent*)                   UseSphere                                                   OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UCrosshairAggregator*)               CrosshairAggregator                                         OFFSET(get<T>, {0x400, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_FireAnimation                                            OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_FireAnimation                                            OFFSET(get<T>, {0x420, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_Gunsling                                                 OFFSET(get<T>, {0x428, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_Gunsling                                                 OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class UAnimMontage*)                       Item_Gunsling                                               OFFSET(get<T>, {0x438, 8, 0, 0})
	CMember(class USoundCue*)                          UsingSound                                                  OFFSET(get<T>, {0x440, 8, 0, 0})
	DMember(float)                                     UsingSoundFadeout                                           OFFSET(get<float>, {0x448, 4, 0, 0})
	CMember(class USoundCue*)                          UsingSoundTail                                              OFFSET(get<T>, {0x450, 8, 0, 0})
	CMember(class UKeepInsideWorld*)                   KeepInsideWorld                                             OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UAudioComponent*)                    UsingSoundInstance                                          OFFSET(get<T>, {0x460, 8, 0, 0})
	DMember(float)                                     FireRate                                                    OFFSET(get<float>, {0x468, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PlagueCleanupItem.Server_Gunsling
	// void Server_Gunsling();                                                                                                  // [0x17f7e30] Net|Native|Event|Protected|NetServer 
	// Function /Script/FSD.PlagueCleanupItem.Server_EnablePhysics
	// void Server_EnablePhysics(FVector_NetQuantize Direction);                                                                // [0x195b610] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlagueCleanupItem.OnPickupUsed
	// void OnPickupUsed(class APlayerCharacter* User, EInputKeys Key);                                                         // [0x195b1b0] Native|Protected     
	// Function /Script/FSD.PlagueCleanupItem.OnObjectiveChanged
	// void OnObjectiveChanged(class UObjective* Objective);                                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlagueCleanupItem.OnInRangeChanged
	// void OnInRangeChanged(bool InRange);                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueCleanupItem.All_Gunsling
	// void All_Gunsling();                                                                                                     // [0x1847640] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.PlagueCleanupItem.All_EnablePhysics
	// void All_EnablePhysics(FVector_NetQuantize Direction);                                                                   // [0x195a660] Net|NetReliableNative|Event|NetMulticast|Public 
};

/// Class /Script/FSD.CleanupToolAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UCleanupToolAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(bool)                                      isUsing                                                     OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	CMember(class APlagueCleanupItem*)                 CleaningTool                                                OFFSET(get<T>, {0x2C0, 8, 0, 0})
};

/// Struct /Script/FSD.PlacementObstruction
/// Size: 0x0010 (0x000000 - 0x000010)
class FPlacementObstruction : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     range                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x4, 12, 0, 0})
};

/// Class /Script/FSD.PlagueControlActor
/// Size: 0x00C0 (0x000220 - 0x0002E0)
class APlagueControlActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(TArray<FPlacementObstruction>)             Obstructions                                                OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(class UNiagaraComponent*)                  DebrisLightSystem                                           OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UPlagueUsable*)                      CallWeaponPodUsable                                         OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   TargetPlagueMaterial                                        OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UClass*)                             CleanupPodItem                                              OFFSET(get<T>, {0x248, 8, 0, 0})
	DMember(float)                                     MinTimeBetweenWeaponPods                                    OFFSET(get<float>, {0x250, 4, 0, 0})
	DMember(float)                                     MinDistBetweenPods                                          OFFSET(get<float>, {0x254, 4, 0, 0})
	DMember(float)                                     MaxDistFromCenter                                           OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     CanCallPodDistance                                          OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     IgnoreDebrisLightSphere                                     OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     DebrisLightDistanceFromGround                               OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     RemoveDebrisLightUpdateRate                                 OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(bool)                                      DebugDrawDebrisLight                                        OFFSET(get<bool>, {0x26C, 1, 0, 0})
	CMember(TWeakObjectPtr<class APlagueInfectionNode*>) TargetedPlagueNode                                        OFFSET(get<T>, {0x2B8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlagueControlActor.SpawnPodHack
	// void SpawnPodHack(class APlayerCharacter* Player);                                                                       // [0x195ba00] Final|Native|Protected|BlueprintCallable|Const 
	// Function /Script/FSD.PlagueControlActor.SetCanUseWeaponPod
	// void SetCanUseWeaponPod(bool Value);                                                                                     // [0x195b720] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlagueControlActor.PushDebrisLights
	// void PushDebrisLights();                                                                                                 // [0x195b5b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlagueControlActor.EquipPlaguePod
	// void EquipPlaguePod(class APlayerCharacter* Player);                                                                     // [0x195a910] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlagueControlActor.CanDropWeaponPod
	// bool CanDropWeaponPod(float& TimeLeft);                                                                                  // [0x195a6e0] Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PlagueInfectionNode
/// Size: 0x0130 (0x000220 - 0x000350)
class APlagueInfectionNode : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	SMember(FMulticastInlineDelegate)                  OnFirstPlayerNearCenter                                     OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlagueCenterKilled                                        OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	CMember(class USimpleHealthComponent*)             HealthComponent                                             OFFSET(get<T>, {0x250, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  TriggerCleanupTutorial                                      OFFSET(getStruct<T>, {0x2A8, 16, 0, 0})
	CMember(class UTerrainMaterial*)                   PlagueTerrainMaterial                                       OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(float)                                     NodeInfluenceRadius                                         OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(int32_t)                                   NumberOfDeathEffectParticles                                OFFSET(get<int32_t>, {0x2C4, 4, 0, 0})
	DMember(float)                                     HealthPercentageToKill                                      OFFSET(get<float>, {0x2C8, 4, 0, 0})
	CMember(class UClass*)                             WormPodClass                                                OFFSET(get<T>, {0x2D0, 8, 0, 0})
	DMember(float)                                     ImportantLocationRadius                                     OFFSET(get<float>, {0x2D8, 4, 0, 0})
	CMember(TArray<class AActor*>)                     ActiveWorms                                                 OFFSET(get<T>, {0x2E0, 16, 0, 0})
	CMember(TArray<class AActor*>)                     ActivePods                                                  OFFSET(get<T>, {0x2F0, 16, 0, 0})
	DMember(int32_t)                                   MaxWormCount                                                OFFSET(get<int32_t>, {0x300, 4, 0, 0})
	DMember(float)                                     WormPodInterval                                             OFFSET(get<float>, {0x308, 4, 0, 0})
	DMember(int32_t)                                   MinWormPodWave                                              OFFSET(get<int32_t>, {0x30C, 4, 0, 0})
	DMember(int32_t)                                   MaxWormPodWave                                              OFFSET(get<int32_t>, {0x310, 4, 0, 0})
	CMember(class UDebrisPositioning*)                 WormPodPositioning                                          OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UCurveFloat*)                        AvoidCost                                                   OFFSET(get<T>, {0x320, 8, 0, 0})
	DMember(float)                                     WormSpawnTimeDeviation                                      OFFSET(get<float>, {0x328, 4, 0, 0})
	DMember(float)                                     PassiveWormSpawnTime                                        OFFSET(get<float>, {0x32C, 4, 0, 0})
	DMember(float)                                     ActiveWormSpawnTime                                         OFFSET(get<float>, {0x330, 4, 0, 0})
	DMember(float)                                     WormSpawnRange                                              OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     ActivationRange                                             OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(bool)                                      HasCleanPodBeenSpawned                                      OFFSET(get<bool>, {0x33D, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PlagueInfectionNode.OnWormSpawned
	// void OnWormSpawned(class AActor* worm);                                                                                  // [0x195b490] Final|Native|Protected 
	// Function /Script/FSD.PlagueInfectionNode.OnWormDestroyed
	// void OnWormDestroyed(class AActor* DestroyedActor);                                                                      // [0x195b400] Final|Native|Protected 
	// Function /Script/FSD.PlagueInfectionNode.OnPodDestroyed
	// void OnPodDestroyed(class AActor* DestroyedActor);                                                                       // [0x195b280] Final|Native|Protected 
	// Function /Script/FSD.PlagueInfectionNode.OnDeath
	// void OnDeath(class UHealthComponentBase* Health);                                                                        // [0x195b050] Final|Native|Protected 
	// Function /Script/FSD.PlagueInfectionNode.CountNodePlague
	// void CountNodePlague();                                                                                                  // [0x195a790] Final|Native|Public  
};

/// Class /Script/FSD.ImpactIndicator
/// Size: 0x0138 (0x000220 - 0x000358)
class AImpactIndicator : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 856;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USceneComponent*)                    InnerScaler                                                 OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USceneComponent*)                    OuterScaler                                                 OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        OuterGrowthCurve                                            OFFSET(getStruct<T>, {0x238, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        InnerGrowthCurve                                            OFFSET(getStruct<T>, {0x2C0, 136, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x348, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ImpactIndicator.SetRadius
	// void SetRadius(float Radius);                                                                                            // [0x195b840] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.DropInfo
/// Size: 0x001C (0x000000 - 0x00001C)
class FDropInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   from                                                        OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   to                                                          OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(bool)                                      HasLanded                                                   OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Class /Script/FSD.PlagueMeteor
/// Size: 0x0160 (0x000220 - 0x000380)
class APlagueMeteor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               MeteorMesh                                                  OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UTerrainPlacementComponent*)         terrainPlacement                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UDamageComponent*)                   ImpactDamage                                                OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(bool)                                      ManuallyTargeted                                            OFFSET(get<bool>, {0x240, 1, 0, 0})
	CMember(TArray<class UStaticMesh*>)                stages                                                      OFFSET(get<T>, {0x248, 16, 0, 0})
	DMember(int32_t)                                   CrackStage                                                  OFFSET(get<int32_t>, {0x258, 4, 0, 0})
	SMember(FDropInfo)                                 DropInfo                                                    OFFSET(getStruct<T>, {0x25C, 28, 0, 0})
	CMember(class UClass*)                             DropzoneIndicatorClass                                      OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class AImpactIndicator*)                   DropZoneIndicator                                           OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x288, 8, 0, 0})
	SMember(FVector)                                   DropDirection                                               OFFSET(getStruct<T>, {0x290, 12, 0, 0})
	DMember(float)                                     IndicatorTime                                               OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     VisualsTime                                                 OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     NearImpactTime                                              OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     LastAudioTime                                               OFFSET(get<float>, {0x2B0, 4, 0, 0})
	DMember(float)                                     LocationVariance                                            OFFSET(get<float>, {0x2B4, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        DropImpactCurve                                             OFFSET(getStruct<T>, {0x2C8, 136, 0, 0})
	CMember(class UClass*)                             RockCrackerPod                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UClass*)                             RockCrackerIndicator                                        OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 RockCrackerPodPositioning                                   OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(TArray<class ARockCrackerPod*>)            SpawnedPods                                                 OFFSET(get<T>, {0x368, 16, 0, 0})
	DMember(float)                                     SpawnedTime                                                 OFFSET(get<float>, {0x378, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PlagueMeteor.SignalEventStarted
	// void SignalEventStarted();                                                                                               // [0x195b9e0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlagueMeteor.SignalEventEnded
	// void SignalEventEnded(bool wasSuccess);                                                                                  // [0x195b950] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlagueMeteor.SetStage
	// void SetStage(int32_t Stage);                                                                                            // [0x195b8c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlagueMeteor.SetDropTarget
	// void SetDropTarget(FVector& Location);                                                                                   // [0x195b7b0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlagueMeteor.ResetStage
	// void ResetStage();                                                                                                       // [0x195b5f0] Final|Native|Public  
	// Function /Script/FSD.PlagueMeteor.RegressStage
	// void RegressStage();                                                                                                     // [0x195b5d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlagueMeteor.OnStageAdvanced
	// void OnStageAdvanced(int32_t Stage);                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueMeteor.OnRep_DropInfo
	// void OnRep_DropInfo();                                                                                                   // [0x195b3e0] Final|Native|Protected 
	// Function /Script/FSD.PlagueMeteor.OnRep_CrackStage
	// void OnRep_CrackStage();                                                                                                 // [0x195b330] Final|Native|Protected 
	// Function /Script/FSD.PlagueMeteor.NearImpact
	// void NearImpact();                                                                                                       // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueMeteor.LastaudioSignal
	// void LastaudioSignal();                                                                                                  // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueMeteor.Impacted_Latejoin
	// void Impacted_Latejoin();                                                                                                // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueMeteor.Impacted
	// void Impacted();                                                                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueMeteor.HasLandedOnTopOfRefineryPipes
	// bool HasLandedOnTopOfRefineryPipes(float minDistanceToPipes);                                                            // [0x195ae90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlagueMeteor.GetPods
	// TArray<ARockCrackerPod*> GetPods();                                                                                      // [0x195adc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlagueMeteor.GetPodAtIndex
	// class ARockCrackerPod* GetPodAtIndex(int32_t Index);                                                                     // [0x195ad20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlagueMeteor.GetNumActivePods
	// int32_t GetNumActivePods();                                                                                              // [0x195ab50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlagueMeteor.EnableVisuals
	// void EnableVisuals();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueMeteor.DropStarted
	// void DropStarted();                                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueMeteor.DropRockCrackerPods
	// void DropRockCrackerPods(int32_t amount, float MinRadius, float maRadius, class AProceduralSetup* Setup);                // [0x195a7b0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlagueMeteor.DestroyAndSpawnHearts_FailSafe
	// void DestroyAndSpawnHearts_FailSafe();                                                                                   // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlagueMeteor.AdvanceStage
	// void AdvanceStage();                                                                                                     // [0x195a640] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PlagueObjective
/// Size: 0x00C0 (0x000180 - 0x000240)
class UPlagueObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	DMember(int32_t)                                   StartPlagueAmount                                           OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(int32_t)                                   CurrentPlagueAmount                                         OFFSET(get<int32_t>, {0x184, 4, 0, 0})
	DMember(int32_t)                                   TargetPlagueAmount                                          OFFSET(get<int32_t>, {0x188, 4, 0, 0})
	DMember(float)                                     PercentageRequiredForCompletion                             OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(int32_t)                                   SpawningTowersCount                                         OFFSET(get<int32_t>, {0x190, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   NodeKilledShout                                             OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   LastNodeKilledShout                                         OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OverridePrimaryObjCompletedShout_SelfCompleted              OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   OverridePrimaryObjCompletedShout_SelfNotCompleted           OFFSET(get<T>, {0x1B0, 8, 0, 0})
	DMember(bool)                                      AllPlagueCleaned                                            OFFSET(get<bool>, {0x1B8, 1, 0, 0})
	CMember(class APlagueControlActor*)                PlagueController                                            OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             PlagueControllerClass                                       OFFSET(get<T>, {0x1C8, 40, 0, 0})
	CMember(TArray<class APlagueInfectionNode*>)       ActivePlagueCenters                                         OFFSET(get<T>, {0x1F0, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ScriptedPlagueWave                                          OFFSET(get<T>, {0x200, 40, 0, 0})
	DMember(float)                                     ScriptedPlagueWaveWeight                                    OFFSET(get<float>, {0x228, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PlagueObjective.OnRep_CurrentPlagueAmount
	// void OnRep_CurrentPlagueAmount(int32_t OldAmount);                                                                       // [0x195b350] Final|Native|Protected 
	// Function /Script/FSD.PlagueObjective.GetPlagueCenters
	// TArray<APlagueInfectionNode*> GetPlagueCenters();                                                                        // [0x195ab80] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PlaguePuddle
/// Size: 0x0010 (0x000250 - 0x000260)
class APlaguePuddle : public AAdicPuddle
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	DMember(uint16_t)                                  MaxPlaguePiles                                              OFFSET(get<uint16_t>, {0x258, 2, 0, 0})


	/// Functions
	// Function /Script/FSD.PlaguePuddle.Receive_OnVacuumed
	// void Receive_OnVacuumed();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.PlagueUsable
/// Size: 0x0030 (0x000170 - 0x0001A0)
class UPlagueUsable : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	SMember(FText)                                     CanDropText                                                 OFFSET(getStruct<T>, {0x170, 24, 0, 0})
	SMember(FText)                                     CannotDropText                                              OFFSET(getStruct<T>, {0x188, 24, 0, 0})
};

/// Class /Script/FSD.PlagueWorm
/// Size: 0x0000 (0x0003B0 - 0x0003B0)
class APlagueWorm : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 944;

public:
};

/// Class /Script/FSD.PlanetZoneSetup
/// Size: 0x0010 (0x000030 - 0x000040)
class UPlanetZoneSetup : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UPlanetZone*>)                PlanetZones                                                 OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PlanetZoneSetup.GetPlanetZoneForBiome
	// class UPlanetZone* GetPlanetZoneForBiome(class UBiome* Biome, int32_t& zoneIndex);                                       // [0x195ac40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PlanetZone
/// Size: 0x0040 (0x000030 - 0x000070)
class UPlanetZone : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<class UBiome*>)                     Biomes                                                      OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FRequiredMissionItem>)              RequiredMissions                                            OFFSET(get<T>, {0x48, 16, 0, 0})
	DMember(bool)                                      MustBeUnlocked                                              OFFSET(get<bool>, {0x58, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x5C, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PlanetZone.IsUnlocked
	// bool IsUnlocked(class UFSDSaveGame* SaveGame);                                                                           // [0x195af20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlanetZone.GetSavegameID
	// FGuid GetSavegameID();                                                                                                   // [0x195ae50] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlanetZone.GetBiomes
	// TArray<UBiome*> GetBiomes();                                                                                             // [0x195aa20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PlasmaBoomerang
/// Size: 0x0050 (0x0002E8 - 0x000338)
class APlasmaBoomerang : public AGrenade
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UBoxComponent*)                      Collision                                                   OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               Mesh                                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class USceneComponent*)                    MeshPivot                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UCurveVector*)                       ArcCurve                                                    OFFSET(get<T>, {0x310, 8, 0, 0})
	DMember(float)                                     StartSmoothTime                                             OFFSET(get<float>, {0x318, 4, 0, 0})
	DMember(float)                                     RotationSpeed                                               OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     ArcSpeed                                                    OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     HomingAcceleration                                          OFFSET(get<float>, {0x324, 4, 0, 0})
	DMember(bool)                                      IsHoming                                                    OFFSET(get<bool>, {0x328, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PlasmaBoomerang.BeginOverlap
	// void BeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x195da70] Final|Native|Private|HasOutParms 
};

/// Class /Script/FSD.PlasmaCarbine
/// Size: 0x0070 (0x000780 - 0x0007F0)
class APlasmaCarbine : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2032;

public:
	DMember(float)                                     RateOfFireBoostOnFullShield                                 OFFSET(get<float>, {0x780, 4, 0, 0})
	DMember(bool)                                      RemoveShieldOnOverheat                                      OFFSET(get<bool>, {0x784, 1, 0, 0})
	DMember(bool)                                      RemoveShieldOnReload                                        OFFSET(get<bool>, {0x785, 1, 0, 0})
	DMember(float)                                     HeatEffectsThreshold                                        OFFSET(get<float>, {0x788, 4, 0, 0})
	CMember(class UAnimMontage*)                       FP_CharacterOverheatEndMontage                              OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_CharacterOverheatEndMontage                              OFFSET(get<T>, {0x798, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_ItemOverheatEndMontage                                  OFFSET(get<T>, {0x7A0, 8, 0, 0})
	CMember(class UAnimMontage*)                       FP_CharacterReloadEndMontage                                OFFSET(get<T>, {0x7A8, 8, 0, 0})
	CMember(class UAnimMontage*)                       TP_CharacterReloadEndMontage                                OFFSET(get<T>, {0x7B0, 8, 0, 0})
	CMember(class UAnimMontage*)                       WPN_ItemReloadEndMontage                                    OFFSET(get<T>, {0x7B8, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReloadPressed                                             OFFSET(getStruct<T>, {0x7E0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PlasmaCarbine.Server_ReloadPressed
	// void Server_ReloadPressed();                                                                                             // [0x17f4bf0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlasmaCarbine.ApplyShieldDamage
	// void ApplyShieldDamage();                                                                                                // [0x17f4bd0] Net|NetReliableNative|Event|Protected|NetServer 
};

/// Class /Script/FSD.PlatformProjectile
/// Size: 0x0000 (0x000340 - 0x000340)
class APlatformProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 832;

public:


	/// Functions
	// Function /Script/FSD.PlatformProjectile.MeltPlatformAroundPlayers
	// void MeltPlatformAroundPlayers(FVector platformLocation);                                                                // [0x195df00] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.PlayerAfflictionOverlay
/// Size: 0x0050 (0x000030 - 0x000080)
class UPlayerAfflictionOverlay : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(class UTexture2D*)                         Texture                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FLinearColor)                              TextureTint                                                 OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	CMember(class UClass*)                             WidgetOverride                                              OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(int32_t)                                   ZOrder                                                      OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          Audio2D_OnBegin                                             OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.PlayerAfflictionOverlayWidget
/// Size: 0x0010 (0x000260 - 0x000270)
class UPlayerAfflictionOverlayWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	DMember(bool)                                      bOverlayActive                                              OFFSET(get<bool>, {0x260, 1, 0, 0})
	CMember(class UPlayerAfflictionOverlay*)           Overlay                                                     OFFSET(get<T>, {0x268, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerAfflictionOverlayWidget.ReceiveEndOverlay
	// void ReceiveEndOverlay();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlayerAfflictionOverlayWidget.ReceiveBeginOverlay
	// void ReceiveBeginOverlay(class UTexture2D* InTexture, FLinearColor InTint);                                              // [0x1d6f900] Event|Protected|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.PlayerAfflictionOverlayWidget.EndOverlay
	// void EndOverlay();                                                                                                       // [0x195de20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerAfflictionOverlayWidget.BeginOverlay
	// void BeginOverlay(class UPlayerAfflictionOverlay* InOverlay);                                                            // [0x195dc90] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PlayerAfflictionComponent
/// Size: 0x0078 (0x000260 - 0x0002D8)
class UPlayerAfflictionComponent : public UPawnAfflictionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 728;

public:
	SMember(FMulticastInlineDelegate)                  OnShowOverlay                                               OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHideOverlay                                               OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	CMember(TMap<class UPlayerAfflictionOverlay*, int32_t>) ActiveOverlays                                         OFFSET(get<T>, {0x280, 80, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   Character                                                   OFFSET(get<T>, {0x2D0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerAfflictionComponent.ShowPlayerOverlay
	// void ShowPlayerOverlay(class UPlayerAfflictionOverlay* Overlay);                                                         // [0x195e2a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerAfflictionComponent.OverlayDelegate__DelegateSignature
	// void OverlayDelegate__DelegateSignature(class UPlayerAfflictionOverlay* Overlay);                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PlayerAfflictionComponent.HidePlayerOverlay
	// void HidePlayerOverlay(class UPlayerAfflictionOverlay* Overlay);                                                         // [0x195de70] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.EnemyPawnAfflictionComponent
/// Size: 0x0000 (0x000260 - 0x000260)
class UEnemyPawnAfflictionComponent : public UPawnAfflictionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
};

/// Class /Script/FSD.DeepPatherFinderCharacterAfflictionComponent
/// Size: 0x0008 (0x000260 - 0x000268)
class UDeepPatherFinderCharacterAfflictionComponent : public UPawnAfflictionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(class ADeepPathfinderCharacter*)           Character                                                   OFFSET(get<T>, {0x260, 8, 0, 0})
};

/// Class /Script/FSD.StaticObjectAfflictionComponent
/// Size: 0x0008 (0x000260 - 0x000268)
class UStaticObjectAfflictionComponent : public UPawnAfflictionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(class UStaticMeshComponent*)               Mesh                                                        OFFSET(get<T>, {0x260, 8, 0, 0})
};

/// Class /Script/FSD.AnimatedObjectAfflictionComponent
/// Size: 0x0008 (0x000260 - 0x000268)
class UAnimatedObjectAfflictionComponent : public UPawnAfflictionComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x260, 8, 0, 0})
};

/// Class /Script/FSD.PlayerAnimInstance
/// Size: 0x0148 (0x0002B8 - 0x000400)
class UPlayerAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	DMember(bool)                                      IsFirstPerson                                               OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(float)                                     WalkTreshhold                                               OFFSET(get<float>, {0x2C4, 4, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UParticleSystem*)                    DefaultFootstepParticle                                     OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class USoundCue*)                          DefaultFootStepSound                                        OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         AnimationSetA                                               OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         AnimationSetB                                               OFFSET(get<T>, {0x2E8, 8, 0, 0})
	DMember(bool)                                      AnimationSetAIsPrimary                                      OFFSET(get<bool>, {0x2F0, 1, 0, 0})
	CMember(ECharacterState)                           CharacterState                                              OFFSET(get<T>, {0x2F1, 1, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x2F4, 4, 0, 0})
	DMember(float)                                     WalkAnimationSpeed                                          OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(float)                                     RunAnimationSpeed                                           OFFSET(get<float>, {0x2FC, 4, 0, 0})
	DMember(float)                                     WalkRate                                                    OFFSET(get<float>, {0x300, 4, 0, 0})
	DMember(float)                                     RunRate                                                     OFFSET(get<float>, {0x304, 4, 0, 0})
	DMember(float)                                     Direction                                                   OFFSET(get<float>, {0x308, 4, 0, 0})
	SMember(FRotator)                                  AimRotation                                                 OFFSET(getStruct<T>, {0x30C, 12, 0, 0})
	DMember(bool)                                      IsInitialized                                               OFFSET(get<bool>, {0x318, 1, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(bool)                                      IsStandingDown                                              OFFSET(get<bool>, {0x320, 1, 0, 0})
	DMember(bool)                                      IsInAir                                                     OFFSET(get<bool>, {0x321, 1, 0, 0})
	DMember(bool)                                      IsMoving                                                    OFFSET(get<bool>, {0x322, 1, 0, 0})
	DMember(bool)                                      IsWalking                                                   OFFSET(get<bool>, {0x323, 1, 0, 0})
	DMember(bool)                                      IsSprinting                                                 OFFSET(get<bool>, {0x324, 1, 0, 0})
	DMember(bool)                                      IsAiming                                                    OFFSET(get<bool>, {0x325, 1, 0, 0})
	DMember(bool)                                      IsAlive                                                     OFFSET(get<bool>, {0x326, 1, 0, 0})
	DMember(bool)                                      IsLyingDown                                                 OFFSET(get<bool>, {0x327, 1, 0, 0})
	DMember(bool)                                      OnZipline                                                   OFFSET(get<bool>, {0x328, 1, 0, 0})
	DMember(bool)                                      IsGrinding                                                  OFFSET(get<bool>, {0x329, 1, 0, 0})
	DMember(bool)                                      IsParalyzed                                                 OFFSET(get<bool>, {0x32A, 1, 0, 0})
	DMember(bool)                                      IsGrabbed                                                   OFFSET(get<bool>, {0x32B, 1, 0, 0})
	DMember(bool)                                      IsAttached                                                  OFFSET(get<bool>, {0x32C, 1, 0, 0})
	DMember(bool)                                      BeingRevived                                                OFFSET(get<bool>, {0x32D, 1, 0, 0})
	DMember(bool)                                      IsLookingAtMap                                              OFFSET(get<bool>, {0x32E, 1, 0, 0})
	DMember(bool)                                      IsControllingEnemy                                          OFFSET(get<bool>, {0x32F, 1, 0, 0})
	DMember(bool)                                      IsUsingJetBoots                                             OFFSET(get<bool>, {0x330, 1, 0, 0})
	DMember(bool)                                      IsUsingTraversalTool                                        OFFSET(get<bool>, {0x331, 1, 0, 0})
	DMember(float)                                     TraversalToolTargetHorizontalOffset                         OFFSET(get<float>, {0x334, 4, 0, 0})
	DMember(float)                                     TraversalToolTargetVerticalOffset                           OFFSET(get<float>, {0x338, 4, 0, 0})
	DMember(float)                                     TraversalToolSpeedRate                                      OFFSET(get<float>, {0x33C, 4, 0, 0})
	SMember(FVector)                                   ControllingEnemyRootOffset                                  OFFSET(getStruct<T>, {0x340, 12, 0, 0})
	SMember(FVector)                                   ControllingEnemyDirectionAlpha                              OFFSET(getStruct<T>, {0x34C, 12, 0, 0})
	DMember(float)                                     GliderAnimationLength                                       OFFSET(get<float>, {0x358, 4, 0, 0})
	SMember(FGliderAnimSync)                           GliderAnimSync                                              OFFSET(getStruct<T>, {0x35C, 32, 0, 0})
	DMember(bool)                                      IsAllowedToPlayMovementAnim                                 OFFSET(get<bool>, {0x37C, 1, 0, 0})
	DMember(float)                                     CropBeard                                                   OFFSET(get<float>, {0x380, 4, 0, 0})
	CMember(class UAnimMontage*)                       ActiveUseMontage                                            OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UUseAnimationSetting*)               CurrentUseSetting                                           OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UAnimMontage*)                       EndUseMontageToPlay                                         OFFSET(get<T>, {0x3A8, 8, 0, 0})
	DMember(float)                                     AimDuration                                                 OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     ReviveProgress                                              OFFSET(get<float>, {0x3B4, 4, 0, 0})
	DMember(float)                                     ReviveExplicitTime                                          OFFSET(get<float>, {0x3B8, 4, 0, 0})
	DMember(float)                                     IdleTimeForInspect                                          OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     RepeatDealayForInspect                                      OFFSET(get<float>, {0x3CC, 4, 0, 0})
	CMember(ECharacterMoveDirection)                   CharacterMoveDirection                                      OFFSET(get<T>, {0x3D0, 1, 0, 0})
	DMember(float)                                     MoveAdjustmentAngle                                         OFFSET(get<float>, {0x3D4, 4, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         CarryAnimationSet                                           OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         DefaultAnimationSet                                         OFFSET(get<T>, {0x3E0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerAnimInstance.StopUseMontage
	// bool StopUseMontage(bool stopImmediately);                                                                               // [0x195e330] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerAnimInstance.StopInspectWeapon
	// void StopInspectWeapon();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlayerAnimInstance.StartInspectWeapon
	// void StartInspectWeapon();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlayerAnimInstance.SetAiming
	// void SetAiming();                                                                                                        // [0x195e160] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerAnimInstance.PlayUseMontages
	// void PlayUseMontages(class UUseAnimationSetting* useSetting);                                                            // [0x195e0b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerAnimInstance.IsPlayingMontageInGroup
	// bool IsPlayingMontageInGroup(FName GroupName);                                                                           // [0x1859fe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerAnimInstance.GetAnimationSet
	// class UItemCharacterAnimationSet* GetAnimationSet();                                                                     // [0x195de40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerAnimInstance.CalculateDirectionVertical
	// float CalculateDirectionVertical(FVector& TargetDirection, FRotator& BaseRotation);                                      // [0x195dd20] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PlayerFPAnimInstance
/// Size: 0x00C0 (0x000400 - 0x0004C0)
class UPlayerFPAnimInstance : public UPlayerAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	SMember(FRotator)                                  WeaponRecoil                                                OFFSET(getStruct<T>, {0x400, 12, 0, 0})
	DMember(float)                                     HeadBobScale                                                OFFSET(get<float>, {0x40C, 4, 0, 0})
	DMember(float)                                     WeaponSwayRecoverySpeed                                     OFFSET(get<float>, {0x410, 4, 0, 0})
	DMember(float)                                     WeaponSwayAlphaRecoverySpeed                                OFFSET(get<float>, {0x414, 4, 0, 0})
	SMember(FRotator)                                  WeaponSwayAngle                                             OFFSET(getStruct<T>, {0x418, 12, 0, 0})
	DMember(float)                                     WeaponSwayMaxAngle                                          OFFSET(get<float>, {0x424, 4, 0, 0})
	SMember(FRotator)                                  CameraAntiSwayAngle                                         OFFSET(getStruct<T>, {0x428, 12, 0, 0})
	DMember(float)                                     WeaponSwayAlpha                                             OFFSET(get<float>, {0x434, 4, 0, 0})
	DMember(float)                                     WeaponSwayToApply                                           OFFSET(get<float>, {0x438, 4, 0, 0})
	SMember(FVector)                                   CameraOffset                                                OFFSET(getStruct<T>, {0x43C, 12, 0, 0})
	SMember(FVector)                                   NegativeCameraOffset                                        OFFSET(getStruct<T>, {0x458, 12, 0, 0})
	DMember(bool)                                      HeadOnlyMode                                                OFFSET(get<bool>, {0x464, 1, 0, 0})
	SMember(FRotator)                                  HeadRotation                                                OFFSET(getStruct<T>, {0x468, 12, 0, 0})
	CMember(class UAnimSequence*)                      FP_Idle                                                     OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_Walk                                                     OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_Sprint                                                   OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_JumpStart                                                OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_JumpLoop                                                 OFFSET(get<T>, {0x498, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_JumpLand                                                 OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_JumpLand_Aim                                             OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UAnimSequence*)                      FP_Downed                                                   OFFSET(get<T>, {0x4B0, 8, 0, 0})
};

/// Class /Script/FSD.PlayerTPAnimInstance
/// Size: 0x0260 (0x000400 - 0x000660)
class UPlayerTPAnimInstance : public UPlayerAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	DMember(float)                                     RigidBodyBlend                                              OFFSET(get<float>, {0x400, 4, 0, 0})
	DMember(bool)                                      RigidBodyOn                                                 OFFSET(get<bool>, {0x404, 1, 0, 0})
	DMember(float)                                     UpperBodyBlend                                              OFFSET(get<float>, {0x408, 4, 0, 0})
	DMember(float)                                     AimingValue                                                 OFFSET(get<float>, {0x40C, 4, 0, 0})
	SMember(FRotator)                                  CounerMoveadjustmentAngleRotator                            OFFSET(getStruct<T>, {0x410, 12, 0, 0})
	DMember(bool)                                      FullBodyAnimActive                                          OFFSET(get<bool>, {0x41C, 1, 0, 0})
	DMember(float)                                     FullBodyBlendTime                                           OFFSET(get<float>, {0x420, 4, 0, 0})
	DMember(float)                                     BodyTurnRecoverySpeed                                       OFFSET(get<float>, {0x424, 4, 0, 0})
	DMember(float)                                     BodyTurnMaxAngle                                            OFFSET(get<float>, {0x428, 4, 0, 0})
	DMember(float)                                     BodyTurnLerpEXP                                             OFFSET(get<float>, {0x42C, 4, 0, 0})
	DMember(float)                                     TurnAnimationDuration                                       OFFSET(get<float>, {0x430, 4, 0, 0})
	DMember(bool)                                      bCaveLeechBiting                                            OFFSET(get<bool>, {0x440, 1, 0, 0})
	DMember(float)                                     CaveLeechBiteReactDelay                                     OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(bool)                                      IsResettingBodyTurn                                         OFFSET(get<bool>, {0x44C, 1, 0, 0})
	SMember(FRotator)                                  BodyTurn                                                    OFFSET(getStruct<T>, {0x450, 12, 0, 0})
	SMember(FRotator)                                  CounterBodyTurn                                             OFFSET(getStruct<T>, {0x45C, 12, 0, 0})
	DMember(bool)                                      TurningLeft                                                 OFFSET(get<bool>, {0x468, 1, 0, 0})
	DMember(bool)                                      TurningRight                                                OFFSET(get<bool>, {0x469, 1, 0, 0})
	DMember(float)                                     TurnProgress                                                OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(bool)                                      HasPickedUpItem                                             OFFSET(get<bool>, {0x470, 1, 0, 0})
	DMember(bool)                                      IsLyingDownNoTransition                                     OFFSET(get<bool>, {0x471, 1, 0, 0})
	DMember(int32_t)                                   danceMove                                                   OFFSET(get<int32_t>, {0x474, 4, 0, 0})
	CMember(class UAnimSequence*)                      DanceSequence                                               OFFSET(get<T>, {0x478, 8, 0, 0})
	DMember(bool)                                      isDancing                                                   OFFSET(get<bool>, {0x480, 1, 0, 0})
	DMember(float)                                     PickedUpItemBlend                                           OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     AttachedBodyTurnFactor                                      OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     AttachedHeadTurnFactor                                      OFFSET(get<float>, {0x48C, 4, 0, 0})
	SMember(FRotator)                                  AttachedBodyRotation                                        OFFSET(getStruct<T>, {0x490, 12, 0, 0})
	SMember(FRotator)                                  AttachedHeadRotation                                        OFFSET(getStruct<T>, {0x49C, 12, 0, 0})
	CMember(class UBlendSpace1D*)                      TP_LookUpDown                                               OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      TP_LookUpDown_Aim                                           OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      A_TP_LookUpDown_Aim                                         OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UBlendSpace1D*)                      B_TP_LookUpDown_Aim                                         OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_JumpLoop                                                 OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_JumpLoop_Aim                                             OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_JumpStart                                                OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_JumpStart_Aim                                            OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Sprint                                                   OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Idle                                                   OFFSET(get<T>, {0x4F8, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Idle                                                   OFFSET(get<T>, {0x500, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Idle_Aim                                               OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Idle_Aim                                               OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_LookForward                                              OFFSET(get<T>, {0x518, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_LookForward                                            OFFSET(get<T>, {0x520, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_LookForward                                            OFFSET(get<T>, {0x528, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_LookForward_Aim                                        OFFSET(get<T>, {0x530, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_LookForward_Aim                                        OFFSET(get<T>, {0x538, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Walk_Forward                                           OFFSET(get<T>, {0x540, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Walk_Forward                                           OFFSET(get<T>, {0x548, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Run_Forward                                            OFFSET(get<T>, {0x550, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Run_Forward                                            OFFSET(get<T>, {0x558, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Walk_Forward_Aim                                       OFFSET(get<T>, {0x560, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Walk_Forward_Aim                                       OFFSET(get<T>, {0x568, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Run_Forward_Aim                                        OFFSET(get<T>, {0x570, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Run_Forward_Aim                                        OFFSET(get<T>, {0x578, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Walk_Right                                             OFFSET(get<T>, {0x580, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Walk_Right                                             OFFSET(get<T>, {0x588, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Run_Right                                              OFFSET(get<T>, {0x590, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Run_Right                                              OFFSET(get<T>, {0x598, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Walk_Right_Aim                                         OFFSET(get<T>, {0x5A0, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Walk_Right_Aim                                         OFFSET(get<T>, {0x5A8, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Run_Right_Aim                                          OFFSET(get<T>, {0x5B0, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Run_Right_Aim                                          OFFSET(get<T>, {0x5B8, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Walk_Left                                              OFFSET(get<T>, {0x5C0, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Walk_Left                                              OFFSET(get<T>, {0x5C8, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Run_Left                                               OFFSET(get<T>, {0x5D0, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Run_Left                                               OFFSET(get<T>, {0x5D8, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Walk_Left_Aim                                          OFFSET(get<T>, {0x5E0, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Walk_Left_Aim                                          OFFSET(get<T>, {0x5E8, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Run_Left_Aim                                           OFFSET(get<T>, {0x5F0, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Run_Left_Aim                                           OFFSET(get<T>, {0x5F8, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Walk_Back                                              OFFSET(get<T>, {0x600, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Walk_Back                                              OFFSET(get<T>, {0x608, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Run_Back                                               OFFSET(get<T>, {0x610, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Run_Back                                               OFFSET(get<T>, {0x618, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Walk_Back_Aim                                          OFFSET(get<T>, {0x620, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Walk_Back_Aim                                          OFFSET(get<T>, {0x628, 8, 0, 0})
	CMember(class UAnimSequence*)                      A_TP_Run_Back_Aim                                           OFFSET(get<T>, {0x630, 8, 0, 0})
	CMember(class UAnimSequence*)                      B_TP_Run_Back_Aim                                           OFFSET(get<T>, {0x638, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Revived                                                  OFFSET(get<T>, {0x640, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Downed                                                   OFFSET(get<T>, {0x648, 8, 0, 0})
	CMember(class UAnimSequence*)                      TP_Downed_Loop                                              OFFSET(get<T>, {0x650, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerTPAnimInstance.SetOverrideFullBody
	// void SetOverrideFullBody(bool overrideEnabled);                                                                          // [0x195e210] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PlayerBufferComponent
/// Size: 0x0088 (0x0000B0 - 0x000138)
class UPlayerBufferComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 312;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UMeshComponent*)                     ManualMeshReference                                         OFFSET(get<T>, {0xB8, 8, 0, 0})
	SMember(FName)                                     BufferParticleSocket                                        OFFSET(getStruct<T>, {0xC0, 8, 0, 0})
	CMember(class UParticleSystem*)                    Particles                                                   OFFSET(get<T>, {0xC8, 8, 0, 0})
	DMember(float)                                     ParticleTangentSize                                         OFFSET(get<float>, {0xD0, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBuffingChangedEvent                                       OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	DMember(float)                                     BuffRadius                                                  OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(int32_t)                                   MaxBuffedTargets                                            OFFSET(get<int32_t>, {0xEC, 4, 0, 0})
	DMember(int32_t)                                   PushAmount                                                  OFFSET(get<int32_t>, {0xF0, 4, 0, 0})
	CMember(TArray<class APlayerCharacter*>)           BuffTargets                                                 OFFSET(get<T>, {0xF8, 16, 0, 0})
	CMember(TArray<class UParticleSystemComponent*>)   ParticleInstances                                           OFFSET(get<T>, {0x108, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerBufferComponent.SetBuffingEnabled
	// void SetBuffingEnabled(bool Enabled);                                                                                    // [0x195e180] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerBufferComponent.ReducePushAmount
	// void ReducePushAmount();                                                                                                 // [0x195e140] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerBufferComponent.OnPawnDied
	// void OnPawnDied(class UHealthComponentBase* Health);                                                                     // [0x195e020] Final|Native|Protected 
	// Function /Script/FSD.PlayerBufferComponent.OnOwnerDied
	// void OnOwnerDied(class UHealthComponentBase* Health);                                                                    // [0x195df90] Final|Native|Protected 
};

/// Class /Script/FSD.PlayerCameraDrone
/// Size: 0x01D8 (0x000280 - 0x000458)
class APlayerCameraDrone : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1112;

public:
	SMember(FMulticastInlineDelegate)                  OnMarkerPlaced                                              OFFSET(getStruct<T>, {0x280, 16, 0, 0})
	CMember(class UPawnMovementComponent*)             Movement                                                    OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(int32_t)                                   MenuTab                                                     OFFSET(get<int32_t>, {0x298, 4, 0, 0})
	DMember(bool)                                      SplineMeshIsVisible                                         OFFSET(get<bool>, {0x29C, 1, 0, 0})
	DMember(float)                                     SplineSpeed                                                 OFFSET(get<float>, {0x2A0, 4, 0, 0})
	DMember(float)                                     MouseSensitivity                                            OFFSET(get<float>, {0x2A4, 4, 0, 0})
	DMember(float)                                     CameraRoll                                                  OFFSET(get<float>, {0x2A8, 4, 0, 0})
	DMember(bool)                                      CameraDoesShake                                             OFFSET(get<bool>, {0x2AC, 1, 0, 0})
	DMember(bool)                                      IsFollowingPlayerRotation                                   OFFSET(get<bool>, {0x2AD, 1, 0, 0})
	SMember(FVector)                                   FollowPositionOffset                                        OFFSET(getStruct<T>, {0x2B0, 12, 0, 0})
	DMember(bool)                                      UseFreeRotation                                             OFFSET(get<bool>, {0x2BC, 1, 0, 0})
	DMember(bool)                                      UseDOF                                                      OFFSET(get<bool>, {0x2BD, 1, 0, 0})
	CMember(class UClass*)                             VanitySpawnable                                             OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UClass*)                             VanityWeaponSpawnable                                       OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UAnimationAsset*>>)  VanityCharacterAnimations                                   OFFSET(get<T>, {0x2D0, 16, 0, 0})
	DMember(int32_t)                                   SelectedVanityClassIndex                                    OFFSET(get<int32_t>, {0x2E0, 4, 0, 0})
	DMember(int32_t)                                   SelectedVanityAnimation                                     OFFSET(get<int32_t>, {0x2E4, 4, 0, 0})
	CMember(TArray<class AVanityCharacter*>)           VanityCharacterInstances                                    OFFSET(get<T>, {0x2E8, 16, 0, 0})
	CMember(TArray<class AVanityCharacter*>)           StaticVanityCharacterInstances                              OFFSET(get<T>, {0x2F8, 16, 0, 0})
	CMember(class UClass*)                             DroneMarker                                                 OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class ALaserPointerMarker*)                ActiveMarker                                                OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UClass*)                             Flare                                                       OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(TArray<class AActor*>)                     FlareInstances                                              OFFSET(get<T>, {0x320, 16, 0, 0})
	CMember(class UClass*)                             BounceFlare                                                 OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(TArray<class AActor*>)                     BounceFlareInstances                                        OFFSET(get<T>, {0x348, 16, 0, 0})
	CMember(class AActor*)                             SplineInstance                                              OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(TArray<class AActor*>)                     SplineMeshInstances                                         OFFSET(get<T>, {0x370, 16, 0, 0})
	CMember(class UClass*)                             Spline                                                      OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UClass*)                             SplineMesh                                                  OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class AActor*)                             PlayerFollowed                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class AActor*)                             WeaponTrackActor                                            OFFSET(get<T>, {0x438, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerCameraDrone.ToggleSplineMeshVisibility
	// bool ToggleSplineMeshVisibility();                                                                                       // [0x1967260] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.SetRotationalPivotToPlayer
	// void SetRotationalPivotToPlayer();                                                                                       // [0x1966300] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.SetFlareLightSettings
	// void SetFlareLightSettings(float Intensity, float range, float Color);                                                   // [0x1965ed0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.SetCameraShakeAmount
	// bool SetCameraShakeAmount(float Value);                                                                                  // [0x1965db0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.SetBounceFlareLightSettings
	// void SetBounceFlareLightSettings(float Intensity, float range, float Color);                                             // [0x1965c10] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.SaveLightConfig
	// void SaveLightConfig();                                                                                                  // [0x1964800] Final|Native|Private|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.ResetFollowVariables
	// void ResetFollowVariables();                                                                                             // [0x1964760] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.ResetAllLights
	// void ResetAllLights();                                                                                                   // [0x1964740] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.OnFlareHit
	// void OnFlareHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, FVector NormalImpulse, FHitResult& Hit); // [0x1964140] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.PlayerCameraDrone.LoadLightConfig
	// void LoadLightConfig();                                                                                                  // [0x1963e20] Final|Native|Private|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.GetFlareLightSettings
	// FVector GetFlareLightSettings();                                                                                         // [0x1963400] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.GetBounceFlareLightSettings
	// FVector GetBounceFlareLightSettings();                                                                                   // [0x19631c0] Final|Native|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.CreateHUD
	// void CreateHUD();                                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlayerCameraDrone.ClearFocusPoint
	// void ClearFocusPoint();                                                                                                  // [0x1962ba0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCameraDrone.All_BeginCountdown
	// void All_BeginCountdown();                                                                                               // [0x18a6c40] Net|NetReliableNative|Event|NetMulticast|Public 
};

/// Struct /Script/FSD.DownCameraSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FDownCameraSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   Target                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   TargetIndex                                                 OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     MinPitch                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxPitch                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SmoothSpeed                                                 OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/FSD.HoldButton
/// Size: 0x0028 (0x000000 - 0x000028)
class FHoldButton : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FText)                                     HoldingText                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(float)                                     HoldStartTime                                               OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     HoldDuration                                                OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FSD.AnalogAimSettings
/// Size: 0x0048 (0x000000 - 0x000048)
class FAnalogAimSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FVector2D)                                 AimRate                                                     OFFSET(getStruct<T>, {0x20, 8, 0, 0})
	CMember(class UCurveFloat*)                        SensitivityCurve                                            OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(float)                                     LookAtStickyness                                            OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     StickynessRecoverySpeed                                     OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     StickynessMaxSensitivity                                    OFFSET(get<float>, {0x38, 4, 0, 0})
	SMember(FVector2D)                                 ThirdPersonLookRate                                         OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
};

/// Struct /Script/FSD.CameraSpringSettings
/// Size: 0x003C (0x000000 - 0x00003C)
class FCameraSpringSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 60;

public:
	DMember(bool)                                      SpringEnabled                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     StepThreshold                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	SMember(FVector2D)                                 SpringExtend                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     RetractStrength                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     RetractDownReduction                                        OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      ShowDebug                                                   OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     LastSpeedZ                                                  OFFSET(get<float>, {0x1C, 4, 0, 0})
	SMember(FVector)                                   LastLocation                                                OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	SMember(FVector)                                   StartSpringLocation                                         OFFSET(getStruct<T>, {0x2C, 12, 0, 0})
	DMember(bool)                                      bSpringInitialized                                          OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Class /Script/FSD.PlayerCharacter
/// Size: 0x09D8 (0x0004B8 - 0x000E90)
class APlayerCharacter : public ACharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3728;

public:
	SMember(FMulticastInlineDelegate)                  OnStartedUsingItem                                          OFFSET(getStruct<T>, {0x4D8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStoppedUsingItem                                          OFFSET(getStruct<T>, {0x4E8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFirePressed                                               OFFSET(getStruct<T>, {0x4F8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFireReleased                                              OFFSET(getStruct<T>, {0x508, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGrenadePressed                                            OFFSET(getStruct<T>, {0x518, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPerkInitialized                                           OFFSET(getStruct<T>, {0x528, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInstantRevivePossibleEvent                                OFFSET(getStruct<T>, {0x538, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnGenericAnimNotify                                         OFFSET(getStruct<T>, {0x548, 16, 0, 0})
	CMember(class UHeightenedSenseComponent*)          HeightenedSenseComponent                                    OFFSET(get<T>, {0x558, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCollectedEverything                                       OFFSET(getStruct<T>, {0x560, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCollectedSchematic                                        OFFSET(getStruct<T>, {0x570, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCollectedSkin                                             OFFSET(getStruct<T>, {0x580, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCollectedDrink                                            OFFSET(getStruct<T>, {0x590, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCollectedVictoryPose                                      OFFSET(getStruct<T>, {0x5A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCollectedPickaxePart                                      OFFSET(getStruct<T>, {0x5B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCollectedVanityItem                                       OFFSET(getStruct<T>, {0x5C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCameraModeChanged                                         OFFSET(getStruct<T>, {0x5D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDownCameraTargetChanged                                   OFFSET(getStruct<T>, {0x5E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnActionHoldProgress                                        OFFSET(getStruct<T>, {0x5F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnThrowCarriableProgress                                    OFFSET(getStruct<T>, {0x600, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnJumpPressed                                               OFFSET(getStruct<T>, {0x610, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnJumpReleased                                              OFFSET(getStruct<T>, {0x620, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSecondaryFirePressed                                      OFFSET(getStruct<T>, {0x630, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSecondaryFireReleased                                     OFFSET(getStruct<T>, {0x640, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnManualMiningBegin                                         OFFSET(getStruct<T>, {0x650, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnManualMiningEnd                                           OFFSET(getStruct<T>, {0x660, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLaserPointerPressed                                       OFFSET(getStruct<T>, {0x670, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLaserPointerReleased                                      OFFSET(getStruct<T>, {0x680, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTerrainScannerPressed                                     OFFSET(getStruct<T>, {0x690, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTerrainScannerReleased                                    OFFSET(getStruct<T>, {0x6A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFlareThrown                                               OFFSET(getStruct<T>, {0x6B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnUpdateMeshes                                              OFFSET(getStruct<T>, {0x6C0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnOpenChat                                                  OFFSET(getStruct<T>, {0x6D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAcceptInvite                                              OFFSET(getStruct<T>, {0x6E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRejectInvite                                              OFFSET(getStruct<T>, {0x6F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnIgnoreInvite                                              OFFSET(getStruct<T>, {0x700, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnToggleMapTool                                             OFFSET(getStruct<T>, {0x710, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnToggleScanTool                                            OFFSET(getStruct<T>, {0x720, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDepthChanged                                              OFFSET(getStruct<T>, {0x730, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterStateChanged                                     OFFSET(getStruct<T>, {0x740, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterDeathChange                                      OFFSET(getStruct<T>, {0x750, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDamagedEnemy                                              OFFSET(getStruct<T>, {0x760, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLaserPointerEvent                                         OFFSET(getStruct<T>, {0x770, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSecondaryLaserPointerEvent                                OFFSET(getStruct<T>, {0x780, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSaluteEvent                                               OFFSET(getStruct<T>, {0x790, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerShout                                               OFFSET(getStruct<T>, {0x7A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBoscoSalute                                               OFFSET(getStruct<T>, {0x7B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRevivedEvent                                              OFFSET(getStruct<T>, {0x7D0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReviveCallEvent                                           OFFSET(getStruct<T>, {0x7E0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRevivedOtherCharacter                                     OFFSET(getStruct<T>, {0x7F0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHeadlightOnChanged                                        OFFSET(getStruct<T>, {0x800, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCallDonkey                                                OFFSET(getStruct<T>, {0x810, 16, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x820, 32, 0, 0})
	CMember(class UDialogDataAsset*)                   AttentionShoutOverride                                      OFFSET(get<T>, {0x840, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             JetBootsComponentSpawnable                                  OFFSET(get<T>, {0x848, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             JetBootsComponentMK2Spawnable                               OFFSET(get<T>, {0x870, 40, 0, 0})
	CMember(class UZipLineStateComponent*)             ZipLineStateComponent                                       OFFSET(get<T>, {0x898, 8, 0, 0})
	CMember(TArray<class UClass*>)                     EscapableGrabberEnemies                                     OFFSET(get<T>, {0x8A0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnKilledGrabber                                             OFFSET(getStruct<T>, {0x8B0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPerkActivationTimerFinished                               OFFSET(getStruct<T>, {0x8C0, 16, 0, 0})
	CMember(class UPerkHUDActivationWidget*)           BoundPerkActivationW                                        OFFSET(get<T>, {0x8D0, 8, 0, 0})
	DMember(float)                                     PerkActivationTimer                                         OFFSET(get<float>, {0x8D8, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCanEscapeGrabberChanged                                   OFFSET(getStruct<T>, {0x8E0, 16, 0, 0})
	CMember(class UClass*)                             GrabbedByClass                                              OFFSET(get<T>, {0x8F0, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCoolDownProgress                                          OFFSET(getStruct<T>, {0x8F8, 16, 0, 0})
	DMember(bool)                                      bIsBeingBittenByCaveLeech                                   OFFSET(get<bool>, {0x908, 1, 0, 0})
	CMember(class UWidgetInteractionComponent*)        WidgetInteraction                                           OFFSET(get<T>, {0x910, 8, 0, 0})
	CMember(TArray<FPlatformComponent>)                PlatformComponentClasses                                    OFFSET(get<T>, {0x918, 16, 0, 0})
	SMember(FDownCameraSettings)                       DownCameraSettings                                          OFFSET(getStruct<T>, {0x93C, 24, 0, 0})
	CMember(TArray<TWeakObjectPtr<AShieldGeneratorActor*>>) ActiveShieldGenerators                                 OFFSET(get<T>, {0x968, 16, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x97C, 16, 0, 0})
	SMember(FVector)                                   EstimatedVelocity                                           OFFSET(getStruct<T>, {0x98C, 12, 0, 0})
	SMember(FHoldButton)                               FlareHeadlightButton                                        OFFSET(getStruct<T>, {0x9A8, 40, 0, 0})
	SMember(FHoldButton)                               CycleItemButton                                             OFFSET(getStruct<T>, {0x9D0, 40, 0, 0})
	SMember(FHoldButton)                               ToggleHUDButton                                             OFFSET(getStruct<T>, {0xA00, 40, 0, 0})
	DMember(float)                                     EquipLaserpointerHoldDuration                               OFFSET(get<float>, {0xA28, 4, 0, 0})
	DMember(bool)                                      IsPressingMovementInputKey                                  OFFSET(get<bool>, {0xA2C, 1, 0, 0})
	CMember(class UPlayerCharacterID*)                 characterID                                                 OFFSET(get<T>, {0xA48, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             TutorialManagerType                                         OFFSET(get<T>, {0xA50, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             TutorialManagerSpacerig                                     OFFSET(get<T>, {0xA78, 40, 0, 0})
	CMember(class USkeletalMeshComponent*)             FPMesh                                                      OFFSET(get<T>, {0xAA0, 8, 0, 0})
	CMember(class UCameraComponent*)                   FirstPersonCamera                                           OFFSET(get<T>, {0xAA8, 8, 0, 0})
	CMember(class USceneComponent*)                    FirstPersonRoot                                             OFFSET(get<T>, {0xAB0, 8, 0, 0})
	CMember(class UActorTrackingComponent*)            ActorTracking                                               OFFSET(get<T>, {0xAB8, 8, 0, 0})
	CMember(class UCharacterIntoxicationComponent*)    IntoxicationComponent                                       OFFSET(get<T>, {0xAC0, 8, 0, 0})
	CMember(class UMissionStatsCollector*)             MissionStatsCollector                                       OFFSET(get<T>, {0xAC8, 8, 0, 0})
	CMember(class USpringArmComponent*)                ThirdPersonSpringArm                                        OFFSET(get<T>, {0xAD0, 8, 0, 0})
	CMember(class UCameraComponent*)                   ThirdPersonCamera                                           OFFSET(get<T>, {0xAD8, 8, 0, 0})
	CMember(class UPointLightComponent*)               ThirdPersonLight                                            OFFSET(get<T>, {0xAE0, 8, 0, 0})
	CMember(class USpringArmComponent*)                FollowSpringArm                                             OFFSET(get<T>, {0xAE8, 8, 0, 0})
	CMember(class UCameraComponent*)                   FollowCamera                                                OFFSET(get<T>, {0xAF0, 8, 0, 0})
	CMember(class UCameraComponent*)                   DownCamera                                                  OFFSET(get<T>, {0xAF8, 8, 0, 0})
	CMember(class UCharacterCameraController*)         CameraController                                            OFFSET(get<T>, {0xB00, 8, 0, 0})
	CMember(class UPlayerHealthComponent*)             HealthComponent                                             OFFSET(get<T>, {0xB08, 8, 0, 0})
	CMember(class UCharacterSightComponent*)           SightComponent                                              OFFSET(get<T>, {0xB10, 8, 0, 0})
	CMember(class UInventoryComponent*)                InventoryComponent                                          OFFSET(get<T>, {0xB18, 8, 0, 0})
	CMember(class UCharacterUseComponent*)             UseComponentNew                                             OFFSET(get<T>, {0xB20, 8, 0, 0})
	CMember(class USingleUsableComponent*)             UsableComponent                                             OFFSET(get<T>, {0xB28, 8, 0, 0})
	CMember(class UOutlineComponent*)                  OutlineComponent                                            OFFSET(get<T>, {0xB30, 8, 0, 0})
	CMember(class UCharacterRecoilComponent*)          RecoilComponent                                             OFFSET(get<T>, {0xB38, 8, 0, 0})
	CMember(class UStatusEffectsComponent*)            StatusEffectsComponent                                      OFFSET(get<T>, {0xB40, 8, 0, 0})
	CMember(class UPawnStatsComponent*)                PawnStatsComponent                                          OFFSET(get<T>, {0xB48, 8, 0, 0})
	CMember(class UPlayerAfflictionComponent*)         PawnAfflictionComponent                                     OFFSET(get<T>, {0xB50, 8, 0, 0})
	CMember(class UPlayerInfoComponent*)               PlayerInfoComponent                                         OFFSET(get<T>, {0xB58, 8, 0, 0})
	CMember(class UPlayerAttackPositionComponent*)     AttackerPositioningComponent                                OFFSET(get<T>, {0xB60, 8, 0, 0})
	CMember(class UCommunicationComponent*)            CommunicationComponent                                      OFFSET(get<T>, {0xB68, 8, 0, 0})
	CMember(class UPlayerTemperatureComponent*)        TemperatureComponent                                        OFFSET(get<T>, {0xB70, 8, 0, 0})
	CMember(class UPlayerInfectionComponent*)          InfectionComponent                                          OFFSET(get<T>, {0xB78, 8, 0, 0})
	CMember(class UPlayerReactiveTerrainTrackerComponent*) ReactiveTerrainTracker                                  OFFSET(get<T>, {0xB80, 8, 0, 0})
	CMember(class UInstantUsable*)                     TrackGrindUsableComponent                                   OFFSET(get<T>, {0xB88, 8, 0, 0})
	DMember(float)                                     RunningSpeed                                                OFFSET(get<float>, {0xB90, 4, 0, 0})
	DMember(float)                                     RunBoost                                                    OFFSET(get<float>, {0xB94, 4, 0, 0})
	DMember(float)                                     RunBoostChargeTime                                          OFFSET(get<float>, {0xB98, 4, 0, 0})
	CMember(class USoundCue*)                          RunBoostActivationSound                                     OFFSET(get<T>, {0xBA0, 8, 0, 0})
	CMember(class UParticleSystem*)                    RunBoostParticles                                           OFFSET(get<T>, {0xBA8, 8, 0, 0})
	CMember(class UPawnAffliction*)                    RunBoostAffliction                                          OFFSET(get<T>, {0xBB8, 8, 0, 0})
	CMember(class UPhysicsAsset*)                      HangingPhysicsAsset                                         OFFSET(get<T>, {0xBC0, 8, 0, 0})
	DMember(float)                                     HangingSimulationBlend                                      OFFSET(get<float>, {0xBC8, 4, 0, 0})
	DMember(bool)                                      IsPlayableCharacter                                         OFFSET(get<bool>, {0xBD4, 1, 0, 0})
	CMember(class UAudioComponent*)                    SprintSoundComponent                                        OFFSET(get<T>, {0xBD8, 8, 0, 0})
	CMember(class USoundCue*)                          SpringSound                                                 OFFSET(get<T>, {0xBE0, 8, 0, 0})
	SMember(FAnalogAimSettings)                        AimSettings                                                 OFFSET(getStruct<T>, {0xBE8, 72, 0, 0})
	DMember(float)                                     DownedCameraMinPitch                                        OFFSET(get<float>, {0xC30, 4, 0, 0})
	DMember(float)                                     DownedCameraMaxPitch                                        OFFSET(get<float>, {0xC34, 4, 0, 0})
	DMember(float)                                     TurnToFaceScannerAngularSpeed                               OFFSET(get<float>, {0xC38, 4, 0, 0})
	DMember(float)                                     Turn180Time                                                 OFFSET(get<float>, {0xC3C, 4, 0, 0})
	DMember(float)                                     CarryingMovementSpeedPenalty                                OFFSET(get<float>, {0xC40, 4, 0, 0})
	DMember(float)                                     CarryingMaxFallVelocity                                     OFFSET(get<float>, {0xC44, 4, 0, 0})
	DMember(float)                                     MaxThrowProgress                                            OFFSET(get<float>, {0xC48, 4, 0, 0})
	DMember(float)                                     MaxThrowHoldDuration                                        OFFSET(get<float>, {0xC4C, 4, 0, 0})
	DMember(float)                                     CarryingThrowMinForce                                       OFFSET(get<float>, {0xC54, 4, 0, 0})
	DMember(float)                                     CarryingThrowMaxForce                                       OFFSET(get<float>, {0xC58, 4, 0, 0})
	DMember(float)                                     PlayerVelocityToThrowFactor                                 OFFSET(get<float>, {0xC5C, 4, 0, 0})
	CMember(class UClass*)                             CarryingThrowingStatusEffect                                OFFSET(get<T>, {0xC70, 8, 0, 0})
	DMember(float)                                     ThrowCarriableProgress                                      OFFSET(get<float>, {0xC7C, 4, 0, 0})
	CMember(TMap<char, class UCharacterStateComponent*>) CharacterStates                                           OFFSET(get<T>, {0xC80, 80, 0, 0})
	CMember(TWeakObjectPtr<class ATutorialManager*>)   TutorialManager                                             OFFSET(get<T>, {0xCD0, 8, 0, 0})
	CMember(class UCharacterStateComponent*)           ActiveCharacterState                                        OFFSET(get<T>, {0xCD8, 8, 0, 0})
	DMember(bool)                                      IsInDropPod                                                 OFFSET(get<bool>, {0xCE3, 1, 0, 0})
	DMember(bool)                                      IsInEscapePod                                               OFFSET(get<bool>, {0xCE4, 1, 0, 0})
	DMember(float)                                     ButtonMemoryDuration                                        OFFSET(get<float>, {0xCE8, 4, 0, 0})
	DMember(bool)                                      IsRunning                                                   OFFSET(get<bool>, {0xCEC, 1, 0, 0})
	DMember(bool)                                      CanDash                                                     OFFSET(get<bool>, {0xCED, 1, 0, 0})
	DMember(float)                                     DashInputWindow                                             OFFSET(get<float>, {0xCF4, 4, 0, 0})
	DMember(float)                                     DashFowardMovementMinRequirement                            OFFSET(get<float>, {0xCF8, 4, 0, 0})
	DMember(float)                                     DashRightMovementMaxRequirement                             OFFSET(get<float>, {0xCFC, 4, 0, 0})
	DMember(float)                                     DashControllerMinValueRequired                              OFFSET(get<float>, {0xD00, 4, 0, 0})
	DMember(float)                                     DashCooldown                                                OFFSET(get<float>, {0xD04, 4, 0, 0})
	CMember(class UClass*)                             DashStatusEffect                                            OFFSET(get<T>, {0xD08, 8, 0, 0})
	DMember(float)                                     ForwardInput                                                OFFSET(get<float>, {0xD10, 4, 0, 0})
	DMember(float)                                     RightInput                                                  OFFSET(get<float>, {0xD14, 4, 0, 0})
	DMember(float)                                     ControllerForwardInput                                      OFFSET(get<float>, {0xD18, 4, 0, 0})
	DMember(float)                                     ControllerRightInput                                        OFFSET(get<float>, {0xD1C, 4, 0, 0})
	DMember(float)                                     StoppedRunningTime                                          OFFSET(get<float>, {0xD2C, 4, 0, 0})
	DMember(float)                                     ShoutPressedTime                                            OFFSET(get<float>, {0xD30, 4, 0, 0})
	DMember(bool)                                      bIsUsingItemPressed                                         OFFSET(get<bool>, {0xD34, 1, 0, 0})
	DMember(bool)                                      bIsUsingPressed                                             OFFSET(get<bool>, {0xD35, 1, 0, 0})
	DMember(float)                                     UsingDelay                                                  OFFSET(get<float>, {0xD38, 4, 0, 0})
	DMember(bool)                                      HeadLightOn                                                 OFFSET(get<bool>, {0xD3C, 1, 0, 0})
	DMember(bool)                                      isUsing                                                     OFFSET(get<bool>, {0xD3D, 1, 0, 0})
	DMember(float)                                     JumpPressedTime                                             OFFSET(get<float>, {0xD40, 4, 0, 0})
	DMember(bool)                                      CanMove                                                     OFFSET(get<bool>, {0xD44, 1, 0, 0})
	DMember(bool)                                      CanAim                                                      OFFSET(get<bool>, {0xD45, 1, 0, 0})
	DMember(bool)                                      CanUseItem                                                  OFFSET(get<bool>, {0xD46, 1, 0, 0})
	DMember(bool)                                      CanUseLaserpointer                                          OFFSET(get<bool>, {0xD47, 1, 0, 0})
	DMember(bool)                                      CanChangeItems                                              OFFSET(get<bool>, {0xD48, 1, 0, 0})
	DMember(bool)                                      CanMine                                                     OFFSET(get<bool>, {0xD49, 1, 0, 0})
	DMember(bool)                                      CanSalute                                                   OFFSET(get<bool>, {0xD4A, 1, 0, 0})
	DMember(bool)                                      IsStandingDown                                              OFFSET(get<bool>, {0xD4B, 1, 0, 0})
	DMember(bool)                                      InDanceRange                                                OFFSET(get<bool>, {0xD4D, 1, 0, 0})
	DMember(bool)                                      isDancing                                                   OFFSET(get<bool>, {0xD4E, 1, 0, 0})
	DMember(float)                                     DanceStartTime                                              OFFSET(get<float>, {0xD50, 4, 0, 0})
	CMember(class UFSDAchievement*)                    HappyFeetAchievement                                        OFFSET(get<T>, {0xD58, 8, 0, 0})
	DMember(int32_t)                                   danceMove                                                   OFFSET(get<int32_t>, {0xD60, 4, 0, 0})
	CMember(ECharacterCameraMode)                      CameraMode                                                  OFFSET(get<T>, {0xD64, 1, 0, 0})
	DMember(bool)                                      IsInCharacterSelectionWorld                                 OFFSET(get<bool>, {0xD65, 1, 0, 0})
	DMember(bool)                                      bShouldSpawnAnimEffects                                     OFFSET(get<bool>, {0xD66, 1, 0, 0})
	DMember(float)                                     IdleTime                                                    OFFSET(get<float>, {0xD68, 4, 0, 0})
	CMember(class UAnimMontage*)                       FPDrinkSalute                                               OFFSET(get<T>, {0xD70, 8, 0, 0})
	CMember(class UAnimMontage*)                       TPDrinkSalute                                               OFFSET(get<T>, {0xD78, 8, 0, 0})
	CMember(class UAnimMontage*)                       CurrentSaluteMontage                                        OFFSET(get<T>, {0xD80, 8, 0, 0})
	CMember(TArray<class UMaterialInterface*>)         CachedMaterials                                             OFFSET(get<T>, {0xD90, 16, 0, 0})
	DMember(bool)                                      BlockTrackGrindOnLanded                                     OFFSET(get<bool>, {0xDA0, 1, 0, 0})
	SMember(FString)                                   SteamClassID                                                OFFSET(getStruct<T>, {0xDB8, 16, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           RadarMaterialInstance                                       OFFSET(get<T>, {0xDC8, 8, 0, 0})
	DMember(int32_t)                                   RadarMaterialAngleParameterIndex                            OFFSET(get<int32_t>, {0xDD0, 4, 0, 0})
	SMember(FVector)                                   LastUpdateVisibiltyPos                                      OFFSET(getStruct<T>, {0xDD4, 12, 0, 0})
	SMember(FVector)                                   SpawnLocation                                               OFFSET(getStruct<T>, {0xDE0, 12, 0, 0})
	CMember(class UFSDPhysicalMaterial*)               FallbackPhysicalMaterial                                    OFFSET(get<T>, {0xDF0, 8, 0, 0})
	DMember(bool)                                      ClientReady                                                 OFFSET(get<bool>, {0xDF9, 1, 0, 0})
	CMember(class UCharacterStateComponent*)           NextCharacterState                                          OFFSET(get<T>, {0xE00, 8, 0, 0})
	DMember(bool)                                      PlayerIsLeavingInDroppod                                    OFFSET(get<bool>, {0xE10, 1, 0, 0})
	DMember(bool)                                      CanInstantRevive                                            OFFSET(get<bool>, {0xE1C, 1, 0, 0})
	DMember(bool)                                      HasInitializedPerks                                         OFFSET(get<bool>, {0xE1E, 1, 0, 0})
	CMember(class UCharacterVanityComponent*)          CharacterVanity                                             OFFSET(get<T>, {0xE38, 8, 0, 0})
	SMember(FCameraSpringSettings)                     CameraSpringSettings                                        OFFSET(getStruct<T>, {0xE4C, 60, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerCharacter.UseZipLine
	// void UseZipLine(class AZipLineProjectile* ZipLine, FVector& Start, FVector& End);                                        // [0x19672b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Unparalyze
	// void Unparalyze();                                                                                                       // [0x1967290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.ToggleScanTool
	// void ToggleScanTool(bool Visible);                                                                                       // [0x19671c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.ToggleHUDReleased
	// void ToggleHUDReleased();                                                                                                // [0x1967170] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.ToggleHUDPressed
	// void ToggleHUDPressed();                                                                                                 // [0x1967150] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.ToggleHeadLight
	// void ToggleHeadLight();                                                                                                  // [0x1967190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.ThrowFlareReleased
	// void ThrowFlareReleased();                                                                                               // [0x1967130] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.ThrowFlarePressed
	// void ThrowFlarePressed();                                                                                                // [0x1967110] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.ThrowFlare
	// void ThrowFlare();                                                                                                       // [0x19670f0] Final|Native|Public  
	// Function /Script/FSD.PlayerCharacter.StopUsingItem
	// void StopUsingItem();                                                                                                    // [0x19670d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.StartTutorials
	// void StartTutorials(bool ResetTutorials);                                                                                // [0x1967040] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.StartPerkActivation
	// void StartPerkActivation(class UPerkHUDActivationWidget* PerkActivationWidget, float HoldTime);                          // [0x1966f70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SpawnSoundAttached
	// class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, float PriorityOverride, FName AttachPointName, FVector Location, FRotator Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration); // [0x1966af0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SpawnSoundAtLocation
	// class UAudioComponent* SpawnSoundAtLocation(class USoundBase* Sound, FVector Location, FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, bool SendVibration); // [0x19667d0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SpawnSound2D
	// class UAudioComponent* SpawnSound2D(class USoundBase* Sound, float PriorityOverride, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool SendVibration); // [0x1966510] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.ShowSimpleHoldProgress
	// void ShowSimpleHoldProgress(class APlayerController* PlayerController, FText& InDescription, float InProgress);          // [0x19663b0] Final|Native|Static|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetStandingDown
	// void SetStandingDown(bool standingDown);                                                                                 // [0x1966320] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetRadarMaterialInstance
	// void SetRadarMaterialInstance(class UMaterialInstanceDynamic* matInstance);                                              // [0x1966270] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetOutsideShieldGenerator
	// void SetOutsideShieldGenerator(class AShieldGeneratorActor* Shield);                                                     // [0x19661e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetIsCharacterSelectionModel
	// void SetIsCharacterSelectionModel();                                                                                     // [0x19661c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetInstantUsables
	// void SetInstantUsables(bool Value);                                                                                      // [0x1966130] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.SetInsideShieldGenerator
	// void SetInsideShieldGenerator(class AShieldGeneratorActor* Shield);                                                      // [0x19660a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetInCharacterSelectionWorld
	// void SetInCharacterSelectionWorld();                                                                                     // [0x1966080] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetHeadLight
	// void SetHeadLight(bool On);                                                                                              // [0x1965ff0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetFallbackPhysicalMaterial
	// void SetFallbackPhysicalMaterial(class UFSDPhysicalMaterial* PhysMat);                                                   // [0x1965e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetCameraMode
	// void SetCameraMode(ECharacterCameraMode NewCameraMode);                                                                  // [0x1965d30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SetAttached
	// void SetAttached(class USceneComponent* AttachTo, bool DelayUntilLanded);                                                // [0x1965b40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Server_TriggerDash
	// void Server_TriggerDash();                                                                                               // [0x17e4ee0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_TeleportToPlayer
	// void Server_TeleportToPlayer(class APlayerCharacter* InPlayerToTeleport, int32_t InTarget);                              // [0x1965a70] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_TeleportPlayerTo
	// void Server_TeleportPlayerTo(int32_t InPlayerIndexToTeleport, class APlayerCharacter* InTarget);                         // [0x19659a0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_StartSalute
	// void Server_StartSalute(class UAnimMontage* startSalute);                                                                // [0x1965910] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SpawnEnemies
	// void Server_SpawnEnemies(class UEnemyDescriptor* descriptor, int32_t Count);                                             // [0x1965840] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SpawnCritters
	// void Server_SpawnCritters(class UBaseCritterDescriptor* descriptor, int32_t Count);                                      // [0x1965770] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_Shouted
	// void Server_Shouted();                                                                                                   // [0x1965750] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetUsing
	// void Server_SetUsing(bool characterIsUsing);                                                                             // [0x19656c0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetStandingDown
	// void Server_SetStandingDown(bool standingDown);                                                                          // [0x1965630] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetRunning
	// void Server_SetRunning(bool characterIsRunning);                                                                         // [0x19655a0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetRunBoostActive
	// void Server_SetRunBoostActive(bool IsActive);                                                                            // [0x1965510] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetIsThrowingCarriable
	// void Server_SetIsThrowingCarriable(bool isThrowing);                                                                     // [0x1965480] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetIsPressingMovementInput
	// void Server_SetIsPressingMovementInput(bool aIsPushingInput);                                                            // [0x19653f0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetIsJumpPressed
	// void Server_SetIsJumpPressed(bool InJumpPressed);                                                                        // [0x1965360] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetIsDancing
	// void Server_SetIsDancing(bool isDancing, int32_t danceMove);                                                             // [0x1965290] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetHeadLight
	// void Server_SetHeadLight(bool On);                                                                                       // [0x1965200] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetDispenserReward
	// void Server_SetDispenserReward(class AEventRewardDispenser* Dispenser, class USchematic* Reward);                        // [0x1965130] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_SetClientReady
	// void Server_SetClientReady();                                                                                            // [0x1965110] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_InstantRevive
	// void Server_InstantRevive(class APlayerCharacter* ReviveTarget, EInputKeys Key);                                         // [0x1965040] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_EscapeFromGrabber
	// void Server_EscapeFromGrabber();                                                                                         // [0x1965020] Net|NetReliableNative|Event|Protected|NetServer|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Server_ClearBiomeEffects
	// void Server_ClearBiomeEffects();                                                                                         // [0x1965000] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatStartCountDown
	// void Server_CheatStartCountDown();                                                                                       // [0x1964fe0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatSpawnDropPodOnSelf
	// void Server_CheatSpawnDropPodOnSelf(float Delay);                                                                        // [0x1964f50] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatRevive
	// void Server_CheatRevive();                                                                                               // [0x17f3ac0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatPreventMeteors
	// void Server_CheatPreventMeteors();                                                                                       // [0x1964f30] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Server_CheatKillAllNeutral
	// void Server_CheatKillAllNeutral();                                                                                       // [0x1964f10] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatKillAllFriendly
	// void Server_CheatKillAllFriendly();                                                                                      // [0x1964ef0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatKillAll
	// void Server_CheatKillAll();                                                                                              // [0x1964ed0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatJetBoots_MK2
	// void Server_CheatJetBoots_MK2();                                                                                         // [0x1964eb0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatJetBoots
	// void Server_CheatJetBoots();                                                                                             // [0x1964e90] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatGodMode
	// void Server_CheatGodMode();                                                                                              // [0x17f4bd0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatFlyMode
	// void Server_CheatFlyMode(bool Active);                                                                                   // [0x17ef280] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatFlareInfiniteDuration
	// void Server_CheatFlareInfiniteDuration(bool Enabled);                                                                    // [0x1964e00] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatDestroyAllVanityCharacters
	// void Server_CheatDestroyAllVanityCharacters();                                                                           // [0x1921460] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatDebugFastMode
	// void Server_CheatDebugFastMode(bool fast);                                                                               // [0x17f4a20] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatDancingCharacterOnSelf
	// void Server_CheatDancingCharacterOnSelf(int32_t InDanceIndex);                                                           // [0x1964d70] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatClearAllDecalsAll
	// void Server_CheatClearAllDecalsAll();                                                                                    // [0x1964d50] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatBreakAllEnemyArmor
	// void Server_CheatBreakAllEnemyArmor();                                                                                   // [0x1964d30] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CheatAddAllResourcesToInventory
	// void Server_CheatAddAllResourcesToInventory(float amount);                                                               // [0x1964ca0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Server_CancelThrowingCarriable
	// void Server_CancelThrowingCarriable();                                                                                   // [0x1964c80] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_CallDonkey
	// void Server_CallDonkey();                                                                                                // [0x1964c60] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_AddToTraceQueue
	// void Server_AddToTraceQueue(class ADamageEnhancer* Target, FEnhancedTrace Item);                                         // [0x1964b10] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_AddImpulseToActor
	// void Server_AddImpulseToActor(class AFSDPhysicsActor* Target, FVector_NetQuantize Impulse, FVector_NetQuantize Location, FVector_NetQuantize AngularImpulse); // [0x1964980] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_AddImpulse
	// void Server_AddImpulse(FVector_NetQuantizeNormal Direction, float force);                                                // [0x19648b0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerCharacter.Server_ActivateTemporaryBuff
	// void Server_ActivateTemporaryBuff(class UTemporaryBuff* buff);                                                           // [0x1964820] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.SendLevelUpStatistics
	// void SendLevelUpStatistics(int32_t currentRank);                                                                         // [0x18aacd0] Final|Native|Public  
	// Function /Script/FSD.PlayerCharacter.ReviveProgress
	// void ReviveProgress(float Progress);                                                                                     // [0x1964780] Final|Native|Public  
	// Function /Script/FSD.PlayerCharacter.RequestChangeInGravityScale
	// void RequestChangeInGravityScale(float newGravityScale);                                                                 // [0x19646b0] Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.RejectInvite
	// void RejectInvite();                                                                                                     // [0x1964690] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.ReceiveOnHeadlightOn
	// void ReceiveOnHeadlightOn();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.ReceiveEscapedFromGrabber
	// void ReceiveEscapedFromGrabber();                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.Receive_ShowFieldMedicInstantReviveEffects
	// void Receive_ShowFieldMedicInstantReviveEffects();                                                                       // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.PrepareForEndScreen
	// void PrepareForEndScreen();                                                                                              // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.PilotVehicle
	// void PilotVehicle(class AActor* Vehicle);                                                                                // [0x1964600] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Paralyze
	// void Paralyze(class AActor* ParalyzedBy);                                                                                // [0x1964570] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.OpenChat
	// void OpenChat();                                                                                                         // [0x1964550] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.OnResourceFull
	// void OnResourceFull(class UCappedResource* Resource);                                                                    // [0x19644c0] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.OnRep_IsStandingDown
	// void OnRep_IsStandingDown();                                                                                             // [0x19644a0] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.OnRep_IsDancing
	// void OnRep_IsDancing();                                                                                                  // [0x1964480] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.OnRep_HeadLightOn
	// void OnRep_HeadLightOn();                                                                                                // [0x1964460] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.OnRep_DanceMove
	// void OnRep_DanceMove();                                                                                                  // [0x1964440] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.OnRep_CharacterState
	// void OnRep_CharacterState(class UCharacterStateComponent* oldState);                                                     // [0x19643b0] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.OnPerkActivationFinished
	// void OnPerkActivationFinished();                                                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.OnItemEquipped
	// void OnItemEquipped(class AItem* Item);                                                                                  // [0x1964320] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.OnCharacterUsed
	// void OnCharacterUsed(class APlayerCharacter* User, EInputKeys Key);                                                      // [0x1964070] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.OnCharacterBeginUse
	// void OnCharacterBeginUse(class APlayerCharacter* User, EInputKeys Key);                                                  // [0x1963fa0] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.MouseWheelUp
	// void MouseWheelUp();                                                                                                     // [0x1963f80] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.MouseWheelDown
	// void MouseWheelDown();                                                                                                   // [0x1963f60] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.LockIfState
	// bool LockIfState(ECharacterState LockIf, ECharacterState LockTo, bool canMoveAndAim);                                    // [0x1963e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.KilledGrabber__DelegateSignature
	// void KilledGrabber__DelegateSignature(class AActor* Grabber);                                                            // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PlayerCharacter.JumpRelease
	// void JumpRelease();                                                                                                      // [0x1963e00] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.JumpPress
	// void JumpPress();                                                                                                        // [0x1963de0] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.ItemUseDelegate__DelegateSignature
	// void ItemUseDelegate__DelegateSignature(class AItem* Item);                                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PlayerCharacter.IsWithinDistance
	// bool IsWithinDistance(class AActor* Source, float Distance);                                                             // [0x1963d10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsWalking
	// bool IsWalking();                                                                                                        // [0x1963ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsUsingPressed
	// bool IsUsingPressed();                                                                                                   // [0x1963cc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsUsingItemPressed
	// bool IsUsingItemPressed();                                                                                               // [0x1963ca0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsStateActive
	// bool IsStateActive(ECharacterState State);                                                                               // [0x1963c10] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsSaluting
	// bool IsSaluting();                                                                                                       // [0x1963be0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsParalyzed
	// bool IsParalyzed();                                                                                                      // [0x1963b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsMovementInputPressed
	// bool IsMovementInputPressed();                                                                                           // [0x1963b50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.IsMining
	// bool IsMining();                                                                                                         // [0x1963b20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsLyingDown
	// bool IsLyingDown();                                                                                                      // [0x1963af0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsJumpPressed
	// bool IsJumpPressed();                                                                                                    // [0x1963ad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsInState
	// bool IsInState(ECharacterState aState);                                                                                  // [0x1963a40] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsFrozen
	// bool IsFrozen();                                                                                                         // [0x1963a10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsFirstPerson
	// bool IsFirstPerson();                                                                                                    // [0x19639b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsEquipepdActor
	// bool IsEquipepdActor(class AActor* Actor);                                                                               // [0x1963910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsDown
	// bool IsDown();                                                                                                           // [0x19638e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.IsAlive
	// bool IsAlive();                                                                                                          // [0x19638b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.InstantRevive
	// void InstantRevive(class APlayerCharacter* ReviveTarget, EInputKeys Key);                                                // [0x19637e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.IgnoreInvite
	// void IgnoreInvite();                                                                                                     // [0x19637c0] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.HasBeenRevived
	// bool HasBeenRevived();                                                                                                   // [0x19637a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetUseComponent
	// class UCharacterUseComponent* GetUseComponent();                                                                         // [0x1963780] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetTPAnimInstance
	// class UPlayerTPAnimInstance* GetTPAnimInstance();                                                                        // [0x19636e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetTimeSinceLastRevival
	// float GetTimeSinceLastRevival();                                                                                         // [0x1963710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetSuperRapidFireActive
	// bool GetSuperRapidFireActive();                                                                                          // [0x1892460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetPreviousState
	// ECharacterState GetPreviousState();                                                                                      // [0x19636c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetPlayerState
	// class AFSDPlayerState* GetPlayerState();                                                                                 // [0x1963690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetPlayerName
	// FString GetPlayerName();                                                                                                 // [0x1963610] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetPlayerController
	// class AFSDPlayerController* GetPlayerController();                                                                       // [0x19635e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetInventoryList
	// class UInventoryList* GetInventoryList();                                                                                // [0x19635b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetHeroSwitchToMessage
	// FText GetHeroSwitchToMessage();                                                                                          // [0x1963570] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetHeroName
	// FText GetHeroName();                                                                                                     // [0x1963530] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetHeroInfo
	// FHeroInfo GetHeroInfo();                                                                                                 // [0x19634a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetHeroIcon
	// class UTexture2D* GetHeroIcon();                                                                                         // [0x1963470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetHeroColor
	// FLinearColor GetHeroColor();                                                                                             // [0x1963440] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetFPAnimInstance
	// class UPlayerFPAnimInstance* GetFPAnimInstance();                                                                        // [0x19633d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetEquippedItem
	// class AItem* GetEquippedItem();                                                                                          // [0x19633a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetDownTime
	// float GetDownTime();                                                                                                     // [0x1963370] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetDownCameraTarget
	// class APlayerCharacter* GetDownCameraTarget();                                                                           // [0x1963330] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetDownCameraRotationPoint
	// class USceneComponent* GetDownCameraRotationPoint();                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.GetDownCameraAttachPoint
	// class USceneComponent* GetDownCameraAttachPoint();                                                                       // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.GetDebugPointLightComponent
	// class ULightComponent* GetDebugPointLightComponent();                                                                    // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetCurrentState
	// ECharacterState GetCurrentState();                                                                                       // [0x1963300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetCommunicationComponent
	// class UCommunicationComponent* GetCommunicationComponent();                                                              // [0x19632e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetClassXP
	// float GetClassXP();                                                                                                      // [0x19632b0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlayerCharacter.GetCharacterVanity
	// class UCharacterVanityComponent* GetCharacterVanity();                                                                   // [0x1963290] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetCharacterStateComponent
	// class UCharacterStateComponent* GetCharacterStateComponent(ECharacterState State);                                       // [0x1963200] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetBeginRevivedProgress
	// float GetBeginRevivedProgress();                                                                                         // [0x1963190] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetBeastMasterUsableComponent
	// class UUsableComponent* GetBeastMasterUsableComponent();                                                                 // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetAnalyticsClass
	// FString GetAnalyticsClass();                                                                                             // [0x1963100] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetAimRotation
	// FRotator GetAimRotation();                                                                                               // [0x19630c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetActorGroundLocation
	// FVector GetActorGroundLocation();                                                                                        // [0x1963080] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GetActiveShieldGenerators
	// TArray<AShieldGeneratorActor*> GetActiveShieldGenerators();                                                              // [0x1963000] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlayerCharacter.GetActiveAnimInstance
	// class UPlayerAnimInstance* GetActiveAnimInstance();                                                                      // [0x1962fd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.GenericAnimNotifyDelegate__DelegateSignature
	// void GenericAnimNotifyDelegate__DelegateSignature(class APlayerCharacter* Player);                                       // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PlayerCharacter.ForceIsPressingMovementInputKey
	// void ForceIsPressingMovementInputKey();                                                                                  // [0x1962fb0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.FirePressedDelegate__DelegateSignature
	// void FirePressedDelegate__DelegateSignature();                                                                           // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PlayerCharacter.ExitVehicle
	// void ExitVehicle();                                                                                                      // [0x1962f90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.CycleItemUp
	// void CycleItemUp();                                                                                                      // [0x1962f70] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.CycleItemReleased
	// void CycleItemReleased();                                                                                                // [0x1962f50] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.CycleItemPressed
	// void CycleItemPressed();                                                                                                 // [0x1962f30] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.CycleItemDown
	// void CycleItemDown();                                                                                                    // [0x1962f10] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.ConsumeCycleItemButton
	// void ConsumeCycleItemButton();                                                                                           // [0x1962ef0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Client_TargetDamaged
	// void Client_TargetDamaged(class UObject* Health, float Damage, float DamageModifier, bool IsWeakPoint, bool IsRadial);   // [0x1962d40] Net|Native|Event|Protected|NetClient 
	// Function /Script/FSD.PlayerCharacter.Client_OpenMinersManual
	// void Client_OpenMinersManual();                                                                                          // [0x1962d20] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Client_AddImpulse
	// void Client_AddImpulse(FVector_NetQuantizeNormal Direction, float force);                                                // [0x1962c50] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.PlayerCharacter.Client_ActivateTemporaryBuff
	// void Client_ActivateTemporaryBuff(class UTemporaryBuff* buff);                                                           // [0x1962bc0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.CheckWithoutAPaddleAchievement
	// void CheckWithoutAPaddleAchievement();                                                                                   // [0x1962b80] Net|NetReliableNative|Event|Protected|NetClient|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.Cheat_CreateCountdownHUD
	// void Cheat_CreateCountdownHUD();                                                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.ChangeState
	// void ChangeState(ECharacterState NewState);                                                                              // [0x1962b00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.ChangeIfDifferentState
	// void ChangeIfDifferentState(ECharacterState NewState);                                                                   // [0x1962a80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.CanEscapeGrabberDelegate__DelegateSignature
	// void CanEscapeGrabberDelegate__DelegateSignature(bool bCanEscape);                                                       // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PlayerCharacter.CanEscapeFromGrabber
	// bool CanEscapeFromGrabber();                                                                                             // [0x1962a50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerCharacter.CallDonkeyReleased
	// void CallDonkeyReleased();                                                                                               // [0x1962a30] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.CallDonkeyPressed
	// void CallDonkeyPressed();                                                                                                // [0x1962a10] Final|Native|Protected 
	// Function /Script/FSD.PlayerCharacter.BP_OnUpdateMeshes
	// void BP_OnUpdateMeshes();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.BP_OnControllerReady
	// void BP_OnControllerReady();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.PlayerCharacter.AnnounceSchematicCollected
	// void AnnounceSchematicCollected(class USchematic* InSchematic);                                                          // [0x1962980] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.All_StartSalute
	// void All_StartSalute(class UAnimMontage* saluteMontage);                                                                 // [0x19628f0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.PlayerCharacter.All_ShowImpactEffects
	// void All_ShowImpactEffects(class UParticleSystem* Particles, FVector_NetQuantize Location, FVector_NetQuantizeNormal Orientation); // [0x19627b0] Net|Native|Event|NetMulticast|Protected|Const 
	// Function /Script/FSD.PlayerCharacter.All_ShowFieldMedicInstantReviveEffects
	// void All_ShowFieldMedicInstantReviveEffects();                                                                           // [0x1962790] Net|Native|Event|NetMulticast|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.All_CheatStartCountDown
	// void All_CheatStartCountDown();                                                                                          // [0x1962770] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.PlayerCharacter.All_CheatSetDanceForVanityCharacter
	// void All_CheatSetDanceForVanityCharacter(int32_t InDanceIndex);                                                          // [0x19626e0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.PlayerCharacter.All_CheatDestroyAllVanityCharacters
	// void All_CheatDestroyAllVanityCharacters();                                                                              // [0x19626c0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.PlayerCharacter.All_CheatClearAllDecalsAll
	// void All_CheatClearAllDecalsAll();                                                                                       // [0x19626a0] Net|NetReliableNative|Event|NetMulticast|Public 
	// Function /Script/FSD.PlayerCharacter.AddImpulseToActor
	// void AddImpulseToActor(class AFSDPhysicsActor* Target, FVector_NetQuantize Impulse, FVector_NetQuantize Location, FVector_NetQuantize AngularImpulse); // [0x1962520] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.AddImpulseFromVector
	// void AddImpulseFromVector(FVector& Vector);                                                                              // [0x1962490] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.AddImpulseFromDirectionAndForce
	// void AddImpulseFromDirectionAndForce(FVector& Direction, float force);                                                   // [0x19623b0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacter.AcknowledgeCharacterState
	// void AcknowledgeCharacterState(ECharacterState eState);                                                                  // [0x1962330] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.PlayerCharacter.AcceptInvite
	// void AcceptInvite();                                                                                                     // [0x1962310] Final|Native|Protected 
};

/// Class /Script/FSD.PlayerCharacterFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPlayerCharacterFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.PlayerCharacterFunctionLibrary.SetPlayerVoiceMuted
	// bool SetPlayerVoiceMuted(class UObject* WorldContextObject, class AFSDPlayerState* PlayerState, bool Mute, bool TrySystemWide, int32_t localUserNum); // [0x196b270] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerCharacterFunctionLibrary.IsPlayerVoiceMuted
	// bool IsPlayerVoiceMuted(class UObject* WorldContextObject, class AFSDPlayerState* PlayerState, int32_t localUserNum);    // [0x196ab20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlayerCharacterFunctionLibrary.GetRandomPlayer
	// class APlayerCharacter* GetRandomPlayer(class UObject* WorldContextObject, bool MustBeAlive, bool MustNotBeParalyzed);   // [0x196a8d0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlayerCharacterFunctionLibrary.GetNearestVisiblePlayer
	// class APlayerCharacter* GetNearestVisiblePlayer(class AActor* from, float MaxDistance, bool MustBeAlive, bool MustNotBeParalyzed); // [0x196a610] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlayerCharacterFunctionLibrary.GetNearestPlayerToPosition
	// class APlayerCharacter* GetNearestPlayerToPosition(class UObject* WorldContextObject, FVector Position, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // [0x196a420] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlayerCharacterFunctionLibrary.GetNearestPlayerFrom
	// class APlayerCharacter* GetNearestPlayerFrom(class UObject* WorldContext, FVector from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // [0x196a230] Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PlayerCharacterFunctionLibrary.GetNearestPlayer
	// class APlayerCharacter* GetNearestPlayer(class AActor* from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly); // [0x196a070] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.HealthRegenerationParams
/// Size: 0x0010 (0x000000 - 0x000010)
class FHealthRegenerationParams : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      bIsRegenerating                                             OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(float)                                     DelayAfterDamage                                            OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     HealthPerSecond                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     TargetHealthRatio                                           OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.PlayerHealthComponent
/// Size: 0x0148 (0x000270 - 0x0003B8)
class UPlayerHealthComponent : public UHealthComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 952;

public:
	SMember(FMulticastInlineDelegate)                  OnFullHealthCannotHeal                                      OFFSET(getStruct<T>, {0x278, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHealedFromCrystalEvent                                    OFFSET(getStruct<T>, {0x288, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHealthRegeneratingChanged                                 OFFSET(getStruct<T>, {0x298, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerHit                                                 OFFSET(getStruct<T>, {0x2B8, 16, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0x2C8, 4, 0, 0})
	DMember(float)                                     MaxArmor                                                    OFFSET(get<float>, {0x2CC, 4, 0, 0})
	DMember(float)                                     ArmorDamage                                                 OFFSET(get<float>, {0x2D0, 4, 0, 0})
	DMember(float)                                     ReviveHealthReturnRatio                                     OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     ReviveArmorReturnRatio                                      OFFSET(get<float>, {0x2DC, 4, 0, 0})
	DMember(float)                                     HealthPerCrystalVolume                                      OFFSET(get<float>, {0x2E0, 4, 0, 0})
	SMember(FHealthRegenerationParams)                 HealthRegeneration                                          OFFSET(getStruct<T>, {0x2E4, 16, 0, 0})
	CMember(class UCurveFloat*)                        ArmorRegenCurve                                             OFFSET(get<T>, {0x2F8, 8, 0, 0})
	DMember(float)                                     ShieldRegenDelay                                            OFFSET(get<float>, {0x300, 4, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UParticleSystem*)                    GenericImpactParticles                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UParticleSystem*)                    ShieldLinkEffect                                            OFFSET(get<T>, {0x318, 8, 0, 0})
	SMember(FAudioWithCooldown)                        AudioFriendlyFire                                           OFFSET(getStruct<T>, {0x320, 16, 0, 0})
	CMember(class UParticleSystemComponent*)           ShieldLinkInstance                                          OFFSET(get<T>, {0x330, 8, 0, 0})
	DMember(float)                                     InvulnerabilityDuration                                     OFFSET(get<float>, {0x33C, 4, 0, 0})
	DMember(float)                                     ReviveInvulnerabilityTime                                   OFFSET(get<float>, {0x340, 4, 0, 0})
	CMember(class UPlayerDamageTakenMutator*)          DamageTakenMutator                                          OFFSET(get<T>, {0x380, 8, 0, 0})
	CMember(class UClass*)                             IronWillStatusEffectClass                                   OFFSET(get<T>, {0x390, 8, 0, 0})
	CMember(class UStatusEffect*)                      IronWillStatusEffect                                        OFFSET(get<T>, {0x398, 8, 0, 0})
	DMember(bool)                                      IronWillActive                                              OFFSET(get<bool>, {0x3A0, 1, 0, 0})
	DMember(float)                                     IronWillTimeToActivate                                      OFFSET(get<float>, {0x3A4, 4, 0, 0})
	CMember(class USharedHealthMutator*)               SharedHealthMutator                                         OFFSET(get<T>, {0x3B0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerHealthComponent.SetIronWillStatusEffect
	// class UStatusEffect* SetIronWillStatusEffect(class UClass* steClass);                                                    // [0x196b1d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerHealthComponent.Server_TryActivateIronWill
	// void Server_TryActivateIronWill();                                                                                       // [0x196b1b0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.PlayerHealthComponent.OnRep_MaxHealth
	// void OnRep_MaxHealth();                                                                                                  // [0x196ad40] Final|Native|Protected 
	// Function /Script/FSD.PlayerHealthComponent.OnRep_MaxArmor
	// void OnRep_MaxArmor();                                                                                                   // [0x196ad20] Final|Native|Protected 
	// Function /Script/FSD.PlayerHealthComponent.OnRep_ArmorDamage
	// void OnRep_ArmorDamage(float oldDamage);                                                                                 // [0x196ac20] Final|Native|Protected 
	// Function /Script/FSD.PlayerHealthComponent.IsLowHealth
	// bool IsLowHealth();                                                                                                      // [0x196aaf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerHealthComponent.GetRemainingIronWillActivationTime
	// float GetRemainingIronWillActivationTime();                                                                              // [0x196a9f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerHealthComponent.GetIsHealthRegenerating
	// bool GetIsHealthRegenerating();                                                                                          // [0x196a050] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerHealthComponent.GetIronWillActive
	// bool GetIronWillActive();                                                                                                // [0x196a020] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerHealthComponent.GetHealthRegeneratingTargetRatio
	// float GetHealthRegeneratingTargetRatio();                                                                                // [0x196a000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerHealthComponent.Client_SetHealthRegenerating
	// void Client_SetHealthRegenerating(bool isRegenerating);                                                                  // [0x1969f70] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.PlayerHealthComponent.Client_OnFriendlyFire
	// void Client_OnFriendlyFire(class AController* EventInstigator, class AActor* DamageCauser);                              // [0x1969ea0] Net|Native|Event|Protected|NetClient 
	// Function /Script/FSD.PlayerHealthComponent.Client_HealthFullCannotHeal
	// void Client_HealthFullCannotHeal();                                                                                      // [0x1969e80] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.PlayerHealthComponent.CanActivateIronWill
	// bool CanActivateIronWill();                                                                                              // [0x1969db0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PlayerImpactCooldownComponent
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UPlayerImpactCooldownComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	DMember(float)                                     CoolDownTime                                                OFFSET(get<float>, {0xB0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerImpactCooldownComponent.CheckCanImpact
	// bool CheckCanImpact(class AActor* Actor);                                                                                // [0x1969de0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PlayerInfectionComponent
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UPlayerInfectionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	SMember(FMulticastInlineDelegate)                  OnInfectionLevelChangedEvent                                OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBreakoutPercentageChanged                                 OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInfectionStateChangedEvent                                OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(EInfectionState)                           InfectionState                                              OFFSET(get<T>, {0xE0, 1, 0, 0})
	DMember(float)                                     ReductionCooldown                                           OFFSET(get<float>, {0xE4, 4, 0, 0})
	DMember(float)                                     InfectionImmunityAfterFullInfection                         OFFSET(get<float>, {0xE8, 4, 0, 0})
	DMember(float)                                     InfectionLevel                                              OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(float)                                     BreakoutPercentage                                          OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     InfectionDecreaseOverTimer                                  OFFSET(get<float>, {0xFC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerInfectionComponent.Server_ClearInfection
	// void Server_ClearInfection();                                                                                            // [0x18544e0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerInfectionComponent.OnRep_InfectionLevel
	// void OnRep_InfectionLevel(float oldLevel);                                                                               // [0x196aca0] Final|Native|Protected 
	// Function /Script/FSD.PlayerInfectionComponent.IncreaseInfection
	// void IncreaseInfection(float amount, class AActor* Source);                                                              // [0x196aa20] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PlayerMovementComponent
/// Size: 0x0090 (0x000AF0 - 0x000B80)
class UPlayerMovementComponent : public UCharacterMovementComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2944;

public:
	DMember(bool)                                      DebugFastMove                                               OFFSET(get<bool>, {0xAF0, 1, 0, 0})
	CMember(class USoundBase*)                         SlidingOnIceSound                                           OFFSET(get<T>, {0xAF8, 8, 0, 0})
	DMember(float)                                     LedgeClimbZVelocity                                         OFFSET(get<float>, {0xB10, 4, 0, 0})
	DMember(float)                                     MovementPenalty                                             OFFSET(get<float>, {0xB14, 4, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0xB20, 8, 0, 0})
	CMember(TWeakObjectPtr<class UCharacterStateComponent*>) CurrentPhysUpdateState                                OFFSET(get<T>, {0xB28, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerMovementComponent.RemoveGravityModifier
	// void RemoveGravityModifier(class AActor* SourceActor);                                                                   // [0x196b120] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerMovementComponent.AddGravityModifier
	// void AddGravityModifier(class AActor* SourceActor, float Effect);                                                        // [0x1969ce0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PlayerProximity
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UPlayerProximity : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	DMember(float)                                     CoolDown                                                    OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xB4, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerProximity                                           OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
};

/// Struct /Script/FSD.PlayerSphere
/// Size: 0x0020 (0x000000 - 0x000020)
class FPlayerSphere : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<APawn*>>)            Players                                                     OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.ProximityTriggerItem
/// Size: 0x0028 (0x000000 - 0x000028)
class FProximityTriggerItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FDelegateProperty)                         Callback                                                    OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Class /Script/FSD.PlayerProximityTracker
/// Size: 0x0048 (0x0000B0 - 0x0000F8)
class UPlayerProximityTracker : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	DMember(float)                                     MaxDistanceBetweenPlayers                                   OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     PlayerSpheresUpdateRatePerSecond                            OFFSET(get<float>, {0xB4, 4, 0, 0})
	CMember(TArray<FPlayerSphere>)                     PlayerSpheres                                               OFFSET(get<T>, {0xB8, 16, 0, 0})
	CMember(TArray<FProximityTriggerItem>)             LocalPlayerProximityTriggers                                OFFSET(get<T>, {0xC8, 16, 0, 0})
	CMember(TArray<FProximityTriggerItem>)             AnyPlayerProximityTriggers                                  OFFSET(get<T>, {0xD8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerProximityTracker.Receive_RegisterForLocalPlayerProximity
	// void Receive_RegisterForLocalPlayerProximity(class UObject* WorldContextObject, FVector& Location, float Distance, FDelegateProperty& proximityCallback, bool triggerOnlyOnce); // [0x196af40] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerProximityTracker.Receive_RegisterForAnyPlayerProximity
	// void Receive_RegisterForAnyPlayerProximity(class UObject* WorldContextObject, FVector& Location, float Distance, FDelegateProperty& proximityCallback, bool triggerOnlyOnce); // [0x196ad60] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.PlayerProximityTracker.GetPrimarySphere
	// FPlayerSphere GetPrimarySphere();                                                                                        // [0x196a890] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerProximityTracker.GetPlayerSpheres
	// TArray<FPlayerSphere> GetPlayerSpheres();                                                                                // [0x196a770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PlayerRejoinState
/// Size: 0x0078 (0x0000B0 - 0x000128)
class UPlayerRejoinState : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:


	/// Functions
	// Function /Script/FSD.PlayerRejoinState.Server_Reset
	// void Server_Reset();                                                                                                     // [0x1972880] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable|NetValidate 
	// Function /Script/FSD.PlayerRejoinState.Server_AddIntValue_Internal
	// void Server_AddIntValue_Internal(FGuid ItemKey, FName ValueKey, int32_t Value);                                          // [0x1972760] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.PlayerRejoinState.Server_AddFloatValue_Internal
	// void Server_AddFloatValue_Internal(FGuid ItemKey, FName ValueKey, float Value);                                          // [0x1972640] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.PlayerRejoinState.Client_SetValues
	// void Client_SetValues(TArray<FRejoinFloat> floatValues, TArray<FRejoinInt> intValues);                                   // [0x1970a90] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/FSD.ResourcesComponent
/// Size: 0x0058 (0x0000B0 - 0x000108)
class UResourcesComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FMulticastInlineDelegate)                  OnResourceChanged                                           OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResourceIncreased                                         OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResourceFull                                              OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResourceAdded                                             OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	CMember(TArray<class UCappedResource*>)            Resources                                                   OFFSET(get<T>, {0xF0, 16, 0, 0})
	DMember(float)                                     ResourceCap                                                 OFFSET(get<float>, {0x100, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ResourcesComponent.ResourceIncreased
	// void ResourceIncreased(class UCappedResource* Resource, float Delta);                                                    // [0x198b780] Final|Native|Protected 
	// Function /Script/FSD.ResourcesComponent.ResourceFull
	// void ResourceFull(class UCappedResource* Resource);                                                                      // [0x198b6f0] Final|Native|Protected 
	// Function /Script/FSD.ResourcesComponent.ResourceChanged
	// void ResourceChanged(class UCappedResource* Resource, float currentAmount);                                              // [0x198b620] Final|Native|Protected 
	// Function /Script/FSD.ResourcesComponent.OnRep_Resources
	// void OnRep_Resources();                                                                                                  // [0x198b2a0] Final|Native|Protected 
	// Function /Script/FSD.ResourcesComponent.GetXPFromResourceMap
	// int32_t GetXPFromResourceMap(TMap<UResourceData*, float>& Resources);                                                    // [0x198b080] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ResourcesComponent.GetXpFromMining
	// int32_t GetXpFromMining();                                                                                               // [0x198b1c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ResourcesComponent.GetSeparateResourcesFromMap
	// TMap<UResourceData*, float> GetSeparateResourcesFromMap(TMap<UResourceData*, float>& Resources);                         // [0x198aee0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ResourcesComponent.GetResource
	// class UCappedResource* GetResource(class UResourceData* Data, bool createIfAmountIsZero);                                // [0x198ad30] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ResourcesComponent.GetCapacityPct
	// float GetCapacityPct();                                                                                                  // [0x198ab80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ResourcesComponent.GetAllResources
	// TArray<UCappedResource*> GetAllResources();                                                                              // [0x198aac0] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.PlayerResourceComponent
/// Size: 0x0000 (0x000108 - 0x000108)
class UPlayerResourceComponent : public UResourcesComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:


	/// Functions
	// Function /Script/FSD.PlayerResourceComponent.GetFromPlayer
	// class UPlayerResourceComponent* GetFromPlayer(class APlayerCharacter* PlayerCharacter);                                  // [0x1971e60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.PlayerProgress
/// Size: 0x0008 (0x000000 - 0x000008)
class FPlayerProgress : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   PlayerRank                                                  OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   PlayerStars                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.CharacterProgress
/// Size: 0x0020 (0x000000 - 0x000020)
class FCharacterProgress : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UPlayerCharacterID*)                 characterID                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     Progress                                                    OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   CurrentXP                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   NextLevelXP                                                 OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   TimesRetired                                                OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.EndMissionResult
/// Size: 0x0060 (0x000000 - 0x000060)
class FEndMissionResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FPlayerProgress)                           PreviousPlayerProgress                                      OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FPlayerProgress)                           PlayerProgress                                              OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FCharacterProgress)                        PreviousCharacterProgress                                   OFFSET(getStruct<T>, {0x10, 32, 0, 0})
	SMember(FCharacterProgress)                        CharacterProgress                                           OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	CMember(class USchematic*)                         RewardedSchematic                                           OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(bool)                                      bReadyForUse                                                OFFSET(get<bool>, {0x58, 1, 0, 0})
};

/// Class /Script/FSD.PlayerStatsComponent
/// Size: 0x00B0 (0x0000B0 - 0x000160)
class UPlayerStatsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	SMember(FMulticastInlineDelegate)                  OnKillAdded                                                 OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(int32_t)                                   TotalKills                                                  OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
	DMember(int32_t)                                   TotalRevived                                                OFFSET(get<int32_t>, {0xC4, 4, 0, 0})
	DMember(int32_t)                                   TotalDeaths                                                 OFFSET(get<int32_t>, {0xC8, 4, 0, 0})
	DMember(int32_t)                                   TotalSupplypodsRequested                                    OFFSET(get<int32_t>, {0xCC, 4, 0, 0})
	DMember(float)                                     TotalGoldMined                                              OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     TotalMOMsMined                                              OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     TotalMineralsMined                                          OFFSET(get<float>, {0xD8, 4, 0, 0})
	DMember(float)                                     TotalXPGained                                               OFFSET(get<float>, {0xDC, 4, 0, 0})
	DMember(bool)                                      EscapedInPod                                                OFFSET(get<bool>, {0xE0, 1, 0, 0})
	CMember(class UClass*)                             LastPlayedClass                                             OFFSET(get<T>, {0xE8, 8, 0, 0})
	SMember(FEndMissionResult)                         EndMissionResult                                            OFFSET(getStruct<T>, {0xF0, 96, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndMissionResultReady                                     OFFSET(getStruct<T>, {0x150, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerStatsComponent.SendMissionAnalytics
	// void SendMissionAnalytics(bool trackMorkite);                                                                            // [0x1972510] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerStatsComponent.SendEndMissionResult
	// void SendEndMissionResult(FEndMissionResult Result);                                                                     // [0x1972450] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.PlayerStatsComponent.OnResourceMined
	// void OnResourceMined(class UCappedResource* Resource, float amount);                                                     // [0x1972360] Final|Native|Public  
	// Function /Script/FSD.PlayerStatsComponent.OnRep_EndMissionResult
	// void OnRep_EndMissionResult();                                                                                           // [0x1972240] Final|Native|Protected 
	// Function /Script/FSD.PlayerStatsComponent.IsEndMissionResultReady
	// bool IsEndMissionResultReady();                                                                                          // [0x19720c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerStatsComponent.GetSurvivedInPod
	// bool GetSurvivedInPod();                                                                                                 // [0x18f4d20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerStatsComponent.EndMissionResultDelegate__DelegateSignature
	// void EndMissionResultDelegate__DelegateSignature(FEndMissionResult& Result);                                             // [0x1d6f900] MulticastDelegate|Public|Delegate|HasOutParms 
};

/// Class /Script/FSD.PlayerTemperatureComponent
/// Size: 0x00B8 (0x0000D8 - 0x000190)
class UPlayerTemperatureComponent : public UTemperatureComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FMulticastInlineDelegate)                  OnTemperatureChanged                                        OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTemperatureStateChanged                                   OFFSET(getStruct<T>, {0xE8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTemperatureChangeRate                                     OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDefrosting                                                OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnBarVisibilityChanged                                      OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	DMember(float)                                     MinimumTemperature                                          OFFSET(get<float>, {0x128, 4, 0, 0})
	DMember(float)                                     MaximumTemperature                                          OFFSET(get<float>, {0x12C, 4, 0, 0})
	DMember(float)                                     DefrostTemperature                                          OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(float)                                     BurnTemperature                                             OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     DouseFireTemperature                                        OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     TemperaturRegainSpeed                                       OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     DefrostingRequired                                          OFFSET(get<float>, {0x140, 4, 0, 0})
	CMember(class UClass*)                             OnDefrostedStatusEffect                                     OFFSET(get<T>, {0x148, 8, 0, 0})
	DMember(float)                                     NormalTemperature                                           OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     CurrentTemperature                                          OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     TargetTemperature                                           OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(int8_t)                                    TemperatureChangeSpeed                                      OFFSET(get<int8_t>, {0x165, 1, 0, 0})
	DMember(float)                                     DefrostProgress                                             OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(bool)                                      barVisible                                                  OFFSET(get<bool>, {0x16C, 1, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(EPlayerTemperatureState)                   TemperatureState                                            OFFSET(get<T>, {0x188, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.PlayerTemperatureComponent.SetNormalTemperature
	// void SetNormalTemperature();                                                                                             // [0x19728f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerTemperatureComponent.SetFrozenTemperature
	// void SetFrozenTemperature();                                                                                             // [0x19728d0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.PlayerTemperatureComponent.OnRep_TemperatureState
	// void OnRep_TemperatureState(EPlayerTemperatureState oldState);                                                           // [0x19722e0] Final|Native|Protected 
	// Function /Script/FSD.PlayerTemperatureComponent.OnRep_TemperatureChangeSpeed
	// void OnRep_TemperatureChangeSpeed(int8_t OldSpeed);                                                                      // [0x1972260] Final|Native|Protected 
	// Function /Script/FSD.PlayerTemperatureComponent.OnRep_DefrostProgress
	// void OnRep_DefrostProgress();                                                                                            // [0x1972220] Final|Native|Protected 
	// Function /Script/FSD.PlayerTemperatureComponent.OnRep_CurrentTemperature
	// void OnRep_CurrentTemperature(float OldTemperature);                                                                     // [0x19721a0] Final|Native|Protected 
	// Function /Script/FSD.PlayerTemperatureComponent.OnDeath
	// void OnDeath(class UHealthComponentBase* Health);                                                                        // [0x1972110] Final|Native|Protected 
	// Function /Script/FSD.PlayerTemperatureComponent.GetTemperatureChangedSpeed
	// int32_t GetTemperatureChangedSpeed();                                                                                    // [0x1971ff0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerTemperatureComponent.GetDefrostProgress
	// float GetDefrostProgress();                                                                                              // [0x1971e10] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerTemperatureComponent.GetCurrentTemperatureNormalized
	// float GetCurrentTemperatureNormalized();                                                                                 // [0x1971de0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PlayerTemperatureComponent.Defrost
	// void Defrost(float amount);                                                                                              // [0x19714c0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.PLSEncounterComponent
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UPLSEncounterComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FSD.PLSTester
/// Size: 0x0100 (0x000220 - 0x000320)
class APLSTester : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	SMember(FString)                                   FullSeedString                                              OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	DMember(int32_t)                                   PLSSeed                                                     OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	DMember(int32_t)                                   MissionSeed                                                 OFFSET(get<int32_t>, {0x234, 4, 0, 0})
	SMember(FGlobalMissionSeed)                        GlobalSeed                                                  OFFSET(getStruct<T>, {0x238, 12, 0, 0})
	DMember(int32_t)                                   GlobalMissionIndex                                          OFFSET(get<int32_t>, {0x244, 4, 0, 0})
	CMember(class UMissionComplexity*)                 limitComplexity                                             OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UMissionDuration*)                   limitDuration                                               OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UMissionMutator*)                    Mutator                                                     OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(TArray<class UMissionWarning*>)            Warnings                                                    OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(class UMissionChallenge*)                  Challenge                                                   OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(TArray<class UClass*>)                     SecondaryObjectives                                         OFFSET(get<T>, {0x278, 16, 0, 0})
	CMember(class USpecialEvent*)                      SpecialEvent                                                OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class UBiome*)                             Biome                                                       OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UMissionTemplate*)                   MissionTemplate                                             OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UMissionTemplate*)                   CustomMissionTemplate                                       OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UDifficultySetting*)                 OverrideDifficulty                                          OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(TMap<class UDifficultyMutatorSetupItem*, int32_t>) Haz5Mutators                                        OFFSET(get<T>, {0x2B0, 80, 0, 0})
	DMember(int32_t)                                   SimulatePlayerCount                                         OFFSET(get<int32_t>, {0x300, 4, 0, 0})
	SMember(FText)                                     CustomMissionName                                           OFFSET(getStruct<T>, {0x308, 24, 0, 0})
};

/// Struct /Script/FSD.DeepDiveTesterItem
/// Size: 0x0030 (0x000000 - 0x000030)
class FDeepDiveTesterItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UMissionComplexity*)                 Complexity                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UMissionDuration*)                   Duration                                                    OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UMissionTemplate*)                   mission                                                     OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UClass*)                             DeepDiveObjective                                           OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UMissionMutator*)                    Mutator                                                     OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UMissionWarning*)                    Warning                                                     OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FSD.DeepDiveTester
/// Size: 0x0020 (0x000220 - 0x000240)
class ADeepDiveTester : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UBiome*)                             Biome                                                       OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	CMember(EMissionStructure)                         MissionStructure                                            OFFSET(get<T>, {0x22C, 1, 0, 0})
	CMember(TArray<FDeepDiveTesterItem>)               stages                                                      OFFSET(get<T>, {0x230, 16, 0, 0})
};

/// Class /Script/FSD.PoseCorrectionComponent
/// Size: 0x0130 (0x0000B0 - 0x0001E0)
class UPoseCorrectionComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(float)                                     FrontX                                                      OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     SideY                                                       OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     BackX                                                       OFFSET(get<float>, {0xBC, 4, 0, 0})
};

/// Struct /Script/FSD.PostProcessingBlendable
/// Size: 0x0020 (0x000000 - 0x000020)
class FPostProcessingBlendable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TScriptInterface<Class>)                   Blendable                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.PostProcessingManager
/// Size: 0x0030 (0x000220 - 0x000250)
class APostProcessingManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(TArray<TWeakObjectPtr<AFSDPostProcessingActor*>>) RegisteredActors                                     OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(TArray<FPostProcessingBlendable>)          CurrentBlendables                                           OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(TArray<class UMaterialInstanceDynamic*>)   Materials                                                   OFFSET(get<T>, {0x240, 16, 0, 0})
};

/// Class /Script/FSD.PresenceSubSystem
/// Size: 0x0028 (0x000030 - 0x000058)
class UPresenceSubSystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UDiscordWrapper*)                    DiscordWI                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UCommunityGoalWrapper*)              CommunityWI                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.ProceduralController
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UProceduralController : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FSD.ProceduralController.Server_RequestTunnelData
	// void Server_RequestTunnelData();                                                                                         // [0x1920800] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.ProceduralController.SendTunnelData
	// void SendTunnelData();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ProceduralController.SendRoomData
	// void SendRoomData();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ProceduralController.SendRequestedPLSData
	// void SendRequestedPLSData();                                                                                             // [0x1972620] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralController.SendRequestedCarverData
	// void SendRequestedCarverData(EDebrisItemPass pass);                                                                      // [0x19725a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralController.RequestPLSData
	// void RequestPLSData();                                                                                                   // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ProceduralController.RequestCarverData
	// void RequestCarverData(EDebrisItemPass pass);                                                                            // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ProceduralController.ReceivedTunnelData
	// void ReceivedTunnelData(TArray<FTunnelNode>& tunnels);                                                                   // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.ProceduralController.ReceivedRoomData
	// void ReceivedRoomData(int32_t Seed, TArray<FRoomNode>& Rooms, TArray<FPathObstacle>& Obstacles);                         // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.ProceduralController.Client_SendTunnelData
	// void Client_SendTunnelData(TArray<FTunnelNode> tunnels);                                                                 // [0x19709a0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/FSD.ProceduralController.Client_SendRoomData
	// void Client_SendRoomData(int32_t Seed, TArray<FRoomNode> Rooms, TArray<FPathObstacle> Obstacles);                        // [0x19707d0] Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable 
	// Function /Script/FSD.ProceduralController.Client_RecieveCarverSizes
	// void Client_RecieveCarverSizes(int32_t pass, int32_t carverCount);                                                       // [0x1970700] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.ProceduralController.Client_ReceivePLSLevelCarver
	// void Client_ReceivePLSLevelCarver(int32_t pass, FLevelGenerationCarverLists levelCarvers);                               // [0x1970620] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.ProceduralController.Client_ReceivePLSInfluencers
	// void Client_ReceivePLSInfluencers(FGeneratedInfluenceSets influenceSet);                                                 // [0x1970550] Net|NetReliableNative|Event|Protected|NetClient 
	// Function /Script/FSD.ProceduralController.Client_ReceivePLSDebris
	// void Client_ReceivePLSDebris(TArray<FGeneratedDebrisItem> levelDebris);                                                  // [0x19704b0] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/FSD.ProceduralObjectColliders
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UProceduralObjectColliders : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Class /Script/FSD.ProceduralResources
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UProceduralResources : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:


	/// Functions
	// Function /Script/FSD.ProceduralResources.GenerateResources
	// void GenerateResources();                                                                                                // [0x1971b00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralResources.GenerateMissingCarvedResources_Async
	// void GenerateMissingCarvedResources_Async(class AProceduralSetup*& Setup, FLatentActionInfo LatentInfo);                 // [0x1971a00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralResources.GenerateMissingCarvedResources
	// void GenerateMissingCarvedResources();                                                                                   // [0x19719e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralResources.GenerateCarvedResources_Async
	// void GenerateCarvedResources_Async(class AProceduralSetup*& Setup, FLatentActionInfo LatentInfo);                        // [0x19718e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralResources.GenerateCarvedResources
	// void GenerateCarvedResources();                                                                                          // [0x19718c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralResources.CreateResourcesFromObjectives
	// void CreateResourcesFromObjectives();                                                                                    // [0x1971480] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralResources.CountGeneratedCarvedResources
	// void CountGeneratedCarvedResources();                                                                                    // [0x1971410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralResources.CountFinalGeneratedCarvedResources
	// void CountFinalGeneratedCarvedResources();                                                                               // [0x1971410] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ProceduralSettings
/// Size: 0x0068 (0x000030 - 0x000098)
class UProceduralSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(class URoomDecorationObject*)              MiningpodCalldownLocationDecoration                         OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UMissionTemplate*>)           TestMissions                                                OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TWeakObjectPtr<class UBiome*>)             TestBiome                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UBiome*)                             DefaultBiome                                                OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TArray<FText>)                             GenericBiomeQuotes                                          OFFSET(get<T>, {0x78, 16, 0, 0})
	CMember(class UMissionTemplate*)                   DefaultMission                                              OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class UClass*)                             CaveGeneratorPLSClass                                       OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Struct /Script/FSD.CarvedResource
/// Size: 0x0028 (0x000000 - 0x000028)
class FCarvedResource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UCarvedResourceCreator*)             ResourceCreator                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<int32_t>)                           PredeterminedRooms                                          OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(int32_t)                                   amount                                                      OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(float)                                     Overflow                                                    OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FSD.GemResourceAmount
/// Size: 0x0010 (0x000000 - 0x000010)
class FGemResourceAmount : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UGemResourceCreator*)                GemCreator                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   amount                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.CollectableSpawnableItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FCollectableSpawnableItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UCollectableResourceData*)           Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   amount                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.RoomNodeBase
/// Size: 0x0001 (0x000000 - 0x000001)
class FRoomNodeBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FSD.RoomEntrance
/// Size: 0x0020 (0x000000 - 0x000020)
class FRoomEntrance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(bool)                                      IsBLocked                                                   OFFSET(get<bool>, {0x18, 1, 0, 0})
	CMember(ECaveEntranceType)                         EntranceType                                                OFFSET(get<T>, {0x19, 1, 0, 0})
	CMember(ECaveEntrancePriority)                     Priority                                                    OFFSET(get<T>, {0x1A, 1, 0, 0})
	DMember(int32_t)                                   PathObstacleID                                              OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FSD.RoomLinePoint
/// Size: 0x0030 (0x000000 - 0x000030)
class FRoomLinePoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     HRange                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     VRange                                                      OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     CielingNoiseRange                                           OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     WallNoiseRange                                              OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     FloorNoiseRange                                             OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     Cielingheight                                               OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     HeightScale                                                 OFFSET(get<float>, {0x24, 4, 0, 0})
	DMember(float)                                     FloorDepth                                                  OFFSET(get<float>, {0x28, 4, 0, 0})
	DMember(float)                                     FloorAngle                                                  OFFSET(get<float>, {0x2C, 4, 0, 0})
};

/// Struct /Script/FSD.RoomLine
/// Size: 0x0040 (0x000000 - 0x000040)
class FRoomLine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UFloodFillSettings*)                 WallNoiseOverride                                           OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 CeilingNoiseOverride                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 FloorNoiseOverride                                          OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(bool)                                      UseDetailNoise                                              OFFSET(get<bool>, {0x18, 1, 0, 0})
	CMember(TArray<FRoomLinePoint>)                    Points                                                      OFFSET(get<T>, {0x20, 16, 0, 0})
	CMember(TArray<FVector>)                           RightVectors                                                OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FSD.WeightedLinePoint
/// Size: 0x001C (0x000000 - 0x00001C)
class FWeightedLinePoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     NoiseRange                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     SkewFactor                                                  OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     FillAmount                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.Pillar
/// Size: 0x0020 (0x000000 - 0x000020)
class FPillar : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UFloodFillSettings*)                 NoiseOverride                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FWeightedLinePoint>)                Points                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(float)                                     NoiseScale                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     EndcapScale                                                 OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FSD.Rotator_NoQuantize
/// Size: 0x0000 (0x00000C - 0x00000C)
class FRotator_NoQuantize : public FRotator
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/FSD.RoomBox
/// Size: 0x0030 (0x000000 - 0x000030)
class FRoomBox : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRotator_NoQuantize)                       Rotation                                                    OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   Extends                                                     OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	DMember(float)                                     NoiseRange                                                  OFFSET(get<float>, {0x24, 4, 0, 0})
	CMember(class UFloodFillSettings*)                 Noise                                                       OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FSD.ResourceLocation
/// Size: 0x0020 (0x000000 - 0x000020)
class FResourceLocation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(float)                                     BaseAmount                                                  OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.RoomItem
/// Size: 0x0020 (0x000000 - 0x000020)
class FRoomItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UClass*)                             Spawnable                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	SMember(FRotator_NoQuantize)                       Rotation                                                    OFFSET(getStruct<T>, {0x14, 12, 0, 0})
};

/// Struct /Script/FSD.TriggerItem
/// Size: 0x0050 (0x000000 - 0x000050)
class FTriggerItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UClass*)                             TriggerClass                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x10, 48, 0, 0})
	SMember(FName)                                     Message                                                     OFFSET(getStruct<T>, {0x40, 8, 0, 0})
};

/// Struct /Script/FSD.GeneratedRoom
/// Size: 0x0088 (0x000000 - 0x000088)
class FGeneratedRoom : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(class UTerrainMaterial*)                   Material                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<FRoomLine>)                         Lines                                                       OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(TArray<FPillar>)                           Pillars                                                     OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FRoomBox>)                          BoxCarvers                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FRoomBox>)                          BoxFillers                                                  OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<FResourceLocation>)                 ResourceLocations                                           OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(TArray<FRoomEntrance>)                     Entrances                                                   OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(TArray<FRoomItem>)                         RoomItems                                                   OFFSET(get<T>, {0x68, 16, 0, 0})
	CMember(TArray<FTriggerItem>)                      TriggerItems                                                OFFSET(get<T>, {0x78, 16, 0, 0})
};

/// Struct /Script/FSD.RoomGeneratorItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FRoomGeneratorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class URoomGeneratorBase*)                 RoomGenerator                                               OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(float)                                     Rotation                                                    OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/FSD.RoomNode
/// Size: 0x00E0 (0x000000 - 0x0000E0)
class FRoomNode : public FRoomNodeBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 224;

public:
	DMember(int32_t)                                   ID                                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   CarvePass                                                   OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x8, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(TArray<int32_t>)                           EntranceIDs                                                 OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<int32_t>)                           ExitIDs                                                     OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TArray<FRoomEntrance>)                     RoomEntrances                                               OFFSET(get<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      CanHaveEnemies                                              OFFSET(get<bool>, {0x48, 1, 0, 0})
	CMember(TArray<FGeneratedRoom>)                    Rooms                                                       OFFSET(get<T>, {0x50, 16, 0, 0})
	DMember(float)                                     ResourceMultiplier                                          OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(bool)                                      CanBeUsedForRoomBasedDistribution                           OFFSET(get<bool>, {0x64, 1, 0, 0})
	DMember(float)                                     WeightedResourceAmount                                      OFFSET(get<float>, {0x68, 4, 0, 0})
	CMember(TArray<FRoomGeneratorItem>)                RoomGenerators                                              OFFSET(get<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/FSD.TunnelPath
/// Size: 0x0010 (0x000000 - 0x000010)
class FTunnelPath : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FVector>)                           Path                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.TunnelNode
/// Size: 0x00D8 (0x000000 - 0x0000D8)
class FTunnelNode : public FRoomNodeBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	DMember(int32_t)                                   EntranceRoomID                                              OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ExitRoomID                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	SMember(FRoomEntrance)                             Entrance                                                    OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	SMember(FRoomEntrance)                             Exit                                                        OFFSET(getStruct<T>, {0x28, 32, 0, 0})
	CMember(class UTunnelParameters*)                  ParametersOverride                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FTunnelPath)                               Path                                                        OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	DMember(int32_t)                                   ID                                                          OFFSET(get<int32_t>, {0x60, 4, 0, 0})
	SMember(FVector)                                   DirtStartLocation                                           OFFSET(getStruct<T>, {0x64, 12, 0, 0})
	DMember(bool)                                      AddDirt                                                     OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(float)                                     WeightedResourceAmount                                      OFFSET(get<float>, {0x74, 4, 0, 0})
};

/// Struct /Script/FSD.CaveInfluence
/// Size: 0x0010 (0x000000 - 0x000010)
class FCaveInfluence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector)                                   Center                                                      OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FSD.GeneratedInfluenceSet
/// Size: 0x0020 (0x000000 - 0x000020)
class FGeneratedInfluenceSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UObject*)                            CaveInfluencer                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NetworkID                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<FCaveInfluence>)                    CaveInfluences                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.GeneratedInfluenceSets
/// Size: 0x0018 (0x000000 - 0x000018)
class FGeneratedInfluenceSets : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FGeneratedInfluenceSet>)            InfluenceSets                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      IsValid                                                     OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/FSD.LevelGenerationCarver
/// Size: 0x0080 (0x000000 - 0x000080)
class FLevelGenerationCarver : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FMatrixWithExactSync)                      Transform                                                   OFFSET(getStruct<T>, {0x0, 64, 0, 0})
	CMember(class USTLMeshCarver*)                     MeshCarver                                                  OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UStaticMesh*)                        ConvexCarver                                                OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UStaticMeshCarver*)                  StaticMeshCarver                                            OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     ConvexExpensiveNoise                                        OFFSET(get<float>, {0x58, 4, 0, 0})
	CMember(class ULevelGenerationCarverComponent*)    Componenet                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(CarveOptionsCellSize)                      CarveCellSize                                               OFFSET(get<T>, {0x68, 1, 0, 0})
	CMember(class UTerrainMaterial*)                   TerrainMaterial                                             OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(ECarveFilterType)                          Filter                                                      OFFSET(get<T>, {0x78, 1, 0, 0})
	DMember(bool)                                      ToBeDiscarded                                               OFFSET(get<bool>, {0x79, 1, 0, 0})
};

/// Struct /Script/FSD.LevelGenerationCarverLists
/// Size: 0x0010 (0x000000 - 0x000010)
class FLevelGenerationCarverLists : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FLevelGenerationCarver>)            Carvers                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.LevelCarverPass
/// Size: 0x0018 (0x000000 - 0x000018)
class FLevelCarverPass : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FLevelGenerationCarverLists>)       Lists                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.GeneratedInstantCarvers
/// Size: 0x0010 (0x000000 - 0x000010)
class FGeneratedInstantCarvers : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FLevelCarverPass>)                  LevelCarverPasses                                           OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.GeneratedDebris
/// Size: 0x0058 (0x000000 - 0x000058)
class FGeneratedDebris : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TMap<class UDebrisBase*, class UObject*>)  Debris                                                      OFFSET(get<T>, {0x0, 80, 0, 0})
	DMember(bool)                                      IsValid                                                     OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/FSD.CaveInfluenceSet
/// Size: 0x0010 (0x000000 - 0x000010)
class FCaveInfluenceSet : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FCaveInfluence>)                    CaveInfluences                                              OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.InfluenceMap
/// Size: 0x0050 (0x000000 - 0x000050)
class FInfluenceMap : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<class UObject*, FCaveInfluenceSet>)   CaveInfluences                                              OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/FSD.ProceduralSetup
/// Size: 0x0298 (0x000220 - 0x0004B8)
class AProceduralSetup : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1208;

public:
	DMember(bool)                                      ShowItemNoisePattern                                        OFFSET(get<bool>, {0x220, 1, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x224, 4, 0, 0})
	DMember(bool)                                      UseRandomSeed                                               OFFSET(get<bool>, {0x228, 1, 0, 0})
	SMember(FRandomStream)                             RandomStream                                                OFFSET(getStruct<T>, {0x230, 8, 0, 0})
	SMember(FRandomStream)                             RandomStreamServer                                          OFFSET(getStruct<T>, {0x238, 8, 0, 0})
	SMember(FRandomStream)                             RandomStreamAsync                                           OFFSET(getStruct<T>, {0x240, 8, 0, 0})
	SMember(FRandomStream)                             RandomStreamAsyncServer                                     OFFSET(getStruct<T>, {0x248, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEncounterSpawnedEvent                                     OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	CMember(TArray<FEncounterSpecialItem>)             SpecialEncountersToSpawn                                    OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(class USpecialEvent*)                      ForcedMachineEvent                                          OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USpecialEvent*)                      ForcedTreasure                                              OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class USpecialEvent*)                      ForcedOtherEvent                                            OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UNoisyPathfinderComponent*)          NoisyPathfinder                                             OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class UProceduralTunnelComponent*)         ProceduralTunnel                                            OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UPLSEncounterComponent*)             Encounters                                                  OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UProceduralVeinsComponent*)          Veins                                                       OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UProceduralResources*)               Resources                                                   OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UProceduralObjectColliders*)         ObjectColliders                                             OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(class ADeepCSGWorld*)                      CSGWorld                                                    OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 PathfinderNoise                                             OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(TArray<FCarvedResource>)                   CarvedResources                                             OFFSET(get<T>, {0x2F0, 16, 0, 0})
	CMember(class UClass*)                             MissionDNA                                                  OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(TArray<FGemResourceAmount>)                GemResourcesToGenerate                                      OFFSET(get<T>, {0x308, 16, 0, 0})
	CMember(TArray<FCollectableSpawnableItem>)         CollectablesToGenerate                                      OFFSET(get<T>, {0x318, 16, 0, 0})
	CMember(ESpawnSettings)                            SpawnSettings                                               OFFSET(get<T>, {0x328, 1, 0, 0})
	DMember(bool)                                      CanSpawnSpecialEvents                                       OFFSET(get<bool>, {0x329, 1, 0, 0})
	DMember(bool)                                      ShouldCarveTunnels                                          OFFSET(get<bool>, {0x32A, 1, 0, 0})
	CMember(TArray<FRoomNode>)                         Rooms                                                       OFFSET(get<T>, {0x330, 16, 0, 0})
	CMember(TArray<FRoomNode>)                         RoomsInitialState                                           OFFSET(get<T>, {0x340, 16, 0, 0})
	CMember(TArray<FTunnelNode>)                       tunnels                                                     OFFSET(get<T>, {0x350, 16, 0, 0})
	SMember(FGeneratedInfluenceSets)                   GeneratedInfluenceSets                                      OFFSET(getStruct<T>, {0x360, 24, 0, 0})
	SMember(FGeneratedInstantCarvers)                  GeneratedInstantCarvers                                     OFFSET(getStruct<T>, {0x380, 16, 0, 0})
	SMember(FGeneratedDebris)                          GeneratedDebris                                             OFFSET(getStruct<T>, {0x390, 88, 0, 0})
	CMember(class UBiome*)                             Biome                                                       OFFSET(get<T>, {0x3E8, 8, 0, 0})
	DMember(float)                                     missionLength                                               OFFSET(get<float>, {0x3F0, 4, 0, 0})
	CMember(TArray<FPathObstacle>)                     PathObstacles                                               OFFSET(get<T>, {0x3F8, 16, 0, 0})
	SMember(FInfluenceMap)                             InfluenceMap                                                OFFSET(getStruct<T>, {0x408, 80, 0, 0})
	CMember(TArray<class UResourceData*>)              SpawnedResources                                            OFFSET(get<T>, {0x458, 16, 0, 0})
	DMember(float)                                     CaveDepth                                                   OFFSET(get<float>, {0x468, 4, 0, 0})
	CMember(class AActor*)                             PostProcessActor                                            OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class USpecialEvent*)                      SpecialEvent                                                OFFSET(get<T>, {0x478, 8, 0, 0})
	DMember(bool)                                      IsInitialized                                               OFFSET(get<bool>, {0x480, 1, 0, 0})
	DMember(int32_t)                                   CurrentRoomPass                                             OFFSET(get<int32_t>, {0x484, 4, 0, 0})
	DMember(bool)                                      Pass1Completed                                              OFFSET(get<bool>, {0x488, 1, 0, 0})
	DMember(bool)                                      UsePerLevelCritterSpawning                                  OFFSET(get<bool>, {0x489, 1, 0, 0})
	SMember(FString)                                   LastCompletedPLSPass                                        OFFSET(getStruct<T>, {0x490, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ProceduralSetup.StartMusicAndAmbient
	// void StartMusicAndAmbient(int32_t Music);                                                                                // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.StartGenerationOnClient
	// void StartGenerationOnClient(class AFSDPlayerController* client);                                                        // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.SpawnSpecialEvents
	// void SpawnSpecialEvents();                                                                                               // [0x1972d50] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.SpawnObjectiveEncounter
	// void SpawnObjectiveEncounter();                                                                                          // [0x1972d30] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.SpawnObjectiveCriticalItems
	// void SpawnObjectiveCriticalItems(ECriticalItemPass& pass);                                                               // [0x1972ca0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.SpawnItems_Async
	// void SpawnItems_Async(class AProceduralSetup* Setup, FLatentActionInfo LatentInfo);                                      // [0x1972bc0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.SpawnItems
	// void SpawnItems();                                                                                                       // [0x1972ba0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.SpawnEncounters
	// void SpawnEncounters();                                                                                                  // [0x1972b80] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.SpawnDebrisItems_Async
	// void SpawnDebrisItems_Async(class AProceduralSetup* Setup, FLatentActionInfo LatentInfo, EDebrisItemPass pass, int32_t Depth); // [0x1972a20] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.SpawnDebrisItems
	// void SpawnDebrisItems(EDebrisItemPass pass);                                                                             // [0x19729a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.SetSeed
	// void SetSeed(int32_t Seed);                                                                                              // [0x1972910] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.ResetData
	// void ResetData();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.RemoveBLockedEntrances
	// void RemoveBLockedEntrances();                                                                                           // [0x1972430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.OnPLSDataRecieved
	// void OnPLSDataRecieved();                                                                                                // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.OnObjectivesCompleted
	// void OnObjectivesCompleted();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.OnCarverDataRecieved
	// void OnCarverDataRecieved(EDebrisItemPass pass);                                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.IsGeneratedDataReady
	// bool IsGeneratedDataReady();                                                                                             // [0x19720e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProceduralSetup.IsCarverDataReady
	// bool IsCarverDataReady(EDebrisItemPass pass);                                                                            // [0x1972030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProceduralSetup.InitializeObjectives
	// void InitializeObjectives();                                                                                             // [0x1972010] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.GetMissionDNA
	// class UMissionDNA* GetMissionDNA();                                                                                      // [0x1971fc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProceduralSetup.GetGemsResourceAmounts
	// TMap<FString, float> GetGemsResourceAmounts();                                                                           // [0x1971ef0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProceduralSetup.GetCSGWorld
	// class ADeepCSGWorld* GetCSGWorld();                                                                                      // [0x1971ce0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProceduralSetup.GetCollectablesResourceAmounts
	// TMap<FString, float> GetCollectablesResourceAmounts();                                                                   // [0x1971d10] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProceduralSetup.GenerateRoomsFromGraph_Async
	// void GenerateRoomsFromGraph_Async(class AProceduralSetup* Setup, FLatentActionInfo LatentInfo, int32_t CarvePass);       // [0x1971bb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.GenerateRoomsFromGraph
	// void GenerateRoomsFromGraph(int32_t CarvePass);                                                                          // [0x1971b20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.GenerateLandscapeFromData
	// void GenerateLandscapeFromData(int32_t Seed, TArray<FRoomNode>& Rooms, TArray<FPathObstacle>& Obstacles);                // [0x1d6f900] Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.GenerateLandscape
	// void GenerateLandscape();                                                                                                // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.FindLocationInDirection
	// FVector FindLocationInDirection(FVector Origin, FVector Direction, float horizontalDeviation, float verticalDeviation, FRandRange Distance, float additionalDistance); // [0x1971690] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.FindEntrancesForAllConnections
	// void FindEntrancesForAllConnections();                                                                                   // [0x1971670] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.FillTunnels_Async
	// void FillTunnels_Async(class AProceduralSetup* Setup, FLatentActionInfo LatentInfo);                                     // [0x1971590] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.FillTunnels
	// void FillTunnels();                                                                                                      // [0x1971570] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.DoneCarving
	// void DoneCarving();                                                                                                      // [0xbd29a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.DoAsyncThreadGeneration
	// bool DoAsyncThreadGeneration();                                                                                          // [0x1971540] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProceduralSetup.CreateTunnelPaths
	// void CreateTunnelPaths();                                                                                                // [0x19714a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.CreateItemDepths
	// int32_t CreateItemDepths();                                                                                              // [0x1971450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.CreateGeneratedInfluenceSet
	// void CreateGeneratedInfluenceSet();                                                                                      // [0x1971430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.ConnectRooms
	// int32_t ConnectRooms(FRoomNode& from, FRoomNode& to, bool hasDirt, class UTunnelParameters* tunnelParameterOverride);    // [0x1970dd0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.ConnectRoomIds
	// int32_t ConnectRoomIds(int32_t fromID, int32_t toID, bool hasDirt, class UTunnelParameters* tunnelParameterOverride);    // [0x1970c60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.CommitCarving
	// void CommitCarving(bool finalCommit, bool generateMesh);                                                                 // [0x1970b90] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.CarveWithGeneratedInstantCarvers
	// void CarveWithGeneratedInstantCarvers();                                                                                 // [0x1970490] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.CarveTunnels
	// void CarveTunnels();                                                                                                     // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.BeginLiveGeneration
	// void BeginLiveGeneration();                                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.BeginGenerating
	// void BeginGenerating();                                                                                                  // [0x1970470] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.AddRoomToInitialState
	// void AddRoomToInitialState(FRoomNode& RoomNode);                                                                         // [0x1d6f900] Event|Public|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.ProceduralSetup.AddRoom
	// int32_t AddRoom(FVector Location, bool CanHaveEnemies, class URoomGeneratorBase* RoomGenerator, bool canBeRotated, FVector& outCenter, FRoomNode& outRoom, float ResourceMultiplier); // [0x196ffd0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.AddInfluenceToTunnelEntrances
	// void AddInfluenceToTunnelEntrances(class UCaveInfluencer* Influencer, float range);                                      // [0x196ff00] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.AddImportantLocation
	// void AddImportantLocation(FVector& Location, float Radius);                                                              // [0x196fe20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.AddEnemyDebris
	// void AddEnemyDebris();                                                                                                   // [0x196fe00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.AddDebrisCollider
	// int32_t AddDebrisCollider(FDebrisCapsule& Capsule);                                                                      // [0x196fd40] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.AddCaveInfluence
	// void AddCaveInfluence(class UCaveInfluencer* Influencer, FVector& Location, float range);                                // [0x196fc20] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ProceduralSetup.AddAirParticlesCollider
	// int32_t AddAirParticlesCollider(FDebrisCapsule& Capsule);                                                                // [0x196fb60] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.CaveInfluencer
/// Size: 0x0000 (0x000030 - 0x000030)
class UCaveInfluencer : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.ProceduralTunnelComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UProceduralTunnelComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(class UTunnelParameters*)                  TunnelParameters                                            OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(bool)                                      CreateDirt                                                  OFFSET(get<bool>, {0xB8, 1, 0, 0})
	CMember(class UCaveInfluencer*)                    DirtInfluencer                                              OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     DirtInfluencerRange                                         OFFSET(get<float>, {0xC8, 4, 0, 0})
};

/// Struct /Script/FSD.VeinResource
/// Size: 0x0030 (0x000000 - 0x000030)
class FVeinResource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UVeinResourceCreator*)               ResourceCreator                                             OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     VeinLengthToGenerate                                        OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.ProceduralVeinsComponent
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UProceduralVeinsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	CMember(TArray<FVeinResource>)                     VeinResources                                               OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ProceduralVeinsComponent.GenerateResourceVeins_Async
	// void GenerateResourceVeins_Async(class AProceduralSetup*& Setup, FLatentActionInfo LatentInfo);                          // [0x1977780] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralVeinsComponent.GenerateResourceVeins
	// void GenerateResourceVeins();                                                                                            // [0x1977760] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralVeinsComponent.GenerateMissingResourceVeins_Async
	// void GenerateMissingResourceVeins_Async(class AProceduralSetup*& Setup, FLatentActionInfo LatentInfo);                   // [0x1977660] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralVeinsComponent.GenerateMissingResourceVeins
	// void GenerateMissingResourceVeins();                                                                                     // [0x1977640] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralVeinsComponent.GenerateDebrisVeins_Async
	// void GenerateDebrisVeins_Async(class AProceduralSetup*& Setup, EDebrisCarvedType CarverType, FLatentActionInfo LatentInfo); // [0x1977500] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralVeinsComponent.GenerateDebrisVeins
	// void GenerateDebrisVeins(EDebrisCarvedType CarverType);                                                                  // [0x1977480] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralVeinsComponent.CountGeneratedResourcesInVeins
	// void CountGeneratedResourcesInVeins();                                                                                   // [0x1977100] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralVeinsComponent.CountFinalGeneratedResourcesInVeins
	// void CountFinalGeneratedResourcesInVeins();                                                                              // [0x19770e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProceduralVeinsComponent.CalculateResourceDistribution
	// void CalculateResourceDistribution();                                                                                    // [0x1977030] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.ProfileEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FProfileEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<class UObject*>)            Context                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   Category                                                    OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(float)                                     TimeSpent                                                   OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Class /Script/FSD.ProfilingSubSystem
/// Size: 0x0010 (0x000030 - 0x000040)
class UProfilingSubSystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<FProfileEntry>)                     Entries                                                     OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ProfilingSubSystem.GetTotalTime
	// float GetTotalTime();                                                                                                    // [0x1977ac0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProfilingSubSystem.GetEntries
	// TArray<FProfileEntry> GetEntries();                                                                                      // [0x1977980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProfilingSubSystem.GetCategoryTimings
	// TArray<FProfileCategoryTiming> GetCategoryTimings();                                                                     // [0x19778a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.FakePhysicsProjectile
/// Size: 0x00B8 (0x0002F0 - 0x0003A8)
class AFakePhysicsProjectile : public AProjectileBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	SMember(FFakeMoverState)                           MoverState                                                  OFFSET(getStruct<T>, {0x2F0, 96, 0, 0})
	SMember(FFakeMoveState)                            PosVel                                                      OFFSET(getStruct<T>, {0x350, 36, 0, 0})
	CMember(class UFakeMoverSettings*)                 MoveSettings                                                OFFSET(get<T>, {0x378, 8, 0, 0})
	DMember(float)                                     InitialSpeed                                                OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(float)                                     DampOmega                                                   OFFSET(get<float>, {0x384, 4, 0, 0})
	DMember(float)                                     SyncTime                                                    OFFSET(get<float>, {0x388, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.FakePhysicsProjectile.SphereBeginOverlap
	// void SphereBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x1978a00] Final|Native|Private|HasOutParms 
	// Function /Script/FSD.FakePhysicsProjectile.OnRep_PosVel
	// void OnRep_PosVel(FFakeMoveState& PosVel);                                                                               // [0x1978040] Final|Native|Public|HasOutParms 
};

/// Class /Script/FSD.ProjectileAttack
/// Size: 0x0028 (0x000028 - 0x000050)
class UProjectileAttack : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FFloatInterval)                            Delay                                                       OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      TriggerOnEvent                                              OFFSET(get<bool>, {0x30, 1, 0, 0})
	SMember(FFloatInterval)                            HorizontalAngleOffset                                       OFFSET(getStruct<T>, {0x34, 8, 0, 0})
	SMember(FFloatInterval)                            VerticalAngleOffset                                         OFFSET(getStruct<T>, {0x3C, 8, 0, 0})
	SMember(FName)                                     OverrideSocketName                                          OFFSET(getStruct<T>, {0x44, 8, 0, 0})
};

/// Class /Script/FSD.NormalProjectileAttack
/// Size: 0x0010 (0x000050 - 0x000060)
class UNormalProjectileAttack : public UProjectileAttack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             Projectile                                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     RandomAngle                                                 OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/FSD.BallisticProjectileAttack
/// Size: 0x0010 (0x000050 - 0x000060)
class UBallisticProjectileAttack : public UProjectileAttack
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UClass*)                             Projectile                                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     ProjectileArc                                               OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     Gravity                                                     OFFSET(get<float>, {0x5C, 4, 0, 0})
};

/// Class /Script/FSD.ProjectileAttackBaseComponent
/// Size: 0x00A8 (0x0000F0 - 0x000198)
class UProjectileAttackBaseComponent : public UAttackBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	CMember(TArray<class UProjectileAttack*>)          Projectiles                                                 OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<class UAnimMontage*>)               Montages                                                    OFFSET(get<T>, {0x100, 16, 0, 0})
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x110, 8, 0, 0})
	CMember(EProjectileAttackRotationType)             RotationHandling                                            OFFSET(get<T>, {0x118, 4, 0, 0})
	CMember(class UTargetValidator*)                   FinalValidationCheck                                        OFFSET(get<T>, {0x120, 8, 0, 0})
	DMember(bool)                                      ProjectilesIgnoreEachOther                                  OFFSET(get<bool>, {0x128, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAttackStartedEvent                                        OFFSET(getStruct<T>, {0x158, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProjectileFiredEvent                                      OFFSET(getStruct<T>, {0x168, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAttackEndedEvent                                          OFFSET(getStruct<T>, {0x178, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProjectileSpawnedEvent                                    OFFSET(getStruct<T>, {0x188, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileAttackBaseComponent.TriggerMontage
	// bool TriggerMontage(class AActor* Target);                                                                               // [0x197d590] Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ProjectileAttackBaseComponent.SelectMontage
	// class UAnimMontage* SelectMontage();                                                                                     // [0x197d090] Native|Event|Protected|BlueprintEvent|Const 
	// Function /Script/FSD.ProjectileAttackBaseComponent.OnPerformAttack
	// void OnPerformAttack();                                                                                                  // [0x1861180] Native|Protected     
	// Function /Script/FSD.ProjectileAttackBaseComponent.OnMontageEnded
	// void OnMontageEnded(class UAnimMontage* Montage, bool interrupted);                                                      // [0x197cc40] Final|Native|Protected 
	// Function /Script/FSD.ProjectileAttackBaseComponent.MulticastProjectileFired
	// void MulticastProjectileFired();                                                                                         // [0x17f3860] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.ProjectileAttackBaseComponent.CancelMontage
	// void CancelMontage();                                                                                                    // [0x197bed0] Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.ProjectileAttackComponent
/// Size: 0x0008 (0x000198 - 0x0001A0)
class UProjectileAttackComponent : public UProjectileAttackBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	DMember(bool)                                      ManualyComplete                                             OFFSET(get<bool>, {0x198, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileAttackComponent.AddAttackMontage
	// void AddAttackMontage(class UAnimMontage* attackMontage);                                                                // [0x197be10] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.ExplosionBaseComponent
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UExplosionBaseComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(float)                                     CarveDiameterCM                                             OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(float)                                     CarveNoiseCM                                                OFFSET(get<float>, {0xB4, 4, 0, 0})
	DMember(float)                                     CarveBurnThicknessCM                                        OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(float)                                     CarveNormalOffsetCM                                         OFFSET(get<float>, {0xBC, 4, 0, 0})
	DMember(float)                                     CarveNormalSqueeze                                          OFFSET(get<float>, {0xC0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ExplosionBaseComponent.DamageOnlyFromHit
	// void DamageOnlyFromHit(FHitResult& HitResult, class UDamageComponent*& DamageComponent);                                 // [0x197c920] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ExplosionBaseComponent.DamageOnly
	// void DamageOnly(FVector Location, FName BoneName, class UPrimitiveComponent* Target, class UPhysicalMaterial* PhysicalMaterial, class UDamageComponent*& DamageComponent); // [0x197c770] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ExplosionBaseComponent.DamageArmorClients
	// void DamageArmorClients(FHitResult& HitResult, class UDamageComponent*& DamageComponent);                                // [0x197c630] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ExplosionBaseComponent.DamageAndCarveFromHit
	// void DamageAndCarveFromHit(FHitResult& HitResult, class UDamageComponent*& DamageComponent);                             // [0x197c4f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ExplosionBaseComponent.DamageAndCarve
	// void DamageAndCarve(FVector Location, FVector ImpactNormal, FName BoneName, class UPrimitiveComponent* Target, class UPhysicalMaterial* PhysicalMaterial, class UDamageComponent*& DamageComponent); // [0x197c2f0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ExplosionBaseComponent.CarveOnly
	// void CarveOnly(FVector Location, FVector ImpactNormal);                                                                  // [0x197bef0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.ExplosionComponent
/// Size: 0x0000 (0x0000C8 - 0x0000C8)
class UExplosionComponent : public UExplosionBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
};

/// Class /Script/FSD.ProjectileExplosion
/// Size: 0x0028 (0x0000C8 - 0x0000F0)
class UProjectileExplosion : public UExplosionBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FScaledEffect)                             ExplosionEffect                                             OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	CMember(class USoundCue*)                          ExplosionSound                                              OFFSET(get<T>, {0xD8, 8, 0, 0})
	CMember(class UForceFeedbackEffect*)               ForceFeedbackEffect                                         OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(class UForceFeedbackAttenuation*)          ForceFeedbackAttanuation                                    OFFSET(get<T>, {0xE8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileExplosion.SpawnEffectsFromHit
	// void SpawnEffectsFromHit(FHitResult& Hit);                                                                               // [0x197d4b0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProjectileExplosion.SpawnEffects
	// void SpawnEffects(FVector Location, FVector Normal);                                                                     // [0x197d3d0] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.ProjectileLauncherBaseComponent
/// Size: 0x0058 (0x000110 - 0x000168)
class UProjectileLauncherBaseComponent : public UWeaponFireComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	DMember(bool)                                      IgnoreCollisionWithSelf                                     OFFSET(get<bool>, {0x110, 1, 0, 0})
	DMember(bool)                                      UseProjectileUpgrades                                       OFFSET(get<bool>, {0x111, 1, 0, 0})
	DMember(bool)                                      UseSpread                                                   OFFSET(get<bool>, {0x112, 1, 0, 0})
	DMember(float)                                     VerticalSpread                                              OFFSET(get<float>, {0x114, 4, 0, 0})
	DMember(float)                                     HorizontalSpread                                            OFFSET(get<float>, {0x118, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnProjectileSpawned                                         OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               ProjectileUpgrades                                          OFFSET(get<T>, {0x130, 16, 0, 0})
	DMember(float)                                     ArcStartAngle                                               OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(bool)                                      TransferCharacterVelocityToProjectile                       OFFSET(get<bool>, {0x144, 1, 0, 0})
	DMember(bool)                                      CameraToMuzzleFireCheck                                     OFFSET(get<bool>, {0x145, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileLauncherBaseComponent.Server_StopFire
	// void Server_StopFire();                                                                                                  // [0x17f49e0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ProjectileLauncherBaseComponent.Server_Fire
	// void Server_Fire(FTransform Transform, FVector_NetQuantizeNormal initialBonusVelocity, class AProjectileBase* DormentProjectile, bool notifyClients); // [0x197d0c0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.ProjectileLauncherBaseComponent.ProjectileSpawned__DelegateSignature
	// void ProjectileSpawned__DelegateSignature(class AProjectileBase* Projectile);                                            // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.ProjectileLauncherBaseComponent.All_ShowHit
	// void All_ShowHit();                                                                                                      // [0x17f3860] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.ProjectileLauncherComponent
/// Size: 0x0018 (0x000168 - 0x000180)
class UProjectileLauncherComponent : public UProjectileLauncherBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x168, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileLauncherComponent.SetProjectileClass
	// void SetProjectileClass(class UClass* NewProjectileClass);                                                               // [0x197d280] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ChargedProjectileLauncherComponent
/// Size: 0x0028 (0x000168 - 0x000190)
class UChargedProjectileLauncherComponent : public UProjectileLauncherBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             NormalProjectileClass                                       OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class UClass*)                             ChargedProjectileClass                                      OFFSET(get<T>, {0x170, 8, 0, 0})
	DMember(float)                                     ProjectileChangeChargeValue                                 OFFSET(get<float>, {0x178, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ChargedProjectileLauncherComponent.SetProjectileClassCharged
	// void SetProjectileClassCharged(class UClass* NewProjectileClass);                                                        // [0x197d310] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ChargedProjectileLauncherComponent.SetProjectileClass
	// void SetProjectileClass(class UClass* NewProjectileClass);                                                               // [0x197d280] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ProjectileThrowerAttack
/// Size: 0x0050 (0x0001A0 - 0x0001F0)
class UProjectileThrowerAttack : public UProjectileAttackComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	CMember(class USkeletalMesh*)                      ThrowerMesh                                                 OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UClass*)                             ThrowerAnimInstance                                         OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(TArray<class UAnimMontage*>)               ThrowerMontages                                             OFFSET(get<T>, {0x1B0, 16, 0, 0})
	SMember(FName)                                     ThrowerAttachPoint                                          OFFSET(getStruct<T>, {0x1C0, 8, 0, 0})
	DMember(bool)                                      RotateToTarget                                              OFFSET(get<bool>, {0x1C8, 1, 0, 0})
	SMember(FRotator)                                  ThrowerRotation                                             OFFSET(getStruct<T>, {0x1D4, 12, 0, 0})
	SMember(FVector)                                   ThrowerOffset                                               OFFSET(getStruct<T>, {0x1E0, 12, 0, 0})


	/// Functions
	// Function /Script/FSD.ProjectileThrowerAttack.OnThrowerMontageEnded
	// void OnThrowerMontageEnded(class UAnimMontage* Montage, bool bInterrupted);                                              // [0x197cfc0] Final|Native|Private 
	// Function /Script/FSD.ProjectileThrowerAttack.All_ShowThrowerAnimation
	// void All_ShowThrowerAnimation();                                                                                         // [0x1861160] Final|Net|Native|Event|NetMulticast|Private 
};

/// Class /Script/FSD.PromotionRewardsSettings
/// Size: 0x0020 (0x000030 - 0x000050)
class UPromotionRewardsSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<FClaimableRewardEntry>)             FirstPromotionRewards                                       OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FClaimableRewardEntry>)             SubsequentPromotionRewards                                  OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FSD.PromotionRewardsLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPromotionRewardsLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.PromotionRewardsLibrary.HasPendingPromotionRewards
	// bool HasPendingPromotionRewards(class UObject* WorldContext);                                                            // [0x197caf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.PromotionRewardsLibrary.ClaimPromotionRewards
	// bool ClaimPromotionRewards(class UObject* WorldContext, class APlayerController* PlayerController, TArray<FClaimableRewardEntry>& OutRewards, bool& OutFirstPromotion); // [0x197bfd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Struct /Script/FSD.PropHuntContestantState
/// Size: 0x0018 (0x000000 - 0x000018)
class FPropHuntContestantState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(EPropHuntRole)                             Role                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FVector2D)                                 DisguiseSize                                                OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   PlayerCharacter                                             OFFSET(get<T>, {0xC, 8, 0, 0})
	DMember(int32_t)                                   Lives                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Class /Script/FSD.PropHuntContestant
/// Size: 0x0068 (0x0000B0 - 0x000118)
class UPropHuntContestant : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FPropHuntContestantState)                  State                                                       OFFSET(getStruct<T>, {0xC0, 24, 0, 0})
	SMember(FPropHuntContestantState)                  previousState                                               OFFSET(getStruct<T>, {0xD8, 24, 0, 0})
	CMember(TWeakObjectPtr<class APropHuntDisguiseActor*>) DisguiseActor                                           OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPropHuntOverlayWidget*>) OverlayWidget                                           OFFSET(get<T>, {0xF8, 8, 0, 0})
	SMember(FPropHuntContestantState)                  CurrentState                                                OFFSET(getStruct<T>, {0x100, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.PropHuntContestant.PropHuntDelegate__DelegateSignature
	// void PropHuntDelegate__DelegateSignature(class UPropHuntContestant* ContestantComponent);                                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PropHuntContestant.OnRep_State
	// void OnRep_State();                                                                                                      // [0x197cf80] Final|Native|Protected 
	// Function /Script/FSD.PropHuntContestant.OnPlayerStateChanged
	// void OnPlayerStateChanged(ECharacterState InState);                                                                      // [0x197cf00] Final|Native|Protected 
	// Function /Script/FSD.PropHuntContestant.OnPlayerPassedOut
	// void OnPlayerPassedOut(class APlayerCharacter* InPlayer);                                                                // [0x197ce70] Final|Native|Protected 
	// Function /Script/FSD.PropHuntContestant.OnPlayerDestroyed
	// void OnPlayerDestroyed(class AActor* InActor);                                                                           // [0x197cde0] Final|Native|Protected 
	// Function /Script/FSD.PropHuntContestant.OnPlayerCameraChanged
	// void OnPlayerCameraChanged(ECharacterCameraMode OldMode, ECharacterCameraMode NewMode);                                  // [0x197cd10] Final|Native|Protected 
	// Function /Script/FSD.PropHuntContestant.OnItemUnequipped
	// void OnItemUnequipped(class AItem* InItem);                                                                              // [0x197cbb0] Final|Native|Protected 
	// Function /Script/FSD.PropHuntContestant.GetRemainingLives
	// int32_t GetRemainingLives();                                                                                             // [0x197cad0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PropHuntContestant.GetPropHuntRole
	// EPropHuntRole GetPropHuntRole();                                                                                         // [0x197cab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PropHuntContestant.GetMaxLives
	// int32_t GetMaxLives();                                                                                                   // [0x197ca80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PropHuntContestant.Client_ShowEndScreen
	// void Client_ShowEndScreen(EPropHuntEndScreen EndScreenType, bool GameWon);                                               // [0x197c210] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FSD.PropHuntOverlayWidget
/// Size: 0x0018 (0x000260 - 0x000278)
class UPropHuntOverlayWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(TWeakObjectPtr<class UPropHuntManager*>)   PropHuntManager                                             OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPropHuntContestant*>) ContestantComponent                                        OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   PlayerCharacter                                             OFFSET(get<T>, {0x270, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PropHuntOverlayWidget.ShowMe
	// void ShowMe();                                                                                                           // [0x197d3a0] Final|Native|Protected 
	// Function /Script/FSD.PropHuntOverlayWidget.HideMe
	// void HideMe();                                                                                                           // [0x197cb80] Final|Native|Protected 
};

/// Class /Script/FSD.PropHuntEndScreenWidget
/// Size: 0x0008 (0x000260 - 0x000268)
class UPropHuntEndScreenWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(EPropHuntEndScreen)                        EndScreenType                                               OFFSET(get<T>, {0x260, 1, 0, 0})
	DMember(bool)                                      GameWon                                                     OFFSET(get<bool>, {0x261, 1, 0, 0})
};

/// Class /Script/FSD.PropHuntDisguiseActor
/// Size: 0x0020 (0x000220 - 0x000240)
class APropHuntDisguiseActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class UDialogDataAsset*)                   ShoutDrinkOverride                                          OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  CapsuleComponent                                            OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USceneComponent*)                    ContentComponent                                            OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x238, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.PropHuntDisguiseActor.ReceiveRefresh
	// void ReceiveRefresh(FRandomStream InRandom);                                                                             // [0x1d6f900] Event|Protected|HasDefaults|BlueprintEvent 
};

/// Class /Script/FSD.PropHuntDrinkEffect
/// Size: 0x0008 (0x0000C0 - 0x0000C8)
class UPropHuntDrinkEffect : public UDrinkEffectComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(int32_t)                                   BarSlotIndex                                                OFFSET(get<int32_t>, {0xC0, 4, 0, 0})
};

/// Class /Script/FSD.PropHuntHunterItem
/// Size: 0x0008 (0x000470 - 0x000478)
class APropHuntHunterItem : public AThrowableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1144;

public:
	CMember(TWeakObjectPtr<class UPropHuntContestant*>) ContestantComponent                                        OFFSET(get<T>, {0x470, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PropHuntHunterItem.CameraModeUpdated
	// void CameraModeUpdated(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode);                          // [0x18ea7a0] Final|Native|Protected 
};

/// Struct /Script/FSD.PropHuntManagerState
/// Size: 0x0008 (0x000000 - 0x000008)
class FPropHuntManagerState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   ActiveProps                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   ActiveHunters                                               OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Class /Script/FSD.PropHuntManager
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UPropHuntManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FPropHuntManagerState)                     State                                                       OFFSET(getStruct<T>, {0xC0, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UPropHuntContestant*>>) Contestants                                              OFFSET(get<T>, {0xC8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PropHuntManager.StateChangedDelegate__DelegateSignature
	// void StateChangedDelegate__DelegateSignature();                                                                          // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.PropHuntManager.OnRep_State
	// void OnRep_State();                                                                                                      // [0x197cfa0] Final|Native|Protected 
	// Function /Script/FSD.PropHuntManager.GetActiveProps
	// int32_t GetActiveProps();                                                                                                // [0x990360] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.PropHuntManager.GetActiveHunters
	// int32_t GetActiveHunters();                                                                                              // [0x197ca60] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.PropHuntSettingsShouts
/// Size: 0x0030 (0x000000 - 0x000030)
class FPropHuntSettingsShouts : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UDialogDataAsset*)                   DrinkHunter                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   DrinkProp                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   PropHit_AsProp                                              OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   PropHit_AsHunter                                            OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Attention_Prop                                              OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   Attention_Hunter                                            OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FSD.PropHuntEventSettings
/// Size: 0x0050 (0x000000 - 0x000050)
class FPropHuntEventSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TSet<TSoftObjectPtr<UClass*>>)             DisguiseActors                                              OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/FSD.PropHuntSettings
/// Size: 0x02E0 (0x000030 - 0x000310)
class UPropHuntSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	DMember(int32_t)                                   MaxAmmo                                                     OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   BonusAmmoOnHit                                              OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	SMember(FPropHuntSettingsShouts)                   Shouts                                                      OFFSET(getStruct<T>, {0x38, 48, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             OverlayWidget                                               OFFSET(get<T>, {0x68, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EndScreenWidget                                             OFFSET(get<T>, {0x90, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             HunterItem                                                  OFFSET(get<T>, {0xB8, 40, 0, 0})
	CMember(TSet<TSoftObjectPtr<UClass*>>)             DisguiseActors                                              OFFSET(get<T>, {0xE0, 80, 0, 0})
	CMember(TMap<EHolidayType, FPropHuntEventSettings>) HolidayDisguiseActors                                      OFFSET(get<T>, {0x130, 80, 0, 0})
	CMember(TWeakObjectPtr<class UNiagaraSystem*>)     ParticlesOnPropSpawn                                        OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TWeakObjectPtr<class UNiagaraSystem*>)     ParticlesOnPropHit                                          OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UNiagaraSystem*>)     ParticlesOnPropMiss                                         OFFSET(get<T>, {0x1D0, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          AudioHunterBegin                                            OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          AudioHunterThrowableMiss                                    OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          AudioHunterThrowableHit                                     OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          AudioPropBegin                                              OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          AudioPropEnd                                                OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          AudioGameWon                                                OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          AudioGameLost                                               OFFSET(get<T>, {0x2E8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.PropHuntSettings.PlayEventAudio
	// void PlayEventAudio(class APawn*& InCharacter, TEnumAsByte<EPropHuntEvent> InEvent, bool InPlay2D);                      // [0x1982f40] Final|Native|Public|HasOutParms|BlueprintCallable|Const 
	// Function /Script/FSD.PropHuntSettings.GetHunterThrowableImpactFX
	// void GetHunterThrowableImpactFX(class UObject* WorldContext, class AActor* InHitActor, class USoundCue*& OutSound, class UNiagaraSystem*& OutParticles); // [0x1982430] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.PropHuntInitializerComponent
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UPropHuntInitializerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FSD.ProspectorObjective
/// Size: 0x0038 (0x000180 - 0x0001B8)
class UProspectorObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	CMember(TSoftObjectPtr<class UClass*>)             ProspectorClass                                             OFFSET(get<T>, {0x180, 40, 0, 0})
	CMember(class UDebrisPositioning*)                 DebrisPositioning                                           OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(TWeakObjectPtr<class AProspectorRobot*>)   ActiveProspector                                            OFFSET(get<T>, {0x1B0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ProspectorObjective.OnRep_ActiveProspector
	// void OnRep_ActiveProspector();                                                                                           // [0x1982ca0] Final|Native|Protected 
	// Function /Script/FSD.ProspectorObjective.OnProspectorDeath
	// void OnProspectorDeath(class UHealthComponentBase* Health);                                                              // [0x1982c10] Final|Native|Protected 
	// Function /Script/FSD.ProspectorObjective.IsProspectorDead
	// bool IsProspectorDead();                                                                                                 // [0x1982790] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ProspectorRobot
/// Size: 0x0048 (0x0003B0 - 0x0003F8)
class AProspectorRobot : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	DMember(float)                                     WorkingArmSpeed                                             OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     EnginePowerMultiplier                                       OFFSET(get<float>, {0x3B4, 4, 0, 0})
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x3C0, 8, 0, 0})
	DMember(float)                                     HeadResponsiveness                                          OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     HeadSearchSpeed                                             OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(float)                                     HeadSearchMaxAngle                                          OFFSET(get<float>, {0x3D0, 4, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           EngineMaterial                                              OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(EProspectorRobotState)                     ProspectorState                                             OFFSET(get<T>, {0x3F0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ProspectorRobot.SetTarget
	// void SetTarget(class AActor* Target);                                                                                    // [0x19832a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProspectorRobot.SetArmSpeed
	// void SetArmSpeed(float Speed);                                                                                           // [0x18a0190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ProspectorRobot.OnStateEnd
	// void OnStateEnd(EProspectorRobotState oldState);                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ProspectorRobot.OnStateBegin
	// void OnStateBegin(EProspectorRobotState NewState);                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ProspectorRobot.OnRep_ProspectorState
	// void OnRep_ProspectorState(EProspectorRobotState oldState);                                                              // [0x1982cc0] Final|Native|Protected 
	// Function /Script/FSD.ProspectorRobot.IsStateActive
	// bool IsStateActive(EProspectorRobotState State);                                                                         // [0x19827c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ProspectorRobot.ChangeState
	// void ChangeState(EProspectorRobotState NewState);                                                                        // [0x1982130] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.ProspectorAnimInstance
/// Size: 0x0040 (0x000350 - 0x000390)
class UProspectorAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	SMember(FVector2D)                                 TiltResult                                                  OFFSET(getStruct<T>, {0x364, 8, 0, 0})
	SMember(FVector2D)                                 LookingResult                                               OFFSET(getStruct<T>, {0x36C, 8, 0, 0})
	CMember(EProspectorRobotState)                     ProspectorState                                             OFFSET(get<T>, {0x37C, 1, 0, 0})
	DMember(float)                                     ArmBusyness                                                 OFFSET(get<float>, {0x380, 4, 0, 0})
};

/// Class /Script/FSD.PushingState
/// Size: 0x0008 (0x000100 - 0x000108)
class UPushingState : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(class UUseAnimationSetting*)               PushingAnimation                                            OFFSET(get<T>, {0x100, 8, 0, 0})
};

/// Class /Script/FSD.RadarPointComponent
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class URadarPointComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FMulticastInlineDelegate)                  OnRemove                                                    OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(float)                                     PointPriority                                               OFFSET(get<float>, {0xC0, 4, 0, 0})
	CMember(class UClass*)                             WidgetClass                                                 OFFSET(get<T>, {0xC8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RadarPointComponent.MapToRadarPosition
	// void MapToRadarPosition(FVector playerPos, FVector playerForward, FVector Pos, bool snap, FVector& radarPos, float& alpha); // [0x1982850] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.NetworkedRadarPointComponent
/// Size: 0x0000 (0x0000D0 - 0x0000D0)
class UNetworkedRadarPointComponent : public URadarPointComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
};

/// Struct /Script/FSD.RagdollItem
/// Size: 0x0028 (0x000000 - 0x000028)
class FRagdollItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class AActor*)                             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TArray<class UMaterialInstanceDynamic*>)   Materials                                                   OFFSET(get<T>, {0x8, 16, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           DropshadowMaterial                                          OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Class /Script/FSD.RagdollManager
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class URagdollManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FRagdollItem>)                      Items                                                       OFFSET(get<T>, {0xB0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RagdollManager.StartRagdoll
	// void StartRagdoll(class AActor* Actor, TArray<UMaterialInstanceDynamic*>& Materials, float desiredDuration);             // [0x1983330] Final|Native|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.RagdollEliminationComponent
/// Size: 0x0028 (0x0001F8 - 0x000220)
class URagdollEliminationComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x1F8, 4, 0, 0})
	CMember(TArray<class AEnemyDeepPathfinderCharacter*>) EnemiesTracked                                           OFFSET(get<T>, {0x200, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RagdollEliminationComponent.OnEnemyKilled
	// void OnEnemyKilled(FGameplayTagContainer& GameplayTags, class AActor* killedEnemy);                                      // [0x1982a70] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FSD.RandomSelectorItem
/// Size: 0x0008 (0x000228 - 0x000230)
class ARandomSelectorItem : public AGenerationItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	DMember(int32_t)                                   Min                                                         OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(int32_t)                                   Max                                                         OFFSET(get<int32_t>, {0x22C, 4, 0, 0})
};

/// Class /Script/FSD.RandRangeFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class URandRangeFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.RandRangeFunctionLibrary.TryPickRandomText
	// bool TryPickRandomText(TArray<FText>& TextArray, FRandomStream& RandomStream, FText& OutResult);                         // [0x1983460] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.RandRangeFunctionLibrary.PickRandomText
	// FText PickRandomText(TArray<FText>& TextArray, FRandomStream& RandomStream);                                             // [0x1982de0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.RandRangeFunctionLibrary.GetValueFromStream
	// int32_t GetValueFromStream(FIRandRange RandRange, FRandomStream& RandomStream);                                          // [0x1982660] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.RandRangeFunctionLibrary.GetFloatValue
	// float GetFloatValue(FRandRange RandRange);                                                                               // [0x1982370] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.RandRangeFunctionLibrary.GetFloatFromStream
	// float GetFloatFromStream(FRandRange RandRange, FRandomStream& RandomStream);                                             // [0x19821b0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.RandIntervalFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class URandIntervalFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.RandIntervalFunctionLibrary.GetFloatValue
	// float GetFloatValue(FRandInterval& RandInterval);                                                                        // [0x19822c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.RDGComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class URDGComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	SMember(FMulticastInlineDelegate)                  OnDetonated                                                 OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/FSD.RDGLauncher
/// Size: 0x0010 (0x000780 - 0x000790)
class ARDGLauncher : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1936;

public:
	CMember(TArray<class URDGComponent*>)              ActiveGrenades                                              OFFSET(get<T>, {0x780, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RDGLauncher.Server_DetonateAll
	// void Server_DetonateAll();                                                                                               // [0x17f4bf0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.RDGLauncher.RegisterGrenade
	// void RegisterGrenade(class URDGComponent* Grenade);                                                                      // [0x1983060] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ReactiveTerrain
/// Size: 0x0000 (0x000028 - 0x000028)
class UReactiveTerrain : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.ReactiveTerrain.Receive_OnActorLeft
	// void Receive_OnActorLeft(class UStatusEffectsComponent* StatusEffects);                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ReactiveTerrain.Receive_OnActorEntered
	// void Receive_OnActorEntered(class UStatusEffectsComponent* StatusEffects);                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.StatusEffectReactiveTerrain
/// Size: 0x0008 (0x000028 - 0x000030)
class UStatusEffectReactiveTerrain : public UReactiveTerrain
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FSD.ReactiveTerrainTrackerComponent
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UReactiveTerrainTrackerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FSD.PlayerReactiveTerrainTrackerComponent
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UPlayerReactiveTerrainTrackerComponent : public UReactiveTerrainTrackerComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UFSDPhysicalMaterial*)               CurrentPhysicalMaterial                                     OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/FSD.PathfinderReactiveTerrainTrackerComponent
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UPathfinderReactiveTerrainTrackerComponent : public UReactiveTerrainTrackerComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FRandRange)                                CheckInterval                                               OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	CMember(class UFSDPhysicalMaterial*)               CurrentPhysicalMaterial                                     OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UStatusEffectsComponent*)            StatusEffectsComponent                                      OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Class /Script/FSD.RecallableActor
/// Size: 0x0068 (0x000390 - 0x0003F8)
class ARecallableActor : public ADeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1016;

public:
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x398, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnReturnFinish                                              OFFSET(getStruct<T>, {0x3A8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRelocateFinished                                          OFFSET(getStruct<T>, {0x3B8, 16, 0, 0})
	DMember(float)                                     AcceptanceRadius                                            OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     AutoRecallDistance                                          OFFSET(get<float>, {0x3CC, 4, 0, 0})
	DMember(float)                                     RelocateLandingHeight                                       OFFSET(get<float>, {0x3D0, 4, 0, 0})
	CMember(class UClass*)                             RelocationMarkerType                                        OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             RecallTarget                                                OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(ERecallableActorState)                     State                                                       OFFSET(get<T>, {0x3E8, 1, 0, 0})
	DMember(bool)                                      RelocateLanding                                             OFFSET(get<bool>, {0x3E9, 1, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             RelocationMarker                                            OFFSET(get<T>, {0x3EC, 8, 0, 0})
	DMember(bool)                                      bInitialized                                                OFFSET(get<bool>, {0x3F4, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RecallableActor.SetRecallTarget
	// void SetRecallTarget(class AActor* NewTarget);                                                                           // [0x17e0d70] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.RecallableActor.Relocate
	// void Relocate(FVector NewLocation, FRotator NewRotation, class AActor* NewAttachToActor, class UPrimitiveComponent* NewAttachToComponent, FName NewAttachToBone); // [0x19830f0] Net|NetReliableNative|Event|Public|NetServer|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.RecallableActor.ReceiveOnStateChanged
	// void ReceiveOnStateChanged();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableActor.RecallableActorStateChanged__DelegateSignature
	// void RecallableActorStateChanged__DelegateSignature(class ARecallableActor* Sender, ERecallableActorState State);        // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RecallableActor.Recall
	// void Recall();                                                                                                           // [0x17f75b0] Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable 
	// Function /Script/FSD.RecallableActor.OnReturnSucceeded
	// void OnReturnSucceeded();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableActor.OnReturnFailed
	// void OnReturnFailed();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableActor.OnRep_State
	// void OnRep_State(ERecallableActorState oldState);                                                                        // [0x1982d60] Final|Native|Protected 
	// Function /Script/FSD.RecallableActor.OnRep_RecallTarget
	// void OnRep_RecallTarget();                                                                                               // [0x1982d40] Final|Native|Protected 
	// Function /Script/FSD.RecallableActor.OnRelocated
	// void OnRelocated();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableActor.OnRecallTargetChanged
	// void OnRecallTargetChanged(class AActor* NewTarget);                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableActor.OnPathFinished
	// void OnPathFinished(bool success);                                                                                       // [0x1982b80] Final|Native|Protected 
	// Function /Script/FSD.RecallableActor.OnMoving
	// void OnMoving();                                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableActor.OnMoveRequested
	// void OnMoveRequested();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableActor.OnMoveFinished
	// void OnMoveFinished(bool returnedHome);                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableActor.GetIsReturning
	// bool GetIsReturning();                                                                                                   // [0x1982630] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RecallableActor.GetIsMovingOrMoveRequested
	// bool GetIsMovingOrMoveRequested();                                                                                       // [0x1982600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RecallableActor.GetIsMoving
	// bool GetIsMoving();                                                                                                      // [0x19825d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RecallableActor.GetIsMoveRequested
	// bool GetIsMoveRequested();                                                                                               // [0x19825a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RecallableActor.BeginMove
	// void BeginMove();                                                                                                        // [0x1982110] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.RecallableItem
/// Size: 0x0020 (0x0003E0 - 0x000400)
class ARecallableItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1024;

public:
	CMember(class UClass*)                             ItemType                                                    OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<ARecallableActor*>>) ActiveItems                                                 OFFSET(get<T>, {0x3F0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RecallableItem.ServerSpawnItemAttached
	// void ServerSpawnItemAttached(class AActor* InAttachActor, class UPrimitiveComponent* InAttachComponent, FName InAttachBoneName, FVector LocalLocation, FRotator LocalRotation); // [0x19872b0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.RecallableItem.ServerSpawnItem
	// void ServerSpawnItem(FVector WorldLocation, FRotator WorldRotation);                                                     // [0x19871f0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.RecallableItem.ReceiveOnItemSpawned
	// void ReceiveOnItemSpawned(class ARecallableActor* Item);                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableItem.OnRep_ActiveItems
	// void OnRep_ActiveItems();                                                                                                // [0x18e1730] Native|Protected     
	// Function /Script/FSD.RecallableItem.ItemReturnFinished
	// void ItemReturnFinished(class AActor* Item, bool success);                                                               // [0x1986c90] Final|Native|Protected 
	// Function /Script/FSD.RecallableItem.CanSpawnItem
	// bool CanSpawnItem(FVector& Location, FRotator& Rotation);                                                                // [0x19868e0] Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Struct /Script/FSD.SentryGunMuzzleSetup
/// Size: 0x0010 (0x000000 - 0x000010)
class FSentryGunMuzzleSetup : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FName)                                     SocketName                                                  OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(class UAnimMontage*)                       FireMontage                                                 OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.SentryGun
/// Size: 0x0218 (0x000220 - 0x000438)
class ASentryGun : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1080;

public:
	SMember(FMulticastInlineDelegate)                  OnEnabledChanged                                            OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAmmoCountChanged                                          OFFSET(getStruct<T>, {0x240, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnMaxAmmoCountChanged                                       OFFSET(getStruct<T>, {0x250, 16, 0, 0})
	CMember(class USkeletalMeshComponent*)             SentryGunMesh                                               OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(TArray<FSentryGunMuzzleSetup>)             SentryGunMuzzels                                            OFFSET(get<T>, {0x268, 16, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USoundCue*)                          ShootingSound                                               OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UParticleSystem*)                    MuzzleFlash                                                 OFFSET(get<T>, {0x298, 8, 0, 0})
	SMember(FTracerData)                               TracerData                                                  OFFSET(getStruct<T>, {0x2A0, 48, 0, 0})
	DMember(bool)                                      UsePriorityTargetTracerData                                 OFFSET(get<bool>, {0x2D0, 1, 0, 0})
	SMember(FTracerData)                               PriorityTargetTracerData                                    OFFSET(getStruct<T>, {0x2D8, 48, 0, 0})
	CMember(class UParticleSystem*)                    Tracer                                                      OFFSET(get<T>, {0x308, 8, 0, 0})
	DMember(float)                                     MinTracerDistance                                           OFFSET(get<float>, {0x310, 4, 0, 0})
	DMember(float)                                     AngleRestriction                                            OFFSET(get<float>, {0x314, 4, 0, 0})
	DMember(bool)                                      Enabled                                                     OFFSET(get<bool>, {0x318, 1, 0, 0})
	CMember(TArray<FOverlapResult>)                    OverlapCache                                                OFFSET(get<T>, {0x320, 16, 0, 0})
	SMember(FRotator)                                  MinRotation                                                 OFFSET(getStruct<T>, {0x330, 12, 0, 0})
	SMember(FRotator)                                  MaxRotation                                                 OFFSET(getStruct<T>, {0x33C, 12, 0, 0})
	DMember(float)                                     AquisitionRange                                             OFFSET(get<float>, {0x348, 4, 0, 0})
	DMember(float)                                     RotationSpeed                                               OFFSET(get<float>, {0x34C, 4, 0, 0})
	DMember(float)                                     ShotCoolDown                                                OFFSET(get<float>, {0x350, 4, 0, 0})
	DMember(float)                                     TargetLeading                                               OFFSET(get<float>, {0x354, 4, 0, 0})
	DMember(int32_t)                                   BurstCount                                                  OFFSET(get<int32_t>, {0x358, 4, 0, 0})
	DMember(float)                                     BurstShotCoolDown                                           OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     IdleScanAngle                                               OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     IdleScanSpeed                                               OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     FinalShotFadeOut                                            OFFSET(get<float>, {0x368, 4, 0, 0})
	CMember(class USoundBase*)                         AudioOnTurn                                                 OFFSET(get<T>, {0x370, 8, 0, 0})
	SMember(FGameplayTagContainer)                     DissallowedTargetTags                                       OFFSET(getStruct<T>, {0x378, 32, 0, 0})
	DMember(int32_t)                                   AmmoCount                                                   OFFSET(get<int32_t>, {0x3B0, 4, 0, 0})
	DMember(int32_t)                                   MaxAmmoCount                                                OFFSET(get<int32_t>, {0x3B4, 4, 0, 0})
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x3B8, 4, 0, 0})
	DMember(float)                                     TargetYaw                                                   OFFSET(get<float>, {0x3BC, 4, 0, 0})
	DMember(float)                                     TargetPitch                                                 OFFSET(get<float>, {0x3C0, 4, 0, 0})
	CMember(TWeakObjectPtr<class UHealthComponentBase*>) LastTarget                                                OFFSET(get<T>, {0x3C4, 8, 0, 0})
	CMember(TWeakObjectPtr<class UHealthComponentBase*>) PrioritizedTarget                                         OFFSET(get<T>, {0x3CC, 8, 0, 0})
	CMember(class UWeaponFireComponent*)               WeaponFire                                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UAudioComponent*)                    ShootingAudioComponent                                      OFFSET(get<T>, {0x428, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SentryGun.UseAmmo
	// void UseAmmo(int32_t amount);                                                                                            // [0x19af7b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SentryGun.ReceiveAmmoChanged
	// void ReceiveAmmoChanged(int32_t Delta, int32_t currentAmount);                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SentryGun.OnRep_MaxAmmoCount
	// void OnRep_MaxAmmoCount(int32_t OldCount);                                                                               // [0x19aefd0] Final|Native|Protected 
	// Function /Script/FSD.SentryGun.OnRep_LastTarget
	// void OnRep_LastTarget();                                                                                                 // [0x19aefb0] Final|Native|Protected 
	// Function /Script/FSD.SentryGun.OnRep_AmmoCount
	// void OnRep_AmmoCount(int32_t OldCount);                                                                                  // [0x19aef20] Final|Native|Protected 
	// Function /Script/FSD.SentryGun.OnProjectileFired
	// void OnProjectileFired(FVector& Location);                                                                               // [0x19aee70] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.SentryGun.OnNewTargetRequested
	// void OnNewTargetRequested(FLaserPointerTarget& HitInfo);                                                                 // [0x19aedd0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.SentryGun.GetMuzzleTransform
	// FTransform GetMuzzleTransform();                                                                                         // [0x19ae940] Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SentryGun.GetMuzzleName
	// FName GetMuzzleName();                                                                                                   // [0x19ae900] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SentryGun.GetMaxAmmoCount
	// int32_t GetMaxAmmoCount();                                                                                               // [0x19ae6e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SentryGun.GetDeployProgress
	// float GetDeployProgress();                                                                                               // [0x19ae140] Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.SentryGun.GetAmmoLeftPct
	// float GetAmmoLeftPct();                                                                                                  // [0x19adfe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SentryGun.GetAmmoLeft
	// int32_t GetAmmoLeft();                                                                                                   // [0x19adfc0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SentryGun.Force_Fire
	// void Force_Fire(class AActor* Target);                                                                                   // [0x1828490] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.SentryGun.EnabledChanged__DelegateSignature
	// void EnabledChanged__DelegateSignature(bool IsEnabled);                                                                  // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.SentryGun.AmmoSpent
	// void AmmoSpent();                                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.RedeployableSentryGun
/// Size: 0x00B0 (0x000438 - 0x0004E8)
class ARedeployableSentryGun : public ASentryGun
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1256;

public:
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x438, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDeployFinished                                            OFFSET(getStruct<T>, {0x448, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDismantleFinished                                         OFFSET(getStruct<T>, {0x458, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDeployProgressEvent                                       OFFSET(getStruct<T>, {0x468, 16, 0, 0})
	CMember(class UActorTrackingComponent*)            ActorTrackingIcon                                           OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UOutlineComponent*)                  outline                                                     OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   SentryGunOwner                                              OFFSET(get<T>, {0x488, 8, 0, 0})
	DMember(bool)                                      bOutlineAndIconVisible                                      OFFSET(get<bool>, {0x490, 1, 0, 0})
	CMember(ERedeployableSentryGunState)               State                                                       OFFSET(get<T>, {0x491, 1, 0, 0})
	DMember(float)                                     PlasmaLineMaxRange                                          OFFSET(get<float>, {0x4A8, 4, 0, 0})
	CMember(TArray<class ASentryElectroBeam*>)         PlasmaLines                                                 OFFSET(get<T>, {0x4B0, 16, 0, 0})
	CMember(class UClass*)                             PlasmaBeamClass                                             OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UClass*)                             ElectrocutionActorClass                                     OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class AActor*)                             ElectrocutionActor                                          OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class UClass*)                             EMPDischargeActorClass                                      OFFSET(get<T>, {0x4D8, 8, 0, 0})
	DMember(float)                                     EMPDiscargeCooldown                                         OFFSET(get<float>, {0x4E0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RedeployableSentryGun.ToggleOutlineAndIcon
	// void ToggleOutlineAndIcon(bool Visible);                                                                                 // [0x1987ab0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RedeployableSentryGun.SetSentryGunOwner
	// void SetSentryGunOwner(class APlayerCharacter* Character);                                                               // [0x19877a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RedeployableSentryGun.SetArcIndicatorActive
	// void SetArcIndicatorActive(bool Active);                                                                                 // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.RedeployableSentryGun.ReceiveOnStateChanged
	// void ReceiveOnStateChanged();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RedeployableSentryGun.ReceiveOnSentryGunOwnerChanged
	// void ReceiveOnSentryGunOwnerChanged();                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RedeployableSentryGun.ReceiveOnDismantled
	// void ReceiveOnDismantled();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RedeployableSentryGun.ReceiveOnDismantle
	// void ReceiveOnDismantle();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RedeployableSentryGun.ReceiveOnDeployed
	// void ReceiveOnDeployed();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RedeployableSentryGun.ReceiveOnDeploy
	// void ReceiveOnDeploy();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RedeployableSentryGun.OnStateChanged__DelegateSignature
	// void OnStateChanged__DelegateSignature(class ARedeployableSentryGun* Sender, ERedeployableSentryGunState NewState);      // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RedeployableSentryGun.OnRep_State
	// void OnRep_State(ERedeployableSentryGunState oldState);                                                                  // [0x1987030] Final|Native|Protected 
	// Function /Script/FSD.RedeployableSentryGun.OnRep_SentryGunOwner
	// void OnRep_SentryGunOwner();                                                                                             // [0x1987010] Final|Native|Protected 
	// Function /Script/FSD.RedeployableSentryGun.OnElectrocutionActorDestroyed
	// void OnElectrocutionActorDestroyed(class AActor* Actor);                                                                 // [0x1986d60] Final|Native|Protected 
	// Function /Script/FSD.RedeployableSentryGun.OnDismantleFinished__DelegateSignature
	// void OnDismantleFinished__DelegateSignature();                                                                           // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RedeployableSentryGun.OnDeployProgress__DelegateSignature
	// void OnDeployProgress__DelegateSignature(float Progress);                                                                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RedeployableSentryGun.OnDeployFinished__DelegateSignature
	// void OnDeployFinished__DelegateSignature();                                                                              // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RedeployableSentryGun.GetIsDismantled
	// bool GetIsDismantled();                                                                                                  // [0x1986bb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RedeployableSentryGun.GetIsDeployed
	// bool GetIsDeployed();                                                                                                    // [0x1986b80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RedeployableSentryGun.GetAnimDuration
	// float GetAnimDuration(class USkeletalMeshComponent* Mesh);                                                               // [0x1986ae0] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.RedeployableSentryGun.DismantleFinished
	// void DismantleFinished();                                                                                                // [0x1986ac0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.RedeployableSentryGun.Dismantle
	// void Dismantle();                                                                                                        // [0x1986aa0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RedeployableSentryGun.DeployFinished
	// void DeployFinished();                                                                                                   // [0x1986a80] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.RedeployableSentryGun.Deploy
	// void Deploy();                                                                                                           // [0x1986a60] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RedeployableSentryGun.ActivateSpecialAttack
	// void ActivateSpecialAttack();                                                                                            // [0x1d6f900] BlueprintAuthorityOnly|Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.TutorialComponent
/// Size: 0x0050 (0x0000B0 - 0x000100)
class UTutorialComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
	DMember(bool)                                      bTutorialEnabled                                            OFFSET(get<bool>, {0xB0, 1, 0, 0})
	DMember(int32_t)                                   Priority                                                    OFFSET(get<int32_t>, {0xB4, 4, 0, 0})
	DMember(float)                                     MaxDuration                                                 OFFSET(get<float>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   MaxViewCount                                                OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
	DMember(bool)                                      ShowInTutorialLevel                                         OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bAutoRegisterWithManager                                    OFFSET(get<bool>, {0xC1, 1, 0, 0})
	DMember(bool)                                      bDebugAlwaysShow                                            OFFSET(get<bool>, {0xC2, 1, 0, 0})
	DMember(bool)                                      ManuallyMarkViews                                           OFFSET(get<bool>, {0xC3, 1, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   PlayerCharacter                                             OFFSET(get<T>, {0xC4, 8, 0, 0})
	CMember(TWeakObjectPtr<class AFSDPlayerState*>)    PlayerState                                                 OFFSET(get<T>, {0xCC, 8, 0, 0})
	CMember(TWeakObjectPtr<class AFSDPlayerController*>) PlayerController                                          OFFSET(get<T>, {0xD4, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFSDSaveGame*>)       SaveGame                                                    OFFSET(get<T>, {0xDC, 8, 0, 0})
	CMember(TWeakObjectPtr<class ATutorialManager*>)   TutorialManager                                             OFFSET(get<T>, {0xE4, 8, 0, 0})
	DMember(bool)                                      bTutorialInitialized                                        OFFSET(get<bool>, {0xEC, 1, 0, 0})
	DMember(bool)                                      bTutorialReady                                              OFFSET(get<bool>, {0xED, 1, 0, 0})
	DMember(bool)                                      bTutorialVisible                                            OFFSET(get<bool>, {0xEE, 1, 0, 0})
	DMember(bool)                                      bTutorialActive                                             OFFSET(get<bool>, {0xEF, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TutorialComponent.RegisterTutorial
	// void RegisterTutorial();                                                                                                 // [0x19e1790] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TutorialComponent.ReceiveOnShown
	// void ReceiveOnShown();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TutorialComponent.ReceiveOnInitialized
	// void ReceiveOnInitialized();                                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TutorialComponent.ReceiveOnHidden
	// void ReceiveOnHidden();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TutorialComponent.OnTutorialsReset
	// void OnTutorialsReset();                                                                                                 // [0x19e1770] Final|Native|Protected 
	// Function /Script/FSD.TutorialComponent.OnManagerReady
	// void OnManagerReady(class ATutorialManager* Manager);                                                                    // [0x19e1560] Final|Native|Protected 
	// Function /Script/FSD.TutorialComponent.MarkTutorialWatched
	// void MarkTutorialWatched();                                                                                              // [0x19e1540] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.TutorialComponent.MarkTutorialReadyNow
	// void MarkTutorialReadyNow();                                                                                             // [0x19e1520] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.TutorialComponent.MarkTutorialReadyInSeconds
	// void MarkTutorialReadyInSeconds(float Delay);                                                                            // [0x19e14a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.TutorialComponent.HasTutorialBeenShown
	// bool HasTutorialBeenShown();                                                                                             // [0x19e1150] Final|Native|Protected|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.TutorialComponent.GetTutorialName
	// FString GetTutorialName();                                                                                               // [0x19e10a0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FSD.TutorialComponent.CancelTutorial
	// void CancelTutorial(bool CountAsViewed);                                                                                 // [0x19e0780] Final|Native|Protected|BlueprintCallable 
};

/// Struct /Script/FSD.TutorialHint
/// Size: 0x0070 (0x000000 - 0x000070)
class FTutorialHint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     TaskText                                                    OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Image                                                       OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.TutorialHintComponent
/// Size: 0x0070 (0x000100 - 0x000170)
class UTutorialHintComponent : public UTutorialComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
	SMember(FTutorialHint)                             Hint                                                        OFFSET(getStruct<T>, {0x100, 112, 0, 0})


	/// Functions
	// Function /Script/FSD.TutorialHintComponent.SetRemainingVisibleTime
	// void SetRemainingVisibleTime(float remainingTime);                                                                       // [0x19e1bb0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.TutorialHintComponent.IsSingleplayer
	// bool IsSingleplayer(class UObject* WorldContext);                                                                        // [0x19e1400] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TutorialHintComponent.ChangeHint
	// void ChangeHint(FTutorialHint& NewHint);                                                                                 // [0x19e0810] Final|Native|Protected|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.RefineryHintComponent
/// Size: 0x0008 (0x000170 - 0x000178)
class URefineryHintComponent : public UTutorialHintComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	CMember(TWeakObjectPtr<class AFSDRefinery*>)       Refinery                                                    OFFSET(get<T>, {0x170, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RefineryHintComponent.ReceiveRefinerySpawned
	// void ReceiveRefinerySpawned(class AFSDRefinery* InRefinery);                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RefineryHintComponent.ReceivePipelineSegmentPlaced
	// void ReceivePipelineSegmentPlaced(class APipelineSegment* InSegment);                                                    // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RefineryHintComponent.ReceiveExtractorPodSpawned
	// void ReceiveExtractorPodSpawned(class APipelineExtractorPod* InExtractorPod);                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RefineryHintComponent.OnRefinerySpawned
	// void OnRefinerySpawned(class AFSDRefinery* InRefinery);                                                                  // [0x1986e80] Final|Native|Protected 
};

/// Class /Script/FSD.RefineryObjective
/// Size: 0x0090 (0x000180 - 0x000210)
class URefineryObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
	SMember(FMulticastInlineDelegate)                  OnRefinerySpawned                                           OFFSET(getStruct<T>, {0x180, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             refineryClass                                               OFFSET(get<T>, {0x190, 40, 0, 0})
	CMember(TWeakObjectPtr<class AFSDRefinery*>)       Refinery                                                    OFFSET(get<T>, {0x1B8, 8, 0, 0})
	CMember(ERefineryState)                            RefineryState                                               OFFSET(get<T>, {0x1C0, 1, 0, 0})
	CMember(class UDebrisPositioning*)                 RefineryPlacement                                           OFFSET(get<T>, {0x1C8, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             RawMaterialClass                                            OFFSET(get<T>, {0x1D0, 40, 0, 0})
	CMember(class UDebrisPositioning*)                 RawMaterialPlacement                                        OFFSET(get<T>, {0x1F8, 8, 0, 0})
	DMember(int32_t)                                   RawMaterialCount                                            OFFSET(get<int32_t>, {0x200, 4, 0, 0})
	DMember(bool)                                      bMissionCompleted                                           OFFSET(get<bool>, {0x204, 1, 0, 0})
	DMember(bool)                                      bIsFinalBattle                                              OFFSET(get<bool>, {0x205, 1, 0, 0})
	DMember(int32_t)                                   OptionalTunnelRoomID                                        OFFSET(get<int32_t>, {0x208, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RefineryObjective.SpawnWells
	// void SpawnWells(class AProceduralSetup* Setup, FVector& rigLocation, float minDistanceBetween, TArray<FVector2D>& minMaxDistancesToRig); // [0x19878e0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.RefineryObjective.RefineryDelegate__DelegateSignature
	// void RefineryDelegate__DelegateSignature(class AFSDRefinery* InRefinery);                                                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RefineryObjective.ReceiveRefinerySpawned
	// void ReceiveRefinerySpawned(class AFSDRefinery* InRefinery);                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RefineryObjective.OnRep_Refinery
	// void OnRep_Refinery();                                                                                                   // [0x1986ff0] Final|Native|Protected 
	// Function /Script/FSD.RefineryObjective.OnRefineryStateChanged
	// void OnRefineryStateChanged(ERefineryState InRefineryState);                                                             // [0x1986f10] Final|Native|Protected 
	// Function /Script/FSD.RefineryObjective.GetRefinerySpawnLocation
	// FVector GetRefinerySpawnLocation(class UClass* refineryClass);                                                           // [0x1986be0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.RefineryObjective.AddMissionCriticalItems
	// void AddMissionCriticalItems(class AProceduralSetup* Setup);                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.RefinerySecondaryObjective
/// Size: 0x00C0 (0x000180 - 0x000240)
class URefinerySecondaryObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(TSoftObjectPtr<class UClass*>)             RawMaterialClass                                            OFFSET(get<T>, {0x180, 40, 0, 0})
	CMember(class UDebrisPositioning*)                 RawMaterialPlacement                                        OFFSET(get<T>, {0x1A8, 8, 0, 0})
	DMember(float)                                     RawmaterialMinDistanceToDropPod                             OFFSET(get<float>, {0x1B0, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DropPodMaterialExtractor                                    OFFSET(get<T>, {0x1B8, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DropPodMaterialExtractor_Marker                             OFFSET(get<T>, {0x1E0, 40, 0, 0})
	CMember(class UDebrisPositioning*)                 ExtractorPositioning                                        OFFSET(get<T>, {0x208, 8, 0, 0})
	DMember(float)                                     ExtractorLandingDistance                                    OFFSET(get<float>, {0x210, 4, 0, 0})
	DMember(float)                                     ExtractMinZDistanceToRawMaterial                            OFFSET(get<float>, {0x214, 4, 0, 0})
	CMember(ERefinerySecondaryState)                   State                                                       OFFSET(get<T>, {0x218, 1, 0, 0})
	DMember(int32_t)                                   ExtractionProgress                                          OFFSET(get<int32_t>, {0x21C, 4, 0, 0})
	DMember(float)                                     ExtractionDuration                                          OFFSET(get<float>, {0x220, 4, 0, 0})
	CMember(class ARefineryExtractorPod*)              ExtractorPodInstance                                        OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class AActor*)                             RefineryWellInstance                                        OFFSET(get<T>, {0x238, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RefinerySecondaryObjective.StartExtraction
	// void StartExtraction();                                                                                                  // [0x1987a90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RefinerySecondaryObjective.SetWellHasSpawned
	// void SetWellHasSpawned(class AActor* extractor);                                                                         // [0x1987850] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RefinerySecondaryObjective.SetWellAndExtractorConnected
	// void SetWellAndExtractorConnected();                                                                                     // [0x1987830] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RefinerySecondaryObjective.SetPipelineBuild
	// void SetPipelineBuild();                                                                                                 // [0x1987780] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RefinerySecondaryObjective.OnStateChanged
	// void OnStateChanged(ERefinerySecondaryState NewState);                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RefinerySecondaryObjective.OnRep_State
	// void OnRep_State();                                                                                                      // [0x19870b0] Final|Native|Protected 
	// Function /Script/FSD.RefinerySecondaryObjective.OnRep_ExtractorPodInstance
	// void OnRep_ExtractorPodInstance();                                                                                       // [0x1986fb0] Final|Native|Protected 
	// Function /Script/FSD.RefinerySecondaryObjective.OnRep_ExtractionProgress
	// void OnRep_ExtractionProgress();                                                                                         // [0x1986f90] Final|Native|Protected 
};

/// Class /Script/FSD.RefineryExtractorPodAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class URefineryExtractorPodAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      IsOpen                                                      OFFSET(get<bool>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      IsPumping                                                   OFFSET(get<bool>, {0x2B9, 1, 0, 0})
	DMember(bool)                                      IsReturning                                                 OFFSET(get<bool>, {0x2BA, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RefineryExtractorPodAnimInstance.OnReturningChanged
	// void OnReturningChanged();                                                                                               // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.RefineryExtractorPod
/// Size: 0x0030 (0x0002E0 - 0x000310)
class ARefineryExtractorPod : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 784;

public:
	CMember(class UWidgetComponent*)                   ProgressWidget                                              OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             SkeletalMesh_Base                                           OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FName)                                     ScreenSocketName                                            OFFSET(getStruct<T>, {0x2F0, 8, 0, 0})
	CMember(ERefineryExtractorPodState)                ExtractorState                                              OFFSET(get<T>, {0x2F8, 1, 0, 0})
	CMember(TArray<class URefineryExtractorPodAnimInstance*>) AnimBlueprints                                       OFFSET(get<T>, {0x300, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RefineryExtractorPod.TakeOff
	// void TakeOff();                                                                                                          // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RefineryExtractorPod.StartExtraction
	// void StartExtraction();                                                                                                  // [0x1987a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RefineryExtractorPod.SetIsReturning
	// void SetIsReturning(bool InIsReturning);                                                                                 // [0x19876f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RefineryExtractorPod.SetIsPumping
	// void SetIsPumping(bool InIsPumping);                                                                                     // [0x1987660] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RefineryExtractorPod.SetIsOpen
	// void SetIsOpen(bool InIsOpen);                                                                                           // [0x19875d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RefineryExtractorPod.OnRep_ExtractorState
	// void OnRep_ExtractorState();                                                                                             // [0x1986fd0] Final|Native|Protected 
	// Function /Script/FSD.RefineryExtractorPod.OnPipeLineCompleted
	// void OnPipeLineCompleted();                                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RefineryExtractorPod.OnExtractorStateChanged
	// void OnExtractorStateChanged(ERefineryExtractorPodState NewState);                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RefineryExtractorPod.ChangeExtractorState
	// void ChangeExtractorState(ERefineryExtractorPodState NewState);                                                          // [0x19869e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.RefineryExtractorPodWidget
/// Size: 0x0000 (0x000260 - 0x000260)
class URefineryExtractorPodWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:


	/// Functions
	// Function /Script/FSD.RefineryExtractorPodWidget.SetProgress
	// void SetProgress(float InProgress);                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RefineryExtractorPodWidget.OnObjectiveUpdated
	// void OnObjectiveUpdated(class UObjective* Objective);                                                                    // [0x1986df0] Final|Native|Protected 
};

/// Class /Script/FSD.ReflectionHitscanComponent
/// Size: 0x0058 (0x000258 - 0x0002B0)
class UReflectionHitscanComponent : public UHitscanBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UTerrainType*)                       PlatformTerrainType                                         OFFSET(get<T>, {0x260, 8, 0, 0})
	DMember(bool)                                      bPlayImpactSound                                            OFFSET(get<bool>, {0x268, 1, 0, 0})
	DMember(bool)                                      bShowImpactOnReflections                                    OFFSET(get<bool>, {0x269, 1, 0, 0})
	DMember(bool)                                      bDamageOnReflections                                        OFFSET(get<bool>, {0x26A, 1, 0, 0})
	DMember(float)                                     StraightenReflectionFactor                                  OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(int32_t)                                   ReflectionCount                                             OFFSET(get<int32_t>, {0x270, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.ReflectionHitscanComponent.Server_RegisterHit_Reflection
	// void Server_RegisterHit_Reflection(FReflectiveHitscanHit Hit);                                                           // [0x1987510] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ReflectionHitscanComponent.Server_RegisterHit
	// void Server_RegisterHit(FReflectiveHitscanHit Hit);                                                                      // [0x1987450] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ReflectionHitscanComponent.All_ShowHit
	// void All_ShowHit(FReflectiveHitscanHit Hit);                                                                             // [0x1986820] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.RegisterInviteNotificationBlueprintCallProxy
/// Size: 0x0068 (0x000030 - 0x000098)
class URegisterInviteNotificationBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FMulticastInlineDelegate)                  OnInviteReceived                                            OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInviteAccepted                                            OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnInviteRejected                                            OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x60, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RegisterInviteNotificationBlueprintCallProxy.RegisterInvitiNotification
	// class URegisterInviteNotificationBlueprintCallProxy* RegisterInvitiNotification(class UObject* WorldContextObject);      // [0x19870d0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.RegisterSessionInviteNotificationBlueprintCallProxy
/// Size: 0x0028 (0x000030 - 0x000058)
class URegisterSessionInviteNotificationBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FMulticastInlineDelegate)                  OnSessionUserInviteAccepted                                 OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x40, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RegisterSessionInviteNotificationBlueprintCallProxy.RegisterSessionInviteNotification
	// class URegisterSessionInviteNotificationBlueprintCallProxy* RegisterSessionInviteNotification(class UObject* WorldContextObject); // [0x1987160] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.RejectInviteBlueprintCallProxy
/// Size: 0x0060 (0x000030 - 0x000090)
class URejectInviteBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RejectInviteBlueprintCallProxy.RejectInvite
	// class URejectInviteBlueprintCallProxy* RejectInvite(class UObject* WorldContextObject, FString ListName, FString UserId); // [0x198b470] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.RepairableComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class URepairableComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FMulticastInlineDelegate)                  OnFullyRepairedEvent                                        OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAllResourcesAquiredEvent                                  OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRepairedEvent                                             OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(class UGemResourceData*)                   RequiresCarriedResource                                     OFFSET(get<T>, {0xE0, 8, 0, 0})
	DMember(int32_t)                                   ResourcesRequired                                           OFFSET(get<int32_t>, {0xE8, 4, 0, 0})
	DMember(bool)                                      IsFullyRepaired                                             OFFSET(get<bool>, {0xEC, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RepairableComponent.TryRepair
	// bool TryRepair(class APlayerCharacter* User);                                                                            // [0x198b920] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RepairableComponent.OnRep_ResourcesRequired
	// void OnRep_ResourcesRequired();                                                                                          // [0x198b2c0] Final|Native|Protected 
	// Function /Script/FSD.RepairableComponent.GetResourcesRequired
	// int32_t GetResourcesRequired();                                                                                          // [0x180d770] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RepairableComponent.Cheat_Repair
	// void Cheat_Repair();                                                                                                     // [0x198a910] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.RepairObjective
/// Size: 0x0070 (0x000180 - 0x0001F0)
class URepairObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	DMember(int32_t)                                   RepairedObjectives                                          OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	DMember(int32_t)                                   ObjectivesToRepair                                          OFFSET(get<int32_t>, {0x184, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             RepairObjectiveClass                                        OFFSET(get<T>, {0x188, 40, 0, 0})
	CMember(class UGemResourceData*)                   RepairObjectiveResource                                     OFFSET(get<T>, {0x1B0, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x1B8, 8, 0, 0})
	DMember(int32_t)                                   RepairResourcesPerActor                                     OFFSET(get<int32_t>, {0x1C0, 4, 0, 0})
	DMember(float)                                     RepairResourceDistanceFromActor                             OFFSET(get<float>, {0x1C4, 4, 0, 0})
	DMember(float)                                     MinRepairObjectiveDistanceToLandingZone                     OFFSET(get<float>, {0x1C8, 4, 0, 0})
	CMember(TArray<class AActor*>)                     RepairedObjectivesList                                      OFFSET(get<T>, {0x1D0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RepairObjective.OnRep_RepairedObjectives
	// void OnRep_RepairedObjectives();                                                                                         // [0x1830d80] Final|Native|Protected 
	// Function /Script/FSD.RepairObjective.OnRep_ObjectivesToRepair
	// void OnRep_ObjectivesToRepair();                                                                                         // [0x1830d80] Final|Native|Protected 
	// Function /Script/FSD.RepairObjective.OnObjectiveRepaired
	// void OnObjectiveRepaired(class URepairableComponent* repairable);                                                        // [0x198b1f0] Final|Native|Protected 
	// Function /Script/FSD.RepairObjective.AllObjectivesRepaired
	// void AllObjectivesRepaired();                                                                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.ResonanceScannerPod
/// Size: 0x0000 (0x0002E0 - 0x0002E0)
class AResonanceScannerPod : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:


	/// Functions
	// Function /Script/FSD.ResonanceScannerPod.OnConnectedToTarget
	// void OnConnectedToTarget();                                                                                              // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.ResourceFilter
/// Size: 0x0018 (0x000030 - 0x000048)
class UResourceFilter : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<class UResourceData*>)              Resources                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TEnumAsByte<EResourceFilterType>)          FilterType                                                  OFFSET(get<T>, {0x40, 1, 0, 0})
};

/// Class /Script/FSD.ResourceBank
/// Size: 0x0080 (0x0000F8 - 0x000178)
class UResourceBank : public UUsableComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FMulticastInlineDelegate)                  OnBeginDeposite                                             OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDepositing                                                OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnEndDeposite                                               OFFSET(getStruct<T>, {0x118, 16, 0, 0})
	DMember(bool)                                      OpenForDeposit                                              OFFSET(get<bool>, {0x128, 1, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnResourceDeposited                                         OFFSET(getStruct<T>, {0x130, 16, 0, 0})
	CMember(class UResourceFilter*)                    Filter                                                      OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class AFSDGameState*)                      GameState                                                   OFFSET(get<T>, {0x148, 8, 0, 0})
	DMember(float)                                     DepositesPerSecond                                          OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     DepositeAmount                                              OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(bool)                                      CanGetStrict                                                OFFSET(get<bool>, {0x15C, 1, 0, 0})
	DMember(bool)                                      AddToTeamInventory                                          OFFSET(get<bool>, {0x15D, 1, 0, 0})
	DMember(bool)                                      PlayDepositShout                                            OFFSET(get<bool>, {0x15E, 1, 0, 0})
	CMember(class USoundBase*)                         AudioBeginDepositing                                        OFFSET(get<T>, {0x160, 8, 0, 0})
	CMember(class USoundBase*)                         AudioDepositing                                             OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(class USoundBase*)                         AudioEndDepositing                                          OFFSET(get<T>, {0x170, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ResourceBank.ResourceBankEvent__DelegateSignature
	// void ResourceBankEvent__DelegateSignature(class APlayerCharacter* User);                                                 // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.ResourceBank.All_Depositing
	// void All_Depositing(class APlayerCharacter* Character);                                                                  // [0x198a880] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.RestrictedResourceBank
/// Size: 0x0008 (0x000178 - 0x000180)
class URestrictedResourceBank : public UResourceBank
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(class UResourceData*)                      RequiredResource                                            OFFSET(get<T>, {0x178, 8, 0, 0})
};

/// Class /Script/FSD.ResourceChunk
/// Size: 0x0058 (0x000238 - 0x000290)
class AResourceChunk : public AFSDPhysicsActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	DMember(float)                                     CollectDuration                                             OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(bool)                                      CanBeCollectedNormally                                      OFFSET(get<bool>, {0x23C, 1, 0, 0})
	DMember(bool)                                      CanBeCollected                                              OFFSET(get<bool>, {0x23D, 1, 0, 0})
	CMember(class USimpleObjectInfoComponent*)         InfoComponent                                               OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     ResourceAmount                                              OFFSET(get<float>, {0x248, 4, 0, 0})
	CMember(class USoundCue*)                          PickupSound                                                 OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UResourceData*)                      ResourceData                                                OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(TArray<class APlayerCharacter*>)           OverlappingPlayers                                          OFFSET(get<T>, {0x260, 16, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   CollectedBy                                                 OFFSET(get<T>, {0x270, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ResourceChunk.SetCollectOpen
	// void SetCollectOpen();                                                                                                   // [0x198b850] Final|Native|Protected 
	// Function /Script/FSD.ResourceChunk.OnRep_CollectedBy
	// void OnRep_CollectedBy();                                                                                                // [0x198b280] Final|Native|Protected 
	// Function /Script/FSD.ResourceChunk.GetResourceData
	// class UResourceData* GetResourceData();                                                                                  // [0x198aec0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ResourceChunk.GetResourceAmount
	// float GetResourceAmount();                                                                                               // [0x198ae00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ResourceChunk.CalcMovement
	// void CalcMovement(float InProgress, FVector& InVector, FVector& OutVelocity, FVector& OutAngularVelocity);               // [0x1d6f900] Event|Protected|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Class /Script/FSD.ResourceObjective
/// Size: 0x0048 (0x000180 - 0x0001C8)
class UResourceObjective : public UResourceBasedObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 456;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x180, 8, 0, 0})
	DMember(float)                                     ResourcesRequired                                           OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     ResourcesCollected                                          OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(float)                                     ResourceBuffer                                              OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     RoundToNearest                                              OFFSET(get<float>, {0x194, 4, 0, 0})
	SMember(FText)                                     ObjectivesText                                              OFFSET(getStruct<T>, {0x198, 24, 0, 0})
	SMember(FText)                                     CreditsRewardText                                           OFFSET(getStruct<T>, {0x1B0, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.ResourceObjective.OnResourceChanged
	// void OnResourceChanged(class UCappedResource* CappedResource, float amount);                                             // [0x198b3a0] Final|Native|Protected 
	// Function /Script/FSD.ResourceObjective.OnRep_ResourcesCollected
	// void OnRep_ResourcesCollected(float prevAmount);                                                                         // [0x1865df0] Final|Native|Protected 
	// Function /Script/FSD.ResourceObjective.GetRequiredAmount
	// float GetRequiredAmount(float missionScaling);                                                                           // [0x198ac90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ResourcePouch
/// Size: 0x0028 (0x000268 - 0x000290)
class AResourcePouch : public ACarriableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UCarriableInstantUsable*)            Usable                                                      OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class USoundCue*)                          ImpactGroundSound                                           OFFSET(get<T>, {0x270, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ResourcePouch.SetResources
	// void SetResources(class UResourcesComponent* Resources);                                                                 // [0x198b890] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ResourcePouch.ActorWasHit
	// void ActorWasHit(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);             // [0x198a6e0] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.RessuplyPodSpawn
/// Size: 0x0000 (0x0002E0 - 0x0002E0)
class ARessuplyPodSpawn : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:


	/// Functions
	// Function /Script/FSD.RessuplyPodSpawn.SetController
	// void SetController(class AFSDPlayerController* Controller);                                                              // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.RessuplyPodSpawn.SetCharacter
	// void SetCharacter(class APlayerCharacter* Character);                                                                    // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.UnlockReward
/// Size: 0x0000 (0x000030 - 0x000030)
class UUnlockReward : public UReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.UnlockPlanetZoneReward
/// Size: 0x0008 (0x000030 - 0x000038)
class UUnlockPlanetZoneReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UPlanetZone*)                        ZoneToUnlock                                                OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.UnlockMissionTypeReward
/// Size: 0x0008 (0x000030 - 0x000038)
class UUnlockMissionTypeReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UMissionTemplate*)                   MissionToUnlock                                             OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.UnlockComplexityReward
/// Size: 0x0010 (0x000030 - 0x000040)
class UUnlockComplexityReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UMissionTemplate*)                   mission                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMissionComplexity*)                 Complexity                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.UnlockDurationReward
/// Size: 0x0010 (0x000030 - 0x000040)
class UUnlockDurationReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UMissionTemplate*)                   mission                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UMissionDuration*)                   Duration                                                    OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.UnlockDifficultyReward
/// Size: 0x0008 (0x000030 - 0x000038)
class UUnlockDifficultyReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UDifficultySetting*)                 Difficulty                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.ResourceReward
/// Size: 0x0010 (0x000030 - 0x000040)
class UResourceReward : public UReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   amount                                                      OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Class /Script/FSD.WeeklyResourceReward
/// Size: 0x0010 (0x000030 - 0x000040)
class UWeeklyResourceReward : public UReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   ResourceCount                                               OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	SMember(FIRandRange)                               amount                                                      OFFSET(getStruct<T>, {0x34, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.WeeklyResourceReward.GetRewards
	// TMap<UResourceData*, float> GetRewards(class AFSDPlayerController* Player);                                              // [0x19900b0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.RetirementReward
/// Size: 0x0008 (0x000030 - 0x000038)
class URetirementReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UPlayerCharacterID*)                 characterID                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.ItemBlueprintReward
/// Size: 0x0008 (0x000030 - 0x000038)
class UItemBlueprintReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.SchematicReward
/// Size: 0x0010 (0x000030 - 0x000040)
class USchematicReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(ESchematicType)                            SchematicType                                               OFFSET(get<T>, {0x30, 1, 0, 0})
	CMember(class USchematic*)                         RewardedSchematic                                           OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.SkinUnlock
/// Size: 0x0018 (0x000030 - 0x000048)
class USkinUnlock : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UItemID*)                            OptionalItemID                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 OptionalCharacterID                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UItemSkin*)                          Skin                                                        OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.PermanentItemUpgradeReward
/// Size: 0x0010 (0x000030 - 0x000040)
class UPermanentItemUpgradeReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             Item                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UItemUpgrade*)                       Upgrade                                                     OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.PureTextReward
/// Size: 0x0018 (0x000030 - 0x000048)
class UPureTextReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x30, 24, 0, 0})
};

/// Class /Script/FSD.VanityReward
/// Size: 0x0018 (0x000030 - 0x000048)
class UVanityReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(class UVanityItem*)                        VanityItem                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 OptionalCharacterID                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	DMember(bool)                                      UseContextAsTargetCharacter                                 OFFSET(get<bool>, {0x40, 1, 0, 0})
};

/// Class /Script/FSD.VanityCollectionReward
/// Size: 0x0020 (0x000030 - 0x000050)
class UVanityCollectionReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TArray<class UVanityItem*>)                VanityItems                                                 OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(class UPlayerCharacterID*)                 OptionalCharacterID                                         OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      UseContextAsTargetCharacter                                 OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/FSD.VictoryPoseReward
/// Size: 0x0010 (0x000030 - 0x000040)
class UVictoryPoseReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UVictoryPose*)                       VictoryPose                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 OptionalCharacterID                                         OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.PickaxePartReward
/// Size: 0x0008 (0x000030 - 0x000038)
class UPickaxePartReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UPickaxePart*)                       PicaxePart                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.PickaxeSetReward
/// Size: 0x0038 (0x000030 - 0x000068)
class UPickaxeSetReward : public UUnlockReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class UPickaxePart*)                       BladeFront                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UPickaxePart*)                       OptionalBladeBack                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UPickaxePart*)                       Pommel                                                      OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UPickaxePart*)                       Handle                                                      OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UPickaxePart*)                       Shaft                                                       OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(class UPickaxePart*)                       Head                                                        OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(class UPickaxePart*)                       Material                                                    OFFSET(get<T>, {0x60, 8, 0, 0})
};

/// Class /Script/FSD.SeasonTokenReward
/// Size: 0x0008 (0x000030 - 0x000038)
class USeasonTokenReward : public UReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   amount                                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.SeasonXPReward
/// Size: 0x0008 (0x000030 - 0x000038)
class USeasonXPReward : public UReward
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(int32_t)                                   amount                                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/FSD.PendingRewardsStats
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FPendingRewardsStats : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TMap<class UResourceData*, float>)         AllResources                                                OFFSET(get<T>, {0x0, 80, 0, 0})
	CMember(TMap<class UResourceData*, float>)         CollectedResources                                          OFFSET(get<T>, {0x50, 80, 0, 0})
	DMember(bool)                                      PrimaryObjectiveCompleted                                   OFFSET(get<bool>, {0xA0, 1, 0, 0})
	DMember(bool)                                      SecondaryObjectiveCompleted                                 OFFSET(get<bool>, {0xA1, 1, 0, 0})
	DMember(float)                                     TimePlayed                                                  OFFSET(get<float>, {0xA4, 4, 0, 0})
	DMember(int32_t)                                   EnemiesKilled                                               OFFSET(get<int32_t>, {0xA8, 4, 0, 0})
};

/// Struct /Script/FSD.CreditsReward
/// Size: 0x0020 (0x000000 - 0x000020)
class FCreditsReward : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   amount                                                      OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.XPReward
/// Size: 0x0020 (0x000000 - 0x000020)
class FXPReward : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	DMember(int32_t)                                   XP                                                          OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.PendingRewards
/// Size: 0x0190 (0x000000 - 0x000190)
class FPendingRewards : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FPendingRewardsStats)                      StartStats                                                  OFFSET(getStruct<T>, {0x0, 176, 0, 0})
	SMember(FPendingRewardsStats)                      EndStats                                                    OFFSET(getStruct<T>, {0xB0, 176, 0, 0})
	CMember(TArray<FCreditsReward>)                    CreditsRewardEntries                                        OFFSET(get<T>, {0x160, 16, 0, 0})
	DMember(int32_t)                                   CreditsReward                                               OFFSET(get<int32_t>, {0x170, 4, 0, 0})
	CMember(TArray<FXPReward>)                         XPRewardEntries                                             OFFSET(get<T>, {0x178, 16, 0, 0})
	DMember(int32_t)                                   XPReward                                                    OFFSET(get<int32_t>, {0x188, 4, 0, 0})
	DMember(bool)                                      bHasData                                                    OFFSET(get<bool>, {0x18C, 1, 0, 0})
	DMember(bool)                                      bIsRecording                                                OFFSET(get<bool>, {0x18D, 1, 0, 0})
	DMember(bool)                                      bWasRewarded                                                OFFSET(get<bool>, {0x18E, 1, 0, 0})
};

/// Class /Script/FSD.RewardsSubSystem
/// Size: 0x01A0 (0x000030 - 0x0001D0)
class URewardsSubSystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	SMember(FPendingRewards)                           PendingMissionRewards                                       OFFSET(getStruct<T>, {0x30, 400, 0, 0})
	CMember(TArray<FClaimableRewardEntry>)             PendingPromotionRewards                                     OFFSET(get<T>, {0x1C0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RewardsSubSystem.ShouldPendingRewardsBeShown
	// bool ShouldPendingRewardsBeShown();                                                                                      // [0x19916a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RewardsSubSystem.ShouldPendingRewardsBeGiven
	// bool ShouldPendingRewardsBeGiven();                                                                                      // [0x1991670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RewardsSubSystem.Receive_GetPendingRewards
	// bool Receive_GetPendingRewards(class UObject* WorldContext, FPendingRewardsStats& OutStats, FPendingRewards& OutRewards); // [0x1991140] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RewardsSubSystem.HasPendingRewards
	// bool HasPendingRewards();                                                                                                // [0x19901d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RewardsSubSystem.GetPendingRewards
	// bool GetPendingRewards(FPendingRewardsStats& OutStats, FPendingRewards& OutRewards);                                     // [0x198fe30] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RewardsSubSystem.ClearPendingRewards
	// void ClearPendingRewards();                                                                                              // [0x198fda0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RewardsSubSystem.ApplyPendingRewards
	// void ApplyPendingRewards(class AFSDPlayerController* Controller);                                                        // [0x198fc10] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.RewardWidget
/// Size: 0x0008 (0x000260 - 0x000268)
class URewardWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(class UReward*)                            Reward                                                      OFFSET(get<T>, {0x260, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RewardWidget.PlayReceiveAnim
	// void PlayReceiveAnim();                                                                                                  // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.RichTextInputDecorator
/// Size: 0x0008 (0x000030 - 0x000038)
class URichTextInputDecorator : public UCustomRichTextDecorator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             DecoratorWidgetClass                                        OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.RichTextInputWidget
/// Size: 0x02F0 (0x000260 - 0x000550)
class URichTextInputWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1360;

public:
	SMember(FName)                                     InputName                                                   OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	CMember(TMap<FName, FString>)                      MetaData                                                    OFFSET(get<T>, {0x268, 80, 0, 0})
	SMember(FText)                                     Content                                                     OFFSET(getStruct<T>, {0x2B8, 24, 0, 0})
	SMember(FTextBlockStyle)                           TextStyle                                                   OFFSET(getStruct<T>, {0x2D0, 624, 0, 0})
	CMember(EFSDInputSource)                           InputSource                                                 OFFSET(get<T>, {0x540, 1, 0, 0})
	CMember(class URichTextBlock*)                     RichTextBlock                                               OFFSET(get<T>, {0x548, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RichTextInputWidget.ScaleTextBlockToHeight
	// void ScaleTextBlockToHeight(class UTextBlock* InTextBlock, float LineHeight);                                            // [0x1991400] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.RichTextInputWidget.ReceiveInputUnknown
	// void ReceiveInputUnknown();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RichTextInputWidget.ReceiveInputDetails
	// void ReceiveInputDetails(FInputDisplay& InDisplay);                                                                      // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.RichTextInputWidget.OnInputSourceChanged
	// void OnInputSourceChanged(EFSDInputSource InSource);                                                                     // [0x1990c40] Final|Native|Protected 
	// Function /Script/FSD.RichTextInputWidget.OnCustomKeyBindsChanged
	// void OnCustomKeyBindsChanged();                                                                                          // [0x19905a0] Final|Native|Protected 
	// Function /Script/FSD.RichTextInputWidget.MeasureTextSize
	// FVector2D MeasureTextSize(FText& Text, float Scale);                                                                     // [0x1990200] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RichTextInputWidget.GetLineHeight
	// float GetLineHeight();                                                                                                   // [0x198fe00] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RichTextInputWidget.ApplyTextStyle
	// void ApplyTextStyle(class UTextBlock* InTextBlock, FTextBlockStyle& InTextStyle);                                        // [0x198fca0] Final|Native|Protected|HasOutParms|BlueprintCallable 
};

/// Struct /Script/FSD.TextStyleOverride
/// Size: 0x0098 (0x000000 - 0x000098)
class FTextStyleOverride : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	DMember(bool)                                      bOverrideFont                                               OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x8, 88, 0, 0})
	DMember(bool)                                      bOverrideColor                                              OFFSET(get<bool>, {0x60, 1, 0, 0})
	SMember(FSlateColor)                               Color                                                       OFFSET(getStruct<T>, {0x68, 40, 0, 0})
	DMember(bool)                                      bOverrideSize                                               OFFSET(get<bool>, {0x90, 1, 0, 0})
	DMember(float)                                     SizeScale                                                   OFFSET(get<float>, {0x94, 4, 0, 0})
};

/// Class /Script/FSD.RichTextStylable
/// Size: 0x00D0 (0x000678 - 0x000748)
class URichTextStylable : public URichTextBlock
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1864;

public:
	SMember(FSlateFontInfo)                            Font                                                        OFFSET(getStruct<T>, {0x678, 88, 0, 0})
	SMember(FSlateColor)                               FontColor                                                   OFFSET(getStruct<T>, {0x6D0, 40, 0, 0})
	CMember(TMap<FName, FTextStyleOverride>)           Styles                                                      OFFSET(get<T>, {0x6F8, 80, 0, 0})
};

/// Class /Script/FSD.RichTextSizable
/// Size: 0x0038 (0x000678 - 0x0006B0)
class URichTextSizable : public URichTextBlock
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1712;

public:
	DMember(bool)                                      bOverrideDefaultSize                                        OFFSET(get<bool>, {0x678, 1, 0, 0})
	DMember(int32_t)                                   OverrideDefaultFontSize                                     OFFSET(get<int32_t>, {0x67C, 4, 0, 0})
	DMember(bool)                                      bOverrideDefaultColor                                       OFFSET(get<bool>, {0x680, 1, 0, 0})
	SMember(FSlateColor)                               OverrideDefaultFontColor                                    OFFSET(getStruct<T>, {0x688, 40, 0, 0})


	/// Functions
	// Function /Script/FSD.RichTextSizable.SetDefaultFontSize
	// void SetDefaultFontSize(int32_t inFontSize);                                                                             // [0x1991560] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.RichTextSizable.SetDefaultFontColor
	// void SetDefaultFontColor(FLinearColor& InColor);                                                                         // [0x19914d0] Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.FSDRichTextFunctionlibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UFSDRichTextFunctionlibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.FSDRichTextFunctionlibrary.SplitRichText
	// void SplitRichText(FRichTextParseResult& Parser, int32_t SplitIndex, bool bKeepLeftFormatting, bool bKeepRightFormatting, FText& OutLeftText, FText& OutRightText); // [0x1991710] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.FSDRichTextFunctionlibrary.ParseRichText
	// FRichTextParseResult ParseRichText(FText& InText);                                                                       // [0x1990f30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.FSDRichTextFunctionlibrary.MidRichText
	// FText MidRichText(FRichTextParseResult& Parser, int32_t StartIndex, int32_t Count, bool bKeepFormatting);                // [0x1990330] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
};

/// Struct /Script/FSD.RiftBeam
/// Size: 0x0014 (0x000000 - 0x000014)
class FRiftBeam : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
};

/// Class /Script/FSD.RiftCrystal
/// Size: 0x03E0 (0x000280 - 0x000660)
class ARiftCrystal : public APawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1632;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class USceneComponent*)                    FlightRoot                                                  OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class URotatingSceneComponent*)            Bobber                                                      OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class URotatingSceneComponent*)            Rotator                                                     OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             CrystalMesh                                                 OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  WeakpointCollision                                          OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class UPointLightComponent*)               Light                                                       OFFSET(get<T>, {0x2C0, 8, 0, 0})
	CMember(class UPointLightComponent*)               LargeLight                                                  OFFSET(get<T>, {0x2C8, 8, 0, 0})
	CMember(class UCapsuleComponent*)                  KnockBackCapsule                                            OFFSET(get<T>, {0x2D0, 8, 0, 0})
	CMember(class UMeshCarverComponent*)               SpaceCarver                                                 OFFSET(get<T>, {0x2D8, 8, 0, 0})
	CMember(TArray<class UTerrainDetectComponent*>)    TerrainDetectors                                            OFFSET(get<T>, {0x2E0, 16, 0, 0})
	CMember(class UNiagaraComponent*)                  EnergyParticles                                             OFFSET(get<T>, {0x2F0, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  PillarParticles                                             OFFSET(get<T>, {0x2F8, 8, 0, 0})
	CMember(class UAudioComponent*)                    RockIdleSound                                               OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class UAudioComponent*)                    CrystalIdleSound                                            OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  InvulnerableParticles                                       OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UPathfinderCollisionComponent*)      EscortBlocker                                               OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class USpawnActorWithDebrisPosComponent*)  DebrisSpawner                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UEnemyHealthComponent*)              Health                                                      OFFSET(get<T>, {0x328, 8, 0, 0})
	CMember(class URiftSpawnerComponent*)              RiftSpawner                                                 OFFSET(get<T>, {0x330, 8, 0, 0})
	CMember(class UEnemyComponent*)                    enemy                                                       OFFSET(get<T>, {0x338, 8, 0, 0})
	CMember(class UDamageComponent*)                   KnockBackDamge                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UDamageComponent*)                   EndExplosionDamage                                          OFFSET(get<T>, {0x348, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x350, 16, 0, 0})
	SMember(FName)                                     BeamTargetParamName                                         OFFSET(getStruct<T>, {0x360, 8, 0, 0})
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x368, 32, 0, 0})
	SMember(FRotator)                                  SpawnedRotation                                             OFFSET(getStruct<T>, {0x3AC, 12, 0, 0})
	CMember(TArray<FRiftBeam>)                         Beams                                                       OFFSET(get<T>, {0x3B8, 16, 0, 0})
	CMember(TArray<class AActor*>)                     KnockbackTargets                                            OFFSET(get<T>, {0x3C8, 16, 0, 0})
	CMember(class UCurveVector*)                       DeathRattle                                                 OFFSET(get<T>, {0x3E8, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        KnockBackCurve                                              OFFSET(getStruct<T>, {0x3F0, 136, 0, 0})
	CMember(class UClass*)                             DroppedActorClass                                           OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UClass*)                             ExtractionPodClass                                          OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 ExtractionPodPositioning                                    OFFSET(get<T>, {0x488, 8, 0, 0})
	CMember(class UCurveFloat*)                        ExtractionPodCostCurve                                      OFFSET(get<T>, {0x490, 8, 0, 0})
	CMember(class UPhysicalMaterial*)                  InvulnerableOverride                                        OFFSET(get<T>, {0x4A0, 8, 0, 0})
	CMember(class UPhysicalMaterial*)                  WeakPointMaterial                                           OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class USoundCue*)                          InitialBreakFreeSound                                       OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class USoundCue*)                          BreakFreeSound                                              OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class USoundCue*)                          ActivatedWarningSound                                       OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class USoundCue*)                          BeamShootSound                                              OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(class USoundCue*)                          BeamImpactSound                                             OFFSET(get<T>, {0x4D0, 8, 0, 0})
	CMember(class USoundCue*)                          EmbeddedSound                                               OFFSET(get<T>, {0x4D8, 8, 0, 0})
	CMember(class USoundCue*)                          PushBackSound                                               OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     PushBackEffect                                              OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     BeamEffect                                                  OFFSET(get<T>, {0x4F0, 8, 0, 0})
	CMember(class UNiagaraSystem*)                     BeamImpactEffect                                            OFFSET(get<T>, {0x4F8, 8, 0, 0})
	DMember(float)                                     DeathDisplayTime                                            OFFSET(get<float>, {0x500, 4, 0, 0})
	DMember(float)                                     SafetyDistance                                              OFFSET(get<float>, {0x508, 4, 0, 0})
	DMember(float)                                     TargetFlightHeight                                          OFFSET(get<float>, {0x50C, 4, 0, 0})
	DMember(float)                                     KnockBackInterval                                           OFFSET(get<float>, {0x518, 4, 0, 0})
	DMember(float)                                     MaxFallSpeed                                                OFFSET(get<float>, {0x524, 4, 0, 0})
	DMember(float)                                     FallAcceleration                                            OFFSET(get<float>, {0x528, 4, 0, 0})
	DMember(float)                                     CheckPathsInterval                                          OFFSET(get<float>, {0x52C, 4, 0, 0})
	DMember(float)                                     ReinforcementCooldown                                       OFFSET(get<float>, {0x534, 4, 0, 0})
	DMember(float)                                     BossHealthBarDelay                                          OFFSET(get<float>, {0x53C, 4, 0, 0})
	DMember(bool)                                      InitialCarvingDone                                          OFFSET(get<bool>, {0x546, 1, 0, 0})
	DMember(bool)                                      RotateBeamComponents                                        OFFSET(get<bool>, {0x547, 1, 0, 0})
	SMember(FRuntimeFloatCurve)                        FlightCurve                                                 OFFSET(getStruct<T>, {0x548, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        FallCurve                                                   OFFSET(getStruct<T>, {0x5D0, 136, 0, 0})
	CMember(TEnumAsByte<ERiftCrystalState>)            State                                                       OFFSET(get<T>, {0x65C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RiftCrystal.StopWave
	// void StopWave();                                                                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.StopRumble
	// void StopRumble();                                                                                                       // [0x1991a60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftCrystal.StartWave
	// void StartWave();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.StartRumble
	// void StartRumble();                                                                                                      // [0x1991a40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftCrystal.SpawnReinforcements
	// void SpawnReinforcements();                                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.SpawnExtractionPod
	// void SpawnExtractionPod(FVector locaiton);                                                                               // [0x1d6f900] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.ShowHeathBar
	// void ShowHeathBar();                                                                                                     // [0x19916f0] Final|Native|Public  
	// Function /Script/FSD.RiftCrystal.ShowCallingEffects
	// void ShowCallingEffects();                                                                                               // [0x19916d0] Final|Native|Protected|Const 
	// Function /Script/FSD.RiftCrystal.SetState
	// void SetState(TEnumAsByte<ERiftCrystalState> State);                                                                     // [0x19915f0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftCrystal.ReplaceCrystal
	// void ReplaceCrystal(FTransform SpawnTransform);                                                                          // [0x1d6f900] Event|Public|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.Receive_ExitedState
	// void Receive_ExitedState(TEnumAsByte<ERiftCrystalState> State);                                                          // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.Receive_EnteredState
	// void Receive_EnteredState(TEnumAsByte<ERiftCrystalState> State);                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.OnTerrainPointRemoved
	// void OnTerrainPointRemoved(class USceneComponent* Point);                                                                // [0x1990ea0] Final|Native|Protected 
	// Function /Script/FSD.RiftCrystal.OnRiftSpawned
	// void OnRiftSpawned(class AActor* Rift);                                                                                  // [0x1990e10] Final|Native|Protected 
	// Function /Script/FSD.RiftCrystal.OnRep_State
	// void OnRep_State(TEnumAsByte<ERiftCrystalState> oldState);                                                               // [0x1990d90] Final|Native|Protected 
	// Function /Script/FSD.RiftCrystal.OnNewHealthSegment
	// void OnNewHealthSegment(int32_t currentSegment, int32_t prevSegment);                                                    // [0x1990cc0] Final|Native|Protected 
	// Function /Script/FSD.RiftCrystal.OnExitedKnockbackZone
	// void OnExitedKnockbackZone(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x1990ae0] Final|Native|Protected 
	// Function /Script/FSD.RiftCrystal.OnEnteredKnockbackZone
	// void OnEnteredKnockbackZone(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x19908c0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.RiftCrystal.OnDeath
	// void OnDeath(class UHealthComponent* HealthComponent, float damageAmount, FDamageData& DamageData, TArray<UDamageTag*>& damageTags); // [0x1990710] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.RiftCrystal.OnDamaged
	// void OnDamaged(float Damage, FDamageData& DamageData, bool anyHealthLost);                                               // [0x19905c0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.RiftCrystal.OnAllRiftsOpened
	// void OnAllRiftsOpened();                                                                                                 // [0x1990580] Final|Native|Protected 
	// Function /Script/FSD.RiftCrystal.EnableTerrainDetection
	// void EnableTerrainDetection();                                                                                           // [0x198fde0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftCrystal.DisableTerrainDetection
	// void DisableTerrainDetection();                                                                                          // [0x198fdc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftCrystal.DestroyPillar
	// void DestroyPillar();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.CarvePillar
	// void CarvePillar(bool showEffects);                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RiftCrystal.All_ShowRiftSpawnEffects
	// void All_ShowRiftSpawnEffects(FVector_NetQuantize riftLocation);                                                         // [0x198fb80] Net|Native|Event|NetMulticast|Public 
	// Function /Script/FSD.RiftCrystal.All_AddKnockBack
	// void All_AddKnockBack(FVector_NetQuantize Direction, float force);                                                       // [0x198faa0] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.RiftSpawnerComponent
/// Size: 0x0100 (0x0000B0 - 0x0001B0)
class URiftSpawnerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:
	SMember(FMulticastInlineDelegate)                  OnRiftSpawned                                               OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFinishedSpawningRifts                                     OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAllRiftsOpened                                            OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(TArray<class AActor*>)                     spawned                                                     OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TMap<class UDifficultySetting*, int32_t>)  AmountByDifficulty                                          OFFSET(get<T>, {0x120, 80, 0, 0})
	CMember(class UClass*)                             RiftClass                                                   OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x178, 8, 0, 0})
	DMember(float)                                     SpawnInterval                                               OFFSET(get<float>, {0x188, 4, 0, 0})
	DMember(float)                                     SpawnDeviation                                              OFFSET(get<float>, {0x18C, 4, 0, 0})
	DMember(float)                                     InitialSpawnDelay                                           OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(int32_t)                                   AmountToSpawn                                               OFFSET(get<int32_t>, {0x19C, 4, 0, 0})
	DMember(bool)                                      SpawnOneAtATime                                             OFFSET(get<bool>, {0x1A8, 1, 0, 0})
	DMember(bool)                                      DisallowSpawning                                            OFFSET(get<bool>, {0x1AC, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RiftSpawnerComponent.StopSpawning
	// void StopSpawning();                                                                                                     // [0x1995d90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftSpawnerComponent.StartSpawning
	// void StartSpawning();                                                                                                    // [0x1995d50] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftSpawnerComponent.SpawnRift
	// void SpawnRift();                                                                                                        // [0x1995c20] Final|Native|Protected 
	// Function /Script/FSD.RiftSpawnerComponent.ReportRiftOpened
	// void ReportRiftOpened(class AActor* Rift);                                                                               // [0x1995830] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftSpawnerComponent.PreFetchSpawnLocations
	// void PreFetchSpawnLocations(FVector& Origin);                                                                            // [0x19957a0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.RiftSpawnerComponent.OnRep_Spawned
	// void OnRep_Spawned();                                                                                                    // [0x1995690] Final|Native|Protected 
	// Function /Script/FSD.RiftSpawnerComponent.GetRifts
	// TArray<AActor*> GetRifts();                                                                                              // [0x19951f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RiftSpawnerComponent.CollectSpawnLocations
	// bool CollectSpawnLocations(FVector& Origin);                                                                             // [0x1995050] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.RivalBomb
/// Size: 0x0068 (0x000368 - 0x0003D0)
class ARivalBomb : public AGameEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 976;

public:
	CMember(TArray<class ARivalBombNode*>)             ActiveNodeInstances                                         OFFSET(get<T>, {0x368, 16, 0, 0})
	DMember(float)                                     NodeHackTime                                                OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(int32_t)                                   NumNodesToHack                                              OFFSET(get<int32_t>, {0x37C, 4, 0, 0})
	DMember(bool)                                      bDataCellPickedUp                                           OFFSET(get<bool>, {0x380, 1, 0, 0})
	CMember(class UClass*)                             DataCell                                                    OFFSET(get<T>, {0x388, 8, 0, 0})
	CMember(class UClass*)                             RivalBomb                                                   OFFSET(get<T>, {0x398, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 NodePositioning                                             OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UCurveFloat*)                        NodeCostCurve                                               OFFSET(get<T>, {0x3A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RivalBomb.UpdateNodesOnStart
	// void UpdateNodesOnStart();                                                                                               // [0x1995db0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.RivalBomb.SpawnDataCell
	// void SpawnDataCell();                                                                                                    // [0x1995c00] Final|BlueprintAuthorityOnly|Native|Private|BlueprintCallable 
	// Function /Script/FSD.RivalBomb.ReceiveDataCellPickedUp
	// void ReceiveDataCellPickedUp();                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RivalBomb.OnRep_DataCellPickedUp
	// void OnRep_DataCellPickedUp();                                                                                           // [0x19955b0] Final|Native|Protected 
	// Function /Script/FSD.RivalBomb.OnMatchStarted
	// void OnMatchStarted();                                                                                                   // [0x19953b0] Final|Native|Private 
	// Function /Script/FSD.RivalBomb.OnDataCellPickedUp
	// void OnDataCellPickedUp(bool Attached, FVector PrevScale);                                                               // [0x19952a0] Final|Native|Protected|HasDefaults 
	// Function /Script/FSD.RivalBomb.DeactivateAllNodes
	// void DeactivateAllNodes(bool failed);                                                                                    // [0x19950f0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.RivalBomb.ActivateNewNode
	// void ActivateNewNode();                                                                                                  // [0x1994fa0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.RivalBombNode
/// Size: 0x0058 (0x000220 - 0x000278)
class ARivalBombNode : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	SMember(FMulticastInlineDelegate)                  OnStateChanged                                              OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	CMember(class UClass*)                             RivalBombCable                                              OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UHackingUsableComponent*)            HackingUsable                                               OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(ERivalBombNodeState)                       State                                                       OFFSET(get<T>, {0x240, 1, 0, 0})
	CMember(class ASplineCableActor*)                  BombCable                                                   OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class ARivalBomb*)                         RivalBomb                                                   OFFSET(get<T>, {0x250, 8, 0, 0})
	DMember(float)                                     RemainingHackTime                                           OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     HackStartTime                                               OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(int32_t)                                   BombIndex                                                   OFFSET(get<int32_t>, {0x260, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RivalBombNode.StateChangedDelegate__DelegateSignature
	// void StateChangedDelegate__DelegateSignature(class ARivalBombNode* InBombNode, ERivalBombNodeState InState);             // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RivalBombNode.ReceiveStateUpdated
	// void ReceiveStateUpdated();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RivalBombNode.OnRep_State
	// void OnRep_State();                                                                                                      // [0x19956b0] Final|Native|Protected 
	// Function /Script/FSD.RivalBombNode.OnRep_RemainingHackTime
	// void OnRep_RemainingHackTime();                                                                                          // [0x1995670] Final|Native|Protected|Const 
	// Function /Script/FSD.RivalBombNode.OnNodeHackedByUser
	// void OnNodeHackedByUser(class APlayerCharacter* Player);                                                                 // [0x19953d0] Final|Native|Protected 
	// Function /Script/FSD.RivalBombNode.OnHackTimerTick
	// void OnHackTimerTick();                                                                                                  // [0x1995390] Final|Native|Protected 
	// Function /Script/FSD.RivalBombNode.GetRemainingTimePct
	// float GetRemainingTimePct();                                                                                             // [0x19951c0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.RivalBombNodeAniminstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class URivalBombNodeAniminstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(bool)                                      IsActive                                                    OFFSET(get<bool>, {0x2B9, 1, 0, 0})
	DMember(bool)                                      IsFailed                                                    OFFSET(get<bool>, {0x2BA, 1, 0, 0})
	DMember(bool)                                      isDone                                                      OFFSET(get<bool>, {0x2BB, 1, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x2BC, 12, 0, 0})
	DMember(float)                                     StartOffset                                                 OFFSET(get<float>, {0x2C8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RivalBombNodeAniminstance.SetRivalBombNodeState
	// void SetRivalBombNodeState(ERivalBombNodeState NewState);                                                                // [0x1995af0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.RockCrackerPod
/// Size: 0x0058 (0x0002E0 - 0x000338)
class ARockCrackerPod : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 824;

public:
	CMember(class UFriendlyHealthComponent*)           Health                                                      OFFSET(get<T>, {0x2E0, 8, 0, 0})
	CMember(class UContinuousUsableComponent*)         RepairUsable                                                OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnRockCrackerStateChanged                                   OFFSET(getStruct<T>, {0x2F0, 16, 0, 0})
	DMember(float)                                     DrainPerSecond                                              OFFSET(get<float>, {0x300, 4, 0, 0})
	CMember(ERockCrackerstate)                         PodState                                                    OFFSET(get<T>, {0x304, 1, 0, 0})
	CMember(class ARockCrackerPod*)                    EndPointDrill                                               OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   InDangerDialogue                                            OFFSET(get<T>, {0x310, 8, 0, 0})
	DMember(bool)                                      LightsAreGreen                                              OFFSET(get<bool>, {0x318, 1, 0, 0})
	DMember(float)                                     DrainImmunityTime                                           OFFSET(get<float>, {0x31C, 4, 0, 0})
	DMember(float)                                     YellowLightsThreshold                                       OFFSET(get<float>, {0x320, 4, 0, 0})
	DMember(float)                                     HealPerTick                                                 OFFSET(get<float>, {0x324, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RockCrackerPod.SwitchYellowLights
	// void SwitchYellowLights(bool isGreen);                                                                                   // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.RockCrackerPod.SetPodState
	// void SetPodState(ERockCrackerstate PodState);                                                                            // [0x1995a70] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RockCrackerPod.OnRepairTick
	// void OnRepairTick(class APlayerCharacter* User, EInputKeys Key);                                                         // [0x19956d0] Final|Native|Public  
	// Function /Script/FSD.RockCrackerPod.OnRep_PodState
	// void OnRep_PodState(ERockCrackerstate oldState);                                                                         // [0x19955f0] Final|Native|Protected 
	// Function /Script/FSD.RockCrackerPod.OnRep_LightsAreGreen
	// void OnRep_LightsAreGreen();                                                                                             // [0x19955d0] Final|Native|Private 
	// Function /Script/FSD.RockCrackerPod.OnPodDamaged
	// void OnPodDamaged(float damageInfliced, FDamageData& DamageData, bool anyHealthLost);                                    // [0x1995460] Final|Native|Public|HasOutParms 
	// Function /Script/FSD.RockCrackerPod.OnExitState
	// void OnExitState(ERockCrackerstate PodState);                                                                            // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RockCrackerPod.OnEventStarted
	// void OnEventStarted();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RockCrackerPod.OnEventEnded
	// void OnEventEnded(bool wasSuccess);                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RockCrackerPod.OnEnterState
	// void OnEnterState(ERockCrackerstate PodState);                                                                           // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.RockCrackerPod.IsBroken
	// bool IsBroken();                                                                                                         // [0x1995270] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RockCrackerPod.GetPodState
	// ERockCrackerstate GetPodState();                                                                                         // [0x19951a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.RockCrackerPod.All_SwitchYellowLights
	// void All_SwitchYellowLights(bool isGreen);                                                                               // [0x1994fc0] Final|Net|NetReliableNative|Event|NetMulticast|Private 
};

/// Class /Script/FSD.RockCrackerDrill
/// Size: 0x0010 (0x000240 - 0x000250)
class ARockCrackerDrill : public AFuelLineEndPoint
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(class USingleUsableComponent*)             ConstructUsable                                             OFFSET(get<T>, {0x240, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RockCrackerDrill.SetIsDrilling
	// void SetIsDrilling(bool isDrilling);                                                                                     // [0x19959e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RockCrackerDrill.GetIsDrilling
	// bool GetIsDrilling();                                                                                                    // [0x1995180] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.RockCrackedAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class URockCrackedAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(class ARockCrackerPod*)                    pod                                                         OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(ERockCrackerstate)                         PodState                                                    OFFSET(get<T>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      IsActive                                                    OFFSET(get<bool>, {0x2C1, 1, 0, 0})
	DMember(bool)                                      IsBroken                                                    OFFSET(get<bool>, {0x2C2, 1, 0, 0})
};

/// Class /Script/FSD.DrillAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UDrillAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	CMember(class ARockCrackerDrill*)                  Drill                                                       OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(float)                                     BuildProgress                                               OFFSET(get<float>, {0x2C0, 4, 0, 0})
	DMember(bool)                                      Drilling                                                    OFFSET(get<bool>, {0x2C4, 1, 0, 0})
};

/// Class /Script/FSD.RockEnemiesEvent
/// Size: 0x0080 (0x000368 - 0x0003E8)
class ARockEnemiesEvent : public AGameEvent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(class UClass*)                             PowerUpClass                                                OFFSET(get<T>, {0x368, 8, 0, 0})
	DMember(float)                                     PowerUpGenerationTime                                       OFFSET(get<float>, {0x378, 4, 0, 0})
	CMember(TArray<int32_t>)                           KillAmountPerPlayer                                         OFFSET(get<T>, {0x380, 16, 0, 0})
	CMember(TArray<int32_t>)                           MaxEnemyCountPerPlayer                                      OFFSET(get<T>, {0x390, 16, 0, 0})
	CMember(TArray<class APawn*>)                      SpawnedRockEnemies                                          OFFSET(get<T>, {0x3A0, 16, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UParticleSystem*)                    MuzzleEffect                                                OFFSET(get<T>, {0x3B8, 8, 0, 0})
	DMember(int32_t)                                   PowerUpsPerGeneration                                       OFFSET(get<int32_t>, {0x3C0, 4, 0, 0})
	DMember(int32_t)                                   GruntPointsAward                                            OFFSET(get<int32_t>, {0x3C4, 4, 0, 0})
	DMember(int32_t)                                   TankPointsAward                                             OFFSET(get<int32_t>, {0x3C8, 4, 0, 0})
	CMember(class UEnemyGroupDescriptor*)              RockEnemies                                                 OFFSET(get<T>, {0x3E0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.RockEnemiesEvent.StopPowerupGeneration
	// void StopPowerupGeneration();                                                                                            // [0x1995d70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.RockEnemiesEvent.StartPowerupGeneration
	// void StartPowerupGeneration();                                                                                           // [0x1995d30] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.RockEnemiesEvent.SpawnRockEnemies
	// void SpawnRockEnemies(float Difficulty, TArray<FVector>& Locations);                                                     // [0x1995c40] Final|Native|Protected|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.RockEnemiesEvent.ShowFireEffects
	// void ShowFireEffects(int32_t selectedBone);                                                                              // [0x1995b70] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.RockEnemiesEvent.RockEnemySpawned
	// void RockEnemySpawned(class APawn* spawnedEnemy);                                                                        // [0x1995950] Final|Native|Public  
	// Function /Script/FSD.RockEnemiesEvent.RockEnemyDied
	// void RockEnemyDied(class UHealthComponentBase* Health);                                                                  // [0x19958c0] Final|Native|Public  
	// Function /Script/FSD.RockEnemiesEvent.OnShoot
	// void OnShoot();                                                                                                          // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RockEnemiesEvent.EnemySpawnedAfterComplete
	// void EnemySpawnedAfterComplete(class APawn* spawnedEnemy);                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.RoomCarverComponent
/// Size: 0x0008 (0x0001F8 - 0x000200)
class URoomCarverComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 512;

public:
	CMember(class URoomGenerator*)                     RoomGenerator                                               OFFSET(get<T>, {0x1F8, 8, 0, 0})
};

/// Class /Script/FSD.RoomDecorationObject
/// Size: 0x0010 (0x000030 - 0x000040)
class URoomDecorationObject : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             Actor                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.RoomFeature
/// Size: 0x0018 (0x000028 - 0x000040)
class URoomFeature : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class URoomFeature*>)               RoomFeatures                                                OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.RandomSelector
/// Size: 0x0008 (0x000040 - 0x000048)
class URandomSelector : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   Min                                                         OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   Max                                                         OFFSET(get<int32_t>, {0x44, 4, 0, 0})
};

/// Class /Script/FSD.FloodFillLine
/// Size: 0x0030 (0x000040 - 0x000070)
class UFloodFillLine : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UFloodFillSettings*)                 WallNoiseOverride                                           OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 CeilingNoiseOverride                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 FloorNoiseOverride                                          OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(bool)                                      UseDetailNoise                                              OFFSET(get<bool>, {0x58, 1, 0, 0})
	CMember(TArray<FRoomLinePoint>)                    Points                                                      OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Struct /Script/FSD.RandLinePoint
/// Size: 0x002C (0x000000 - 0x00002C)
class FRandLinePoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 44;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FRandRange)                                range                                                       OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FRandRange)                                NoiseRange                                                  OFFSET(getStruct<T>, {0x14, 8, 0, 0})
	SMember(FRandRange)                                SkewFactor                                                  OFFSET(getStruct<T>, {0x1C, 8, 0, 0})
	SMember(FRandRange)                                FillAmount                                                  OFFSET(getStruct<T>, {0x24, 8, 0, 0})
};

/// Class /Script/FSD.FloodFillPillar
/// Size: 0x0030 (0x000040 - 0x000070)
class UFloodFillPillar : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UFloodFillSettings*)                 NoiseOverride                                               OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(TArray<FRandLinePoint>)                    Points                                                      OFFSET(get<T>, {0x48, 16, 0, 0})
	SMember(FRandRange)                                RangeScale                                                  OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FRandRange)                                NoiseRangeScale                                             OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FRandRange)                                EndcapScale                                                 OFFSET(getStruct<T>, {0x68, 8, 0, 0})
};

/// Class /Script/FSD.FloodFillProceduralPillar
/// Size: 0x0018 (0x000040 - 0x000058)
class UFloodFillProceduralPillar : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<FVector>)                           Points                                                      OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(class UPillarSettings*)                    PillarSettings                                              OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/FSD.FloodFillBox
/// Size: 0x0038 (0x000040 - 0x000078)
class UFloodFillBox : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UFloodFillSettings*)                 Noise                                                       OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FVector)                                   Extends                                                     OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x60, 12, 0, 0})
	DMember(bool)                                      IsCarver                                                    OFFSET(get<bool>, {0x6C, 1, 0, 0})
	DMember(float)                                     NoiseRange                                                  OFFSET(get<float>, {0x70, 4, 0, 0})
};

/// Class /Script/FSD.EntranceFeature
/// Size: 0x0020 (0x000040 - 0x000060)
class UEntranceFeature : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	SMember(FRotator)                                  Direction                                                   OFFSET(getStruct<T>, {0x4C, 12, 0, 0})
	CMember(ECaveEntranceType)                         EntranceType                                                OFFSET(get<T>, {0x58, 1, 0, 0})
	CMember(ECaveEntrancePriority)                     Priority                                                    OFFSET(get<T>, {0x59, 1, 0, 0})
};

/// Class /Script/FSD.ResourceFeature
/// Size: 0x0020 (0x000040 - 0x000060)
class UResourceFeature : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(float)                                     BaseAmount                                                  OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/FSD.SpawnActorFeature
/// Size: 0x0050 (0x000040 - 0x000090)
class USpawnActorFeature : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(class UClass*)                             ActorToSpawn                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FVector)                                   AdjustmentDirection                                         OFFSET(getStruct<T>, {0x58, 12, 0, 0})
	CMember(EItemAdjustmentType)                       Adjustment                                                  OFFSET(get<T>, {0x64, 1, 0, 0})
	SMember(FVector)                                   ScaleMin                                                    OFFSET(getStruct<T>, {0x68, 12, 0, 0})
	SMember(FVector)                                   ScaleMax                                                    OFFSET(getStruct<T>, {0x74, 12, 0, 0})
	SMember(FRotator)                                  RotationDelta                                               OFFSET(getStruct<T>, {0x80, 12, 0, 0})
};

/// Class /Script/FSD.SpawnTriggerFeature
/// Size: 0x0050 (0x000040 - 0x000090)
class USpawnTriggerFeature : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UClass*)                             TriggerClass                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x50, 48, 0, 0})
	SMember(FName)                                     Message                                                     OFFSET(getStruct<T>, {0x80, 8, 0, 0})
};

/// Class /Script/FSD.SpawnTrigger
/// Size: 0x0008 (0x000220 - 0x000228)
class ASpawnTrigger : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 552;

public:
	SMember(FName)                                     Message                                                     OFFSET(getStruct<T>, {0x220, 8, 0, 0})
};

/// Class /Script/FSD.SubRoomFeature
/// Size: 0x0028 (0x000040 - 0x000068)
class USubRoomFeature : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(class URoomGenerator*)                     RoomGenerator                                               OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x48, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0x54, 12, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Class /Script/FSD.RandomSubRoomFeature
/// Size: 0x0070 (0x000040 - 0x0000B0)
class URandomSubRoomFeature : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(class URoomGeneratorGroup*)                RoomGroup                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FGameplayTagQuery)                         tagQuery                                                    OFFSET(getStruct<T>, {0x48, 72, 0, 0})
	DMember(int32_t)                                   Layer                                                       OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x94, 12, 0, 0})
	SMember(FRotator)                                  Rotation                                                    OFFSET(getStruct<T>, {0xA0, 12, 0, 0})
	DMember(float)                                     Scale                                                       OFFSET(get<float>, {0xAC, 4, 0, 0})
};

/// Class /Script/FSD.DropPodCalldownLocationFeature
/// Size: 0x0018 (0x000040 - 0x000058)
class UDropPodCalldownLocationFeature : public URoomFeature
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	SMember(FVector)                                   Location                                                    OFFSET(getStruct<T>, {0x40, 12, 0, 0})
	CMember(class UClass*)                             CalldownClass                                               OFFSET(get<T>, {0x50, 8, 0, 0})
};

/// Class /Script/FSD.RoomGeneratorBase
/// Size: 0x0028 (0x000030 - 0x000058)
class URoomGeneratorBase : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	DMember(float)                                     Bounds                                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(bool)                                      CanOnlyBeUsedOnce                                           OFFSET(get<bool>, {0x34, 1, 0, 0})
	CMember(ERoomMirroringSupport)                     MirrorSupport                                               OFFSET(get<T>, {0x35, 1, 0, 0})
	SMember(FGameplayTagContainer)                     RoomTags                                                    OFFSET(getStruct<T>, {0x38, 32, 0, 0})
};

/// Class /Script/FSD.RoomGenerator
/// Size: 0x0010 (0x000058 - 0x000068)
class URoomGenerator : public URoomGeneratorBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<class URoomFeature*>)               RoomFeatures                                                OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RoomGenerator.GetAllRoomFeatures
	// TArray<URoomFeature*> GetAllRoomFeatures();                                                                              // [0x1999a90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.RoomGeneratorGroup
/// Size: 0x0010 (0x000030 - 0x000040)
class URoomGeneratorGroup : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class URoomGenerator*>)             Rooms                                                       OFFSET(get<T>, {0x30, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.RoomGeneratorGroup.GetRandomRoomWithTags
	// class URoomGenerator* GetRandomRoomWithTags(FRoomGeneratorGroupInstance& groupInstance, FGameplayTagQuery& queury, FRandomStream& RandomStream); // [0x1999d30] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.RoomGeneratorGroup.GetRandomRoom
	// class URoomGenerator* GetRandomRoom(FRandomStream& RandomStream);                                                        // [0x1999c90] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.RoomGeneratorGroup.CreateGroupInstance
	// FRoomGeneratorGroupInstance CreateGroupInstance();                                                                       // [0x1999740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.RotateToFace
/// Size: 0x0028 (0x0001F8 - 0x000220)
class URotateToFace : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FVector)                                   TargetOffset                                                OFFSET(getStruct<T>, {0x1F8, 12, 0, 0})
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x208, 8, 0, 0})
	DMember(int32_t)                                   Face                                                        OFFSET(get<int32_t>, {0x210, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RotateToFace.SetTarget
	// void SetTarget(class AActor* Target);                                                                                    // [0x17f4ca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RotateToFace.SetShouldFaceAway
	// void SetShouldFaceAway(bool FaceAway);                                                                                   // [0x199a790] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.RotatingSceneComponent
/// Size: 0x0028 (0x0001F8 - 0x000220)
class URotatingSceneComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
	SMember(FRotator)                                  DeltaRotaion                                                OFFSET(getStruct<T>, {0x1F8, 12, 0, 0})
	DMember(float)                                     BobbingSpeed                                                OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     BobbingSize                                                 OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(bool)                                      Sweep                                                       OFFSET(get<bool>, {0x215, 1, 0, 0})
	DMember(bool)                                      ForceParentUp                                               OFFSET(get<bool>, {0x216, 1, 0, 0})
	CMember(ETeleportType)                             TeleportMode                                                OFFSET(get<T>, {0x217, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RotatingSceneComponent.Stop
	// void Stop();                                                                                                             // [0x199a840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.RotatingSceneComponent.Start
	// void Start();                                                                                                            // [0x199a820] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.SalvageObjective
/// Size: 0x00F0 (0x000180 - 0x000270)
class USalvageObjective : public UObjective
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 624;

public:
	DMember(int32_t)                                   SalvageActorCount                                           OFFSET(get<int32_t>, {0x180, 4, 0, 0})
	CMember(class UGemResourceData*)                   LegResource                                                 OFFSET(get<T>, {0x188, 8, 0, 0})
	DMember(int32_t)                                   LegCountPerActor                                            OFFSET(get<int32_t>, {0x190, 4, 0, 0})
	DMember(float)                                     LegDistanceToActor                                          OFFSET(get<float>, {0x194, 4, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDisableLegSpheres                                         OFFSET(getStruct<T>, {0x198, 16, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UDebrisBase*>>)      Debris                                                      OFFSET(get<T>, {0x1B0, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             SalvageActor                                                OFFSET(get<T>, {0x1C0, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             DamagedPodClass                                             OFFSET(get<T>, {0x1E8, 40, 0, 0})
	CMember(class UDebrisPositioning*)                 DamagedPodPositioning                                       OFFSET(get<T>, {0x210, 8, 0, 0})
	DMember(float)                                     DamagedPodMinDistanceToDropZone                             OFFSET(get<float>, {0x218, 4, 0, 0})
	CMember(class ADropPod*)                           DamagedPod                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(int32_t)                                   ActorsToSalvage                                             OFFSET(get<int32_t>, {0x228, 4, 0, 0})
	DMember(int32_t)                                   ActorsSalvaged                                              OFFSET(get<int32_t>, {0x22C, 4, 0, 0})
	DMember(int32_t)                                   RepairPoints                                                OFFSET(get<int32_t>, {0x230, 4, 0, 0})
	DMember(int32_t)                                   PointsRepaired                                              OFFSET(get<int32_t>, {0x234, 4, 0, 0})
	DMember(float)                                     MinSalvageActorDistanceToLandingZone                        OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(bool)                                      HasMuleReturnedToPod                                        OFFSET(get<bool>, {0x23C, 1, 0, 0})
	CMember(TArray<class AMiniMule*>)                  AllSalvageActors                                            OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(TArray<class AMiniMule*>)                  SalvagedActors                                              OFFSET(get<T>, {0x250, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.SalvageObjective.PointRepaired
	// void PointRepaired();                                                                                                    // [0x199a260] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SalvageObjective.OnRep_PointsRepaired
	// void OnRep_PointsRepaired();                                                                                             // [0x1830d80] Final|Native|Protected 
	// Function /Script/FSD.SalvageObjective.OnRep_ActorsToSalvage
	// void OnRep_ActorsToSalvage(int32_t prevAmount);                                                                          // [0x17d4d70] Final|Native|Protected 
	// Function /Script/FSD.SalvageObjective.OnRep_ActorsSalvaged
	// void OnRep_ActorsSalvaged(int32_t prevAmount);                                                                           // [0x199a150] Final|Native|Protected 
	// Function /Script/FSD.SalvageObjective.OnActorRepaired
	// void OnActorRepaired(class URepairableComponent* repairable);                                                            // [0x199a0a0] Final|Native|Protected 
	// Function /Script/FSD.SalvageObjective.FindRepairPointLocation
	// FTransform FindRepairPointLocation(class AProceduralSetup* Setup, FVector& podLocation, float Radius, float maxVerticalDistance, class UDebrisPositioning* DebrisPositioning, class UClass* terrainPlacement, TArray<FVector>& locationsToAvoid, class UCurveFloat* AvoidCostCurve); // [0x19997c0] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SalvageObjective.AllActorsSalvaged
	// void AllActorsSalvaged();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.SalvageFuelPod
/// Size: 0x0000 (0x0002E0 - 0x0002E0)
class ASalvageFuelPod : public ARessuplyPod
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
};

/// Class /Script/FSD.SavableObject
/// Size: 0x0018 (0x000028 - 0x000040)
class USavableObject : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      EnableDangerousSaveGameIDEditing                            OFFSET(get<bool>, {0x28, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x2C, 16, 0, 0})
};

/// Class /Script/FSD.SavableActor
/// Size: 0x0018 (0x000220 - 0x000238)
class ASavableActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	DMember(bool)                                      EnableDangerousSaveGameIDEditing                            OFFSET(get<bool>, {0x220, 1, 0, 0})
	SMember(FGuid)                                     SavegameID                                                  OFFSET(getStruct<T>, {0x224, 16, 0, 0})
};

/// Class /Script/FSD.SaveGameIDInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USaveGameIDInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.RefundableInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class URefundableInterface : public USaveGameIDInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.ItemIDInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UItemIDInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.SaveGameLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USaveGameLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SaveGameLibrary.TryGetSaveGameSnapShot
	// bool TryGetSaveGameSnapShot(class UObject* WorldContext, FString Filename, int32_t userIdx, FSaveGameSnapShot& OutSnapShot); // [0x199a860] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SaveGameLibrary.GetUserSaveGameSlots
	// TMap<FString, FDateTime> GetUserSaveGameSlots(FString UserId);                                                           // [0x1999ed0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SaveGameLibrary.GetAllSaveGameSlots
	// TMap<FString, FDateTime> GetAllSaveGameSlots();                                                                          // [0x1999b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SaveGameSettings
/// Size: 0x0050 (0x000030 - 0x000080)
class USaveGameSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	CMember(TMap<FGuid, class UVanityItem*>)           CampaignVanityFixupList                                     OFFSET(get<T>, {0x30, 80, 0, 0})
};

/// Struct /Script/FSD.SaveGameStatePerkItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FSaveGameStatePerkItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(char)                                      Rank                                                        OFFSET(get<char>, {0x0, 1, 0, 0})
	CMember(class UPerkAsset*)                         Perk                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FSD.ActiveCampaingMission
/// Size: 0x0014 (0x000000 - 0x000014)
class FActiveCampaingMission : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(bool)                                      HasMission                                                  OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FGlobalMissionSeed)                        GlobalSeed                                                  OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	DMember(int32_t)                                   MissionSeed                                                 OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Class /Script/FSD.SaveGameStateComponent
/// Size: 0x0158 (0x0000B0 - 0x000208)
class USaveGameStateComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 520;

public:
	SMember(FMulticastInlineDelegate)                  OnEquippedPerksChanged                                      OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemUpgradeCrafted                                        OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnItemUpgradeUnequipped                                     OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPlayerProgressChanged                                     OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLoadoutChangedEvent                                       OFFSET(getStruct<T>, {0xF0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCharacterStatsChanged                                     OFFSET(getStruct<T>, {0x100, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCreditsChanged                                            OFFSET(getStruct<T>, {0x110, 16, 0, 0})
	DMember(int32_t)                                   Credits                                                     OFFSET(get<int32_t>, {0x120, 4, 0, 0})
	CMember(TArray<FSaveGameStatePerkItem>)            EquippedPerks                                               OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(class UVictoryPose*)                       VictoryPose                                                 OFFSET(get<T>, {0x138, 8, 0, 0})
	SMember(FItemLoadout)                              EquippedLoadout                                             OFFSET(getStruct<T>, {0x140, 132, 0, 0})
	SMember(FActiveCampaingMission)                    ActiveCampaignMission                                       OFFSET(getStruct<T>, {0x1C4, 20, 0, 0})
	CMember(TArray<FItemUpgradeSelection>)             ItemUpgradeSelections                                       OFFSET(get<T>, {0x1E0, 16, 0, 0})
	SMember(FPlayerProgress)                           PlayerProgress                                              OFFSET(getStruct<T>, {0x1F0, 8, 0, 0})
	CMember(TArray<FCharacterProgress>)                CharacterStats                                              OFFSET(get<T>, {0x1F8, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.SaveGameStateComponent.SetCampaign
	// void SetCampaign();                                                                                                      // [0x199a770] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SaveGameStateComponent.Server_SetVictoryPose
	// void Server_SetVictoryPose(class UVictoryPose* pose);                                                                    // [0x199a6e0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.SaveGameStateComponent.Server_SetPlayerProgress
	// void Server_SetPlayerProgress(FPlayerProgress Progress);                                                                 // [0x199a650] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.SaveGameStateComponent.Server_SetLoadout
	// void Server_SetLoadout(FItemLoadout Loadout, TArray<FItemUpgradeSelection> weaponLoadouts);                              // [0x199a4e0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.SaveGameStateComponent.Server_SetEquippedPerks
	// void Server_SetEquippedPerks(TArray<FSaveGameStatePerkItem> perks);                                                      // [0x199a440] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.SaveGameStateComponent.Server_SetCredits
	// void Server_SetCredits(int32_t amount);                                                                                  // [0x199a3b0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.SaveGameStateComponent.Server_SetCharacterStats
	// void Server_SetCharacterStats(TArray<FCharacterProgress> Stats);                                                         // [0x19704b0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.SaveGameStateComponent.Server_SetActiveCampaignMission
	// void Server_SetActiveCampaignMission(FActiveCampaingMission Data);                                                       // [0x199a310] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.SaveGameStateComponent.RefreshLoadoutFromSave
	// void RefreshLoadoutFromSave(class UPlayerCharacterID* characterID);                                                      // [0x199a280] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SaveGameStateComponent.OnRep_PlayerProgress
	// void OnRep_PlayerProgress();                                                                                             // [0x199a240] Final|Native|Protected 
	// Function /Script/FSD.SaveGameStateComponent.OnRep_ItemUpgradeSelections
	// void OnRep_ItemUpgradeSelections();                                                                                      // [0x199a220] Final|Native|Protected 
	// Function /Script/FSD.SaveGameStateComponent.OnRep_Credits
	// void OnRep_Credits();                                                                                                    // [0x199a200] Final|Native|Protected 
	// Function /Script/FSD.SaveGameStateComponent.OnRep_CharacterStats
	// void OnRep_CharacterStats();                                                                                             // [0x199a1e0] Final|Native|Protected 
	// Function /Script/FSD.SaveGameStateComponent.OnRep_ActiveCampaignMission
	// void OnRep_ActiveCampaignMission();                                                                                      // [0x199a130] Final|Native|Protected 
	// Function /Script/FSD.SaveGameStateComponent.ItemUpgradeEquipSignature__DelegateSignature
	// void ItemUpgradeEquipSignature__DelegateSignature(class UClass* itemClass, class UItemUpgrade* Upgrade);                 // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.SaveGameStateComponent.ItemUpgradeCraftSignature__DelegateSignature
	// void ItemUpgradeCraftSignature__DelegateSignature(class UItemUpgrade* Upgrade);                                          // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.SaveGameStateComponent.IsActiveCampaignMission
	// bool IsActiveCampaignMission(class UGeneratedMission* mission);                                                          // [0x199a000] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SaveGameStateComponent.GetCharacterStat
	// FCharacterProgress GetCharacterStat(class UPlayerCharacterID* characterID);                                              // [0x1999be0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SaveGameStateComponent.CreditsChangedDelegate__DelegateSignature
	// void CreditsChangedDelegate__DelegateSignature();                                                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.SchematicRarity
/// Size: 0x0008 (0x000030 - 0x000038)
class USchematicRarity : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     Rarity                                                      OFFSET(get<float>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.Schematic
/// Size: 0x00B0 (0x000058 - 0x000108)
class USchematic : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FMulticastInlineDelegate)                  OnSchematicAddedToInventory                                 OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSchematicReset                                            OFFSET(getStruct<T>, {0x68, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSchematicBuilt                                            OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	CMember(class USchematicCategory*)                 Category                                                    OFFSET(get<T>, {0x88, 8, 0, 0})
	CMember(class USchematicPricingTier*)              PricingTier                                                 OFFSET(get<T>, {0x90, 8, 0, 0})
	CMember(class USchematicRarity*)                   Rarity                                                      OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 UsedByCharacter                                             OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class USchematicItem*)                     Item                                                        OFFSET(get<T>, {0xA8, 8, 0, 0})
	CMember(TMap<class UResourceData*, int32_t>)       CraftingCost                                                OFFSET(get<T>, {0xB0, 80, 0, 0})
	DMember(bool)                                      CostIsLocked                                                OFFSET(get<bool>, {0x100, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.Schematic.SetCraftingMaterialCost
	// void SetCraftingMaterialCost();                                                                                          // [0x19a03a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Schematic.SetCostLocked
	// void SetCostLocked(bool IsLocked);                                                                                       // [0x19a0310] Final|Native|Public  
	// Function /Script/FSD.Schematic.SchematicDelegate__DelegateSignature
	// void SchematicDelegate__DelegateSignature(class USchematic* Schematic);                                                  // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.Schematic.ResetGivenReward
	// void ResetGivenReward(class UFSDSaveGame* SaveGame);                                                                     // [0x19a0280] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Schematic.RemoveSchematicFromPlayerInventory
	// void RemoveSchematicFromPlayerInventory(class UObject* WorldContext);                                                    // [0x19a01f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Schematic.GiveRewardForFree
	// void GiveRewardForFree(class UFSDSaveGame* SaveGame);                                                                    // [0x199fca0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Schematic.GetTitle
	// FText GetTitle();                                                                                                        // [0x199fa70] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Schematic.GetSchematicState
	// ESchematicState GetSchematicState(class UObject* WorldContext);                                                          // [0x199f7b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Schematic.GetSchematicItem
	// class USchematicItem* GetSchematicItem();                                                                                // [0x199f790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Schematic.GetResourceCost
	// TMap<UResourceData*, int32_t> GetResourceCost();                                                                         // [0x199f6c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Schematic.GetIconTint
	// FColor GetIconTint();                                                                                                    // [0x199f570] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Schematic.GetIcon
	// class UTexture* GetIcon(class UObject* WorldContextObject);                                                              // [0x199f430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Schematic.GetDescription
	// FText GetDescription();                                                                                                  // [0x199f2f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Schematic.CanAffordSchematic
	// bool CanAffordSchematic(class UObject* WorldContext);                                                                    // [0x199f1a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Schematic.BuildSchematic
	// void BuildSchematic(class UObject* WorldContext);                                                                        // [0x199f110] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Schematic.AddSchematicToPlayerInventory
	// void AddSchematicToPlayerInventory(class UObject* WorldContext);                                                         // [0x199efb0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.SchematicBankBase
/// Size: 0x0008 (0x000030 - 0x000038)
class USchematicBankBase : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
};

/// Class /Script/FSD.SchematicBank
/// Size: 0x0050 (0x000038 - 0x000088)
class USchematicBank : public USchematicBankBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TSet<USchematic*>)                         Schematics                                                  OFFSET(get<T>, {0x38, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.SchematicBank.AddSchematic
	// void AddSchematic(class USchematic* Schematic);                                                                          // [0x199ef20] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.SchematicBankInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class USchematicBankInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.SchematicCategory
/// Size: 0x00A0 (0x000058 - 0x0000F8)
class USchematicCategory : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	SMember(FText)                                     CategoryName                                                OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         FrameTexture                                                OFFSET(get<T>, {0x70, 8, 0, 0})
	SMember(FLinearColor)                              FrameTint                                                   OFFSET(getStruct<T>, {0x98, 16, 0, 0})
	SMember(FLinearColor)                              BackgroundTint                                              OFFSET(getStruct<T>, {0xA8, 16, 0, 0})
	CMember(ESchematicType)                            SchematicType                                               OFFSET(get<T>, {0xB8, 1, 0, 0})
	CMember(TWeakObjectPtr<class UDialogDataAsset*>)   ShoutForging                                                OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class UEventRewardType*)                   RewardType                                                  OFFSET(get<T>, {0xE8, 8, 0, 0})
	DMember(int32_t)                                   SortOrder                                                   OFFSET(get<int32_t>, {0xF0, 4, 0, 0})
};

/// Class /Script/FSD.SchematicBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USchematicBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SchematicBlueprintLibrary.PriceSchematics
	// void PriceSchematics(TSet<USchematic*>& Schematics);                                                                     // [0x19a00b0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SchematicBlueprintLibrary.PriceAllSchematics
	// void PriceAllSchematics(bool lockPrices);                                                                                // [0x19a0030] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SchematicBlueprintLibrary.LockSchematics
	// void LockSchematics(TSet<USchematic*>& Schematics);                                                                      // [0x199fef0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SchematicBlueprintLibrary.HasAnyUnlockableSchematics
	// bool HasAnyUnlockableSchematics(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, TSet<USchematicCategory*>& Categories); // [0x199fd30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SchematicBlueprintLibrary.FindItemUpgradeSchematicCategory
	// class USchematicCategory* FindItemUpgradeSchematicCategory(class UItemUpgrade* Upgrade);                                 // [0x199f260] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.SchematicItem
/// Size: 0x0000 (0x000028 - 0x000028)
class USchematicItem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SchematicItem.GetTitle
	// FText GetTitle();                                                                                                        // [0x199fb10] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SchematicItem.GetIconTint
	// FColor GetIconTint();                                                                                                    // [0x199f5b0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SchematicItem.GetIcon
	// class UTexture* GetIcon(class UObject* WorldContextObject);                                                              // [0x199f4d0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SchematicItem.GetDescription
	// FText GetDescription();                                                                                                  // [0x199f390] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.OverclockShematicItem
/// Size: 0x0010 (0x000028 - 0x000038)
class UOverclockShematicItem : public USchematicItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UItemID*)                            OwningItem                                                  OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UItemUpgrade*)                       Overclock                                                   OFFSET(get<T>, {0x30, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.OverclockShematicItem.GetOwningGearComponent
	// class UUpgradableGearComponent* GetOwningGearComponent();                                                                // [0x199f690] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.VanitySchematicItem
/// Size: 0x0008 (0x000028 - 0x000030)
class UVanitySchematicItem : public USchematicItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UVanityItem*)                        Item                                                        OFFSET(get<T>, {0x28, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.VanitySchematicItem.GetVanityItem
	// class UVanityItem* GetVanityItem();                                                                                      // [0x199fc80] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.VictoryPoseSchematicItem
/// Size: 0x0008 (0x000028 - 0x000030)
class UVictoryPoseSchematicItem : public USchematicItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UVictoryPose*)                       VictoryPose                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Class /Script/FSD.SkinSchematicItem
/// Size: 0x0010 (0x000028 - 0x000038)
class USkinSchematicItem : public USchematicItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UItemID*)                            ItemID                                                      OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UItemSkin*)                          Skin                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.ResourceSchematicItem
/// Size: 0x0018 (0x000028 - 0x000040)
class UResourceSchematicItem : public USchematicItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(int32_t)                                   Credits                                                     OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(int32_t)                                   ResourceAmount                                              OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Class /Script/FSD.BlankSchematicItem
/// Size: 0x0038 (0x000028 - 0x000060)
class UBlankSchematicItem : public USchematicItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x28, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Struct /Script/FSD.SchematicType
/// Size: 0x0070 (0x000000 - 0x000070)
class FSchematicType : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TWeakObjectPtr<class UTexture2D*>)         Icon                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              IconTint                                                    OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Frame                                                       OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FLinearColor)                              FrameTint                                                   OFFSET(getStruct<T>, {0x60, 16, 0, 0})
};

/// Class /Script/FSD.SchematicSettings
/// Size: 0x0368 (0x000030 - 0x000398)
class USchematicSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	CMember(class UDataTable*)                         PricingTable                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class USchematic*)                         BlankSchematic                                              OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TSet<USchematicBank*>)                     SchematicBanks                                              OFFSET(get<T>, {0x40, 80, 0, 0})
	CMember(TSet<UOverclockBank*>)                     OverclockBanks                                              OFFSET(get<T>, {0x90, 80, 0, 0})
	CMember(TSet<USchematicBankBase*>)                 VanitySchematicBanks                                        OFFSET(get<T>, {0xE0, 80, 0, 0})
	CMember(TMap<ESchematicType, FSchematicType>)      SchematicTypes                                              OFFSET(get<T>, {0x130, 80, 0, 0})
	CMember(class USchematicBank*)                     EndlessSchematics                                           OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TSet<USchematicCategory*>)                 Categories                                                  OFFSET(get<T>, {0x188, 80, 0, 0})
	CMember(TArray<class USchematicCategory*>)         OverclockCategories                                         OFFSET(get<T>, {0x1D8, 16, 0, 0})
	CMember(TArray<class USchematicCategory*>)         VanityCategories                                            OFFSET(get<T>, {0x1E8, 16, 0, 0})
	CMember(TArray<class USchematicCategory*>)         EndlessCategories                                           OFFSET(get<T>, {0x1F8, 16, 0, 0})
	CMember(class USchematicPricingTier*)              OverclockPricingTier                                        OFFSET(get<T>, {0x208, 8, 0, 0})
	CMember(TArray<class USchematicPricingTier*>)      VanityPricingTiers                                          OFFSET(get<T>, {0x210, 16, 0, 0})
	CMember(TArray<class USchematicRarity*>)           VanityRarity                                                OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(TArray<class USchematicRarity*>)           OverclockRarity                                             OFFSET(get<T>, {0x230, 16, 0, 0})
	CMember(TArray<class USchematicRarity*>)           EndlessRarity                                               OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatHeadWear                                           OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatMoustache                                          OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatBeard                                              OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatArmor                                              OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatEyebrow                                            OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatHairColor                                          OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatSideburn                                           OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatSkinColor                                          OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USchematicCategory*)                 VanityCatVictoryPose                                        OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class USchematicCategory*)                 WeaponPaintJob                                              OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UDataTable*)                         SchematicGATable                                            OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(TSet<FGuid>)                               VanitySchematicIDsFromOldSeasons                            OFFSET(get<T>, {0x2A8, 80, 0, 0})
	CMember(TMap<FGuid, class USchematic*>)            AllSchematicsMap                                            OFFSET(get<T>, {0x2F8, 80, 0, 0})
	CMember(TSet<USchematic*>)                         AllSchematics                                               OFFSET(get<T>, {0x348, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.SchematicSettings.ValidateVanitySchematics
	// bool ValidateVanitySchematics();                                                                                         // [0x19a03c0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SchematicSettings.GetSchematicTypeData
	// FSchematicType GetSchematicTypeData(ESchematicType InType);                                                              // [0x199f850] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SchematicSettings.GetSchematics
	// TSet<USchematic*> GetSchematics();                                                                                       // [0x199f970] Final|Native|Public|Const 
	// Function /Script/FSD.SchematicSettings.GetOverclocksForItem
	// class UOverclockBank* GetOverclocksForItem(class UItemID* Item);                                                         // [0x199f5f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ForginSettings
/// Size: 0x0018 (0x000030 - 0x000048)
class UForginSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   XPRequiredPerLevel                                          OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	CMember(TArray<ESchematicType>)                    MasteryRewardCycle                                          OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Class /Script/FSD.SeamlessTravelEventActivator
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class USeamlessTravelEventActivator : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class USeamlessTravelEventKey*)            EventKey                                                    OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/FSD.SeamlessTravelEventKey
/// Size: 0x0000 (0x000030 - 0x000030)
class USeamlessTravelEventKey : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.SeamlessTravelStorage
/// Size: 0x01B0 (0x000030 - 0x0001E0)
class USeamlessTravelStorage : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 480;

public:
	SMember(FGameDifficulty)                           ChosenDifficulty                                            OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(TMap<class UPlayer*, bool>)                PlayerShouldStartInMedbay                                   OFFSET(get<T>, {0x48, 80, 0, 0})
	CMember(TMap<class UResourceData*, float>)         Resources                                                   OFFSET(get<T>, {0x98, 80, 0, 0})
	DMember(float)                                     MissionTime                                                 OFFSET(get<float>, {0xE8, 4, 0, 0})
	CMember(TMap<FName, float>)                        StoredFloatValues                                           OFFSET(get<T>, {0xF0, 80, 0, 0})
	CMember(TMap<FName, int32_t>)                      StoredIntValues                                             OFFSET(get<T>, {0x140, 80, 0, 0})
	CMember(TSet<USeamlessTravelEventKey*>)            EventKeys                                                   OFFSET(get<T>, {0x190, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.SeamlessTravelStorage.ClearGameStateSeamlessTravelStorage
	// void ClearGameStateSeamlessTravelStorage();                                                                              // [0x199f240] Final|Native|Public|BlueprintCallable 
};

/// Struct /Script/FSD.SeasonLevel
/// Size: 0x0018 (0x000000 - 0x000018)
class FSeasonLevel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UReward*)                            Reward                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UReward*)                            actualReward                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UReward*)                            specialReward                                               OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FSD.UnassignedReward
/// Size: 0x0010 (0x000000 - 0x000010)
class FUnassignedReward : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UReward*)                            Reward                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Index                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.SeasonalEventEntry
/// Size: 0x0010 (0x000000 - 0x000010)
class FSeasonalEventEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USpecialEvent*)                      SpecialEvent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   RequiredMainCampaignProgress                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.Season
/// Size: 0x0520 (0x000058 - 0x000578)
class USeason : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1400;

public:
	SMember(FText)                                     SeasonName                                                  OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	DMember(int32_t)                                   SeasonNumber                                                OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	SMember(FText)                                     SeasonInfoText                                              OFFSET(getStruct<T>, {0x78, 24, 0, 0})
	DMember(int32_t)                                   MapKey                                                      OFFSET(get<int32_t>, {0x90, 4, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SeasonTitleCover                                            OFFSET(get<T>, {0x98, 8, 0, 0})
	SMember(FLinearColor)                              SeasonTitleBannerTint                                       OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SeasonIcon                                                  OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SeasonLogo                                                  OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SeasonFrontCover                                            OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SeasonTerminalCover                                         OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SeasonSelectionIcon                                         OFFSET(get<T>, {0x170, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         SeaonDisableIcon                                            OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         TokenSingle                                                 OFFSET(get<T>, {0x1C0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         TokensSignleNoEffect                                        OFFSET(get<T>, {0x1E8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         TokenPack                                                   OFFSET(get<T>, {0x210, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         TokenPackNoEffect                                           OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             SeasonMenuBGWidget                                          OFFSET(get<T>, {0x260, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             SeasonMenuEventBonusWidget                                  OFFSET(get<T>, {0x288, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             SeasonBriefingShowroomItem                                  OFFSET(get<T>, {0x2B0, 40, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          SeasonBriefingAudio                                         OFFSET(get<T>, {0x2D8, 8, 0, 0})
	SMember(FText)                                     SeasonBriefingText                                          OFFSET(getStruct<T>, {0x300, 24, 0, 0})
	CMember(TArray<FSeasonLevel>)                      Levels                                                      OFFSET(get<T>, {0x318, 16, 0, 0})
	SMember(FSeasonLevel)                              RewardAfterAllLevels                                        OFFSET(getStruct<T>, {0x328, 24, 0, 0})
	SMember(FSeasonLevel)                              RewardIfAlreadyOwned                                        OFFSET(getStruct<T>, {0x340, 24, 0, 0})
	CMember(TArray<FUnassignedReward>)                 UnassignedRewards                                           OFFSET(get<T>, {0x358, 16, 0, 0})
	CMember(class UTreeOfVanity*)                      TreeOfVanity                                                OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UGameDLC*)                           SeasonDLC                                                   OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(ESeasonMissionMapOverlayType)              MissionMapEventZoneType                                     OFFSET(get<T>, {0x378, 1, 0, 0})
	SMember(FRuntimeFloatCurve)                        SpawnChanceByMissionLength                                  OFFSET(getStruct<T>, {0x380, 136, 0, 0})
	SMember(FRuntimeFloatCurve)                        MinorSpawnChanceByMissionLenght                             OFFSET(getStruct<T>, {0x408, 136, 0, 0})
	CMember(TArray<FSeasonalEventEntry>)               SeasonalEvents                                              OFFSET(get<T>, {0x490, 16, 0, 0})
	CMember(TArray<FSeasonalEventEntry>)               MinorSeasonalEvents                                         OFFSET(get<T>, {0x4A0, 16, 0, 0})
	CMember(TArray<class USeasonChallenge*>)           SeasonChallenges                                            OFFSET(get<T>, {0x4B0, 16, 0, 0})
	DMember(int32_t)                                   NumberOfScripChallenges                                     OFFSET(get<int32_t>, {0x4C0, 4, 0, 0})
	CMember(class UMissionStat*)                       ScripChallenge                                              OFFSET(get<T>, {0x4C8, 8, 0, 0})
	CMember(TArray<FWaveEntry>)                        SeasonSpecificWaves                                         OFFSET(get<T>, {0x4D0, 16, 0, 0})
	DMember(float)                                     SeasonWaveInMissionChance                                   OFFSET(get<float>, {0x4E0, 4, 0, 0})
	CMember(class UMissionWarning*)                    SeasonWarning                                               OFFSET(get<T>, {0x4E8, 8, 0, 0})
	CMember(TWeakObjectPtr<class UWorld*>)             SpacerigSeasonLevel                                         OFFSET(get<T>, {0x4F0, 8, 0, 0})
	DMember(float)                                     CaveDepthMultiplier                                         OFFSET(get<float>, {0x518, 4, 0, 0})
	CMember(class UMissionStat*)                       HeartsColledtedStat                                         OFFSET(get<T>, {0x520, 8, 0, 0})
	SMember(FPropHuntEventSettings)                    PropHuntSettings                                            OFFSET(getStruct<T>, {0x528, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.Season.GetTokenTexture
	// class UTexture2D* GetTokenTexture(int32_t tokenCount, bool hasEffect);                                                   // [0x199fbb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.Season.AddUnassignedReward
	// void AddUnassignedReward(int32_t Index, class UReward* Reward);                                                          // [0x199f040] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.Season.AddLevel
	// void AddLevel(int32_t Index, class UReward* Reward, class UReward* specialReward);                                       // [0x199ee10] Final|Native|Protected|BlueprintCallable 
};

/// Struct /Script/FSD.TrackedStatInfo
/// Size: 0x0050 (0x000000 - 0x000050)
class FTrackedStatInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UMissionStat*)                       Stat                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Image                                                       OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UDataAsset*)                         assetReference                                              OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Struct /Script/FSD.ChallengeVariation
/// Size: 0x000C (0x000000 - 0x00000C)
class FChallengeVariation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   NumberOfWins                                                OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   XPCompleteGain                                              OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   TokenGain                                                   OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Class /Script/FSD.SeasonChallenge
/// Size: 0x00C0 (0x000058 - 0x000118)
class USeasonChallenge : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	SMember(FText)                                     ChallengeText                                               OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Icon                                                        OFFSET(get<T>, {0x70, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         IconOutlined                                                OFFSET(get<T>, {0x98, 8, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FTrackedStatInfo>)                  TrackedStats                                                OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FChallengeVariation>)               Variations                                                  OFFSET(get<T>, {0xE0, 16, 0, 0})
	DMember(int32_t)                                   NumberOfChoices                                             OFFSET(get<int32_t>, {0xF0, 4, 0, 0})
	DMember(float)                                     ChallengeWeight                                             OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(bool)                                      bIsSpecialChallenge                                         OFFSET(get<bool>, {0xF8, 1, 0, 0})
	DMember(int32_t)                                   MaxOccurences                                               OFFSET(get<int32_t>, {0xFC, 4, 0, 0})
	CMember(class USeasonChallenge*)                   ChallengeAfterMaxOccurences                                 OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TArray<class UClass*>)                     RequiredCampaigns                                           OFFSET(get<T>, {0x108, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.SeasonChallenge.GetIconOutlined
	// class UTexture2D* GetIconOutlined();                                                                                     // [0x19a3b10] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonChallenge.GetIcon
	// class UTexture2D* GetIcon();                                                                                             // [0x19a3ae0] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SeasonEditorRewardWidget
/// Size: 0x0008 (0x000260 - 0x000268)
class USeasonEditorRewardWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(class UReward*)                            Reward                                                      OFFSET(get<T>, {0x260, 8, 0, 0})
};

/// Class /Script/FSD.SeasonLevelWidget
/// Size: 0x0038 (0x000260 - 0x000298)
class USeasonLevelWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	SMember(FMulticastInlineDelegate)                  OnRewardClaimed                                             OFFSET(getStruct<T>, {0x260, 16, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x270, 4, 0, 0})
	DMember(int32_t)                                   SeasonLevel                                                 OFFSET(get<int32_t>, {0x274, 4, 0, 0})
	DMember(bool)                                      IsNormalClaimed                                             OFFSET(get<bool>, {0x278, 1, 0, 0})
	DMember(bool)                                      IsSpecialClaimed                                            OFFSET(get<bool>, {0x279, 1, 0, 0})
	DMember(bool)                                      IsUnlocked                                                  OFFSET(get<bool>, {0x27A, 1, 0, 0})
	DMember(bool)                                      IsLastInRow                                                 OFFSET(get<bool>, {0x27B, 1, 0, 0})
	SMember(FSeasonLevel)                              LevelInfo                                                   OFFSET(getStruct<T>, {0x280, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.SeasonLevelWidget.TryClaimReward
	// bool TryClaimReward(bool isNormalReward);                                                                                // [0x19a5450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonLevelWidget.SetData
	// void SetData(int32_t InLevel, bool inLastInRow);                                                                         // [0x19a52b0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonLevelWidget.RefreshState
	// void RefreshState();                                                                                                     // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.SeasonLevelWidget.OnDataSet
	// void OnDataSet();                                                                                                        // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.SeasonInfinityLevelWidget
/// Size: 0x0008 (0x000298 - 0x0002A0)
class USeasonInfinityLevelWidget : public USeasonLevelWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 672;

public:
	DMember(int32_t)                                   InfinityStartLevel                                          OFFSET(get<int32_t>, {0x298, 4, 0, 0})
};

/// Class /Script/FSD.SeasonSettings
/// Size: 0x0048 (0x000030 - 0x000078)
class USeasonSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(TArray<class USeason*>)                    Seasons                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   CurrentSeasonIndex                                          OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   MaxActiveChallenges                                         OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   XPPerLevel                                                  OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	CMember(class UCurveFloat*)                        XPToPerforcemancePointsCurve                                OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(int32_t)                                   TreeOfVanitySnapSize                                        OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(float)                                     SpecialChallengeChange                                      OFFSET(get<float>, {0x5C, 4, 0, 0})
	CMember(class UMissionStat*)                       HeartsColledtedStat                                         OFFSET(get<T>, {0x60, 8, 0, 0})
	SMember(FIntPoint)                                 SporeTowerPlagueGainRange                                   OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	DMember(int32_t)                                   HeartsPerScrip                                              OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(int32_t)                                   NumberOfScriptsFromPlague                                   OFFSET(get<int32_t>, {0x74, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SeasonSettings.GetSeason
	// class USeason* GetSeason(int32_t Season);                                                                                // [0x19a3ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.SeasonReplicatorComponent
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class USeasonReplicatorComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	SMember(FMulticastInlineDelegate)                  OnHostSeasonSetEvent                                        OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	CMember(class USeason*)                            HostActiveSeason                                            OFFSET(get<T>, {0xC0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SeasonReplicatorComponent.OnRep_HostActiveSeason
	// void OnRep_HostActiveSeason();                                                                                           // [0x197cfa0] Final|Native|Protected 
	// Function /Script/FSD.SeasonReplicatorComponent.CompleteSeasonEvent
	// void CompleteSeasonEvent(class USeasonEventData* InEvent);                                                               // [0x19a3720] Net|NetReliableNative|Event|NetMulticast|Public 
};

/// Struct /Script/FSD.ChallengeInfo
/// Size: 0x00A0 (0x000000 - 0x0000A0)
class FChallengeInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UTexture2D*)                         IconOutlined                                                OFFSET(get<T>, {0x20, 8, 0, 0})
	SMember(FLinearColor)                              Color                                                       OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   CurrentWins                                                 OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   NumberOfWins                                                OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	DMember(int32_t)                                   XPCompleteGain                                              OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   TokenGain                                                   OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Stat1Image                                                  OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Stat2Image                                                  OFFSET(get<T>, {0x70, 8, 0, 0})
	DMember(bool)                                      bIsSpecial                                                  OFFSET(get<bool>, {0x98, 1, 0, 0})
};

/// Struct /Script/FSD.SeasonEvent
/// Size: 0x0020 (0x000000 - 0x000020)
class FSeasonEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class USeasonEventData*)                   Event                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.SeasonMissionResult
/// Size: 0x0048 (0x000000 - 0x000048)
class FSeasonMissionResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	DMember(int32_t)                                   XPFromMission                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   XPFromChallenges                                            OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   XPFromRewards                                               OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     XPMultiplier                                                OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   TokenGain                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(bool)                                      LevelIncreased                                              OFFSET(get<bool>, {0x14, 1, 0, 0})
	CMember(TArray<FChallengeInfo>)                    UpdatedChallenges                                           OFFSET(get<T>, {0x18, 16, 0, 0})
	CMember(TArray<FSeasonEvent>)                      CompletedEvents                                             OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(class UTexture2D*)                         EndScreenImage                                              OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UTexture2D*)                         EndScreenResourceIcon                                       OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.SeasonsSubsystem
/// Size: 0x0128 (0x000030 - 0x000158)
class USeasonsSubsystem : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FMulticastInlineDelegate)                  OnXPChanged                                                 OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTokensChanged                                             OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnVanityTreeReset                                           OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnScripChallengeUpdated                                     OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnClaimStatusChanged                                        OFFSET(getStruct<T>, {0x70, 16, 0, 0})
	CMember(TWeakObjectPtr<class USpecialEvent*>)      forcedSeasonEvent                                           OFFSET(get<T>, {0x80, 8, 0, 0})
	SMember(FTimespan)                                 NewChallengeTimeSpan                                        OFFSET(getStruct<T>, {0xA8, 8, 0, 0})
	DMember(int32_t)                                   DesiredSeason                                               OFFSET(get<int32_t>, {0xB8, 4, 0, 0})
	DMember(int32_t)                                   ActiveSeason                                                OFFSET(get<int32_t>, {0xBC, 4, 0, 0})
	SMember(FSeasonMissionResult)                      TempSeasonMissionResult                                     OFFSET(getStruct<T>, {0xC0, 72, 0, 0})
	SMember(FSeasonMissionResult)                      LatestMissionSeasonResult                                   OFFSET(getStruct<T>, {0x108, 72, 0, 0})
	CMember(class UMissionStat*)                       TrackedScripChallenge                                       OFFSET(get<T>, {0x150, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SeasonsSubsystem.TimeToNewChallenge
	// FTimespan TimeToNewChallenge();                                                                                          // [0x19a5410] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.SetSeasonCompletedAnnounced
	// void SetSeasonCompletedAnnounced(bool IsAnnounced);                                                                      // [0x19a5380] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.SeasonsSubsystem.SetActiveSeason
	// void SetActiveSeason(class USeason* Season);                                                                             // [0x19a5220] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.RerollChallenge
	// void RerollChallenge(int32_t Index);                                                                                     // [0x19a4fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.OnStatChanged
	// void OnStatChanged(class UObject* WorldContext, class UMissionStat* Stat, float Value);                                  // [0x19a4ec0] Final|Native|Protected 
	// Function /Script/FSD.SeasonsSubsystem.OnScripChallengeCompleted
	// void OnScripChallengeCompleted(class UObject* WorldContext, class UMissionStat* Stat, float Value);                      // [0x19a4da0] Final|Native|Protected 
	// Function /Script/FSD.SeasonsSubsystem.IsRewardClaimed
	// void IsRewardClaimed(int32_t Level, bool& IsNormalClaimed, bool& IsSpecialClaimed);                                      // [0x19a4c80] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.IsNodeUnlocked
	// bool IsNodeUnlocked(int32_t TreeOfVanityNodeID);                                                                         // [0x19a4be0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.IsNodeBought
	// bool IsNodeBought(int32_t TreeOfVanityNodeID);                                                                           // [0x19a4b40] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.InitializeStatsAndChallenges
	// void InitializeStatsAndChallenges();                                                                                     // [0x19a4b20] Final|Native|Public  
	// Function /Script/FSD.SeasonsSubsystem.HasUnclaimedRewards
	// bool HasUnclaimedRewards(int32_t& Level);                                                                                // [0x19a4a80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.HasClaimedLevelRewards
	// bool HasClaimedLevelRewards(int32_t startLevel, int32_t numberOfLevels);                                                 // [0x19a49b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.HasClaimedAllRewards
	// bool HasClaimedAllRewards();                                                                                             // [0x19a4980] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SeasonsSubsystem.GetUnusedHearts
	// int32_t GetUnusedHearts();                                                                                               // [0x19a4950] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetTreeOfVanityReward
	// class UReward* GetTreeOfVanityReward(class UReward* currentReward);                                                      // [0x19a48b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SeasonsSubsystem.GetStoreSeasonDLC
	// class UGameDLC* GetStoreSeasonDLC(class UObject* WorldContext);                                                          // [0x19a4810] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonXPFromMissionXP
	// int32_t GetSeasonXPFromMissionXP(class AFSDPlayerState* PlayerState);                                                    // [0x19a4770] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonXP
	// int32_t GetSeasonXP();                                                                                                   // [0x19a4740] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonNumber
	// int32_t GetSeasonNumber();                                                                                               // [0x19a4710] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonName
	// FText GetSeasonName();                                                                                                   // [0x19a4670] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonMissionResult
	// FSeasonMissionResult GetSeasonMissionResult();                                                                           // [0x19a4580] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonLevelFromXP
	// void GetSeasonLevelFromXP(int32_t XP, int32_t& Level, float& currentLevelPercent, int32_t& currentLevelXP, int32_t& LevelXPTotal); // [0x19a43a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonLevel
	// void GetSeasonLevel(int32_t& Level, float& currentLevelPercent, int32_t& currentLevelXP, int32_t& LevelXPTotal);         // [0x19a4200] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonExpiryDate
	// bool GetSeasonExpiryDate(FDateTime& ExpiryDate);                                                                         // [0x19a4160] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonCompletedAnnounced
	// bool GetSeasonCompletedAnnounced();                                                                                      // [0x19a4130] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SeasonsSubsystem.GetSeasonBought
	// void GetSeasonBought(bool& isBought);                                                                                    // [0x19a40a0] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetScriptChallengeInfo
	// void GetScriptChallengeInfo(int32_t& Completed, int32_t& claimed, int32_t& Total);                                       // [0x19a3eb0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.GetNumberOfTokens
	// int32_t GetNumberOfTokens(class UObject* WorldContextObject);                                                            // [0x19a3e10] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetNumberOfSeasonLevels
	// int32_t GetNumberOfSeasonLevels();                                                                                       // [0x19a3de0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetNumberOfClaimedPlagueHeartScrips
	// int32_t GetNumberOfClaimedPlagueHeartScrips();                                                                           // [0x19a3db0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetNextReward
	// FSeasonLevel GetNextReward();                                                                                            // [0x19a3d70] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetLevelXP
	// int32_t GetLevelXP(int32_t Level);                                                                                       // [0x19a3cd0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetLevelReward
	// FSeasonLevel GetLevelReward(int32_t Level);                                                                              // [0x19a3c20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetLevelProgress
	// void GetLevelProgress(int32_t Level, float& levelPercent);                                                               // [0x19a3b40] Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.GetCurrentSeason
	// class USeason* GetCurrentSeason();                                                                                       // [0x19a3ab0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SeasonsSubsystem.GetAssetReferences
	// TArray<UDataAsset*> GetAssetReferences(int32_t ChallengeIndex, class USeasonChallenge*& outChallenge);                   // [0x19a3990] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.GetActiveChallenges
	// TArray<FChallengeInfo> GetActiveChallenges(bool canGenerateNewChallenge);                                                // [0x19a38e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.ConvertHeartsToScrip
	// bool ConvertHeartsToScrip(int32_t& scripGained);                                                                         // [0x19a3840] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.CompleteSeasonEvent_Server
	// void CompleteSeasonEvent_Server(class USeasonEventData* InEvent);                                                        // [0x19a37b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.ClaimScripChallenge
	// bool ClaimScripChallenge();                                                                                              // [0x19a36f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.ClaimReward
	// bool ClaimReward(class UObject* WorldContext, class AFSDPlayerController* Player, int32_t Level, bool isNormalReward);   // [0x19a3590] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.CHEAT_SetSeasonMissionResult
	// void CHEAT_SetSeasonMissionResult(int32_t XPFromMission, int32_t numberOfChallenges, class USeasonEventData* Event);     // [0x19a3450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.CHEAT_ResetTimeToNewChallenge
	// void CHEAT_ResetTimeToNewChallenge();                                                                                    // [0x19a3430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.CHEAT_ResetReroll
	// void CHEAT_ResetReroll();                                                                                                // [0x19a3410] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.CHEAT_AddChallenge
	// void CHEAT_AddChallenge();                                                                                               // [0x19a33f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SeasonsSubsystem.CanRerollChallenge
	// bool CanRerollChallenge();                                                                                               // [0x19a3560] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SeasonsSubsystem.BuyTreeNode
	// bool BuyTreeNode(class UObject* WorldContextObject, class AFSDPlayerController* Player, int32_t TreeOfVanityNodeID);     // [0x19a32e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.SeasonEventData
/// Size: 0x0048 (0x000058 - 0x0000A0)
class USeasonEventData : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x58, 24, 0, 0})
	DMember(int32_t)                                   PerformancePoints                                           OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(int32_t)                                   PerformancePointsOnFail                                     OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Icon                                                        OFFSET(get<T>, {0x78, 8, 0, 0})
};

/// Class /Script/FSD.SendInviteBlueprintCallProxy
/// Size: 0x0058 (0x000030 - 0x000088)
class USendInviteBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SendInviteBlueprintCallProxy.SendInvite
	// class USendInviteBlueprintCallProxy* SendInvite(class UObject* WorldContextObject, FString ListName, FString UserId);    // [0x19a5070] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.SendSessionInviteToFriendBlueprintCallProxy
/// Size: 0x0038 (0x000030 - 0x000068)
class USendSessionInviteToFriendBlueprintCallProxy : public UOnlineBlueprintCallProxyBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMulticastInlineDelegate)                  OnSuccess                                                   OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnFailure                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	CMember(class UObject*)                            WorldContextObject                                          OFFSET(get<T>, {0x50, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SendSessionInviteToFriendBlueprintCallProxy.SendSessionInviteToFriend
	// class USendSessionInviteToFriendBlueprintCallProxy* SendSessionInviteToFriend(class UObject* WorldContextObject, FString FriendId); // [0x19af0a0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.SentryAttachment
/// Size: 0x0000 (0x000220 - 0x000220)
class ASentryAttachment : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/FSD.SentryGunAnimInstance
/// Size: 0x0028 (0x0002B8 - 0x0002E0)
class USentryGunAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 736;

public:
	CMember(class ASentryGun*)                         SentryGun                                                   OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(class ARedeployableSentryGun*)             RedeployableSentryGun                                       OFFSET(get<T>, {0x2C0, 8, 0, 0})
	SMember(FRotator)                                  TurretRotation                                              OFFSET(getStruct<T>, {0x2C8, 12, 0, 0})
	DMember(float)                                     YawOffset                                                   OFFSET(get<float>, {0x2D4, 4, 0, 0})
	DMember(float)                                     BuildProgress                                               OFFSET(get<float>, {0x2D8, 4, 0, 0})
};

/// Class /Script/FSD.RecallableSentryGun
/// Size: 0x0018 (0x0003F8 - 0x000410)
class ARecallableSentryGun : public ARecallableActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1040;

public:
	SMember(FMulticastInlineDelegate)                  OnSentryIndexChanged                                        OFFSET(getStruct<T>, {0x3F8, 16, 0, 0})
	DMember(int32_t)                                   SentryIndex                                                 OFFSET(get<int32_t>, {0x408, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.RecallableSentryGun.SentryIndexChanged__DelegateSignature
	// void SentryIndexChanged__DelegateSignature(int32_t Index);                                                               // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RecallableSentryGun.ReceiveOnSentryReady
	// void ReceiveOnSentryReady(class ASentryGun* SentryGun, class APlayerCharacter* PlayerCharacter);                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableSentryGun.OnRep_SentryIndex
	// void OnRep_SentryIndex();                                                                                                // [0x19af080] Final|Native|Protected 
	// Function /Script/FSD.RecallableSentryGun.GetStateDescription
	// void GetStateDescription(FText& Description);                                                                            // [0x1d6f900] Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.RecallableSentryGun.GetSentryGunClass
	// class UClass* GetSentryGunClass();                                                                                       // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const 
	// Function /Script/FSD.RecallableSentryGun.GetSentryGun
	// class ASentryGun* GetSentryGun();                                                                                        // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure 
};

/// Class /Script/FSD.ReloadSentryUsableComponent
/// Size: 0x0070 (0x000120 - 0x000190)
class UReloadSentryUsableComponent : public UUsableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FText)                                     OutOfAmmoText                                               OFFSET(getStruct<T>, {0x120, 24, 0, 0})
	SMember(FText)                                     AmmoFullText                                                OFFSET(getStruct<T>, {0x138, 24, 0, 0})
	CMember(class USoundBase*)                         AudioOutOfAmmo                                              OFFSET(get<T>, {0x150, 8, 0, 0})
	CMember(class USoundBase*)                         AudioReloading                                              OFFSET(get<T>, {0x158, 8, 0, 0})
	CMember(class UAudioComponent*)                    ReloadingAudioComponent                                     OFFSET(get<T>, {0x160, 8, 0, 0})
	DMember(bool)                                      Usable                                                      OFFSET(get<bool>, {0x168, 1, 0, 0})
	DMember(bool)                                      bReloading                                                  OFFSET(get<bool>, {0x169, 1, 0, 0})
	CMember(class UAudioComponent*)                    ReloadAudioComponent                                        OFFSET(get<T>, {0x170, 8, 0, 0})
	DMember(float)                                     AmmoPerSec                                                  OFFSET(get<float>, {0x178, 4, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   OwningPlayerCharacter                                       OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class ASentryGun*)                         SentryGun                                                   OFFSET(get<T>, {0x188, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ReloadSentryUsableComponent.SetOwningPlayerCharacter
	// void SetOwningPlayerCharacter(class APlayerCharacter* Player);                                                           // [0x19af260] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ReloadSentryUsableComponent.SetCanUse
	// void SetCanUse(bool isUsable);                                                                                           // [0x19af1d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ReloadSentryUsableComponent.OnRep_Reloading
	// void OnRep_Reloading();                                                                                                  // [0x19af060] Final|Native|Protected 
	// Function /Script/FSD.ReloadSentryUsableComponent.OnReloadAudioFinished
	// void OnReloadAudioFinished();                                                                                            // [0x19aef00] Final|Native|Protected 
};

/// Class /Script/FSD.SentryGunItem
/// Size: 0x0010 (0x000408 - 0x000418)
class ASentryGunItem : public APlaceableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1048;

public:
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x408, 16, 0, 0})
};

/// Class /Script/FSD.RecallableSentryGunItem
/// Size: 0x00A0 (0x000400 - 0x0004A0)
class ARecallableSentryGunItem : public ARecallableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	SMember(FMulticastInlineDelegate)                  OnActiveItemsChanged                                        OFFSET(getStruct<T>, {0x400, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnSelectedItemChanged                                       OFFSET(getStruct<T>, {0x410, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<ARedeployableSentryGun*>>) SentriesWithActiveIndicators                          OFFSET(get<T>, {0x420, 16, 0, 0})
	DMember(int32_t)                                   MaxSentryCount                                              OFFSET(get<int32_t>, {0x430, 4, 0, 0})
	DMember(float)                                     MinDistanceBetweenSentries                                  OFFSET(get<float>, {0x434, 4, 0, 0})
	SMember(FText)                                     RecallHoldDescription                                       OFFSET(getStruct<T>, {0x438, 24, 0, 0})
	DMember(float)                                     RecallHoldDuration                                          OFFSET(get<float>, {0x450, 4, 0, 0})
	CMember(class UCapacityHoldingItemAggregator*)     AmmoCapacity                                                OFFSET(get<T>, {0x458, 8, 0, 0})
	CMember(class UItemPlacerAggregator*)              ItemPlacer                                                  OFFSET(get<T>, {0x460, 8, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x468, 16, 0, 0})
	CMember(class UClass*)                             LoadoutClass                                                OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UClass*)                             SentryGunObjectClass                                        OFFSET(get<T>, {0x480, 8, 0, 0})
	DMember(float)                                     SupplyStatusWeight                                          OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     SentryAngleRestriction                                      OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(bool)                                      bIsUpgraded                                                 OFFSET(get<bool>, {0x490, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.RecallableSentryGunItem.SetArcIndicatorActive
	// void SetArcIndicatorActive(bool Active);                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableSentryGunItem.ReceiveItemUpgraded
	// void ReceiveItemUpgraded();                                                                                              // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.RecallableSentryGunItem.RecallableSentryGunSignature__DelegateSignature
	// void RecallableSentryGunSignature__DelegateSignature(class ARecallableSentryGun* SentryGun);                             // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RecallableSentryGunItem.RecallableSentryGunItemSignature__DelegateSignature
	// void RecallableSentryGunItemSignature__DelegateSignature(class ARecallableSentryGunItem* Item);                          // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.RecallableSentryGunItem.HasAmmoLeft
	// bool HasAmmoLeft();                                                                                                      // [0x19aecc0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.RecallableSentryGunItem.GetSelectedSentryGun
	// class ARecallableSentryGun* GetSelectedSentryGun();                                                                      // [0x19aeb20] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.RecallableSentryGunItem.GetActiveSentryGuns
	// TArray<ARecallableSentryGun*> GetActiveSentryGuns();                                                                     // [0x19adf40] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.RecallableSentryGunItem.AreAllSentriesPlaced
	// bool AreAllSentriesPlaced();                                                                                             // [0x19a9560] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.SessionHandling
/// Size: 0x0000 (0x000028 - 0x000028)
class USessionHandling : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SessionHandling.StopVoice
	// void StopVoice(class UObject* WorldContextObject);                                                                       // [0x19af730] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.StartVoice
	// void StartVoice(class UObject* WorldContextObject);                                                                      // [0x19af6b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.StartSearchForFriends
	// bool StartSearchForFriends(int32_t localUserNum, class UFSDGameInstance* GameInstance);                                  // [0x19af5e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.StartSearchForBlockedUsers
	// bool StartSearchForBlockedUsers(int32_t localUserNum);                                                                   // [0x19af550] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.StartCheckForInstalledDLC
	// void StartCheckForInstalledDLC(class UObject* WorldContextObject);                                                       // [0x17e9ea0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.SortServerList
	// void SortServerList(class UObject* WorldContextObject, EServerSortOrder order, bool Reverse, bool sortByFriends, TArray<FBlueprintSessionResult>& servers); // [0x19af370] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.ShowStoreUI
	// void ShowStoreUI(class UObject* WorldContextObject);                                                                     // [0x18c9a80] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.ShowInviteUI
	// void ShowInviteUI(class UObject* WorldContextObject);                                                                    // [0x19af2f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.JoinOfficialXboxClub
	// void JoinOfficialXboxClub(class UObject* WorldContextObject);                                                            // [0x17e9ea0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.IsVoiceChatting
	// bool IsVoiceChatting();                                                                                                  // [0x19aeda0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.IsInActiveSession
	// bool IsInActiveSession();                                                                                                // [0x19aed70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.IsDisconnectReasonAKick
	// bool IsDisconnectReasonAKick(EDisconnectReason reason);                                                                  // [0x19aecf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.GetVoiceStatus
	// FString GetVoiceStatus();                                                                                                // [0x19aec40] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.GetSessionJoinError
	// FText GetSessionJoinError(class UObject* WorldContextObject);                                                            // [0x19aeb50] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.GetOnlinePlayerName
	// bool GetOnlinePlayerName(int32_t localUserNum, FString& Name);                                                           // [0x19aea30] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.GetNATType
	// EFSDNATType GetNATType(class UObject* WorldContextObject);                                                               // [0x19ae9a0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.GetMissionStructure
	// EMissionStructure GetMissionStructure(FBlueprintSessionResult& Result);                                                  // [0x19ae700] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.GetLoginStatus
	// FString GetLoginStatus(int32_t localUserNum);                                                                            // [0x19ae610] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.GetHostUsername
	// FString GetHostUsername(class UObject* WorldContextObject);                                                              // [0x19ae540] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.GetHostUniqueId
	// FString GetHostUniqueId(class UObject* WorldContextObject);                                                              // [0x19ae470] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.GetFriendsList
	// bool GetFriendsList(int32_t localUserNum, TArray<FFriendInfo>& Players);                                                 // [0x19ae320] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.GetFriendlyServerNameSanitized
	// FString GetFriendlyServerNameSanitized(class UObject* WorldContextObject);                                               // [0x19ae250] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.GetFriendlyServerName
	// FString GetFriendlyServerName(class UObject* WorldContextObject);                                                        // [0x19ae180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.GetCurrentSessionState
	// bool GetCurrentSessionState(FString& sessionState, FString& ID);                                                         // [0x19ae020] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.FSDUpdateSessionInfo
	// bool FSDUpdateSessionInfo(class UObject* WorldContextObject);                                                            // [0x19adb10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.FSDMissionStatus
	// EFSDMissionStatus FSDMissionStatus(FBlueprintSessionResult& Result);                                                     // [0x19ad910] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDListen
	// void FSDListen(class UObject* WorldContextObject);                                                                       // [0x19ad890] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.FSDIsSessionValid
	// bool FSDIsSessionValid(FBlueprintSessionResult& Result);                                                                 // [0x19ad690] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDIsPrivateServer
	// bool FSDIsPrivateServer(FBlueprintSessionResult& Result);                                                                // [0x19ad490] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDIsPasswordRequired
	// bool FSDIsPasswordRequired(FBlueprintSessionResult& Result);                                                             // [0x19ad290] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDIsModdedServer
	// bool FSDIsModdedServer(FBlueprintSessionResult& Result);                                                                 // [0x19ad090] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDIsModdedSandboxServer
	// bool FSDIsModdedSandboxServer(FBlueprintSessionResult& Result);                                                          // [0x19ace90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDIsFullServer
	// bool FSDIsFullServer(FBlueprintSessionResult& Result);                                                                   // [0x19acc90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDIsEliteDeepDive
	// bool FSDIsEliteDeepDive(FBlueprintSessionResult& Result);                                                                // [0x19aca90] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDIsClassLocked
	// bool FSDIsClassLocked(FBlueprintSessionResult& Result);                                                                  // [0x19ac890] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDHasHiddenModsNotInstalledOnClient
	// bool FSDHasHiddenModsNotInstalledOnClient(FBlueprintSessionResult& Result);                                              // [0x19ac690] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDHasGameStarted
	// bool FSDHasGameStarted(FBlueprintSessionResult& Result);                                                                 // [0x19ac490] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetServerStartTime
	// bool FSDGetServerStartTime(FBlueprintSessionResult& Result, FDateTime& StartTime);                                       // [0x19ac240] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetServerNameSanitized
	// FString FSDGetServerNameSanitized(FBlueprintSessionResult& Result);                                                      // [0x19ac000] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetServerName
	// FString FSDGetServerName(FBlueprintSessionResult& Result);                                                               // [0x19abdc0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetServerID
	// FString FSDGetServerID(FBlueprintSessionResult& Result);                                                                 // [0x19abb80] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetSeason
	// int32_t FSDGetSeason(FBlueprintSessionResult& Result);                                                                   // [0x19ab980] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetRequiredModsToDownload
	// TArray<FString> FSDGetRequiredModsToDownload(FBlueprintSessionResult& Result);                                           // [0x19ab740] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetRegion
	// FString FSDGetRegion(FBlueprintSessionResult& Result);                                                                   // [0x19ab500] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetPlayerClassIDs
	// TArray<UPlayerCharacterID*> FSDGetPlayerClassIDs(FBlueprintSessionResult& Result);                                       // [0x19ab080] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetPlayerClasses
	// TArray<UClass*> FSDGetPlayerClasses(FBlueprintSessionResult& Result);                                                    // [0x19ab2c0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetOptionalModsInstalled
	// TArray<FString> FSDGetOptionalModsInstalled(FBlueprintSessionResult& Result, bool ExcludeVerifiedMods);                  // [0x19aadf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetNumPlayers
	// int32_t FSDGetNumPlayers(FBlueprintSessionResult& Result);                                                               // [0x19aabf0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetModsInstalled
	// TArray<FString> FSDGetModsInstalled(FBlueprintSessionResult& Result, bool ExcludeVerifiedMods);                          // [0x19aa960] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetMissionSeed
	// int32_t FSDGetMissionSeed(FBlueprintSessionResult& Result);                                                              // [0x19aa760] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetMapName
	// FString FSDGetMapName(FBlueprintSessionResult& Result);                                                                  // [0x19aa520] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetHostUserID
	// FString FSDGetHostUserID(FBlueprintSessionResult& Result);                                                               // [0x19aa2e0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetGlobalMissionSeed
	// FGlobalMissionSeed FSDGetGlobalMissionSeed(FBlueprintSessionResult& Result);                                             // [0x19aa0d0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetDistanceFloat
	// float FSDGetDistanceFloat(FBlueprintSessionResult& Result);                                                              // [0x19a9ed0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetDistance
	// EServerDistance FSDGetDistance(FBlueprintSessionResult& Result);                                                         // [0x19a9cd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetDifficultyModifiers
	// TArray<FDifficultyMutatorItem> FSDGetDifficultyModifiers(FBlueprintSessionResult& Result);                               // [0x19a9a60] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetDifficulty
	// class UDifficultySetting* FSDGetDifficulty(FBlueprintSessionResult& Result);                                             // [0x19a9860] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDGetBuildId
	// FString FSDGetBuildId(FBlueprintSessionResult& Result);                                                                  // [0x19a9620] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SessionHandling.FSDCancelFindSessions
	// bool FSDCancelFindSessions(class UObject* WorldContextObject);                                                           // [0x19a9590] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.FindBestQuickJoinServer
	// bool FindBestQuickJoinServer(class UObject* WorldContextObject, TArray<FBlueprintSessionResult>& sessions, class UDifficultySetting* Difficulty, class UBiome* Biome, class UMissionTemplate* MissionTemplate, FBlueprintSessionResult& OutResult); // [0x19adba0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SessionHandling.AllowLinkToExternalFeedback
	// bool AllowLinkToExternalFeedback(class UObject* WorldContextObject);                                                     // [0x18c2220] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SharkEnemy
/// Size: 0x0140 (0x0003B0 - 0x0004F0)
class ASharkEnemy : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	CMember(class UPawnSensingComponent*)              PawnSensing                                                 OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class USphereComponent*)                   CollisionSphere                                             OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class USphereComponent*)                   NearTargetSphere                                            OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           TearingGroundParticles                                      OFFSET(get<T>, {0x3C8, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           AirTrailParticles                                           OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(class UInDangerComponent*)                 Danger                                                      OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UEnemyComponent*)                    EnemyComponent                                              OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x3E8, 8, 0, 0})
	CMember(class UDamageComponent*)                   BumpDamage                                                  OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UFakePhysGrabberComponent*)          RestrictedGrabberComponent                                  OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class USoundCue*)                          ImpactCue                                                   OFFSET(get<T>, {0x408, 8, 0, 0})
	CMember(class USoundCue*)                          JumpSound                                                   OFFSET(get<T>, {0x410, 8, 0, 0})
	DMember(float)                                     DiveForSeconds                                              OFFSET(get<float>, {0x41C, 4, 0, 0})
	DMember(float)                                     LaunchPower                                                 OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     GrabTime                                                    OFFSET(get<float>, {0x448, 4, 0, 0})
	DMember(float)                                     RagdollSpeedFactor                                          OFFSET(get<float>, {0x450, 4, 0, 0})
	DMember(float)                                     UpsideDownTime                                              OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     TiltOutSpeed                                                OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     SafeTimeAfterVounerable                                     OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     RaiseHeight                                                 OFFSET(get<float>, {0x470, 4, 0, 0})
	DMember(float)                                     AttackDuration                                              OFFSET(get<float>, {0x474, 4, 0, 0})
	DMember(float)                                     ChanceToGrab                                                OFFSET(get<float>, {0x478, 4, 0, 0})
	DMember(float)                                     MinTimeBetweenBumps                                         OFFSET(get<float>, {0x47C, 4, 0, 0})
	DMember(float)                                     ChanceForJump                                               OFFSET(get<float>, {0x484, 4, 0, 0})
	DMember(float)                                     MinJumpCooldown                                             OFFSET(get<float>, {0x488, 4, 0, 0})
	DMember(float)                                     MaxJumpCooldown                                             OFFSET(get<float>, {0x48C, 4, 0, 0})
	DMember(float)                                     JumpForce                                                   OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(float)                                     NormalHeight                                                OFFSET(get<float>, {0x494, 4, 0, 0})
	DMember(float)                                     DiveHeight                                                  OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     MinCirclingTime                                             OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     MaxCirclingTime                                             OFFSET(get<float>, {0x4A4, 4, 0, 0})
	CMember(class UFakeMoverSettings*)                 CircleSetttings                                             OFFSET(get<T>, {0x4A8, 8, 0, 0})
	CMember(class UFakeMoverSettings*)                 AttackSettings                                              OFFSET(get<T>, {0x4B0, 8, 0, 0})
	CMember(class UFakeMoverSettings*)                 PostHitSettings                                             OFFSET(get<T>, {0x4B8, 8, 0, 0})
	CMember(class UFakeMoverSettings*)                 JumpSettings                                                OFFSET(get<T>, {0x4C0, 8, 0, 0})
	CMember(class UFakeMoverSettings*)                 VulnerableSettings                                          OFFSET(get<T>, {0x4C8, 8, 0, 0})
	DMember(float)                                     MaxInGroundTime                                             OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     MinInGroundTime                                             OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     StartParticleTime                                           OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     EndParticleTime                                             OFFSET(get<float>, {0x4DC, 4, 0, 0})
	CMember(class UParticleSystem*)                    DiveParticles                                               OFFSET(get<T>, {0x4E0, 8, 0, 0})
	CMember(ESharkEnemyState)                          State                                                       OFFSET(get<T>, {0x4E9, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SharkEnemy.SetVulnerable
	// void SetVulnerable();                                                                                                    // [0x19b4260] Final|Native|Public  
	// Function /Script/FSD.SharkEnemy.ReleasePlayer
	// void ReleasePlayer(class AActor* playerchar, bool fullGrabElapsed);                                                      // [0x19b3ef0] Final|Native|Public  
	// Function /Script/FSD.SharkEnemy.PopRecentlyBumpedPlayer
	// void PopRecentlyBumpedPlayer();                                                                                          // [0x19b3ed0] Final|Native|Protected 
	// Function /Script/FSD.SharkEnemy.OnStateChangedEvent
	// void OnStateChangedEvent(ESharkEnemyState CurrentState);                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.SharkEnemy.OnSeePawn
	// void OnSeePawn(class APawn* APawn);                                                                                      // [0x19b3db0] Final|Native|Protected 
	// Function /Script/FSD.SharkEnemy.OnRep_State
	// void OnRep_State(ESharkEnemyState oldState);                                                                             // [0x19b3ca0] Final|Native|Protected 
	// Function /Script/FSD.SharkEnemy.OnRep_DiveTime
	// void OnRep_DiveTime();                                                                                                   // [0x19b3c80] Final|Native|Protected 
	// Function /Script/FSD.SharkEnemy.OnNearTarget
	// void OnNearTarget(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x19b3a60] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.SharkEnemy.OnLandedEvent
	// void OnLandedEvent();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.SharkEnemy.OnJumpEvent
	// void OnJumpEvent();                                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.SharkEnemy.OnHit
	// void OnHit(float HitDamage, FDamageData& DamageData, bool anyHealthLost);                                                // [0x19b3910] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.SharkEnemy.OnExitState
	// void OnExitState(ESharkEnemyState State);                                                                                // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.SharkEnemy.OnEnterState
	// void OnEnterState(ESharkEnemyState State);                                                                               // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.SharkEnemy.OnDeathDetailed
	// void OnDeathDetailed(class UHealthComponent* aHealthComponent, float damageAmount, FDamageData& DamageData, TArray<UDamageTag*>& dTags); // [0x19b3760] Final|Native|Private|HasOutParms 
	// Function /Script/FSD.SharkEnemy.OnDeath
	// void OnDeath(class UHealthComponentBase* aHealthComponent);                                                              // [0x19b36d0] Final|Native|Private 
	// Function /Script/FSD.SharkEnemy.OnCollided
	// void OnCollided(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x19b34b0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.SharkEnemy.Jumped
	// void Jumped();                                                                                                           // [0x17f8010] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.SharkEnemy.ImpactSound
	// void ImpactSound();                                                                                                      // [0x17f75b0] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.SharkEnemy.DiveShow
	// void DiveShow();                                                                                                         // [0x19b33b0] Final|Native|Protected 
	// Function /Script/FSD.SharkEnemy.DiveHide
	// void DiveHide();                                                                                                         // [0x19b3390] Final|Native|Protected 
	// Function /Script/FSD.SharkEnemy.All_DoRagdollImpact
	// void All_DoRagdollImpact(FVector_NetQuantize Direction);                                                                 // [0x19b30b0] Net|NetReliableNative|Event|NetMulticast|Protected 
	// Function /Script/FSD.SharkEnemy.ActivateDanger
	// void ActivateDanger();                                                                                                   // [0x19b3090] Final|Native|Private 
};

/// Class /Script/FSD.SharkAnimInstance
/// Size: 0x0020 (0x0004A0 - 0x0004C0)
class USharkAnimInstance : public USpiderAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	CMember(ESharkEnemyState)                          SharkState                                                  OFFSET(get<T>, {0x4A0, 1, 0, 0})
	DMember(bool)                                      IsCloseToGround                                             OFFSET(get<bool>, {0x4A1, 1, 0, 0})
	DMember(bool)                                      AttackConnected                                             OFFSET(get<bool>, {0x4A2, 1, 0, 0})
	DMember(bool)                                      IsAttackingAndAttackNotConnected                            OFFSET(get<bool>, {0x4A3, 1, 0, 0})
	DMember(bool)                                      IsNotAttackingOrAttackConnected                             OFFSET(get<bool>, {0x4A4, 1, 0, 0})
	DMember(bool)                                      IsFalling                                                   OFFSET(get<bool>, {0x4A5, 1, 0, 0})
	DMember(bool)                                      IsVulnerable                                                OFFSET(get<bool>, {0x4A6, 1, 0, 0})
	DMember(float)                                     BendValue                                                   OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(bool)                                      IsTurning                                                   OFFSET(get<bool>, {0x4AC, 1, 0, 0})
	DMember(float)                                     TurnSpeed                                                   OFFSET(get<float>, {0x4B0, 4, 0, 0})
	DMember(float)                                     IdleSpeed                                                   OFFSET(get<float>, {0x4B4, 4, 0, 0})
};

/// Class /Script/FSD.ShieldGeneratorItem
/// Size: 0x0078 (0x000470 - 0x0004E8)
class AShieldGeneratorItem : public AThrowableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1256;

public:
	CMember(class UCapacityHoldingItemAggregator*)     ChargeCapacity                                              OFFSET(get<T>, {0x480, 8, 0, 0})
	CMember(class UCapacityHoldingItemAggregator*)     CarryCapacity                                               OFFSET(get<T>, {0x488, 8, 0, 0})
	DMember(float)                                     RechargeDuration                                            OFFSET(get<float>, {0x490, 4, 0, 0})
	DMember(int32_t)                                   UnchargedCount                                              OFFSET(get<int32_t>, {0x494, 4, 0, 0})
	DMember(float)                                     RechargeProgress                                            OFFSET(get<float>, {0x498, 4, 0, 0})
	DMember(float)                                     SupplyStatusWeight                                          OFFSET(get<float>, {0x49C, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutRecarged                                               OFFSET(get<T>, {0x4A0, 8, 0, 0})
	SMember(FCoolDownProgressStyle)                    RechargeProgressUI                                          OFFSET(getStruct<T>, {0x4A8, 64, 0, 0})


	/// Functions
	// Function /Script/FSD.ShieldGeneratorItem.ReceiveGeneratorReturned
	// void ReceiveGeneratorReturned();                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ShieldGeneratorItem.ReceiveGeneratorRechargeProgress
	// void ReceiveGeneratorRechargeProgress(float Progress);                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ShieldGeneratorItem.ReceiveGeneratorRecharged
	// void ReceiveGeneratorRecharged();                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ShieldGeneratorItem.OnRep_UnchargedCount
	// void OnRep_UnchargedCount(int32_t OldCount);                                                                             // [0x19b3d20] Final|Native|Protected 
	// Function /Script/FSD.ShieldGeneratorItem.GetIsRecharging
	// bool GetIsRecharging();                                                                                                  // [0x19b3440] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ShieldGeneratorItem.GeneratorReturned
	// void GeneratorReturned();                                                                                                // [0x19b33d0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.ThrowableActor
/// Size: 0x0038 (0x000220 - 0x000258)
class AThrowableActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 600;

public:
	CMember(class UProjectileMovementComponent*)       Movement                                                    OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(bool)                                      IsMoving                                                    OFFSET(get<bool>, {0x228, 1, 0, 0})
	SMember(FGameplayTagContainer)                     AttachToTags                                                OFFSET(getStruct<T>, {0x230, 32, 0, 0})
	DMember(bool)                                      IgnoreFellOutOfWorld                                        OFFSET(get<bool>, {0x250, 1, 0, 0})
	DMember(bool)                                      IgnoreOwnersCollision                                       OFFSET(get<bool>, {0x251, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ThrowableActor.ReceiveIgnoreCharacter
	// void ReceiveIgnoreCharacter(class APlayerCharacter* Character);                                                          // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ThrowableActor.ReceiveHitObject
	// void ReceiveHitObject();                                                                                                 // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ThrowableActor.OnRep_IsMoving
	// void OnRep_IsMoving();                                                                                                   // [0x19d7810] Final|Native|Protected 
};

/// Class /Script/FSD.ShieldGeneratorActor
/// Size: 0x0010 (0x000258 - 0x000268)
class AShieldGeneratorActor : public AThrowableActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	DMember(float)                                     GeneratorRadius                                             OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     DeployDelay                                                 OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(bool)                                      bPushStatusEffectOnExit                                     OFFSET(get<bool>, {0x260, 1, 0, 0})
	DMember(float)                                     GeneratorLifetime                                           OFFSET(get<float>, {0x264, 4, 0, 0})
};

/// Class /Script/FSD.StationaryEnemyAnimInstance
/// Size: 0x0020 (0x000350 - 0x000370)
class UStationaryEnemyAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x350, 8, 0, 0})
	DMember(float)                                     Yaw                                                         OFFSET(get<float>, {0x358, 4, 0, 0})
	DMember(float)                                     MappedYaw                                                   OFFSET(get<float>, {0x35C, 4, 0, 0})
	DMember(float)                                     Pitch                                                       OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     YawSpeed                                                    OFFSET(get<float>, {0x364, 4, 0, 0})
	DMember(float)                                     PitchSpeed                                                  OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(bool)                                      LookingLeft                                                 OFFSET(get<bool>, {0x36C, 1, 0, 0})
	DMember(bool)                                      LookingRight                                                OFFSET(get<bool>, {0x36D, 1, 0, 0})
	DMember(bool)                                      IsVisible                                                   OFFSET(get<bool>, {0x36E, 1, 0, 0})
	DMember(bool)                                      InvertPitch                                                 OFFSET(get<bool>, {0x36F, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.StationaryEnemyAnimInstance.SetIsVisible
	// void SetIsVisible(bool InIsVisible);                                                                                     // [0x19b40b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ShootingPlantAnimInstance
/// Size: 0x0000 (0x000370 - 0x000370)
class UShootingPlantAnimInstance : public UStationaryEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
};

/// Class /Script/FSD.ShowroomItem
/// Size: 0x0028 (0x000220 - 0x000248)
class AShowroomItem : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 584;

public:
	CMember(TSoftObjectPtr<class UClass*>)             ShowroomStage                                               OFFSET(get<T>, {0x220, 40, 0, 0})
};

/// Class /Script/FSD.EnemyShowroomItem
/// Size: 0x0008 (0x000248 - 0x000250)
class AEnemyShowroomItem : public AShowroomItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(EShowroomScaling)                          Scaling                                                     OFFSET(get<T>, {0x248, 1, 0, 0})
};

/// Class /Script/FSD.ShowroomController
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UShowroomController : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class AShowroomStage*)                     Stage                                                       OFFSET(get<T>, {0xB0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ShowroomController.SetLightChannels
	// void SetLightChannels(class AActor* Actor);                                                                              // [0x19b4140] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ShowroomController.RotateShowroom
	// void RotateShowroom(float Pitch, float Yaw);                                                                             // [0x19b3fe0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ShowroomController.ResetShowroomRotation
	// void ResetShowroomRotation();                                                                                            // [0x19b3fc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ShowroomController.GetShowroomRotation
	// FRotator GetShowroomRotation();                                                                                          // [0x19b3470] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.EnemyShowroomController
/// Size: 0x0008 (0x0000B8 - 0x0000C0)
class UEnemyShowroomController : public UShowroomController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class AEnemyShowroomItem*)                 EnemyInstance                                               OFFSET(get<T>, {0xB8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.EnemyShowroomController.Receive_PlayAttack
	// void Receive_PlayAttack(class UAnimSequenceBase* attackAnimation);                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.EnemyShowroomController.PlayAttack
	// void PlayAttack(class UAnimSequenceBase* Animation);                                                                     // [0x19b3e40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.EnemyShowroomController.DisplayEnemy
	// class UEnemyShowroomController* DisplayEnemy(class UObject* WorldContextObject, TSoftObjectPtr<UClass*> EnemyPreviewActor); // [0x19b3250] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.ShowroomCameraKey
/// Size: 0x0000 (0x000030 - 0x000030)
class UShowroomCameraKey : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.ShowroomSceneCaptureComponent
/// Size: 0x0008 (0x0008B8 - 0x0008C0)
class UShowroomSceneCaptureComponent : public USceneCaptureComponent2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2240;

public:
	CMember(class UShowroomCameraKey*)                 CameraKey                                                   OFFSET(get<T>, {0x8B8, 8, 0, 0})
};

/// Class /Script/FSD.CharacterShowroomController
/// Size: 0x0008 (0x0000B8 - 0x0000C0)
class UCharacterShowroomController : public UShowroomController
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class APlayerCharacter*)                   CharacterInstance                                           OFFSET(get<T>, {0xB8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.CharacterShowroomController.Receive_CharacterShown
	// void Receive_CharacterShown();                                                                                           // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.CharacterShowroomController.EquipWeapon
	// void EquipWeapon(EItemCategory Category);                                                                                // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.CharacterShowroomController.DisplayCharacter
	// class UCharacterShowroomController* DisplayCharacter(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, class UShowroomCameraKey* Key); // [0x19b3150] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.ShowroomManager
/// Size: 0x0028 (0x0000B0 - 0x0000D8)
class UShowroomManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 216;

public:
	SMember(FVector)                                   ShowroomLocation                                            OFFSET(getStruct<T>, {0xB0, 12, 0, 0})
	CMember(class UClass*)                             CurrentStage                                                OFFSET(get<T>, {0xC0, 8, 0, 0})
	CMember(class AShowroomStage*)                     StageInstance                                               OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(class UTextureRenderTarget2D*)             RenderTarget                                                OFFSET(get<T>, {0xD0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ShowroomManager.GetController
	// class UShowroomController* GetController();                                                                              // [0x19b3410] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ShowroomManager.ClearShowroom
	// void ClearShowroom();                                                                                                    // [0x19b3130] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.ShowroomSettings
/// Size: 0x0078 (0x000030 - 0x0000A8)
class UShowroomSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	CMember(TSoftObjectPtr<class UClass*>)             EnemyShowroomController                                     OFFSET(get<T>, {0x30, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             CharacterShowroomController                                 OFFSET(get<T>, {0x58, 40, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             CharacterStage                                              OFFSET(get<T>, {0x80, 40, 0, 0})
};

/// Class /Script/FSD.ShowroomStage
/// Size: 0x0048 (0x000220 - 0x000268)
class AShowroomStage : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
	CMember(class USceneCaptureComponent2D*)           SceneCapure                                                 OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USceneCaptureComponent2D*)           ActiveCaptureComponent                                      OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UClass*)                             ControllerClass                                             OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UShowroomController*)                ControllerInstance                                          OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class USceneCaptureComponent2D*)           SceneCapture                                                OFFSET(get<T>, {0x240, 8, 0, 0})
	DMember(float)                                     MinPitch                                                    OFFSET(get<float>, {0x248, 4, 0, 0})
	DMember(float)                                     MaxPitch                                                    OFFSET(get<float>, {0x24C, 4, 0, 0})
	CMember(class USceneComponent*)                    CameraFocusPoint                                            OFFSET(get<T>, {0x250, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ShowroomStage.ReceiveInitialize
	// void ReceiveInitialize(class UTextureRenderTarget2D* RenderTarget);                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ShowroomStage.GetActiveCaptureComponent
	// class USceneCaptureComponent2D* GetActiveCaptureComponent();                                                             // [0x19b33f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ShowroomStage.CreateRenderTarget
	// class UTextureRenderTarget2D* CreateRenderTarget();                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.Shredder
/// Size: 0x0018 (0x0003B0 - 0x0003C8)
class AShredder : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 968;

public:
	DMember(float)                                     FoldoutRange                                                OFFSET(get<float>, {0x3B0, 4, 0, 0})
	DMember(float)                                     SpinRange                                                   OFFSET(get<float>, {0x3B4, 4, 0, 0})
	CMember(class AActor*)                             CurrentTarget                                               OFFSET(get<T>, {0x3C0, 8, 0, 0})
};

/// Class /Script/FSD.ShredderAnimInstance
/// Size: 0x0010 (0x000350 - 0x000360)
class UShredderAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(bool)                                      InFoldoutRange                                              OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(bool)                                      InSpinRange                                                 OFFSET(get<bool>, {0x351, 1, 0, 0})
};

/// Class /Script/FSD.SideburnsVanityItem
/// Size: 0x00A8 (0x000130 - 0x0001D8)
class USideburnsVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 472;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             AnimInstance                                                OFFSET(get<T>, {0x158, 40, 0, 0})
	DMember(bool)                                      RequiresSlimArmor                                           OFFSET(get<bool>, {0x180, 1, 0, 0})
	CMember(TSet<UTagVanitySideburns*>)                VanityTags                                                  OFFSET(get<T>, {0x188, 80, 0, 0})
};

/// Class /Script/FSD.SimpleHealthComponent
/// Size: 0x0090 (0x000160 - 0x0001F0)
class USimpleHealthComponent : public UHealthComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 496;

public:
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(bool)                                      InvulnerableToNonDefinedResistances                         OFFSET(get<bool>, {0x168, 1, 0, 0})
	DMember(float)                                     EnvironmentalDamageResistance                               OFFSET(get<float>, {0x16C, 4, 0, 0})
	DMember(bool)                                      bShowHealthBar                                              OFFSET(get<bool>, {0x170, 1, 0, 0})
	SMember(FVector)                                   HealthBarOffsetWorld                                        OFFSET(getStruct<T>, {0x174, 12, 0, 0})
	CMember(TWeakObjectPtr<class UEnemyComponent*>)    EnemyComponent                                              OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(TMap<class UPawnStat*, float>)             Resistances                                                 OFFSET(get<T>, {0x188, 80, 0, 0})
	CMember(TArray<class UDamageTag*>)                 RequiredDamageTags                                          OFFSET(get<T>, {0x1D8, 16, 0, 0})
	DMember(bool)                                      AutomaticFlushNetDormancy                                   OFFSET(get<bool>, {0x1E8, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SimpleHealthComponent.OnRep_Damage
	// void OnRep_Damage(float oldDamage);                                                                                      // [0x19b8f10] Final|Native|Protected 
	// Function /Script/FSD.SimpleHealthComponent.HealFromDeath
	// float HealFromDeath(float amount);                                                                                       // [0x19b8e20] Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.MaggotAnimationSharingStateProcessor
/// Size: 0x0000 (0x000050 - 0x000050)
class UMaggotAnimationSharingStateProcessor : public UAnimationSharingStateProcessor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/FSD.PipelineAnimationSharingProcessor
/// Size: 0x0000 (0x000050 - 0x000050)
class UPipelineAnimationSharingProcessor : public UAnimationSharingStateProcessor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
};

/// Class /Script/FSD.SkinColorVanityItem
/// Size: 0x0028 (0x000130 - 0x000158)
class USkinColorVanityItem : public UVanityItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	CMember(TWeakObjectPtr<class UMaterialInterface*>) Material                                                    OFFSET(get<T>, {0x130, 8, 0, 0})
};

/// Class /Script/FSD.SkinEffect
/// Size: 0x0000 (0x000028 - 0x000028)
class USkinEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SkinEffect.Receive_AddToItem
	// void Receive_AddToItem(class UMeshComponent* Mesh, class AActor* Skinnable, bool IsFirstPerson);                         // [0x19b9810] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.SkinEffect.GetSkinType
	// EItemSkinType GetSkinType();                                                                                             // [0x19b81f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.MaterialSkinEffect
/// Size: 0x0010 (0x000028 - 0x000038)
class UMaterialSkinEffect : public USkinEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<TWeakObjectPtr<UMaterialInterface*>>) Materials                                                 OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FSD.AttachMesh
/// Size: 0x0050 (0x000000 - 0x000050)
class FAttachMesh : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(bool)                                      ApplyPhysics                                                OFFSET(get<bool>, {0x0, 1, 0, 0})
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             AnimBlueprint                                               OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x40, 12, 0, 0})
};

/// Class /Script/FSD.SkeletalMeshSkinEffect
/// Size: 0x0038 (0x000028 - 0x000060)
class USkeletalMeshSkinEffect : public USkinEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TWeakObjectPtr<class USkeletalMesh*>)      Mesh                                                        OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<FAttachMesh>)                       AttachMeshes                                                OFFSET(get<T>, {0x50, 16, 0, 0})
};

/// Class /Script/FSD.SkeletalMeshSkinEffectSpawnable
/// Size: 0x0000 (0x000ED0 - 0x000ED0)
class USkeletalMeshSkinEffectSpawnable : public USkeletalMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3792;

public:
};

/// Class /Script/FSD.FPSkeletalMeshSkinEffectSpawnable
/// Size: 0x0000 (0x000ED0 - 0x000ED0)
class UFPSkeletalMeshSkinEffectSpawnable : public UFirstPersonSkeletalMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 3792;

public:
};

/// Class /Script/FSD.Skinnable
/// Size: 0x0000 (0x000028 - 0x000028)
class USkinnable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.SkinnableComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class USkinnableComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UItemSkin*)                          EquippedSkinColor                                           OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UItemSkin*)                          EquippedSkinMesh                                            OFFSET(get<T>, {0xB8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SkinnableComponent.UpdateSkin
	// void UpdateSkin(class AFSDPlayerState* Player);                                                                          // [0x19ba9c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SkinnableComponent.OnLoadoutChanged
	// void OnLoadoutChanged();                                                                                                 // [0x19b8ef0] Final|Native|Protected 
	// Function /Script/FSD.SkinnableComponent.GetSkinsForItem
	// TArray<UItemSkin*> GetSkinsForItem(class UItemID* ItemID, EItemSkinType skinType);                                       // [0x19b8220] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SkinnableComponent.GetEquippedSkinMesh
	// class UItemSkin* GetEquippedSkinMesh(class UItemID* ItemID, class AFSDPlayerState* Player);                              // [0x19b7da0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SkinnableComponent.GetEquippedSkinColor
	// class UItemSkin* GetEquippedSkinColor(class UItemID* ItemID, class AFSDPlayerState* Player);                             // [0x19b7cd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SkinnableComponent.GetEquippedSkin
	// class UItemSkin* GetEquippedSkin(class UItemID* ItemID, EItemSkinType skinType, class AFSDPlayerState* Player);          // [0x19b7bd0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SkinnableComponent.GetEquippableColorSkins
	// TArray<UItemSkin*> GetEquippableColorSkins(class UItemID* ItemID, class AFSDPlayerState* Player);                        // [0x19b7ac0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SkinnableComponent.GetDefaultItemSkin
	// class UItemSkin* GetDefaultItemSkin(class UItemID* ItemID, EItemSkinType itemSkinType);                                  // [0x19b79f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SkinnableComponent.GetBaseColorSkinForMeshSkin
	// class UItemSkin* GetBaseColorSkinForMeshSkin(class UItemID* ItemID, class UItemSkin* meshSkin);                          // [0x19b7920] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SkinnableComponent.EquipSkin
	// void EquipSkin(class UItemSkin* Skin, class UItemID* ItemID, class AFSDPlayerState* Player);                             // [0x19b77f0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.DroneSkinnableComponent
/// Size: 0x0000 (0x0000C0 - 0x0000C0)
class UDroneSkinnableComponent : public USkinnableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
};

/// Class /Script/FSD.PlagueSoaperItem
/// Size: 0x0028 (0x000470 - 0x000498)
class APlagueSoaperItem : public APlagueCleanupItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1176;

public:
	CMember(class UProjectileLauncherComponent*)       projectileLauncher                                          OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x480, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnAmmoChanged                                               OFFSET(getStruct<T>, {0x488, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.PlagueSoaperItem.OnWeaponFired
	// void OnWeaponFired(FVector& Location);                                                                                   // [0x19b8fb0] Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.SocketAttacherComponent
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class USocketAttacherComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(int32_t)                                   MaxSocketAttachments                                        OFFSET(get<int32_t>, {0xB0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SocketAttacherComponent.DetachFromSocket
	// void DetachFromSocket();                                                                                                 // [0x19b77d0] Final|Native|Private|BlueprintCallable 
	// Function /Script/FSD.SocketAttacherComponent.AttachToSocket
	// bool AttachToSocket(class AActor* aTarget, FName SocketName, bool ShouldAttach);                                         // [0x19b76c0] Final|Native|Private|BlueprintCallable 
};

/// Class /Script/FSD.SoftReferenceProvider
/// Size: 0x0000 (0x000028 - 0x000028)
class USoftReferenceProvider : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.SoundClassManager
/// Size: 0x0010 (0x000030 - 0x000040)
class USoundClassManager : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Struct /Script/FSD.SoundMixManagerItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FSoundMixManagerItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USoundMix*)                          mix                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Class /Script/FSD.SoundMixManagerComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class USoundMixManagerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(TArray<FSoundMixManagerItem>)              SoundMixes                                                  OFFSET(get<T>, {0xB0, 16, 0, 0})
};

/// Class /Script/FSD.SpaceBall
/// Size: 0x0000 (0x000268 - 0x000268)
class ASpaceBall : public ACarriableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 616;

public:
};

/// Class /Script/FSD.PatrolBotDecorative
/// Size: 0x0000 (0x000238 - 0x000238)
class APatrolBotDecorative : public AFSDPhysicsActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
};

/// Struct /Script/FSD.DrinkableBarSlot
/// Size: 0x0014 (0x000000 - 0x000014)
class FDrinkableBarSlot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FVector)                                   WorldLocation                                               OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(TWeakObjectPtr<class ADrinkableActor*>)    DrinkableActor                                              OFFSET(get<T>, {0xC, 8, 0, 0})
};

/// Struct /Script/FSD.HolidayMeshItems
/// Size: 0x0010 (0x000000 - 0x000010)
class FHolidayMeshItems : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class USkeletalMeshComponent*>)     HolidayMeshComponents                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.SpaceRigBar
/// Size: 0x00A0 (0x000220 - 0x0002C0)
class ASpaceRigBar : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	SMember(FMulticastInlineDelegate)                  OnNewDrinkableSpecial                                       OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	CMember(class UInstantUsable*)                     BarUsable                                                   OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UBoxComponent*)                      BarUsableCollider                                           OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UClass*)                             BarMenuWidget                                               OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(TArray<FVector>)                           DrinkServingLocations                                       OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(TArray<FDrinkableBarSlot>)                 DrinkableBarSlots                                           OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(class UDrinkableDataAsset*)                DrinkableSpecial                                            OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(TMap<EHolidayType, FHolidayMeshItems>)     HolidayComponentMap                                         OFFSET(get<T>, {0x270, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.SpaceRigBar.SpawnDrinkables
	// void SpawnDrinkables(class UDrinkableDataAsset* Drinkable, class APlayerCharacter* User);                                // [0x19b99c0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.SpaceRigBar.SetVisibilityOfHolidayMeshes
	// void SetVisibilityOfHolidayMeshes();                                                                                     // [0x19b99a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.SpaceRigBar.ReceiveFinishedSpawningDrinkables
	// void ReceiveFinishedSpawningDrinkables(class UDrinkableDataAsset* DrinkableData, class APlayerCharacter* Customer);      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SpaceRigBar.ReceiveDrinkableSpawned
	// void ReceiveDrinkableSpawned(class ADrinkableActor* Drinkable, class APlayerCharacter* Customer, int32_t LocationIndex); // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SpaceRigBar.ReceiveBeginSpawningDrinkables
	// void ReceiveBeginSpawningDrinkables(class UDrinkableDataAsset* DrinkableData, class APlayerCharacter* Customer);         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SpaceRigBar.PlayBartenderTip
	// void PlayBartenderTip(class APlayerCharacter* User);                                                                     // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.SpaceRigBar.PayTip
	// void PayTip(class APlayerCharacter* Character, int32_t Credits);                                                         // [0x19b9040] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.SpaceRigBar.OnRep_DrinkableSpecial
	// void OnRep_DrinkableSpecial();                                                                                           // [0x19b8f90] Final|Native|Protected 
	// Function /Script/FSD.SpaceRigBar.HasUnclaimedDrinkables
	// bool HasUnclaimedDrinkables();                                                                                           // [0x19b8df0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SpaceRigBar.HasSpaceForMoreDrinkables
	// bool HasSpaceForMoreDrinkables();                                                                                        // [0x19b8dc0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SpaceRigBar.GetAvailableDrinkableSlots
	// int32_t GetAvailableDrinkableSlots();                                                                                    // [0x19b78f0] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SpaceRigBar.DrinkableSignature__DelegateSignature
	// void DrinkableSignature__DelegateSignature(class UDrinkableDataAsset* Drinkable);                                        // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.SpaceRigBarMenuItem
/// Size: 0x0010 (0x000280 - 0x000290)
class USpaceRigBarMenuItem : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	CMember(class UDrinkableDataAsset*)                Drink                                                       OFFSET(get<T>, {0x280, 8, 0, 0})
	DMember(bool)                                      SpecialEditionSelected                                      OFFSET(get<bool>, {0x288, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SpaceRigBarMenuItem.Unselect
	// void Unselect();                                                                                                         // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.SpaceRigBarMenuItem.Select
	// void Select();                                                                                                           // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.SpaceRigBarMenuItem.GetSelectedDrinkableType
	// class UDrinkableDataAsset* GetSelectedDrinkableType();                                                                   // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure 
};

/// Class /Script/FSD.SpawnActorWithDebrisPosComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class USpawnActorWithDebrisPosComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(float)                                     MinDistanceBetweenSpwans                                    OFFSET(get<float>, {0xB0, 4, 0, 0})
	DMember(bool)                                      AddTerrainPlacementBlockers                                 OFFSET(get<bool>, {0xB4, 1, 0, 0})
	DMember(bool)                                      AvoidImportantLocations                                     OFFSET(get<bool>, {0xB5, 1, 0, 0})
	DMember(float)                                     MinDistanceToImportantLocations                             OFFSET(get<float>, {0xB8, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SpawnActorWithDebrisPosComponent.PlaceActorsWithCallback
	// bool PlaceActorsWithCallback(int32_t NumToSpawn, int32_t NumToSpawnMin, int32_t NumAllowedChecks, class UClass* SpawnedActorClass, class AProceduralSetup* Setup, float Radius, class UDebrisPositioning* DebrisPositioning, TArray<FVector>& locationsToAvoid, class UCurveFloat* AvoidCostCurve, FDelegateProperty OnSpawned, FVector CustomLocation); // [0x19b9490] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpawnActorWithDebrisPosComponent.PlaceActors
	// bool PlaceActors(int32_t NumToSpawn, int32_t NumToSpawnMin, int32_t NumAllowedChecks, class UClass* SpawnedActorClass, class AProceduralSetup* Setup, float Radius, class UDebrisPositioning* DebrisPositioning, TArray<FVector>& locationsToAvoid, class UCurveFloat* AvoidCostCurve, TArray<AActor*>& OutSpawnedActors, FVector CustomLocation); // [0x19b9110] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpawnActorWithDebrisPosComponent.GetLocations
	// bool GetLocations(int32_t NumToSpawn, int32_t NumToSpawnMin, int32_t NumAllowedChecks, class UClass* SpawnedActorClass, class AProceduralSetup* Setup, float Radius, class UDebrisPositioning* DebrisPositioning, TArray<FVector>& locationsToAvoid, class UCurveFloat* AvoidCostCurve, TArray<FTransform>& OutLocations, FVector CustomLocation); // [0x19b7e70] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpawnActorWithDebrisPosComponent.AddTerrainPlacement
	// void AddTerrainPlacement(class AActor* Actor, class AProceduralSetup* Setup);                                            // [0x19b75f0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.SpawningBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USpawningBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SpawningBlueprintLibrary.SpawnEnemyGroupDescriptorWithCallbackSpreadOut
	// void SpawnEnemyGroupDescriptorWithCallbackSpreadOut(class UObject* WorldContextObject, class UEnemyGroupDescriptor* descriptor, float Difficulty, TArray<FVector> Locations, bool Alert, DeepPathFinderSize pfSize, FDelegateProperty& Callback); // [0x19ba720] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SpawningBlueprintLibrary.SpawnEnemyGroupDescriptorSpreadOut
	// void SpawnEnemyGroupDescriptorSpreadOut(class UObject* WorldContextObject, class UEnemyGroupDescriptor* descriptor, float Difficulty, TArray<FVector>& Locations, bool Alert, DeepPathFinderSize pfSize); // [0x19ba520] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SpawningBlueprintLibrary.SpawnEnemyGroupDescriptor
	// void SpawnEnemyGroupDescriptor(class UObject* WorldContextObject, class UEnemyGroupDescriptor* descriptor, float Difficulty, FVector Location, bool Alert, DeepPathFinderSize pfSize); // [0x19ba340] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpawningBlueprintLibrary.SpawnEnemiesFromPool
	// void SpawnEnemiesFromPool(class UObject* WorldContextObject, float Difficulty, TArray<FVector>& Locations, TArray<UEnemyDescriptor*> BannedEnemies, bool Alert, bool isConstantPreassure); // [0x19ba0e0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SpawningBlueprintLibrary.SpawnEnemiesAtLocationWithCallback
	// void SpawnEnemiesAtLocationWithCallback(class UObject* WorldContextObject, class UEnemyDescriptor* EnemyDescriptor, int32_t Count, FVector Location, FDelegateProperty& Callback, bool Alert, bool scaleToDifficulty, DeepPathFinderSize pfSize); // [0x19b9e50] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpawningBlueprintLibrary.SpawnEnemiesAtLocation
	// void SpawnEnemiesAtLocation(class UObject* WorldContextObject, class UEnemyDescriptor* EnemyDescriptor, int32_t Count, FVector Location, bool Alert, bool scaleToDifficulty, DeepPathFinderSize pfSize); // [0x19b9c20] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpawningBlueprintLibrary.SpawnEnemiesAtEachLocation
	// void SpawnEnemiesAtEachLocation(class UObject* WorldContextObject, class UEnemyDescriptor* EnemyDescriptor, TArray<FVector> Locations, DeepPathFinderSize pfSize); // [0x19b9a90] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SpawningBlueprintLibrary.GetSpawnPointsInRange
	// TArray<FVector> GetSpawnPointsInRange(class UObject* WorldContextObject, float distanceToPlayers, int32_t spawnPointCount, DeepPathFinderSize pfSize); // [0x19b8c10] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpawningBlueprintLibrary.GetSpawnPointsInCircle
	// TArray<FVector> GetSpawnPointsInCircle(class UObject* WorldContextObject, FVector Location, float Radius, int32_t Count, bool scaleToDificulty, float maxSpawnAngle, DeepPathFinderSize pfSize); // [0x19b89a0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpawningBlueprintLibrary.GetSpawnPointsFromLocation
	// TArray<FVector> GetSpawnPointsFromLocation(class UObject* WorldContextObject, FVector Location, float Distance, int32_t spawnPointCount, DeepPathFinderSize pfSize); // [0x19b87c0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpawningBlueprintLibrary.GetSpawnPointsAroundLocation
	// TArray<FVector> GetSpawnPointsAroundLocation(class UObject* WorldContextObject, FVector Location, float Distance, int32_t spawnPointCount, DeepPathFinderSize pfSize); // [0x19b85e0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpawningBlueprintLibrary.GetSpawnPointInRange
	// FVector GetSpawnPointInRange(class UObject* WorldContextObject, float distanceToPlayers, DeepPathFinderSize pfSize);     // [0x19b84c0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpawningBlueprintLibrary.GetSpawnPointFromLocation
	// FVector GetSpawnPointFromLocation(class UObject* WorldContextObject, FVector Location, float Distance, DeepPathFinderSize pfSize); // [0x19b8330] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.SpawnSettings
/// Size: 0x0028 (0x000030 - 0x000058)
class USpawnSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(TArray<TWeakObjectPtr<UNiagaraSystem*>>)   SpawnEffects                                                OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<TWeakObjectPtr<USoundCue*>>)        SpawnSounds                                                 OFFSET(get<T>, {0x40, 16, 0, 0})
	SMember(FRandRange)                                SpawnDuration                                               OFFSET(getStruct<T>, {0x50, 8, 0, 0})
};

/// Class /Script/FSD.SpecialEvent
/// Size: 0x0040 (0x000030 - 0x000070)
class USpecialEvent : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(TArray<class UMissionTemplate*>)           BannedMissions                                              OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(TArray<class UMutator*>)                   BannedMutators                                              OFFSET(get<T>, {0x48, 16, 0, 0})
	CMember(class USpecialEventSpawner*)               EventSpawner                                                OFFSET(get<T>, {0x58, 8, 0, 0})
	CMember(TArray<class USeason*>)                    PartOfSeasons                                               OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Class /Script/FSD.SpecialDamageAttackComponent
/// Size: 0x0008 (0x000120 - 0x000128)
class USpecialDamageAttackComponent : public USpecialAttackComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 296;

public:
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x120, 8, 0, 0})
};

/// Class /Script/FSD.SpecialEventBlueprintLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class USpecialEventBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.SpecialEventBlueprintLibrary.TryGivePendingReward
	// class USchematic* TryGivePendingReward(class UObject* WorldContextObject);                                               // [0x19be8c0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SpecialEventBlueprintLibrary.StorePendingReward
	// void StorePendingReward(class UObject* WorldContextObject, TArray<USchematic*>& schematicsToChooseFrom);                 // [0x19be750] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.SpecialEventBlueprintLibrary.SpawnEventRewardFrame
	// void SpawnEventRewardFrame(class UObject* WorldContextObject, FVector Location);                                         // [0x19be680] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SpecialEventBlueprintLibrary.HasPendingReward
	// bool HasPendingReward(class UObject* WorldContextObject);                                                                // [0x19bda20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.SpecialEventBlueprintLibrary.GetSpecialEventsRewardSchematics
	// TArray<USchematic*> GetSpecialEventsRewardSchematics(class UObject* WorldContextObject);                                 // [0x19bd8f0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SpecialEventBlueprintLibrary.FindRandomSchematicForCharacter
	// class USchematic* FindRandomSchematicForCharacter(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, ESchematicType SchematicType); // [0x19bd7d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.SpecialEventBlueprintLibrary.ClearPendingReward
	// void ClearPendingReward(class UObject* WorldContextObject);                                                              // [0x19bd700] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.SpecialEventSettings
/// Size: 0x0170 (0x000030 - 0x0001A0)
class USpecialEventSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 416;

public:
	CMember(TArray<class USpecialEvent*>)              MachineEvents                                               OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FRuntimeFloatCurve)                        ME_SpawnChanceMissionLengthCurve                            OFFSET(getStruct<T>, {0x40, 136, 0, 0})
	CMember(TArray<class USpecialEvent*>)              OtherSpecialEvents                                          OFFSET(get<T>, {0xC8, 16, 0, 0})
	SMember(FRuntimeFloatCurve)                        Other_SpawnChanceMissionLengthCurve                         OFFSET(getStruct<T>, {0xD8, 136, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EventRewardFrameClass                                       OFFSET(get<T>, {0x160, 40, 0, 0})
	CMember(class UDebrisPositioning*)                 EventRewardFramePositioning                                 OFFSET(get<T>, {0x188, 8, 0, 0})
	DMember(float)                                     EventRewardRadius                                           OFFSET(get<float>, {0x190, 4, 0, 0})
	DMember(float)                                     CreditsReward                                               OFFSET(get<float>, {0x194, 4, 0, 0})
	DMember(float)                                     XPReward                                                    OFFSET(get<float>, {0x198, 4, 0, 0})
};

/// Class /Script/FSD.SpecialEventSpawner
/// Size: 0x0000 (0x000028 - 0x000028)
class USpecialEventSpawner : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.SimpleSpecialEventSpawner
/// Size: 0x0038 (0x000028 - 0x000060)
class USimpleSpecialEventSpawner : public USpecialEventSpawner
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EventActor                                                  OFFSET(get<T>, {0x30, 40, 0, 0})
	DMember(float)                                     EventAvoidanceRadius                                        OFFSET(get<float>, {0x58, 4, 0, 0})
};

/// Class /Script/FSD.EncounterSpecialEventSpawner
/// Size: 0x0010 (0x000028 - 0x000038)
class UEncounterSpecialEventSpawner : public USpecialEventSpawner
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FEncounterSpecialItem)                     Encounter                                                   OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.TimedSpecialEventSpawner
/// Size: 0x0040 (0x000028 - 0x000068)
class UTimedSpecialEventSpawner : public USpecialEventSpawner
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<class UObject*>)                    BlockStack                                                  OFFSET(get<T>, {0x28, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             EventActor                                                  OFFSET(get<T>, {0x38, 40, 0, 0})
	DMember(float)                                     MinTime                                                     OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     MaxTime                                                     OFFSET(get<float>, {0x64, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TimedSpecialEventSpawner.UnblockEventSpawn
	// void UnblockEventSpawn(class UObject* blocker);                                                                          // [0x19be950] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.TimedSpecialEventSpawner.SpawnEvent
	// void SpawnEvent();                                                                                                       // [0x19be660] Final|Native|Public|Const 
	// Function /Script/FSD.TimedSpecialEventSpawner.BlockEventSpawn
	// void BlockEventSpawn(class UObject* blocker);                                                                            // [0x19bd680] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.TimedSpecialEventSpawner.AreEventSpawnsBlocked
	// bool AreEventSpawnsBlocked();                                                                                            // [0x19bd660] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.ShootingSpiderAnimInstance
/// Size: 0x0020 (0x0004A0 - 0x0004C0)
class UShootingSpiderAnimInstance : public USpiderAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	DMember(float)                                     LookAtBlend                                                 OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(bool)                                      CheckCurve                                                  OFFSET(get<bool>, {0x4A4, 1, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             TargetActor                                                 OFFSET(get<T>, {0x4A8, 8, 0, 0})
	SMember(FVector)                                   LookAtLocation                                              OFFSET(getStruct<T>, {0x4B0, 12, 0, 0})
};

/// Class /Script/FSD.SpiderLobberAnimInstance
/// Size: 0x0030 (0x0004C0 - 0x0004F0)
class USpiderLobberAnimInstance : public UShootingSpiderAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	SMember(FVector)                                   EffectiveLiquidInBum                                        OFFSET(getStruct<T>, {0x4C0, 12, 0, 0})
	SMember(FFloatInterval)                            LiquidInBumRange                                            OFFSET(getStruct<T>, {0x4CC, 8, 0, 0})
	DMember(float)                                     LiquidInBumEaseInExp                                        OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(float)                                     LiquidInBumTimeToMax                                        OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     LiquidInBumTimeToMaxShort                                   OFFSET(get<float>, {0x4DC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SpiderLobberAnimInstance.SetAttackIndex
	// void SetAttackIndex(int32_t Index);                                                                                      // [0x19bdf80] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SpiderLobberAnimInstance.ResetLiquidInBum
	// void ResetLiquidInBum();                                                                                                 // [0x19bdf60] Final|Native|Protected 
	// Function /Script/FSD.SpiderLobberAnimInstance.OnDeath
	// void OnDeath(class UHealthComponentBase* InHealthComponent);                                                             // [0x19bdd00] Final|Native|Protected 
};

/// Class /Script/FSD.SpiderEnemy
/// Size: 0x0038 (0x0003B0 - 0x0003E8)
class ASpiderEnemy : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1000;

public:
	CMember(class UPawnStatsComponent*)                PawnStats                                                   OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(class UHitReactionComponent*)              HitReactions                                                OFFSET(get<T>, {0x3C0, 8, 0, 0})
	CMember(class UStaticMesh*)                        GoreMesh                                                    OFFSET(get<T>, {0x3C8, 8, 0, 0})
	DMember(bool)                                      ApplyDifficultySpeedModifier                                OFFSET(get<bool>, {0x3D0, 1, 0, 0})
	DMember(float)                                     AttackDamageModifier                                        OFFSET(get<float>, {0x3D4, 4, 0, 0})
	DMember(bool)                                      LimitRagdollSpeed                                           OFFSET(get<bool>, {0x3D8, 1, 0, 0})
	DMember(float)                                     MaxRagdollSpeed                                             OFFSET(get<float>, {0x3DC, 4, 0, 0})
	CMember(class AActor*)                             LookAtTarget                                                OFFSET(get<T>, {0x3E0, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.SpiderEnemy.SetLookAtTarget
	// void SetLookAtTarget(class AActor* Target);                                                                              // [0x19be120] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SpiderEnemy.OnRep_LookAtTarget
	// void OnRep_LookAtTarget();                                                                                               // [0x19bde80] Final|Native|Protected 
	// Function /Script/FSD.SpiderEnemy.CreateHeadGore
	// class UStaticMeshComponent* CreateHeadGore();                                                                            // [0x19bd7a0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.SpiderEnemy.AlertNearbyEnemies
	// void AlertNearbyEnemies();                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Struct /Script/FSD.CablePathSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FCablePathSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(DeepPathFinderType)                        PathType                                                    OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(DeepPathFinderSize)                        PathSize                                                    OFFSET(get<T>, {0x1, 1, 0, 0})
	CMember(DeepPathFinderPreference)                  PathPreference                                              OFFSET(get<T>, {0x2, 1, 0, 0})
	DMember(float)                                     MinStepSize                                                 OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MaxStepSize                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MaxNoiseY                                                   OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MinSurfaceHeight                                            OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MaxSurfaceHeight                                            OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Class /Script/FSD.SplineCableActor
/// Size: 0x0160 (0x000220 - 0x000380)
class ASplineCableActor : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	SMember(FMulticastInlineDelegate)                  OnPathCompleted                                             OFFSET(getStruct<T>, {0x220, 16, 0, 0})
	CMember(class USplineComponent*)                   PathSplineComponent                                         OFFSET(get<T>, {0x230, 8, 0, 0})
	SMember(FCablePathSettings)                        PathSettings                                                OFFSET(getStruct<T>, {0x238, 24, 0, 0})
	CMember(TWeakObjectPtr<class UStaticMesh*>)        CableMesh                                                   OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(TEnumAsByte<ESplineMeshAxis>)              MeshForwardAxis                                             OFFSET(get<T>, {0x278, 1, 0, 0})
	DMember(float)                                     CableThickness                                              OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(int32_t)                                   CarveRadius                                                 OFFSET(get<int32_t>, {0x280, 4, 0, 0})
	DMember(float)                                     CarveSurfaceOffset                                          OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     MaxAllowedPathDistance                                      OFFSET(get<float>, {0x288, 4, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) MaterialConnected                                           OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInterface*>) MaterialUnconnected                                         OFFSET(get<T>, {0x2B8, 8, 0, 0})
	DMember(int32_t)                                   MaterialIndex                                               OFFSET(get<int32_t>, {0x2E0, 4, 0, 0})
	CMember(class UStaticMesh*)                        CableMeshInstance                                           OFFSET(get<T>, {0x2E8, 8, 0, 0})
	SMember(FTransform)                                StartTransform                                              OFFSET(getStruct<T>, {0x2F0, 48, 0, 0})
	SMember(FTransform)                                EndTransform                                                OFFSET(getStruct<T>, {0x320, 48, 0, 0})
	CMember(TArray<FVector>)                           ReplicatedPath                                              OFFSET(get<T>, {0x350, 16, 0, 0})
	DMember(bool)                                      bConnected                                                  OFFSET(get<bool>, {0x360, 1, 0, 0})
	DMember(bool)                                      ClearPointsWhenDone                                         OFFSET(get<bool>, {0x361, 1, 0, 0})
	CMember(TArray<class USplineMeshComponent*>)       MeshComponents                                              OFFSET(get<T>, {0x368, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.SplineCableActor.SpawnBetweenTransforms
	// void SpawnBetweenTransforms(FTransform InStart, FTransform InEnd);                                                       // [0x19be4f0] Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.SplineCableActor.SetConnected
	// void SetConnected(bool InConnected);                                                                                     // [0x19be010] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SplineCableActor.ReceiveSegmentCreated
	// void ReceiveSegmentCreated(class USplineMeshComponent* InSegment, int32_t InIndex, int32_t InTotal);                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SplineCableActor.ReceiveAllSegmentsCreated
	// void ReceiveAllSegmentsCreated();                                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SplineCableActor.OnUpdateMaterials
	// void OnUpdateMaterials();                                                                                                // [0x1816d70] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SplineCableActor.OnRep_Path
	// void OnRep_Path();                                                                                                       // [0x19bdea0] Final|Native|Protected 
	// Function /Script/FSD.SplineCableActor.OnRep_Connected
	// void OnRep_Connected();                                                                                                  // [0x19bde60] Final|Native|Protected 
};

/// Class /Script/FSD.SplineDecoratorComponent
/// Size: 0x0058 (0x000588 - 0x0005E0)
class USplineDecoratorComponent : public UInstancedStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1504;

public:
	DMember(float)                                     DistanceBetweenInstances                                    OFFSET(get<float>, {0x588, 4, 0, 0})
	DMember(int32_t)                                   StartIndex                                                  OFFSET(get<int32_t>, {0x58C, 4, 0, 0})
	DMember(int32_t)                                   EndIndex                                                    OFFSET(get<int32_t>, {0x590, 4, 0, 0})
	DMember(bool)                                      bUpdateContinuously                                         OFFSET(get<bool>, {0x594, 1, 0, 0})
	SMember(FVector)                                   VerticalOffset                                              OFFSET(getStruct<T>, {0x598, 12, 0, 0})
	SMember(FVector)                                   Scale                                                       OFFSET(getStruct<T>, {0x5A4, 12, 0, 0})
	DMember(float)                                     DistanceProgress                                            OFFSET(get<float>, {0x5B0, 4, 0, 0})
	CMember(class USplineComponent*)                   SplineComponent                                             OFFSET(get<T>, {0x5B8, 8, 0, 0})
	CMember(TArray<FTransform>)                        NewInstancesTransforms                                      OFFSET(get<T>, {0x5C0, 16, 0, 0})
	DMember(float)                                     Phase                                                       OFFSET(get<float>, {0x5D0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SplineDecoratorComponent.Update
	// void Update(float DeltaTime);                                                                                            // [0x19be9d0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SplineDecoratorComponent.SetUpdateContinuously
	// void SetUpdateContinuously(bool InContinuously);                                                                         // [0x19be460] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SplineDecoratorComponent.SetSplineComponentAndMaterial
	// void SetSplineComponentAndMaterial(class USplineComponent* InSplineComponent, int32_t ElementIndex, class UMaterialInterface* Material); // [0x19be2c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SplineDecoratorComponent.SetSplineComponent
	// void SetSplineComponent(class USplineComponent* InSplineComponent);                                                      // [0x19be230] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.SplineHookAttack
/// Size: 0x0178 (0x000120 - 0x000298)
class USplineHookAttack : public USpecialAttackComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 664;

public:
	CMember(class USplineMeshComponent*)               Spline                                                      OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             HeadMesh                                                    OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             TailMesh                                                    OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UHitReactionComponent*)              HitReacts                                                   OFFSET(get<T>, {0x138, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        MovementCurve                                               OFFSET(getStruct<T>, {0x170, 136, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             SyncedTarget                                                OFFSET(get<T>, {0x220, 8, 0, 0})
	SMember(FName)                                     TailSocket                                                  OFFSET(getStruct<T>, {0x228, 8, 0, 0})
	SMember(FName)                                     HeadSocket                                                  OFFSET(getStruct<T>, {0x230, 8, 0, 0})
	CMember(class UPointLightComponent*)               GrabLight                                                   OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class USoundCue*)                          GrabbedIndicationSound                                      OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UAnimMontage*)                       HeadAnimation                                               OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UDamageComponent*)                   Damage                                                      OFFSET(get<T>, {0x250, 8, 0, 0})
	DMember(float)                                     ForwardPlacement                                            OFFSET(get<float>, {0x258, 4, 0, 0})
	DMember(float)                                     DesiredLaunchAngle                                          OFFSET(get<float>, {0x25C, 4, 0, 0})
	DMember(float)                                     MaxAngledForce                                              OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     AdjustmentStartDistance                                     OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(float)                                     AttackDuration                                              OFFSET(get<float>, {0x268, 4, 0, 0})
	DMember(float)                                     MaxAngle                                                    OFFSET(get<float>, {0x26C, 4, 0, 0})
	DMember(float)                                     AttackOnProgress                                            OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(float)                                     AttackDelay                                                 OFFSET(get<float>, {0x274, 4, 0, 0})
	DMember(float)                                     LeadMultiplier                                              OFFSET(get<float>, {0x278, 4, 0, 0})
	DMember(float)                                     AquireLocationTime                                          OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     OnSuccessCooldown                                           OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(bool)                                      ShowGrabArea                                                OFFSET(get<bool>, {0x28C, 1, 0, 0})
	DMember(bool)                                      Lead                                                        OFFSET(get<bool>, {0x28D, 1, 0, 0})
	DMember(bool)                                      Using                                                       OFFSET(get<bool>, {0x28E, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SplineHookAttack.SetTailLight
	// void SetTailLight(class UPointLightComponent* Light);                                                                    // [0x19be3d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.SplineHookAttack.OnRep_Using
	// void OnRep_Using();                                                                                                      // [0x19bdec0] Final|Native|Protected 
	// Function /Script/FSD.SplineHookAttack.OnDamagedTarget
	// void OnDamagedTarget(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* Component, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x19bdba0] Final|Native|Protected 
	// Function /Script/FSD.SplineHookAttack.GetTargetLocation
	// FVector GetTargetLocation();                                                                                             // [0x19bd9f0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SplineHookAttack.GetTargetDirection
	// FVector GetTargetDirection();                                                                                            // [0x19bd9c0] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SplineHookAttack.GetHasAquiredTarget
	// bool GetHasAquiredTarget();                                                                                              // [0x19bd8d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SplineHookAttack.ClearSuccessCooldown
	// void ClearSuccessCooldown();                                                                                             // [0x19bd780] Final|Native|Protected 
};

/// Class /Script/FSD.SplinePlant
/// Size: 0x0228 (0x000220 - 0x000448)
class ASplinePlant : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1096;

public:
	CMember(class USplineComponent*)                   PlantSpline                                                 OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USceneComponent*)                    PlantEndPoint                                               OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UAudioComponent*)                    AudioComponent                                              OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          CueExtending                                                OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          CueRetracting                                               OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class USoundCue*)                          AudioExtending                                              OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USoundCue*)                          AudioRetracting                                             OFFSET(get<T>, {0x290, 8, 0, 0})
	DMember(bool)                                      bEnabledSegmentCollision                                    OFFSET(get<bool>, {0x298, 1, 0, 0})
	DMember(float)                                     CarveRadius                                                 OFFSET(get<float>, {0x29C, 4, 0, 0})
	CMember(TWeakObjectPtr<class UStaticMesh*>)        SegmentMeshPtr                                              OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(TEnumAsByte<ESplineMeshAxis>)              SegmentForwardAxis                                          OFFSET(get<T>, {0x2C8, 1, 0, 0})
	DMember(float)                                     SegmentLength                                               OFFSET(get<float>, {0x2CC, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        SegmentWidthCurve                                           OFFSET(getStruct<T>, {0x2D0, 136, 0, 0})
	DMember(float)                                     SegmentWidthScale                                           OFFSET(get<float>, {0x358, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        SegmentHeightCurve                                          OFFSET(getStruct<T>, {0x360, 136, 0, 0})
	DMember(float)                                     SegmentHeightScale                                          OFFSET(get<float>, {0x3E8, 4, 0, 0})
	DMember(float)                                     PreviewLengthPercent                                        OFFSET(get<float>, {0x3EC, 4, 0, 0})
	DMember(int32_t)                                   PreviewSeed                                                 OFFSET(get<int32_t>, {0x3F0, 4, 0, 0})
	CMember(TArray<class USplineMeshComponent*>)       SegmentMeshCache                                            OFFSET(get<T>, {0x3F8, 16, 0, 0})
	CMember(TArray<class USplineMeshComponent*>)       CollisionMeshCache                                          OFFSET(get<T>, {0x408, 16, 0, 0})
	CMember(class USplineComponent*)                   SplineInstance                                              OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(class UStaticMesh*)                        SegmentMesh                                                 OFFSET(get<T>, {0x420, 8, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x428, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SplinePlant.SetTargetPlantLengthPercent
	// void SetTargetPlantLengthPercent(float InTargetPercent, float InPercentPerSecond, float InEaseExp);                      // [0x19c33b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SplinePlant.SetTargetPlantLength
	// void SetTargetPlantLength(float InTargetLength, float InDistancePerSecond, float InEaseExp);                             // [0x19c3290] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SplinePlant.SetPlantLengthPercent
	// void SetPlantLengthPercent(float InPercent);                                                                             // [0x19c3210] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.SplinePlant.ResetSpline
	// void ResetSpline();                                                                                                      // [0x19c31f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.SplinePlant.ResetScale
	// void ResetScale();                                                                                                       // [0x19c31d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.SplinePlant.ReceivePrepareSpline
	// void ReceivePrepareSpline(class USplineComponent* InSplineComponent, int32_t InSeed);                                    // [0x19c3100] Native|Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SplinePlant.ReceiveMovementUpdated
	// void ReceiveMovementUpdated(float InDistanceProgress);                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SplinePlant.ReceiveMovementStarted
	// void ReceiveMovementStarted(float InTargetDistance);                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SplinePlant.ReceiveMovementFinished
	// void ReceiveMovementFinished(float InDistanceProgress);                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.SplinePlant.GetPlantTargetLengthPercent
	// float GetPlantTargetLengthPercent();                                                                                     // [0x19c2720] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SplinePlant.GetPlantLengthPercent
	// float GetPlantLengthPercent();                                                                                           // [0x19c2700] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SplinePlant.GetNearestLocationToLocalPlayer
	// FTransform GetNearestLocationToLocalPlayer();                                                                            // [0x19c26a0] Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SplinePlant.GetFullPlantLength
	// float GetFullPlantLength();                                                                                              // [0x19c25d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.SplineTrailMaterial
/// Size: 0x0038 (0x000000 - 0x000038)
class FSplineTrailMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TWeakObjectPtr<class UMaterialInterface*>) Material                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     slotName                                                    OFFSET(getStruct<T>, {0x28, 8, 0, 0})
	DMember(int32_t)                                   SlotIndex                                                   OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Class /Script/FSD.SplineTrailComponent
/// Size: 0x0158 (0x0001F8 - 0x000350)
class USplineTrailComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(TWeakObjectPtr<class UStaticMesh*>)        StaticMesh                                                  OFFSET(get<T>, {0x1F8, 8, 0, 0})
	CMember(TArray<FSplineTrailMaterial>)              MaterialSettings                                            OFFSET(get<T>, {0x220, 16, 0, 0})
	CMember(TEnumAsByte<ESplineMeshAxis>)              ForwardAxis                                                 OFFSET(get<T>, {0x230, 1, 0, 0})
	CMember(TWeakObjectPtr<class UFSDPhysicalMaterial*>) CollisionMaterial                                         OFFSET(get<T>, {0x238, 8, 0, 0})
	DMember(float)                                     CollisionCapsuleRadius                                      OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     TrailLength                                                 OFFSET(get<float>, {0x264, 4, 0, 0})
	DMember(int32_t)                                   TrailSubSegments                                            OFFSET(get<int32_t>, {0x268, 4, 0, 0})
	DMember(float)                                     TrailSegmentOverlap                                         OFFSET(get<float>, {0x26C, 4, 0, 0})
	SMember(FVector2D)                                 Scale                                                       OFFSET(getStruct<T>, {0x274, 8, 0, 0})
	DMember(float)                                     VerticalOffset                                              OFFSET(get<float>, {0x27C, 4, 0, 0})
	DMember(float)                                     HeadBobbingLength                                           OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     HeadBobbingSpeed                                            OFFSET(get<float>, {0x284, 4, 0, 0})
	SMember(FRuntimeFloatCurve)                        ScaleCurve                                                  OFFSET(getStruct<T>, {0x288, 136, 0, 0})
	CMember(TArray<class UCapsuleComponent*>)          CapsuleColliders                                            OFFSET(get<T>, {0x310, 16, 0, 0})
	CMember(class USplineComponent*)                   Spline                                                      OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(TArray<class USplineMeshComponent*>)       MeshComponents                                              OFFSET(get<T>, {0x328, 16, 0, 0})
	CMember(TArray<FVector>)                           LocationHistory                                             OFFSET(get<T>, {0x338, 16, 0, 0})
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x348, 4, 0, 0})
};

/// Class /Script/FSD.StabberVineRoot
/// Size: 0x0000 (0x000348 - 0x000348)
class AStabberVineRoot : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 840;

public:


	/// Functions
	// Function /Script/FSD.StabberVineRoot.RemoveVine
	// void RemoveVine(class AStabberVine* vine);                                                                               // [0x1d6f900] Event|Public|BlueprintCallable|BlueprintEvent 
};

/// Class /Script/FSD.StabberVine
/// Size: 0x0028 (0x000498 - 0x0004C0)
class AStabberVine : public ATentacleBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1216;

public:
	SMember(FTentacleTarget)                           DesiredTarget                                               OFFSET(getStruct<T>, {0x498, 32, 0, 0})


	/// Functions
	// Function /Script/FSD.StabberVine.OnRep_DesiredTarget
	// void OnRep_DesiredTarget();                                                                                              // [0x19c2c40] Final|Native|Protected 
};

/// Class /Script/FSD.StatHat
/// Size: 0x0088 (0x000030 - 0x0000B8)
class UStatHat : public UGameInstanceSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:


	/// Functions
	// Function /Script/FSD.StatHat.AddStatValue
	// void AddStatValue(FString Key, float Value);                                                                             // [0x19c2370] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.StatHat.AddStatCount
	// void AddStatCount(FString Key, int32_t Count);                                                                           // [0x19c2290] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.StatusAddedComponent
/// Size: 0x0000 (0x000028 - 0x000028)
class UStatusAddedComponent : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.StatusAddedComponent.InitializeEffect
	// void InitializeEffect(class UStatusEffect* Effect, class AActor* EffectOwner);                                           // [0x19c2940] Native|Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.StatusEffectEnemies
/// Size: 0x00D0 (0x000028 - 0x0000F8)
class UStatusEffectEnemies : public URunningMissionBP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(TArray<class UClass*>)                     StatusEffects                                               OFFSET(get<T>, {0x28, 16, 0, 0})
	SMember(FGameplayTagContainer)                     AllowedFilter                                               OFFSET(getStruct<T>, {0x38, 32, 0, 0})
	SMember(FGameplayTagQuery)                         AllowedQuery                                                OFFSET(getStruct<T>, {0x58, 72, 0, 0})
	DMember(float)                                     ChanceToApply                                               OFFSET(get<float>, {0xA0, 4, 0, 0})
	DMember(bool)                                      OverrideReplacesDefault                                     OFFSET(get<bool>, {0xA4, 1, 0, 0})
	CMember(TMap<class UEnemyDescriptor*, class UClass*>) Overrides                                                OFFSET(get<T>, {0xA8, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.StatusEffectEnemies.OnEnemySpawned
	// void OnEnemySpawned(class APawn* enemy, class UEnemyDescriptor* descriptor);                                             // [0x19c2aa0] Final|Native|Protected 
};

/// Class /Script/FSD.StatusEffectExclusiveKey
/// Size: 0x0000 (0x000030 - 0x000030)
class UStatusEffectExclusiveKey : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.StatusEffect
/// Size: 0x00E0 (0x000028 - 0x000108)
class UStatusEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(class UPawnAffliction*)                    PawnAffliction                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(TArray<class UStatusEffectItem*>)          StatusEffects                                               OFFSET(get<T>, {0x30, 16, 0, 0})
	DMember(float)                                     MaxResistance                                               OFFSET(get<float>, {0x40, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UStatusEffectExclusiveKey*)          ExclusiveKey                                                OFFSET(get<T>, {0x50, 8, 0, 0})
	DMember(bool)                                      TriggerTwiceOnPush                                          OFFSET(get<bool>, {0x58, 1, 0, 0})
	SMember(FRandRange)                                ApplyEffectsInterval                                        OFFSET(getStruct<T>, {0x5C, 8, 0, 0})
	DMember(bool)                                      CanStack                                                    OFFSET(get<bool>, {0x64, 1, 0, 0})
	DMember(int32_t)                                   MaxStack                                                    OFFSET(get<int32_t>, {0x68, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x6C, 4, 0, 0})
	DMember(bool)                                      ApplyDurationAfterPop                                       OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      RemoveOnDeath                                               OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(bool)                                      RemoveOnTemperatureStateChange                              OFFSET(get<bool>, {0x72, 1, 0, 0})
	DMember(bool)                                      AllowExternalSread                                          OFFSET(get<bool>, {0x73, 1, 0, 0})
	DMember(bool)                                      RefreshDurationOnApplication                                OFFSET(get<bool>, {0x74, 1, 0, 0})
	SMember(FGameplayTagQuery)                         GameplayTagQuery                                            OFFSET(getStruct<T>, {0x78, 72, 0, 0})
	SMember(FGameplayTagContainer)                     ExcludeTargetsWithTags                                      OFFSET(getStruct<T>, {0xC0, 32, 0, 0})
	SMember(FGameplayTagContainer)                     TargetRequiredTags                                          OFFSET(getStruct<T>, {0xE0, 32, 0, 0})


	/// Functions
	// Function /Script/FSD.StatusEffect.ShouldInstantiate
	// bool ShouldInstantiate();                                                                                                // [0x1153030] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FSD.StatusEffect.GetStatusEffectDuration
	// float GetStatusEffectDuration(class UClass* StatusEffect);                                                               // [0x19c2810] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.StatusEffect.CanTrigger
	// bool CanTrigger(class AActor* Target);                                                                                   // [0x19c2460] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.StatusEffectItem
/// Size: 0x0008 (0x000028 - 0x000030)
class UStatusEffectItem : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.DotStatusEffectItem
/// Size: 0x0018 (0x000030 - 0x000048)
class UDotStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FRandRange)                                damageAmount                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      OverrideDamageImpulse                                       OFFSET(get<bool>, {0x38, 1, 0, 0})
	CMember(class UDamageImpulse*)                     DamageImpulseOverride                                       OFFSET(get<T>, {0x40, 8, 0, 0})
};

/// Class /Script/FSD.DotEnemyArmorStatusEffectItem
/// Size: 0x0008 (0x000030 - 0x000038)
class UDotEnemyArmorStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FRandRange)                                damageAmount                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.PlayerArmorStatusEffectItem
/// Size: 0x0008 (0x000030 - 0x000038)
class UPlayerArmorStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FRandRange)                                ChangeAmount                                                OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.HealingStatusEffectItem
/// Size: 0x0020 (0x000030 - 0x000050)
class UHealingStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(bool)                                      HealPercentage                                              OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(float)                                     NoDamageTimeRequired                                        OFFSET(get<float>, {0x34, 4, 0, 0})
	CMember(class UPawnAffliction*)                    PawnAffliction                                              OFFSET(get<T>, {0x38, 8, 0, 0})
	SMember(FRandRange)                                amount                                                      OFFSET(getStruct<T>, {0x40, 8, 0, 0})
	DMember(bool)                                      IgnoreCanTakeDamage                                         OFFSET(get<bool>, {0x48, 1, 0, 0})
};

/// Class /Script/FSD.StatChangeStatusEffectItem
/// Size: 0x0010 (0x000030 - 0x000040)
class UStatChangeStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UPawnStat*)                          Stat                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     StatChange                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      AffectedByResistances                                       OFFSET(get<bool>, {0x3C, 1, 0, 0})
};

/// Class /Script/FSD.TemperatureStatusEffectItem
/// Size: 0x0008 (0x000030 - 0x000038)
class UTemperatureStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FRandRange)                                TemperatureChangeAmount                                     OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.InfectionStatusEffectItem
/// Size: 0x0008 (0x000030 - 0x000038)
class UInfectionStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FRandRange)                                InfectionChangeAmount                                       OFFSET(getStruct<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.HeatSourceStatusEffectItem
/// Size: 0x0008 (0x000030 - 0x000038)
class UHeatSourceStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     temperature                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(ETemperatureIntensity)                     Intensity                                                   OFFSET(get<T>, {0x34, 1, 0, 0})
};

/// Class /Script/FSD.PheromoneStatusEffectItem
/// Size: 0x0000 (0x000030 - 0x000030)
class UPheromoneStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.MakeAttackableStatusEffectItem
/// Size: 0x0010 (0x000030 - 0x000040)
class UMakeAttackableStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     AttackCostModifier                                          OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.FSDPawnStatusEffectItem
/// Size: 0x0008 (0x000030 - 0x000038)
class UFSDPawnStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(float)                                     StaggerDurationMultiplier                                   OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     AttackSpeedModifier                                         OFFSET(get<float>, {0x34, 4, 0, 0})
};

/// Class /Script/FSD.ReplenishOxygenStatusEffectItem
/// Size: 0x0000 (0x000030 - 0x000030)
class UReplenishOxygenStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.EnemyTemperatureStatusEffectItem
/// Size: 0x0010 (0x000030 - 0x000040)
class UEnemyTemperatureStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     WarmingRate                                                 OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     UnFreezeTemperature                                         OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     TemperatureChangeScaleModifier                              OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/FSD.EnemyTemperatureStatusEffectModifierItem
/// Size: 0x0010 (0x000030 - 0x000040)
class UEnemyTemperatureStatusEffectModifierItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(float)                                     BurnTemperatureModifier                                     OFFSET(get<float>, {0x30, 4, 0, 0})
	DMember(float)                                     DouseFireTemperatureModifier                                OFFSET(get<float>, {0x34, 4, 0, 0})
	DMember(float)                                     FreezeTemperatureModifier                                   OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     UnFreezeTemperatureModifier                                 OFFSET(get<float>, {0x3C, 4, 0, 0})
};

/// Class /Script/FSD.EnemyDetonationStatusEffectItem
/// Size: 0x0008 (0x000030 - 0x000038)
class UEnemyDetonationStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      FireDetonation                                              OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      IceDetonation                                               OFFSET(get<bool>, {0x31, 1, 0, 0})
};

/// Class /Script/FSD.ShoutStatusEffectItem
/// Size: 0x0008 (0x000030 - 0x000038)
class UShoutStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UDialogDataAsset*)                   BeginShout                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.AddComponentStatusEffectItem
/// Size: 0x0010 (0x000030 - 0x000040)
class UAddComponentStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class UActorComponent*>)    AddedComponent                                              OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.StatChangeStackedStatusEffectItem
/// Size: 0x0010 (0x000030 - 0x000040)
class UStatChangeStackedStatusEffectItem : public UStatusEffectItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UPawnStat*)                          Stat                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     StatChange                                                  OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(bool)                                      AffectedByResistances                                       OFFSET(get<bool>, {0x3C, 1, 0, 0})
};

/// Class /Script/FSD.StatusEffectMissionBP
/// Size: 0x0050 (0x000028 - 0x000078)
class UStatusEffectMissionBP : public URunningMissionBP
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FGameplayTagQuery)                         EnemyQuery                                                  OFFSET(getStruct<T>, {0x28, 72, 0, 0})
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x70, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.StatusEffectMissionBP.OnEnemySpawned
	// void OnEnemySpawned(class APawn* Pawn, class UEnemyDescriptor* descriptor);                                              // [0x19c2b70] Final|Native|Protected 
};

/// Struct /Script/FSD.ActiveStatusEffect
/// Size: 0x0010 (0x000000 - 0x000010)
class FActiveStatusEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Owner                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class APawn*>)              Instigator                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FSD.ActiveStatusEffectBank
/// Size: 0x0030 (0x000000 - 0x000030)
class FActiveStatusEffectBank : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UStatusEffect*)                      Key                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UStatusEffect*)                      ActiveEffect                                                OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<FActiveStatusEffect>)               Effects                                                     OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Class /Script/FSD.StatusEffectsComponent
/// Size: 0x0080 (0x0000B0 - 0x000130)
class UStatusEffectsComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TArray<FActiveStatusEffectBank>)           ActiveStatusEffects                                         OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(class UHealthComponentBase*)               OwnerHealth                                                 OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(TSet<UStatusEffectExclusiveKey*>)          ActiveExclusiveKeys                                         OFFSET(get<T>, {0xD8, 80, 0, 0})
	DMember(bool)                                      IgnoreAll                                                   OFFSET(get<bool>, {0x128, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.StatusEffectsComponent.TryPushActiveStatusEffect
	// bool TryPushActiveStatusEffect(class UClass* StatusEffect, class AActor* Target, class AActor* Owner);                   // [0x19c35d0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.StatusEffectsComponent.TryPopActiveStatusEffect
	// bool TryPopActiveStatusEffect(class UClass* StatusEffect, class AActor* Target, class AActor* Owner);                    // [0x19c34d0] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.StatusEffectsComponent.PushActiveStatusEffectInstance
	// bool PushActiveStatusEffectInstance(class UStatusEffect* StatusEffect, class AActor* Owner);                             // [0x19c3030] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.StatusEffectsComponent.PushActiveStatusEffect
	// bool PushActiveStatusEffect(class UClass* StatusEffect, class AActor* Owner);                                            // [0x19c2f60] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.StatusEffectsComponent.PopAllActiveStatusEffectsOfType
	// void PopAllActiveStatusEffectsOfType(class UClass* StatusEffect, class AActor* Owner);                                   // [0x19c2e90] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.StatusEffectsComponent.PopAllActiveStatusEffects
	// void PopAllActiveStatusEffects(class AActor* Owner);                                                                     // [0x19c2e00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.StatusEffectsComponent.PopActiveStatusEffectInstance
	// bool PopActiveStatusEffectInstance(class UStatusEffect* StatusEffect, class AActor* Owner);                              // [0x19c2d30] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.StatusEffectsComponent.PopActiveStatusEffect
	// bool PopActiveStatusEffect(class UClass* StatusEffect, class AActor* Owner);                                             // [0x19c2c60] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.StatusEffectsComponent.OnDeath
	// void OnDeath(class UHealthComponentBase* HealthComponent);                                                               // [0x19c2a10] Final|Native|Protected 
	// Function /Script/FSD.StatusEffectsComponent.HasActiveEffect
	// bool HasActiveEffect(class UClass* StatusEffect);                                                                        // [0x19c28a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.StatusEffectsComponent.GetStackAmount
	// int32_t GetStackAmount(class UClass* StatusEffect, class AActor* Owner);                                                 // [0x19c2740] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.StatusEffectsComponent.GetFullStackAmount
	// int32_t GetFullStackAmount(class UClass* StatusEffect);                                                                  // [0x19c2600] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.StatusEffectsComponent.CreateStatusEffectInstance
	// class UStatusEffect* CreateStatusEffectInstance(class UClass* StatusEffect, class UObject* Owner);                       // [0x19c2500] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.StatusEffectSettings
/// Size: 0x0010 (0x000030 - 0x000040)
class UStatusEffectSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             EnemyOnFire                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UClass*)                             frozen                                                      OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Class /Script/FSD.StatusEffectsFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UStatusEffectsFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.StatusEffectsFunctionLibrary.GetMaxResistance
	// float GetMaxResistance(class UClass* StatusEffect);                                                                      // [0x19c7170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.StatusEffectsFunctionLibrary.GetDamageClass
	// class UDamageClass* GetDamageClass(class UClass* StatusEffect);                                                          // [0x19c70c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.StatusEffectsFunctionLibrary.CanTrigger
	// bool CanTrigger(class UClass* StatusEffect, class AActor* OtherActor);                                                   // [0x19c6ca0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.StatusEffectTriggerComponent
/// Size: 0x0060 (0x0000B0 - 0x000110)
class UStatusEffectTriggerComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FMulticastInlineDelegate)                  OnEffectTriggered                                           OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnActorEnterLeave                                           OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(TArray<class UClass*>)                     StatusEffects                                               OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<class UClass*>)                     LeaveTriggerEffects                                         OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(class UPrimitiveComponent*)                collider                                                    OFFSET(get<T>, {0x100, 8, 0, 0})
	DMember(bool)                                      RemoveStatusEffectOnEndOverlap                              OFFSET(get<bool>, {0x108, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.StatusEffectTriggerComponent.OnOverlapEnd
	// void OnOverlapEnd(class AActor* MyActor, class AActor* OtherActor);                                                      // [0x19c78a0] Final|Native|Protected 
	// Function /Script/FSD.StatusEffectTriggerComponent.OnOverlapBegin
	// void OnOverlapBegin(class AActor* MyActor, class AActor* OtherActor);                                                    // [0x19c77d0] Final|Native|Protected 
	// Function /Script/FSD.StatusEffectTriggerComponent.OnComponentOverlapEnd
	// void OnComponentOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x19c7450] Final|Native|Protected 
	// Function /Script/FSD.StatusEffectTriggerComponent.OnComponentOverlapBegin
	// void OnComponentOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x19c7230] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.StatusEffectTriggerComponent.AddActorToIgnoreList
	// void AddActorToIgnoreList(class AActor* Actor);                                                                          // [0x19c6a00] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.StayAwayFromWallsComponent
/// Size: 0x0058 (0x0001F8 - 0x000250)
class UStayAwayFromWallsComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(class AFSDGameState*)                      GameState                                                   OFFSET(get<T>, {0x200, 8, 0, 0})
	DMember(float)                                     MaxSpeed                                                    OFFSET(get<float>, {0x230, 4, 0, 0})
	DMember(float)                                     Acceleration                                                OFFSET(get<float>, {0x234, 4, 0, 0})
	DMember(float)                                     BackAcceleration                                            OFFSET(get<float>, {0x238, 4, 0, 0})
	DMember(float)                                     PointOffset                                                 OFFSET(get<float>, {0x23C, 4, 0, 0})
	DMember(float)                                     AvoidSpeed                                                  OFFSET(get<float>, {0x240, 4, 0, 0})
	DMember(float)                                     GoBackSpeed                                                 OFFSET(get<float>, {0x244, 4, 0, 0})
	DMember(bool)                                      Active                                                      OFFSET(get<bool>, {0x248, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.StayAwayFromWallsComponent.SetIsActive
	// void SetIsActive(bool IsActive);                                                                                         // [0x19959e0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.Steerable
/// Size: 0x0000 (0x000028 - 0x000028)
class USteerable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.StickyFlame
/// Size: 0x0060 (0x000220 - 0x000280)
class AStickyFlame : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           FlameParticles                                              OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UAudioComponent*)                    Audio                                                       OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UStatusEffectTriggerComponent*)      StatusTriggerComponent                                      OFFSET(get<T>, {0x238, 8, 0, 0})
	SMember(FDecalData)                                Decal                                                       OFFSET(getStruct<T>, {0x240, 32, 0, 0})
	DMember(float)                                     FlameLifetime                                               OFFSET(get<float>, {0x260, 4, 0, 0})
	DMember(float)                                     FlameExtinguishTime                                         OFFSET(get<float>, {0x264, 4, 0, 0})
	SMember(FVector2D)                                 RandomTimeRangeFactor                                       OFFSET(getStruct<T>, {0x268, 8, 0, 0})
	DMember(float)                                     AudioFadeOutTime                                            OFFSET(get<float>, {0x270, 4, 0, 0})
	DMember(bool)                                      IsActive                                                    OFFSET(get<bool>, {0x274, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.StickyFlame.OnRep_IsActive
	// void OnRep_IsActive();                                                                                                   // [0x1816d70] Native|Protected     
	// Function /Script/FSD.StickyFlame.OnExtinguisFlame
	// void OnExtinguisFlame();                                                                                                 // [0x19c7660] Final|Native|Protected 
};

/// Class /Script/FSD.StickyFlameSpawner
/// Size: 0x0038 (0x0000B0 - 0x0000E8)
class UStickyFlameSpawner : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FMulticastInlineDelegate)                  OnStickyFlameSpawned                                        OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	CMember(class UClass*)                             StickyFlameActor                                            OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     FlameLifetime                                               OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(float)                                     StickyFlameIntervals                                        OFFSET(get<float>, {0xCC, 4, 0, 0})
	DMember(float)                                     StickyMaxSpawnPerSecond                                     OFFSET(get<float>, {0xD0, 4, 0, 0})
	DMember(float)                                     StickyFlameMinDistance                                      OFFSET(get<float>, {0xD4, 4, 0, 0})
	DMember(float)                                     StickyFlameLastTime                                         OFFSET(get<float>, {0xD8, 4, 0, 0})
	SMember(FVector)                                   StickyFlameLastLocation                                     OFFSET(getStruct<T>, {0xDC, 12, 0, 0})


	/// Functions
	// Function /Script/FSD.StickyFlameSpawner.TrySpawnStickyFlameHit
	// bool TrySpawnStickyFlameHit(FHitResult& Hit);                                                                            // [0x19c7ff0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.StickyFlameSpawner.TrySpawnStickyFlame
	// bool TrySpawnStickyFlame(FVector Location, FVector Normal);                                                              // [0x19c7f00] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.StickyFlameSpawner.StickyFlameSignature__DelegateSignature
	// void StickyFlameSignature__DelegateSignature(class AStickyFlame* StickyFlame);                                           // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.StickyFlameSpawner.ServerSpawnStickyFlame
	// void ServerSpawnStickyFlame(FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal);                             // [0x19c7b80] Net|NetReliableNative|Event|Public|NetServer 
};

/// Class /Script/FSD.StickyIce
/// Size: 0x0030 (0x000280 - 0x0002B0)
class AStickyIce : public AStickyFlame
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class USceneComponent*)                    VisualRoot                                                  OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class USimpleHealthComponent*)             Health                                                      OFFSET(get<T>, {0x288, 8, 0, 0})
	DMember(float)                                     MaxIntegrity                                                OFFSET(get<float>, {0x290, 4, 0, 0})
	DMember(float)                                     HeatDamageModifier                                          OFFSET(get<float>, {0x294, 4, 0, 0})
	DMember(float)                                     IntegrityLossOnSTETrigger                                   OFFSET(get<float>, {0x298, 4, 0, 0})
	DMember(float)                                     Integrity                                                   OFFSET(get<float>, {0x29C, 4, 0, 0})
	DMember(float)                                     IntegrityModifier                                           OFFSET(get<float>, {0x2A0, 4, 0, 0})
	SMember(FTimerHandle)                              Handle_Melting                                              OFFSET(getStruct<T>, {0x2A8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.StickyIce.StartMelting
	// void StartMelting();                                                                                                     // [0x19c7ee0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.StickyIce.OnSTETriggered
	// void OnSTETriggered(class AActor* target_actor, bool entered);                                                           // [0x19c7a30] Final|Native|Protected 
	// Function /Script/FSD.StickyIce.OnRep_IntegrityModifier
	// void OnRep_IntegrityModifier();                                                                                          // [0x19c79f0] Final|Native|Protected 
	// Function /Script/FSD.StickyIce.OnIceExpire
	// void OnIceExpire();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.StickyIce.OnHit
	// void OnHit(float Damage, FDamageData& DamageData, bool anyHealthLost);                                                   // [0x19c7680] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.StickyIce.AddToCurrentIntegrity
	// void AddToCurrentIntegrity(float Value, bool predictable);                                                               // [0x19c6a90] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.StingerIdleAudioComponent
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class UStingerIdleAudioComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TWeakObjectPtr<class UAudioComponent*>)    AudioComponent                                              OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UHealthComponentBase*>) HealthComponent                                           OFFSET(get<T>, {0xB8, 8, 0, 0})
	DMember(float)                                     FadeInTime                                                  OFFSET(get<float>, {0xC0, 4, 0, 0})
	DMember(float)                                     FadeOutTime                                                 OFFSET(get<float>, {0xC4, 4, 0, 0})
};

/// Class /Script/FSD.STLMeshCarver
/// Size: 0x0048 (0x000028 - 0x000070)
class USTLMeshCarver : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FBox)                                      AABB                                                        OFFSET(getStruct<T>, {0x28, 28, 0, 0})
	SMember(FDeepCSGFloatTree)                         BSPTree                                                     OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(TArray<FVector>)                           Vertices                                                    OFFSET(get<T>, {0x60, 16, 0, 0})
};

/// Class /Script/FSD.SubHealthComponent
/// Size: 0x0040 (0x0000B0 - 0x0000F0)
class USubHealthComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FMulticastInlineDelegate)                  OnDamageTaken                                               OFFSET(getStruct<T>, {0xB8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnHealthChanged                                             OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCanTakeDamageChanged                                      OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	CMember(EHealthbarType)                            HealthbarType                                               OFFSET(get<T>, {0xE8, 1, 0, 0})
	DMember(bool)                                      PassthroughDamageWhenDisabled                               OFFSET(get<bool>, {0xE9, 1, 0, 0})
	CMember(EEnemyHealthScaling)                       EnemyHealthScaling                                          OFFSET(get<T>, {0xEB, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.SubHealthComponent.SetCanTakeDamage
	// void SetCanTakeDamage(bool canTakeDamage);                                                                               // [0x19c7c70] Native|Public|BlueprintCallable 
	// Function /Script/FSD.SubHealthComponent.IsDead
	// bool IsDead();                                                                                                           // [0x18e5de0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SubHealthComponent.IsAlive
	// bool IsAlive();                                                                                                          // [0x18e5da0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SubHealthComponent.GetHealthPct
	// float GetHealthPct();                                                                                                    // [0x18e58e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SubHealthComponent.GetHealth
	// float GetHealth();                                                                                                       // [0x18e57b0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.SubHealthComponent.GetCanTakeDamage
	// bool GetCanTakeDamage();                                                                                                 // [0x19c70a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.DestructibleSubHealthComponent
/// Size: 0x0028 (0x0000F0 - 0x000118)
class UDestructibleSubHealthComponent : public USubHealthComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 280;

public:
	DMember(float)                                     MaxHealth                                                   OFFSET(get<float>, {0xF0, 4, 0, 0})
	DMember(float)                                     RadialDamageResistance                                      OFFSET(get<float>, {0xF4, 4, 0, 0})
	DMember(bool)                                      AllowInderectDamage                                         OFFSET(get<bool>, {0xF8, 1, 0, 0})
	DMember(float)                                     Damage                                                      OFFSET(get<float>, {0xFC, 4, 0, 0})
	CMember(class USceneComponent*)                    ArmorComponent                                              OFFSET(get<T>, {0x100, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnDestroyed                                                 OFFSET(getStruct<T>, {0x108, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.DestructibleSubHealthComponent.SubHealthDestroyed__DelegateSignature
	// void SubHealthDestroyed__DelegateSignature(class UDestructibleSubHealthComponent* subHealth);                            // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.DestructibleSubHealthComponent.ResetHealth
	// void ResetHealth();                                                                                                      // [0x19c7b60] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.DestructibleSubHealthComponent.OnRep_Damage
	// void OnRep_Damage(float oldDamage);                                                                                      // [0x19c7970] Final|Native|Protected 
};

/// Class /Script/FSD.PassthroughSubHealthComponent
/// Size: 0x0008 (0x0000F0 - 0x0000F8)
class UPassthroughSubHealthComponent : public USubHealthComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 248;

public:
	CMember(class USceneComponent*)                    ArmorComponent                                              OFFSET(get<T>, {0xF0, 8, 0, 0})
};

/// Class /Script/FSD.SubsystemLoader
/// Size: 0x0010 (0x000028 - 0x000038)
class USubsystemLoader : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class UClass*>)                     BlueprintSubSystems                                         OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.TargetDummyPawn
/// Size: 0x0030 (0x000220 - 0x000250)
class ATargetDummyPawn : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	SMember(FGameplayTagContainer)                     GameplayTags                                                OFFSET(getStruct<T>, {0x230, 32, 0, 0})
};

/// Class /Script/FSD.TargetValidator
/// Size: 0x0000 (0x000028 - 0x000028)
class UTargetValidator : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.TargetValidator.ReceiveIsTargetValid
	// bool ReceiveIsTargetValid(class AActor* Owner, class AActor* Target);                                                    // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/FSD.CompositeTargetValidator
/// Size: 0x0010 (0x000028 - 0x000038)
class UCompositeTargetValidator : public UTargetValidator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(TArray<class UTargetValidator*>)           TargetValidators                                            OFFSET(get<T>, {0x28, 16, 0, 0})
};

/// Class /Script/FSD.GrabTargetValidator
/// Size: 0x0000 (0x000028 - 0x000028)
class UGrabTargetValidator : public UTargetValidator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.LineOfSightValidator
/// Size: 0x0000 (0x000028 - 0x000028)
class ULineOfSightValidator : public UTargetValidator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.WithinAngleValidator
/// Size: 0x0008 (0x000028 - 0x000030)
class UWithinAngleValidator : public UTargetValidator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(float)                                     MaxAngle                                                    OFFSET(get<float>, {0x28, 4, 0, 0})
};

/// Class /Script/FSD.TeamResourcesComponent
/// Size: 0x0000 (0x000108 - 0x000108)
class UTeamResourcesComponent : public UResourcesComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
};

/// Class /Script/FSD.MiningPodCalldownLocation
/// Size: 0x0000 (0x000220 - 0x000220)
class AMiningPodCalldownLocation : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 544;

public:
};

/// Class /Script/FSD.MiningPodAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UMiningPodAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(EMiningPodRampState)                       rampState                                                   OFFSET(get<T>, {0x2B8, 1, 0, 0})
	CMember(EMiningPodState)                           PodState                                                    OFFSET(get<T>, {0x2B9, 1, 0, 0})
};

/// Class /Script/FSD.TemporaryBuff
/// Size: 0x0048 (0x000030 - 0x000078)
class UTemporaryBuff : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         Icon                                                        OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(bool)                                      ActivatesOnlyOnceWhenDrinking                               OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      IsTodaysSpecialBuff                                         OFFSET(get<bool>, {0x71, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TemporaryBuff.GetActivateOnlyWhenDrinking
	// bool GetActivateOnlyWhenDrinking();                                                                                      // [0xbd2970] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TemporaryBuff.DeActivateBuff
	// void DeActivateBuff(class APlayerCharacter* Player);                                                                     // [0x19ccf00] Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.TemporaryBuff.ActivateBuff
	// void ActivateBuff(class APlayerCharacter* Player);                                                                       // [0x19cc080] Native|Public|BlueprintCallable|Const 
};

/// Class /Script/FSD.StatTemporaryBuff
/// Size: 0x0050 (0x000078 - 0x0000C8)
class UStatTemporaryBuff : public UTemporaryBuff
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TMap<class UPawnStat*, float>)             ModifiedStats                                               OFFSET(get<T>, {0x78, 80, 0, 0})
};

/// Class /Script/FSD.RandomLoadoutBuff
/// Size: 0x0000 (0x000078 - 0x000078)
class URandomLoadoutBuff : public UTemporaryBuff
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
};

/// Struct /Script/FSD.TentacleAnimInstanceProxy
/// Size: 0x0100 (0x000770 - 0x000870)
class FTentacleAnimInstanceProxy : public FAnimInstanceProxy
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2160;

public:
};

/// Class /Script/FSD.TentacleAnimInstance
/// Size: 0x0888 (0x0002B8 - 0x000B40)
class UTentacleAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2880;

public:
	SMember(FTentacleAnimInstanceProxy)                AnimInstanceProxy                                           OFFSET(getStruct<T>, {0x2C0, 2160, 0, 0})
	DMember(bool)                                      UseActorRotationDuringExtension                             OFFSET(get<bool>, {0xB30, 1, 0, 0})
};

/// Class /Script/FSD.TentacleGrabAttack
/// Size: 0x0020 (0x0000F0 - 0x000110)
class UTentacleGrabAttack : public UAttackBaseComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(class UMeshComponent*)                     HeadMesh                                                    OFFSET(get<T>, {0xF0, 8, 0, 0})
	SMember(FName)                                     TerrainCheckSocket                                          OFFSET(getStruct<T>, {0xF8, 8, 0, 0})
	SMember(FVector)                                   TerrainCheckBox                                             OFFSET(getStruct<T>, {0x100, 12, 0, 0})


	/// Functions
	// Function /Script/FSD.TentacleGrabAttack.IsHeadNearTerrain
	// bool IsHeadNearTerrain();                                                                                                // [0x19cde40] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.TentaclePlant
/// Size: 0x0038 (0x000358 - 0x000390)
class ATentaclePlant : public AShootingPlant
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	DMember(bool)                                      IsVulnerable                                                OFFSET(get<bool>, {0x358, 1, 0, 0})
	DMember(int32_t)                                   AmountOfNodes                                               OFFSET(get<int32_t>, {0x35C, 4, 0, 0})
	DMember(float)                                     MinimumDistance                                             OFFSET(get<float>, {0x360, 4, 0, 0})
	DMember(float)                                     MinDistanceBetweenNodes                                     OFFSET(get<float>, {0x364, 4, 0, 0})
	CMember(class UClass*)                             NodeType                                                    OFFSET(get<T>, {0x368, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 NodePositioning                                             OFFSET(get<T>, {0x370, 8, 0, 0})
	CMember(TArray<class ATentaclePlantNode*>)         NodeInstances                                               OFFSET(get<T>, {0x378, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.TentaclePlant.OnRep_IsVulnerable
	// void OnRep_IsVulnerable();                                                                                               // [0x19ce340] Final|Native|Protected 
	// Function /Script/FSD.TentaclePlant.OnNodeDestroyed
	// void OnNodeDestroyed(class ATentaclePlantNode* InNode);                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TentaclePlant.OnNodeDamaged
	// void OnNodeDamaged(class ATentaclePlantNode* InNode);                                                                    // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.TentaclePlant.OnIsVulnerable
	// void OnIsVulnerable();                                                                                                   // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TentaclePlant.DestroyNode
	// void DestroyNode(class ATentaclePlantNode* Node);                                                                        // [0x19ccf90] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.TentaclePlantNode
/// Size: 0x0028 (0x000348 - 0x000370)
class ATentaclePlantNode : public AEnemyPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 880;

public:
	CMember(class UStaticMeshComponent*)               Mesh                                                        OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UClass*)                             TentacleCableType                                           OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class ASplineCableActor*)                  TentacleCable                                               OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class ATentaclePlant*)                     TentaclePlant                                               OFFSET(get<T>, {0x360, 8, 0, 0})
	DMember(int32_t)                                   TentacleIndex                                               OFFSET(get<int32_t>, {0x368, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TentaclePlantNode.OnPathCompleted
	// void OnPathCompleted(bool WasCompleted);                                                                                 // [0x19ce290] Final|Native|Protected 
};

/// Class /Script/FSD.TentaclePlantCable
/// Size: 0x0000 (0x000380 - 0x000380)
class ATentaclePlantCable : public ASplineCableActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
};

/// Struct /Script/FSD.TerminatorShoutState
/// Size: 0x0028 (0x000000 - 0x000028)
class FTerminatorShoutState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     Name                                                        OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	CMember(TArray<class USoundCue*>)                  Shouts                                                      OFFSET(get<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      Loop                                                        OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(float)                                     MaxRandomShoutDelay                                         OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     MinRandomShoutDelay                                         OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(bool)                                      Interruptable                                               OFFSET(get<bool>, {0x24, 1, 0, 0})
	DMember(bool)                                      PreventSubsequentDuplicate                                  OFFSET(get<bool>, {0x25, 1, 0, 0})
};

/// Struct /Script/FSD.TerminatorTalkMaterial
/// Size: 0x0010 (0x000000 - 0x000010)
class FTerminatorTalkMaterial : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UMaterialInstanceDynamic*)           Material                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     BasePower                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     AmplitudeMultiplier                                         OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Class /Script/FSD.TerminatorShoutComponent
/// Size: 0x0080 (0x0000B0 - 0x000130)
class UTerminatorShoutComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 304;

public:
	CMember(TArray<FTerminatorShoutState>)             States                                                      OFFSET(get<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShoutStarted                                              OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnShoutEnded                                                OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FTerminatorTalkMaterial>)           TalkMaterials                                               OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(class UPointLightComponent*)               TalkLight                                                   OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(float)                                     MaxRadius                                                   OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(float)                                     MaxIntensity                                                OFFSET(get<float>, {0xFC, 4, 0, 0})
	SMember(FName)                                     SoundOriginSocket                                           OFFSET(getStruct<T>, {0x100, 8, 0, 0})
	CMember(class UMeshComponent*)                     OwnerMesh                                                   OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class UAudioComponent*)                    ShoutInstance                                               OFFSET(get<T>, {0x128, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TerminatorShoutComponent.SetShoutState
	// void SetShoutState(ETerminatorShoutState State, float delayShout);                                                       // [0x19ce670] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TerminatorShoutComponent.OnShoutStart
	// void OnShoutStart();                                                                                                     // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TerminatorShoutComponent.OnShoutInstancePlayStateChanged
	// void OnShoutInstancePlayStateChanged(EAudioComponentPlayState PlayState);                                                // [0x19ce380] Final|Native|Public  
	// Function /Script/FSD.TerminatorShoutComponent.OnShoutEnd
	// void OnShoutEnd();                                                                                                       // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TerminatorShoutComponent.All_PlayShout
	// void All_PlayShout(class USoundCue* Shout);                                                                              // [0x19a3720] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.TerminatorEnemy
/// Size: 0x0078 (0x0003B0 - 0x000428)
class ATerminatorEnemy : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1064;

public:
	CMember(class UAnimMontage*)                       FlairAnimation                                              OFFSET(get<T>, {0x3C0, 8, 0, 0})
	DMember(float)                                     MinFlairAnimCooldown                                        OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     MaxFlairAnimationCooldown                                   OFFSET(get<float>, {0x3CC, 4, 0, 0})
	CMember(class UHitReactionComponent*)              HitReactions                                                OFFSET(get<T>, {0x3D0, 8, 0, 0})
	CMember(TSet<AActor*>)                             CurrentTargets                                              OFFSET(get<T>, {0x3D8, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.TerminatorEnemy.All_PlayFlairAnimation
	// void All_PlayFlairAnimation();                                                                                           // [0x17f8340] Net|Native|Event|NetMulticast|Protected 
};

/// Struct /Script/FSD.TerminatorTarget
/// Size: 0x0008 (0x000020 - 0x000028)
class FTerminatorTarget : public FTentacleTarget
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TWeakObjectPtr<class AActor*>)             TargetActor                                                 OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Class /Script/FSD.TerminatorTentacle
/// Size: 0x00F8 (0x000498 - 0x000590)
class ATerminatorTentacle : public ATentacleBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1424;

public:
	SMember(FMulticastInlineDelegate)                  OnTentacleStateChangedEvent                                 OFFSET(getStruct<T>, {0x4A8, 16, 0, 0})
	CMember(class UAnimSequenceBase*)                  FlairAnimation                                              OFFSET(get<T>, {0x4C0, 8, 0, 0})
	DMember(float)                                     MinFlairAnimCooldown                                        OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     MaxFlairAnimationCooldown                                   OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     SwaySpeed                                                   OFFSET(get<float>, {0x4D4, 4, 0, 0})
	DMember(bool)                                      Extended                                                    OFFSET(get<bool>, {0x4D8, 1, 0, 0})
	CMember(TArray<class UAnimMontage*>)               HitReactions                                                OFFSET(get<T>, {0x520, 16, 0, 0})
	CMember(ETerminatorTentacleState)                  TentacleState                                               OFFSET(get<T>, {0x530, 1, 0, 0})
	CMember(class USkeletalMeshComponent*)             HeadMesh                                                    OFFSET(get<T>, {0x538, 8, 0, 0})
	CMember(class UGrabberComponent*)                  GrabberComponent                                            OFFSET(get<T>, {0x540, 8, 0, 0})
	SMember(FTerminatorTarget)                         DesiredTarget                                               OFFSET(getStruct<T>, {0x548, 40, 0, 0})


	/// Functions
	// Function /Script/FSD.TerminatorTentacle.PlayHitReaction
	// void PlayHitReaction(float amount);                                                                                      // [0x19ce400] Final|Native|Protected 
	// Function /Script/FSD.TerminatorTentacle.OnStateChanged
	// void OnStateChanged(ETerminatorTentacleState NewState);                                                                  // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TerminatorTentacle.OnRep_TentacleState
	// void OnRep_TentacleState();                                                                                              // [0x19ce360] Final|Native|Protected 
	// Function /Script/FSD.TerminatorTentacle.OnRep_DesiredTarget
	// void OnRep_DesiredTarget();                                                                                              // [0x19ce320] Final|Native|Protected 
	// Function /Script/FSD.TerminatorTentacle.OnHeadExitedTerrain
	// void OnHeadExitedTerrain();                                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TerminatorTentacle.OnHeadEnteredTerrain
	// void OnHeadEnteredTerrain();                                                                                             // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TerminatorTentacle.OnGrabbedActorReleased
	// void OnGrabbedActorReleased(class AActor* Actor, bool fullGrabElapsed);                                                  // [0x19ce1c0] Final|Native|Protected 
	// Function /Script/FSD.TerminatorTentacle.OnDeathEvent
	// void OnDeathEvent(class UHealthComponentBase* EnemyHealth);                                                              // [0x19ce130] Final|Native|Protected 
	// Function /Script/FSD.TerminatorTentacle.MoveToGrabTarget
	// void MoveToGrabTarget(class AActor* Target, float grabDuration);                                                         // [0x19ce060] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TerminatorTentacle.ChangeTentacleState
	// void ChangeTentacleState(ETerminatorTentacleState NewState);                                                             // [0x19cc280] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TerminatorTentacle.All_PlayFlairAnimation
	// void All_PlayFlairAnimation();                                                                                           // [0x1847600] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.TentacleBusyComponent
/// Size: 0x0008 (0x000108 - 0x000110)
class UTentacleBusyComponent : public UEnemyLineOfSightComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:


	/// Functions
	// Function /Script/FSD.TentacleBusyComponent.ReleasedActor
	// void ReleasedActor(class AActor* Escape, bool fullGrab);                                                                 // [0x19ce480] Final|Native|Protected 
	// Function /Script/FSD.TentacleBusyComponent.GrabbedActor
	// void GrabbedActor(class AActor* victim);                                                                                 // [0x19cdd80] Final|Native|Protected 
	// Function /Script/FSD.TentacleBusyComponent.GetIsBusy
	// bool GetIsBusy();                                                                                                        // [0x19cdaf0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.TerminatorAnimInstance
/// Size: 0x0030 (0x000350 - 0x000380)
class UTerminatorAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 896;

public:
	SMember(FRotator)                                  Lean                                                        OFFSET(getStruct<T>, {0x350, 12, 0, 0})
	DMember(float)                                     ForwardLean                                                 OFFSET(get<float>, {0x368, 4, 0, 0})
};

/// Class /Script/FSD.TerminatorTentacleHeadAnimInstance
/// Size: 0x0010 (0x000350 - 0x000360)
class UTerminatorTentacleHeadAnimInstance : public UEnemyAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 864;

public:
	DMember(bool)                                      Idle                                                        OFFSET(get<bool>, {0x350, 1, 0, 0})
	DMember(bool)                                      Grabbing                                                    OFFSET(get<bool>, {0x351, 1, 0, 0})
	DMember(bool)                                      Grabbed                                                     OFFSET(get<bool>, {0x352, 1, 0, 0})
};

/// Class /Script/FSD.TerrainDetectComponent
/// Size: 0x0038 (0x0001F8 - 0x000230)
class UTerrainDetectComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	SMember(FMulticastInlineDelegate)                  OnPointRemoved                                              OFFSET(getStruct<T>, {0x200, 16, 0, 0})
	DMember(bool)                                      StartDetectOnBeginPlay                                      OFFSET(get<bool>, {0x210, 1, 0, 0})
	DMember(bool)                                      OnlyDetectOnServer                                          OFFSET(get<bool>, {0x211, 1, 0, 0})
	DMember(bool)                                      KillActorOnPointRemoved                                     OFFSET(get<bool>, {0x212, 1, 0, 0})
	SMember(FVector)                                   ActiveDetectPos                                             OFFSET(getStruct<T>, {0x214, 12, 0, 0})
	DMember(int32_t)                                   DetectorId                                                  OFFSET(get<int32_t>, {0x220, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TerrainDetectComponent.UpdateDetectLocation
	// void UpdateDetectLocation();                                                                                             // [0x19ceb30] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TerrainDetectComponent.StopDetect
	// void StopDetect();                                                                                                       // [0x19ce8f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TerrainDetectComponent.StartDetect
	// void StartDetect();                                                                                                      // [0x19ce8d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.TerrainDetectBoxComponent
/// Size: 0x0020 (0x000480 - 0x0004A0)
class UTerrainDetectBoxComponent : public UBoxComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1184;

public:
	SMember(FMulticastInlineDelegate)                  OnBoxExcavated                                              OFFSET(getStruct<T>, {0x480, 16, 0, 0})
	DMember(bool)                                      StartDetectOnBeginPlay                                      OFFSET(get<bool>, {0x490, 1, 0, 0})
	DMember(bool)                                      OnlyDetectOnServer                                          OFFSET(get<bool>, {0x491, 1, 0, 0})
	DMember(int32_t)                                   NumCornersToExcavate                                        OFFSET(get<int32_t>, {0x494, 4, 0, 0})
	DMember(int32_t)                                   NumCornersExcavated                                         OFFSET(get<int32_t>, {0x498, 4, 0, 0})
	DMember(bool)                                      KillActorOnPointRemoved                                     OFFSET(get<bool>, {0x49C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TerrainDetectBoxComponent.StartDetect
	// void StartDetect();                                                                                                      // [0x19ce8b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.TerrainDetectInterface
/// Size: 0x0000 (0x000028 - 0x000028)
class UTerrainDetectInterface : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.TerrainFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UTerrainFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.TerrainFunctionLibrary.GetDebrisTransformsInSphere
	// bool GetDebrisTransformsInSphere(class UObject* WorldContextObject, TArray<FMatrix>& outPositions, FVector& Location, float& Radius, ESpecialDebrisType& debrisType, float minDistToOther, bool calcPriority); // [0x19cd890] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TerrainFunctionLibrary.GetAllNavPointsInSphere
	// TArray<FVector> GetAllNavPointsInSphere(class UObject* WorldContextObject, FVector Origin, float Radius, DeepPathFinderSize pfSize, FVector searchNormal, float maxDegreesToSearchNormal); // [0x19cd590] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TerrainFunctionLibrary.FindPath
	// TArray<FVector> FindPath(class UObject* WorldContextObject, FVector Origin, FVector Destination, DeepPathFinderSize pfSize, DeepPathFinderType pfType); // [0x19cd3a0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TerrainFunctionLibrary.FindNearestSurfacePoint
	// void FindNearestSurfacePoint(class UObject* WorldContextObject, FVector inPoint, FVector& outPoint, FVector& Normal, bool& IsBLocked); // [0x19cd1c0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TerrainFunctionLibrary.DoesPathExist
	// bool DoesPathExist(class UObject* WorldContextObject, FVector Origin, FVector Destination, DeepPathFinderSize pfSize, DeepPathFinderType pfType); // [0x19cd020] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TerrainFunctionLibrary.CreateExplosionCrater2
	// void CreateExplosionCrater2(class UObject* WorldContextObject, FVector Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, FVector Normal, float NormalOffset, float NormalSqueeze, bool allowCustomBurntMaterial, bool DissolvePlatforms, class UTerrainMaterial* overrideBurnedMaterial); // [0x19cc990] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TerrainFunctionLibrary.CreateExplosionCrater
	// void CreateExplosionCrater(class UObject* WorldContextObject, FVector Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, bool allowCustomBurntMaterial, class UTerrainMaterial* overrideBurnedMaterial); // [0x19ccce0] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TerrainFunctionLibrary.CountDebrisOfType
	// int32_t CountDebrisOfType(class UObject* WorldContextObject, ESpecialDebrisType debrisType);                             // [0x19cc460] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.TerrainFunctionLibrary.CountDebrisInSphere
	// int32_t CountDebrisInSphere(class UObject* WorldContextObject, FVector Location, float Radius, ESpecialDebrisType debrisType); // [0x19cc300] Final|BlueprintAuthorityOnly|Native|Static|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.ProceduralFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UProceduralFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.ProceduralFunctionLibrary.SpawnTerrainImpact
	// void SpawnTerrainImpact(class UObject* WorldContextObject, class UFXSystemAsset* particle, FVector& Location, FRotator Rotation); // [0x19ce740] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ProceduralFunctionLibrary.GetProceduralSetup
	// class AProceduralSetup* GetProceduralSetup(class UObject* WorldContextObject);                                           // [0x19cdcc0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ProceduralFunctionLibrary.GetObjectiveXP
	// int32_t GetObjectiveXP(class UClass* objectiveClass, float missionLength);                                               // [0x19cdbf0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ProceduralFunctionLibrary.GetObjectiveCredits
	// int32_t GetObjectiveCredits(class UClass* objectiveClass, float missionLength);                                          // [0x19cdb20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ProceduralFunctionLibrary.GetBiome
	// class UBiome* GetBiome(class UClass* levelSetup);                                                                        // [0x19cd7c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.ProceduralFunctionLibrary.CreateEntrances
	// void CreateEntrances(class AProceduralSetup* pls, FRoomNode& Room, int32_t exitCount, int32_t entranceCount, class UDebrisPositioning* exitPositioning, class UDebrisPositioning* entrancePositioning); // [0x19cc530] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ProceduralFunctionLibrary.AllControllersFinishedTransitionToPlay
	// bool AllControllersFinishedTransitionToPlay(class UObject* WorldContextObject);                                          // [0x19cc110] Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.TerrainLatejoinComponent
/// Size: 0x0100 (0x0000B0 - 0x0001B0)
class UTerrainLatejoinComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 432;

public:


	/// Functions
	// Function /Script/FSD.TerrainLatejoinComponent.Server_TerrainLateJoinPartReceived
	// void Server_TerrainLateJoinPartReceived();                                                                               // [0x17f49e0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.TerrainLatejoinComponent.Client_TerrainLateJoinVisibleChunks
	// void Client_TerrainLateJoinVisibleChunks(TArray<uint32_t> VisibleChunks);                                                // [0x19d2010] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.TerrainLatejoinComponent.Client_TerrainLateJoinPart
	// void Client_TerrainLateJoinPart(TArray<FGrenadeExplodeOperationData> Explosions, TArray<FCarveWithColliderOperationData> ColliderCarves, TArray<FCarveWithSTLMeshOperationData> MeshCarves, TArray<FPickaxeDigOperationData> PickAxe, TArray<FRemoveFloatingIslandOperationData> floating, TArray<FDrillOperationData> Drills, TArray<FMeltOperationData> Melts, TArray<FSplineSegmentCarveOperationData> Splines, TArray<FCSGBuildOperationData> CSGBuilds, TArray<FTerrainSpawnDebrisOperationData> SpawnDebris); // [0x19d1be0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.TerrainLatejoinComponent.Client_TerrainLateJoinDone
	// void Client_TerrainLateJoinDone();                                                                                       // [0x18544e0] Net|NetReliableNative|Event|Public|NetClient 
	// Function /Script/FSD.TerrainLatejoinComponent.Client_TerrainLateJoinDebris
	// void Client_TerrainLateJoinDebris(TArray<int32_t> instanceComponentPairs);                                               // [0x19d1b40] Net|NetReliableNative|Event|Public|NetClient 
};

/// Class /Script/FSD.SmartRockTerrainMaterial
/// Size: 0x0000 (0x000030 - 0x000030)
class USmartRockTerrainMaterial : public UTerrainMaterialBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.TerrainMaterial
/// Size: 0x0140 (0x000078 - 0x0001B8)
class UTerrainMaterial : public UTerrainMaterialCore
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 440;

public:
	DMember(bool)                                      Collide                                                     OFFSET(get<bool>, {0x78, 1, 1, 0})
	DMember(bool)                                      Diggable                                                    OFFSET(get<bool>, {0x78, 1, 1, 1})
	DMember(bool)                                      CanBeDrilled                                                OFFSET(get<bool>, {0x78, 1, 1, 2})
	DMember(bool)                                      ExplosionProof                                              OFFSET(get<bool>, {0x78, 1, 1, 3})
	DMember(bool)                                      MeltsInFire                                                 OFFSET(get<bool>, {0x78, 1, 1, 4})
	DMember(bool)                                      PlatformDissolvable                                         OFFSET(get<bool>, {0x78, 1, 1, 5})
	DMember(bool)                                      Ephemeral                                                   OFFSET(get<bool>, {0x78, 1, 1, 6})
	CMember(class UResourceData*)                      ResourceData                                                OFFSET(get<T>, {0x80, 8, 0, 0})
	DMember(int32_t)                                   HitsNeededToMine                                            OFFSET(get<int32_t>, {0x88, 4, 0, 0})
	DMember(float)                                     PickAxeDigSize                                              OFFSET(get<float>, {0x8C, 4, 0, 0})
	DMember(bool)                                      RemoveDebrisOnFirstHit                                      OFFSET(get<bool>, {0x90, 1, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutLookAt                                                 OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutOnDig                                                  OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UTerrainType*)                       TerrainType                                                 OFFSET(get<T>, {0xA8, 8, 0, 0})
	SMember(FText)                                     InGameName                                                  OFFSET(getStruct<T>, {0xB8, 24, 0, 0})
	SMember(FText)                                     InGameDescription                                           OFFSET(getStruct<T>, {0xD0, 24, 0, 0})
	DMember(bool)                                      Precious                                                    OFFSET(get<bool>, {0xE8, 1, 1, 0})
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     DigParticles                                                OFFSET(get<T>, {0xF0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UMaterialInstance*>)  DigParticlesMaterialOverride                                OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     PartialDigParticles                                         OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          CrumbleSound                                                OFFSET(get<T>, {0x168, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          PartialMineSound                                            OFFSET(get<T>, {0x190, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TerrainMaterial.TestMaterialEffects
	// void TestMaterialEffects(class UTerrainMaterial* Material, TArray<FTestTerrainMaterialItem>& Items);                     // [0x19d3020] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.TerrainMaterial.TestDecals
	// void TestDecals(class UTerrainMaterial* Material, TArray<FTestTerrainMaterialDecalItem>& Items);                         // [0x19d2f00] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.TerrainMaterial.SpawnPartialDigParticles
	// class UFXSystemComponent* SpawnPartialDigParticles(class UObject* WorldContextObject, FVector Location, FRotator Rotation); // [0x19d2d80] Final|Native|Public|HasDefaults|BlueprintCallable|Const 
	// Function /Script/FSD.TerrainMaterial.SpawnDigParticles
	// class UFXSystemComponent* SpawnDigParticles(class UObject* WorldContextObject, FVector Location, FRotator Rotation, float Density); // [0x19d2be0] Final|Native|Public|HasDefaults|BlueprintCallable|Const 
	// Function /Script/FSD.TerrainMaterial.IsPrecious
	// bool IsPrecious();                                                                                                       // [0x19b81f0] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TerrainMaterial.GetInGameName
	// FText GetInGameName();                                                                                                   // [0x19d22f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TerrainMaterial.GetDigParticlesMaterialOverride
	// class UMaterialInstance* GetDigParticlesMaterialOverride();                                                              // [0x19d2280] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.TerrainType
/// Size: 0x0040 (0x000030 - 0x000070)
class UTerrainType : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	DMember(bool)                                      Collide                                                     OFFSET(get<bool>, {0x30, 1, 1, 0})
	DMember(bool)                                      Diggable                                                    OFFSET(get<bool>, {0x30, 1, 1, 1})
	DMember(bool)                                      Precious                                                    OFFSET(get<bool>, {0x30, 1, 1, 2})
	CMember(class USoundCue*)                          DebrisStandardSoundCue                                      OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TWeakObjectPtr<class UParticleSystem*>)    DebrisStandardParticles                                     OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.TerrainMaterialsCollection
/// Size: 0x0030 (0x000030 - 0x000060)
class UTerrainMaterialsCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(TArray<class UTerrainMaterial*>)           Materials                                                   OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<class UTerrainType*>)               TerrainTypes                                                OFFSET(get<T>, {0x40, 16, 0, 0})
};

/// Class /Script/FSD.TerrainMaterialSettings
/// Size: 0x0058 (0x000030 - 0x000088)
class UTerrainMaterialSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 136;

public:
	CMember(TArray<FDecalData>)                        TwoHits                                                     OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<FDecalData>)                        ThreeHits                                                   OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<FDecalData>)                        FourHits                                                    OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<FDecalData>)                        FiveHits                                                    OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<class UTerrainMaterial*>)           PlagueMaterials                                             OFFSET(get<T>, {0x70, 16, 0, 0})
	DMember(float)                                     InfectionIncreasePerPlagueHit                               OFFSET(get<float>, {0x80, 4, 0, 0})
};

/// Class /Script/FSD.TerrainModifyingProjectile
/// Size: 0x0058 (0x000340 - 0x000398)
class ATerrainModifyingProjectile : public AProjectile
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 920;

public:
	SMember(FMulticastInlineDelegate)                  OnRevertToNormal                                            OFFSET(getStruct<T>, {0x340, 16, 0, 0})
	CMember(class UTerrainMaterial*)                   Terrain                                                     OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   OriginalGroundMaterial                                      OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class UStaticMesh*)                        CarveMesh                                                   OFFSET(get<T>, {0x360, 8, 0, 0})
	SMember(FVector)                                   CarveMeshScale                                              OFFSET(getStruct<T>, {0x368, 12, 0, 0})
	SMember(FVector)                                   LastHitLocation                                             OFFSET(getStruct<T>, {0x374, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x380, 4, 0, 0})
	DMember(bool)                                      Revert                                                      OFFSET(get<bool>, {0x384, 1, 0, 0})
	DMember(float)                                     TimeOnGround                                                OFFSET(get<float>, {0x388, 4, 0, 0})
	DMember(float)                                     ExpensiveCarveNoise                                         OFFSET(get<float>, {0x38C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TerrainModifyingProjectile.Tick
	// void Tick(float DeltaSeconds);                                                                                           // [0x19d3160] Native|Public        
	// Function /Script/FSD.TerrainModifyingProjectile.GetRadius
	// float GetRadius();                                                                                                       // [0x189dc50] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TerrainModifyingProjectile.BeginPlay
	// void BeginPlay();                                                                                                        // [0x19d1b20] Native|Public        
};

/// Class /Script/FSD.AllPiercingHitscanComponent
/// Size: 0x00B0 (0x000310 - 0x0003C0)
class UAllPiercingHitscanComponent : public UHitscanComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 960;

public:
	DMember(float)                                     PiercingDepth                                               OFFSET(get<float>, {0x3AC, 4, 0, 0})
	DMember(int32_t)                                   TracePartitions                                             OFFSET(get<int32_t>, {0x3B4, 4, 0, 0})
};

/// Struct /Script/FSD.TerrainPlacementBox
/// Size: 0x001C (0x000000 - 0x00001C)
class FTerrainPlacementBox : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   Min                                                         OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Max                                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	CMember(ETerrainPlacementBoxType)                  PlacementType                                               OFFSET(get<T>, {0x18, 1, 0, 0})
};

/// Struct /Script/FSD.DebrisCapsule
/// Size: 0x0020 (0x000000 - 0x000020)
class FDebrisCapsule : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(int32_t)                                   ID                                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FVector)                                   Start                                                       OFFSET(getStruct<T>, {0x4, 12, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Class /Script/FSD.TerrainPlacementComponent
/// Size: 0x0088 (0x0001F8 - 0x000280)
class UTerrainPlacementComponent : public USceneComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	CMember(TArray<FTerrainPlacementBox>)              TerrainCheckers                                             OFFSET(get<T>, {0x1F8, 16, 0, 0})
	CMember(EDebrisColliderType)                       CapsuleType                                                 OFFSET(get<T>, {0x208, 1, 0, 0})
	SMember(FDebrisCapsule)                            Capsule                                                     OFFSET(getStruct<T>, {0x20C, 32, 0, 0})
	DMember(int32_t)                                   BlockerIDHack                                               OFFSET(get<int32_t>, {0x22C, 4, 0, 0})
	CMember(class UWorld*)                             BlockerWorld                                                OFFSET(get<T>, {0x270, 8, 0, 0})
	DMember(bool)                                      RemoveBlockerOnBeingMatch                                   OFFSET(get<bool>, {0x278, 1, 0, 0})
	DMember(bool)                                      RemoveBlockerOnDeath                                        OFFSET(get<bool>, {0x279, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TerrainPlacementComponent.RemoveBlockers
	// void RemoveBlockers();                                                                                                   // [0x19d2920] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TerrainPlacementComponent.OnActorDeath
	// void OnActorDeath(class UHealthComponentBase* Health);                                                                   // [0x19d2710] Final|Native|Protected 
	// Function /Script/FSD.TerrainPlacementComponent.MatchStarted
	// void MatchStarted();                                                                                                     // [0x19d2530] Final|Native|Protected 
	// Function /Script/FSD.TerrainPlacementComponent.AddBlockers
	// void AddBlockers(class AProceduralSetup* ProceduralSetup, FTransform& Transform);                                        // [0x19d1a00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.TerrainScannerItem
/// Size: 0x0070 (0x0003E0 - 0x000450)
class ATerrainScannerItem : public AAnimatedItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1104;

public:
	DMember(int32_t)                                   TerrainScannerZoomDirection                                 OFFSET(get<int32_t>, {0x3E0, 4, 0, 0})
	SMember(FName)                                     ScannerAttachSocketName                                     OFFSET(getStruct<T>, {0x3E4, 8, 0, 0})
	DMember(float)                                     TerrainScannerStartAngle                                    OFFSET(get<float>, {0x3F0, 4, 0, 0})
	DMember(float)                                     TerrainScannerScale                                         OFFSET(get<float>, {0x3F4, 4, 0, 0})
	DMember(float)                                     DelayedTerrainScannerScale                                  OFFSET(get<float>, {0x3F8, 4, 0, 0})
	DMember(float)                                     DelayedTerrainScannerZoom                                   OFFSET(get<float>, {0x3FC, 4, 0, 0})
	DMember(bool)                                      IsLookingAtMap                                              OFFSET(get<bool>, {0x401, 1, 0, 0})
	DMember(bool)                                      UpdateMapToolActors                                         OFFSET(get<bool>, {0x402, 1, 0, 0})
	CMember(TArray<class UAnimMontage*>)               UseLoopsFP                                                  OFFSET(get<T>, {0x408, 16, 0, 0})
	CMember(class UAnimMontage*)                       EndFP                                                       OFFSET(get<T>, {0x418, 8, 0, 0})
	CMember(TArray<class UAnimMontage*>)               UseLoopsTP                                                  OFFSET(get<T>, {0x420, 16, 0, 0})
	CMember(class UAnimMontage*)                       EndTP                                                       OFFSET(get<T>, {0x430, 8, 0, 0})
	CMember(class USceneComponent*)                    TerrainScannerRoot                                          OFFSET(get<T>, {0x440, 8, 0, 0})
	CMember(class USceneCaptureComponent2D*)           TerrainScannerCapture                                       OFFSET(get<T>, {0x448, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.TerrainScannerItem.Server_SetIslookingAtMap
	// void Server_SetIslookingAtMap(bool lookingAtMap);                                                                        // [0x186cbc0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.TerrainScannerItem.OnRep_IsLookingAtMap
	// void OnRep_IsLookingAtMap();                                                                                             // [0x19d2900] Final|Native|Protected 
};

/// Class /Script/FSD.TerrainScannerStaticMesh
/// Size: 0x0010 (0x0004E0 - 0x0004F0)
class UTerrainScannerStaticMesh : public UStaticMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1264;

public:
	DMember(bool)                                      bVisibleAtBeginPlay                                         OFFSET(get<bool>, {0x4E0, 1, 0, 0})
	DMember(bool)                                      bHideOnDeath                                                OFFSET(get<bool>, {0x4E1, 1, 0, 0})
	DMember(bool)                                      bUseFogOfWar                                                OFFSET(get<bool>, {0x4E2, 1, 0, 0})
	DMember(bool)                                      bVisibleOnScanner                                           OFFSET(get<bool>, {0x4E3, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TerrainScannerStaticMesh.SetVisibleOnScanner
	// void SetVisibleOnScanner(bool InShowOnScanner);                                                                          // [0x19d2a70] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TerrainScannerStaticMesh.OnOwnerDeath
	// void OnOwnerDeath(class UHealthComponentBase* InHealthComponent);                                                        // [0x19d2830] Final|Native|Protected 
};

/// Class /Script/FSD.TerrainScannerSplineMesh
/// Size: 0x0008 (0x000578 - 0x000580)
class UTerrainScannerSplineMesh : public USplineMeshComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1408;

public:
	DMember(bool)                                      bVisibleAtBeginPlay                                         OFFSET(get<bool>, {0x578, 1, 0, 0})
	DMember(bool)                                      bHideOnDeath                                                OFFSET(get<bool>, {0x579, 1, 0, 0})
	DMember(bool)                                      bUseFogOfWar                                                OFFSET(get<bool>, {0x57A, 1, 0, 0})
	DMember(bool)                                      bVisibleOnScanner                                           OFFSET(get<bool>, {0x57B, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TerrainScannerSplineMesh.SetVisibleOnScanner
	// void SetVisibleOnScanner(bool InShowOnScanner);                                                                          // [0x19d29e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TerrainScannerSplineMesh.OnOwnerDeath
	// void OnOwnerDeath(class UHealthComponentBase* InHealthComponent);                                                        // [0x19d27a0] Final|Native|Protected 
};

/// Class /Script/FSD.TetherComponent
/// Size: 0x00A8 (0x0000B0 - 0x000158)
class UTetherComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 344;

public:
	SMember(FMulticastInlineDelegate)                  OnPowerChanged                                              OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnConnectionChanged                                         OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTetherMessage                                             OFFSET(getStruct<T>, {0xD0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnConnectionRangeUpdated                                    OFFSET(getStruct<T>, {0xE0, 16, 0, 0})
	CMember(class UMeshComponent*)                     TetherMesh                                                  OFFSET(get<T>, {0xF8, 8, 0, 0})
	DMember(bool)                                      AutoSetup                                                   OFFSET(get<bool>, {0x100, 1, 0, 0})
	CMember(TArray<class UTetherComponent*>)           ConnectionHistory                                           OFFSET(get<T>, {0x108, 16, 0, 0})
	SMember(FName)                                     ConnectionPointName                                         OFFSET(getStruct<T>, {0x128, 8, 0, 0})
	CMember(class UTetherComponent*)                   ForwardConnection                                           OFFSET(get<T>, {0x130, 8, 0, 0})
	CMember(class UTetherComponent*)                   backConnection                                              OFFSET(get<T>, {0x138, 8, 0, 0})
	DMember(float)                                     ConnectionDistance                                          OFFSET(get<float>, {0x140, 4, 0, 0})
	CMember(ETetherConnectionMode)                     ConnectionMode                                              OFFSET(get<T>, {0x144, 4, 0, 0})
	DMember(int32_t)                                   ConnectionPriority                                          OFFSET(get<int32_t>, {0x148, 4, 0, 0})
	DMember(int32_t)                                   ConnectionHistorySize                                       OFFSET(get<int32_t>, {0x14C, 4, 0, 0})
	DMember(bool)                                      GeneratesPower                                              OFFSET(get<bool>, {0x150, 1, 0, 0})
	DMember(bool)                                      PeriodicConnectionValidation                                OFFSET(get<bool>, {0x151, 1, 0, 0})
	DMember(bool)                                      hasPower                                                    OFFSET(get<bool>, {0x152, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TetherComponent.ToggleConnectionValidation
	// void ToggleConnectionValidation(bool Enabled, bool reactivate);                                                          // [0x19d31f0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.StopLoSTimer
	// void StopLoSTimer();                                                                                                     // [0x19d2ee0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.StartLoSTimer
	// void StartLoSTimer();                                                                                                    // [0x19d2ec0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.SetupConnectionpoint
	// void SetupConnectionpoint(class UMeshComponent* Mesh, FName& SocketName);                                                // [0x19d2b00] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.SetConnectionRange
	// void SetConnectionRange(float range);                                                                                    // [0x19d2960] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.ResetConnectionHistory
	// void ResetConnectionHistory();                                                                                           // [0x19d2940] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.OnRep_HasPower
	// void OnRep_HasPower();                                                                                                   // [0x19d28e0] Final|Native|Protected 
	// Function /Script/FSD.TetherComponent.OnRep_ForwardConnection
	// void OnRep_ForwardConnection();                                                                                          // [0x19d28c0] Final|Native|Protected 
	// Function /Script/FSD.TetherComponent.OnRep_BackConnection
	// void OnRep_BackConnection();                                                                                             // [0x19d28c0] Final|Native|Protected 
	// Function /Script/FSD.TetherComponent.MessageTetherLine
	// void MessageTetherLine(FName& Message, float Delay, ETetherMessageDirection messageDirection);                           // [0x19d25f0] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.MessageBody
	// void MessageBody(FTetherMessageSettings& Message);                                                                       // [0x19d2550] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.TetherComponent.IsStartOfLine
	// bool IsStartOfLine();                                                                                                    // [0x19d24f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TetherComponent.IsFullyConnected
	// bool IsFullyConnected();                                                                                                 // [0x19d24b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TetherComponent.IsEndOfLine
	// bool IsEndOfLine();                                                                                                      // [0x19d2470] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TetherComponent.IsConnected
	// bool IsConnected();                                                                                                      // [0x19d2430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TetherComponent.GetTetherlineEnd
	// class UTetherComponent* GetTetherlineEnd(bool front);                                                                    // [0x19d2390] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.GetHasPower
	// bool GetHasPower();                                                                                                      // [0x19d22d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TetherComponent.GetForwardConnection
	// class UTetherComponent* GetForwardConnection();                                                                          // [0x19d22b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.GetConnectionRange
	// float GetConnectionRange();                                                                                              // [0x19d2260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TetherComponent.GetConnectionPoint
	// FVector GetConnectionPoint();                                                                                            // [0x19d2220] Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TetherComponent.GetConnectionHistory
	// TArray<UTetherComponent*> GetConnectionHistory();                                                                        // [0x19d2190] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.GetBackConnection
	// class UTetherComponent* GetBackConnection();                                                                             // [0x19d2170] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.DisconnectFromTetherLine
	// void DisconnectFromTetherLine(bool Deactivate);                                                                          // [0x19d20e0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TetherComponent.ConnectToTetherLine
	// bool ConnectToTetherLine();                                                                                              // [0x19d20b0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.Tether
/// Size: 0x0050 (0x000268 - 0x0002B8)
class ATether : public ACarriableItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	CMember(class USkeletalMeshComponent*)             BaseMesh                                                    OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UInstantUsable*)                     UsableComponent                                             OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(class UCarriableComponent*)                Carry                                                       OFFSET(get<T>, {0x278, 8, 0, 0})
	CMember(class USphereComponent*)                   UseTrigger                                                  OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  TetherBeam                                                  OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USphereComponent*)                   PysicalCollision                                            OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UDamageComponent*)                   ExplosionDamage                                             OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UParticleSystem*)                    ExplosionParticle                                           OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class USoundCue*)                          ExplosionSound                                              OFFSET(get<T>, {0x2A8, 8, 0, 0})
	DMember(bool)                                      IsOnGround                                                  OFFSET(get<bool>, {0x2B0, 1, 0, 0})
	DMember(float)                                     KnockBackForce                                              OFFSET(get<float>, {0x2B4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.Tether.SetIsOnGround
	// void SetIsOnGround(bool IsOnGround);                                                                                     // [0x19d8110] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.Tether.OnDronePickup
	// void OnDronePickup();                                                                                                    // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Tether.OnDroneDrop
	// void OnDroneDrop();                                                                                                      // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Tether.OnClosed
	// void OnClosed();                                                                                                         // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.Tether.Explode
	// void Explode();                                                                                                          // [0x1818390] Net|Native|Event|NetMulticast|Public|BlueprintCallable 
};

/// Class /Script/FSD.TetherStation
/// Size: 0x0020 (0x000220 - 0x000240)
class ATetherStation : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class USceneComponent*)                    SceneRoot                                                   OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             BaseMesh                                                    OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class UClass*)                             FacilityGeneratorLineType                                   OFFSET(get<T>, {0x230, 8, 0, 0})
	DMember(bool)                                      AreGeneratorsReady                                          OFFSET(get<bool>, {0x238, 1, 0, 0})
	DMember(bool)                                      FacilityActive                                              OFFSET(get<bool>, {0x239, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TetherStation.SpawnGeneratorLines
	// void SpawnGeneratorLines(FTransform& startL, FTransform& startR, TArray<FTransform>& endL, TArray<FTransform>& endR, class AFacilityGeneratorLine*& outLineL, class AFacilityGeneratorLine*& outLineR); // [0x19d82b0] Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.TetherStation.SetGeneratorsReady
	// void SetGeneratorsReady(bool ready);                                                                                     // [0x19d8080] Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.TetherStation.Onrep_FacilityActive
	// void Onrep_FacilityActive();                                                                                             // [0x19d7900] Final|Native|Private 
	// Function /Script/FSD.TetherStation.OnRep_AreGeneratorsReady
	// void OnRep_AreGeneratorsReady();                                                                                         // [0x19d77b0] Final|Native|Private 
	// Function /Script/FSD.TetherStation.OnGeneratorsReady
	// void OnGeneratorsReady();                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TetherStation.OnActivated
	// void OnActivated();                                                                                                      // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TetherStation.DisableShields
	// void DisableShields();                                                                                                   // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TetherStation.ActivateFacility
	// void ActivateFacility();                                                                                                 // [0x19d6ae0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.TetherAnimInstance
/// Size: 0x0008 (0x0002B8 - 0x0002C0)
class UTetherAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	DMember(bool)                                      SearchingForConnection                                      OFFSET(get<bool>, {0x2B8, 1, 0, 0})
};

/// Class /Script/FSD.Throwable
/// Size: 0x0000 (0x000028 - 0x000028)
class UThrowable : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.ThrownGrenadeItem
/// Size: 0x00A0 (0x000380 - 0x000420)
class AThrownGrenadeItem : public AItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1056;

public:
	SMember(FMulticastInlineDelegate)                  OnGrenadeThrown                                             OFFSET(getStruct<T>, {0x388, 16, 0, 0})
	CMember(class UPlayerAnimInstance*)                FPAnimInstance                                              OFFSET(get<T>, {0x3A0, 8, 0, 0})
	CMember(class UPlayerAnimInstance*)                TPAnimInstance                                              OFFSET(get<T>, {0x3A8, 8, 0, 0})
	CMember(class UItemCharacterAnimationSet*)         CharacterAnimationSet                                       OFFSET(get<T>, {0x3B0, 8, 0, 0})
	SMember(FVector)                                   ThrowOffset                                                 OFFSET(getStruct<T>, {0x3B8, 12, 0, 0})
	DMember(float)                                     ThrowAngle                                                  OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(int32_t)                                   MaxGrenades                                                 OFFSET(get<int32_t>, {0x3C8, 4, 0, 0})
	DMember(int32_t)                                   Grenades                                                    OFFSET(get<int32_t>, {0x3CC, 4, 0, 0})
	DMember(float)                                     GrenadeCooldownRemaining                                    OFFSET(get<float>, {0x3D0, 4, 0, 0})
	CMember(EThrownGrenadeItemState)                   State                                                       OFFSET(get<T>, {0x3D4, 4, 0, 0})
	CMember(class UClass*)                             GrenadeClass                                                OFFSET(get<T>, {0x3D8, 8, 0, 0})
	CMember(class UGrenadeAnimationSet*)               DefaultGrenadeAnimationSet                                  OFFSET(get<T>, {0x3E0, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               GrenadeMeshInstance                                         OFFSET(get<T>, {0x3F0, 8, 0, 0})
	CMember(class UFSDAudioComponent*)                 CookSound                                                   OFFSET(get<T>, {0x3F8, 8, 0, 0})
	DMember(bool)                                      CooldownIsDone                                              OFFSET(get<bool>, {0x418, 1, 0, 0})
	DMember(bool)                                      HasRejoinedInitialized                                      OFFSET(get<bool>, {0x419, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ThrownGrenadeItem.UpdateCookTime
	// void UpdateCookTime(float Time);                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ThrownGrenadeItem.SetRemainingCooldown
	// void SetRemainingCooldown(float CoolDown);                                                                               // [0x19d81a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ThrownGrenadeItem.Server_ThrowGrenade
	// void Server_ThrowGrenade(FVector StartLocation, float cookTime);                                                         // [0x19d7fb0] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.ThrownGrenadeItem.Server_SetState
	// void Server_SetState(EThrownGrenadeItemState itemState);                                                                 // [0x19d7e50] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ThrownGrenadeItem.Server_Resupply
	// void Server_Resupply(float percentage);                                                                                  // [0x19d7dc0] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.ThrownGrenadeItem.ResupplyGrenadesAmount
	// void ResupplyGrenadesAmount(int32_t& amount);                                                                            // [0x19d7a20] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.ThrownGrenadeItem.ResupplyGrenades
	// void ResupplyGrenades(float percentage);                                                                                 // [0x19d79a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ThrownGrenadeItem.PredictGrenadePath
	// TArray<FVector> PredictGrenadePath();                                                                                    // [0x19d7920] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.ThrownGrenadeItem.OnRep_State
	// void OnRep_State();                                                                                                      // [0x19d7850] Final|Native|Protected 
	// Function /Script/FSD.ThrownGrenadeItem.OnRep_GrenadeCount
	// void OnRep_GrenadeCount();                                                                                               // [0x19d77f0] Final|Native|Protected 
	// Function /Script/FSD.ThrownGrenadeItem.OnRep_GrenadeClass
	// void OnRep_GrenadeClass();                                                                                               // [0x19d77d0] Final|Native|Protected 
	// Function /Script/FSD.ThrownGrenadeItem.OnGrenadeThrown__DelegateSignature
	// void OnGrenadeThrown__DelegateSignature();                                                                               // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.ThrownGrenadeItem.GrenadeThrowFinished
	// void GrenadeThrowFinished();                                                                                             // [0x19d76a0] Final|Native|Protected 
	// Function /Script/FSD.ThrownGrenadeItem.GetPredictedLastPosAndVelocity
	// void GetPredictedLastPosAndVelocity(FVector& Pos, FVector& Velocity);                                                    // [0x19d75a0] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.ThrownGrenadeItem.GetGrenadeThrowVelocity
	// float GetGrenadeThrowVelocity();                                                                                         // [0x19d7570] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ThrownGrenadeItem.GetGrenadeThrowRotation
	// FRotator GetGrenadeThrowRotation();                                                                                      // [0x19d7530] Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ThrownGrenadeItem.GetGrenadeGravity
	// float GetGrenadeGravity();                                                                                               // [0x19d7500] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ThrownGrenadeItem.GetGrenadeDuration
	// float GetGrenadeDuration();                                                                                              // [0x19d74d0] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.TickableActionBase
/// Size: 0x0010 (0x000030 - 0x000040)
class UTickableActionBase : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FSD.MiniTimerAction
/// Size: 0x0028 (0x000040 - 0x000068)
class UMiniTimerAction : public UTickableActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTick                                                      OFFSET(getStruct<T>, {0x50, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MiniTimerAction.TickDelegate__DelegateSignature
	// void TickDelegate__DelegateSignature(float DeltaTime, float NormalizedTime);                                             // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.MiniTimerAction.MiniTimer
	// class UMiniTimerAction* MiniTimer(class UObject* WorldContext, float InDuration);                                        // [0x19d76e0] Final|Native|Static|Protected|BlueprintCallable 
};

/// Struct /Script/FSD.TextCounterEntry
/// Size: 0x0028 (0x000000 - 0x000028)
class FTextCounterEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(class UTextBlock*)                         TextBlock                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     Format                                                      OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Class /Script/FSD.MultiTextCounterAction
/// Size: 0x0078 (0x000040 - 0x0000B8)
class UMultiTextCounterAction : public UTickableActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTick                                                      OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(class UTextBlock*)                         TotalBlock                                                  OFFSET(get<T>, {0x60, 8, 0, 0})
	SMember(FText)                                     TotalFormat                                                 OFFSET(getStruct<T>, {0x68, 24, 0, 0})
	CMember(TArray<FTextCounterEntry>)                 Entries                                                     OFFSET(get<T>, {0x80, 16, 0, 0})
	DMember(float)                                     CountSpeed                                                  OFFSET(get<float>, {0x90, 4, 0, 0})
	CMember(class USoundCue*)                          CountingSound                                               OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(class UAudioComponent*)                    AudioComponent                                              OFFSET(get<T>, {0xA0, 8, 0, 0})
	CMember(class UObject*)                            WorldContext                                                OFFSET(get<T>, {0xA8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.MultiTextCounterAction.TickDelegate__DelegateSignature
	// void TickDelegate__DelegateSignature();                                                                                  // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.MultiTextCounterAction.StartMultiTextCounter
	// class UMultiTextCounterAction* StartMultiTextCounter(class UObject* InWorldContext, class UTextBlock* InTotalBlock, FText InTotalFormat, float InCountSpeed, class USoundCue* InCountingSound, TArray<FTextCounterEntry> InEntries); // [0x19d8590] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.PendingLatentActionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UPendingLatentActionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.PendingLatentActionLibrary.WaitOneFrame
	// void WaitOneFrame(class UObject* WorldContextObject, FLatentActionInfo LatentInfo);                                      // [0x19d8a70] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.MoveComponentToAction
/// Size: 0x0090 (0x000040 - 0x0000D0)
class UMoveComponentToAction : public UTickableActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(TWeakObjectPtr<class USceneComponent*>)    Component                                                   OFFSET(get<T>, {0x40, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  Completed                                                   OFFSET(getStruct<T>, {0xC0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.MoveComponentToAction.EaseComponentTo
	// class UMoveComponentToAction* EaseComponentTo(class UObject* WorldContext, class USceneComponent* InComponent, FTransform InEndTransform, TEnumAsByte<EEasingFunc> InEasingMode, bool InWorldSpace, float InDuration); // [0x19d7070] Final|Native|Static|Protected|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.MoveComponentToAction.CompletedDelegate__DelegateSignature
	// void CompletedDelegate__DelegateSignature(class USceneComponent* Component);                                             // [0x1d6f900] MulticastDelegate|Public|Delegate 
};

/// Class /Script/FSD.TowerEventModule
/// Size: 0x0098 (0x0002F8 - 0x000390)
class ATowerEventModule : public AFSDPawn
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 912;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x300, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x308, 8, 0, 0})
	CMember(class UEnemyHealthComponent*)              Health                                                      OFFSET(get<T>, {0x310, 8, 0, 0})
	CMember(class UArmorHealthDamageComponent*)        ArmorDamage                                                 OFFSET(get<T>, {0x318, 8, 0, 0})
	CMember(class UWeakpointGlowComponent*)            WeakpointGlow                                               OFFSET(get<T>, {0x320, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           SmokeParticles                                              OFFSET(get<T>, {0x328, 8, 0, 0})
	SMember(FRotator)                                  MainBodyRotation                                            OFFSET(getStruct<T>, {0x330, 12, 0, 0})
	CMember(class USkeletalMesh*)                      DestroyedMesh                                               OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class USoundCue*)                          ExplosionSound                                              OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UParticleSystem*)                    ExplosionEffect                                             OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class ATowerEventModule*)                  PreviousModule                                              OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class ATowerEventModule*)                  NextModule                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	CMember(class UStaticMesh*)                        ArmorMesh                                                   OFFSET(get<T>, {0x368, 8, 0, 0})
	DMember(int32_t)                                   ArmorPieces                                                 OFFSET(get<int32_t>, {0x370, 4, 0, 0})
	DMember(float)                                     ArmorLifetime                                               OFFSET(get<float>, {0x374, 4, 0, 0})
	DMember(float)                                     ArmorPopForce                                               OFFSET(get<float>, {0x378, 4, 0, 0})
	DMember(float)                                     ArmorShedDelay                                              OFFSET(get<float>, {0x37C, 4, 0, 0})
	CMember(TArray<class UStaticMeshComponent*>)       ArmorMeshes                                                 OFFSET(get<T>, {0x380, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.TowerEventModule.OnAttack
	// void OnAttack();                                                                                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TowerEventModule.HideArmorPlates
	// void HideArmorPlates();                                                                                                  // [0x19d76c0] Final|Native|Protected 
	// Function /Script/FSD.TowerEventModule.DestroyArmor
	// void DestroyArmor();                                                                                                     // [0x19d6fb0] Final|Native|Protected 
};

/// Class /Script/FSD.AimingTowerEventModule
/// Size: 0x0018 (0x000390 - 0x0003A8)
class AAimingTowerEventModule : public ATowerEventModule
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 936;

public:
	SMember(FRotator)                                  AimRotation                                                 OFFSET(getStruct<T>, {0x390, 12, 0, 0})
	CMember(class AActor*)                             CurrentTarget                                               OFFSET(get<T>, {0x3A0, 8, 0, 0})
};

/// Class /Script/FSD.TracerManager
/// Size: 0x0098 (0x000030 - 0x0000C8)
class UTracerManager : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	DMember(float)                                     StartScale                                                  OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     WhizByStartDistance                                         OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     WhizByMaxDistanceFromTrajectory                             OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(float)                                     WhizBySpeed                                                 OFFSET(get<float>, {0x5C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TracerManager.AddTracer
	// void AddTracer(FVector Origin, FVector& Destination, float Speed, class UParticleSystem* particle, float MinDistance, float Offset, class UParticleSystem* Trail); // [0x19d6b00] Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.TrackBuilderMovement
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UTrackBuilderMovement : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	DMember(float)                                     MovementSpeed                                               OFFSET(get<float>, {0xB0, 4, 0, 0})
};

/// Struct /Script/FSD.PipelineMovementData
/// Size: 0x001C (0x000000 - 0x00001C)
class FPipelineMovementData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(int32_t)                                   Direction                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      UpToSpeed                                                   OFFSET(get<bool>, {0xC, 1, 0, 0})
	DMember(float)                                     Acceleration                                                OFFSET(get<float>, {0x10, 4, 0, 0})
	CMember(TWeakObjectPtr<class APipelineSegment*>)   PipelineSegment                                             OFFSET(get<T>, {0x14, 8, 0, 0})
};

/// Class /Script/FSD.TrackMovementStateComponent
/// Size: 0x01B0 (0x000100 - 0x0002B0)
class UTrackMovementStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UAudioComponent*)                    AudioStartComponent                                         OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UAudioComponent*)                    AudioDuringComponent                                        OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(class UAudioComponent*)                    AudioStopComponent                                          OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundBase*>)         AudioOnStart                                                OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundBase*>)         AudioOnDuring                                               OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundBase*>)         AudioOnStop                                                 OFFSET(get<T>, {0x168, 8, 0, 0})
	DMember(float)                                     AudioOnFadeOut                                              OFFSET(get<float>, {0x190, 4, 0, 0})
	CMember(class UDialogDataAsset*)                   StateUpdateShout                                            OFFSET(get<T>, {0x198, 8, 0, 0})
	DMember(float)                                     StateUpdateShoutFrequencySecsMin                            OFFSET(get<float>, {0x1A0, 4, 0, 0})
	DMember(float)                                     StateUpdateShoutFrequencySecsMax                            OFFSET(get<float>, {0x1A4, 4, 0, 0})
	DMember(float)                                     AudioDuringSlidingSpeedParam                                OFFSET(get<float>, {0x1A8, 4, 0, 0})
	DMember(float)                                     SpeedTarget                                                 OFFSET(get<float>, {0x1AC, 4, 0, 0})
	DMember(float)                                     SpeedMin                                                    OFFSET(get<float>, {0x1B0, 4, 0, 0})
	DMember(float)                                     SpeedMax                                                    OFFSET(get<float>, {0x1B4, 4, 0, 0})
	DMember(float)                                     AccelerationBase                                            OFFSET(get<float>, {0x1B8, 4, 0, 0})
	DMember(float)                                     AccelerationMultiplier                                      OFFSET(get<float>, {0x1BC, 4, 0, 0})
	DMember(float)                                     DecelerationMultiplier                                      OFFSET(get<float>, {0x1C0, 4, 0, 0})
	DMember(float)                                     AccelerationOnSlopeMultiplier                               OFFSET(get<float>, {0x1C4, 4, 0, 0})
	DMember(float)                                     DecelerationOnSlopeMultiplier                               OFFSET(get<float>, {0x1C8, 4, 0, 0})
	DMember(float)                                     StoppingDeceleration                                        OFFSET(get<float>, {0x1CC, 4, 0, 0})
	DMember(float)                                     StoppingDistance                                            OFFSET(get<float>, {0x1D0, 4, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ConnectorClass                                              OFFSET(get<T>, {0x1D8, 40, 0, 0})
	CMember(class AZipLineConnector*)                  Connector                                                   OFFSET(get<T>, {0x200, 8, 0, 0})
	CMember(EExitTrackMode)                            ExitMode                                                    OFFSET(get<T>, {0x208, 1, 0, 0})
	SMember(FPipelineMovementData)                     TrackMovementData                                           OFFSET(getStruct<T>, {0x20C, 28, 0, 0})


	/// Functions
	// Function /Script/FSD.TrackMovementStateComponent.ServerExitMode
	// void ServerExitMode(EExitTrackMode eMode);                                                                               // [0x19dd140] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.TrackMovementStateComponent.ServerAddTemporaryAcceration
	// void ServerAddTemporaryAcceration(float Acceleration, float Duration);                                                   // [0x19dd070] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.TrackMovementStateComponent.OnRep_TrackMovementdata
	// void OnRep_TrackMovementdata(FPipelineMovementData& oldState);                                                           // [0x19dc800] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.TrackMovementStateComponent.JumpPressed
	// void JumpPressed();                                                                                                      // [0x19dc480] Final|Native|Protected 
};

/// Class /Script/FSD.TreasureBox
/// Size: 0x0078 (0x000290 - 0x000308)
class ATreasureBox : public ATreasureContainer
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 776;

public:
	CMember(class URepairableComponent*)               repairable                                                  OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class URepairableUsable*)                  RepairUsable                                                OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class USingleUsableComponent*)             HammeringUsable                                             OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UTerrainPlacementComponent*)         terrainPlacement                                            OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UStaticMeshComponent*)               MiddlePlane                                                 OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             BoxMesh                                                     OFFSET(get<T>, {0x2B8, 8, 0, 0})
	CMember(TArray<class AActor*>)                     Batteries                                                   OFFSET(get<T>, {0x2C0, 16, 0, 0})
	DMember(float)                                     CollectActivationDelay                                      OFFSET(get<float>, {0x2D0, 4, 0, 0})
	CMember(class UAnimSequenceBase*)                  OpenBoxAnim                                                 OFFSET(get<T>, {0x2D8, 8, 0, 0})
	DMember(float)                                     DelayToOpenAfterRepair                                      OFFSET(get<float>, {0x2E0, 4, 0, 0})
	CMember(class UClass*)                             ResourceClass                                               OFFSET(get<T>, {0x2E8, 8, 0, 0})
	CMember(class UTreasureRewarder*)                  boxRewarder                                                 OFFSET(get<T>, {0x2F0, 8, 0, 0})
	DMember(float)                                     HologramRotationSpeed                                       OFFSET(get<float>, {0x2F8, 4, 0, 0})
	DMember(int32_t)                                   ItemsInserted                                               OFFSET(get<int32_t>, {0x300, 4, 0, 0})
	DMember(bool)                                      IsTreasureAvailable                                         OFFSET(get<bool>, {0x305, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TreasureBox.PlaceResources
	// void PlaceResources(class AProceduralSetup* Setup, float Radius, class UDebrisPositioning* DebrisPositioning, TArray<FVector>& locationsToAvoid, class UCurveFloat* AvoidCostCurve); // [0x19dcd80] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.TreasureBox.OnUsedEvent
	// void OnUsedEvent(class APlayerCharacter* User, EInputKeys Key);                                                          // [0x19dccb0] Final|Native|Public  
	// Function /Script/FSD.TreasureBox.OnRepairedEvent
	// void OnRepairedEvent(class URepairableComponent* repaired);                                                              // [0x19dc8b0] Final|Native|Public  
	// Function /Script/FSD.TreasureBox.OnHammerProgress
	// void OnHammerProgress(float Progress);                                                                                   // [0x19dc5c0] Final|Native|Public  
	// Function /Script/FSD.TreasureBox.OnHammered
	// void OnHammered(class APlayerCharacter* User, EInputKeys Key);                                                           // [0x19dc640] Final|Native|Public  
	// Function /Script/FSD.TreasureBox.OnFullyRepairedEvent
	// void OnFullyRepairedEvent(class URepairableComponent* repaired);                                                         // [0x19dc530] Final|Native|Public  
	// Function /Script/FSD.TreasureBox.OnAllResourcesCollectedEvent
	// void OnAllResourcesCollectedEvent(class URepairableComponent* repaired);                                                 // [0x19dc4a0] Final|Native|Public  
	// Function /Script/FSD.TreasureBox.BP_OnCollectedTreasure
	// void BP_OnCollectedTreasure(class APlayerCharacter* collector);                                                          // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TreasureBox.AfterRepairDelay
	// void AfterRepairDelay();                                                                                                 // [0x19dbd90] Final|Native|Public  
	// Function /Script/FSD.TreasureBox.ActivateCollection
	// void ActivateCollection();                                                                                               // [0x19dbb30] Final|Native|Protected 
};

/// Class /Script/FSD.TreasureBoxAnimInstance
/// Size: 0x0018 (0x0002B8 - 0x0002D0)
class UTreasureBoxAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
	DMember(float)                                     BuildProgress                                               OFFSET(get<float>, {0x2B8, 4, 0, 0})
	DMember(float)                                     PhysicsAlpha                                                OFFSET(get<float>, {0x2BC, 4, 0, 0})
	DMember(bool)                                      IsTreasureAvailable                                         OFFSET(get<bool>, {0x2C0, 1, 0, 0})
	DMember(bool)                                      IsLeftInserted                                              OFFSET(get<bool>, {0x2C1, 1, 0, 0})
	DMember(bool)                                      IsRightInserted                                             OFFSET(get<bool>, {0x2C2, 1, 0, 0})
};

/// Class /Script/FSD.TreasureFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UTreasureFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.TreasureRewarder
/// Size: 0x0000 (0x0000B0 - 0x0000B0)
class UTreasureRewarder : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
};

/// Class /Script/FSD.SkinTreasureRewarder
/// Size: 0x0018 (0x0000B0 - 0x0000C8)
class USkinTreasureRewarder : public UTreasureRewarder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(class UItemAquisitionSource*)              AquisitionSource                                            OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UItemSkin*)                          GivenSkin                                                   OFFSET(get<T>, {0xB8, 8, 0, 0})
	CMember(class UItemID*)                            GivenSkinID                                                 OFFSET(get<T>, {0xC0, 8, 0, 0})
};

/// Class /Script/FSD.VictoryPoseRewarder
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UVictoryPoseRewarder : public UTreasureRewarder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UVictoryPose*)                       GivenPose                                                   OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 GivenCharacterID                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Class /Script/FSD.PickaxePartRewarder
/// Size: 0x0008 (0x0000B0 - 0x0000B8)
class UPickaxePartRewarder : public UTreasureRewarder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 184;

public:
	CMember(class UPickaxePart*)                       PickaxePart                                                 OFFSET(get<T>, {0xB0, 8, 0, 0})
};

/// Class /Script/FSD.VanityItemRewarder
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UVanityItemRewarder : public UTreasureRewarder
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	CMember(class UVanityItem*)                        GivenVanityItem                                             OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(class UPlayerCharacterID*)                 GivenCharacterID                                            OFFSET(get<T>, {0xB8, 8, 0, 0})
};

/// Struct /Script/FSD.SpecialChanceEventItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FSpecialChanceEventItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USpecialEvent*)                      Event                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     BaseChance                                                  OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(bool)                                      CanSpawnInDeepDive                                          OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Class /Script/FSD.TreasureSettings
/// Size: 0x0138 (0x000030 - 0x000168)
class UTreasureSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	CMember(TArray<ETreasureType>)                     CrateTreasureTypes                                          OFFSET(get<T>, {0x30, 16, 0, 0})
	SMember(FText)                                     CrateTreasureEmptyMsg                                       OFFSET(getStruct<T>, {0x40, 24, 0, 0})
	CMember(TArray<ETreasureType>)                     LostPackTreasureTypes                                       OFFSET(get<T>, {0x58, 16, 0, 0})
	SMember(FText)                                     LostPackEmptyMsg                                            OFFSET(getStruct<T>, {0x68, 24, 0, 0})
	CMember(class UItemAquisitionSource*)              CrateAquisitionSource                                       OFFSET(get<T>, {0x80, 8, 0, 0})
	CMember(class UItemAquisitionSource*)              LostPackAquisitionSource                                    OFFSET(get<T>, {0x88, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        TreasureChanceMissionLengthCurve                            OFFSET(getStruct<T>, {0x90, 136, 0, 0})
	CMember(TArray<class USpecialEvent*>)              TreasureEvents                                              OFFSET(get<T>, {0x118, 16, 0, 0})
	CMember(TArray<FSpecialChanceEventItem>)           SpecialChancedEvent                                         OFFSET(get<T>, {0x128, 16, 0, 0})
	CMember(TArray<class UVictoryPose*>)               VictoryPoses                                                OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<class UItemSkinSet*>)               SkinSets                                                    OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<class UDrinkableDataAsset*>)        Drinks                                                      OFFSET(get<T>, {0x158, 16, 0, 0})
};

/// Struct /Script/FSD.VanityNode
/// Size: 0x0030 (0x000000 - 0x000030)
class FVanityNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UReward*)                            Reward                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   NodeID                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	CMember(TArray<int32_t>)                           ConnectedNodes                                              OFFSET(get<T>, {0x10, 16, 0, 0})
	DMember(bool)                                      bIsBig                                                      OFFSET(get<bool>, {0x20, 1, 0, 0})
	DMember(bool)                                      bIsStartingNode                                             OFFSET(get<bool>, {0x21, 1, 0, 0})
	SMember(FVector2D)                                 Position                                                    OFFSET(getStruct<T>, {0x24, 8, 0, 0})
};

/// Class /Script/FSD.TreeOfVanity
/// Size: 0x0010 (0x000058 - 0x000068)
class UTreeOfVanity : public USavableDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	CMember(TArray<FVanityNode>)                       Nodes                                                       OFFSET(get<T>, {0x58, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.TreeOfVanity.ClearNodes
	// void ClearNodes();                                                                                                       // [0x19dbf20] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TreeOfVanity.AddNode
	// void AddNode(class UReward* Reward, int32_t NodeID, TArray<int32_t> ConnectedNodes, bool isStartingNode, bool isBig, FVector2D Position); // [0x19dbb50] Final|Native|Public|HasDefaults|BlueprintCallable 
};

/// Class /Script/FSD.TreeOfVanityItemWidget
/// Size: 0x0050 (0x000260 - 0x0002B0)
class UTreeOfVanityItemWidget : public UUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 688;

public:
	CMember(class UReward*)                            Reward                                                      OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UReward*)                            actualReward                                                OFFSET(get<T>, {0x268, 8, 0, 0})
	DMember(bool)                                      bIsPrimaryReward                                            OFFSET(get<bool>, {0x270, 1, 0, 0})
	DMember(bool)                                      bIsStartingNode                                             OFFSET(get<bool>, {0x271, 1, 0, 0})
	CMember(TArray<class UTreeOfVanityItemWidget*>)    ConnectedNodes                                              OFFSET(get<T>, {0x278, 16, 0, 0})
	DMember(int32_t)                                   NodeID                                                      OFFSET(get<int32_t>, {0x288, 4, 0, 0})
	DMember(bool)                                      bIsClickable                                                OFFSET(get<bool>, {0x28C, 1, 0, 0})
	CMember(class UReward*)                            DefaultReward                                               OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(TArray<class UUserWidget*>)                NodeConnections                                             OFFSET(get<T>, {0x298, 16, 0, 0})
	DMember(bool)                                      bIsBought                                                   OFFSET(get<bool>, {0x2A8, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.TreeOfVanityItemWidget.SetIsBought
	// void SetIsBought(bool inIsBought);                                                                                       // [0x19dd3c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TreeOfVanityItemWidget.SetData
	// void SetData(class UReward* InReward, bool inIsPrimaryReward, bool inIsStartingNode, TArray<UTreeOfVanityItemWidget*> inConnectedNodes, int32_t inNodeID); // [0x19dd1c0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TreeOfVanityItemWidget.OnDataUpdated
	// void OnDataUpdated();                                                                                                    // [0x1d6f900] Event|Protected|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.TreeOfVanityItemWidget.GetIsBought
	// bool GetIsBought();                                                                                                      // [0x19dc0f0] Final|Native|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.TremorAttackComponent
/// Size: 0x0050 (0x000128 - 0x000178)
class UTremorAttackComponent : public USpecialDamageAttackComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	DMember(bool)                                      IsAttackActive                                              OFFSET(get<bool>, {0x140, 1, 0, 0})
	CMember(class UBoxComponent*)                      CollisionComponent                                          OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           ParticlesComponent                                          OFFSET(get<T>, {0x150, 8, 0, 0})
	DMember(float)                                     InitialParticlesDelay                                       OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     PostParticleDelay                                           OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     TargetMaxDistanceFromGround                                 OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     TimeBetweenDamageTicks                                      OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(float)                                     LaunchForce                                                 OFFSET(get<float>, {0x168, 4, 0, 0})
	DMember(float)                                     Duration                                                    OFFSET(get<float>, {0x16C, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TremorAttackComponent.StopParticles
	// void StopParticles();                                                                                                    // [0x19dd470] Final|Native|Protected 
	// Function /Script/FSD.TremorAttackComponent.StartParticles
	// void StartParticles();                                                                                                   // [0x19dd450] Final|Native|Protected 
	// Function /Script/FSD.TremorAttackComponent.OnTargetExitedTrigger
	// void OnTargetExitedTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // [0x19dcb60] Native|Public        
	// Function /Script/FSD.TremorAttackComponent.OnTargetEnteredTrigger
	// void OnTargetEnteredTrigger(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x19dc940] Native|Public|HasOutParms 
	// Function /Script/FSD.TremorAttackComponent.OnRep_IsAttackActive
	// void OnRep_IsAttackActive();                                                                                             // [0x19dc7a0] Final|Native|Protected 
	// Function /Script/FSD.TremorAttackComponent.IsInited
	// bool IsInited();                                                                                                         // [0x19dc440] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.TremorAttackComponent.InitTremorAttack
	// void InitTremorAttack(class UBoxComponent* Box, class UParticleSystemComponent* Particles);                              // [0x19dc370] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.TunnelParameters
/// Size: 0x0020 (0x000030 - 0x000050)
class UTunnelParameters : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UFloodFillSettings*)                 PathfinderNoise                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     PathZPenalty                                                OFFSET(get<float>, {0x38, 4, 0, 0})
	DMember(float)                                     PathDirectionPenalty                                        OFFSET(get<float>, {0x3C, 4, 0, 0})
	DMember(float)                                     PathEntranceAnglePenalty                                    OFFSET(get<float>, {0x40, 4, 0, 0})
	DMember(float)                                     ObstacleCostScale                                           OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(bool)                                      AllowBlockedEntrances                                       OFFSET(get<bool>, {0x48, 1, 0, 0})
	DMember(bool)                                      PickBestMatchingEntrance                                    OFFSET(get<bool>, {0x49, 1, 0, 0})
};

/// Class /Script/FSD.TunnelSegmentSetting
/// Size: 0x0060 (0x000030 - 0x000090)
class UTunnelSegmentSetting : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UTerrainMaterial*)                   Material                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 PathfinderNoise                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 CielingNoise                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 WallNoise                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 FloorNoise                                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FVector2D)                                 VRange                                                      OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FVector2D)                                 HRange                                                      OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FVector2D)                                 Cielingheight                                               OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FVector2D)                                 FloorHeight                                                 OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FVector2D)                                 CielingNoiseRange                                           OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FVector2D)                                 WallNoiseRange                                              OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FVector2D)                                 FloorNoiseRange                                             OFFSET(getStruct<T>, {0x88, 8, 0, 0})
};

/// Class /Script/FSD.TunnelSettings
/// Size: 0x0060 (0x000030 - 0x000090)
class UTunnelSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class UTerrainMaterial*)                   Material                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 PathfinderNoise                                             OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 CielingNoise                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 WallNoise                                                   OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 FloorNoise                                                  OFFSET(get<T>, {0x50, 8, 0, 0})
	SMember(FVector2D)                                 VRange                                                      OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	SMember(FVector2D)                                 HRange                                                      OFFSET(getStruct<T>, {0x60, 8, 0, 0})
	SMember(FVector2D)                                 Cielingheight                                               OFFSET(getStruct<T>, {0x68, 8, 0, 0})
	SMember(FVector2D)                                 FloorHeight                                                 OFFSET(getStruct<T>, {0x70, 8, 0, 0})
	SMember(FVector2D)                                 CielingNoiseRange                                           OFFSET(getStruct<T>, {0x78, 8, 0, 0})
	SMember(FVector2D)                                 WallNoiseRange                                              OFFSET(getStruct<T>, {0x80, 8, 0, 0})
	SMember(FVector2D)                                 FloorNoiseRange                                             OFFSET(getStruct<T>, {0x88, 8, 0, 0})
};

/// Struct /Script/FSD.TunnelSettingItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FTunnelSettingItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UTunnelSegmentSetting*)              SegmentSetting                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FInt32Interval)                            SegmentSize                                                 OFFSET(getStruct<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.TunnelSetting
/// Size: 0x0040 (0x000030 - 0x000070)
class UTunnelSetting : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UFloodFillSettings*)                 PathfinderNoise                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UTunnelSegmentSetting*)              BaseSegmentSetting                                          OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UTunnelSegmentSetting*)              TightBendSegmentSetting                                     OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class UTunnelSegmentSetting*)              DirtSegmentSetting                                          OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UTunnelSegmentSetting*)              DirtOffsetSetting                                           OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<FTunnelSettingItem>)                VariationSegments                                           OFFSET(get<T>, {0x58, 16, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/FSD.TutorialContentWidget
/// Size: 0x0010 (0x000280 - 0x000290)
class UTutorialContentWidget : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	SMember(FMulticastInlineDelegate)                  OnTutorialFinished                                          OFFSET(getStruct<T>, {0x280, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.TutorialContentWidget.OnTutorialFinished__DelegateSignature
	// void OnTutorialFinished__DelegateSignature(class UTutorialContentWidget* TutorialWidget);                                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.TutorialContentWidget.OnShown
	// void OnShown();                                                                                                          // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.TutorialContentWidget.OnRemoveWidget
	// void OnRemoveWidget();                                                                                                   // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.TutorialLevelWidget
/// Size: 0x0028 (0x000280 - 0x0002A8)
class UTutorialLevelWidget : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 680;

public:
	DMember(float)                                     DelayBetweenTutorials                                       OFFSET(get<float>, {0x288, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TutorialLevelWidget.ShowTutorialWidget
	// void ShowTutorialWidget(class UClass* TutorialWidget, bool ignoreQueue);                                                 // [0x19e1ee0] Final|Native|Public  
	// Function /Script/FSD.TutorialLevelWidget.RemoveTutorialWidget
	// void RemoveTutorialWidget(class UTutorialContentWidget* TutorialWidget);                                                 // [0x19e19c0] Final|Native|Public  
	// Function /Script/FSD.TutorialLevelWidget.RemoveAllTutorials
	// void RemoveAllTutorials();                                                                                               // [0x19e17b0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TutorialLevelWidget.OnTutorialFinished
	// void OnTutorialFinished(class UTutorialContentWidget* TutorialWidget);                                                   // [0x19e16e0] Final|Native|Protected 
	// Function /Script/FSD.TutorialLevelWidget.OnNewActiveTutorial
	// void OnNewActiveTutorial(class UTutorialContentWidget* Widget);                                                          // [0x1d6f900] Event|Public|BlueprintEvent 
};

/// Class /Script/FSD.TutorialManager
/// Size: 0x0040 (0x000220 - 0x000260)
class ATutorialManager : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 608;

public:
	DMember(float)                                     MinimumTimeBetweenTutorials                                 OFFSET(get<float>, {0x220, 4, 0, 0})
	DMember(bool)                                      ResetTutorialsOnStart                                       OFFSET(get<bool>, {0x224, 1, 0, 0})
	DMember(bool)                                      ShowTutorialsDebug                                          OFFSET(get<bool>, {0x225, 1, 0, 0})
	CMember(TWeakObjectPtr<class AFSDPlayerController*>) PlayerController                                          OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   PlayerCharacter                                             OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFSDSaveGame*>)       SaveGame                                                    OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UTutorialComponent*>>) Tutorials                                                 OFFSET(get<T>, {0x240, 16, 0, 0})
	CMember(TWeakObjectPtr<class UTutorialComponent*>) ActiveTutorial                                              OFFSET(get<T>, {0x250, 8, 0, 0})
};

/// Class /Script/FSD.TutorialWidget
/// Size: 0x0008 (0x000280 - 0x000288)
class UTutorialWidget : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 648;

public:
	DMember(float)                                     RemainingVisibleTime                                        OFFSET(get<float>, {0x280, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.TutorialWidget.Show
	// void Show(FText& Text, FText& Title, FText& TaskText, class UTexture2D* Image, float Duration);                          // [0x19e1c30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.TutorialWidget.OnShow
	// void OnShow(FText& Text, FText& Title, FText& TaskText, class UTexture2D* Image);                                        // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.TutorialWidget.OnHide
	// void OnHide(bool watched);                                                                                               // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.TutorialWidget.Hide
	// void Hide(bool watched);                                                                                                 // [0x19e1180] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.TutorialWidget.ChangeHintDuration
	// void ChangeHintDuration(float NewDuration);                                                                              // [0x19e09b0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.BTTask_TunnelToTarget
/// Size: 0x0038 (0x000070 - 0x0000A8)
class UBTTask_TunnelToTarget : public UBTTaskNode
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 168;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	DMember(float)                                     BurrowSpeed                                                 OFFSET(get<float>, {0x98, 4, 0, 0})
	DMember(float)                                     BurrowDuration                                              OFFSET(get<float>, {0x9C, 4, 0, 0})
	SMember(FFloatInterval)                            DurationClamp                                               OFFSET(getStruct<T>, {0xA0, 8, 0, 0})
};

/// Class /Script/FSD.DroneMiningState
/// Size: 0x00C8 (0x0000B8 - 0x000180)
class UDroneMiningState : public UDroneStateComponentBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	CMember(class UDroneMiningToolBase*)               DroneMiningTool                                             OFFSET(get<T>, {0x140, 8, 0, 0})
	CMember(class UTerrainMaterial*)                   HeartStoneMateiral                                          OFFSET(get<T>, {0x148, 8, 0, 0})
	DMember(float)                                     StartMiningRange                                            OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     MiningRange                                                 OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     SameHitRadius                                               OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     MineRadius                                                  OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(int32_t)                                   MiningStrength                                              OFFSET(get<int32_t>, {0x160, 4, 0, 0})
	DMember(float)                                     EmbeddedSearchRadius                                        OFFSET(get<float>, {0x168, 4, 0, 0})
};

/// Struct /Script/FSD.HeightenedSenseTracker
/// Size: 0x0020 (0x000000 - 0x000020)
class FHeightenedSenseTracker : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Actor                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UHealthComponentBase*>) HealthComponent                                           OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TScriptInterface<Class>)                   AttackingPoint                                              OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Class /Script/FSD.HeightenedSenseComponent
/// Size: 0x0028 (0x0000C0 - 0x0000E8)
class UHeightenedSenseComponent : public UFloatPerkComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	CMember(class UPawnAffliction*)                    HeightenSenseAffliction                                     OFFSET(get<T>, {0xC0, 8, 0, 0})
	DMember(float)                                     AlertDistance                                               OFFSET(get<float>, {0xC8, 4, 0, 0})
	CMember(TArray<FHeightenedSenseTracker>)           ActiveTrackers                                              OFFSET(get<T>, {0xD0, 16, 0, 0})
	DMember(bool)                                      bAfflictionActivated                                        OFFSET(get<bool>, {0xE0, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.HeightenedSenseComponent.RemoveTracker
	// void RemoveTracker(class AActor* TrackerActor);                                                                          // [0x19e1930] Final|Native|Public  
	// Function /Script/FSD.HeightenedSenseComponent.AddTracker
	// void AddTracker(class AActor* TrackerActor);                                                                             // [0x19e06f0] Final|Native|Public  
};

/// Class /Script/FSD.UIFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UUIFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.UIFunctionLibrary.SetLoadoutIcon
	// void SetLoadoutIcon(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, int32_t loadoutIndex, int32_t iconIndex); // [0x19e1a70] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UIFunctionLibrary.RemoveItemUINotification
	// void RemoveItemUINotification(class UObject* WorldContextObject, TArray<UObject*> Item, bool MatchChildNotifications);   // [0x19e17d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UIFunctionLibrary.IsInItemUINotificationSet
	// bool IsInItemUINotificationSet(class UObject* WorldContextObject, class UObject* Item);                                  // [0x19e1330] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UIFunctionLibrary.GetUnixTimeStamp
	// int64_t GetUnixTimeStamp();                                                                                              // [0x19e1120] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UIFunctionLibrary.GetLoadoutIcon
	// int32_t GetLoadoutIcon(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, int32_t loadoutIndex);  // [0x19e0f10] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UIFunctionLibrary.FormatNewsTexts
	// TArray<FText> FormatNewsTexts(TArray<FText> texts, int32_t RandomSeed, class UNewsTextLists* wordList, class UMissionNameBank* MissionNameBank); // [0x19e0c60] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UIFunctionLibrary.ClearAllItemUINotifications
	// void ClearAllItemUINotifications(class UObject* WorldContextObject);                                                     // [0x19e0be0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UIFunctionLibrary.CheckItemUINotification
	// void CheckItemUINotification(class UObject* WorldContextObject, TArray<UObject*> Item, bool& HasNotification, bool MatchChildNotifications); // [0x19e0a30] Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UIFunctionLibrary.AddItemUINotification
	// void AddItemUINotification(class UObject* WorldContextObject, TArray<UObject*> Item);                                    // [0x19e05d0] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.InfectionPointCleaningComponent
/// Size: 0x00B8 (0x0000B0 - 0x000168)
class UInfectionPointCleaningComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 360;

public:
	SMember(FMulticastInlineDelegate)                  OnPointVacuumed                                             OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnPointFoamed                                               OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(bool)                                      bIsInitialized                                              OFFSET(get<bool>, {0xD0, 1, 0, 0})
	DMember(bool)                                      bHasBeenReplicated                                          OFFSET(get<bool>, {0xD1, 1, 0, 0})
	CMember(TMap<class UDifficultySetting*, int32_t>)  DifficultyModifiers                                         OFFSET(get<T>, {0xD8, 80, 0, 0})
	CMember(class UNiagaraSystem*)                     CleanedParticles                                            OFFSET(get<T>, {0x128, 8, 0, 0})
	DMember(float)                                     particleScale                                               OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(bool)                                      outerLayerCleaned                                           OFFSET(get<bool>, {0x134, 1, 0, 0})
	CMember(TArray<TEnumAsByte<ECleanedStatus>>)       InfectionPoints                                             OFFSET(get<T>, {0x138, 16, 0, 0})
	CMember(TArray<class UMeshComponent*>)             OuterLayerMeshes                                            OFFSET(get<T>, {0x148, 16, 0, 0})
	CMember(TArray<class UMeshComponent*>)             InnerLayerMeshes                                            OFFSET(get<T>, {0x158, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.InfectionPointCleaningComponent.Reset
	// void Reset();                                                                                                            // [0x19e1a50] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.InfectionPointCleaningComponent.OnRep_InfectionPoints
	// void OnRep_InfectionPoints(TArray<TEnumAsByte<ECleanedStatus>> oldInfectionPoints);                                      // [0x19e15f0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.InfectionPointCleaningComponent.InitInfectionPoints
	// void InitInfectionPoints(TArray<UMeshComponent*>& outerMeshes, TArray<UMeshComponent*>& innerMeshes);                    // [0x19e1210] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.InfectionPointCleaningComponent.GetRequiredCleanCount
	// int32_t GetRequiredCleanCount();                                                                                         // [0x19e1070] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InfectionPointCleaningComponent.GetRemainingInfectedPoints
	// int32_t GetRemainingInfectedPoints();                                                                                    // [0x19e1040] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.InfectionPointCleaningComponent.GetNumberOfInfectedPoints
	// int32_t GetNumberOfInfectedPoints();                                                                                     // [0x19e1010] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.UpdateIsTargetAimingAtSelf
/// Size: 0x0060 (0x000070 - 0x0000D0)
class UUpdateIsTargetAimingAtSelf : public UBTService
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	SMember(FBlackboardKeySelector)                    TargetKey                                                   OFFSET(getStruct<T>, {0x70, 40, 0, 0})
	SMember(FBlackboardKeySelector)                    IsTargetAimingAtSelfKey                                     OFFSET(getStruct<T>, {0x98, 40, 0, 0})
	DMember(float)                                     AimPointRadius                                              OFFSET(get<float>, {0xC0, 4, 0, 0})
	SMember(FVector)                                   SelfOffset                                                  OFFSET(getStruct<T>, {0xC4, 12, 0, 0})
};

/// Struct /Script/FSD.UpgradeTier
/// Size: 0x0018 (0x000000 - 0x000018)
class FUpgradeTier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   RequiredCharacterLevel                                      OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   RequiredPlayerRank                                          OFFSET(get<int32_t>, {0x14, 4, 0, 0})
};

/// Struct /Script/FSD.MasteryItem
/// Size: 0x0018 (0x000000 - 0x000018)
class FMasteryItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(int32_t)                                   NeededMastery                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TArray<class UUnlockReward*>)              Unlocks                                                     OFFSET(get<T>, {0x8, 16, 0, 0})
};

/// Class /Script/FSD.UpgradableGearComponent
/// Size: 0x0168 (0x0000B0 - 0x000218)
class UUpgradableGearComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
	SMember(FMulticastInlineDelegate)                  OnUpgradesAddedToItem                                       OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	DMember(bool)                                      bUpgradesAddedToItem                                        OFFSET(get<bool>, {0xC0, 1, 0, 0})
	CMember(class UItemData*)                          ItemData                                                    OFFSET(get<T>, {0xC8, 8, 0, 0})
	CMember(TArray<FUpgradeTier>)                      UpgradeTiers                                                OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(class UOverclockBank*)                     OverclockBank                                               OFFSET(get<T>, {0xE0, 8, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               AllOverclocks                                               OFFSET(get<T>, {0xE8, 16, 0, 0})
	CMember(class UTexture2D*)                         IconLine                                                    OFFSET(get<T>, {0xF8, 8, 0, 0})
	CMember(class UTexture2D*)                         IconBG                                                      OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(class UTexture2D*)                         IconDetailed                                                OFFSET(get<T>, {0x108, 8, 0, 0})
	CMember(TWeakObjectPtr<class UTexture2D*>)         PreviewImage                                                OFFSET(get<T>, {0x110, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             PreviewActor                                                OFFSET(get<T>, {0x138, 40, 0, 0})
	SMember(FText)                                     Name                                                        OFFSET(getStruct<T>, {0x160, 24, 0, 0})
	SMember(FText)                                     Category                                                    OFFSET(getStruct<T>, {0x178, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x190, 24, 0, 0})
	DMember(int32_t)                                   CreditCost                                                  OFFSET(get<int32_t>, {0x1A8, 4, 0, 0})
	CMember(TMap<class UResourceData*, float>)         ResourceCost                                                OFFSET(get<T>, {0x1B0, 80, 0, 0})
	DMember(int32_t)                                   RequiredCharacterLevel                                      OFFSET(get<int32_t>, {0x200, 4, 0, 0})
	CMember(TArray<FMasteryItem>)                      masteryLevels                                               OFFSET(get<T>, {0x208, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.UpgradableGearComponent.UpgradesAddedToItem__DelegateSignature
	// void UpgradesAddedToItem__DelegateSignature();                                                                           // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.UpgradableGearComponent.SetGearStatText
	// void SetGearStatText(FGearStatEntry& entry, FText Text);                                                                 // [0x19e9750] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.PurchaseUpgrade
	// bool PurchaseUpgrade(class UItemID* ItemID, class UItemUpgrade* Upgrade, class AFSDPlayerController* PlayerController, class UClass* previewedCharacter); // [0x19e92e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.PurchaseItem
	// bool PurchaseItem(class UObject* WorldContextObject, class UItemID* ItemID);                                             // [0x19e9210] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.PlayerOwnesUpgradeInAllTiers
	// bool PlayerOwnesUpgradeInAllTiers(class UClass* itemClass, class UObject* WorldContextObject);                           // [0x19e9140] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.MirrorUpgradePreviewStatus
	// void MirrorUpgradePreviewStatus(FGearStatEntry& from, FGearStatEntry& to);                                               // [0x19e8dd0] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.IsUpgradeEquipped
	// bool IsUpgradeEquipped(class UClass* itemClass, class UItemUpgrade* Upgrade, class AFSDPlayerState* Player);             // [0x19e8cd0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.IsTierUnLocked
	// bool IsTierUnLocked(class UObject* WorldContextObject, class UClass* itemClass, int32_t tierIndex, class UPlayerCharacterID* characterID); // [0x19e8b90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.IsOverclockingEnabled
	// bool IsOverclockingEnabled(class UObject* WorldContextObject, class UPlayerCharacterID* characterID, class UClass* itemClass); // [0x19e8a90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.IsItemUnlocked
	// bool IsItemUnlocked(class UObject* WorldContextObject, class UItemID* Item);                                             // [0x19e89c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.IsItemOwned
	// bool IsItemOwned(class UObject* WorldContextObject, class UItemID* Item);                                                // [0x19e88f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.IsItemEquipped
	// bool IsItemEquipped(class UObject* WorldContextObject, class UItemID* ItemID);                                           // [0x19e8820] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetUpgradeTier
	// int32_t GetUpgradeTier(class UClass* itemClass, class UItemUpgrade* ItemUpgrade);                                        // [0x19e84b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetSourceGearName
	// FString GetSourceGearName();                                                                                             // [0x19e8430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetResourceCost
	// TMap<UResourceData*, float> GetResourceCost();                                                                           // [0x19e8300] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetRequiredCharacterLevel
	// int32_t GetRequiredCharacterLevel();                                                                                     // [0x19e82d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetPreviewImage
	// class UTexture2D* GetPreviewImage();                                                                                     // [0x19e82a0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetPreviewActorClass
	// class UClass* GetPreviewActorClass();                                                                                    // [0x19e8260] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetOverClocks
	// TArray<UItemUpgrade*> GetOverClocks();                                                                                   // [0x19e8220] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetMasteryProgress
	// int32_t GetMasteryProgress(class UObject* WorldContextObject, class UItemID* ItemID, int32_t& maxMastery);               // [0x19e8110] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.GetMasteryLevels
	// TArray<FMasteryItem> GetMasteryLevels(class UItemID* ItemID);                                                            // [0x19e7fb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.GetMasteryForLevel
	// bool GetMasteryForLevel(TArray<FMasteryItem>& masteryLevels, int32_t Level, FMasteryItem& outLevel);                     // [0x19e7e20] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.GetItemUpgradeTiers
	// TArray<FUpgradeTier> GetItemUpgradeTiers(class UClass* itemClass);                                                       // [0x19e7b30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetItemUpgradeStatus
	// EItemUpgradeStatus GetItemUpgradeStatus(class UObject* WorldContextObject, class UClass* itemClass, class UItemUpgrade* ItemUpgrade, class UPlayerCharacterID* characterID); // [0x19e79e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetItemUpgradesFromSave
	// TArray<UItemUpgrade*> GetItemUpgradesFromSave(class UClass* itemClass, class UClass* upgradeClass, class AFSDPlayerState* Player, char upgradeIndex); // [0x19e7c80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetItemPreviewClassFromActor
	// class UClass* GetItemPreviewClassFromActor(class UClass* Actor);                                                         // [0x19e7950] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetItemPreviewClass
	// class UClass* GetItemPreviewClass(class UItemID* ItemID);                                                                // [0x19e78c0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetItemMasteryForLevel
	// bool GetItemMasteryForLevel(class UItemID* ItemID, int32_t Level, FMasteryItem& outLevel);                               // [0x19e7790] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.GetIsItemUpgradeEquipped
	// bool GetIsItemUpgradeEquipped(class AFSDPlayerState* Player, class UClass* itemClass, class UItemUpgrade* ItemUpgrade, class UPlayerCharacterID* characterID); // [0x19e7620] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetIconLine
	// class UTexture2D* GetIconLine();                                                                                         // [0x19e75f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetIconDetailed
	// class UTexture2D* GetIconDetailed();                                                                                     // [0x19e75c0] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetIconBG
	// class UTexture2D* GetIconBG();                                                                                           // [0x19e7590] Final|Native|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetGearStatValue
	// FText GetGearStatValue(FGearStatEntry& entry);                                                                           // [0x19e7240] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.GetGearStats
	// TArray<FGearStatEntry> GetGearStats(class AFSDPlayerState* PlayerState, class UClass* actorClass);                       // [0x19e7370] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.GetGearSourceName
	// FString GetGearSourceName(class UItemID* ItemID);                                                                        // [0x19e7170] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetGearName
	// FText GetGearName();                                                                                                     // [0x19e70d0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetGearDescription
	// FText GetGearDescription();                                                                                              // [0x19e7030] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetGearCategory
	// FText GetGearCategory();                                                                                                 // [0x19e6f90] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetEquippedUpgrades
	// TArray<UItemUpgrade*> GetEquippedUpgrades(class UClass* itemClass, class AFSDPlayerState* Player);                       // [0x19e6e80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetEquippedUpgradeAtTier
	// class UItemUpgrade* GetEquippedUpgradeAtTier(class UClass* itemClass, int32_t tierIndex, class UPlayerCharacterID* characterID, class AFSDPlayerState* Player); // [0x19e6d40] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetEquippedOverclock
	// class UItemUpgrade* GetEquippedOverclock(class UObject* WorldContextObject, class UClass* itemClass);                    // [0x19e6c70] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetEquippableOverclocks
	// TArray<UItemUpgrade*> GetEquippableOverclocks(class UObject* WorldContextObject, class UClass* itemClass, class UPlayerCharacterID* characterID); // [0x19e6b30] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetCreditCost
	// int32_t GetCreditCost();                                                                                                 // [0x19e6b00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetCraftingCost
	// TArray<FCraftingCost> GetCraftingCost();                                                                                 // [0x19e6a80] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.GetCharacterLevelRequiredForItem
	// int32_t GetCharacterLevelRequiredForItem(class UItemID* ItemID);                                                         // [0x19e69f0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.GetAllUpgrades
	// TArray<UItemUpgrade*> GetAllUpgrades();                                                                                  // [0x19e6970] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.UpgradableGearComponent.ClearEquippedUpgrade
	// void ClearEquippedUpgrade(class UClass* itemClass, int32_t tierIndex, class AFSDPlayerState* Player);                    // [0x19e67e0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.CheckMasteryUnlocks
	// void CheckMasteryUnlocks(class UItemID* ItemID, class AFSDPlayerController* Player);                                     // [0x19e6720] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.UpgradableGearComponent.CanItemOverclock
	// bool CanItemOverclock(class UObject* WorldContextObject, class UClass* itemClass);                                       // [0x19e64e0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.CanAffordUpgrade
	// bool CanAffordUpgrade(class UObject* WorldContextObject, class UItemUpgrade* Upgrade);                                   // [0x19e6410] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.UpgradableGearComponent.CanAffordItem
	// bool CanAffordItem(class UObject* WorldContextObject, class UItemID* ItemID);                                            // [0x19e6340] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.UpgradableItemComponent
/// Size: 0x0000 (0x000218 - 0x000218)
class UUpgradableItemComponent : public UUpgradableGearComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
};

/// Class /Script/FSD.UpgradableBoscoComponent
/// Size: 0x0000 (0x000218 - 0x000218)
class UUpgradableBoscoComponent : public UUpgradableGearComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 536;

public:
};

/// Struct /Script/FSD.UpgradeCostItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FUpgradeCostItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<int32_t>)                           Amounts                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Class /Script/FSD.UpgradeSettings
/// Size: 0x00E0 (0x000030 - 0x000110)
class UUpgradeSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	CMember(TArray<int32_t>)                           ClassAUpgradeCosts                                          OFFSET(get<T>, {0x30, 16, 0, 0})
	CMember(TArray<int32_t>)                           ClassBUpgradeCosts                                          OFFSET(get<T>, {0x40, 16, 0, 0})
	CMember(TArray<int32_t>)                           GearAUpgradeCosts                                           OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<int32_t>)                           GearBUpgradeCosts                                           OFFSET(get<T>, {0x60, 16, 0, 0})
	CMember(TArray<int32_t>)                           ArmorUpgradeCosts                                           OFFSET(get<T>, {0x70, 16, 0, 0})
	CMember(TArray<int32_t>)                           PickaxeUpgradeCosts                                         OFFSET(get<T>, {0x80, 16, 0, 0})
	CMember(TArray<int32_t>)                           ClassBoscoUpgradeCosts                                      OFFSET(get<T>, {0x90, 16, 0, 0})
	CMember(TArray<FUpgradeCostItem>)                  ClassAResourceCosts                                         OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TArray<FUpgradeCostItem>)                  ClassBResourceCosts                                         OFFSET(get<T>, {0xB0, 16, 0, 0})
	CMember(TArray<FUpgradeCostItem>)                  GearAResourceCosts                                          OFFSET(get<T>, {0xC0, 16, 0, 0})
	CMember(TArray<FUpgradeCostItem>)                  GearBResourceCosts                                          OFFSET(get<T>, {0xD0, 16, 0, 0})
	CMember(TArray<FUpgradeCostItem>)                  ArmorResourceCosts                                          OFFSET(get<T>, {0xE0, 16, 0, 0})
	CMember(TArray<FUpgradeCostItem>)                  PickaxeResourceCosts                                        OFFSET(get<T>, {0xF0, 16, 0, 0})
	CMember(TArray<FUpgradeCostItem>)                  ClassBoscoResourceCosts                                     OFFSET(get<T>, {0x100, 16, 0, 0})
};

/// Class /Script/FSD.RackableItemComponent
/// Size: 0x0058 (0x0000B0 - 0x000108)
class URackableItemComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	SMember(FMulticastInlineDelegate)                  OnRacked                                                    OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnTakenFromRack                                             OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	SMember(FText)                                     ItemRackedText                                              OFFSET(getStruct<T>, {0xD0, 24, 0, 0})
	SMember(FText)                                     ItemUnRackedText                                            OFFSET(getStruct<T>, {0xE8, 24, 0, 0})
	DMember(bool)                                      AddToCharacterInventory                                     OFFSET(get<bool>, {0x100, 1, 0, 0})
	DMember(int32_t)                                   RackKey                                                     OFFSET(get<int32_t>, {0x104, 4, 0, 0})
};

/// Class /Script/FSD.ItemRackComponent
/// Size: 0x0070 (0x000210 - 0x000280)
class UItemRackComponent : public USingleUsableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 640;

public:
	SMember(FMulticastInlineDelegate)                  OnHasItemChanged                                            OFFSET(getStruct<T>, {0x210, 16, 0, 0})
	CMember(class UUsableComponent*)                   UsableComponent                                             OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class USceneComponent*)                    AttachToComponent                                           OFFSET(get<T>, {0x258, 8, 0, 0})
	SMember(FName)                                     AttachPointSocket                                           OFFSET(getStruct<T>, {0x260, 8, 0, 0})
	DMember(bool)                                      AttachToSocket                                              OFFSET(get<bool>, {0x268, 1, 0, 0})
	DMember(int32_t)                                   RackKey                                                     OFFSET(get<int32_t>, {0x26C, 4, 0, 0})
	CMember(class URackableItemComponent*)             Item                                                        OFFSET(get<T>, {0x270, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ItemRackComponent.RackItem
	// void RackItem(class AActor* Item, class APlayerCharacter* Character);                                                    // [0x19e9440] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemRackComponent.OnRep_Item
	// void OnRep_Item(class URackableItemComponent* oldItem);                                                                  // [0x19e9030] Final|Native|Protected 
	// Function /Script/FSD.ItemRackComponent.InitializeRackedItem
	// void InitializeRackedItem(class URackableItemComponent* rackable);                                                       // [0x19e8760] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ItemRackComponent.HasRackedItem
	// bool HasRackedItem();                                                                                                    // [0x1900430] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ItemRackComponent.CanRackItem
	// bool CanRackItem(class AActor* Item);                                                                                    // [0x19e65b0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.UseAnimationSetting
/// Size: 0x0048 (0x000030 - 0x000078)
class UUseAnimationSetting : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UAnimMontage*)                       BeginFP                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UAnimMontage*>)               LoopsFP                                                     OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UAnimMontage*)                       EndFP                                                       OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(class UAnimMontage*)                       BeginTP                                                     OFFSET(get<T>, {0x50, 8, 0, 0})
	CMember(TArray<class UAnimMontage*>)               LoopsTP                                                     OFFSET(get<T>, {0x58, 16, 0, 0})
	CMember(class UAnimMontage*)                       EndTP                                                       OFFSET(get<T>, {0x68, 8, 0, 0})
	DMember(bool)                                      IsManuallyControlled                                        OFFSET(get<bool>, {0x70, 1, 0, 0})
	DMember(bool)                                      BlockUseWhileActive                                         OFFSET(get<bool>, {0x71, 1, 0, 0})
	DMember(float)                                     BlockUseWhileActiveDuration                                 OFFSET(get<float>, {0x74, 4, 0, 0})
};

/// Class /Script/FSD.BPInstantUsable
/// Size: 0x0000 (0x000170 - 0x000170)
class UBPInstantUsable : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:


	/// Functions
	// Function /Script/FSD.BPInstantUsable.BPCanUse
	// bool BPCanUse(class APlayerCharacter* User, class USceneComponent* useCollider);                                         // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/FSD.ShieldBoostUsable
/// Size: 0x0000 (0x000170 - 0x000170)
class UShieldBoostUsable : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:


	/// Functions
	// Function /Script/FSD.ShieldBoostUsable.OnCharacterBoosted
	// void OnCharacterBoosted(class APlayerCharacter* User, EInputKeys Key);                                                   // [0x19e8f40] Final|Native|Protected 
};

/// Class /Script/FSD.RepairableUsable
/// Size: 0x0000 (0x000170 - 0x000170)
class URepairableUsable : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
};

/// Class /Script/FSD.ContinuousUsableComponent
/// Size: 0x0020 (0x000120 - 0x000140)
class UContinuousUsableComponent : public UUsableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 320;

public:
	SMember(FMulticastInlineDelegate)                  UseTick                                                     OFFSET(getStruct<T>, {0x120, 16, 0, 0})
	DMember(float)                                     TimeBetweenTicks                                            OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(int32_t)                                   userCount                                                   OFFSET(get<int32_t>, {0x138, 4, 0, 0})
	DMember(bool)                                      Usable                                                      OFFSET(get<bool>, {0x13C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ContinuousUsableComponent.SetCanUse
	// void SetCanUse(bool CanUse);                                                                                             // [0x19e95a0] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.ContinuousUsableComponent.IsBeingUsed
	// bool IsBeingUsed();                                                                                                      // [0x19e87f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.OncePerPlayerUsableComponent
/// Size: 0x0028 (0x000170 - 0x000198)
class UOncePerPlayerUsableComponent : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 408;

public:
	SMember(FMulticastInlineDelegate)                  OnUsersChangedEvent                                         OFFSET(getStruct<T>, {0x170, 16, 0, 0})
	CMember(TArray<FUniqueNetIdRepl>)                  Users                                                       OFFSET(get<T>, {0x180, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.OncePerPlayerUsableComponent.OnUsersChanged
	// void OnUsersChanged(TArray<FUniqueNetIdRepl>& userList);                                                                 // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.OncePerPlayerUsableComponent.OnRep_Users
	// void OnRep_Users();                                                                                                      // [0x19e9120] Final|Native|Protected 
};

/// Class /Script/FSD.EventRewarderUsableComponent
/// Size: 0x0020 (0x000210 - 0x000230)
class UEventRewarderUsableComponent : public USingleUsableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	SMember(FText)                                     RewardUseText                                               OFFSET(getStruct<T>, {0x210, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.EventRewarderUsableComponent.CreateUseText
	// FText CreateUseText(int32_t blankSchematicCount);                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent|Const 
};

/// Class /Script/FSD.SpecialEventUsableComponent
/// Size: 0x0000 (0x000210 - 0x000210)
class USpecialEventUsableComponent : public USingleUsableComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 528;

public:
};

/// Class /Script/FSD.ControlEnemyUsable
/// Size: 0x0010 (0x000170 - 0x000180)
class UControlEnemyUsable : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
};

/// Class /Script/FSD.UsableAggregator
/// Size: 0x0028 (0x0000C8 - 0x0000F0)
class UUsableAggregator : public UItemAggregator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 240;

public:
	SMember(FMulticastInlineDelegate)                  OnVisibilityChanged                                         OFFSET(getStruct<T>, {0xC8, 16, 0, 0})
	SMember(FText)                                     UsingText                                                   OFFSET(getStruct<T>, {0xD8, 24, 0, 0})


	/// Functions
	// Function /Script/FSD.UsableAggregator.GetProgress
	// float GetProgress();                                                                                                     // [0x19f06f0] Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.UseConditionSet
/// Size: 0x0010 (0x000030 - 0x000040)
class UUseConditionSet : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UUseConditionBase*>)          Conditions                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.UseConditionCollection
/// Size: 0x0010 (0x000030 - 0x000040)
class UUseConditionCollection : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(TArray<class UUseConditionBase*>)          Conditions                                                  OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.UseConditionBase
/// Size: 0x0000 (0x000028 - 0x000028)
class UUseConditionBase : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
};

/// Class /Script/FSD.UseConditionGroup
/// Size: 0x0010 (0x000028 - 0x000038)
class UUseConditionGroup : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(class UUseConditionCollection*)            Collection                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.UseConditionGrounded
/// Size: 0x0008 (0x000028 - 0x000030)
class UUseConditionGrounded : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.UseConditionIsOwner
/// Size: 0x0008 (0x000028 - 0x000030)
class UUseConditionIsOwner : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.UseConditionSaluting
/// Size: 0x0008 (0x000028 - 0x000030)
class UUseConditionSaluting : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.UseConditionCharacterState
/// Size: 0x0018 (0x000028 - 0x000040)
class UUseConditionCharacterState : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           CharacterStates                                             OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.UseConditionCarriedActor
/// Size: 0x0018 (0x000028 - 0x000040)
class UUseConditionCarriedActor : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           Actors                                                      OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.UseConditionIsCarrying
/// Size: 0x0008 (0x000028 - 0x000030)
class UUseConditionIsCarrying : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.UseConditionEquippedItem
/// Size: 0x0018 (0x000028 - 0x000040)
class UUseConditionEquippedItem : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(TArray<TSoftObjectPtr<UClass*>>)           Items                                                       OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.UseConditionItemBlockAction
/// Size: 0x0008 (0x000028 - 0x000030)
class UUseConditionItemBlockAction : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.UseConditionOwnerIsAlive
/// Size: 0x0008 (0x000028 - 0x000030)
class UUseConditionOwnerIsAlive : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.UseConditionHasComponent
/// Size: 0x0010 (0x000028 - 0x000038)
class UUseConditionHasComponent : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             ComponentClass                                              OFFSET(get<T>, {0x28, 8, 0, 0})
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x30, 1, 0, 0})
};

/// Struct /Script/FSD.MovementModeCombo
/// Size: 0x0002 (0x000000 - 0x000002)
class FMovementModeCombo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	CMember(TEnumAsByte<EMovementMode>)                Mode                                                        OFFSET(get<T>, {0x0, 1, 0, 0})
	CMember(TEnumAsByte<EMovementCustomMode>)          CustomMode                                                  OFFSET(get<T>, {0x1, 1, 0, 0})
};

/// Class /Script/FSD.UseConditionMovementMode
/// Size: 0x0018 (0x000028 - 0x000040)
class UUseConditionMovementMode : public UUseConditionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	DMember(bool)                                      Invert                                                      OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(TArray<FMovementModeCombo>)                MovementModes                                               OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Class /Script/FSD.UsingStateComponent
/// Size: 0x0000 (0x000100 - 0x000100)
class UUsingStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Class /Script/FSD.SoapVacuumItem
/// Size: 0x0068 (0x000470 - 0x0004D8)
class ASoapVacuumItem : public APlagueCleanupItem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1240;

public:
	CMember(class UCapsuleComponent*)                  VacuumCapsule                                               OFFSET(get<T>, {0x470, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  NS_Vacuum_FP                                                OFFSET(get<T>, {0x478, 8, 0, 0})
	CMember(class UNiagaraComponent*)                  NS_Vacuum_TP                                                OFFSET(get<T>, {0x480, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnCurrentVolumeChanged                                      OFFSET(getStruct<T>, {0x488, 16, 0, 0})
	DMember(float)                                     VacuumCooldown                                              OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     VacuumRadius                                                OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     VacuumRange                                                 OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     CurrentVacuumEffectStrenght                                 OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     MaxVacuumEffectStrength                                     OFFSET(get<float>, {0x4CC, 4, 0, 0})
	DMember(float)                                     VacuumEffectFoamSuckTime                                    OFFSET(get<float>, {0x4D0, 4, 0, 0})
	DMember(float)                                     LastPuddleSuckTime                                          OFFSET(get<float>, {0x4D4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SoapVacuumItem.Server_StartVacuumingPuddle
	// void Server_StartVacuumingPuddle(class AActor* Target);                                                                  // [0x17fc220] Net|NetReliableNative|Event|Public|NetServer 
	// Function /Script/FSD.SoapVacuumItem.OnFoamPuddleCollected_Unreliable
	// void OnFoamPuddleCollected_Unreliable();                                                                                 // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.SoapVacuumItem.ItemEnterVacuum
	// void ItemEnterVacuum(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, FHitResult& SweepResult); // [0x19f0c40] Final|Native|Public|HasOutParms 
	// Function /Script/FSD.SoapVacuumItem.GetVacuumSource
	// class USceneComponent* GetVacuumSource();                                                                                // [0x19f08d0] Native|Event|Public|BlueprintEvent|Const 
	// Function /Script/FSD.SoapVacuumItem.All_Visual_PuddleStartCollect
	// void All_Visual_PuddleStartCollect();                                                                                    // [0x186cc50] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.VacuumAnimInstance
/// Size: 0x0000 (0x0002D0 - 0x0002D0)
class UVacuumAnimInstance : public UCleanupToolAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 720;

public:
};

/// Class /Script/FSD.ValidationFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UValidationFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.ValidationFunctionLibrary.SetSelectedAssets
	// void SetSelectedAssets(TArray<FString> Paths);                                                                           // [0x19f1230] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.ValidatorStrategy
/// Size: 0x0018 (0x000028 - 0x000040)
class UValidatorStrategy : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
};

/// Class /Script/FSD.SimpleNameStrategy
/// Size: 0x0030 (0x000040 - 0x000070)
class USimpleNameStrategy : public UValidatorStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FSD.PrefixNameStrategy
/// Size: 0x0000 (0x000070 - 0x000070)
class UPrefixNameStrategy : public USimpleNameStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FSD.PostfixNameStrategy
/// Size: 0x0000 (0x000070 - 0x000070)
class UPostfixNameStrategy : public USimpleNameStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FSD.PreOrPostfixNameStrategy
/// Size: 0x0000 (0x000070 - 0x000070)
class UPreOrPostfixNameStrategy : public USimpleNameStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FSD.ContainsNameStrategy
/// Size: 0x0000 (0x000070 - 0x000070)
class UContainsNameStrategy : public USimpleNameStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FSD.NotContainsNameStrategy
/// Size: 0x0000 (0x000070 - 0x000070)
class UNotContainsNameStrategy : public USimpleNameStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Class /Script/FSD.ValidDependenciesStrategy
/// Size: 0x0020 (0x000040 - 0x000060)
class UValidDependenciesStrategy : public UValidatorStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Class /Script/FSD.ValidPathStrategy
/// Size: 0x0030 (0x000040 - 0x000070)
class UValidPathStrategy : public UValidatorStrategy
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
};

/// Struct /Script/FSD.VanityAnimEffect
/// Size: 0x0018 (0x000000 - 0x000018)
class FVanityAnimEffect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UNiagaraSystem*)                     Effect                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FName)                                     AttachSocket                                                OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	DMember(float)                                     StartDelay                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Class /Script/FSD.VanityAnimInstance
/// Size: 0x0068 (0x0002B8 - 0x000320)
class UVanityAnimInstance : public UAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 800;

public:
	CMember(EVanitySlot)                               VanitySlot                                                  OFFSET(get<T>, {0x2B8, 1, 0, 0})
	DMember(bool)                                      ArmorCoversBeard                                            OFFSET(get<bool>, {0x2B9, 1, 0, 0})
	SMember(FVector)                                   ArmorChestThickness                                         OFFSET(getStruct<T>, {0x2BC, 12, 0, 0})
	SMember(FRotator)                                  ArmorChestRotation                                          OFFSET(getStruct<T>, {0x2C8, 12, 0, 0})
	SMember(FVector)                                   ExternalForce                                               OFFSET(getStruct<T>, {0x2D4, 12, 0, 0})
	DMember(float)                                     ExternalForceMultiplier                                     OFFSET(get<float>, {0x2E0, 4, 0, 0})
	DMember(float)                                     MaxForce                                                    OFFSET(get<float>, {0x2E4, 4, 0, 0})
	DMember(bool)                                      AlwaysShowAnimEffects                                       OFFSET(get<bool>, {0x2E8, 1, 0, 0})
	CMember(TArray<FVanityAnimEffect>)                 VanityAnimEffects                                           OFFSET(get<T>, {0x2F0, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.VanityAnimInstance.UpdateMeshes
	// void UpdateMeshes();                                                                                                     // [0x19f13b0] Final|Native|Protected 
};

/// Struct /Script/FSD.VanityTestCharacterItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FVanityTestCharacterItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USkeletalMesh*)                      Mesh                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UClass*)                             AnimBP                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Class /Script/FSD.VanityTestCharacter
/// Size: 0x0068 (0x0004B8 - 0x000520)
class AVanityTestCharacter : public ACharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1312;

public:
	DMember(float)                                     ArmorThickness                                              OFFSET(get<float>, {0x4B8, 4, 0, 0})
	DMember(float)                                     BeardThickness                                              OFFSET(get<float>, {0x4BC, 4, 0, 0})
	DMember(bool)                                      ArmorCoversBeard                                            OFFSET(get<bool>, {0x4C0, 1, 0, 0})
	CMember(TMap<EVanitySlot, FVanityTestCharacterItem>) VanityItems                                               OFFSET(get<T>, {0x4C8, 80, 0, 0})
	CMember(class USkeletalMesh*)                      WeaponMesh                                                  OFFSET(get<T>, {0x518, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.VanityTestCharacter.SetupVanity
	// void SetupVanity();                                                                                                      // [0x19f1390] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.VanityCharacter
/// Size: 0x00A0 (0x000220 - 0x0002C0)
class AVanityCharacter : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 704;

public:
	CMember(class UChildActorComponent*)               ChildActorComponent                                         OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UAnimSequenceBase*)                  Animation                                                   OFFSET(get<T>, {0x228, 8, 0, 0})
	CMember(class USkinColorVanityItem*)               skinColor                                                   OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UBeardColorVanityItem*)              BeardColor                                                  OFFSET(get<T>, {0x238, 8, 0, 0})
	CMember(class UBeardColorVanityItem*)              DynamicBeardColor                                           OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class UHeadVanityItem*)                    Head                                                        OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class UEyeBrowsVanityItem*)                Eyebrows                                                    OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class USideburnsVanityItem*)               Sideburns                                                   OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UMoustacheVanityItem*)               Moustache                                                   OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class UBeardVanityItem*)                   Beard                                                       OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UArmorVanityItem*)                   Armor                                                       OFFSET(get<T>, {0x270, 8, 0, 0})
	CMember(EArmorMeshType)                            ArmorMeshType                                               OFFSET(get<T>, {0x278, 1, 0, 0})
	CMember(class UArmorMaterialVanityItem*)           ArmorColor                                                  OFFSET(get<T>, {0x280, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x288, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             BodyMesh                                                    OFFSET(get<T>, {0x290, 8, 0, 0})
	CMember(class UBeardColorVanityItem*)              DefaultHairColor                                            OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UMaterialInterface*)                 DefaultArmorMaterial                                        OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UClass*)                             itemClass                                                   OFFSET(get<T>, {0x2A8, 8, 0, 0})
	CMember(class UItemSkin*)                          Framework                                                   OFFSET(get<T>, {0x2B0, 8, 0, 0})
	CMember(class UItemSkin*)                          Paintjob                                                    OFFSET(get<T>, {0x2B8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.VanityCharacter.DisplayVanity
	// void DisplayVanity();                                                                                                    // [0x19f04e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.VanityCharacter.Clean
	// void Clean();                                                                                                            // [0x19f01e0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.VanityFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UVanityFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.VanityFunctionLibrary.RandomizeVanityLoadout
	// void RandomizeVanityLoadout(class UObject* WorldContextObject, class APlayerCharacter* Character, FDetailedTagSet Filter); // [0x19f0fb0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.VanityFunctionLibrary.RandomizeAllRandomVanityLoadout
	// void RandomizeAllRandomVanityLoadout(class APlayerCharacter* currentCharacter);                                          // [0x19f0f30] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.VanityFunctionLibrary.CopyPasteVanityLoadout
	// void CopyPasteVanityLoadout(class UObject* WorldContextObject, class UPlayerCharacterID* PlayerId, int32_t fromIndex, int32_t toIndex); // [0x19f0200] Final|Native|Static|Public|BlueprintCallable 
};

/// Class /Script/FSD.IconGenerationBase
/// Size: 0x0020 (0x000220 - 0x000240)
class AIconGenerationBase : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 576;

public:
	CMember(class USceneCaptureComponent2D*)           ActiveCaptureComponent                                      OFFSET(get<T>, {0x220, 8, 0, 0})
	CMember(class UMaterialInterface*)                 DownScaleMaterial                                           OFFSET(get<T>, {0x228, 8, 0, 0})
};

/// Class /Script/FSD.IconGenerationCameraKey
/// Size: 0x0000 (0x000030 - 0x000030)
class UIconGenerationCameraKey : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.IconSceneCaptureComponent
/// Size: 0x0008 (0x0008B8 - 0x0008C0)
class UIconSceneCaptureComponent : public USceneCaptureComponent2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2240;

public:
	CMember(class UIconGenerationCameraKey*)           CameraKey                                                   OFFSET(get<T>, {0x8B8, 8, 0, 0})
};

/// Class /Script/FSD.IconGenerationCharacter
/// Size: 0x0038 (0x000240 - 0x000278)
class AIconGenerationCharacter : public AIconGenerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(class UMaterialInterface*)                 OrigBaseMaterial                                            OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             Mesh                                                        OFFSET(get<T>, {0x248, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             BodyMesh                                                    OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class UBeardColorVanityItem*)              HairColor                                                   OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class UMaterialInterface*)                 ArmorMaterial                                               OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(TArray<class UIconSceneCaptureComponent*>) CaptureComponents                                           OFFSET(get<T>, {0x268, 16, 0, 0})
};

/// Class /Script/FSD.PickaxeIconSceneCaptureComponent
/// Size: 0x0008 (0x0008B8 - 0x0008C0)
class UPickaxeIconSceneCaptureComponent : public USceneCaptureComponent2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2240;

public:
	DMember(bool)                                      bIsFullView                                                 OFFSET(get<bool>, {0x8B8, 1, 0, 0})
	CMember(EPickaxePartLocation)                      CameraKey                                                   OFFSET(get<T>, {0x8B9, 1, 0, 0})
};

/// Class /Script/FSD.IconGenerationPickaxe
/// Size: 0x0010 (0x000240 - 0x000250)
class AIconGenerationPickaxe : public AIconGenerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(TArray<class UPickaxeIconSceneCaptureComponent*>) CaptureComponents                                    OFFSET(get<T>, {0x240, 16, 0, 0})
};

/// Class /Script/FSD.WeaponIconSceneCaptureComponent
/// Size: 0x0008 (0x0008B8 - 0x0008C0)
class UWeaponIconSceneCaptureComponent : public USceneCaptureComponent2D
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2240;

public:
	CMember(class UIconGenerationCameraKey*)           CameraKey                                                   OFFSET(get<T>, {0x8B8, 8, 0, 0})
};

/// Class /Script/FSD.IconGenerationWeapon
/// Size: 0x0010 (0x000240 - 0x000250)
class AIconGenerationWeapon : public AIconGenerationBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(TArray<class UWeaponIconSceneCaptureComponent*>) CaptureComponents                                     OFFSET(get<T>, {0x240, 16, 0, 0})
};

/// Struct /Script/FSD.VanityEventSource
/// Size: 0x0020 (0x000000 - 0x000020)
class FVanityEventSource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FText)                                     EventName                                                   OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(class UTexture2D*)                         EventIcon                                                   OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Class /Script/FSD.VanityEventSourceDataAsset
/// Size: 0x0070 (0x000030 - 0x0000A0)
class UVanityEventSourceDataAsset : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 160;

public:
	SMember(FVanityEventSource)                        EventSource                                                 OFFSET(getStruct<T>, {0x30, 32, 0, 0})
	CMember(TSet<UTagVanityGeneral*>)                  VanityTags                                                  OFFSET(get<T>, {0x50, 80, 0, 0})
};

/// Class /Script/FSD.TagVanityCategory
/// Size: 0x0008 (0x000088 - 0x000090)
class UTagVanityCategory : public UDetailedTagCategory
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	DMember(int32_t)                                   SortingPriority                                             OFFSET(get<int32_t>, {0x88, 4, 0, 0})
};

/// Class /Script/FSD.TagVanity
/// Size: 0x0008 (0x000090 - 0x000098)
class UTagVanity : public UDetailedTag
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	CMember(class UTagVanityCategory*)                 Category                                                    OFFSET(get<T>, {0x90, 8, 0, 0})
};

/// Class /Script/FSD.TagVanityGeneral
/// Size: 0x0000 (0x000098 - 0x000098)
class UTagVanityGeneral : public UTagVanity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.TagVanityStyle
/// Size: 0x0000 (0x000098 - 0x000098)
class UTagVanityStyle : public UTagVanity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.TagVanityHeadwear
/// Size: 0x0000 (0x000098 - 0x000098)
class UTagVanityHeadwear : public UTagVanity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.TagVanityBeards
/// Size: 0x0000 (0x000098 - 0x000098)
class UTagVanityBeards : public UTagVanity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.TagVanityMoustaches
/// Size: 0x0000 (0x000098 - 0x000098)
class UTagVanityMoustaches : public UTagVanity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.TagVanityEyebrows
/// Size: 0x0000 (0x000098 - 0x000098)
class UTagVanityEyebrows : public UTagVanity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.TagVanitySideburns
/// Size: 0x0000 (0x000098 - 0x000098)
class UTagVanitySideburns : public UTagVanity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.TagVanitySeasonalEvent
/// Size: 0x0000 (0x000098 - 0x000098)
class UTagVanitySeasonalEvent : public UTagVanity
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Class /Script/FSD.VanityMasteryLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UVanityMasteryLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.VanityMasteryLibrary.ResetVanityMasteryXP
	// void ResetVanityMasteryXP(class UObject* WorldContext);                                                                  // [0x19f6520] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.VanityMasteryLibrary.MarkFashionitesAwardedForOldPurchasesSeen
	// void MarkFashionitesAwardedForOldPurchasesSeen(class UObject* WorldContext);                                             // [0x19f63d0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.VanityMasteryLibrary.GetVanityMasterySettings
	// FVanityMasterySettings GetVanityMasterySettings();                                                                       // [0x19f5fb0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.VanityMasteryLibrary.GetVanityMasterySave
	// FVanityMasterySave GetVanityMasterySave(class UObject* WorldContext);                                                    // [0x19f5f20] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.VanityMasteryLibrary.GetVanityMasteryFashioniteForLevel
	// int32_t GetVanityMasteryFashioniteForLevel(int32_t InCurrentLevel);                                                      // [0x19f5e90] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.VanityMasteryLibrary.GetFashionitesAwaredForOldPurchases
	// int32_t GetFashionitesAwaredForOldPurchases(class UObject* WorldContext);                                                // [0x19f5a80] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.VanityMasteryLibrary.CalculateVanityMasteryLevelProgress
	// float CalculateVanityMasteryLevelProgress(int32_t Level, int32_t XP);                                                    // [0x19f5770] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.VanityMasteryLibrary.AddVanityMasteryXPFromCost
	// FVanityMasteryResult AddVanityMasteryXPFromCost(class UObject* WorldContext, TArray<FCraftingCost> Cost, class UPlayerCharacterID* characterID); // [0x19f5530] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.VanityMasteryLibrary.AddVanityMasteryXP
	// FVanityMasteryResult AddVanityMasteryXP(class UObject* WorldContext, int32_t XP, class UPlayerCharacterID* PlayerId);    // [0x19f5400] Final|Native|Static|Public|BlueprintCallable 
};

/// Struct /Script/FSD.SchematicBankItem
/// Size: 0x0020 (0x000000 - 0x000020)
class FSchematicBankItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class USchematicPricingTier*)              PricingTier                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class USchematicRarity*)                   Rarity                                                      OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(TArray<class USchematic*>)                 Schematics                                                  OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Class /Script/FSD.VanitySchematicBank
/// Size: 0x0058 (0x000038 - 0x000090)
class UVanitySchematicBank : public USchematicBankBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class USchematicCategory*)                 SchematicCategory                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TMap<class UVanityItem*, FSchematicBankItem>) VanityItems                                              OFFSET(get<T>, {0x40, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.VanitySchematicBank.AppendItems
	// void AppendItems(TArray<UVanityItem*>& toArray);                                                                         // [0x19f56c0] Final|Native|Public|HasOutParms|Const 
};

/// Struct /Script/FSD.VanityTagsGeneral
/// Size: 0x0018 (0x000000 - 0x000018)
class FVanityTagsGeneral : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UTagVanity*)                         DLC                                                         OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTagVanity*)                         Festive                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UTagVanity*)                         Serious                                                     OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FSD.VanityTagSettings
/// Size: 0x0018 (0x000000 - 0x000018)
class FVanityTagSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVanityTagsGeneral)                        GeneralTags                                                 OFFSET(getStruct<T>, {0x0, 24, 0, 0})
};

/// Struct /Script/FSD.VanityMasterySettings
/// Size: 0x0014 (0x000000 - 0x000014)
class FVanityMasterySettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	DMember(int32_t)                                   TotalMasteryLevels                                          OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   XP_RequiredPerLevel                                         OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   XP_ForCreditSpent                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   XP_ForMineralSpent                                          OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   FashionitesLevelUpReward                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.VanitySlotStore
/// Size: 0x0010 (0x000000 - 0x000010)
class FVanitySlotStore : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UVanityItem*>)                VanityItems                                                 OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.VanitySlotCharacter
/// Size: 0x0050 (0x000000 - 0x000050)
class FVanitySlotCharacter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<class UPlayerCharacterID*, FVanitySlotStore>) Characters                                          OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Class /Script/FSD.VanitySettings
/// Size: 0x0208 (0x000030 - 0x000238)
class UVanitySettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class UVanityItem*)                        MedbayArmorItem                                             OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UVanityItem*>)                MedbayArmorMaterials                                        OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UDLCBase*)                           AlwaysLockedDLC                                             OFFSET(get<T>, {0x48, 8, 0, 0})
	SMember(FVanityTagSettings)                        VanityTagSettings                                           OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	SMember(FVanityMasterySettings)                    MasterySettings                                             OFFSET(getStruct<T>, {0x68, 20, 0, 0})
	SMember(FResourceSpawner)                          FashioniteSpawn                                             OFFSET(getStruct<T>, {0x80, 24, 0, 0})
	CMember(TArray<class UTexture2D*>)                 VanityCategoryIcons                                         OFFSET(get<T>, {0x98, 16, 0, 0})
	CMember(TSet<FGuid>)                               ValidIDs                                                    OFFSET(get<T>, {0xA8, 80, 0, 0})
	CMember(TMap<FGuid, class UVanityItem*>)           ItemMap                                                     OFFSET(get<T>, {0xF8, 80, 0, 0})
	CMember(TMap<EVanitySlot, FVanitySlotCharacter>)   GlobalItems                                                 OFFSET(get<T>, {0x148, 80, 0, 0})
	CMember(TMap<EVanitySlot, FVanitySlotCharacter>)   StoreItems                                                  OFFSET(get<T>, {0x198, 80, 0, 0})
	CMember(TMap<EVanitySlot, FVanitySlotCharacter>)   TreassureItems                                              OFFSET(get<T>, {0x1E8, 80, 0, 0})


	/// Functions
	// Function /Script/FSD.VanitySettings.HasNewVanityNotification
	// bool HasNewVanityNotification(class UObject* WorldContextObject, EVanitySlot Slot, class UPlayerCharacterID* characterID); // [0x19f6080] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.VanitySettings.GetVanityCategoryIcon
	// class UTexture2D* GetVanityCategoryIcon(EVanitySlot Slot);                                                               // [0x19f5e00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VanitySettings.GetUnlockedStoreVanityCount
	// void GetUnlockedStoreVanityCount(class UObject* WorldContextObject, EVanitySlot Slot, class UPlayerCharacterID* characterID, int32_t& owned, int32_t& Total); // [0x19f5c50] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
};

/// Class /Script/FSD.VanityTattoo
/// Size: 0x0040 (0x000030 - 0x000070)
class UVanityTattoo : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TWeakObjectPtr<class UTexture2D*>)         Texture                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
	SMember(FVector2D)                                 Location                                                    OFFSET(getStruct<T>, {0x58, 8, 0, 0})
	DMember(float)                                     RotationAngle                                               OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     ScaleBase                                                   OFFSET(get<float>, {0x64, 4, 0, 0})
	DMember(float)                                     ScaleStretch                                                OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Class /Script/FSD.VeinResourceCreator
/// Size: 0x0048 (0x000030 - 0x000078)
class UVeinResourceCreator : public UResourceCreator
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 120;

public:
	CMember(class UVeinResourceData*)                  Resource                                                    OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UDebrisPositioning*)                 Positioning                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(ECarveFilterType)                          CarveType                                                   OFFSET(get<T>, {0x40, 1, 0, 0})
	DMember(float)                                     SegmentMaxDot                                               OFFSET(get<float>, {0x44, 4, 0, 0})
	DMember(float)                                     VeinWorldHorizontalMaxDot                                   OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     VeinWorldHorizontalMinDot                                   OFFSET(get<float>, {0x4C, 4, 0, 0})
	SMember(FRandRange)                                VeinLength                                                  OFFSET(getStruct<T>, {0x50, 8, 0, 0})
	CMember(class UFloodFillSettings*)                 Noise                                                       OFFSET(get<T>, {0x58, 8, 0, 0})
	DMember(float)                                     range                                                       OFFSET(get<float>, {0x60, 4, 0, 0})
	DMember(float)                                     NoiseRange                                                  OFFSET(get<float>, {0x64, 4, 0, 0})
	CMember(TArray<TWeakObjectPtr<UDebrisBase*>>)      Debris                                                      OFFSET(get<T>, {0x68, 16, 0, 0})
};

/// Class /Script/FSD.VeinResourceData
/// Size: 0x0018 (0x0000F0 - 0x000108)
class UVeinResourceData : public UResourceData
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 264;

public:
	CMember(class UTerrainMaterial*)                   TerrainMaterial                                             OFFSET(get<T>, {0xF0, 8, 0, 0})
	DMember(float)                                     UnitsPerLenth                                               OFFSET(get<float>, {0xF8, 4, 0, 0})
	DMember(bool)                                      ScaleToResourceDistribution                                 OFFSET(get<bool>, {0xFC, 1, 0, 0})
	CMember(class UVeinResourceCreator*)               ResourceCreator                                             OFFSET(get<T>, {0x100, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.VeinResourceData.GetTerrainMaterial
	// class UTerrainMaterial* GetTerrainMaterial();                                                                            // [0x19f5c20] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VeinResourceData.GetDesiredAmount
	// float GetDesiredAmount(class AProceduralSetup* pls);                                                                     // [0x19f5910] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.VictoryPoseFunctionLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UVictoryPoseFunctionLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.VictoryPoseFunctionLibrary.IsRandomVictoryPose
	// bool IsRandomVictoryPose(class UVictoryPose* VictoryPose);                                                               // [0x19f6180] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.VictoryPoseFunctionLibrary.GetOwnedVictoryPoses
	// TArray<UVictoryPose*> GetOwnedVictoryPoses(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);    // [0x19f5b10] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.VictoryPoseFunctionLibrary.GetEquippedVictoryPose
	// class UVictoryPose* GetEquippedVictoryPose(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);    // [0x19f59b0] Final|Native|Static|Public|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.VictoryPose
/// Size: 0x0118 (0x000060 - 0x000178)
class UVictoryPose : public USavablePrimaryDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x68, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x80, 24, 0, 0})
	CMember(class UItemAquisitionBase*)                Aquisition                                                  OFFSET(get<T>, {0x98, 8, 0, 0})
	CMember(TArray<TWeakObjectPtr<UAnimSequence*>>)    Walks                                                       OFFSET(get<T>, {0xA0, 16, 0, 0})
	CMember(TWeakObjectPtr<class UAnimSequence*>)      pose                                                        OFFSET(get<T>, {0xB0, 8, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             Prop_Actor                                                  OFFSET(get<T>, {0xD8, 40, 0, 0})
	CMember(TWeakObjectPtr<class UAnimSequence*>)      Prop_Walk                                                   OFFSET(get<T>, {0x100, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAnimSequence*>)      Prop_Pose                                                   OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAnimSequence*>)      Prop_Idle                                                   OFFSET(get<T>, {0x150, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.VictoryPose.Unlock
	// void Unlock(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                                   // [0x19f6700] Final|Native|Public|BlueprintCallable|Const 
	// Function /Script/FSD.VictoryPose.ResetUnlock
	// void ResetUnlock(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                              // [0x19f6450] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.VictoryPose.IsUnlockedNotFromStart
	// bool IsUnlockedNotFromStart(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                   // [0x19f62e0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VictoryPose.IsUnlocked
	// bool IsUnlocked(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                               // [0x19f6210] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.VictoryPose.Equip
	// void Equip(class UObject* WorldContextObject, class UPlayerCharacterID* characterID);                                    // [0x19f5840] Final|Native|Public|BlueprintCallable|Const 
};

/// Class /Script/FSD.VictoryPoseSchematicBank
/// Size: 0x0058 (0x000038 - 0x000090)
class UVictoryPoseSchematicBank : public USchematicBankBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 144;

public:
	CMember(class USchematicCategory*)                 SchematicCategory                                           OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TMap<class UVictoryPose*, FSchematicBankItem>) VictoryPoses                                            OFFSET(get<T>, {0x40, 80, 0, 0})
};

/// Class /Script/FSD.VictoryPoseSettings
/// Size: 0x0040 (0x000030 - 0x000070)
class UVictoryPoseSettings : public UDataAsset
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(class UTexture2D*)                         GenericVictoryPoseIcon                                      OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TArray<class UVictoryPose*>)               LoadedVictoryPoses                                          OFFSET(get<T>, {0x38, 16, 0, 0})
	CMember(class UVictoryPose*)                       RandomVictoryPose                                           OFFSET(get<T>, {0x48, 8, 0, 0})
	CMember(TArray<class UClass*>)                     ModReferencesHack                                           OFFSET(get<T>, {0x50, 16, 0, 0})
	CMember(TArray<class UClass*>)                     ModProxyHack                                                OFFSET(get<T>, {0x60, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.VictoryPoseSettings.GetVictoryPoses
	// TArray<UVictoryPose*> GetVictoryPoses();                                                                                 // [0x19f5ff0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.WalkingStateComponent
/// Size: 0x0060 (0x000100 - 0x000160)
class UWalkingStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 352;

public:
	DMember(bool)                                      SlidingEnabled                                              OFFSET(get<bool>, {0x100, 1, 0, 0})
	DMember(bool)                                      ShowDebug                                                   OFFSET(get<bool>, {0x101, 1, 0, 0})
	DMember(float)                                     SlideAngle                                                  OFFSET(get<float>, {0x104, 4, 0, 0})
	DMember(float)                                     SlideAcceleration                                           OFFSET(get<float>, {0x108, 4, 0, 0})
	DMember(float)                                     MaxSlideSpeed                                               OFFSET(get<float>, {0x10C, 4, 0, 0})
	DMember(float)                                     MaxClimbDistance                                            OFFSET(get<float>, {0x110, 4, 0, 0})
	CMember(class USoundBase*)                         AudioSliding                                                OFFSET(get<T>, {0x118, 8, 0, 0})
	CMember(class USoundBase*)                         IceSliding                                                  OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UAudioComponent*)                    AudioComponentSliding                                       OFFSET(get<T>, {0x128, 8, 0, 0})
	CMember(class UAudioComponent*)                    AudioComponentIceSliding                                    OFFSET(get<T>, {0x130, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.WalkingStateComponent.TrackGrindCallback
	// void TrackGrindCallback(class APlayerCharacter* User, EInputKeys Key);                                                   // [0x19f6630] Final|Native|Protected 
	// Function /Script/FSD.WalkingStateComponent.Server_StartTrackMovement
	// void Server_StartTrackMovement(class UTrackBuilderMovement* InMovement);                                                 // [0x18f9880] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.WalkingStateComponent.Server_SetIsSliding
	// void Server_SetIsSliding(bool isSliding);                                                                                // [0x19f65a0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.WalkingStateComponent.JumpPress
	// void JumpPress();                                                                                                        // [0x19f63b0] Final|Native|Public  
};

/// Struct /Script/FSD.FakeSawMover
/// Size: 0x0070 (0x000000 - 0x000070)
class FFakeSawMover : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FVector)                                   PrevPos                                                     OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   NextPos                                                     OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   Velocity                                                    OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FPlane)                                    Plane                                                       OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	CMember(class UCurveFloat*)                        VelOverTime                                                 OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     SpeedCof                                                    OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     TickRate                                                    OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(float)                                     TickTime                                                    OFFSET(get<float>, {0x50, 4, 0, 0})
	DMember(float)                                     AccumulatedTime                                             OFFSET(get<float>, {0x54, 4, 0, 0})
	DMember(float)                                     TotalTime                                                   OFFSET(get<float>, {0x58, 4, 0, 0})
	DMember(bool)                                      Moving                                                      OFFSET(get<bool>, {0x5C, 1, 0, 0})
	DMember(float)                                     GravityTimer                                                OFFSET(get<float>, {0x60, 4, 0, 0})
};

/// Struct /Script/FSD.SawFakeMoveState
/// Size: 0x0004 (0x000024 - 0x000028)
class FSawFakeMoveState : public FFakeMoveState
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     GravityTimer                                                OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Class /Script/FSD.WallSaw
/// Size: 0x0130 (0x000220 - 0x000350)
class AWallSaw : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 848;

public:
	CMember(class UCapsuleComponent*)                  HitCapsule                                                  OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(float)                                     SpeedCof                                                    OFFSET(get<float>, {0x228, 4, 0, 0})
	CMember(class UCurveFloat*)                        VelOverTime                                                 OFFSET(get<T>, {0x230, 8, 0, 0})
	CMember(class UParticleSystemComponent*)           GroundParticles                                             OFFSET(get<T>, {0x238, 8, 0, 0})
	SMember(FFakeSawMover)                             FakeMover                                                   OFFSET(getStruct<T>, {0x240, 112, 0, 0})
	SMember(FSawFakeMoveState)                         PosVel                                                      OFFSET(getStruct<T>, {0x2B0, 40, 0, 0})
	DMember(float)                                     PopWeakpointRadius                                          OFFSET(get<float>, {0x2D8, 4, 0, 0})
	DMember(float)                                     PlayerHitRangeFromCenter                                    OFFSET(get<float>, {0x2DC, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.WallSaw.UpdateCheckForWeakpoints
	// void UpdateCheckForWeakpoints();                                                                                         // [0x19fc510] Final|Native|Protected 
	// Function /Script/FSD.WallSaw.SetMovementDirection
	// void SetMovementDirection(FVector Direction);                                                                            // [0x19fbf10] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.WallSaw.PushEnemyAndCheckForWeakpoint
	// void PushEnemyAndCheckForWeakpoint(class AActor* Actor);                                                                 // [0x19fbcf0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.WallSaw.OnRep_PosVel
	// void OnRep_PosVel(FSawFakeMoveState& PosVel);                                                                            // [0x19fb2b0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.WallSaw.OnDurationEnd
	// void OnDurationEnd();                                                                                                    // [0x19fae70] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.WallSaw.Initialize
	// void Initialize(FVector Direction);                                                                                      // [0x19fade0] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.WallSaw.HasJustHit
	// bool HasJustHit(class AActor* enemy);                                                                                    // [0x19fad40] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.WallSaw.GrazeOverlapCallback
	// void GrazeOverlapCallback(class AActor* Actor, class UPrimitiveComponent* prim);                                         // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WallSaw.All_Initialize
	// void All_Initialize(FTransform Transform, FVector Direction);                                                            // [0x19fa8b0] Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults 
};

/// Struct /Script/FSD.WeakpointChannel
/// Size: 0x0030 (0x000000 - 0x000030)
class FWeakpointChannel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UFSDPhysicalMaterial*)               WeakPointMaterial                                           OFFSET(get<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   BoneIndex                                                   OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           Mid                                                         OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Class /Script/FSD.WeakpointGlowComponent
/// Size: 0x00C8 (0x0000B0 - 0x000178)
class UWeakpointGlowComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 376;

public:
	SMember(FName)                                     EmissiveParam                                               OFFSET(getStruct<T>, {0xB0, 8, 0, 0})
	CMember(TArray<FWeakpointChannel>)                 Channels                                                    OFFSET(get<T>, {0xB8, 16, 0, 0})
	SMember(FRuntimeFloatCurve)                        WeakpointHitCurve                                           OFFSET(getStruct<T>, {0xD0, 136, 0, 0})
	DMember(float)                                     CurveMultiplier                                             OFFSET(get<float>, {0x158, 4, 0, 0})
	CMember(EWeakpointGlowMode)                        Mode                                                        OFFSET(get<T>, {0x15C, 1, 0, 0})
	CMember(class UFSDPhysicalMaterial*)               WeakPointMaterial                                           OFFSET(get<T>, {0x168, 8, 0, 0})
	DMember(bool)                                      AddFirstChannelAutomatically                                OFFSET(get<bool>, {0x170, 1, 0, 0})
	DMember(int32_t)                                   ReplaceMatIndex                                             OFFSET(get<int32_t>, {0x174, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.WeakpointGlowComponent.StopLoopingGlow
	// bool StopLoopingGlow(int32_t aGlowID, bool aFade);                                                                       // [0x19fc440] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeakpointGlowComponent.ShowBodypartHit
	// void ShowBodypartHit(float amount, float BaseAmount, FDamageData& DamageData);                                           // [0x19fc2f0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.WeakpointGlowComponent.SetUpWeakPointGlowOnMeshByBone
	// void SetUpWeakPointGlowOnMeshByBone(class USkeletalMeshComponent*& Mesh, int32_t MaterialIndex, FName Bone, class UHealthComponentBase* HealthComponent); // [0x19fc190] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.WeakpointGlowComponent.SetUpWeakPointGlowOnMesh
	// int32_t SetUpWeakPointGlowOnMesh(class UMeshComponent* Mesh, int32_t MaterialIndex, class UFSDPhysicalMaterial* PhysicalMaterial, class UHealthComponentBase* HealthComponent); // [0x19fc030] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeakpointGlowComponent.SetChannelEnabled
	// void SetChannelEnabled(bool Enabled, int32_t Channel);                                                                   // [0x19fbe40] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeakpointGlowComponent.EnableWeakpointRegistration
	// void EnableWeakpointRegistration(bool Enabled);                                                                          // [0x19fab00] Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WeakpointGlowComponent.All_ShowWeakPointHit
	// void All_ShowWeakPointHit(char Channel);                                                                                 // [0x19faa80] Net|Native|Event|NetMulticast|Protected 
	// Function /Script/FSD.WeakpointGlowComponent.AddWeakpointGlow
	// void AddWeakpointGlow(bool loopIndefinitely, float LoopTime, class UCurveFloat* GrowCurve, class UCurveFloat* FadeCurve, int32_t UniqueId, int32_t Channel); // [0x19fa6d0] Final|Native|Public|BlueprintCallable 
};

/// Class /Script/FSD.WeaponEffectSubsystem
/// Size: 0x0020 (0x000030 - 0x000050)
class UWeaponEffectSubsystem : public UWorldSubsystem
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(class UClass*)                             ElectrifyPlatformsActorClass                                OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Class /Script/FSD.WeaponFireOwner
/// Size: 0x0000 (0x000028 - 0x000028)
class UWeaponFireOwner : public UInterface
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.WeaponFireOwner.GetPlayerCharacter
	// class APlayerCharacter* GetPlayerCharacter();                                                                            // [0x18f0940] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WeaponFireOwner.GetMuzzleQuat
	// FQuat GetMuzzleQuat();                                                                                                   // [0x19fad00] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WeaponFireOwner.GetMuzzleLocation
	// FVector GetMuzzleLocation();                                                                                             // [0x19facc0] Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WeaponFireOwner.GetIsLocallyControlled
	// bool GetIsLocallyControlled();                                                                                           // [0x18f0a20] Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WeaponFireOwner.GetIsFirstPerson
	// bool GetIsFirstPerson();                                                                                                 // [0x18ce690] Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.AssaultRifle
/// Size: 0x0020 (0x000780 - 0x0007A0)
class AAssaultRifle : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1952;

public:
	DMember(float)                                     KillsResetAccuracyDuration                                  OFFSET(get<float>, {0x780, 4, 0, 0})
	DMember(bool)                                      KillsTriggersStatusEffect                                   OFFSET(get<bool>, {0x784, 1, 0, 0})
	CMember(class UClass*)                             KillTriggeredStatusEffect                                   OFFSET(get<T>, {0x798, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.AssaultRifle.OnTimerElapsed
	// void OnTimerElapsed();                                                                                                   // [0x19fbcd0] Final|Native|Protected 
	// Function /Script/FSD.AssaultRifle.OnEnemyKilled
	// void OnEnemyKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);                        // [0x19fae90] Final|Native|Protected 
	// Function /Script/FSD.AssaultRifle.Client_ResetAccuracy
	// void Client_ResetAccuracy();                                                                                             // [0x17f4bf0] Net|NetReliableNative|Event|Protected|NetClient 
};

/// Class /Script/FSD.FlareGun
/// Size: 0x0000 (0x000780 - 0x000780)
class AFlareGun : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1920;

public:
};

/// Class /Script/FSD.SawedOffShotgun
/// Size: 0x0038 (0x000780 - 0x0007B8)
class ASawedOffShotgun : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1976;

public:
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(class UDamageComponent*)                   ShockWaveDamageComponent                                    OFFSET(get<T>, {0x788, 8, 0, 0})
	DMember(float)                                     FearFactorOnFire                                            OFFSET(get<float>, {0x790, 4, 0, 0})
	DMember(float)                                     FearFactorOnFireRadius                                      OFFSET(get<float>, {0x794, 4, 0, 0})
	DMember(bool)                                      ShotgunJumpEnabled                                          OFFSET(get<bool>, {0x798, 1, 0, 0})
	DMember(float)                                     ShotgunJumpForce                                            OFFSET(get<float>, {0x79C, 4, 0, 0})
	DMember(bool)                                      ShockwaveEnabled                                            OFFSET(get<bool>, {0x7A0, 1, 0, 0})
	DMember(float)                                     ShockWaveDistance                                           OFFSET(get<float>, {0x7A4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.SawedOffShotgun.SetShockWaveDamageComponent
	// void SetShockWaveDamageComponent(class UDamageComponent* Component);                                                     // [0x19fbfa0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.Revoler
/// Size: 0x0018 (0x000780 - 0x000798)
class ARevoler : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1944;

public:
	DMember(float)                                     OnKillFearFactor                                            OFFSET(get<float>, {0x780, 4, 0, 0})
	DMember(float)                                     OnKillFearRange                                             OFFSET(get<float>, {0x784, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.Revoler.OnTargetKilled
	// void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysMat, bool wasDirectHit);                       // [0x19fba90] Final|Native|Protected 
};

/// Class /Script/FSD.BasicPistol
/// Size: 0x0028 (0x000780 - 0x0007A8)
class ABasicPistol : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1960;

public:
	CMember(class UDamageComponent*)                   DamageComponent                                             OFFSET(get<T>, {0x780, 8, 0, 0})
	DMember(float)                                     BurstArmorDamageMultiplier                                  OFFSET(get<float>, {0x788, 4, 0, 0})
	DMember(float)                                     ConsecutiveHitsDamageBonus                                  OFFSET(get<float>, {0x794, 4, 0, 0})
	DMember(float)                                     ConsecutiveHitsMaxBonus                                     OFFSET(get<float>, {0x7A4, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.BasicPistol.OnTargetDamaged
	// void OnTargetDamaged(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x19fb560] Final|Native|Protected 
	// Function /Script/FSD.BasicPistol.OnHit
	// void OnHit(FHitResult& HitResult, bool isAlwaysPenetrated);                                                              // [0x19fafa0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FSD.ElectricalSMG
/// Size: 0x0080 (0x000780 - 0x000800)
class AElectricalSMG : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2048;

public:
	CMember(class UClass*)                             SentryGunClass                                              OFFSET(get<T>, {0x780, 8, 0, 0})
	CMember(class UClass*)                             AoEStatusEffect                                             OFFSET(get<T>, {0x788, 8, 0, 0})
	CMember(class UParticleSystem*)                    AoEParticle                                                 OFFSET(get<T>, {0x790, 8, 0, 0})
	CMember(class USoundCue*)                          AoESound                                                    OFFSET(get<T>, {0x798, 8, 0, 0})
	DMember(float)                                     AoEStatusEffectChance                                       OFFSET(get<float>, {0x7A0, 4, 0, 0})
	DMember(float)                                     AoEStatusEffectRange                                        OFFSET(get<float>, {0x7A4, 4, 0, 0})
	DMember(bool)                                      TurretPlasmaLineEnabled                                     OFFSET(get<bool>, {0x7A8, 1, 0, 0})
	DMember(float)                                     ElectrocutionChance                                         OFFSET(get<float>, {0x7AC, 4, 0, 0})
	DMember(bool)                                      TurretEMPDischargeEnabled                                   OFFSET(get<bool>, {0x7B0, 1, 0, 0})
	DMember(bool)                                      ElectricfyPlatformsEnabled                                  OFFSET(get<bool>, {0x7B1, 1, 0, 0})
	CMember(TArray<class UFSDPhysicalMaterial*>)       PlatformMaterials                                           OFFSET(get<T>, {0x7B8, 16, 0, 0})
	CMember(TSoftObjectPtr<class UClass*>)             ElectrifyPlatformsActorClass                                OFFSET(get<T>, {0x7C8, 40, 0, 0})


	/// Functions
	// Function /Script/FSD.ElectricalSMG.OnTerrainHit
	// void OnTerrainHit(FVector& Location, FRotator& Rotation, class UFSDPhysicalMaterial* PhysicalMaterial);                  // [0x19fbba0] Final|Native|Protected|HasOutParms|HasDefaults 
	// Function /Script/FSD.ElectricalSMG.OnTargetDamaged
	// void OnTargetDamaged(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x19fb6c0] Final|Native|Protected 
	// Function /Script/FSD.ElectricalSMG.OnStatusEffectPushed
	// void OnStatusEffectPushed(class UHealthComponentBase* Health);                                                           // [0x19fb370] Final|Native|Protected 
	// Function /Script/FSD.ElectricalSMG.All_OnAoETriggered
	// void All_OnAoETriggered(FVector_NetQuantize Location, FVector_NetQuantizeNormal Normal);                                 // [0x19fa9c0] Net|Native|Event|NetMulticast|Protected|Const 
};

/// Class /Script/FSD.AutoShotgun
/// Size: 0x0010 (0x000780 - 0x000790)
class AAutoShotgun : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1936;

public:
	CMember(class UClass*)                             CQCKillBuff                                                 OFFSET(get<T>, {0x788, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.AutoShotgun.OnTargetKilled
	// void OnTargetKilled(class AActor* Target, class UFSDPhysicalMaterial* PhysicalMaterial, bool wasDirectHit);              // [0x19fb980] Final|Native|Protected 
	// Function /Script/FSD.AutoShotgun.OnTargetDamaged
	// void OnTargetDamaged(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x19fb400] Final|Native|Protected 
};

/// Class /Script/FSD.LineCutter
/// Size: 0x0028 (0x000780 - 0x0007A8)
class ALineCutter : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1960;

public:
	DMember(bool)                                      StopUsingReversesProjectile                                 OFFSET(get<bool>, {0x780, 1, 0, 0})
	DMember(bool)                                      RotateProjectileUntillStop                                  OFFSET(get<bool>, {0x781, 1, 0, 0})
	DMember(bool)                                      ExplodeLastProjectileOnNextFireAttempt                      OFFSET(get<bool>, {0x782, 1, 0, 0})
	CMember(TArray<class UItemUpgrade*>)               Upgrades                                                    OFFSET(get<T>, {0x788, 16, 0, 0})
	CMember(TWeakObjectPtr<class ALineCutterProjectile*>) LastProjectile                                           OFFSET(get<T>, {0x798, 8, 0, 0})
	DMember(float)                                     MinExplosiveGoodbyeActivationTimme                          OFFSET(get<float>, {0x7A0, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.LineCutter.Server_StopRotatingProjectile
	// void Server_StopRotatingProjectile();                                                                                    // [0x17f4bf0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LineCutter.Server_ReverseLastProjectile
	// void Server_ReverseLastProjectile();                                                                                     // [0x17f4bd0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.LineCutter.Server_DestroyOldProjectile
	// void Server_DestroyOldProjectile();                                                                                      // [0x17f3ac0] Net|Native|Event|Public|NetServer 
	// Function /Script/FSD.LineCutter.OnRep_LastProjectile
	// void OnRep_LastProjectile();                                                                                             // [0xbd29a0] Final|Native|Protected|Const 
	// Function /Script/FSD.LineCutter.OnProjectileLaunched
	// void OnProjectileLaunched(class AProjectileBase* Projectile);                                                            // [0x19fb200] Final|Native|Protected 
	// Function /Script/FSD.LineCutter.OnFireWhileLastProjectileAlive
	// void OnFireWhileLastProjectileAlive(class ALineCutterProjectile* Projectile);                                            // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.Magazine
/// Size: 0x0018 (0x000220 - 0x000238)
class AMagazine : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 568;

public:
	CMember(class USoundCue*)                          ImpactGroundSound                                           OFFSET(get<T>, {0x228, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.Magazine.OnItemSkinned
	// void OnItemSkinned(class USkinEffect* Skin);                                                                             // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.Magazine.ActorWasHit
	// void ActorWasHit(class AActor* SelfActor, class AActor* OtherActor, FVector NormalImpulse, FHitResult& Hit);             // [0x19fa530] Final|Native|Protected|HasOutParms|HasDefaults 
};

/// Class /Script/FSD.WeaponHitCountEffect
/// Size: 0x0008 (0x000028 - 0x000030)
class UWeaponHitCountEffect : public UObject
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      UsesDamageEffects                                           OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Class /Script/FSD.WeaponHitCounterComponent
/// Size: 0x0020 (0x0000B0 - 0x0000D0)
class UWeaponHitCounterComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 208;

public:
	CMember(class UWeaponHitCountEffect*)              HitEffect                                                   OFFSET(get<T>, {0xB0, 8, 0, 0})
	DMember(bool)                                      RequiresWeakpointHit                                        OFFSET(get<bool>, {0xB8, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.WeaponHitCounterComponent.Server_OnReloading
	// void Server_OnReloading();                                                                                               // [0x18544e0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.WeaponHitCounterComponent.OnTargetDamaged
	// void OnTargetDamaged(class UHealthComponentBase* Health, float amount, class UPrimitiveComponent* HitComponent, class UFSDPhysicalMaterial* PhysicalMaterial); // [0x19fb820] Final|Native|Protected 
	// Function /Script/FSD.WeaponHitCounterComponent.OnStoppedUsing
	// void OnStoppedUsing();                                                                                                   // [0xbd29a0] Final|Native|Protected 
	// Function /Script/FSD.WeaponHitCounterComponent.OnReloading
	// void OnReloading();                                                                                                      // [0x19fb290] Final|Native|Protected 
	// Function /Script/FSD.WeaponHitCounterComponent.All_ShowDamageEffects
	// void All_ShowDamageEffects(TArray<TWeakObjectPtr<AActor*>> Targets);                                                     // [0x19d2010] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.DamageHitCountEffect
/// Size: 0x0038 (0x000030 - 0x000068)
class UDamageHitCountEffect : public UWeaponHitCountEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	DMember(float)                                     DamagePerHit                                                OFFSET(get<float>, {0x30, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UParticleSystem*)                    DamageParticle                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class USoundCue*)                          DamageSound                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
	DMember(bool)                                      DeadBugWalkingTargetMarking                                 OFFSET(get<bool>, {0x50, 1, 0, 0})
	DMember(float)                                     ExtraDamageForCalculatingDBW                                OFFSET(get<float>, {0x54, 4, 0, 0})
	CMember(class UClass*)                             DeadBugWalkingSTE                                           OFFSET(get<T>, {0x58, 8, 0, 0})
};

/// Class /Script/FSD.StatusHitCountEffect
/// Size: 0x0010 (0x000030 - 0x000040)
class UStatusHitCountEffect : public UWeaponHitCountEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             StatusEffect                                                OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(float)                                     ChancePerHit                                                OFFSET(get<float>, {0x38, 4, 0, 0})
};

/// Class /Script/FSD.RicochetHitCountEffect
/// Size: 0x0000 (0x000030 - 0x000030)
class URicochetHitCountEffect : public UWeaponHitCountEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Class /Script/FSD.ChargedHitCountEffect
/// Size: 0x0020 (0x000030 - 0x000050)
class UChargedHitCountEffect : public UWeaponHitCountEffect
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	DMember(float)                                     DamagePerHit                                                OFFSET(get<float>, {0x34, 4, 0, 0})
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(class UParticleSystem*)                    DamageParticle                                              OFFSET(get<T>, {0x40, 8, 0, 0})
	CMember(class USoundCue*)                          DamageSound                                                 OFFSET(get<T>, {0x48, 8, 0, 0})
};

/// Class /Script/FSD.WeaponHitEffectComponent
/// Size: 0x0010 (0x0000B0 - 0x0000C0)
class UWeaponHitEffectComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 192;

public:
	DMember(float)                                     EffectChance                                                OFFSET(get<float>, {0xB0, 4, 0, 0})
	CMember(class UClass*)                             ActorToSpawn                                                OFFSET(get<T>, {0xB8, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.WeaponHitEffectComponent.Server_SpawnEffect
	// void Server_SpawnEffect(FVector_NetQuantize Location, FRotator Rotation);                                                // [0x19fbd80] Net|NetReliableNative|Event|Protected|NetServer|HasDefaults 
	// Function /Script/FSD.WeaponHitEffectComponent.OnHit
	// void OnHit(FHitResult& HitResult, bool isAlwaysPenetrated);                                                              // [0x19fb0d0] Final|Native|Protected|HasOutParms 
};

/// Class /Script/FSD.WeightRoomSelectorLibrary
/// Size: 0x0000 (0x000028 - 0x000028)
class UWeightRoomSelectorLibrary : public UBlueprintFunctionLibrary
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:


	/// Functions
	// Function /Script/FSD.WeightRoomSelectorLibrary.SetupWeightedRoomSelector
	// void SetupWeightedRoomSelector(FWeightedRoomSelector& Target, TArray<URoomGenerator*>& Rooms);                           // [0x19ffa70] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.WeightRoomSelectorLibrary.SelectRandomRoom
	// class URoomGenerator* SelectRandomRoom(FWeightedRoomSelector& Target, FRandomStream& RandomStream);                      // [0x19ff550] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
	// Function /Script/FSD.WeightRoomSelectorLibrary.GetRandomRoom
	// class URoomGenerator* GetRandomRoom(TArray<URoomGenerator*>& Rooms, bool removeChosenRoom, FRandomStream& RandomStream); // [0x19fea60] Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure 
};

/// Class /Script/FSD.WidgetToRenderTargetComponent
/// Size: 0x00E0 (0x0000B0 - 0x000190)
class UWidgetToRenderTargetComponent : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	CMember(class UClass*)                             WidgetClass                                                 OFFSET(get<T>, {0xB0, 8, 0, 0})
	SMember(FIntPoint)                                 DrawSize                                                    OFFSET(getStruct<T>, {0xB8, 8, 0, 0})
	DMember(bool)                                      bManuallyRedraw                                             OFFSET(get<bool>, {0xC0, 1, 0, 0})
	DMember(bool)                                      bRedrawRequested                                            OFFSET(get<bool>, {0xC1, 1, 0, 0})
	DMember(float)                                     RedrawTime                                                  OFFSET(get<float>, {0xC4, 4, 0, 0})
	DMember(float)                                     LastWidgetRenderTime                                        OFFSET(get<float>, {0xC8, 4, 0, 0})
	DMember(bool)                                      bWindowFocusable                                            OFFSET(get<bool>, {0xCC, 1, 0, 0})
	SMember(FIntPoint)                                 CurrentDrawSize                                             OFFSET(getStruct<T>, {0xD0, 8, 0, 0})
	DMember(bool)                                      bDrawAtDesiredSize                                          OFFSET(get<bool>, {0xD8, 1, 0, 0})
	SMember(FVector2D)                                 Pivot                                                       OFFSET(getStruct<T>, {0xDC, 8, 0, 0})
	CMember(class UMaterialInterface*)                 BaseMaterial                                                OFFSET(get<T>, {0xE8, 8, 0, 0})
	CMember(class ULocalPlayer*)                       OwnerPlayer                                                 OFFSET(get<T>, {0xF0, 8, 0, 0})
	SMember(FLinearColor)                              BackgroundColor                                             OFFSET(getStruct<T>, {0xF8, 16, 0, 0})
	SMember(FLinearColor)                              TintColorAndOpacity                                         OFFSET(getStruct<T>, {0x108, 16, 0, 0})
	DMember(float)                                     OpacityFromTexture                                          OFFSET(get<float>, {0x118, 4, 0, 0})
	DMember(bool)                                      bIsTwoSided                                                 OFFSET(get<bool>, {0x11C, 1, 0, 0})
	DMember(bool)                                      TickWhenOffscreen                                           OFFSET(get<bool>, {0x11D, 1, 0, 0})
	CMember(class UUserWidget*)                        Widget                                                      OFFSET(get<T>, {0x120, 8, 0, 0})
	CMember(class UTextureRenderTarget2D*)             RenderTarget                                                OFFSET(get<T>, {0x148, 8, 0, 0})
	CMember(class UMaterialInstanceDynamic*)           MaterialInstance                                            OFFSET(get<T>, {0x150, 8, 0, 0})
	DMember(bool)                                      bEditTimeUsable                                             OFFSET(get<bool>, {0x158, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.WidgetToRenderTargetComponent.SetWidget
	// void SetWidget(class UUserWidget* Widget);                                                                               // [0x19ff9e0] Native|Public|BlueprintCallable 
	// Function /Script/FSD.WidgetToRenderTargetComponent.SetOwnerPlayer
	// void SetOwnerPlayer(class ULocalPlayer* LocalPlayer);                                                                    // [0x19ff6e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WidgetToRenderTargetComponent.SetBackgroundColor
	// void SetBackgroundColor(FLinearColor NewBackgroundColor);                                                                // [0x19ff650] Final|Native|Public|HasDefaults|BlueprintCallable 
	// Function /Script/FSD.WidgetToRenderTargetComponent.RequestRedraw
	// void RequestRedraw();                                                                                                    // [0x1920800] Native|Public|BlueprintCallable 
	// Function /Script/FSD.WidgetToRenderTargetComponent.GetUserWidgetObject
	// class UUserWidget* GetUserWidgetObject();                                                                                // [0x19fec00] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WidgetToRenderTargetComponent.GetRenderTarget
	// class UTextureRenderTarget2D* GetRenderTarget();                                                                         // [0x19febb0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WidgetToRenderTargetComponent.GetOwnerPlayer
	// class ULocalPlayer* GetOwnerPlayer();                                                                                    // [0x19fea30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WidgetToRenderTargetComponent.GetMaterialInstance
	// class UMaterialInstanceDynamic* GetMaterialInstance();                                                                   // [0x19fe920] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Class /Script/FSD.WindowManager
/// Size: 0x00E0 (0x0000B0 - 0x000190)
class UWindowManager : public UActorComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 400;

public:
	SMember(FMulticastInlineDelegate)                  OnFirstWindowOpened                                         OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnLastWindowClosed                                          OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	CMember(class USoundCue*)                          AudioWindowOpen                                             OFFSET(get<T>, {0xD0, 8, 0, 0})
	CMember(TArray<class UWindowWidget*>)              WindowStack                                                 OFFSET(get<T>, {0xD8, 16, 0, 0})
	CMember(TMap<class UClass*, class UWindowWidget*>) WindowList                                                  OFFSET(get<T>, {0xE8, 80, 0, 0})
	CMember(TMap<class UClass*, TWeakObjectPtr<UUserWidget*>>) WidgetSingletonCache                                OFFSET(get<T>, {0x138, 80, 0, 0})
	DMember(bool)                                      ResolutionDownscaleActive                                   OFFSET(get<bool>, {0x188, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.WindowManager.SetSingletonWidgetVisibility
	// void SetSingletonWidgetVisibility(class UClass* WidgetClass, ESlateVisibility Visibility);                               // [0x19ff800] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WindowManager.ReplaceWindow
	// void ReplaceWindow(class UWindowWidget* Window);                                                                         // [0x19ff430] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WindowManager.OpenWindowFromClass
	// class UWindowWidget* OpenWindowFromClass(class UClass* WindowClass, int32_t ZOrder, bool ShowCursor);                    // [0x19ff1a0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WindowManager.OpenWindow
	// void OpenWindow(class UWindowWidget* Window, bool PlayAudio, bool ShowCursor);                                           // [0x19ff090] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WindowManager.OpenSingleUseWindow
	// class UWindowWidget* OpenSingleUseWindow(class UClass* WindowClass, int32_t ZOrder);                                     // [0x19fefc0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WindowManager.IsWindowOpen
	// bool IsWindowOpen(class UWindowWidget* Window);                                                                          // [0x19fecd0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WindowManager.IsTopWindow
	// bool IsTopWindow(class UWindowWidget* Window);                                                                           // [0x19fec30] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WindowManager.GetOrCreateSingletonWidget
	// class UUserWidget* GetOrCreateSingletonWidget(class UClass* WidgetClass, bool& WidgetCreated);                           // [0x19fe950] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.WindowManager.GetCurrentWindow
	// class UWindowWidget* GetCurrentWindow();                                                                                 // [0x19fe8f0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WindowManager.CloseWindow
	// void CloseWindow(class UWindowWidget* Window);                                                                           // [0x19fe840] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WindowManager.CloseTopWindow
	// void CloseTopWindow();                                                                                                   // [0x19fe820] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WindowManager.CloseAllWindows
	// void CloseAllWindows();                                                                                                  // [0x19fe7e0] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WindowManager.CenterCursor
	// void CenterCursor();                                                                                                     // [0x19fe7c0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.WindowManager.AnyWindowsOpen
	// bool AnyWindowsOpen();                                                                                                   // [0x19fe790] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
};

/// Struct /Script/FSD.BumpPlayerHit
/// Size: 0x0018 (0x000000 - 0x000018)
class FBumpPlayerHit : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector_NetQuantize)                       force                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	CMember(class APlayerCharacter*)                   Player                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Class /Script/FSD.WoodLouse
/// Size: 0x01E8 (0x0003B0 - 0x000598)
class AWoodLouse : public AEnemyDeepPathfinderCharacter
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1432;

public:
	CMember(class USceneComponent*)                    RollingCenter                                               OFFSET(get<T>, {0x3B0, 8, 0, 0})
	CMember(class UPawnSensingComponent*)              PawnSensing                                                 OFFSET(get<T>, {0x3B8, 8, 0, 0})
	CMember(EWoodLouseState)                           forceState                                                  OFFSET(get<T>, {0x3C1, 1, 0, 0})
	DMember(float)                                     RollingCenterOffsetOnStanding                               OFFSET(get<float>, {0x3C4, 4, 0, 0})
	DMember(float)                                     RollingCenterOffsetOnFold                                   OFFSET(get<float>, {0x3C8, 4, 0, 0})
	DMember(float)                                     ChanceToWalk                                                OFFSET(get<float>, {0x3D0, 4, 0, 0})
	DMember(bool)                                      DebugAngle                                                  OFFSET(get<bool>, {0x3D4, 1, 0, 0})
	CMember(class UFakeMoverSettings*)                 FakeMoverSettings                                           OFFSET(get<T>, {0x3F8, 8, 0, 0})
	CMember(class UClass*)                             BurstProjectileClass                                        OFFSET(get<T>, {0x400, 8, 0, 0})
	DMember(float)                                     BurstTime                                                   OFFSET(get<float>, {0x408, 4, 0, 0})
	CMember(TArray<class UClass*>)                     StatusEffectsOnRoll                                         OFFSET(get<T>, {0x410, 16, 0, 0})
	SMember(FBumpPlayerHit)                            LastHit                                                     OFFSET(getStruct<T>, {0x420, 24, 0, 0})
	DMember(float)                                     TiltModifier                                                OFFSET(get<float>, {0x438, 4, 0, 0})
	DMember(float)                                     BurstXOffset                                                OFFSET(get<float>, {0x43C, 4, 0, 0})
	DMember(float)                                     BurstYOffset                                                OFFSET(get<float>, {0x440, 4, 0, 0})
	DMember(float)                                     BurstZOffset                                                OFFSET(get<float>, {0x444, 4, 0, 0})
	DMember(float)                                     HighDifficultyCustomProjectileGravity                       OFFSET(get<float>, {0x448, 4, 0, 0})
	DMember(int32_t)                                   BurstCount                                                  OFFSET(get<int32_t>, {0x44C, 4, 0, 0})
	DMember(bool)                                      InvounerableOnRoll                                          OFFSET(get<bool>, {0x454, 1, 0, 0})
	DMember(bool)                                      LockToRollMode                                              OFFSET(get<bool>, {0x455, 1, 0, 0})
	DMember(bool)                                      LockToWalkMode                                              OFFSET(get<bool>, {0x456, 1, 0, 0})
	DMember(float)                                     ForgetRange                                                 OFFSET(get<float>, {0x458, 4, 0, 0})
	DMember(float)                                     ForgetTime                                                  OFFSET(get<float>, {0x45C, 4, 0, 0})
	DMember(float)                                     RefreshTimeMax                                              OFFSET(get<float>, {0x464, 4, 0, 0})
	DMember(float)                                     RefreshTimeMin                                              OFFSET(get<float>, {0x468, 4, 0, 0})
	DMember(float)                                     BumpPower                                                   OFFSET(get<float>, {0x46C, 4, 0, 0})
	DMember(float)                                     DirectionalBumpPower                                        OFFSET(get<float>, {0x470, 4, 0, 0})
	CMember(EWoodLouseState)                           CurrentState                                                OFFSET(get<T>, {0x474, 1, 0, 0})
	CMember(class AActor*)                             CurrentTarget                                               OFFSET(get<T>, {0x498, 8, 0, 0})
	DMember(float)                                     FoldedStateMaxTime                                          OFFSET(get<float>, {0x4A0, 4, 0, 0})
	DMember(float)                                     FoldedStateMinTime                                          OFFSET(get<float>, {0x4A4, 4, 0, 0})
	DMember(float)                                     UnfoldedStateMaxTime                                        OFFSET(get<float>, {0x4A8, 4, 0, 0})
	DMember(float)                                     UnflodedStateMinTime                                        OFFSET(get<float>, {0x4AC, 4, 0, 0})
	CMember(class USoundBase*)                         BumpSound                                                   OFFSET(get<T>, {0x4B8, 8, 0, 0})
	DMember(float)                                     TimeBetweenBumpingSamePlayer                                OFFSET(get<float>, {0x4C0, 4, 0, 0})
	DMember(float)                                     MinBumpDamage                                               OFFSET(get<float>, {0x4C4, 4, 0, 0})
	DMember(float)                                     MaxBumpDamage                                               OFFSET(get<float>, {0x4C8, 4, 0, 0})
	DMember(float)                                     BumpDamage                                                  OFFSET(get<float>, {0x4CC, 4, 0, 0})
	CMember(class UDamageClass*)                       BumpDamageType                                              OFFSET(get<T>, {0x4D0, 8, 0, 0})
	DMember(float)                                     MaxBumpPower                                                OFFSET(get<float>, {0x4D8, 4, 0, 0})
	DMember(float)                                     BumpRange                                                   OFFSET(get<float>, {0x4DC, 4, 0, 0})
	DMember(float)                                     AcceptableAngles                                            OFFSET(get<float>, {0x4E4, 4, 0, 0})
	DMember(float)                                     RollSpeedModifier                                           OFFSET(get<float>, {0x4E8, 4, 0, 0})
	DMember(float)                                     RollAlpha                                                   OFFSET(get<float>, {0x4EC, 4, 0, 0})
	DMember(float)                                     TiltAlpha                                                   OFFSET(get<float>, {0x4F0, 4, 0, 0})
	CMember(class USoundBase*)                         RollingSound                                                OFFSET(get<T>, {0x4F8, 8, 0, 0})
	SMember(FName)                                     RollingSpeedParamName                                       OFFSET(getStruct<T>, {0x500, 8, 0, 0})
	CMember(TWeakObjectPtr<class UAudioComponent*>)    RollingSoundComponent                                       OFFSET(get<T>, {0x508, 8, 0, 0})
	CMember(class UFakeMoverSettings*)                 RollMoveSettings                                            OFFSET(get<T>, {0x510, 8, 0, 0})
	CMember(class UFakeMoverSettings*)                 StopRollMoveSettings                                        OFFSET(get<T>, {0x518, 8, 0, 0})
	SMember(FGameplayTagQuery)                         TargetQuery                                                 OFFSET(getStruct<T>, {0x520, 72, 0, 0})
	DMember(bool)                                      RotateTowardsTarget                                         OFFSET(get<bool>, {0x580, 1, 0, 0})
	DMember(float)                                     SeeTargetSafetyTime                                         OFFSET(get<float>, {0x584, 4, 0, 0})
	DMember(bool)                                      WantsToStandUp                                              OFFSET(get<bool>, {0x58C, 1, 0, 0})
	DMember(bool)                                      IsShooting                                                  OFFSET(get<bool>, {0x58D, 1, 0, 0})
	DMember(bool)                                      CanStandOnAnySurface                                        OFFSET(get<bool>, {0x58E, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.WoodLouse.SwitchedState
	// void SwitchedState(EWoodLouseState CurrentState);                                                                        // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.WoodLouse.StopSpecial
	// void StopSpecial();                                                                                                      // [0x19ffbc0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.WoodLouse.StartSpecial
	// void StartSpecial();                                                                                                     // [0x19ffba0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.WoodLouse.SetWantsToStandUp
	// void SetWantsToStandUp(bool aWantsToStandUp);                                                                            // [0x19ff950] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WoodLouse.SetState
	// void SetState(EWoodLouseState aState);                                                                                   // [0x19ff8d0] Final|Native|Protected|BlueprintCallable 
	// Function /Script/FSD.WoodLouse.SetRotateToTarget
	// void SetRotateToTarget(bool aRotateToTarget);                                                                            // [0x19ff770] Final|Native|Public|BlueprintCallable 
	// Function /Script/FSD.WoodLouse.SeePawn
	// void SeePawn(class APawn* aSenPawn);                                                                                     // [0x19ff4c0] Final|Native|Protected 
	// Function /Script/FSD.WoodLouse.OnRep_State
	// void OnRep_State();                                                                                                      // [0x17f8340] Native|Protected     
	// Function /Script/FSD.WoodLouse.OnRep_LastHit
	// void OnRep_LastHit();                                                                                                    // [0x19fefa0] Final|Native|Protected 
	// Function /Script/FSD.WoodLouse.GetRollerState
	// EWoodLouseState GetRollerState();                                                                                        // [0x19febe0] Final|Native|Public|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.WoodLouse.BumpedTarget
	// void BumpedTarget();                                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
};

/// Class /Script/FSD.WoodLouseAnimInstance
/// Size: 0x0030 (0x0004A0 - 0x0004D0)
class UWoodLouseAnimInstance : public USpiderAnimInstance
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 1232;

public:
	SMember(FVector2D)                                 AngleToTarget                                               OFFSET(getStruct<T>, {0x4A4, 8, 0, 0})
	DMember(float)                                     InterpSpeed                                                 OFFSET(get<float>, {0x4AC, 4, 0, 0})
	DMember(float)                                     BreakRollingWhenTimeLeft                                    OFFSET(get<float>, {0x4B0, 4, 0, 0})
	CMember(EWoodLouseState)                           RollerState                                                 OFFSET(get<T>, {0x4B4, 1, 0, 0})
	DMember(bool)                                      IsWalking                                                   OFFSET(get<bool>, {0x4B5, 1, 0, 0})
	DMember(bool)                                      IsUpRight                                                   OFFSET(get<bool>, {0x4B6, 1, 0, 0})
	DMember(bool)                                      IsDoingSpecialAttack                                        OFFSET(get<bool>, {0x4B7, 1, 0, 0})
	DMember(bool)                                      IsUnFolded                                                  OFFSET(get<bool>, {0x4B8, 1, 0, 0})
	DMember(bool)                                      IsGroundValid                                               OFFSET(get<bool>, {0x4B9, 1, 0, 0})
	DMember(bool)                                      IsInRollState                                               OFFSET(get<bool>, {0x4BA, 1, 0, 0})
	DMember(bool)                                      IdleToDownTurnLeftLock                                      OFFSET(get<bool>, {0x4BB, 1, 0, 0})
	DMember(bool)                                      DownTurnLeftToIdleLock                                      OFFSET(get<bool>, {0x4BC, 1, 0, 0})
	DMember(bool)                                      DownWalkToDownTurnLeftLock                                  OFFSET(get<bool>, {0x4BD, 1, 0, 0})
	DMember(bool)                                      WoodlouseWalk                                               OFFSET(get<bool>, {0x4BE, 1, 0, 0})
	DMember(bool)                                      IdleToDownWalkLock                                          OFFSET(get<bool>, {0x4BF, 1, 0, 0})
	DMember(bool)                                      DownWalkToDownTurnRightLock                                 OFFSET(get<bool>, {0x4C0, 1, 0, 0})
	DMember(bool)                                      IdleToDownTurnRightLock                                     OFFSET(get<bool>, {0x4C1, 1, 0, 0})
};

/// Class /Script/FSD.WormPod
/// Size: 0x0130 (0x000248 - 0x000378)
class AWormPod : public ATaggedActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 888;

public:
	CMember(class USceneComponent*)                    Root                                                        OFFSET(get<T>, {0x250, 8, 0, 0})
	CMember(class USceneComponent*)                    ScalePoint                                                  OFFSET(get<T>, {0x258, 8, 0, 0})
	CMember(class USkeletalMeshComponent*)             PodMesh                                                     OFFSET(get<T>, {0x260, 8, 0, 0})
	CMember(class USimpleHealthComponent*)             Health                                                      OFFSET(get<T>, {0x268, 8, 0, 0})
	SMember(FMulticastInlineDelegate)                  OnWormSpawned                                               OFFSET(getStruct<T>, {0x270, 16, 0, 0})
	DMember(bool)                                      Grown                                                       OFFSET(get<bool>, {0x280, 1, 0, 0})
	CMember(class UAnimMontage*)                       GrowthAnimation                                             OFFSET(get<T>, {0x298, 8, 0, 0})
	CMember(class UAnimMontage*)                       PopAnimation                                                OFFSET(get<T>, {0x2A0, 8, 0, 0})
	CMember(class UClass*)                             CarcasActor                                                 OFFSET(get<T>, {0x2B0, 8, 0, 0})
	SMember(FRuntimeFloatCurve)                        GrowthCurve                                                 OFFSET(getStruct<T>, {0x2B8, 136, 0, 0})
	CMember(class UEnemyDescriptor*)                   WormDescriptor                                              OFFSET(get<T>, {0x340, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     PopParticles                                                OFFSET(get<T>, {0x348, 8, 0, 0})
	CMember(class UFXSystemAsset*)                     deathParticles                                              OFFSET(get<T>, {0x350, 8, 0, 0})
	CMember(class USoundCue*)                          PopSound                                                    OFFSET(get<T>, {0x358, 8, 0, 0})
	CMember(class USoundCue*)                          deathSound                                                  OFFSET(get<T>, {0x360, 8, 0, 0})
	DMember(float)                                     ParentDeathDelay                                            OFFSET(get<float>, {0x368, 4, 0, 0})
	DMember(float)                                     DeathDelayVariance                                          OFFSET(get<float>, {0x36C, 4, 0, 0})
	DMember(int32_t)                                   WormCount                                                   OFFSET(get<int32_t>, {0x370, 4, 0, 0})


	/// Functions
	// Function /Script/FSD.WormPod.SpawnWorms
	// void SpawnWorms();                                                                                                       // [0x19ffb80] Final|Native|Public  
	// Function /Script/FSD.WormPod.OnRep_Grown
	// void OnRep_Grown();                                                                                                      // [0x19fef80] Final|Native|Protected 
	// Function /Script/FSD.WormPod.OnParentDeath
	// void OnParentDeath(class UHealthComponentBase* ParentHealth);                                                            // [0x19feef0] Final|Native|Protected 
	// Function /Script/FSD.WormPod.OnDeath
	// void OnDeath(class UHealthComponentBase* aHealth);                                                                       // [0x19fee60] Final|Native|Protected 
	// Function /Script/FSD.WormPod.OnAnimEnded
	// void OnAnimEnded(class UAnimMontage* Montage, bool bInterrupted);                                                        // [0x19fed90] Final|Native|Public  
	// Function /Script/FSD.WormPod.Kill
	// void Kill();                                                                                                             // [0x19fed70] Final|Native|Protected 
	// Function /Script/FSD.WormPod.All_ShowDeath
	// void All_ShowDeath(bool success);                                                                                        // [0x1082a10] Net|Native|Event|NetMulticast|Public 
};

/// Class /Script/FSD.YesNoPromptWidget
/// Size: 0x0018 (0x0002A0 - 0x0002B8)
class UYesNoPromptWidget : public UWindowWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 696;

public:
	DMember(bool)                                      bDestroyOnClick                                             OFFSET(get<bool>, {0x2A0, 1, 0, 0})
	DMember(bool)                                      bCloseAllWindows                                            OFFSET(get<bool>, {0x2A1, 1, 0, 0})
	SMember(FDelegateProperty)                         OnClickedCallback                                           OFFSET(getStruct<T>, {0x2A4, 16, 0, 0})


	/// Functions
	// Function /Script/FSD.YesNoPromptWidget.Show
	// void Show(FText Title, FText Message, FDelegateProperty& OnYesNoClicked);                                                // [0x1a02c30] Final|Native|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.YesNoPromptWidget.SetMappedResources
	// void SetMappedResources(TMap<UResourceData*, int32_t>& Resources);                                                       // [0x1d6f900] Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent 
	// Function /Script/FSD.YesNoPromptWidget.OnYesNoClickedDelegate__DelegateSignature
	// void OnYesNoClickedDelegate__DelegateSignature(bool Yes);                                                                // [0x1d6f900] Public|Delegate      
	// Function /Script/FSD.YesNoPromptWidget.OnShow
	// void OnShow(FText& Title, FText& Message);                                                                               // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
	// Function /Script/FSD.YesNoPromptWidget.OnClicked
	// void OnClicked(bool Yes);                                                                                                // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.YesNoPromptWidget.Clicked
	// void Clicked(bool YesClicked);                                                                                           // [0x1a01ff0] Final|Native|Protected|BlueprintCallable 
};

/// Class /Script/FSD.YesNoPromptAction
/// Size: 0x0038 (0x000030 - 0x000068)
class UYesNoPromptAction : public UBlueprintAsyncActionBase
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FMulticastInlineDelegate)                  Yes                                                         OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FMulticastInlineDelegate)                  No                                                          OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FDelegateProperty)                         YesNoDelegate                                               OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	CMember(TWeakObjectPtr<class UYesNoPromptWidget*>) ActivePrompt                                                OFFSET(get<T>, {0x60, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.YesNoPromptAction.YesNoOutputPin__DelegateSignature
	// void YesNoOutputPin__DelegateSignature();                                                                                // [0x1d6f900] MulticastDelegate|Public|Delegate 
	// Function /Script/FSD.YesNoPromptAction.PromptYesNoWidget
	// class UYesNoPromptAction* PromptYesNoWidget(class UObject* WorldContext, class UYesNoPromptWidget* InPromptWidget, FText InTitle, FText InMessage); // [0x1a028b0] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.YesNoPromptAction.PromptYesNo
	// class UYesNoPromptAction* PromptYesNo(class UObject* WorldContext, FYesNoPromptSettings Prompt);                         // [0x1a02700] Final|Native|Static|Public|BlueprintCallable 
	// Function /Script/FSD.YesNoPromptAction.PromptPurchase
	// class UYesNoPromptAction* PromptPurchase(class UObject* WorldContext, FYesNoPromptSettings Prompt, TMap<UResourceData*, int32_t>& Resources); // [0x1a02450] Final|Native|Static|Public|HasOutParms|BlueprintCallable 
	// Function /Script/FSD.YesNoPromptAction.PromptCallback
	// void PromptCallback(bool YesClicked);                                                                                    // [0x1a023c0] Final|Native|Protected 
};

/// Class /Script/FSD.ZipLineProjectile
/// Size: 0x0058 (0x000220 - 0x000278)
class AZipLineProjectile : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 632;

public:
	CMember(class UTimelineComponent*)                 Timeline                                                    OFFSET(get<T>, {0x220, 8, 0, 0})
	DMember(float)                                     LightIntensity                                              OFFSET(get<float>, {0x228, 4, 0, 0})
	DMember(float)                                     MaterialGlow                                                OFFSET(get<float>, {0x22C, 4, 0, 0})
	SMember(FDelegateProperty)                         Callback                                                    OFFSET(getStruct<T>, {0x230, 16, 0, 0})
	CMember(class UCurveFloat*)                        LightCurve                                                  OFFSET(get<T>, {0x240, 8, 0, 0})
	CMember(TArray<class UPointLightComponent*>)       PointLights                                                 OFFSET(get<T>, {0x248, 16, 0, 0})
	CMember(TArray<class UMaterialInstanceDynamic*>)   MaterialInstances                                           OFFSET(get<T>, {0x258, 16, 0, 0})
	CMember(class UClass*)                             OnUseStatusEffect                                           OFFSET(get<T>, {0x268, 8, 0, 0})
	CMember(class UClass*)                             OnReleaseStatusEffect                                       OFFSET(get<T>, {0x270, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ZipLineProjectile.OnTimelineTick
	// void OnTimelineTick(float NewValue);                                                                                     // [0x1a02340] Final|Native|Protected 
	// Function /Script/FSD.ZipLineProjectile.OnShoot
	// void OnShoot(FVector Origin, FVector EndLocation);                                                                       // [0x1d6f900] Event|Protected|HasDefaults|BlueprintEvent 
};

/// Class /Script/FSD.ZiplineLauncherComponent
/// Size: 0x0010 (0x000110 - 0x000120)
class UZiplineLauncherComponent : public UWeaponFireComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 288;

public:
	CMember(TEnumAsByte<ECollisionChannel>)            HitCollisionChannel                                         OFFSET(get<T>, {0x110, 1, 0, 0})
	DMember(float)                                     ProjectileLocationOffset                                    OFFSET(get<float>, {0x114, 4, 0, 0})
	CMember(class UClass*)                             ProjectileClass                                             OFFSET(get<T>, {0x118, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ZiplineLauncherComponent.Server_Fire
	// void Server_Fire(FVector_NetQuantize Origin, FVector_NetQuantize Destination);                                           // [0x1a02b40] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ZiplineLauncherComponent.All_ShowHit
	// void All_ShowHit();                                                                                                      // [0x17f3860] Net|Native|Event|NetMulticast|Protected 
};

/// Class /Script/FSD.ZipLineItem
/// Size: 0x0058 (0x000780 - 0x0007D8)
class AZipLineItem : public AAmmoDrivenWeapon
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 2008;

public:
	DMember(float)                                     MaxDistance                                                 OFFSET(get<float>, {0x780, 4, 0, 0})
	DMember(float)                                     MinDistance                                                 OFFSET(get<float>, {0x784, 4, 0, 0})
	DMember(float)                                     MinAngle                                                    OFFSET(get<float>, {0x788, 4, 0, 0})
	DMember(float)                                     MaxAngle                                                    OFFSET(get<float>, {0x78C, 4, 0, 0})
	SMember(FGameplayTagQuery)                         ExcludeSurfaceTags                                          OFFSET(getStruct<T>, {0x790, 72, 0, 0})


	/// Functions
	// Function /Script/FSD.ZipLineItem.CanFireWeapon
	// bool CanFireWeapon(FText& FailMsg, class UDialogDataAsset*& FailShout);                                                  // [0x1d6f900] Event|Protected|HasOutParms|BlueprintEvent 
};

/// Class /Script/FSD.AngleIndicatorWidget
/// Size: 0x0010 (0x000280 - 0x000290)
class UAngleIndicatorWidget : public UFSDUserWidget
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 656;

public:
	DMember(float)                                     pixelsPerAngle                                              OFFSET(get<float>, {0x280, 4, 0, 0})
	DMember(float)                                     AlphaFade                                                   OFFSET(get<float>, {0x284, 4, 0, 0})
	DMember(float)                                     MinAngle                                                    OFFSET(get<float>, {0x288, 4, 0, 0})
	DMember(float)                                     MaxAngle                                                    OFFSET(get<float>, {0x28C, 4, 0, 0})
};

/// Class /Script/FSD.ZipLineUsable
/// Size: 0x0000 (0x000170 - 0x000170)
class UZipLineUsable : public UInstantUsable
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 368;

public:
};

/// Class /Script/FSD.ZipLineConnector
/// Size: 0x0030 (0x000220 - 0x000250)
class AZipLineConnector : public AActor
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 592;

public:
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   Character                                                   OFFSET(get<T>, {0x220, 8, 0, 0})
	SMember(FVector)                                   ZipLineLocation                                             OFFSET(getStruct<T>, {0x228, 12, 0, 0})
	SMember(FVector)                                   ZipLineDirection                                            OFFSET(getStruct<T>, {0x234, 12, 0, 0})
	SMember(FRotator)                                  RotationOffset                                              OFFSET(getStruct<T>, {0x240, 12, 0, 0})
	DMember(bool)                                      bSpeeding                                                   OFFSET(get<bool>, {0x24C, 1, 0, 0})


	/// Functions
	// Function /Script/FSD.ZipLineConnector.ReceiveUpdateZipLinePoint
	// void ReceiveUpdateZipLinePoint(FVector& WorldLocation, FVector& Directioy, bool Speeding);                               // [0x1d6f900] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.ZipLineConnector.ReceiveDisconnected
	// void ReceiveDisconnected();                                                                                              // [0x1d6f900] Event|Public|BlueprintEvent 
	// Function /Script/FSD.ZipLineConnector.ReceiveConnected
	// void ReceiveConnected(FVector& WorldLocation, FVector& Direction);                                                       // [0x1d6f900] Event|Public|HasOutParms|HasDefaults|BlueprintEvent 
};

/// Struct /Script/FSD.ZipLineConnectorHandler
/// Size: 0x0030 (0x000000 - 0x000030)
class FZipLineConnectorHandler : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TSoftObjectPtr<class UClass*>)             ConnectorClass                                              OFFSET(get<T>, {0x0, 40, 0, 0})
	CMember(class AZipLineConnector*)                  Connector                                                   OFFSET(get<T>, {0x28, 8, 0, 0})
};

/// Struct /Script/FSD.ZipLine
/// Size: 0x0038 (0x000000 - 0x000038)
class FZipLine : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FVector)                                   Start                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
};

/// Class /Script/FSD.ZipLineStateComponent
/// Size: 0x0130 (0x000100 - 0x000230)
class UZipLineStateComponent : public UCharacterStateComponent
{ 
	friend MDKHandler;
	static inline constexpr uint64_t __MDKClassSize = 560;

public:
	SMember(FZipLineConnectorHandler)                  ZipLineConnector                                            OFFSET(getStruct<T>, {0x100, 48, 0, 0})
	DMember(float)                                     VerticalOffset                                              OFFSET(get<float>, {0x130, 4, 0, 0})
	DMember(float)                                     HorizontalOffset                                            OFFSET(get<float>, {0x134, 4, 0, 0})
	DMember(float)                                     TravelSpeed                                                 OFFSET(get<float>, {0x138, 4, 0, 0})
	DMember(float)                                     AccelAndDecelAlpha                                          OFFSET(get<float>, {0x13C, 4, 0, 0})
	DMember(float)                                     JumpForce                                                   OFFSET(get<float>, {0x140, 4, 0, 0})
	DMember(float)                                     SpeedBoostActivationDuration                                OFFSET(get<float>, {0x144, 4, 0, 0})
	DMember(float)                                     SpeedBoostActivionMinAngle                                  OFFSET(get<float>, {0x148, 4, 0, 0})
	DMember(float)                                     BaseSpeedBoost                                              OFFSET(get<float>, {0x14C, 4, 0, 0})
	DMember(float)                                     AdditionalSpeedBoostPerAngle                                OFFSET(get<float>, {0x150, 4, 0, 0})
	DMember(float)                                     SpeedBoostCoolDownDuration                                  OFFSET(get<float>, {0x154, 4, 0, 0})
	DMember(float)                                     AccelerationAlpha                                           OFFSET(get<float>, {0x158, 4, 0, 0})
	DMember(float)                                     DecelerationAlpha                                           OFFSET(get<float>, {0x15C, 4, 0, 0})
	DMember(float)                                     MinStartDistanceToEnd                                       OFFSET(get<float>, {0x160, 4, 0, 0})
	DMember(float)                                     ReleaseDistance                                             OFFSET(get<float>, {0x164, 4, 0, 0})
	DMember(bool)                                      bCanActivateSpeedBoost                                      OFFSET(get<bool>, {0x168, 1, 0, 0})
	DMember(bool)                                      bShowSpeedBoostActivator                                    OFFSET(get<bool>, {0x169, 1, 0, 0})
	DMember(float)                                     SpeedBoostActivationProgress                                OFFSET(get<float>, {0x16C, 4, 0, 0})
	CMember(class USoundBase*)                         AudioOnStart                                                OFFSET(get<T>, {0x178, 8, 0, 0})
	CMember(class USoundBase*)                         AudioOnDuring                                               OFFSET(get<T>, {0x180, 8, 0, 0})
	CMember(class USoundBase*)                         AudioOnChangingDirection                                    OFFSET(get<T>, {0x188, 8, 0, 0})
	CMember(class USoundBase*)                         AudioOnStop                                                 OFFSET(get<T>, {0x190, 8, 0, 0})
	CMember(class USoundBase*)                         AudioOnSpeedBoostActivated                                  OFFSET(get<T>, {0x198, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutStartUsing                                             OFFSET(get<T>, {0x1A0, 8, 0, 0})
	CMember(class UDialogDataAsset*)                   ShoutSpeedBoostActivated                                    OFFSET(get<T>, {0x1A8, 8, 0, 0})
	CMember(class AZipLineProjectile*)                 ZipLineProjectile                                           OFFSET(get<T>, {0x1B0, 8, 0, 0})
	SMember(FZipLine)                                  ZipLine                                                     OFFSET(getStruct<T>, {0x1B8, 56, 0, 0})
	DMember(float)                                     DamageBeforeFalling                                         OFFSET(get<float>, {0x204, 4, 0, 0})
	DMember(float)                                     FriendlyFireModifier                                        OFFSET(get<float>, {0x208, 4, 0, 0})
	DMember(float)                                     DamageResetTime                                             OFFSET(get<float>, {0x20C, 4, 0, 0})
	CMember(class UAudioComponent*)                    AudioComponent                                              OFFSET(get<T>, {0x210, 8, 0, 0})


	/// Functions
	// Function /Script/FSD.ZipLineStateComponent.ServerSetSpeedBoostActivated
	// void ServerSetSpeedBoostActivated(bool InBoostActivated);                                                                // [0x19f65a0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ZipLineStateComponent.ServerJumpPressed
	// void ServerJumpPressed(bool JumpForward);                                                                                // [0x1a02ab0] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ZipLineStateComponent.ServerForwardInputChanged
	// void ServerForwardInputChanged(float Input);                                                                             // [0x187ee20] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ZipLineStateComponent.ServerChangeDirection
	// void ServerChangeDirection();                                                                                            // [0x18fb400] Net|NetReliableNative|Event|Protected|NetServer 
	// Function /Script/FSD.ZipLineStateComponent.ReceiveSpeedBoostDeactivated
	// void ReceiveSpeedBoostDeactivated();                                                                                     // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ZipLineStateComponent.ReceiveSpeedBoostActivated
	// void ReceiveSpeedBoostActivated();                                                                                       // [0x1d6f900] Event|Protected|BlueprintEvent 
	// Function /Script/FSD.ZipLineStateComponent.OnRep_ZipLine
	// void OnRep_ZipLine();                                                                                                    // [0x1a02320] Final|Native|Protected 
	// Function /Script/FSD.ZipLineStateComponent.OnPlayerHit
	// void OnPlayerHit(float Damage, FDamageData& DamageData, bool anyHealthLost);                                             // [0x1a021d0] Final|Native|Protected|HasOutParms 
	// Function /Script/FSD.ZipLineStateComponent.GetSpeedBoostActivated
	// bool GetSpeedBoostActivated();                                                                                           // [0x1a02190] Final|Native|Protected|BlueprintCallable|BlueprintPure|Const 
	// Function /Script/FSD.ZipLineStateComponent.GetJumpVector
	// FVector GetJumpVector(FVector LookVector, FVector CurrentVelocity);                                                      // [0x1a02080] Native|Event|Protected|HasDefaults|BlueprintEvent 
	// Function /Script/FSD.ZipLineStateComponent.All_SpeedBoostChanged
	// void All_SpeedBoostChanged(bool bActive);                                                                                // [0x19e9630] Net|Native|Event|NetMulticast|Protected 
};

/// Struct /Script/FSD.LaserPointerTarget
/// Size: 0x0030 (0x000000 - 0x000030)
class FLaserPointerTarget : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class AActor*)                             Target                                                      OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class AActor*)                             ExtraTarget                                                 OFFSET(get<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FSD.EnhancedTrace
/// Size: 0x0034 (0x000000 - 0x000034)
class FEnhancedTrace : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	CMember(TWeakObjectPtr<class UHitscanBaseComponent*>) Component                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class APlayerCharacter*>)   Instigator                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector)                                   Origin                                                      OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0x1C, 12, 0, 0})
	SMember(FVector)                                   HitPoint                                                    OFFSET(getStruct<T>, {0x28, 12, 0, 0})
};

/// Struct /Script/FSD.DamageDataBase
/// Size: 0x0030 (0x000000 - 0x000030)
class FDamageDataBase : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(class UFSDPhysicalMaterial*)               PhysMaterial                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TWeakObjectPtr<class UPrimitiveComponent*>) Component                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
	SMember(FVector)                                   HitLocation                                                 OFFSET(getStruct<T>, {0x10, 12, 0, 0})
	DMember(int32_t)                                   BoneIndex                                                   OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	CMember(class UDamageImpulse*)                     DamageImpulseOverride                                       OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(bool)                                      IsRadial                                                    OFFSET(get<bool>, {0x28, 1, 0, 0})
};

/// Struct /Script/FSD.DamageData
/// Size: 0x0028 (0x000030 - 0x000058)
class FDamageData : public FDamageDataBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 88;

public:
	CMember(class UDamageClass*)                       DamageClass                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(TWeakObjectPtr<class AController*>)        Instigator                                                  OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             DamageCauser                                                OFFSET(get<T>, {0x40, 8, 0, 0})
	DMember(float)                                     DamageModifier                                              OFFSET(get<float>, {0x48, 4, 0, 0})
	DMember(float)                                     ArmorPenetration                                            OFFSET(get<float>, {0x4C, 4, 0, 0})
	DMember(bool)                                      IsFriendlyFire                                              OFFSET(get<bool>, {0x50, 1, 0, 0})
};

/// Struct /Script/FSD.CharacterViewInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FCharacterViewInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UClass*)                             CharacterClass                                              OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FEquippedVanity)                           EquippedVanity                                              OFFSET(getStruct<T>, {0x8, 32, 0, 0})
	DMember(bool)                                      SurvivedInPod                                               OFFSET(get<bool>, {0x28, 1, 0, 0})
	CMember(class UVictoryPose*)                       VictoryPose                                                 OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FSD.CharacterViewScene
/// Size: 0x0018 (0x000000 - 0x000018)
class FCharacterViewScene : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FCharacterViewInfo>)                Characters                                                  OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      MissionSuccess                                              OFFSET(get<bool>, {0x10, 1, 0, 0})
};

/// Struct /Script/FSD.NetworkConnectionInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FNetworkConnectionInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class AFSDPlayerController*)               PlayerController                                            OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     PacketLossIn                                                OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     PacketLossOut                                               OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Ping                                                        OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     Jitter                                                      OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(bool)                                      IsValid                                                     OFFSET(get<bool>, {0x18, 1, 0, 0})
};

/// Struct /Script/FSD.FSDChatMessage
/// Size: 0x0060 (0x000000 - 0x000060)
class FFSDChatMessage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	CMember(EChatMessageType)                          MsgType                                                     OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FString)                                   Sender                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	CMember(EChatSenderType)                           SenderType                                                  OFFSET(get<T>, {0x20, 1, 0, 0})
	SMember(FString)                                   Msg                                                         OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FUniqueNetIdRepl)                          SenderNetID                                                 OFFSET(getStruct<T>, {0x38, 40, 0, 0})
};

/// Struct /Script/FSD.VanityMasteryResult
/// Size: 0x0024 (0x000000 - 0x000024)
class FVanityMasteryResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 36;

public:
	SMember(FVanityMasterySave)                        Previous                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FVanityMasterySave)                        Current                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   FashionitesRewarded                                         OFFSET(get<int32_t>, {0x20, 4, 0, 0})
};

/// Struct /Script/FSD.BackendNotificationEvent
/// Size: 0x0040 (0x000000 - 0x000040)
class FBackendNotificationEvent : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   MessageType                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Header                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   Message                                                     OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   Link                                                        OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FSD.UpgradeValues
/// Size: 0x001C (0x000000 - 0x00001C)
class FUpgradeValues : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(float)                                     BaseValue                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     UpgradedValue                                               OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     UpgradedPercentageValue                                     OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     OldUpgradedValue                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     OldUpgradedPercentageValue                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     CurrentValue                                                OFFSET(get<float>, {0x14, 4, 0, 0})
	CMember(EUpgradeCalucationType)                    CalculationType                                             OFFSET(get<T>, {0x18, 1, 0, 0})
	CMember(EItemPreviewStatus)                        PreviewStatus                                               OFFSET(get<T>, {0x19, 1, 0, 0})
};

/// Struct /Script/FSD.CraftingCost
/// Size: 0x0010 (0x000000 - 0x000010)
class FCraftingCost : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     amount                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.GearStatEntry
/// Size: 0x0068 (0x000000 - 0x000068)
class FGearStatEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 104;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     Value                                                       OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	SMember(FText)                                     BaseValue                                                   OFFSET(getStruct<T>, {0x30, 24, 0, 0})
	SMember(FText)                                     UpgradeValue                                                OFFSET(getStruct<T>, {0x48, 24, 0, 0})
	CMember(EItemPreviewStatus)                        PreviewStatus                                               OFFSET(get<T>, {0x60, 1, 0, 0})
};

/// Struct /Script/FSD.ObjectiveMissionIcon
/// Size: 0x0018 (0x000000 - 0x000018)
class FObjectiveMissionIcon : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UTexture2D*)                         Texture                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FLinearColor)                              Tint                                                        OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.YesNoPromptSettings
/// Size: 0x0040 (0x000000 - 0x000040)
class FYesNoPromptSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(class UClass*)                             WidgetClass                                                 OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   ZOrder                                                      OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	SMember(FText)                                     Title                                                       OFFSET(getStruct<T>, {0x10, 24, 0, 0})
	SMember(FText)                                     Message                                                     OFFSET(getStruct<T>, {0x28, 24, 0, 0})
};

/// Struct /Script/FSD.BulletPathSegment
/// Size: 0x001C (0x000000 - 0x00001C)
class FBulletPathSegment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
};

/// Struct /Script/FSD.LockCounter
/// Size: 0x000C (0x000000 - 0x00000C)
class FLockCounter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   LockCount                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	CMember(TWeakObjectPtr<class AActor*>)             LockedActor                                                 OFFSET(get<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/FSD.DiscordServerData
/// Size: 0x0008 (0x000000 - 0x000008)
class FDiscordServerData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(int32_t)                                   presenceCount                                               OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   memberCount                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.SizeBoxSettings
/// Size: 0x0020 (0x000000 - 0x000020)
class FSizeBoxSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	DMember(float)                                     WidthOverride                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     HeightOverride                                              OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     MinDesiredWidth                                             OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     MinDesiredHeight                                            OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     MaxDesiredWidth                                             OFFSET(get<float>, {0x10, 4, 0, 0})
	DMember(float)                                     MaxDesiredHeight                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	DMember(float)                                     MinAspectRatio                                              OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     MaxAspectRatio                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
};

/// Struct /Script/FSD.WidgetAnimationSettings
/// Size: 0x0008 (0x000000 - 0x000008)
class FWidgetAnimationSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     PlaybackSpeed                                               OFFSET(get<float>, {0x0, 4, 0, 0})
	CMember(TEnumAsByte<EUMGSequencePlayMode>)         PlayMode                                                    OFFSET(get<T>, {0x4, 1, 0, 0})
	DMember(bool)                                      bRestoreState                                               OFFSET(get<bool>, {0x5, 1, 0, 0})
};

/// Struct /Script/FSD.PushPoint
/// Size: 0x0010 (0x000000 - 0x000010)
class FPushPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USphereComponent*)                   collider                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class APlayerCharacter*)                   Character                                                   OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FSD.CustomUsable
/// Size: 0x0010 (0x000000 - 0x000010)
class FCustomUsable : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UUsableComponentBase*)               Usable                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(ECustomUsableType)                         TerminationType                                             OFFSET(get<T>, {0x8, 1, 0, 0})
};

/// Struct /Script/FSD.CloudSaveRequest
/// Size: 0x0048 (0x000000 - 0x000048)
class FCloudSaveRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	SMember(FString)                                   SteamTicket                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   PSTicket                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	DMember(int32_t)                                   PlayerRank                                                  OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   SaveToDiskCounter                                           OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	SMember(FString)                                   RawData                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	SMember(FString)                                   Branch                                                      OFFSET(getStruct<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FSD.CloudLoadEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FCloudLoadEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   RawData                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   TimeUTC                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.CloudLoadAllResponse
/// Size: 0x0010 (0x000000 - 0x000010)
class FCloudLoadAllResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FCloudLoadEntry>)                   savegames                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.CloudLoadRequest
/// Size: 0x0038 (0x000000 - 0x000038)
class FCloudLoadRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   SteamTicket                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   PSTicket                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   Branch                                                      OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(int32_t)                                   Offset                                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/FSD.ExampleStruct
/// Size: 0x0004 (0x000000 - 0x000004)
class FExampleStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 4;

public:
	DMember(float)                                     Field                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
};

/// Struct /Script/FSD.CoilgunCoil
/// Size: 0x0008 (0x000000 - 0x000008)
class FCoilgunCoil : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	DMember(float)                                     Angle                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x4, 4, 0, 0})
};

/// Struct /Script/FSD.CoilgunAfflictionEntry
/// Size: 0x0020 (0x000000 - 0x000020)
class FCoilgunAfflictionEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<class UClass*>)                     PushedAfflictions                                           OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(class UStatusEffectsComponent*)            Target                                                      OFFSET(get<T>, {0x10, 8, 0, 0})
};

/// Struct /Script/FSD.ShotMultiplier
/// Size: 0x000C (0x000000 - 0x00000C)
class FShotMultiplier : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Undercharge                                                 OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Overcharge                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(bool)                                      TriBurst                                                    OFFSET(get<bool>, {0x8, 1, 0, 0})
};

/// Struct /Script/FSD.CommunityRewardNotification
/// Size: 0x0040 (0x000000 - 0x000040)
class FCommunityRewardNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FText)                                     Text                                                        OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x18, 8, 0, 0})
	SMember(FLinearColor)                              IconColor                                                   OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   ID                                                          OFFSET(getStruct<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FSD.CommunityFactionResponse
/// Size: 0x0030 (0x000000 - 0x000030)
class FCommunityFactionResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<FString>)                           Goals                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<float>)                             Values                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(TArray<float>)                             Members                                                     OFFSET(get<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FSD.CommunityGoalStateResponse
/// Size: 0x0010 (0x000000 - 0x000010)
class FCommunityGoalStateResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(bool)                                      isGoal                                                      OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      isRecruitment                                               OFFSET(get<bool>, {0x1, 1, 0, 0})
	DMember(bool)                                      FreeBeers                                                   OFFSET(get<bool>, {0x2, 1, 0, 0})
	DMember(float)                                     TimeLeftSeconds                                             OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   LastUpdateGoalsID                                           OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   CurrentGoalPeriodID                                         OFFSET(get<int32_t>, {0xC, 4, 0, 0})
};

/// Struct /Script/FSD.CommunityGoalTierResponse
/// Size: 0x0028 (0x000000 - 0x000028)
class FCommunityGoalTierResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(bool)                                      Found                                                       OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FString)                                   GoalID                                                      OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(float)                                     FirstTierGoal                                               OFFSET(get<float>, {0x18, 4, 0, 0})
	DMember(float)                                     SecondTierGoal                                              OFFSET(get<float>, {0x1C, 4, 0, 0})
	DMember(float)                                     ThirdTierGoal                                               OFFSET(get<float>, {0x20, 4, 0, 0})
};

/// Struct /Script/FSD.CommunityGoalIncrementResponse
/// Size: 0x0001 (0x000000 - 0x000001)
class FCommunityGoalIncrementResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      success                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/FSD.CommunityGoalTierDataRequest
/// Size: 0x0010 (0x000000 - 0x000010)
class FCommunityGoalTierDataRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   GoalID                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.CommunityGoalRequest
/// Size: 0x0038 (0x000000 - 0x000038)
class FCommunityGoalRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   GoalID                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   FactionID                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FString)                                   SteamTicket                                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   Branch                                                      OFFSET(getStruct<T>, {0x28, 16, 0, 0})
};

/// Struct /Script/FSD.PricingTierEntry
/// Size: 0x0020 (0x000008 - 0x000028)
class FPricingTierEntry : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FIRandRange)                               CreditCost                                                  OFFSET(getStruct<T>, {0x8, 8, 0, 0})
	SMember(FIRandRange)                               Material1                                                   OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	SMember(FIRandRange)                               Material2                                                   OFFSET(getStruct<T>, {0x18, 8, 0, 0})
	SMember(FIRandRange)                               Material3                                                   OFFSET(getStruct<T>, {0x20, 8, 0, 0})
};

/// Struct /Script/FSD.DailyDeal
/// Size: 0x0018 (0x000000 - 0x000018)
class FDailyDeal : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(EDealType)                                 DealType                                                    OFFSET(get<T>, {0x8, 1, 0, 0})
	DMember(int32_t)                                   ResourceAmount                                              OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   Credits                                                     OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(float)                                     ChangePercent                                               OFFSET(get<float>, {0x14, 4, 0, 0})
};

/// Struct /Script/FSD.CSGRaycastHitInfo
/// Size: 0x001C (0x000000 - 0x00001C)
class FCSGRaycastHitInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FVector)                                   Position                                                    OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   Normal                                                      OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	DMember(int32_t)                                   Material                                                    OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.TerrainLateJoinIteration
/// Size: 0x0034 (0x000000 - 0x000034)
class FTerrainLateJoinIteration : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 52;

public:
	DMember(int32_t)                                   DrillsIndex                                                 OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(int32_t)                                   MeltsIndex                                                  OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   PickAxeIndex                                                OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(int32_t)                                   FloatingIndex                                               OFFSET(get<int32_t>, {0xC, 4, 0, 0})
	DMember(int32_t)                                   ColliderCarvesIndex                                         OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   MeshCarvesIndex                                             OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   ExplosionsIndex                                             OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	DMember(int32_t)                                   SplineIndex                                                 OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   CSGIndex                                                    OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	DMember(int32_t)                                   SpawnDebrisIndex                                            OFFSET(get<int32_t>, {0x24, 4, 0, 0})
	DMember(int32_t)                                   LateJoinIndex                                               OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   DebrisIndex                                                 OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	DMember(int32_t)                                   ChunkVisibilityIndex                                        OFFSET(get<int32_t>, {0x30, 4, 0, 0})
};

/// Struct /Script/FSD.DetailedTagQuery
/// Size: 0x0050 (0x000000 - 0x000050)
class FDetailedTagQuery : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	CMember(TMap<class UDetailedTagCategory*, FDetailedTagSet>) Map                                                OFFSET(get<T>, {0x0, 80, 0, 0})
};

/// Struct /Script/FSD.DiscordFactionRoleRequest
/// Size: 0x0028 (0x000000 - 0x000028)
class FDiscordFactionRoleRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   UserId                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   FactionID                                                   OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FString)                                   SteamTicket                                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FSD.DiscordUserInfoRequest
/// Size: 0x0010 (0x000000 - 0x000010)
class FDiscordUserInfoRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   UserId                                                      OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.DiscordFSDRichPresence
/// Size: 0x0080 (0x000000 - 0x000080)
class FDiscordFSDRichPresence : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FString)                                   State                                                       OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   details                                                     OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   matchSecret                                                 OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   joinSecret                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   partyId                                                     OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	SMember(FString)                                   smallImageText                                              OFFSET(getStruct<T>, {0x50, 16, 0, 0})
	SMember(FString)                                   LargeImageText                                              OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   startTimestamp                                              OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(int32_t)                                   partySize                                                   OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	CMember(EDiscordBiomeType)                         BiomeType                                                   OFFSET(get<T>, {0x78, 1, 0, 0})
	CMember(EDiscordMissionType)                       MissionType                                                 OFFSET(get<T>, {0x79, 1, 0, 0})
	DMember(bool)                                      bIsPureSolo                                                 OFFSET(get<bool>, {0x7A, 1, 0, 0})
};

/// Struct /Script/FSD.DroneLightSetting
/// Size: 0x000C (0x000000 - 0x00000C)
class FDroneLightSetting : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	SMember(FColor)                                    Color                                                       OFFSET(getStruct<T>, {0x0, 4, 0, 0})
	DMember(float)                                     Intensity                                                   OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.PlayerStatsAnalyticInfo
/// Size: 0x0010 (0x000000 - 0x000010)
class FPlayerStatsAnalyticInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FSD.SchematicAnalyticInfo
/// Size: 0x0020 (0x000000 - 0x000020)
class FSchematicAnalyticInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/FSD.CharacterLoadoutAnalyticInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FCharacterLoadoutAnalyticInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FSD.WeaponAnalyticInfo
/// Size: 0x0060 (0x000000 - 0x000060)
class FWeaponAnalyticInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
};

/// Struct /Script/FSD.UserStatsAnalyticInfo
/// Size: 0x0030 (0x000000 - 0x000030)
class FUserStatsAnalyticInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
};

/// Struct /Script/FSD.MissionAnalyticInfo
/// Size: 0x0098 (0x000000 - 0x000098)
class FMissionAnalyticInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
};

/// Struct /Script/FSD.EnemyGroupDescriptorSpawnItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FEnemyGroupDescriptorSpawnItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UEnemyDescriptor*)                   enemy                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.EnemySpawnItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FEnemySpawnItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UEnemyDescriptor*)                   enemy                                                       OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(int32_t)                                   Count                                                       OFFSET(get<int32_t>, {0x8, 4, 0, 0})
	DMember(float)                                     VeteranComposition                                          OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FSD.MUSTBEHERETOCOMPILE
/// Size: 0x0001 (0x000000 - 0x000001)
class FMUSTBEHERETOCOMPILE : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FSD.EscortMulePath
/// Size: 0x0018 (0x000000 - 0x000018)
class FEscortMulePath : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TArray<FVector>)                           Path                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.FSDDeepDiveResponse
/// Size: 0x0018 (0x000000 - 0x000018)
class FFSDDeepDiveResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(uint32_t)                                  SeedV2                                                      OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	SMember(FString)                                   ExpirationTime                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.FSDWeeklySeedResponse
/// Size: 0x0018 (0x000000 - 0x000018)
class FFSDWeeklySeedResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	DMember(uint32_t)                                  Seed                                                        OFFSET(get<uint32_t>, {0x0, 4, 0, 0})
	SMember(FString)                                   ExpirationTime                                              OFFSET(getStruct<T>, {0x8, 16, 0, 0})
};

/// Struct /Script/FSD.BackendNotification
/// Size: 0x0050 (0x000000 - 0x000050)
class FBackendNotification : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 80;

public:
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Header                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   Message                                                     OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	SMember(FString)                                   MessageType                                                 OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	SMember(FString)                                   Link                                                        OFFSET(getStruct<T>, {0x40, 16, 0, 0})
};

/// Struct /Script/FSD.FSDEventsResponse
/// Size: 0x0020 (0x000000 - 0x000020)
class FFSDEventsResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<FBackendNotification>)              Notifications                                               OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FFSDEventWithEnd>)                  ActiveEventsWithEnd                                         OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.FSDSeasonExpiryResponse
/// Size: 0x0030 (0x000000 - 0x000030)
class FFSDSeasonExpiryResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FString)                                   SeasonExpirationTimeSteam                                   OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   SeasonExpirationTimeSony                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   SeasonExpirationTimeGDK                                     OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FSD.SmartSpawnEntry
/// Size: 0x0018 (0x000000 - 0x000018)
class FSmartSpawnEntry : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
};

/// Struct /Script/FSD.FacilityGeneratorEnounter
/// Size: 0x0028 (0x000000 - 0x000028)
class FFacilityGeneratorEnounter : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	CMember(TArray<class UEnemyDescriptor*>)           Enemies                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(float)                                     Difficulty                                                  OFFSET(get<float>, {0x10, 4, 0, 0})
	SMember(FRandInterval)                             Diversity                                                   OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FSD.ForgingResult
/// Size: 0x000C (0x000000 - 0x00000C)
class FForgingResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(bool)                                      LevelledUp                                                  OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(int32_t)                                   RewardLevel                                                 OFFSET(get<int32_t>, {0x4, 4, 0, 0})
	DMember(int32_t)                                   RewardSeed                                                  OFFSET(get<int32_t>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.Formation
/// Size: 0x0020 (0x000000 - 0x000020)
class FFormation : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(class UFormationData*)                     FormationData                                               OFFSET(get<T>, {0x18, 8, 0, 0})
};

/// Struct /Script/FSD.FormationID
/// Size: 0x0008 (0x000000 - 0x000008)
class FFormationID : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
};

/// Struct /Script/FSD.DelegateStruct
/// Size: 0x0001 (0x000000 - 0x000001)
class FDelegateStruct : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FSD.FSDPlatformHelper
/// Size: 0x0001 (0x000000 - 0x000001)
class FFSDPlatformHelper : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FSD.FSDServicesEndpoints
/// Size: 0x0100 (0x000000 - 0x000100)
class FFSDServicesEndpoints : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 256;

public:
};

/// Struct /Script/FSD.SplineHitResult
/// Size: 0x0098 (0x000000 - 0x000098)
class FSplineHitResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 152;

public:
	SMember(FHitResult)                                HitResult                                                   OFFSET(getStruct<T>, {0x0, 136, 0, 0})
	DMember(float)                                     SplineDistance                                              OFFSET(get<float>, {0x88, 4, 0, 0})
	SMember(FVector)                                   SplineTangent                                               OFFSET(getStruct<T>, {0x8C, 12, 0, 0})
};

/// Struct /Script/FSD.Curve2DAppearance
/// Size: 0x0028 (0x000000 - 0x000028)
class FCurve2DAppearance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     Thickness                                                   OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FLinearColor)                              Tint                                                        OFFSET(getStruct<T>, {0x4, 16, 0, 0})
	DMember(float)                                     OutlineThickness                                            OFFSET(get<float>, {0x14, 4, 0, 0})
	SMember(FLinearColor)                              OutlineTint                                                 OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FSD.SplineSegment
/// Size: 0x0030 (0x000000 - 0x000030)
class FSplineSegment : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	SMember(FVector)                                   StartLocation                                               OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   StartTangent                                                OFFSET(getStruct<T>, {0xC, 12, 0, 0})
	SMember(FVector)                                   EndLocation                                                 OFFSET(getStruct<T>, {0x18, 12, 0, 0})
	SMember(FVector)                                   EndTangent                                                  OFFSET(getStruct<T>, {0x24, 12, 0, 0})
};

/// Struct /Script/FSD.TesterName
/// Size: 0x0020 (0x000008 - 0x000028)
class FTesterName : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   SteamID                                                     OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   SteamProfileName                                            OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FSD.TipsTableRow
/// Size: 0x0068 (0x000008 - 0x000070)
class FTipsTableRow : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	SMember(FText)                                     Header                                                      OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	SMember(FText)                                     InputText                                                   OFFSET(getStruct<T>, {0x38, 24, 0, 0})
	SMember(FText)                                     InputTextControllerOverride                                 OFFSET(getStruct<T>, {0x50, 24, 0, 0})
	DMember(float)                                     TimeToDisplay                                               OFFSET(get<float>, {0x68, 4, 0, 0})
};

/// Struct /Script/FSD.InputDisplay
/// Size: 0x0040 (0x000000 - 0x000040)
class FInputDisplay : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	CMember(EInputInteraction)                         Interaction                                                 OFFSET(get<T>, {0x0, 1, 0, 0})
	SMember(FText)                                     InputText                                                   OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	SMember(FLinearColor)                              TextTint                                                    OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	CMember(class UTexture2D*)                         Icon                                                        OFFSET(get<T>, {0x30, 8, 0, 0})
	DMember(bool)                                      IconTintable                                                OFFSET(get<bool>, {0x38, 1, 0, 0})
};

/// Struct /Script/FSD.ItemSkinOwners
/// Size: 0x0010 (0x000000 - 0x000010)
class FItemSkinOwners : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UItemID*>)                    Items                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.SpriteRect
/// Size: 0x0010 (0x000000 - 0x000010)
class FSpriteRect : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	DMember(float)                                     Left                                                        OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     Top                                                         OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Right                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
	DMember(float)                                     Bottom                                                      OFFSET(get<float>, {0xC, 4, 0, 0})
};

/// Struct /Script/FSD.JettyBootsReplay
/// Size: 0x001C (0x000000 - 0x00001C)
class FJettyBootsReplay : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	DMember(int32_t)                                   Seed                                                        OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	SMember(FVector2D)                                 Position                                                    OFFSET(getStruct<T>, {0x4, 8, 0, 0})
	DMember(char)                                      State                                                       OFFSET(get<char>, {0xC, 1, 0, 0})
	DMember(int32_t)                                   Level                                                       OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	DMember(int32_t)                                   Score                                                       OFFSET(get<int32_t>, {0x14, 4, 0, 0})
	DMember(int32_t)                                   Lives                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.LoadoutCopy
/// Size: 0x0180 (0x000000 - 0x000180)
class FLoadoutCopy : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 384;

public:
	SMember(FItemLoadout)                              ItemLoadout                                                 OFFSET(getStruct<T>, {0x0, 132, 0, 0})
	SMember(FUpgradeLoadout)                           UpgradeLoadout                                              OFFSET(getStruct<T>, {0x88, 80, 0, 0})
	SMember(FCharacterPerksSave)                       PerkLoadout                                                 OFFSET(getStruct<T>, {0xD8, 16, 0, 0})
	SMember(FCharacterVanityLoadout)                   VanityLoadout                                               OFFSET(getStruct<T>, {0xE8, 152, 0, 0})
};

/// Struct /Script/FSD.LocalizedLanguageInfo
/// Size: 0x0038 (0x000000 - 0x000038)
class FLocalizedLanguageInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FString)                                   EnglishName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   NativeName                                                  OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   CodeName                                                    OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      CommunityTranslated                                         OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(int32_t)                                   TranslatedPercent                                           OFFSET(get<int32_t>, {0x34, 4, 0, 0})
};

/// Struct /Script/FSD.FSDLocalizedChatMessage
/// Size: 0x0048 (0x000000 - 0x000048)
class FFSDLocalizedChatMessage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(EChatMessageType)                          MsgType                                                     OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FString)                                   Sender                                                      OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FText)                                     Msg                                                         OFFSET(getStruct<T>, {0x20, 24, 0, 0})
	CMember(TArray<FText>)                             Arguments                                                   OFFSET(get<T>, {0x38, 16, 0, 0})
};

/// Struct /Script/FSD.MissionStepDescription
/// Size: 0x0038 (0x000000 - 0x000038)
class FMissionStepDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	SMember(FText)                                     Headline                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     RichDescription                                             OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(class UTexture2D*)                         Image                                                       OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FSD.MinersManualDescription
/// Size: 0x0040 (0x000000 - 0x000040)
class FMinersManualDescription : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FText)                                     Headline                                                    OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FText)                                     RichDescription                                             OFFSET(getStruct<T>, {0x18, 24, 0, 0})
	CMember(class UTexture2D*)                         ImageFront                                                  OFFSET(get<T>, {0x30, 8, 0, 0})
	CMember(class UTexture2D*)                         ImageBackground                                             OFFSET(get<T>, {0x38, 8, 0, 0})
};

/// Struct /Script/FSD.PlanetZoneItem
/// Size: 0x0030 (0x000000 - 0x000030)
class FPlanetZoneItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	CMember(TArray<class UBiome*>)                     Biomes                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<class UGeneratedMission*>)          missions                                                    OFFSET(get<T>, {0x10, 16, 0, 0})
	CMember(class UPlanetZone*)                        Zone                                                        OFFSET(get<T>, {0x20, 8, 0, 0})
	DMember(bool)                                      HasSpecialEvent                                             OFFSET(get<bool>, {0x28, 1, 0, 0})
	DMember(bool)                                      WouldHaveSpecialEvent                                       OFFSET(get<bool>, {0x29, 1, 0, 0})
};

/// Struct /Script/FSD.PathCell
/// Size: 0x0010 (0x000000 - 0x000010)
class FPathCell : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FSD.PathDebugNode
/// Size: 0x0020 (0x000000 - 0x000020)
class FPathDebugNode : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
};

/// Struct /Script/FSD.ShardStage
/// Size: 0x0010 (0x000000 - 0x000010)
class FShardStage : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class UStaticMesh*>)                Shards                                                      OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.RejoinFloat
/// Size: 0x001C (0x000000 - 0x00001C)
class FRejoinFloat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FGuid)                                     ItemKey                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FName)                                     ValueKey                                                    OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.RejoinInt
/// Size: 0x001C (0x000000 - 0x00001C)
class FRejoinInt : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 28;

public:
	SMember(FGuid)                                     ItemKey                                                     OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FName)                                     ValueKey                                                    OFFSET(getStruct<T>, {0x10, 8, 0, 0})
	DMember(int32_t)                                   Value                                                       OFFSET(get<int32_t>, {0x18, 4, 0, 0})
};

/// Struct /Script/FSD.PostDataModel
/// Size: 0x0010 (0x000000 - 0x000010)
class FPostDataModel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FSD.DebrisVeinResource
/// Size: 0x0018 (0x000000 - 0x000018)
class FDebrisVeinResource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(class UDebrisVeinComponent*)               Debris                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.TerrainPlacementDebugItem
/// Size: 0x0070 (0x000000 - 0x000070)
class FTerrainPlacementDebugItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 112;

public:
	CMember(TArray<FTerrainPlacementBox>)              TerrainCheckers                                             OFFSET(get<T>, {0x0, 16, 0, 0})
	DMember(bool)                                      BoxGood                                                     OFFSET(get<bool>, {0x10, 1, 0, 0})
	DMember(bool)                                      CapsuleGood                                                 OFFSET(get<bool>, {0x11, 1, 0, 0})
	CMember(EDebrisColliderType)                       CapsuleType                                                 OFFSET(get<T>, {0x12, 1, 0, 0})
	SMember(FDebrisCapsule)                            Capsule                                                     OFFSET(getStruct<T>, {0x14, 32, 0, 0})
	SMember(FTransform)                                Transform                                                   OFFSET(getStruct<T>, {0x40, 48, 0, 0})
};

/// Struct /Script/FSD.GeneratedDebrisItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FGeneratedDebrisItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UDebrisBase*)                        Debris                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UObject*)                            Influencer                                                  OFFSET(get<T>, {0x8, 8, 0, 0})
};

/// Struct /Script/FSD.PLSResource
/// Size: 0x0010 (0x000000 - 0x000010)
class FPLSResource : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     AmountToGenerate                                            OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.InfluenceSphere
/// Size: 0x0010 (0x000000 - 0x000010)
class FInfluenceSphere : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UCaveInfluencer*)                    Influencer                                                  OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Radius                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.ProfileCategoryTiming
/// Size: 0x0018 (0x000000 - 0x000018)
class FProfileCategoryTiming : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   CategoryName                                                OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(float)                                     CategoryTime                                                OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.DormantComponentState
/// Size: 0x0018 (0x000000 - 0x000018)
class FDormantComponentState : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	CMember(TWeakObjectPtr<class UActorComponent*>)    Component                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(TEnumAsByte<ECollisionEnabled>)            Collision                                                   OFFSET(get<T>, {0x8, 1, 0, 0})
	SMember(FName)                                     CollisionProfileName                                        OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	DMember(bool)                                      Active                                                      OFFSET(get<bool>, {0x14, 1, 1, 0})
	DMember(bool)                                      Visible                                                     OFFSET(get<bool>, {0x14, 1, 1, 1})
};

/// Struct /Script/FSD.ExposedProperty
/// Size: 0x0001 (0x000000 - 0x000001)
class FExposedProperty : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
};

/// Struct /Script/FSD.ExposedFloat
/// Size: 0x0028 (0x000000 - 0x000028)
class FExposedFloat : public FExposedProperty
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FName)                                     PropertyName                                                OFFSET(getStruct<T>, {0x0, 8, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Struct /Script/FSD.ExposableFloat
/// Size: 0x0028 (0x000000 - 0x000028)
class FExposableFloat : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	DMember(float)                                     Value                                                       OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(bool)                                      Exposed                                                     OFFSET(get<bool>, {0x4, 1, 0, 0})
	SMember(FText)                                     Description                                                 OFFSET(getStruct<T>, {0x8, 24, 0, 0})
	DMember(float)                                     MinValue                                                    OFFSET(get<float>, {0x20, 4, 0, 0})
	DMember(float)                                     MaxValue                                                    OFFSET(get<float>, {0x24, 4, 0, 0})
};

/// Struct /Script/FSD.RecoilImpulse
/// Size: 0x000C (0x000000 - 0x00000C)
class FRecoilImpulse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     Rotation                                                    OFFSET(get<float>, {0x0, 4, 0, 0})
	SMember(FVector2D)                                 Impulse                                                     OFFSET(getStruct<T>, {0x4, 8, 0, 0})
};

/// Struct /Script/FSD.ScanPath
/// Size: 0x0018 (0x000000 - 0x000018)
class FScanPath : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FVector)                                   Start                                                       OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	SMember(FVector)                                   End                                                         OFFSET(getStruct<T>, {0xC, 12, 0, 0})
};

/// Struct /Script/FSD.ReflectiveHitscanHit
/// Size: 0x0038 (0x000000 - 0x000038)
class FReflectiveHitscanHit : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UPrimitiveComponent*)                Component                                                   OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(char)                                      BoneIndex                                                   OFFSET(get<char>, {0x8, 1, 0, 0})
	SMember(FName)                                     BoneName                                                    OFFSET(getStruct<T>, {0xC, 8, 0, 0})
	SMember(FVector_NetQuantize)                       HitLocation                                                 OFFSET(getStruct<T>, {0x14, 12, 0, 0})
	SMember(FVector_NetQuantizeNormal)                 ImpactNormal                                                OFFSET(getStruct<T>, {0x20, 12, 0, 0})
	CMember(class UFSDPhysicalMaterial*)               PhysMat                                                     OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FSD.ReflectionTraceResult
/// Size: 0x0048 (0x000000 - 0x000048)
class FReflectionTraceResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 72;

public:
	CMember(TArray<FScanPath>)                         Path                                                        OFFSET(get<T>, {0x0, 16, 0, 0})
	SMember(FReflectiveHitscanHit)                     FinalHit                                                    OFFSET(getStruct<T>, {0x10, 56, 0, 0})
};

/// Struct /Script/FSD.ResourceInitalizer
/// Size: 0x0010 (0x000000 - 0x000010)
class FResourceInitalizer : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     MaxAmount                                                   OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.ResourcePouchItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FResourcePouchItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class UResourceData*)                      Resource                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.RichTextToken
/// Size: 0x0020 (0x000000 - 0x000020)
class FRichTextToken : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	SMember(FString)                                   Tag                                                         OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   Text                                                        OFFSET(getStruct<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.RichTextParseResult
/// Size: 0x0040 (0x000000 - 0x000040)
class FRichTextParseResult : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FText)                                     SourceText                                                  OFFSET(getStruct<T>, {0x0, 24, 0, 0})
	SMember(FString)                                   UnformattedString                                           OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(int32_t)                                   UnformattedLength                                           OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	CMember(TArray<FRichTextToken>)                    Tokens                                                      OFFSET(get<T>, {0x30, 16, 0, 0})
};

/// Struct /Script/FSD.KnockbackData
/// Size: 0x0014 (0x000000 - 0x000014)
class FKnockbackData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 20;

public:
	SMember(FVector)                                   Direction                                                   OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(float)                                     force                                                       OFFSET(get<float>, {0xC, 4, 0, 0})
	DMember(float)                                     Progress                                                    OFFSET(get<float>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.RoomGeneratorGroupInstance
/// Size: 0x0010 (0x000000 - 0x000010)
class FRoomGeneratorGroupInstance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<class URoomGenerator*>)             Rooms                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.SaveGameSnapShot
/// Size: 0x00C8 (0x000000 - 0x0000C8)
class FSaveGameSnapShot : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 200;

public:
	CMember(TWeakObjectPtr<class UFSDSaveGame*>)       SaveGame                                                    OFFSET(get<T>, {0x0, 8, 0, 0})
	SMember(FString)                                   Filename                                                    OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	DMember(bool)                                      IsObsolete                                                  OFFSET(get<bool>, {0x18, 1, 0, 0})
	DMember(int32_t)                                   VersionNumber                                               OFFSET(get<int32_t>, {0x1C, 4, 0, 0})
	DMember(int32_t)                                   Credits                                                     OFFSET(get<int32_t>, {0x20, 4, 0, 0})
	CMember(TMap<class UClass*, int32_t>)              CharacterLevels                                             OFFSET(get<T>, {0x28, 80, 0, 0})
	CMember(TMap<class UClass*, int32_t>)              Resources                                                   OFFSET(get<T>, {0x78, 80, 0, 0})
};

/// Struct /Script/FSD.SchematicGADataEntry
/// Size: 0x0028 (0x000008 - 0x000030)
class FSchematicGADataEntry : public FTableRowBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(int32_t)                                   SchematicGAID                                               OFFSET(get<int32_t>, {0x18, 4, 0, 0})
	SMember(FString)                                   SchematicName                                               OFFSET(getStruct<T>, {0x20, 16, 0, 0})
};

/// Struct /Script/FSD.SeasonalEventEntryChance
/// Size: 0x0010 (0x000000 - 0x000010)
class FSeasonalEventEntryChance : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class USpecialEvent*)                      SpecialEvent                                                OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     SpawnChance                                                 OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.FSDServerListEntryModModel
/// Size: 0x0028 (0x000000 - 0x000028)
class FFSDServerListEntryModModel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 40;

public:
	SMember(FString)                                   Name                                                        OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   Category                                                    OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FString)                                   Version                                                     OFFSET(getStruct<T>, {0x18, 16, 0, 0})
};

/// Struct /Script/FSD.FSDServerListEntryModel
/// Size: 0x00E8 (0x000000 - 0x0000E8)
class FFSDServerListEntryModel : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 232;

public:
	SMember(FString)                                   ID                                                          OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   DRG_SERVERNAME                                              OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   DRG_SERVERNAME_SAN                                          OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(int32_t)                                   DRG_GLOBALMISSION_SEED                                      OFFSET(get<int32_t>, {0x30, 4, 0, 0})
	DMember(int32_t)                                   DRG_SEASON                                                  OFFSET(get<int32_t>, {0x34, 4, 0, 0})
	DMember(int32_t)                                   DRG_MISSION_SEED                                            OFFSET(get<int32_t>, {0x38, 4, 0, 0})
	DMember(int32_t)                                   DRG_DIFF                                                    OFFSET(get<int32_t>, {0x3C, 4, 0, 0})
	SMember(FString)                                   DRG_DIFF_MOD                                                OFFSET(getStruct<T>, {0x40, 16, 0, 0})
	DMember(int32_t)                                   DRG_GAMESTATE                                               OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	DMember(int32_t)                                   DRG_PWREQUIRED                                              OFFSET(get<int32_t>, {0x54, 4, 0, 0})
	DMember(int32_t)                                   DRG_PRIVATE                                                 OFFSET(get<int32_t>, {0x58, 4, 0, 0})
	DMember(int32_t)                                   DRG_NUMPLAYERS                                              OFFSET(get<int32_t>, {0x5C, 4, 0, 0})
	SMember(FString)                                   DRG_CLASSES                                                 OFFSET(getStruct<T>, {0x60, 16, 0, 0})
	DMember(int32_t)                                   DRG_CLASSLOCK                                               OFFSET(get<int32_t>, {0x70, 4, 0, 0})
	DMember(int32_t)                                   DRG_FULL                                                    OFFSET(get<int32_t>, {0x74, 4, 0, 0})
	SMember(FString)                                   DRG_REGION                                                  OFFSET(getStruct<T>, {0x78, 16, 0, 0})
	SMember(FString)                                   DRG_START                                                   OFFSET(getStruct<T>, {0x88, 16, 0, 0})
	DMember(int32_t)                                   DRG_VERSION                                                 OFFSET(get<int32_t>, {0x98, 4, 0, 0})
	SMember(FString)                                   HostUserID                                                  OFFSET(getStruct<T>, {0xA0, 16, 0, 0})
	SMember(FString)                                   DRG_MISSIONSTRUCTURE                                        OFFSET(getStruct<T>, {0xB0, 16, 0, 0})
	SMember(FString)                                   P2PAddr                                                     OFFSET(getStruct<T>, {0xC0, 16, 0, 0})
	DMember(int32_t)                                   P2PPORT                                                     OFFSET(get<int32_t>, {0xD0, 4, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0xD4, 4, 0, 0})
	CMember(TArray<FFSDServerListEntryModModel>)       Mods                                                        OFFSET(get<T>, {0xD8, 16, 0, 0})
};

/// Struct /Script/FSD.FSDServerListResponse
/// Size: 0x0010 (0x000000 - 0x000010)
class FFSDServerListResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FFSDServerListEntryModel>)          Lobbies                                                     OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.FSDServerListRequest
/// Size: 0x0080 (0x000000 - 0x000080)
class FFSDServerListRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 128;

public:
	SMember(FString)                                   AuthenticationTicket                                        OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   IgnoreId                                                    OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(int32_t)                                   Distance                                                    OFFSET(get<int32_t>, {0x28, 4, 0, 0})
	DMember(int32_t)                                   DRG_PWREQUIRED                                              OFFSET(get<int32_t>, {0x2C, 4, 0, 0})
	SMember(FString)                                   DRG_REGION                                                  OFFSET(getStruct<T>, {0x30, 16, 0, 0})
	DMember(int32_t)                                   DRG_VERSION                                                 OFFSET(get<int32_t>, {0x40, 4, 0, 0})
	DMember(int32_t)                                   DifficultyBitset                                            OFFSET(get<int32_t>, {0x44, 4, 0, 0})
	DMember(int32_t)                                   SeasonBitset                                                OFFSET(get<int32_t>, {0x48, 4, 0, 0})
	DMember(int32_t)                                   MissionSeed                                                 OFFSET(get<int32_t>, {0x4C, 4, 0, 0})
	DMember(int32_t)                                   GlobalMissionSeed                                           OFFSET(get<int32_t>, {0x50, 4, 0, 0})
	SMember(FString)                                   SearchString                                                OFFSET(getStruct<T>, {0x58, 16, 0, 0})
	DMember(bool)                                      DeepDive                                                    OFFSET(get<bool>, {0x68, 1, 0, 0})
	SMember(FString)                                   Platform                                                    OFFSET(getStruct<T>, {0x70, 16, 0, 0})
};

/// Struct /Script/FSD.FSDSteamServerListRequest
/// Size: 0x0030 (0x000080 - 0x0000B0)
class FFSDSteamServerListRequest : public FFSDServerListRequest
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	SMember(FString)                                   SteamTicket                                                 OFFSET(getStruct<T>, {0x80, 16, 0, 0})
	SMember(FString)                                   SteamPingLoc                                                OFFSET(getStruct<T>, {0x90, 16, 0, 0})
	CMember(TArray<int32_t>)                           GameTypes                                                   OFFSET(get<T>, {0xA0, 16, 0, 0})
};

/// Struct /Script/FSD.FriendInfo
/// Size: 0x0060 (0x000000 - 0x000060)
class FFriendInfo : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 96;

public:
	SMember(FString)                                   DisplayName                                                 OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	SMember(FString)                                   RealName                                                    OFFSET(getStruct<T>, {0x10, 16, 0, 0})
	SMember(FString)                                   UserId                                                      OFFSET(getStruct<T>, {0x20, 16, 0, 0})
	DMember(bool)                                      IsOnline                                                    OFFSET(get<bool>, {0x30, 1, 0, 0})
	DMember(bool)                                      IsPlaying                                                   OFFSET(get<bool>, {0x31, 1, 0, 0})
	DMember(bool)                                      IsPlayingThisGame                                           OFFSET(get<bool>, {0x32, 1, 0, 0})
	DMember(bool)                                      IsJoinable                                                  OFFSET(get<bool>, {0x33, 1, 0, 0})
	SMember(FString)                                   sessionId                                                   OFFSET(getStruct<T>, {0x38, 16, 0, 0})
	DMember(bool)                                      HasVoiceSupport                                             OFFSET(get<bool>, {0x48, 1, 0, 0})
	SMember(FString)                                   PresenceStatus                                              OFFSET(getStruct<T>, {0x50, 16, 0, 0})
};

/// Struct /Script/FSD.LookupSessionResponse
/// Size: 0x0030 (0x000000 - 0x000030)
class FLookupSessionResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 48;

public:
	DMember(bool)                                      Valid                                                       OFFSET(get<bool>, {0x0, 1, 0, 0})
	SMember(FString)                                   LobbyId                                                     OFFSET(getStruct<T>, {0x8, 16, 0, 0})
	SMember(FString)                                   P2PAddr                                                     OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	DMember(int32_t)                                   P2PPORT                                                     OFFSET(get<int32_t>, {0x28, 4, 0, 0})
};

/// Struct /Script/FSD.LookupSessionRequest
/// Size: 0x0010 (0x000000 - 0x000010)
class FLookupSessionRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   SessionKey                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.StopSessionResponse
/// Size: 0x0001 (0x000000 - 0x000001)
class FStopSessionResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      success                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/FSD.StopSessionRequest
/// Size: 0x0010 (0x000000 - 0x000010)
class FStopSessionRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   SessionKey                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.SessionUpdateResponse
/// Size: 0x0001 (0x000000 - 0x000001)
class FSessionUpdateResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1;

public:
	DMember(bool)                                      success                                                     OFFSET(get<bool>, {0x0, 1, 0, 0})
};

/// Struct /Script/FSD.SessionUpdateRequest
/// Size: 0x0018 (0x000000 - 0x000018)
class FSessionUpdateRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 24;

public:
	SMember(FString)                                   SessionKey                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   NumPlayers                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
};

/// Struct /Script/FSD.RegisterSessionResponse
/// Size: 0x0010 (0x000000 - 0x000010)
class FRegisterSessionResponse : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FString)                                   SessionKey                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.RegisterSessionRequest
/// Size: 0x0040 (0x000000 - 0x000040)
class FRegisterSessionRequest : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 64;

public:
	SMember(FString)                                   ServerName                                                  OFFSET(getStruct<T>, {0x0, 16, 0, 0})
	DMember(int32_t)                                   NumPlayers                                                  OFFSET(get<int32_t>, {0x10, 4, 0, 0})
	SMember(FString)                                   LobbyId                                                     OFFSET(getStruct<T>, {0x18, 16, 0, 0})
	SMember(FString)                                   P2PAddr                                                     OFFSET(getStruct<T>, {0x28, 16, 0, 0})
	DMember(int32_t)                                   P2PPORT                                                     OFFSET(get<int32_t>, {0x38, 4, 0, 0})
};

/// Struct /Script/FSD.SoundClassManagerItem
/// Size: 0x000C (0x000000 - 0x00000C)
class FSoundClassManagerItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
};

/// Struct /Script/FSD.SpiderAnimInstanceProxy
/// Size: 0x0000 (0x000770 - 0x000770)
class FSpiderAnimInstanceProxy : public FAnimInstanceProxy
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 1904;

public:
};

/// Struct /Script/FSD.HookData
/// Size: 0x0010 (0x000000 - 0x000010)
class FHookData : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	SMember(FVector_NetQuantize)                       TargetLocation                                              OFFSET(getStruct<T>, {0x0, 12, 0, 0})
	DMember(bool)                                      IsExtending                                                 OFFSET(get<bool>, {0xC, 1, 0, 0})
};

/// Struct /Script/FSD.AnimNode_Tentacle
/// Size: 0x0108 (0x0000C8 - 0x0001D0)
class FAnimNode_Tentacle : public FAnimNode_SkeletalControlBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 464;

public:
	CMember(TArray<FBoneReference>)                    BonesToModify                                               OFFSET(get<T>, {0xC8, 16, 0, 0})
};

/// Struct /Script/FSD.TestTerrainMaterialDecalItem
/// Size: 0x0020 (0x000000 - 0x000020)
class FTestTerrainMaterialDecalItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 32;

public:
	CMember(TArray<class UTerrainMaterial*>)           Materials                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TArray<FDecalData>)                        Decals                                                      OFFSET(get<T>, {0x10, 16, 0, 0})
};

/// Struct /Script/FSD.TestTerrainMaterialItem
/// Size: 0x00B0 (0x000000 - 0x0000B0)
class FTestTerrainMaterialItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 176;

public:
	CMember(TArray<class UTerrainMaterial*>)           Materials                                                   OFFSET(get<T>, {0x0, 16, 0, 0})
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     DigParticles                                                OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(TWeakObjectPtr<class UFXSystemAsset*>)     PartialDigParticles                                         OFFSET(get<T>, {0x38, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          CrumbleSound                                                OFFSET(get<T>, {0x60, 8, 0, 0})
	CMember(TWeakObjectPtr<class USoundCue*>)          PartialMineSound                                            OFFSET(get<T>, {0x88, 8, 0, 0})
};

/// Struct /Script/FSD.TetherMessageSettings
/// Size: 0x0010 (0x000000 - 0x000010)
class FTetherMessageSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
};

/// Struct /Script/FSD.TrackMovement
/// Size: 0x000C (0x000000 - 0x00000C)
class FTrackMovement : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(int32_t)                                   Direction                                                   OFFSET(get<int32_t>, {0x0, 4, 0, 0})
	DMember(float)                                     Distance                                                    OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     Speed                                                       OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.InfectionPoint
/// Size: 0x0002 (0x000000 - 0x000002)
class FInfectionPoint : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 2;

public:
	DMember(bool)                                      IsInfected                                                  OFFSET(get<bool>, {0x0, 1, 0, 0})
	DMember(bool)                                      IsVacuumed                                                  OFFSET(get<bool>, {0x1, 1, 0, 0})
};

/// Struct /Script/FSD.VanityTagCategories
/// Size: 0x0038 (0x000000 - 0x000038)
class FVanityTagCategories : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 56;

public:
	CMember(class UTagVanityCategory*)                 General                                                     OFFSET(get<T>, {0x0, 8, 0, 0})
	CMember(class UTagVanityCategory*)                 Seasons                                                     OFFSET(get<T>, {0x8, 8, 0, 0})
	CMember(class UTagVanityCategory*)                 Headwear                                                    OFFSET(get<T>, {0x10, 8, 0, 0})
	CMember(class UTagVanityCategory*)                 Beards                                                      OFFSET(get<T>, {0x18, 8, 0, 0})
	CMember(class UTagVanityCategory*)                 Moustaches                                                  OFFSET(get<T>, {0x20, 8, 0, 0})
	CMember(class UTagVanityCategory*)                 Eyebrows                                                    OFFSET(get<T>, {0x28, 8, 0, 0})
	CMember(class UTagVanityCategory*)                 Sideburns                                                   OFFSET(get<T>, {0x30, 8, 0, 0})
};

/// Struct /Script/FSD.WeakpointTask
/// Size: 0x0110 (0x000000 - 0x000110)
class FWeakpointTask : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 272;

public:
	SMember(FRichCurve)                                GrowCurve                                                   OFFSET(getStruct<T>, {0x0, 128, 0, 0})
	SMember(FRichCurve)                                FadeCurve                                                   OFFSET(getStruct<T>, {0x80, 128, 0, 0})
};

/// Struct /Script/FSD.WeaponHitCounterEffectItem
/// Size: 0x0008 (0x000000 - 0x000008)
class FWeaponHitCounterEffectItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 8;

public:
	CMember(TWeakObjectPtr<class AActor*>)             Target                                                      OFFSET(get<T>, {0x0, 8, 0, 0})
};

/// Struct /Script/FSD.WeightedRoomSelectorItem
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedRoomSelectorItem : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(class URoomGenerator*)                     Room                                                        OFFSET(get<T>, {0x0, 8, 0, 0})
	DMember(float)                                     Weight                                                      OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Struct /Script/FSD.WeightedRoomSelector
/// Size: 0x0010 (0x000000 - 0x000010)
class FWeightedRoomSelector : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 16;

public:
	CMember(TArray<FWeightedRoomSelectorItem>)         Items                                                       OFFSET(get<T>, {0x0, 16, 0, 0})
};

/// Struct /Script/FSD.XPSettings
/// Size: 0x000C (0x000000 - 0x00000C)
class FXPSettings : public MDKBase
{ 
	friend MDKHandler;
	friend MDKBase;
	static inline constexpr uint64_t __MDKClassSize = 12;

public:
	DMember(float)                                     XP_PerGold                                                  OFFSET(get<float>, {0x0, 4, 0, 0})
	DMember(float)                                     XP_PerKill                                                  OFFSET(get<float>, {0x4, 4, 0, 0})
	DMember(float)                                     XP_OnSurvivedLevel                                          OFFSET(get<float>, {0x8, 4, 0, 0})
};

/// Enum /Script/FSD.EDrinkableAlcoholStrength
/// Size: 0x06
enum class EDrinkableAlcoholStrength : uint8_t
{
	EDrinkableAlcoholStrength__NonAlcoholic                                          = 0,
	EDrinkableAlcoholStrength__Light                                                 = 1,
	EDrinkableAlcoholStrength__Regular                                               = 2,
	EDrinkableAlcoholStrength__Strong                                                = 3,
	EDrinkableAlcoholStrength__VeryStrong                                            = 4,
	EDrinkableAlcoholStrength__InstantPassout                                        = 5
};

/// Enum /Script/FSD.EIntoxicationState
/// Size: 0x03
enum class EIntoxicationState : uint8_t
{
	EIntoxicationState__NotIntoxicated                                               = 0,
	EIntoxicationState__Intoxicated                                                  = 1,
	EIntoxicationState__PassOut                                                      = 2
};

/// Enum /Script/FSD.EOutline
/// Size: 0x05
enum class EOutline : uint8_t
{
	EOutline__OL_NONE                                                                = 0,
	EOutline__OL_FRIENDLY                                                            = 251,
	EOutline__OL_NEUTRAL                                                             = 252,
	EOutline__OL_ENEMY                                                               = 253,
	EOutline__OL_ITEM                                                                = 254
};

/// Enum /Script/FSD.ELaserPointerTargetType
/// Size: 0x06
enum class ELaserPointerTargetType : uint8_t
{
	ELaserPointerTargetType__Chunkable                                               = 0,
	ELaserPointerTargetType__Dirt                                                    = 1,
	ELaserPointerTargetType__Player                                                  = 2,
	ELaserPointerTargetType__Enemy                                                   = 3,
	ELaserPointerTargetType__EmbeddedGem                                             = 4,
	ELaserPointerTargetType__Other                                                   = 5
};

/// Enum /Script/FSD.ECharacterState
/// Size: 0x20
enum class ECharacterState : uint8_t
{
	ECharacterState__Walking                                                         = 0,
	ECharacterState__Downed                                                          = 1,
	ECharacterState__Dead                                                            = 2,
	ECharacterState__Falling                                                         = 3,
	ECharacterState__Paralyzed                                                       = 4,
	ECharacterState__Using                                                           = 5,
	ECharacterState__ZipLine                                                         = 6,
	ECharacterState__NoMovement                                                      = 7,
	ECharacterState__Grabbed                                                         = 8,
	ECharacterState__Flying                                                          = 9,
	ECharacterState__Frozen                                                          = 10,
	ECharacterState__PassedOut                                                       = 11,
	ECharacterState__Photography                                                     = 12,
	ECharacterState__Piloting                                                        = 13,
	ECharacterState__Attached                                                        = 14,
	ECharacterState__Pushing                                                         = 15,
	ECharacterState__TrackMovement                                                   = 16,
	ECharacterState__EnemyControl                                                    = 17,
	ECharacterState__Infected                                                        = 18,
	ECharacterState__Invalid                                                         = 19
};

/// Enum /Script/FSD.ECharacterCameraMode
/// Size: 0x07
enum class ECharacterCameraMode : uint8_t
{
	ECharacterCameraMode__FirstPerson                                                = 0,
	ECharacterCameraMode__ThirdPerson                                                = 1,
	ECharacterCameraMode__Follow                                                     = 2,
	ECharacterCameraMode__DownCamera                                                 = 3,
	ECharacterCameraMode__TerrainScanner                                             = 4,
	ECharacterCameraMode__PhotographyMode                                            = 5,
	ECharacterCameraMode__FirstPersonHeadOnly                                        = 6
};

/// Enum /Script/FSD.EInputKeys
/// Size: 0x03
enum class EInputKeys : uint8_t
{
	EInputKeys__Use                                                                  = 0,
	EInputKeys__Fire                                                                 = 1,
	EInputKeys__Mine                                                                 = 2
};

/// Enum /Script/FSD.EPlatformComponentCriteria
/// Size: 0x04
enum class EPlatformComponentCriteria : uint8_t
{
	EPlatformComponentCriteria__All                                                  = 0,
	EPlatformComponentCriteria__ServerOnly                                           = 1,
	EPlatformComponentCriteria__ClientOnly                                           = 2,
	EPlatformComponentCriteria__OwningClientOnly                                     = 3
};

/// Enum /Script/FSD.EPlayerTemperatureState
/// Size: 0x03
enum class EPlayerTemperatureState : uint8_t
{
	EPlayerTemperatureState__Normal                                                  = 0,
	EPlayerTemperatureState__Frozen                                                  = 1,
	EPlayerTemperatureState__Overheated                                              = 2
};

/// Enum /Script/FSD.EThawInputDirection
/// Size: 0x05
enum class EThawInputDirection : uint8_t
{
	EThawInputDirection__EForward                                                    = 0,
	EThawInputDirection__ERight                                                      = 1,
	EThawInputDirection__EBack                                                       = 2,
	EThawInputDirection__ELeft                                                       = 3,
	EThawInputDirection__ENA                                                         = 4
};

/// Enum /Script/FSD.EDeepMovementState
/// Size: 0x06
enum class EDeepMovementState : uint8_t
{
	EDeepMovementState__Stationary                                                   = 0,
	EDeepMovementState__Controlled                                                   = 1,
	EDeepMovementState__Moving                                                       = 2,
	EDeepMovementState__WaitingForPath                                               = 3,
	EDeepMovementState__AttackStance                                                 = 4,
	EDeepMovementState__FakePhysics                                                  = 5
};

/// Enum /Script/FSD.ECharselectionCameraLocation
/// Size: 0x07
enum class ECharselectionCameraLocation : uint8_t
{
	ECharselectionCameraLocation__Selection                                          = 0,
	ECharselectionCameraLocation__Customization                                      = 1,
	ECharselectionCameraLocation__Crafting                                           = 2,
	ECharselectionCameraLocation__ViewWeapon                                         = 3,
	ECharselectionCameraLocation__EndScreen                                          = 4,
	ECharselectionCameraLocation__Forge                                              = 5,
	ECharselectionCameraLocation__Pickaxe                                            = 6
};

/// Enum /Script/FSD.EMinersManualSection
/// Size: 0x07
enum class EMinersManualSection : uint8_t
{
	EMinersManualSection__FrontPage                                                  = 0,
	EMinersManualSection__Hints                                                      = 1,
	EMinersManualSection__Combat                                                     = 2,
	EMinersManualSection__Creatures                                                  = 3,
	EMinersManualSection__Biomes                                                     = 4,
	EMinersManualSection__Missions                                                   = 5,
	EMinersManualSection__Resources                                                  = 6
};

/// Enum /Script/FSD.ECharacterSelectorItemStatus
/// Size: 0x03
enum class ECharacterSelectorItemStatus : uint8_t
{
	ECharacterSelectorItemStatus__LeaveAsIs                                          = 0,
	ECharacterSelectorItemStatus__SwitchToDefault                                    = 1,
	ECharacterSelectorItemStatus__NoItemEquipped                                     = 2
};

/// Enum /Script/FSD.EGameType
/// Size: 0x04
enum class EGameType : uint8_t
{
	EGameType__Fully                                                                 = 0,
	EGameType__Progression                                                           = 1,
	EGameType__Sandbox                                                               = 2,
	EGameType__Vanilla                                                               = 99
};

/// Enum /Script/FSD.ESteamSearchRegion
/// Size: 0x04
enum class ESteamSearchRegion : uint8_t
{
	ESteamSearchRegion__Close                                                        = 0,
	ESteamSearchRegion__Medium                                                       = 1,
	ESteamSearchRegion__Far                                                          = 2,
	ESteamSearchRegion__World                                                        = 3
};

/// Enum /Script/FSD.ESteamServerJoinStatus
/// Size: 0x02
enum class ESteamServerJoinStatus : uint8_t
{
	ESteamServerJoinStatus__Open                                                     = 0,
	ESteamServerJoinStatus__PasswordRequired                                         = 1
};

/// Enum /Script/FSD.EAlwaysLoadedWorlds
/// Size: 0x03
enum class EAlwaysLoadedWorlds : uint8_t
{
	EAlwaysLoadedWorlds__CharacterViewer                                             = 0,
	EAlwaysLoadedWorlds__LoaderNormal                                                = 1,
	EAlwaysLoadedWorlds__LoaderDeepDive                                              = 2
};

/// Enum /Script/FSD.EDisconnectReason
/// Size: 0x19
enum class EDisconnectReason : uint8_t
{
	EDisconnectReason__None                                                          = 0,
	EDisconnectReason__Kicked_HaveMyReasons                                          = 1,
	EDisconnectReason__Kicked_ShouldBePrivate                                        = 2,
	EDisconnectReason__Kicked_AFK                                                    = 3,
	EDisconnectReason__Banned                                                        = 4,
	EDisconnectReason__ServerQuit                                                    = 5,
	EDisconnectReason__Disconnected                                                  = 6,
	EDisconnectReason__SignInChange                                                  = 7,
	EDisconnectReason__JoinSessionFail_SessionIsFull                                 = 8,
	EDisconnectReason__JoinSessionFail_SessionDoesNotExist                           = 9,
	EDisconnectReason__JoinSessionFail_Other                                         = 10,
	EDisconnectReason__JoinSessionFail_Privilege                                     = 11,
	EDisconnectReason__NetworkError                                                  = 12,
	EDisconnectReason__SignOutComplete                                               = 13,
	EDisconnectReason__WrongPassword                                                 = 14,
	EDisconnectReason__DeepDiveLateJoin                                              = 15,
	EDisconnectReason__MissionStarting                                               = 16,
	EDisconnectReason__LatejoinNotAllowed                                            = 17,
	EDisconnectReason__OutdatedClient                                                = 18
};

/// Enum /Script/FSD.EChatSenderType
/// Size: 0x05
enum class EChatSenderType : uint8_t
{
	EChatSenderType__NormalUser                                                      = 0,
	EChatSenderType__DeluxUser                                                       = 1,
	EChatSenderType__Developer                                                       = 2,
	EChatSenderType__Streamer                                                        = 3,
	EChatSenderType__Modder                                                          = 4
};

/// Enum /Script/FSD.EChatMessageType
/// Size: 0x02
enum class EChatMessageType : uint8_t
{
	EChatMessageType__ES_Chat                                                        = 0,
	EChatMessageType__ES_Game                                                        = 1
};

/// Enum /Script/FSD.EFSDInputSource
/// Size: 0x03
enum class EFSDInputSource : uint8_t
{
	EFSDInputSource__None                                                            = 0,
	EFSDInputSource__MouseAndKeyboard                                                = 1,
	EFSDInputSource__Controller                                                      = 2
};

/// Enum /Script/FSD.EKeyboardLayout
/// Size: 0x03
enum class EKeyboardLayout : uint8_t
{
	EKeyboardLayout__QWERTY                                                          = 0,
	EKeyboardLayout__AZERTY                                                          = 1,
	EKeyboardLayout__QWERTZ                                                          = 2
};

/// Enum /Script/FSD.EHUDVisibilityReason
/// Size: 0x05
enum class EHUDVisibilityReason : uint8_t
{
	EHUDVisibilityReason__Invalid                                                    = 0,
	EHUDVisibilityReason__UserChoice                                                 = 1,
	EHUDVisibilityReason__StandDown                                                  = 2,
	EHUDVisibilityReason__MenuActive                                                 = 4,
	EHUDVisibilityReason__Photography                                                = 8
};

/// Enum /Script/FSD.EMinersManualSinglePage
/// Size: 0x14
enum class EMinersManualSinglePage : uint8_t
{
	EMinersManualSinglePage__Mutators                                                = 0,
	EMinersManualSinglePage__Warnings                                                = 1,
	EMinersManualSinglePage__DamageTypes                                             = 2,
	EMinersManualSinglePage__Weakpoints                                              = 3,
	EMinersManualSinglePage__Armor                                                   = 4,
	EMinersManualSinglePage__Light                                                   = 5,
	EMinersManualSinglePage__Ammo                                                    = 6,
	EMinersManualSinglePage__Traversal                                               = 7,
	EMinersManualSinglePage__Spacerig                                                = 8,
	EMinersManualSinglePage__Upgrades                                                = 9,
	EMinersManualSinglePage__Perks                                                   = 10,
	EMinersManualSinglePage__Bosco                                                   = 11,
	EMinersManualSinglePage__Assignments                                             = 12,
	EMinersManualSinglePage__Navigation                                              = 13
};

/// Enum /Script/FSD.EArmorDamageType
/// Size: 0x03
enum class EArmorDamageType : uint8_t
{
	EArmorDamageType__Normal                                                         = 0,
	EArmorDamageType__Dissolve                                                       = 1,
	EArmorDamageType__Beam                                                           = 2
};

/// Enum /Script/FSD.ESpacerigStartType
/// Size: 0x02
enum class ESpacerigStartType : uint8_t
{
	ESpacerigStartType__PlayerHub                                                    = 0,
	ESpacerigStartType__Medbay                                                       = 1
};

/// Enum /Script/FSD.EItemCategory
/// Size: 0x08
enum class EItemCategory : uint8_t
{
	EItemCategory__PrimaryWeapon                                                     = 0,
	EItemCategory__SecondaryWeapon                                                   = 1,
	EItemCategory__TraversalTool                                                     = 2,
	EItemCategory__ClassTool                                                         = 3,
	EItemCategory__Grenade                                                           = 4,
	EItemCategory__Flare                                                             = 5,
	EItemCategory__MiningTool                                                        = 6,
	EItemCategory__Armor                                                             = 7
};

/// Enum /Script/FSD.EFSDFaction
/// Size: 0x04
enum class EFSDFaction : uint8_t
{
	EFSDFaction__NoFaction                                                           = 0,
	EFSDFaction__CaveCrawlers                                                        = 1,
	EFSDFaction__MightyMiners                                                        = 2,
	EFSDFaction__DirtDiggers                                                         = 3
};

/// Enum /Script/FSD.ESonyInputSettingsBools
/// Size: 0x11
enum class ESonyInputSettingsBools : uint8_t
{
	ESonyInputSettingsBools__MotionControlEnabled                                    = 0,
	ESonyInputSettingsBools__MotionControlFlight                                     = 1,
	ESonyInputSettingsBools__MotionControlSalute                                     = 2,
	ESonyInputSettingsBools__MotionControlPrecisionMode                              = 3,
	ESonyInputSettingsBools__AdaptiveTriggersEnabled                                 = 4,
	ESonyInputSettingsBools__TouchPadTerrainScannerEnabled                           = 5,
	ESonyInputSettingsBools__TouchPadGesturesEnabled                                 = 6,
	ESonyInputSettingsBools__ControllerSpeakerMissionControl                         = 7,
	ESonyInputSettingsBools__ControllerSpeakerSalute                                 = 8,
	ESonyInputSettingsBools__ControllerSpeakerFlare                                  = 9,
	ESonyInputSettingsBools__ControllerSpeakerMineralCollection                      = 10
};

/// Enum /Script/FSD.ESonyInputSettingsFloats
/// Size: 0x06
enum class ESonyInputSettingsFloats : uint8_t
{
	ESonyInputSettingsFloats__MotionControlXSensitivity                              = 0,
	ESonyInputSettingsFloats__MotionControlYSensitivity                              = 1,
	ESonyInputSettingsFloats__ControllerSpeakerVolume                                = 2,
	ESonyInputSettingsFloats__TouchPadTerrainScannerXSensitivity                     = 3,
	ESonyInputSettingsFloats__TouchPadTerrainScannerYSensitivity                     = 4,
	ESonyInputSettingsFloats__TouchPadTerrainScannerZoomSensitivity                  = 5
};

/// Enum /Script/FSD.ESonyControllerLightMode
/// Size: 0x03
enum class ESonyControllerLightMode : uint8_t
{
	ESonyControllerLightMode__Disabled                                               = 0,
	ESonyControllerLightMode__Simple                                                 = 1,
	ESonyControllerLightMode__Default                                                = 2
};

/// Enum /Script/FSD.ESonyControllerMotionMapping
/// Size: 0x02
enum class ESonyControllerMotionMapping : uint8_t
{
	ESonyControllerMotionMapping__Yaw                                                = 0,
	ESonyControllerMotionMapping__Roll                                               = 1
};

/// Enum /Script/FSD.UFSDStreamlineDLSSGMode
/// Size: 0x03
enum class UFSDStreamlineDLSSGMode : uint8_t
{
	UFSDStreamlineDLSSGMode__Off                                                     = 0,
	UFSDStreamlineDLSSGMode__On                                                      = 1,
	UFSDStreamlineDLSSGMode__Auto                                                    = 2
};

/// Enum /Script/FSD.EConsoleGraphicsMode
/// Size: 0x03
enum class EConsoleGraphicsMode : uint8_t
{
	EConsoleGraphicsMode__Fidelity                                                   = 0,
	EConsoleGraphicsMode__Performance                                                = 1,
	EConsoleGraphicsMode__Performance120                                             = 2
};

/// Enum /Script/FSD.EHUDVisibilityMode
/// Size: 0x03
enum class EHUDVisibilityMode : uint8_t
{
	EHUDVisibilityMode__Visible                                                      = 0,
	EHUDVisibilityMode__Dynamic                                                      = 1,
	EHUDVisibilityMode__Hidden                                                       = 2
};

/// Enum /Script/FSD.ETurn180Mode
/// Size: 0x03
enum class ETurn180Mode : uint8_t
{
	ETurn180Mode__PressRun                                                           = 0,
	ETurn180Mode__PressFlare                                                         = 1,
	ETurn180Mode__Off                                                                = 2
};

/// Enum /Script/FSD.EVanitySlot
/// Size: 0x10
enum class EVanitySlot : uint8_t
{
	EVanitySlot__Head                                                                = 0,
	EVanitySlot__Beard                                                               = 1,
	EVanitySlot__Armor                                                               = 2,
	EVanitySlot__BeardColor                                                          = 3,
	EVanitySlot__SkinColor                                                           = 4,
	EVanitySlot__Moustache                                                           = 5,
	EVanitySlot__Eyebrows                                                            = 6,
	EVanitySlot__Sideburns                                                           = 7,
	EVanitySlot__ArmorMaterial                                                       = 8,
	EVanitySlot__Count                                                               = 9
};

/// Enum /Script/FSD.EVacuumState
/// Size: 0x04
enum class EVacuumState : uint8_t
{
	EVacuumState__EPuddle                                                            = 0,
	EVacuumState__EVacuuming                                                         = 1,
	EVacuumState__EFalling                                                           = 2,
	EVacuumState__EDead                                                              = 3
};

/// Enum /Script/FSD.EHolidayType
/// Size: 0x09
enum class EHolidayType : uint8_t
{
	EHolidayType__None                                                               = 0,
	EHolidayType__LunarFestival                                                      = 1,
	EHolidayType__Anniversary                                                        = 2,
	EHolidayType__Easter                                                             = 3,
	EHolidayType__BeachParty                                                         = 4,
	EHolidayType__Oktoberfest                                                        = 5,
	EHolidayType__Halloween                                                          = 6,
	EHolidayType__Xmas                                                               = 7,
	EHolidayType__OneOffEvent                                                        = 8
};

/// Enum /Script/FSD.ECampaignType
/// Size: 0x04
enum class ECampaignType : uint8_t
{
	ECampaignType__Normal                                                            = 0,
	ECampaignType__Weekly                                                            = 1,
	ECampaignType__MatrixCoreHunt                                                    = 2,
	ECampaignType__SeededRandom                                                      = 3
};

/// Enum /Script/FSD.EItemPreviewStatus
/// Size: 0x05
enum class EItemPreviewStatus : uint8_t
{
	EItemPreviewStatus__Normal                                                       = 0,
	EItemPreviewStatus__Upgraded                                                     = 1,
	EItemPreviewStatus__Previewed                                                    = 2,
	EItemPreviewStatus__PreviewReduced                                               = 3,
	EItemPreviewStatus__UpgradedAndPreviewReduced                                    = 4
};

/// Enum /Script/FSD.EUpgradeCalucationType
/// Size: 0x02
enum class EUpgradeCalucationType : uint8_t
{
	EUpgradeCalucationType__Additive                                                 = 0,
	EUpgradeCalucationType__Multiplicative                                           = 1
};

/// Enum /Script/FSD.EUpgradeClass
/// Size: 0x07
enum class EUpgradeClass : uint8_t
{
	EUpgradeClass__Class_A                                                           = 0,
	EUpgradeClass__Class_B                                                           = 1,
	EUpgradeClass__Gear_A                                                            = 2,
	EUpgradeClass__Gear_B                                                            = 3,
	EUpgradeClass__Armor                                                             = 4,
	EUpgradeClass__Pickaxe                                                           = 5,
	EUpgradeClass__Class_Bosco                                                       = 10
};

/// Enum /Script/FSD.EUpgradeTiers
/// Size: 0x05
enum class EUpgradeTiers : uint8_t
{
	EUpgradeTiers__Tier                                                              = 0,
	EUpgradeTiers__Tier2                                                             = 1,
	EUpgradeTiers__Tier3                                                             = 2,
	EUpgradeTiers__Tier4                                                             = 3,
	EUpgradeTiers__Tier5                                                             = 4
};

/// Enum /Script/FSD.EItemUpgradeStatus
/// Size: 0x05
enum class EItemUpgradeStatus : uint8_t
{
	EItemUpgradeStatus__Locked                                                       = 0,
	EItemUpgradeStatus__AvailableCannotAfford                                        = 1,
	EItemUpgradeStatus__AvailableCanAfford                                           = 2,
	EItemUpgradeStatus__Owned                                                        = 3,
	EItemUpgradeStatus__Equipped                                                     = 4
};

/// Enum /Script/FSD.EDroneAIState
/// Size: 0x12
enum class EDroneAIState : uint8_t
{
	EDroneAIState__Follow                                                            = 0,
	EDroneAIState__Mine                                                              = 1,
	EDroneAIState__Fight                                                             = 2,
	EDroneAIState__Revive                                                            = 3,
	EDroneAIState__Light                                                             = 4,
	EDroneAIState__GoToPlayer                                                        = 5,
	EDroneAIState__Salute                                                            = 6,
	EDroneAIState__CarryGem                                                          = 7,
	EDroneAIState__UseAbillity                                                       = 8,
	EDroneAIState__Repairing                                                         = 9,
	EDroneAIState__Cleaning                                                          = 10,
	EDroneAIState__Melee                                                             = 11
};

/// Enum /Script/FSD.EDroneState
/// Size: 0x04
enum class EDroneState : uint8_t
{
	EDroneState__EFollow                                                             = 0,
	EDroneState__EMining                                                             = 1,
	EDroneState__ELight                                                              = 2,
	EDroneState__EMax                                                                = 3
};

/// Enum /Script/FSD.ERessuplyPodState
/// Size: 0x04
enum class ERessuplyPodState : uint8_t
{
	ERessuplyPodState__ReadyToDrop                                                   = 0,
	ERessuplyPodState__Dropping                                                      = 1,
	ERessuplyPodState__Landed                                                        = 2,
	ERessuplyPodState__Idle                                                          = 3
};

/// Enum /Script/FSD.EHackingPodState
/// Size: 0x06
enum class EHackingPodState : uint8_t
{
	EHackingPodState__EClosed                                                        = 0,
	EHackingPodState__EShowDispenser                                                 = 1,
	EHackingPodState__EShowButton                                                    = 2,
	EHackingPodState__EHacking                                                       = 3,
	EHackingPodState__EDestroyed                                                     = 4,
	EHackingPodState__EDone                                                          = 5
};

/// Enum /Script/FSD.ERiftCrystalState
/// Size: 0x08
enum class ERiftCrystalState : uint8_t
{
	Default                                                                          = 0,
	InitialEmbeded                                                                   = 1,
	Embedded                                                                         = 2,
	Lifting                                                                          = 3,
	Rifting                                                                          = 4,
	Calling                                                                          = 5,
	DeathDisplay                                                                     = 6,
	Dead                                                                             = 7
};

/// Enum /Script/FSD.ERockCrackerstate
/// Size: 0x06
enum class ERockCrackerstate : uint8_t
{
	ERockCrackerstate__Init                                                          = 0,
	ERockCrackerstate__EFalling                                                      = 1,
	ERockCrackerstate__EConnect                                                      = 2,
	ERockCrackerstate__EDrilling                                                     = 3,
	ERockCrackerstate__EBroke                                                        = 4,
	ERockCrackerstate__EDone                                                         = 5
};

/// Enum /Script/FSD.ERivalBombNodeState
/// Size: 0x05
enum class ERivalBombNodeState : uint8_t
{
	ERivalBombNodeState__Inactive                                                    = 0,
	ERivalBombNodeState__Active                                                      = 1,
	ERivalBombNodeState__Hackable                                                    = 2,
	ERivalBombNodeState__Completed                                                   = 3,
	ERivalBombNodeState__Failed                                                      = 4
};

/// Enum /Script/FSD.EEnemyHealthScaling
/// Size: 0x07
enum class EEnemyHealthScaling : uint8_t
{
	EEnemyHealthScaling__SmallEnemy                                                  = 0,
	EEnemyHealthScaling__LargeEnemy                                                  = 1,
	EEnemyHealthScaling__ExtraLargeEnemy                                             = 2,
	EEnemyHealthScaling__ExtraLargeEnemyB                                            = 4,
	EEnemyHealthScaling__ExtraLargeEnemyC                                            = 5,
	EEnemyHealthScaling__ExtraLargeEnemyD                                            = 6,
	EEnemyHealthScaling__NoScaling                                                   = 3
};

/// Enum /Script/FSD.EHealthbarType
/// Size: 0x03
enum class EHealthbarType : uint8_t
{
	EHealthbarType__None                                                             = 0,
	EHealthbarType__MainLife                                                         = 1,
	EHealthbarType__Shield                                                           = 2
};

/// Enum /Script/FSD.EMissionStatType
/// Size: 0x04
enum class EMissionStatType : uint8_t
{
	EMissionStatType__Float                                                          = 0,
	EMissionStatType__Integer                                                        = 1,
	EMissionStatType__Time                                                           = 2,
	EMissionStatType__Distance                                                       = 3
};

/// Enum /Script/FSD.EPawnAttitude
/// Size: 0x03
enum class EPawnAttitude : uint8_t
{
	EPawnAttitude__Friendly                                                          = 0,
	EPawnAttitude__Neutral                                                           = 1,
	EPawnAttitude__Hostile                                                           = 2
};

/// Enum /Script/FSD.EInfectionState
/// Size: 0x03
enum class EInfectionState : uint8_t
{
	EInfectionState__Normal                                                          = 0,
	EInfectionState__PartlyInfected                                                  = 1,
	EInfectionState__FullyInfected                                                   = 2
};

/// Enum /Script/FSD.ERefineryState
/// Size: 0x07
enum class ERefineryState : uint8_t
{
	ERefineryState__Landing                                                          = 0,
	ERefineryState__ConnectingPipes                                                  = 1,
	ERefineryState__PipesConnected                                                   = 2,
	ERefineryState__Refining                                                         = 3,
	ERefineryState__RefiningStalled                                                  = 4,
	ERefineryState__RefiningComplete                                                 = 5,
	ERefineryState__RocketLaunched                                                   = 6
};

/// Enum /Script/FSD.EFrozenBitsSize
/// Size: 0x05
enum class EFrozenBitsSize : uint8_t
{
	EFrozenBitsSize__Tiny                                                            = 0,
	EFrozenBitsSize__Small                                                           = 1,
	EFrozenBitsSize__Medium                                                          = 2,
	EFrozenBitsSize__Large                                                           = 3,
	EFrozenBitsSize__Huge                                                            = 4
};

/// Enum /Script/FSD.EPropHuntEndScreen
/// Size: 0x02
enum class EPropHuntEndScreen : uint8_t
{
	EPropHuntEndScreen__HuntersWin                                                   = 0,
	EPropHuntEndScreen__PropsWin                                                     = 1
};

/// Enum /Script/FSD.EPropHuntRole
/// Size: 0x03
enum class EPropHuntRole : uint8_t
{
	EPropHuntRole__PendingRole                                                       = 0,
	EPropHuntRole__Hunter                                                            = 1,
	EPropHuntRole__Prop                                                              = 2
};

/// Enum /Script/FSD.EDroppableOutpostState
/// Size: 0x05
enum class EDroppableOutpostState : uint8_t
{
	EDroppableOutpostState__WaitingToDrop                                            = 0,
	EDroppableOutpostState__Drilling                                                 = 1,
	EDroppableOutpostState__Landed                                                   = 2,
	EDroppableOutpostState__PrepTakeoff                                              = 3,
	EDroppableOutpostState__Departing                                                = 4
};

/// Enum /Script/FSD.EPipelineBuildState
/// Size: 0x04
enum class EPipelineBuildState : uint8_t
{
	EPipelineBuildState__NotStarted                                                  = 0,
	EPipelineBuildState__BeginBuilt                                                  = 1,
	EPipelineBuildState__Completed                                                   = 2,
	EPipelineBuildState__Broken                                                      = 3
};

/// Enum /Script/FSD.ETrackBuildPlacementState
/// Size: 0x03
enum class ETrackBuildPlacementState : uint8_t
{
	ETrackBuildPlacementState__NotBeingPlaced                                        = 0,
	ETrackBuildPlacementState__BeingPlaced                                           = 1,
	ETrackBuildPlacementState__Finished                                              = 2
};

/// Enum /Script/FSD.ESchematicState
/// Size: 0x03
enum class ESchematicState : uint8_t
{
	ESchematicState__NotOwned                                                        = 0,
	ESchematicState__Owned                                                           = 1,
	ESchematicState__OwnedBuilt                                                      = 2
};

/// Enum /Script/FSD.EShoutType
/// Size: 0x27
enum class EShoutType : uint8_t
{
	EShoutType__Attention                                                            = 0,
	EShoutType__Follow                                                               = 1,
	EShoutType__StandingDown                                                         = 2,
	EShoutType__Downed                                                               = 3,
	EShoutType__RequestRevive                                                        = 4,
	EShoutType__Revived                                                              = 5,
	EShoutType__Resupply                                                             = 6,
	EShoutType__FriendlyFire                                                         = 7,
	EShoutType__KillCry                                                              = 8,
	EShoutType__Dead                                                                 = 9,
	EShoutType__Cheating                                                             = 10,
	EShoutType__ResourceFull                                                         = 11,
	EShoutType__ResourceFullNoDonkey                                                 = 12,
	EShoutType__CallDonkey                                                           = 13,
	EShoutType__CallDonkey_NotInMission                                              = 14,
	EShoutType__Depositing                                                           = 15,
	EShoutType__DepositingNoDonkey                                                   = 16,
	EShoutType__OutOfAmmo                                                            = 17,
	EShoutType__Reloading                                                            = 18,
	EShoutType__CharacterSelected                                                    = 19,
	EShoutType__UpgradeBought                                                        = 20,
	EShoutType__WaitingInDropPod                                                     = 21,
	EShoutType__Carrying                                                             = 22,
	EShoutType__WaitingInEscapePod                                                   = 23,
	EShoutType__Salute                                                               = 24,
	EShoutType__Salute_Spacerig                                                      = 25,
	EShoutType__Drink                                                                = 26
};

/// Enum /Script/FSD.EAsyncLoadPriority
/// Size: 0x03
enum class EAsyncLoadPriority : uint8_t
{
	EAsyncLoadPriority__Normal                                                       = 0,
	EAsyncLoadPriority__High                                                         = 100,
	EAsyncLoadPriority__Low                                                          = 255
};

/// Enum /Script/FSD.EHUDVisibilityPresets
/// Size: 0x04
enum class EHUDVisibilityPresets : uint8_t
{
	EHUDVisibilityPresets__AllVisible                                                = 0,
	EHUDVisibilityPresets__Recommended                                               = 1,
	EHUDVisibilityPresets__Minimal                                                   = 2,
	EHUDVisibilityPresets__AllHidden                                                 = 3
};

/// Enum /Script/FSD.EHUDVisibilityGroups
/// Size: 0x16
enum class EHUDVisibilityGroups : uint8_t
{
	EHUDVisibilityGroups__OnScreenHelp                                               = 0,
	EHUDVisibilityGroups__EnemyHealth                                                = 1,
	EHUDVisibilityGroups__RadarAndDepth                                              = 2,
	EHUDVisibilityGroups__PlayerHealthShield                                         = 3,
	EHUDVisibilityGroups__PlayerNameClassIcon                                        = 4,
	EHUDVisibilityGroups__PlayerItems                                                = 5,
	EHUDVisibilityGroups__PlayerResources                                            = 6,
	EHUDVisibilityGroups__WeaponInfo                                                 = 7,
	EHUDVisibilityGroups__Grenades                                                   = 8,
	EHUDVisibilityGroups__FlashLight                                                 = 9,
	EHUDVisibilityGroups__Flares                                                     = 10,
	EHUDVisibilityGroups__Crosshair                                                  = 11,
	EHUDVisibilityGroups__Objectives                                                 = 12,
	EHUDVisibilityGroups__TeamDisplay                                                = 13,
	EHUDVisibilityGroups__SentryGunDisplay                                           = 14,
	EHUDVisibilityGroups__VersionNumber                                              = 15
};

/// Enum /Script/FSD.EMediaPlayerState
/// Size: 0x03
enum class EMediaPlayerState : uint8_t
{
	EMediaPlayerState__Stopped                                                       = 0,
	EMediaPlayerState__Opening                                                       = 1,
	EMediaPlayerState__Playing                                                       = 2
};

/// Enum /Script/FSD.EAmmoWeaponState
/// Size: 0x05
enum class EAmmoWeaponState : uint8_t
{
	EAmmoWeaponState__Equipping                                                      = 0,
	EAmmoWeaponState__Ready                                                          = 1,
	EAmmoWeaponState__Cycling                                                        = 2,
	EAmmoWeaponState__Reloading                                                      = 3,
	EAmmoWeaponState__BurstCycling                                                   = 4
};

/// Enum /Script/FSD.ECrossbowSwitchState
/// Size: 0x03
enum class ECrossbowSwitchState : uint32_t
{
	ECrossbowSwitchState__Normal                                                     = 0,
	ECrossbowSwitchState__Cancelled                                                  = 1,
	ECrossbowSwitchState__DuringReload                                               = 2
};

/// Enum /Script/FSD.EProjectileSwitchCriteria
/// Size: 0x05
enum class EProjectileSwitchCriteria : uint8_t
{
	EProjectileSwitchCriteria__None                                                  = 0,
	EProjectileSwitchCriteria__CharagedProjectile                                    = 1,
	EProjectileSwitchCriteria__HeatAbove                                             = 2,
	EProjectileSwitchCriteria__HeatBelow                                             = 3,
	EProjectileSwitchCriteria__CycleButtonSecondsHeld                                = 4
};

/// Enum /Script/FSD.EGooGunFireMode
/// Size: 0x03
enum class EGooGunFireMode : uint8_t
{
	EGooGunFireMode__Normal                                                          = 0,
	EGooGunFireMode__Charge                                                          = 1,
	EGooGunFireMode__Burst                                                           = 2
};

/// Enum /Script/FSD.EThrownGrenadeItemState
/// Size: 0x03
enum class EThrownGrenadeItemState : uint32_t
{
	EThrownGrenadeItemState__NotEquipped                                             = 0,
	EThrownGrenadeItemState__Cooking                                                 = 1,
	EThrownGrenadeItemState__Throwing                                                = 2
};

/// Enum /Script/FSD.EMicroMissileLauncherFireMode
/// Size: 0x03
enum class EMicroMissileLauncherFireMode : uint8_t
{
	EMicroMissileLauncherFireMode__Normal                                            = 0,
	EMicroMissileLauncherFireMode__Charge                                            = 1,
	EMicroMissileLauncherFireMode__Buck                                              = 2
};

/// Enum /Script/FSD.EOnProjectileImpactBehaviourEnum
/// Size: 0x04
enum class EOnProjectileImpactBehaviourEnum : uint32_t
{
	EOnProjectileImpactBehaviourEnum__CallOnPredict                                  = 0,
	EOnProjectileImpactBehaviourEnum__CallOnConfirmed                                = 1,
	EOnProjectileImpactBehaviourEnum__CallOnPredictAndConfirmed                      = 2,
	EOnProjectileImpactBehaviourEnum__ClientAuthoritative                            = 3
};

/// Enum /Script/FSD.ELineRotation
/// Size: 0x04
enum class ELineRotation : uint8_t
{
	ELineRotation__None                                                              = 0,
	ELineRotation__Yaw                                                               = 1,
	ELineRotation__Pitch                                                             = 2,
	ELineRotation__Roll                                                              = 3
};

/// Enum /Script/FSD.EImpactDecalSize
/// Size: 0x04
enum class EImpactDecalSize : uint8_t
{
	EImpactDecalSize__Small                                                          = 0,
	EImpactDecalSize__Medium                                                         = 1,
	EImpactDecalSize__Large                                                          = 2,
	EImpactDecalSize__None                                                           = 3
};

/// Enum /Script/FSD.ERecallableActorState
/// Size: 0x06
enum class ERecallableActorState : uint8_t
{
	ERecallableActorState__Idle                                                      = 0,
	ERecallableActorState__RelocateRequested                                         = 1,
	ERecallableActorState__Relocating                                                = 2,
	ERecallableActorState__ReturnRequested                                           = 3,
	ERecallableActorState__Returning                                                 = 4,
	ERecallableActorState__Home                                                      = 5
};

/// Enum /Script/FSD.ERedeployableSentryGunState
/// Size: 0x04
enum class ERedeployableSentryGunState : uint8_t
{
	ERedeployableSentryGunState__Deploying                                           = 0,
	ERedeployableSentryGunState__Deployed                                            = 1,
	ERedeployableSentryGunState__Dismantling                                         = 2,
	ERedeployableSentryGunState__Dismantled                                          = 3
};

/// Enum /Script/FSD.EItemSkinType
/// Size: 0x02
enum class EItemSkinType : uint8_t
{
	EItemSkinType__PaintJob                                                          = 0,
	EItemSkinType__Framework                                                         = 1
};

/// Enum /Script/FSD.EFriendOnlineStatusEnum
/// Size: 0x03
enum class EFriendOnlineStatusEnum : uint8_t
{
	EFriendOnlineStatusEnum__Online                                                  = 0,
	EFriendOnlineStatusEnum__Offline                                                 = 1,
	EFriendOnlineStatusEnum__Away                                                    = 2
};

/// Enum /Script/FSD.EBlueprintablePrivilegeResults
/// Size: 0x12
enum class EBlueprintablePrivilegeResults : uint8_t
{
	EBlueprintablePrivilegeResults__NoFailures                                       = 0,
	EBlueprintablePrivilegeResults__RequiredPatchAvailable                           = 1,
	EBlueprintablePrivilegeResults__RequiredSystemUpdate                             = 2,
	EBlueprintablePrivilegeResults__AgeRestrictionFailure                            = 3,
	EBlueprintablePrivilegeResults__AccountTypeFailure                               = 4,
	EBlueprintablePrivilegeResults__UserNotFound                                     = 5,
	EBlueprintablePrivilegeResults__UserNotLoggedIn                                  = 6,
	EBlueprintablePrivilegeResults__ChatRestriction                                  = 7,
	EBlueprintablePrivilegeResults__UGCRestriction                                   = 8,
	EBlueprintablePrivilegeResults__GenericFailure                                   = 9,
	EBlueprintablePrivilegeResults__OnlinePlayRestricted                             = 10,
	EBlueprintablePrivilegeResults__NetworkConnectionUnavailable                     = 11
};

/// Enum /Script/FSD.EBlueprintableUserPrivileges
/// Size: 0x05
enum class EBlueprintableUserPrivileges : uint8_t
{
	EBlueprintableUserPrivileges__CanPlay                                            = 0,
	EBlueprintableUserPrivileges__CanPlayOnline                                      = 1,
	EBlueprintableUserPrivileges__CanCommunicateOnline                               = 2,
	EBlueprintableUserPrivileges__CanUseUserGeneratedContent                         = 3,
	EBlueprintableUserPrivileges__CanUserCrossPlay                                   = 4
};

/// Enum /Script/FSD.EActivityType
/// Size: 0x04
enum class EActivityType : uint8_t
{
	EActivityType__Mission                                                           = 0,
	EActivityType__Assignment                                                        = 1,
	EActivityType__Tutorial                                                          = 2,
	EActivityType__None                                                              = 3
};

/// Enum /Script/FSD.EMeshAttachType
/// Size: 0x02
enum class EMeshAttachType : uint8_t
{
	ECharacterMesh                                                                   = 0,
	ECamera                                                                          = 1
};

/// Enum /Script/FSD.EAfflictionSocket
/// Size: 0x03
enum class EAfflictionSocket : uint8_t
{
	EAfflictionSocket__CenterMass                                                    = 0,
	EAfflictionSocket__Feet                                                          = 1,
	EAfflictionSocket__Camera                                                        = 2
};

/// Enum /Script/FSD.ECreatureSize
/// Size: 0x05
enum class ECreatureSize : uint32_t
{
	ECreatureSize__Tiny                                                              = 0,
	ECreatureSize__Small                                                             = 1,
	ECreatureSize__Medium                                                            = 2,
	ECreatureSize__Large                                                             = 3,
	ECreatureSize__Huge                                                              = 4
};

/// Enum /Script/FSD.EFrozenAfflictionType
/// Size: 0x02
enum class EFrozenAfflictionType : uint8_t
{
	EFrozenAfflictionType__Frozen                                                    = 0,
	EFrozenAfflictionType__Infected                                                  = 1
};

/// Enum /Script/FSD.EFlyingBugDeathAnimationCategory
/// Size: 0x02
enum class EFlyingBugDeathAnimationCategory : uint8_t
{
	EFlyingBugDeathAnimationCategory__NoAnimation                                    = 0,
	EFlyingBugDeathAnimationCategory__IdleOnDeath                                    = 1
};

/// Enum /Script/FSD.EAsyncPersistence
/// Size: 0x03
enum class EAsyncPersistence : uint8_t
{
	EAsyncPersistence__Manual                                                        = 0,
	EAsyncPersistence__Level                                                         = 1,
	EAsyncPersistence__Permanent                                                     = 2
};

/// Enum /Script/FSD.EMaterialChoice
/// Size: 0x04
enum class EMaterialChoice : uint8_t
{
	EMaterialChoice__HairColor                                                       = 0,
	EMaterialChoice__TransparentHairColor                                            = 1,
	EMaterialChoice__ArmorColor                                                      = 2,
	EMaterialChoice__MaterialOverride                                                = 3
};

/// Enum /Script/FSD.EBhaBarnableAnimationState
/// Size: 0x02
enum class EBhaBarnableAnimationState : uint8_t
{
	EBhaBarnableAnimationState__Idle                                                 = 0,
	EBhaBarnableAnimationState__Dead                                                 = 1
};

/// Enum /Script/FSD.EAbilityIndex
/// Size: 0x03
enum class EAbilityIndex : uint8_t
{
	EAbilityIndex__ENone                                                             = 0,
	EAbilityIndex__EPrimary                                                          = 1,
	EAbilityIndex__ESecondary                                                        = 2
};

/// Enum /Script/FSD.EBoomerangState
/// Size: 0x04
enum class EBoomerangState : uint8_t
{
	EBoomerangState__None                                                            = 0,
	EBoomerangState__Curving                                                         = 1,
	EBoomerangState__GoingBack                                                       = 2,
	EBoomerangState__Targeting                                                       = 3
};

/// Enum /Script/FSD.EPlatformRestriction
/// Size: 0x06
enum class EPlatformRestriction : uint8_t
{
	EPlatformRestriction__Editor                                                     = 0,
	EPlatformRestriction__Steam                                                      = 1,
	EPlatformRestriction__Oddish                                                     = 2,
	EPlatformRestriction__UniversalWindowsPlatform                                   = 3,
	EPlatformRestriction__XBoxOne                                                    = 4,
	EPlatformRestriction__PS4                                                        = 5
};

/// Enum /Script/FSD.EBuildTypeRestriction
/// Size: 0x02
enum class EBuildTypeRestriction : uint8_t
{
	EBuildTypeRestriction__Development                                               = 0,
	EBuildTypeRestriction__Shipping                                                  = 1
};

/// Enum /Script/FSD.ECampaignMutators
/// Size: 0x03
enum class ECampaignMutators : uint32_t
{
	ECampaignMutators__NotAllowed                                                    = 0,
	ECampaignMutators__Allowed                                                       = 1,
	ECampaignMutators__Preffered                                                     = 2
};

/// Enum /Script/FSD.ECaretakerSpawnType
/// Size: 0x05
enum class ECaretakerSpawnType : uint8_t
{
	ECaretakerSpawnType__None                                                        = 0,
	ECaretakerSpawnType__Drones                                                      = 1,
	ECaretakerSpawnType__Bombs                                                       = 2,
	ECaretakerSpawnType__Shredders                                                   = 3,
	ECaretakerSpawnType__Turrets                                                     = 4
};

/// Enum /Script/FSD.EFacilityEye
/// Size: 0x04
enum class EFacilityEye : uint8_t
{
	EFacilityEye__EForward                                                           = 0,
	EFacilityEye__EBack                                                              = 1,
	EFacilityEye__ELeft                                                              = 2,
	EFacilityEye__ERight                                                             = 3
};

/// Enum /Script/FSD.ECellCategory
/// Size: 0x02
enum class ECellCategory : uint8_t
{
	ECellCategory__Cave                                                              = 0,
	ECellCategory__Tunnel                                                            = 1
};

/// Enum /Script/FSD.ECaveLeechState
/// Size: 0x07
enum class ECaveLeechState : uint8_t
{
	ECaveLeechState__Idle                                                            = 0,
	ECaveLeechState__Tracking                                                        = 1,
	ECaveLeechState__Pulling                                                         = 2,
	ECaveLeechState__Retracting                                                      = 3,
	ECaveLeechState__Dying                                                           = 4,
	ECaveLeechState__Dead                                                            = 5,
	ECaveLeechState__Frozen                                                          = 6
};

/// Enum /Script/FSD.ECustomUsableType
/// Size: 0x03
enum class ECustomUsableType : uint8_t
{
	ECustomUsableType__ClearOnFrameEnd                                               = 0,
	ECustomUsableType__ClearOnUseReleased                                            = 1,
	ECustomUsableType__ClearManually                                                 = 2
};

/// Enum /Script/FSD.EExampleEnum
/// Size: 0x02
enum class EExampleEnum : uint8_t
{
	EExampleEnum__FirstName                                                          = 0,
	EExampleEnum__SecondName                                                         = 1
};

/// Enum /Script/FSD.ECoilgunTraceEffect
/// Size: 0x03
enum class ECoilgunTraceEffect : uint8_t
{
	ECoilgunTraceEffect__EPrimary                                                    = 0,
	ECoilgunTraceEffect__EDamage                                                     = 1,
	ECoilgunTraceEffect__EFear                                                       = 2
};

/// Enum /Script/FSD.ECommunityGoalIndex
/// Size: 0x14
enum class ECommunityGoalIndex : uint8_t
{
	ECommunityGoalIndex__KillBroodNexus                                              = 0,
	ECommunityGoalIndex__KillBulkDetonators                                          = 1,
	ECommunityGoalIndex__KillCaveLeeches                                             = 2,
	ECommunityGoalIndex__KillJellyBreeders                                           = 3,
	ECommunityGoalIndex__KillPretorians                                              = 4,
	ECommunityGoalIndex__KillShellbacks                                              = 5,
	ECommunityGoalIndex__KillSpitballers                                             = 6,
	ECommunityGoalIndex__CollectBittergem                                            = 7,
	ECommunityGoalIndex__CollectCompressedGold                                       = 8,
	ECommunityGoalIndex__CollectGold                                                 = 9,
	ECommunityGoalIndex__CollectCraftingMaterials                                    = 10,
	ECommunityGoalIndex__GainXP                                                      = 11,
	ECommunityGoalIndex__TestGoal                                                    = 12,
	ECommunityGoalIndex__Count                                                       = 13
};

/// Enum /Script/FSD.ECommunityGoalTier
/// Size: 0x03
enum class ECommunityGoalTier : uint8_t
{
	ECommunityGoalTier__Bronze                                                       = 0,
	ECommunityGoalTier__Silver                                                       = 1,
	ECommunityGoalTier__Gold                                                         = 2
};

/// Enum /Script/FSD.ECommunityGoalType
/// Size: 0x04
enum class ECommunityGoalType : uint8_t
{
	ECommunityGoalType__Float                                                        = 0,
	ECommunityGoalType__Integer                                                      = 1,
	ECommunityGoalType__Time                                                         = 2,
	ECommunityGoalType__Distance                                                     = 3
};

/// Enum /Script/FSD.ECommunityUIState
/// Size: 0x06
enum class ECommunityUIState : uint8_t
{
	ECommunityUIState__Loading                                                       = 0,
	ECommunityUIState__SelectFaction                                                 = 1,
	ECommunityUIState__Progress                                                      = 2,
	ECommunityUIState__Recruitment                                                   = 3,
	ECommunityUIState__Reward                                                        = 4,
	ECommunityUIState__Invalid                                                       = 5
};

/// Enum /Script/FSD.ERobotState
/// Size: 0x03
enum class ERobotState : uint8_t
{
	ERobotState__Enemy                                                               = 0,
	ERobotState__Friendly                                                            = 1,
	ERobotState__PoweredDown                                                         = 2
};

/// Enum /Script/FSD.ECrossbowStuckType
/// Size: 0x04
enum class ECrossbowStuckType : uint8_t
{
	ECrossbowStuckType__Default                                                      = 0,
	ECrossbowStuckType__Electric                                                     = 1,
	ECrossbowStuckType__Chemical                                                     = 2,
	ECrossbowStuckType__Banshee                                                      = 3
};

/// Enum /Script/FSD.EKeyBindingAxis
/// Size: 0x03
enum class EKeyBindingAxis : uint8_t
{
	EKeyBindingAxis__None                                                            = 0,
	EKeyBindingAxis__Positive                                                        = 1,
	EKeyBindingAxis__Negative                                                        = 2
};

/// Enum /Script/FSD.EDealType
/// Size: 0x02
enum class EDealType : uint8_t
{
	EDealType__Buy                                                                   = 0,
	EDealType__Sell                                                                  = 1
};

/// Enum /Script/FSD.EPlasmaCarbineConditions
/// Size: 0x01
enum class EPlasmaCarbineConditions : uint8_t
{
	EPlasmaCarbineConditions__ShieldRemovedOnReload                                  = 0
};

/// Enum /Script/FSD.EBoltActionWeaponConditions
/// Size: 0x02
enum class EBoltActionWeaponConditions : uint8_t
{
	EBoltActionWeaponConditions__WasAimedShot                                        = 0,
	EBoltActionWeaponConditions__WasNormalShot                                       = 1
};

/// Enum /Script/FSD.EDirectDamageConditionEnum
/// Size: 0x02
enum class EDirectDamageConditionEnum : uint8_t
{
	EDirectDamageConditionEnum__Direct                                               = 0,
	EDirectDamageConditionEnum__Radial                                               = 1
};

/// Enum /Script/FSD.EImpulseDirectionSource
/// Size: 0x05
enum class EImpulseDirectionSource : uint8_t
{
	EImpulseDirectionSource__SourceForward                                           = 0,
	EImpulseDirectionSource__SourceToTarget                                          = 1,
	EImpulseDirectionSource__PlayerToTarget                                          = 2,
	EImpulseDirectionSource__TargetUp                                                = 3,
	EImpulseDirectionSource__TargetRandomOnPlane                                     = 4
};

/// Enum /Script/FSD.EDamageUpgrade
/// Size: 0x13
enum class EDamageUpgrade : uint8_t
{
	EDamageUpgrade__Damage                                                           = 0,
	EDamageUpgrade__WeakpointDamageMultiplier                                        = 1,
	EDamageUpgrade__StaggerChance                                                    = 2,
	EDamageUpgrade__StaggerDuration                                                  = 3,
	EDamageUpgrade__RadialDamage                                                     = 4,
	EDamageUpgrade__RadialRange                                                      = 5,
	EDamageUpgrade__ArmorDamageMultiplier                                            = 6,
	EDamageUpgrade__FearFactor                                                       = 7,
	EDamageUpgrade__RadialRangeMultiplier                                            = 8,
	EDamageUpgrade__StaggerOnWeakpointOnly                                           = 9,
	EDamageUpgrade__FriendlyFireModifier                                             = 10,
	EDamageUpgrade__ShattersArmor                                                    = 11,
	EDamageUpgrade__ArmorPenetration                                                 = 12
};

/// Enum /Script/FSD.EDamageComponentType
/// Size: 0x06
enum class EDamageComponentType : uint8_t
{
	EDamageComponentType__Primary                                                    = 0,
	EDamageComponentType__Secondary                                                  = 1,
	EDamageComponentType__Tertiary                                                   = 2,
	EDamageComponentType__Quaternary                                                 = 3,
	EDamageComponentType__Quinary                                                    = 4,
	EDamageComponentType__Any                                                        = 5
};

/// Enum /Script/FSD.EDashPointsGenerationMode
/// Size: 0x02
enum class EDashPointsGenerationMode : uint8_t
{
	EDashPointsGenerationMode__Surround                                              = 0,
	EDashPointsGenerationMode__Forward                                               = 1
};

/// Enum /Script/FSD.EDeathType
/// Size: 0x12
enum class EDeathType : uint8_t
{
	EDeathType__Alive                                                                = 0,
	EDeathType__Normal                                                               = 1,
	EDeathType__Weakpoint                                                            = 2,
	EDeathType__Burned                                                               = 3,
	EDeathType__Frozen                                                               = 4,
	EDeathType__Exploded                                                             = 5,
	EDeathType__SpawnEnemies                                                         = 6,
	EDeathType__Gibbed                                                               = 7,
	EDeathType__Corrosive                                                            = 8,
	EDeathType__Cook                                                                 = 9,
	EDeathType__ChemicalExplosion                                                    = 10,
	EDeathType__PlasmaExplosion                                                      = 11
};

/// Enum /Script/FSD.EDebrisOrientation
/// Size: 0x04
enum class EDebrisOrientation : uint8_t
{
	EDebrisOrientation__Random                                                       = 0,
	EDebrisOrientation__RandomXY                                                     = 1,
	EDebrisOrientation__AlignToSurfaceNormal                                         = 2,
	EDebrisOrientation__Fixed                                                        = 3
};

/// Enum /Script/FSD.ESpecialDebrisType
/// Size: 0x03
enum class ESpecialDebrisType : uint8_t
{
	ESpecialDebrisType__None                                                         = 0,
	ESpecialDebrisType__Plague                                                       = 1,
	ESpecialDebrisType__LitPlague                                                    = 2
};

/// Enum /Script/FSD.EDebrisMeshShadows
/// Size: 0x03
enum class EDebrisMeshShadows : uint8_t
{
	EDebrisMeshShadows__Never                                                        = 0,
	EDebrisMeshShadows__High                                                         = 1,
	EDebrisMeshShadows__Always                                                       = 2
};

/// Enum /Script/FSD.EDebrisMeshCollisionProfile
/// Size: 0x03
enum class EDebrisMeshCollisionProfile : uint8_t
{
	EDebrisMeshCollisionProfile__NoCollision                                         = 0,
	EDebrisMeshCollisionProfile__HitOnly                                             = 1,
	EDebrisMeshCollisionProfile__HitAndCollide                                       = 2
};

/// Enum /Script/FSD.EDebrisColliderType
/// Size: 0x04
enum class EDebrisColliderType : uint8_t
{
	EDebrisColliderType__Object                                                      = 0,
	EDebrisColliderType__AirParticles                                                = 1,
	EDebrisColliderType__ObjectB                                                     = 2,
	EDebrisColliderType__ObjectC                                                     = 3
};

/// Enum /Script/FSD.EDebrisCarvedType
/// Size: 0x04
enum class EDebrisCarvedType : uint8_t
{
	EDebrisCarvedType__Large                                                         = 0,
	EDebrisCarvedType__Small                                                         = 1,
	EDebrisCarvedType__LevelGeneration                                               = 2,
	EDebrisCarvedType__Resources                                                     = 3
};

/// Enum /Script/FSD.EDebrisItemPass
/// Size: 0x03
enum class EDebrisItemPass : uint8_t
{
	EDebrisItemPass__PrePlacement                                                    = 0,
	EDebrisItemPass__Plague                                                          = 1,
	EDebrisItemPass__Main                                                            = 2
};

/// Enum /Script/FSD.EDecalImportance
/// Size: 0x03
enum class EDecalImportance : uint8_t
{
	EDecalImportance__High                                                           = 0,
	EDecalImportance__Normal                                                         = 1,
	EDecalImportance__Low                                                            = 2
};

/// Enum /Script/FSD.ELandscapeCellFilter
/// Size: 0x09
enum class ELandscapeCellFilter : uint8_t
{
	ELandscapeCellFilter__Any                                                        = 0,
	ELandscapeCellFilter__Empty                                                      = 1,
	ELandscapeCellFilter__Filled                                                     = 2,
	ELandscapeCellFilter__Diggable                                                   = 3,
	ELandscapeCellFilter__NotDiggable                                                = 4,
	ELandscapeCellFilter__Collidable                                                 = 5,
	ELandscapeCellFilter__NotCollidable                                              = 6,
	ELandscapeCellFilter__Rubble                                                     = 7,
	ELandscapeCellFilter__NotRubble                                                  = 8
};

/// Enum /Script/FSD.EOffsetFrom
/// Size: 0x03
enum class EOffsetFrom : uint8_t
{
	EOffsetFrom__None                                                                = 0,
	EOffsetFrom__Floor                                                               = 1,
	EOffsetFrom__Ceiling                                                             = 2
};

/// Enum /Script/FSD.EDeepMovementMode
/// Size: 0x04
enum class EDeepMovementMode : uint8_t
{
	EDeepMovementMode__Normal                                                        = 0,
	EDeepMovementMode__Flee                                                          = 1,
	EDeepMovementMode__Fly                                                           = 2,
	EDeepMovementMode__BackOff                                                       = 3
};

/// Enum /Script/FSD.EDeepScanState
/// Size: 0x06
enum class EDeepScanState : uint8_t
{
	EDeepScanState__FindItems                                                        = 0,
	EDeepScanState__WaitForElevator                                                  = 1,
	EDeepScanState__StartElevator                                                    = 2,
	EDeepScanState__RideElevator                                                     = 3,
	EDeepScanState__GatherResources                                                  = 4,
	EDeepScanState__ReturnToPod                                                      = 5
};

/// Enum /Script/FSD.EDefendPointState
/// Size: 0x04
enum class EDefendPointState : uint8_t
{
	EDefendPointState__Idle                                                          = 0,
	EDefendPointState__Started                                                       = 1,
	EDefendPointState__Completed                                                     = 2,
	EDefendPointState__Failed                                                        = 3
};

/// Enum /Script/FSD.EDialogRestriction
/// Size: 0x03
enum class EDialogRestriction : uint8_t
{
	EDialogRestriction__None                                                         = 0,
	EDialogRestriction__SinglePlayerOnly                                             = 1,
	EDialogRestriction__MultiPlayerOnly                                              = 2
};

/// Enum /Script/FSD.EVeteranScaling
/// Size: 0x02
enum class EVeteranScaling : uint8_t
{
	EVeteranScaling__NormalEnemy                                                     = 0,
	EVeteranScaling__LargeEnemy                                                      = 1
};

/// Enum /Script/FSD.EEnemySignificance
/// Size: 0x04
enum class EEnemySignificance : uint8_t
{
	EEnemySignificance__Swarmer                                                      = 0,
	EEnemySignificance__Normal                                                       = 1,
	EEnemySignificance__Critical                                                     = 2,
	EEnemySignificance__Critter                                                      = 3
};

/// Enum /Script/FSD.EDiscordBiomeType
/// Size: 0x12
enum class EDiscordBiomeType : uint8_t
{
	EDiscordBiomeType__CrystallineCaverns                                            = 0,
	EDiscordBiomeType__FungusBogs                                                    = 1,
	EDiscordBiomeType__GlacialStrata                                                 = 2,
	EDiscordBiomeType__DenseBiozone                                                  = 3,
	EDiscordBiomeType__MagmaCore                                                     = 4,
	EDiscordBiomeType__Radioactive                                                   = 5,
	EDiscordBiomeType__SaltPits                                                      = 6,
	EDiscordBiomeType__Sandblasted                                                   = 7,
	EDiscordBiomeType__CausticMire                                                   = 8,
	EDiscordBiomeType__AzureWeald                                                    = 9,
	EDiscordBiomeType__HollowBough                                                   = 10,
	EDiscordBiomeType__Spacerig                                                      = 11
};

/// Enum /Script/FSD.EDiscordMissionType
/// Size: 0x11
enum class EDiscordMissionType : uint8_t
{
	EDiscordMissionType__MiningExpedition                                            = 0,
	EDiscordMissionType__EggHunt                                                     = 1,
	EDiscordMissionType__Escort                                                      = 2,
	EDiscordMissionType__Elimination                                                 = 3,
	EDiscordMissionType__PointExtraction                                             = 4,
	EDiscordMissionType__Salvage                                                     = 5,
	EDiscordMissionType__Refinery                                                    = 6,
	EDiscordMissionType__Sabotage                                                    = 7,
	EDiscordMissionType__Deepscan                                                    = 8,
	EDiscordMissionType__Prophunt                                                    = 9,
	EDiscordMissionType__None                                                        = 10
};

/// Enum /Script/FSD.EDoubleDrillState
/// Size: 0x05
enum class EDoubleDrillState : uint8_t
{
	EDoubleDrillState__Equipping                                                     = 0,
	EDoubleDrillState__Idle                                                          = 1,
	EDoubleDrillState__Mining                                                        = 2,
	EDoubleDrillState__Overheated                                                    = 3,
	EDoubleDrillState__OutOfFuel                                                     = 4
};

/// Enum /Script/FSD.EDrillevatorEngineState
/// Size: 0x07
enum class EDrillevatorEngineState : uint8_t
{
	EDrillevatorEngineState__Off                                                     = 0,
	EDrillevatorEngineState__On                                                      = 1,
	EDrillevatorEngineState__Running                                                 = 2,
	EDrillevatorEngineState__Idle                                                    = 3,
	EDrillevatorEngineState__Halted                                                  = 4,
	EDrillevatorEngineState__FreeFalling                                             = 5,
	EDrillevatorEngineState__RunningNoDrain                                          = 6
};

/// Enum /Script/FSD.EDrillevatorState
/// Size: 0x08
enum class EDrillevatorState : uint8_t
{
	EDrillevatorState__Deactivated                                                   = 0,
	EDrillevatorState__Startup                                                       = 1,
	EDrillevatorState__HardRockDrilling                                              = 2,
	EDrillevatorState__BrokenDown                                                    = 3,
	EDrillevatorState__Finished                                                      = 4,
	EDrillevatorState__CrackingGeode                                                 = 5,
	EDrillevatorState__EnteringGeode                                                 = 6,
	EDrillevatorState__FreeFalling                                                   = 7
};

/// Enum /Script/FSD.EBoscoAbillityTargetPreference
/// Size: 0x05
enum class EBoscoAbillityTargetPreference : uint8_t
{
	EBoscoAbillityTargetPreference__Self                                             = 0,
	EBoscoAbillityTargetPreference__SelectedTarget                                   = 1,
	EBoscoAbillityTargetPreference__ClosestPlayer                                    = 2,
	EBoscoAbillityTargetPreference__ClosestEnemy                                     = 3,
	EBoscoAbillityTargetPreference__TargetLocation                                   = 4
};

/// Enum /Script/FSD.EDroneActions
/// Size: 0x05
enum class EDroneActions : uint8_t
{
	EDroneActions__Wandering                                                         = 0,
	EDroneActions__Mining                                                            = 1,
	EDroneActions__Fighting                                                          = 2,
	EDroneActions__Lighting                                                          = 3,
	EDroneActions__Reviving                                                          = 4
};

/// Enum /Script/FSD.EDynamicReverbSetting
/// Size: 0x04
enum class EDynamicReverbSetting : uint8_t
{
	EDynamicReverbSetting__None                                                      = 0,
	EDynamicReverbSetting__Small                                                     = 1,
	EDynamicReverbSetting__Medium                                                    = 2,
	EDynamicReverbSetting__Large                                                     = 3
};

/// Enum /Script/FSD.EElectroBeamState
/// Size: 0x03
enum class EElectroBeamState : uint32_t
{
	EElectroBeamState__NotStarted                                                    = 0,
	EElectroBeamState__Recalculating                                                 = 1,
	EElectroBeamState__Stopped                                                       = 2
};

/// Enum /Script/FSD.EEnemyControlState
/// Size: 0x05
enum class EEnemyControlState : uint8_t
{
	EEnemyControlState__Connecting                                                   = 0,
	EEnemyControlState__Connected                                                    = 1,
	EEnemyControlState__ThrowingOff                                                  = 2,
	EEnemyControlState__Disconnecting                                                = 3,
	EEnemyControlState__Disconneced                                                  = 4
};

/// Enum /Script/FSD.EEnemyDescriptorCheatClass
/// Size: 0x06
enum class EEnemyDescriptorCheatClass : uint8_t
{
	EEnemyDescriptorCheatClass__Hidden                                               = 0,
	EEnemyDescriptorCheatClass__Basic                                                = 1,
	EEnemyDescriptorCheatClass__Advanced                                             = 2,
	EEnemyDescriptorCheatClass__Mactera                                              = 3,
	EEnemyDescriptorCheatClass__Specials                                             = 4,
	EEnemyDescriptorCheatClass__Boss                                                 = 5
};

/// Enum /Script/FSD.EEnemyType
/// Size: 0x04
enum class EEnemyType : uint8_t
{
	EEnemyType__Ground                                                               = 0,
	EEnemyType__Flying                                                               = 1,
	EEnemyType__GroundAndFlying                                                      = 2,
	EEnemyType__Stationary                                                           = 3
};

/// Enum /Script/FSD.EEnemyFamily
/// Size: 0x14
enum class EEnemyFamily : uint8_t
{
	EEnemyFamily__Glyphid                                                            = 0,
	EEnemyFamily__Mactera                                                            = 1,
	EEnemyFamily__Naedocyte                                                          = 2,
	EEnemyFamily__Qronar                                                             = 3,
	EEnemyFamily__Xynarch                                                            = 4,
	EEnemyFamily__Nayaka                                                             = 5,
	EEnemyFamily__Deeptora                                                           = 6,
	EEnemyFamily__Korlok                                                             = 7,
	EEnemyFamily__Automaton                                                          = 8,
	EEnemyFamily__Unknown                                                            = 9,
	EEnemyFamily__RivalTech                                                          = 10,
	EEnemyFamily__Lithophage                                                         = 11,
	EEnemyFamily__Infector                                                           = 12,
	EEnemyFamily__CoreSpawn                                                          = 13
};

/// Enum /Script/FSD.EOmmoranStage
/// Size: 0x05
enum class EOmmoranStage : uint8_t
{
	EOmmoranStage__StartEnemyWave                                                    = 0,
	EOmmoranStage__BigEnemyWave                                                      = 1,
	EOmmoranStage__FlyingRocks                                                       = 2,
	EOmmoranStage__LazerClaws                                                        = 3,
	EOmmoranStage__CrystalTraps                                                      = 4
};

/// Enum /Script/FSD.EEscortExtractorState
/// Size: 0x03
enum class EEscortExtractorState : uint8_t
{
	EEscortExtractorState__ReadyToGrab                                               = 0,
	EEscortExtractorState__Taken                                                     = 1,
	EEscortExtractorState__Full                                                      = 2
};

/// Enum /Script/FSD.EEscortMissionState
/// Size: 0x08
enum class EEscortMissionState : uint8_t
{
	EEscortMissionState__Stationary                                                  = 0,
	EEscortMissionState__Moving                                                      = 1,
	EEscortMissionState__WaitingForFuel                                              = 2,
	EEscortMissionState__FinalEvent                                                  = 3,
	EEscortMissionState__Finished                                                    = 4,
	EEscortMissionState__ShellCracked                                                = 5,
	EEscortMissionState__VehicleDead                                                 = 6,
	EEscortMissionState__InGarage                                                    = 7
};

/// Enum /Script/FSD.EExtractorState
/// Size: 0x05
enum class EExtractorState : uint8_t
{
	EExtractorState__Attached                                                        = 0,
	EExtractorState__OnGround                                                        = 1,
	EExtractorState__Equipping                                                       = 2,
	EExtractorState__Idle                                                            = 3,
	EExtractorState__Mining                                                          = 4
};

/// Enum /Script/FSD.EFacilityTentacleState
/// Size: 0x04
enum class EFacilityTentacleState : uint8_t
{
	EFacilityTentacleState__Idle                                                     = 0,
	EFacilityTentacleState__HasTarget                                                = 1,
	EFacilityTentacleState__Melee                                                    = 2,
	EFacilityTentacleState__Ranged                                                   = 3
};

/// Enum /Script/FSD.EIndicatorMode
/// Size: 0x03
enum class EIndicatorMode : uint8_t
{
	EIndicatorMode__EConstant                                                        = 0,
	EIndicatorMode__EFlashing                                                        = 1,
	EIndicatorMode__EOff                                                             = 2
};

/// Enum /Script/FSD.EFSDAchievementType
/// Size: 0x04
enum class EFSDAchievementType : uint8_t
{
	EFSDAchievementType__NoStatUsed                                                  = 0,
	EFSDAchievementType__IncrementStatPerCall                                        = 1,
	EFSDAchievementType__SetStatIfHighscore                                          = 2,
	EFSDAchievementType__ForceNewStatEachCall                                        = 3
};

/// Enum /Script/FSD.ETargetStateDamageBonusType
/// Size: 0x04
enum class ETargetStateDamageBonusType : uint8_t
{
	ETargetStateDamageBonusType__Frozen                                              = 0,
	ETargetStateDamageBonusType__OnFire                                              = 1,
	ETargetStateDamageBonusType__Fleeing                                             = 2,
	ETargetStateDamageBonusType__Staggered                                           = 3
};

/// Enum /Script/FSD.EPauseReason
/// Size: 0x03
enum class EPauseReason : uint8_t
{
	EPauseReason__Invalid                                                            = 0,
	EPauseReason__MenuActive                                                         = 1,
	EPauseReason__ReconnectController                                                = 2
};

/// Enum /Script/FSD.ESaveSlotChangeProcedure
/// Size: 0x04
enum class ESaveSlotChangeProcedure : uint8_t
{
	ESaveSlotChangeProcedure__NewSave                                                = 0,
	ESaveSlotChangeProcedure__Load                                                   = 1,
	ESaveSlotChangeProcedure__Save                                                   = 2,
	ESaveSlotChangeProcedure__NewModdedSave                                          = 3
};

/// Enum /Script/FSD.ENVidiaReflexMode
/// Size: 0x03
enum class ENVidiaReflexMode : uint8_t
{
	ENVidiaReflexMode__Disabled                                                      = 0,
	ENVidiaReflexMode__Enabled                                                       = 1,
	ENVidiaReflexMode__EnabledWithBoost                                              = 2
};

/// Enum /Script/FSD.EVolumeType
/// Size: 0x06
enum class EVolumeType : uint8_t
{
	EVolumeType__CharacterVoices                                                     = 0,
	EVolumeType__Master                                                              = 1,
	EVolumeType__SFX                                                                 = 2,
	EVolumeType__Music                                                               = 3,
	EVolumeType__VoiceChat                                                           = 4,
	EVolumeType__MissionControl                                                      = 5
};

/// Enum /Script/FSD.EInviteBlockReason
/// Size: 0x06
enum class EInviteBlockReason : uint8_t
{
	EInviteBlockReason__SoloSession                                                  = 0,
	EInviteBlockReason__ActiveDeepDive                                               = 1,
	EInviteBlockReason__Tutorial                                                     = 2,
	EInviteBlockReason__OnlinePlayBlocked                                            = 3,
	EInviteBlockReason__IsClient                                                     = 4,
	EInviteBlockReason__None                                                         = 5
};

/// Enum /Script/FSD.EPostProcessingType
/// Size: 0x02
enum class EPostProcessingType : uint8_t
{
	EPostProcessingType__GameWorld                                                   = 0,
	EPostProcessingType__CharacterSelector                                           = 1
};

/// Enum /Script/FSD.EItemNotificationType
/// Size: 0x01
enum class EItemNotificationType : uint8_t
{
	EItemNotificationType__NewOverclock                                              = 0
};

/// Enum /Script/FSD.ESteamBranch
/// Size: 0x04
enum class ESteamBranch : uint8_t
{
	ESteamBranch__Main                                                               = 0,
	ESteamBranch__Experimental                                                       = 1,
	ESteamBranch__Internal_Testing                                                   = 2,
	ESteamBranch__Other                                                              = 3
};

/// Enum /Script/FSD.EFSDTargetPlatform
/// Size: 0x05
enum class EFSDTargetPlatform : uint8_t
{
	EFSDTargetPlatform__Steam                                                        = 0,
	EFSDTargetPlatform__XboxOne                                                      = 1,
	EFSDTargetPlatform__Win10                                                        = 2,
	EFSDTargetPlatform__PS4                                                          = 3,
	EFSDTargetPlatform__PS5                                                          = 4
};

/// Enum /Script/FSD.EMoveType
/// Size: 0x02
enum class EMoveType : uint8_t
{
	EMoveType__EaseIn                                                                = 0,
	EMoveType__EaseOut                                                               = 1
};

/// Enum /Script/FSD.EPingType
/// Size: 0x02
enum class EPingType : uint8_t
{
	EPingType__EaseOut                                                               = 0,
	EPingType__Bounce                                                                = 1
};

/// Enum /Script/FSD.EFSDGoogleAnalyticsProperties
/// Size: 0x06
enum class EFSDGoogleAnalyticsProperties : uint8_t
{
	EFSDGoogleAnalyticsProperties__DRG                                               = 0,
	EFSDGoogleAnalyticsProperties__Discord                                           = 1,
	EFSDGoogleAnalyticsProperties__CommunityGoals                                    = 2,
	EFSDGoogleAnalyticsProperties__DRG_Discord                                       = 3,
	EFSDGoogleAnalyticsProperties__All                                               = 4,
	EFSDGoogleAnalyticsProperties__Other                                             = 5
};

/// Enum /Script/FSD.EGrabberState
/// Size: 0x04
enum class EGrabberState : uint8_t
{
	EGrabberState__StandBy                                                           = 0,
	EGrabberState__Chase                                                             = 1,
	EGrabberState__Carry                                                             = 2,
	EGrabberState__Flee                                                              = 3
};

/// Enum /Script/FSD.EGrabbedStateCameraMode
/// Size: 0x02
enum class EGrabbedStateCameraMode : uint8_t
{
	EGrabbedStateCameraMode__FirstPerson                                             = 0,
	EGrabbedStateCameraMode__ThirdPerson                                             = 1
};

/// Enum /Script/FSD.EGuntowerModuleState
/// Size: 0x04
enum class EGuntowerModuleState : uint8_t
{
	EGuntowerModuleState__EDormant                                                   = 0,
	EGuntowerModuleState__EActive                                                    = 1,
	EGuntowerModuleState__EVulnerable                                                = 2,
	EGuntowerModuleState__EDestoyed                                                  = 3
};

/// Enum /Script/FSD.ERicochetBehavior
/// Size: 0x03
enum class ERicochetBehavior : uint8_t
{
	ERicochetBehavior__All                                                           = 0,
	ERicochetBehavior__PawnsOnly                                                     = 1,
	ERicochetBehavior__NotPawns                                                      = 2
};

/// Enum /Script/FSD.EGeneratorIconType
/// Size: 0x04
enum class EGeneratorIconType : uint8_t
{
	EGeneratorIconType__Vanity                                                       = 0,
	EGeneratorIconType__PickaxePart                                                  = 1,
	EGeneratorIconType__PickaxeSet                                                   = 2,
	EGeneratorIconType__WeaponSkin                                                   = 3
};

/// Enum /Script/FSD.EKeyBindingSlot
/// Size: 0x02
enum class EKeyBindingSlot : uint8_t
{
	EKeyBindingSlot__Primary                                                         = 0,
	EKeyBindingSlot__Secondary                                                       = 1
};

/// Enum /Script/FSD.EInputInteraction
/// Size: 0x02
enum class EInputInteraction : uint8_t
{
	EInputInteraction__Press                                                         = 0,
	EInputInteraction__Hold                                                          = 1
};

/// Enum /Script/FSD.EWeaponMaintenanceState
/// Size: 0x04
enum class EWeaponMaintenanceState : uint8_t
{
	EWeaponMaintenanceState__Locked                                                  = 0,
	EWeaponMaintenanceState__Maintaining                                             = 1,
	EWeaponMaintenanceState__LevelUp                                                 = 2,
	EWeaponMaintenanceState__Finished                                                = 3
};

/// Enum /Script/FSD.EMicrowaveGunUpgrade
/// Size: 0x11
enum class EMicrowaveGunUpgrade : uint8_t
{
	EMicrowaveGunUpgrade__ESlowOnHit                                                 = 0,
	EMicrowaveGunUpgrade__EFocusLense                                                = 1,
	EMicrowaveGunUpgrade__EWideLense                                                 = 2,
	EMicrowaveGunUpgrade__ESpreadFire                                                = 3,
	EMicrowaveGunUpgrade__ESpreadNeuro                                               = 4,
	EMicrowaveGunUpgrade__EKilledTargetsExplodeChance                                = 5,
	EMicrowaveGunUpgrade__ERadiantSuperheater                                        = 6,
	EMicrowaveGunUpgrade__EHeatsink                                                  = 7,
	EMicrowaveGunUpgrade__BlisteringNecrosis                                         = 8,
	EMicrowaveGunUpgrade__EGammaContaminationZone                                    = 9,
	EMicrowaveGunUpgrade__ETemperatureAmplifier                                      = 10
};

/// Enum /Script/FSD.ECapsuleHitscanUpgradeType
/// Size: 0x02
enum class ECapsuleHitscanUpgradeType : uint8_t
{
	ECapsuleHitscanUpgradeType__ShotWidth                                            = 0,
	ECapsuleHitscanUpgradeType__PenetrateEnemies                                     = 1
};

/// Enum /Script/FSD.EHeavyParticleCannonUpgrade
/// Size: 0x08
enum class EHeavyParticleCannonUpgrade : uint8_t
{
	EHeavyParticleCannonUpgrade__ReloadOnButtonRelease                               = 0,
	EHeavyParticleCannonUpgrade__BoosterModule                                       = 1,
	EHeavyParticleCannonUpgrade__KillAddsAmmo                                        = 2,
	EHeavyParticleCannonUpgrade__RadialDamageIncPerSecond                            = 3,
	EHeavyParticleCannonUpgrade__RadialRangeIncPerSecond                             = 4,
	EHeavyParticleCannonUpgrade__BulkyBeam                                           = 5,
	EHeavyParticleCannonUpgrade__ProjectionModule                                    = 6,
	EHeavyParticleCannonUpgrade__PlatformExplosions                                  = 7
};

/// Enum /Script/FSD.ECrossbowUpgrades
/// Size: 0x22
enum class ECrossbowUpgrades : uint8_t
{
	ECrossbowUpgrades__SpecialArrowPheramone                                         = 0,
	ECrossbowUpgrades__SpecialArrowTaser                                             = 1,
	ECrossbowUpgrades__SpecialArrowChemical                                          = 2,
	ECrossbowUpgrades__BansheeModule                                                 = 3,
	ECrossbowUpgrades__Magnetic                                                      = 4,
	ECrossbowUpgrades__RadioModule                                                   = 5,
	ECrossbowUpgrades__Ricochet                                                      = 6,
	ECrossbowUpgrades__VelocityChange                                                = 7,
	ECrossbowUpgrades__DamageDefault                                                 = 8,
	ECrossbowUpgrades__RadialDamageDefault                                           = 9,
	ECrossbowUpgrades__Trifork                                                       = 10,
	ECrossbowUpgrades__Pentafork                                                     = 11,
	ECrossbowUpgrades__BattleFrenzy                                                  = 12,
	ECrossbowUpgrades__IncreaseSpecialAmmo                                           = 13,
	ECrossbowUpgrades__IncreaseSpecialAmmoPercent                                    = 14,
	ECrossbowUpgrades__SuperFast                                                     = 15,
	ECrossbowUpgrades__IncreaseSpecialEffectDuration                                 = 16,
	ECrossbowUpgrades__FasterSwitch                                                  = 17,
	ECrossbowUpgrades__CryoArrow                                                     = 18,
	ECrossbowUpgrades__FireArrow                                                     = 19,
	ECrossbowUpgrades__ReloadTimeDefaultArrow                                        = 20,
	ECrossbowUpgrades__RateOfFireDefaultArrow                                        = 21
};

/// Enum /Script/FSD.EPlasmaCarbineUpgrades
/// Size: 0x03
enum class EPlasmaCarbineUpgrades : uint8_t
{
	EPlasmaCarbineUpgrades__RateOfFireBoostOnFullShield                              = 0,
	EPlasmaCarbineUpgrades__RemoveShieldOnOverheat                                   = 1,
	EPlasmaCarbineUpgrades__RemoveShieldOnReload                                     = 2
};

/// Enum /Script/FSD.ELockOnWeaponUpgrades
/// Size: 0x15
enum class ELockOnWeaponUpgrades : uint8_t
{
	ELockOnWeaponUpgrades__MaxLockOnDegree                                           = 0,
	ELockOnWeaponUpgrades__TimeBetweenLockedShots                                    = 1,
	ELockOnWeaponUpgrades__LockOnTime                                                = 2,
	ELockOnWeaponUpgrades__MaxTargets                                                = 3,
	ELockOnWeaponUpgrades__LoseLockOnDegree                                          = 4,
	ELockOnWeaponUpgrades__MaxLockOnRange                                            = 5,
	ELockOnWeaponUpgrades__PrioritizeLowHitpoint                                     = 6,
	ELockOnWeaponUpgrades__AlwaysHitTarget                                           = 7,
	ELockOnWeaponUpgrades__MaxLockOnDuration                                         = 8,
	ELockOnWeaponUpgrades__LockOnControlsSentryGun                                   = 9,
	ELockOnWeaponUpgrades__AoeHitCountThreshhold                                     = 10,
	ELockOnWeaponUpgrades__SentryGunShootsOnLockedShot                               = 11,
	ELockOnWeaponUpgrades__UseLockOnTargetStatusEffect                               = 12,
	ELockOnWeaponUpgrades__FearEnabled                                               = 13,
	ELockOnWeaponUpgrades__RateOfFireLockedOnModifier                                = 14
};

/// Enum /Script/FSD.EGooGunProjectileUpgrades
/// Size: 0x02
enum class EGooGunProjectileUpgrades : uint8_t
{
	EGooGunProjectileUpgrades__PuddleLifeSpan                                        = 0,
	EGooGunProjectileUpgrades__FragmentCount                                         = 1
};

/// Enum /Script/FSD.EGooGunUpgrades
/// Size: 0x05
enum class EGooGunUpgrades : uint8_t
{
	EGooGunUpgrades__ChargeFire                                                      = 0,
	EGooGunUpgrades__BurstFire                                                       = 1,
	EGooGunUpgrades__ShotCostCharged                                                 = 2,
	EGooGunUpgrades__ChargeTime                                                      = 3,
	EGooGunUpgrades__ChargeShotCount                                                 = 4
};

/// Enum /Script/FSD.EMicroMissileLauncherUpgrades
/// Size: 0x05
enum class EMicroMissileLauncherUpgrades : uint8_t
{
	EMicroMissileLauncherUpgrades__ChargeFire                                        = 0,
	EMicroMissileLauncherUpgrades__BuckFire                                          = 1,
	EMicroMissileLauncherUpgrades__DisableHomingOnRelease                            = 2,
	EMicroMissileLauncherUpgrades__ShotDirectionHorizontalDegreeOffset               = 3,
	EMicroMissileLauncherUpgrades__ShotDirectionVerticleDegreeOffset                 = 4
};

/// Enum /Script/FSD.EProjectileLauncherBaseUpgradeType
/// Size: 0x04
enum class EProjectileLauncherBaseUpgradeType : uint8_t
{
	EProjectileLauncherBaseUpgradeType__VerticalSpread                               = 0,
	EProjectileLauncherBaseUpgradeType__HorizontalSpread                             = 1,
	EProjectileLauncherBaseUpgradeType__TransferVelocityFromCharacter                = 2,
	EProjectileLauncherBaseUpgradeType__ArcStartAngle                                = 3
};

/// Enum /Script/FSD.EDetPackUpgrades
/// Size: 0x05
enum class EDetPackUpgrades : uint8_t
{
	EDetPackUpgrades__CanPickUp                                                      = 0,
	EDetPackUpgrades__CarveDiameter                                                  = 1,
	EDetPackUpgrades__ExplodeOnDeath                                                 = 2,
	EDetPackUpgrades__ExtraFearRadius                                                = 3,
	EDetPackUpgrades__ExtraStaggerRadius                                             = 4
};

/// Enum /Script/FSD.EPlatformGunUpgrades
/// Size: 0x04
enum class EPlatformGunUpgrades : uint8_t
{
	EPlatformGunUpgrades__BiggerPlatform                                             = 0,
	EPlatformGunUpgrades__LessFallDamage                                             = 1,
	EPlatformGunUpgrades__BugRepellant                                               = 2,
	EPlatformGunUpgrades__CubePlatform                                               = 3
};

/// Enum /Script/FSD.EBoscoUpgrades
/// Size: 0x07
enum class EBoscoUpgrades : uint8_t
{
	EBoscoUpgrades__MiningSpeedUpgrade                                               = 0,
	EBoscoUpgrades__ExtraRevive                                                      = 1,
	EBoscoUpgrades__ActiveLightRadius                                                = 2,
	EBoscoUpgrades__Missile                                                          = 3,
	EBoscoUpgrades__CryoGrenade                                                      = 4,
	EBoscoUpgrades__SACooldownReduction                                              = 5,
	EBoscoUpgrades__ExtraAbillityCharge                                              = 6
};

/// Enum /Script/FSD.EArmorUpgradeType
/// Size: 0x03
enum class EArmorUpgradeType : uint8_t
{
	EArmorUpgradeType__RegenDelay                                                    = 0,
	EArmorUpgradeType__RegenRate                                                     = 1,
	EArmorUpgradeType__ReviveInvulnerability                                         = 2
};

/// Enum /Script/FSD.ETriggeredStatusEffectType
/// Size: 0x03
enum class ETriggeredStatusEffectType : uint8_t
{
	ETriggeredStatusEffectType__ShieldDestroyed                                      = 0,
	ETriggeredStatusEffectType__GrapplingHookReleased                                = 1,
	ETriggeredStatusEffectType__NONE                                                 = 2
};

/// Enum /Script/FSD.EShieldGeneratorUpgrades
/// Size: 0x06
enum class EShieldGeneratorUpgrades : uint8_t
{
	EShieldGeneratorUpgrades__Radius                                                 = 0,
	EShieldGeneratorUpgrades__Duration                                               = 1,
	EShieldGeneratorUpgrades__DeployTime                                             = 2,
	EShieldGeneratorUpgrades__RechargeTime                                           = 3,
	EShieldGeneratorUpgrades__RechargeCount                                          = 4,
	EShieldGeneratorUpgrades__PushStatusEffect                                       = 5
};

/// Enum /Script/FSD.ESentryGunUpgradeType
/// Size: 0x08
enum class ESentryGunUpgradeType : uint8_t
{
	ESentryGunUpgradeType__MaxAmmo                                                   = 0,
	ESentryGunUpgradeType__ReloadSpeed                                               = 1,
	ESentryGunUpgradeType__ExtraSentry                                               = 2,
	ESentryGunUpgradeType__AngleRestriction                                          = 3,
	ESentryGunUpgradeType__ManualTargeting                                           = 4,
	ESentryGunUpgradeType__MaxRange                                                  = 5,
	ESentryGunUpgradeType__RotationSpeed                                             = 6,
	ESentryGunUpgradeType__BurstCooldown                                             = 7
};

/// Enum /Script/FSD.EGrapplingHookUpgrade
/// Size: 0x03
enum class EGrapplingHookUpgrade : uint8_t
{
	EGrapplingHookUpgrade__MaxDistance                                               = 0,
	EGrapplingHookUpgrade__MaxSpeed                                                  = 1,
	EGrapplingHookUpgrade__WindUpTime                                                = 2
};

/// Enum /Script/FSD.EZiplineGunUpgrades
/// Size: 0x04
enum class EZiplineGunUpgrades : uint8_t
{
	EZiplineGunUpgrades__MaxAngle                                                    = 0,
	EZiplineGunUpgrades__MaxDistance                                                 = 1,
	EZiplineGunUpgrades__MovementSpeed                                               = 2,
	EZiplineGunUpgrades__FallDamageReduction                                         = 3
};

/// Enum /Script/FSD.EElectricalSMGUpgrades
/// Size: 0x04
enum class EElectricalSMGUpgrades : uint8_t
{
	EElectricalSMGUpgrades__AoEChance                                                = 0,
	EElectricalSMGUpgrades__PlasmaBeam                                               = 1,
	EElectricalSMGUpgrades__TurretEMPDischarge                                       = 2,
	EElectricalSMGUpgrades__ElectrifyPlatforms                                       = 3
};

/// Enum /Script/FSD.EChargedProjectileUpgrades
/// Size: 0x03
enum class EChargedProjectileUpgrades : uint8_t
{
	EChargedProjectileUpgrades__ExplodesOnDamage                                     = 0,
	EChargedProjectileUpgrades__AoEDamageInFlight                                    = 1,
	EChargedProjectileUpgrades__PersistentExplosion                                  = 2
};

/// Enum /Script/FSD.EFlaregunProjectileUpgrades
/// Size: 0x01
enum class EFlaregunProjectileUpgrades : uint8_t
{
	EFlaregunProjectileUpgrades__Duration                                            = 0
};

/// Enum /Script/FSD.EFlaregunUpgrades
/// Size: 0x01
enum class EFlaregunUpgrades : uint8_t
{
	EFlaregunUpgrades__AutoReload                                                    = 0
};

/// Enum /Script/FSD.EProjectileUpgrade
/// Size: 0x14
enum class EProjectileUpgrade : uint8_t
{
	EProjectileUpgrade__Velocity                                                     = 0,
	EProjectileUpgrade__MaxVelocity                                                  = 1,
	EProjectileUpgrade__Bouncy                                                       = 2,
	EProjectileUpgrade__Lifetime                                                     = 3,
	EProjectileUpgrade__DoOnImpact                                                   = 4,
	EProjectileUpgrade__DoOnImpact2                                                  = 5,
	EProjectileUpgrade__DoOnImpact3                                                  = 6,
	EProjectileUpgrade__DoOnSpawn                                                    = 7,
	EProjectileUpgrade__HomingStrength                                               = 8,
	EProjectileUpgrade__SetInitialSpeedToMaxSpeed                                    = 9,
	EProjectileUpgrade__AccelerationMultiplier                                       = 10,
	EProjectileUpgrade__MaxPropulsionTime                                            = 11,
	EProjectileUpgrade__GravityScale                                                 = 12,
	EProjectileUpgrade__CustomEvent                                                  = 13
};

/// Enum /Script/FSD.ELineCutterProjectileUpgradeType
/// Size: 0x13
enum class ELineCutterProjectileUpgradeType : uint8_t
{
	ELineCutterProjectileUpgradeType__LineSize                                       = 0,
	ELineCutterProjectileUpgradeType__LineSizeMultiplier                             = 1,
	ELineCutterProjectileUpgradeType__ExplosiveRound                                 = 2,
	ELineCutterProjectileUpgradeType__SetDeployDelay                                 = 3,
	ELineCutterProjectileUpgradeType__AddDeployTime                                  = 4,
	ELineCutterProjectileUpgradeType__ExplodeOnNextProjectile                        = 5,
	ELineCutterProjectileUpgradeType__DoubleLine                                     = 6,
	ELineCutterProjectileUpgradeType__LineSizeAdd                                    = 7,
	ELineCutterProjectileUpgradeType__SetDeployTime                                  = 8,
	ELineCutterProjectileUpgradeType__RollUntilStop                                  = 9,
	ELineCutterProjectileUpgradeType__Yawing                                         = 10,
	ELineCutterProjectileUpgradeType__PlasmaTrail                                    = 11,
	ELineCutterProjectileUpgradeType__Homing                                         = 12
};

/// Enum /Script/FSD.ELineCutterUpgradeType
/// Size: 0x02
enum class ELineCutterUpgradeType : uint8_t
{
	ELineCutterUpgradeType__ReverseDirection                                         = 0,
	ELineCutterUpgradeType__ExplodeLastProjectile                                    = 1
};

/// Enum /Script/FSD.EGrenadeUpgradeType
/// Size: 0x02
enum class EGrenadeUpgradeType : uint8_t
{
	EGrenadeUpgradeType__MaxGrenades                                                 = 0,
	EGrenadeUpgradeType__FuseTime                                                    = 1
};

/// Enum /Script/FSD.EFlareUpgradeType
/// Size: 0x03
enum class EFlareUpgradeType : uint8_t
{
	EFlareUpgradeType__Duration                                                      = 0,
	EFlareUpgradeType__MaxFlares                                                     = 1,
	EFlareUpgradeType__ProductionTime                                                = 2
};

/// Enum /Script/FSD.ESingleUsableUpgradeType
/// Size: 0x01
enum class ESingleUsableUpgradeType : uint8_t
{
	ESingleUsableUpgradeType__UseDuration                                            = 0
};

/// Enum /Script/FSD.EModifyStatusEffectDamageUpgrade
/// Size: 0x01
enum class EModifyStatusEffectDamageUpgrade : uint8_t
{
	EModifyStatusEffectDamageUpgrade__Duration                                       = 0
};

/// Enum /Script/FSD.EHitScanBaseUpgradeType
/// Size: 0x14
enum class EHitScanBaseUpgradeType : uint8_t
{
	EHitScanBaseUpgradeType__MaxVerticalSpread                                       = 0,
	EHitScanBaseUpgradeType__MaxHorizontalSpread                                     = 1,
	EHitScanBaseUpgradeType__MaxPenetrations                                         = 2,
	EHitScanBaseUpgradeType__WeaponAccuracySpreadMultiplier                          = 3,
	EHitScanBaseUpgradeType__SpreadPerShot                                           = 4,
	EHitScanBaseUpgradeType__MinSpreadWhileMoving                                    = 5,
	EHitScanBaseUpgradeType__SpreadRecoveryMultiplier                                = 6,
	EHitScanBaseUpgradeType__MinSpreadWhileSprinting                                 = 7,
	EHitScanBaseUpgradeType__MaxSpread                                               = 8,
	EHitScanBaseUpgradeType__RicochetChance                                          = 9,
	EHitScanBaseUpgradeType__RicochetOnWeakspotOnly                                  = 10,
	EHitScanBaseUpgradeType__RicochetBehaviourAll                                    = 11,
	EHitScanBaseUpgradeType__RicochetBehaviourPawnsOnly                              = 12,
	EHitScanBaseUpgradeType__RicochetBehaviourNotPawns                               = 13
};

/// Enum /Script/FSD.EReflectionHitscanUpgradeType
/// Size: 0x01
enum class EReflectionHitscanUpgradeType : uint8_t
{
	EReflectionHitscanUpgradeType__ReflectionCount                                   = 0
};

/// Enum /Script/FSD.EMultiHitscanUpgradeType
/// Size: 0x01
enum class EMultiHitscanUpgradeType : uint8_t
{
	EMultiHitscanUpgradeType__BulletsPerShot                                         = 0
};

/// Enum /Script/FSD.EInventoryItemUpgradeType
/// Size: 0x05
enum class EInventoryItemUpgradeType : uint8_t
{
	EInventoryItemUpgradeType__MovementSpeedWhileUsing                               = 0,
	EInventoryItemUpgradeType__CooldownRate                                          = 1,
	EInventoryItemUpgradeType__UnJamDuration                                         = 2,
	EInventoryItemUpgradeType__ManualCooldownDelay                                   = 3,
	EInventoryItemUpgradeType__ManualHeatPerUse                                      = 4
};

/// Enum /Script/FSD.EDoubleDrillUpgradeType
/// Size: 0x05
enum class EDoubleDrillUpgradeType : uint8_t
{
	EDoubleDrillUpgradeType__MiningRate                                              = 0,
	EDoubleDrillUpgradeType__MaxFuel                                                 = 1,
	EDoubleDrillUpgradeType__HeatRemovalOnKill                                       = 2,
	EDoubleDrillUpgradeType__HeatRemovalOnDamage                                     = 3,
	EDoubleDrillUpgradeType__MovementPenalty                                         = 4
};

/// Enum /Script/FSD.EFlameThrowerUpgradeType
/// Size: 0x04
enum class EFlameThrowerUpgradeType : uint8_t
{
	EFlameThrowerUpgradeType__StickyFlameDuration                                    = 0,
	EFlameThrowerUpgradeType__LongReach                                              = 1,
	EFlameThrowerUpgradeType__AoEHeat                                                = 2,
	EFlameThrowerUpgradeType__KilledTargetsExplodeChance                             = 3
};

/// Enum /Script/FSD.EPickaxeUpgradeType
/// Size: 0x06
enum class EPickaxeUpgradeType : uint8_t
{
	EPickaxeUpgradeType__RockMining                                                  = 0,
	EPickaxeUpgradeType__OneHitMineralMining                                         = 1,
	EPickaxeUpgradeType__ReceiveBonusMineralNitra                                    = 2,
	EPickaxeUpgradeType__ReceiveBonusMineralGold                                     = 3,
	EPickaxeUpgradeType__EnablePowerAttack                                           = 4,
	EPickaxeUpgradeType__PowerAttackCoolDown                                         = 5
};

/// Enum /Script/FSD.ECryoSprayUpgrades
/// Size: 0x08
enum class ECryoSprayUpgrades : uint8_t
{
	ECryoSprayUpgrades__PressureDropMultiplier                                       = 0,
	ECryoSprayUpgrades__PressureGainMultiplier                                       = 1,
	ECryoSprayUpgrades__ChargeupTime                                                 = 2,
	ECryoSprayUpgrades__RePressurisationTime                                         = 3,
	ECryoSprayUpgrades__FrozenTargetsCanShatter                                      = 4,
	ECryoSprayUpgrades__AoECold                                                      = 5,
	ECryoSprayUpgrades__LongReach                                                    = 6,
	ECryoSprayUpgrades__SprayWidth                                                   = 7
};

/// Enum /Script/FSD.ERevolerUpgrades
/// Size: 0x01
enum class ERevolerUpgrades : uint8_t
{
	ERevolerUpgrades__OnKillFearFactor                                               = 0
};

/// Enum /Script/FSD.EBasicPistol
/// Size: 0x01
enum class EBasicPistol : uint8_t
{
	EBasicPistol__ConsecutiveHitsDamageBonus                                         = 0
};

/// Enum /Script/FSD.EAutoShotgunUpgrades
/// Size: 0x03
enum class EAutoShotgunUpgrades : uint8_t
{
	EAutoShotgunUpgrades__TurretSpecialAttackEnabled                                 = 0,
	EAutoShotgunUpgrades__RateOfFireAndAutoMatic                                     = 1,
	EAutoShotgunUpgrades__CQCBuffOnKill                                              = 2
};

/// Enum /Script/FSD.EBurstWeaponUpgrades
/// Size: 0x02
enum class EBurstWeaponUpgrades : uint8_t
{
	EBurstWeaponUpgrades__FullBurstHitBonusDamage                                    = 0,
	EBurstWeaponUpgrades__FullBurstStaggerDuraion                                    = 1
};

/// Enum /Script/FSD.ESawedOffShotgunUpgrades
/// Size: 0x03
enum class ESawedOffShotgunUpgrades : uint8_t
{
	ESawedOffShotgunUpgrades__FearOnShoot                                            = 0,
	ESawedOffShotgunUpgrades__ShockWave                                              = 2,
	ESawedOffShotgunUpgrades__ShotgunJump                                            = 3
};

/// Enum /Script/FSD.EAutoCannonUpgrades
/// Size: 0x05
enum class EAutoCannonUpgrades : uint8_t
{
	EAutoCannonUpgrades__FireTimeIncreaseScaleMultiplier                             = 0,
	EAutoCannonUpgrades__DamageBonusAtFullROF                                        = 1,
	EAutoCannonUpgrades__StatusEffectAtFullROF                                       = 2,
	EAutoCannonUpgrades__StartingFireRate                                            = 3,
	EAutoCannonUpgrades__MaxFireRate                                                 = 4
};

/// Enum /Script/FSD.ECoilgunUpgrades
/// Size: 0x24
enum class ECoilgunUpgrades : uint8_t
{
	ECoilgunUpgrades__EResistanceWhileCharging                                       = 0,
	ECoilgunUpgrades__ETransferAilment                                               = 1,
	ECoilgunUpgrades__EFlamekills                                                    = 2,
	ECoilgunUpgrades__EOvercharge                                                    = 3,
	ECoilgunUpgrades__EUnderCharge                                                   = 4,
	ECoilgunUpgrades__EWeaponBlast                                                   = 5,
	ECoilgunUpgrades__EShotwaveRange                                                 = 6,
	ECoilgunUpgrades__EImpactFearFactor                                              = 7,
	ECoilgunUpgrades__EDamageOnShotWave                                              = 8,
	ECoilgunUpgrades__EImpactFearRadius                                              = 9,
	ECoilgunUpgrades__EEffectTrailDuration                                           = 10,
	ECoilgunUpgrades__EEffectTrailBonusRadius                                        = 11,
	ECoilgunUpgrades__EBrokenShieldBonus                                             = 12,
	ECoilgunUpgrades__EPostChargeBurst                                               = 13,
	ECoilgunUpgrades__EOwnerShieldCapacity                                           = 14,
	ECoilgunUpgrades__EBlockShieldWhileCharing                                       = 15,
	ECoilgunUpgrades__EWeaknessWhileCharging                                         = 16,
	ECoilgunUpgrades__EPierceDepthDamage                                             = 17,
	ECoilgunUpgrades__EBurnGround                                                    = 18,
	ECoilgunUpgrades__EElectricTrail                                                 = 19,
	ECoilgunUpgrades__EFireTrail                                                     = 20,
	ECoilgunUpgrades__EPenetrationDepth                                              = 21,
	ECoilgunUpgrades__EPrimaryBonusShotWidth                                         = 22,
	ECoilgunUpgrades__EShieldDelay                                                   = 23
};

/// Enum /Script/FSD.EChargedWeaponUpgrades
/// Size: 0x07
enum class EChargedWeaponUpgrades : uint8_t
{
	EChargedWeaponUpgrades__ShotCostAtFullCharge                                     = 0,
	EChargedWeaponUpgrades__ChargeSpeed                                              = 1,
	EChargedWeaponUpgrades__CoolingRate                                              = 2,
	EChargedWeaponUpgrades__HeatPerSecondCharging                                    = 3,
	EChargedWeaponUpgrades__HeatPerSecondCharged                                     = 4,
	EChargedWeaponUpgrades__HeatPerChargedShot                                       = 5,
	EChargedWeaponUpgrades__HeatPerNormalShot                                        = 6
};

/// Enum /Script/FSD.EDualMachinePistolsUpgrades
/// Size: 0x01
enum class EDualMachinePistolsUpgrades : uint8_t
{
	EDualMachinePistolsUpgrades__TriggerStatusEffectOnEmptyClip                      = 0
};

/// Enum /Script/FSD.EBoltActionRifleUpgrades
/// Size: 0x12
enum class EBoltActionRifleUpgrades : uint8_t
{
	EBoltActionRifleUpgrades__FocusSpeed                                             = 0,
	EBoltActionRifleUpgrades__AimedShotStagger                                       = 1,
	EBoltActionRifleUpgrades__AimedWeakShotKillFearFactor                            = 2,
	EBoltActionRifleUpgrades__FocusDamageBonus                                       = 3,
	EBoltActionRifleUpgrades__UnZoomedAccuracySpread                                 = 4,
	EBoltActionRifleUpgrades__FocusedWeakspotHitStatusEffect                         = 5,
	EBoltActionRifleUpgrades__NoGravityOnFocus                                       = 6,
	EBoltActionRifleUpgrades__KillReloadTimeBoost                                    = 7,
	EBoltActionRifleUpgrades__AimedShotWeakpointDamageBonusMultiplier                = 8,
	EBoltActionRifleUpgrades__AimedShotAmmoCost                                      = 9,
	EBoltActionRifleUpgrades__RateOfFireHipFireModifier                              = 10,
	EBoltActionRifleUpgrades__ChargeSpeedModifier                                    = 11
};

/// Enum /Script/FSD.EAssaultRifleUpgrade
/// Size: 0x02
enum class EAssaultRifleUpgrade : uint8_t
{
	EAssaultRifleUpgrade__KillResetsSpread                                           = 0,
	EAssaultRifleUpgrade__KillTriggerStatusEffect                                    = 1
};

/// Enum /Script/FSD.EGatlingGunUpgrade
/// Size: 0x04
enum class EGatlingGunUpgrade : uint8_t
{
	EGatlingGunUpgrade__DamageMultiplierAtMaxStabilization                           = 0,
	EGatlingGunUpgrade__HeatRemovedOnKill                                            = 1,
	EGatlingGunUpgrade__CriticalOverheat                                             = 2,
	EGatlingGunUpgrade__BarrelProximityDamage                                        = 3
};

/// Enum /Script/FSD.EBeltDrivenWeaponUpgrade
/// Size: 0x02
enum class EBeltDrivenWeaponUpgrade : uint8_t
{
	EBeltDrivenWeaponUpgrade__BarrelSpinupTime                                       = 0,
	EBeltDrivenWeaponUpgrade__BarrelSpinDownTime                                     = 1
};

/// Enum /Script/FSD.EAmmoDrivenWeapnUpgradeType
/// Size: 0x18
enum class EAmmoDrivenWeapnUpgradeType : uint8_t
{
	EAmmoDrivenWeapnUpgradeType__MaxAmmo                                             = 0,
	EAmmoDrivenWeapnUpgradeType__ClipSize                                            = 1,
	EAmmoDrivenWeapnUpgradeType__RateOfFire                                          = 2,
	EAmmoDrivenWeapnUpgradeType__ReloadSpeed                                         = 3,
	EAmmoDrivenWeapnUpgradeType__RecoilMultiplier                                    = 4,
	EAmmoDrivenWeapnUpgradeType__RecoilMultiplierV                                   = 5,
	EAmmoDrivenWeapnUpgradeType__RecoilMultiplierH                                   = 6,
	EAmmoDrivenWeapnUpgradeType__BurstCount                                          = 7,
	EAmmoDrivenWeapnUpgradeType__BurstRateOfFire                                     = 8,
	EAmmoDrivenWeapnUpgradeType__ActivateBurstFireMode                               = 9,
	EAmmoDrivenWeapnUpgradeType__ActivateAutomaticFireMode                           = 10,
	EAmmoDrivenWeapnUpgradeType__HeatUpRateModifier                                  = 11,
	EAmmoDrivenWeapnUpgradeType__AutoReloadDuration                                  = 12,
	EAmmoDrivenWeapnUpgradeType__RecoilMass                                          = 13,
	EAmmoDrivenWeapnUpgradeType__OverheatOnReload                                    = 14,
	EAmmoDrivenWeapnUpgradeType__ShotCost                                            = 15,
	EAmmoDrivenWeapnUpgradeType__CustomEvent1                                        = 16,
	EAmmoDrivenWeapnUpgradeType__HeatReductionOnReload                               = 17
};

/// Enum /Script/FSD.ELaserPointerMarkerType
/// Size: 0x03
enum class ELaserPointerMarkerType : uint8_t
{
	ELaserPointerMarkerType__Primary                                                 = 0,
	ELaserPointerMarkerType__Secondary                                               = 1,
	ELaserPointerMarkerType__Count                                                   = 2
};

/// Enum /Script/FSD.EStrobingMode
/// Size: 0x02
enum class EStrobingMode : uint8_t
{
	EStrobingMode__Intensity                                                         = 0,
	EStrobingMode__AttenuationRadius                                                 = 1
};

/// Enum /Script/FSD.EStrobeMaterialMode
/// Size: 0x02
enum class EStrobeMaterialMode : uint8_t
{
	EStrobeMaterialMode__Material                                                    = 0,
	EStrobeMaterialMode__Mesh                                                        = 1
};

/// Enum /Script/FSD.EArmorType
/// Size: 0x03
enum class EArmorType : uint8_t
{
	EArmorType__Light                                                                = 0,
	EArmorType__Heavy                                                                = 1,
	EArmorType__Unbreakable                                                          = 2
};

/// Enum /Script/FSD.EDamageType
/// Size: 0x21
enum class EDamageType : uint8_t
{
	EDamageType__Fire                                                                = 0,
	EDamageType__Cold                                                                = 1,
	EDamageType__Melee                                                               = 2,
	EDamageType__Kinetic                                                             = 3,
	EDamageType__Explosive                                                           = 4,
	EDamageType__Stun                                                                = 5,
	EDamageType__Electrocution                                                       = 6,
	EDamageType__Fear                                                                = 7,
	EDamageType__Radiation                                                           = 8,
	EDamageType__Pheromone                                                           = 9,
	EDamageType__Poison                                                              = 10,
	EDamageType__ArmorBreaking                                                       = 11,
	EDamageType__Push                                                                = 12,
	EDamageType__Grab                                                                = 13,
	EDamageType__None                                                                = 14,
	EDamageType__Slow                                                                = 15,
	EDamageType__Defense                                                             = 16,
	EDamageType__TemperatureShock                                                    = 17,
	EDamageType__Corrosive                                                           = 18,
	EDamageType__Piercing                                                            = 19,
	EDamageType__RockPox                                                             = 20
};

/// Enum /Script/FSD.EEnemyAttackType
/// Size: 0x05
enum class EEnemyAttackType : uint8_t
{
	EEnemyAttackType__Melee                                                          = 0,
	EEnemyAttackType__Ranged                                                         = 1,
	EEnemyAttackType__Grab                                                           = 2,
	EEnemyAttackType__Area                                                           = 3,
	EEnemyAttackType__Move                                                           = 4
};

/// Enum /Script/FSD.EMissionStructure
/// Size: 0x03
enum class EMissionStructure : uint8_t
{
	EMissionStructure__SingleMission                                                 = 0,
	EMissionStructure__DeepDive_Normal                                               = 1,
	EMissionStructure__DeepDive_Elite                                                = 2
};

/// Enum /Script/FSD.ENisseState
/// Size: 0x04
enum class ENisseState : uint8_t
{
	ENisseState__Idle                                                                = 0,
	ENisseState__Walking                                                             = 1,
	ENisseState__Running                                                             = 2,
	ENisseState__Frozen                                                              = 3
};

/// Enum /Script/FSD.EPatrolBotControlState
/// Size: 0x03
enum class EPatrolBotControlState : uint8_t
{
	EPatrolBotControlState__Hostile                                                  = 0,
	EPatrolBotControlState__Disabled                                                 = 1,
	EPatrolBotControlState__Hacked                                                   = 2
};

/// Enum /Script/FSD.EPatrolBotState
/// Size: 0x03
enum class EPatrolBotState : uint8_t
{
	EPatrolBotState__Rolling                                                         = 0,
	EPatrolBotState__Flying                                                          = 1,
	EPatrolBotState__Disabled                                                        = 2
};

/// Enum /Script/FSD.EPawnStatType
/// Size: 0x02
enum class EPawnStatType : uint8_t
{
	EPawnStatType__Multiplicative                                                    = 0,
	EPawnStatType__Additive                                                          = 1
};

/// Enum /Script/FSD.EPerkSlotType
/// Size: 0x03
enum class EPerkSlotType : uint8_t
{
	EPerkSlotType__Available                                                         = 0,
	EPerkSlotType__LockedByPerk                                                      = 1,
	EPerkSlotType__LockedByPromotion                                                 = 2
};

/// Enum /Script/FSD.EPerkUsageType
/// Size: 0x02
enum class EPerkUsageType : uint8_t
{
	EPerkUsageType__Passive                                                          = 0,
	EPerkUsageType__Active                                                           = 1
};

/// Enum /Script/FSD.EPerkHUDActivationLocation
/// Size: 0x02
enum class EPerkHUDActivationLocation : uint8_t
{
	EPerkHUDActivationLocation__Main                                                 = 0,
	EPerkHUDActivationLocation__Down                                                 = 1
};

/// Enum /Script/FSD.EPerkTierState
/// Size: 0x05
enum class EPerkTierState : uint8_t
{
	EPerkTierState__Claimable                                                        = 0,
	EPerkTierState__Claimed                                                          = 1,
	EPerkTierState__Locked                                                           = 2,
	EPerkTierState__Unaffordable                                                     = 3,
	EPerkTierState__NotAvailable                                                     = 4
};

/// Enum /Script/FSD.EPickaxeState
/// Size: 0x04
enum class EPickaxeState : uint8_t
{
	EPickaxeState__Equipping                                                         = 0,
	EPickaxeState__Mining                                                            = 1,
	EPickaxeState__PowerAttack                                                       = 2,
	EPickaxeState__End                                                               = 3
};

/// Enum /Script/FSD.EPickaxePartLocation
/// Size: 0x08
enum class EPickaxePartLocation : uint8_t
{
	EPickaxePartLocation__Head                                                       = 0,
	EPickaxePartLocation__FrontBlade                                                 = 1,
	EPickaxePartLocation__BackBlade                                                  = 2,
	EPickaxePartLocation__Shaft                                                      = 3,
	EPickaxePartLocation__Handle                                                     = 4,
	EPickaxePartLocation__Pommel                                                     = 5,
	EPickaxePartLocation__Material                                                   = 6,
	EPickaxePartLocation__Count                                                      = 7
};

/// Enum /Script/FSD.EPickaxePart
/// Size: 0x06
enum class EPickaxePart : uint8_t
{
	EPickaxePart__Head                                                               = 0,
	EPickaxePart__Blade                                                              = 1,
	EPickaxePart__Shaft                                                              = 2,
	EPickaxePart__Handle                                                             = 3,
	EPickaxePart__Pommel                                                             = 4,
	EPickaxePart__Material                                                           = 5
};

/// Enum /Script/FSD.EPipelineExtractorPodAnimState
/// Size: 0x04
enum class EPipelineExtractorPodAnimState : uint8_t
{
	EPipelineExtractorPodAnimState__Folded                                           = 0,
	EPipelineExtractorPodAnimState__Idle                                             = 1,
	EPipelineExtractorPodAnimState__Running                                          = 2,
	EPipelineExtractorPodAnimState__Broken                                           = 3
};

/// Enum /Script/FSD.EPlaceableObstructionType
/// Size: 0x10
enum class EPlaceableObstructionType : uint8_t
{
	EPlaceableObstructionType__Valid                                                 = 0,
	EPlaceableObstructionType__GroundTooSteep                                        = 1,
	EPlaceableObstructionType__TooShort                                              = 2,
	EPlaceableObstructionType__TooLong                                               = 3,
	EPlaceableObstructionType__TurnTooSharp                                          = 4,
	EPlaceableObstructionType__Blocked                                               = 5,
	EPlaceableObstructionType__NotEnoughRoom                                         = 6,
	EPlaceableObstructionType__TooSteep                                              = 7,
	EPlaceableObstructionType__TooClose                                              = 8,
	EPlaceableObstructionType__Other                                                 = 9
};

/// Enum /Script/FSD.ECharacterMoveDirection
/// Size: 0x05
enum class ECharacterMoveDirection : uint8_t
{
	ECharacterMoveDirection__None                                                    = 0,
	ECharacterMoveDirection__Forward                                                 = 1,
	ECharacterMoveDirection__Left                                                    = 2,
	ECharacterMoveDirection__Right                                                   = 3,
	ECharacterMoveDirection__Back                                                    = 4
};

/// Enum /Script/FSD.EGameOwnerStatus
/// Size: 0x05
enum class EGameOwnerStatus : uint8_t
{
	EGameOwnerStatus__Supporter                                                      = 0,
	EGameOwnerStatus__ContentCreator                                                 = 1,
	EGameOwnerStatus__Developer                                                      = 2,
	EGameOwnerStatus__Modder                                                         = 3,
	EGameOwnerStatus__EGameOwnerStatus_Max                                           = 255
};

/// Enum /Script/FSD.EMovementCustomMode
/// Size: 0x05
enum class EMovementCustomMode : uint8_t
{
	MOVE_Custom_None                                                                 = 0,
	MOVE_Custom_Track                                                                = 1,
	MOVE_Custom_CharacterStateControlled                                             = 2,
	MOVE_Custom_TraversalTool                                                        = 3,
	MOVE_Custom_JetBoots                                                             = 4
};

/// Enum /Script/FSD.ERoomMirror
/// Size: 0x03
enum class ERoomMirror : uint8_t
{
	ERoomMirror__None                                                                = 0,
	ERoomMirror__MirrorX                                                             = 1,
	ERoomMirror__MirrorY                                                             = 2
};

/// Enum /Script/FSD.ERoomMirroringSupport
/// Size: 0x04
enum class ERoomMirroringSupport : uint8_t
{
	ERoomMirroringSupport__NotAllowed                                                = 0,
	ERoomMirroringSupport__MirrorAroundX                                             = 1,
	ERoomMirroringSupport__MirrorAroundY                                             = 2,
	ERoomMirroringSupport__MirrorBoth                                                = 3
};

/// Enum /Script/FSD.EItemAdjustmentType
/// Size: 0x04
enum class EItemAdjustmentType : uint8_t
{
	EItemAdjustmentType__None                                                        = 0,
	EItemAdjustmentType__Cieling                                                     = 1,
	EItemAdjustmentType__Wall                                                        = 2,
	EItemAdjustmentType__Floor                                                       = 3
};

/// Enum /Script/FSD.ECaveEntrancePriority
/// Size: 0x02
enum class ECaveEntrancePriority : uint8_t
{
	ECaveEntrancePriority__Primary                                                   = 0,
	ECaveEntrancePriority__Secondary                                                 = 1
};

/// Enum /Script/FSD.ECaveEntranceType
/// Size: 0x04
enum class ECaveEntranceType : uint8_t
{
	ECaveEntranceType__EntranceAndExit                                               = 0,
	ECaveEntranceType__Entrance                                                      = 1,
	ECaveEntranceType__Exit                                                          = 2,
	ECaveEntranceType__TreassureRoom                                                 = 3
};

/// Enum /Script/FSD.ESpawnSettings
/// Size: 0x03
enum class ESpawnSettings : uint8_t
{
	ESpawnSettings__Normal                                                           = 0,
	ESpawnSettings__NoSpawning                                                       = 1,
	ESpawnSettings__SpawnAll                                                         = 2
};

/// Enum /Script/FSD.ECriticalItemPass
/// Size: 0x02
enum class ECriticalItemPass : uint8_t
{
	ECriticalItemPass__LargePass                                                     = 0,
	ECriticalItemPass__SmallPass                                                     = 1
};

/// Enum /Script/FSD.ETerrainPlacementBoxType
/// Size: 0x02
enum class ETerrainPlacementBoxType : uint8_t
{
	ETerrainPlacementBoxType__NoTerrain                                              = 0,
	ETerrainPlacementBoxType__Terrain                                                = 1
};

/// Enum /Script/FSD.EProjectileAttackRotationType
/// Size: 0x03
enum class EProjectileAttackRotationType : uint32_t
{
	EProjectileAttackRotationType__NoTarget_ActorForward                             = 0,
	EProjectileAttackRotationType__NoTarget_Socket                                   = 1,
	EProjectileAttackRotationType__Always_Socket                                     = 2
};

/// Enum /Script/FSD.ECrossbowEffectApplication
/// Size: 0x03
enum class ECrossbowEffectApplication : uint8_t
{
	ECrossbowEffectApplication__ToDefault                                            = 0,
	ECrossbowEffectApplication__ToSpecial                                            = 1,
	ECrossbowEffectApplication__ToAll                                                = 2
};

/// Enum /Script/FSD.ECrossbowHit
/// Size: 0x03
enum class ECrossbowHit : uint8_t
{
	ECrossbowHit__InvalidHit                                                         = 0,
	ECrossbowHit__OldHit                                                             = 1,
	ECrossbowHit__NewHit                                                             = 2
};

/// Enum /Script/FSD.EPropHuntEvent
/// Size: 0x07
enum class EPropHuntEvent : uint8_t
{
	HunterBegin                                                                      = 0,
	HunterMiss                                                                       = 1,
	HunterHit                                                                        = 2,
	PropBegin                                                                        = 3,
	PropEnd                                                                          = 4,
	GameWon                                                                          = 5,
	GameLost                                                                         = 6
};

/// Enum /Script/FSD.EProspectorRobotState
/// Size: 0x04
enum class EProspectorRobotState : uint8_t
{
	EProspectorRobotState__Searching                                                 = 0,
	EProspectorRobotState__Scanning                                                  = 1,
	EProspectorRobotState__Sampling                                                  = 2,
	EProspectorRobotState__Fleeing                                                   = 3
};

/// Enum /Script/FSD.ERefineryExtractorPodState
/// Size: 0x04
enum class ERefineryExtractorPodState : uint8_t
{
	ERefineryExtractorPodState__Landing                                              = 0,
	ERefineryExtractorPodState__Idle                                                 = 1,
	ERefineryExtractorPodState__Extracting                                           = 2,
	ERefineryExtractorPodState__Returning                                            = 3
};

/// Enum /Script/FSD.ERefinerySecondaryState
/// Size: 0x06
enum class ERefinerySecondaryState : uint8_t
{
	ERefinerySecondaryState__Started                                                 = 0,
	ERefinerySecondaryState__WellCalled                                              = 1,
	ERefinerySecondaryState__PipeConnected                                           = 2,
	ERefinerySecondaryState__PipeConstructed                                         = 3,
	ERefinerySecondaryState__Extracting                                              = 4,
	ERefinerySecondaryState__Complete                                                = 5
};

/// Enum /Script/FSD.EResourceFilterType
/// Size: 0x02
enum class EResourceFilterType : uint8_t
{
	EWhitelist                                                                       = 0,
	EBlacklist                                                                       = 1
};

/// Enum /Script/FSD.ESchematicType
/// Size: 0x04
enum class ESchematicType : uint8_t
{
	ESchematicType__Overclock                                                        = 0,
	ESchematicType__Vanity                                                           = 1,
	ESchematicType__Resource                                                         = 2,
	ESchematicType__Blank                                                            = 3
};

/// Enum /Script/FSD.ESeasonMissionMapOverlayType
/// Size: 0x02
enum class ESeasonMissionMapOverlayType : uint8_t
{
	ESeasonMissionMapOverlayType__None                                               = 0,
	ESeasonMissionMapOverlayType__Plague                                             = 1
};

/// Enum /Script/FSD.ESeasonVisibilityState
/// Size: 0x03
enum class ESeasonVisibilityState : uint8_t
{
	ESeasonVisibilityState__Bought                                                   = 0,
	ESeasonVisibilityState__CanBuy                                                   = 1,
	ESeasonVisibilityState__Locked                                                   = 2
};

/// Enum /Script/FSD.EServerSortOrder
/// Size: 0x07
enum class EServerSortOrder : uint8_t
{
	EServerSortOrder__Mission                                                        = 0,
	EServerSortOrder__Players                                                        = 1,
	EServerSortOrder__Length                                                         = 2,
	EServerSortOrder__Complexity                                                     = 3,
	EServerSortOrder__Distance                                                       = 4,
	EServerSortOrder__Time                                                           = 5,
	EServerSortOrder__Difficulty                                                     = 6
};

/// Enum /Script/FSD.EServerDistance
/// Size: 0x04
enum class EServerDistance : uint8_t
{
	EServerDistance__Close                                                           = 0,
	EServerDistance__Medium                                                          = 1,
	EServerDistance__Far                                                             = 2,
	EServerDistance__World                                                           = 3
};

/// Enum /Script/FSD.EFSDNATType
/// Size: 0x04
enum class EFSDNATType : uint8_t
{
	EFSDNATType__Open                                                                = 0,
	EFSDNATType__Moderate                                                            = 1,
	EFSDNATType__Strict                                                              = 2,
	EFSDNATType__Unknown                                                             = 3
};

/// Enum /Script/FSD.EFSDMissionStatus
/// Size: 0x05
enum class EFSDMissionStatus : uint8_t
{
	EFSDMissionStatus__SpaceRig                                                      = 0,
	EFSDMissionStatus__InGame                                                        = 1,
	EFSDMissionStatus__Starting                                                      = 2,
	EFSDMissionStatus__EscapeSequence                                                = 3,
	EFSDMissionStatus__FinalBattle                                                   = 4
};

/// Enum /Script/FSD.ESharkEnemyState
/// Size: 0x05
enum class ESharkEnemyState : uint8_t
{
	ESharkEnemyState__Idle                                                           = 0,
	ESharkEnemyState__Circling                                                       = 1,
	ESharkEnemyState__Attacking                                                      = 2,
	ESharkEnemyState__Vulnerable                                                     = 3,
	ESharkEnemyState__Dive                                                           = 4
};

/// Enum /Script/FSD.EShowroomScaling
/// Size: 0x05
enum class EShowroomScaling : uint8_t
{
	EShowroomScaling__NoScaling                                                      = 0,
	EShowroomScaling__EnemySmall                                                     = 1,
	EShowroomScaling__EnemyMedium                                                    = 2,
	EShowroomScaling__EnemyBig                                                       = 3,
	EShowroomScaling__EnemyHuge                                                      = 4
};

/// Enum /Script/FSD.EPiplelineConnectorAnimationState
/// Size: 0x03
enum class EPiplelineConnectorAnimationState : uint8_t
{
	EPiplelineConnectorAnimationState__Unassembled                                   = 0,
	EPiplelineConnectorAnimationState__Assembling                                    = 1,
	EPiplelineConnectorAnimationState__Assembled                                     = 2
};

/// Enum /Script/FSD.EMaggotAnimationState
/// Size: 0x02
enum class EMaggotAnimationState : uint8_t
{
	EMaggotAnimationState__Idle                                                      = 0,
	EMaggotAnimationState__Moving                                                    = 1
};

/// Enum /Script/FSD.ESpiderDeathAnimationCategory
/// Size: 0x04
enum class ESpiderDeathAnimationCategory : uint8_t
{
	ESpiderDeathAnimationCategory__NoAnimation                                       = 0,
	ESpiderDeathAnimationCategory__Melt                                              = 1,
	ESpiderDeathAnimationCategory__Cook                                              = 2,
	ESpiderDeathAnimationCategory__Burn                                              = 3
};

/// Enum /Script/FSD.EMoveDirection
/// Size: 0x05
enum class EMoveDirection : uint8_t
{
	EMoveDirection__None                                                             = 0,
	EMoveDirection__Forward                                                          = 1,
	EMoveDirection__Left                                                             = 2,
	EMoveDirection__Right                                                            = 3,
	EMoveDirection__Back                                                             = 4
};

/// Enum /Script/FSD.EMiningPodMission
/// Size: 0x03
enum class EMiningPodMission : uint8_t
{
	EMiningPodMission__DropAndReturn                                                 = 0,
	EMiningPodMission__Extraction                                                    = 1,
	EMiningPodMission__DropFromSpacerig                                              = 2
};

/// Enum /Script/FSD.EMiningPodRampState
/// Size: 0x04
enum class EMiningPodRampState : uint8_t
{
	EMiningPodRampState__Closed                                                      = 0,
	EMiningPodRampState__Opening                                                     = 1,
	EMiningPodRampState__Open                                                        = 2,
	EMiningPodRampState__Closing                                                     = 3
};

/// Enum /Script/FSD.EMiningPodState
/// Size: 0x14
enum class EMiningPodState : uint8_t
{
	EMiningPodState__Dropping                                                        = 0,
	EMiningPodState__Drilling                                                        = 1,
	EMiningPodState__Landed                                                          = 2,
	EMiningPodState__PrepTakeoff                                                     = 3,
	EMiningPodState__Departing                                                       = 4,
	EMiningPodState__WaitingForGameStart                                             = 5,
	EMiningPodState__InSpace                                                         = 6,
	EMiningPodState__Destroy                                                         = 7,
	EMiningPodState__WaitOnSpacerig                                                  = 8,
	EMiningPodState__ExitSpacerig                                                    = 9,
	EMiningPodState__Damaged                                                         = 10,
	EMiningPodState__PoweringUp                                                      = 11,
	EMiningPodState__PoweredUp                                                       = 12,
	EMiningPodState__DeepDiveDeparture                                               = 13
};

/// Enum /Script/FSD.ETemperatureIntensity
/// Size: 0x06
enum class ETemperatureIntensity : uint8_t
{
	ETemperatureIntensity__Cold3                                                     = 0,
	ETemperatureIntensity__Cold2                                                     = 1,
	ETemperatureIntensity__Cold1                                                     = 2,
	ETemperatureIntensity__Heat1                                                     = 3,
	ETemperatureIntensity__Heat2                                                     = 4,
	ETemperatureIntensity__Heat3                                                     = 5
};

/// Enum /Script/FSD.ETerminatorTentacleState
/// Size: 0x04
enum class ETerminatorTentacleState : uint8_t
{
	ETerminatorTentacleState__Idle                                                   = 0,
	ETerminatorTentacleState__Grabbing                                               = 1,
	ETerminatorTentacleState__Grabbed                                                = 2,
	ETerminatorTentacleState__Dead                                                   = 3
};

/// Enum /Script/FSD.ETerminatorShoutState
/// Size: 0x04
enum class ETerminatorShoutState : uint8_t
{
	ETerminatorShoutState__EIdle                                                     = 0,
	ETerminatorShoutState__EGrabbing                                                 = 1,
	ETerminatorShoutState__EDeath                                                    = 2,
	ETerminatorShoutState__EAttacking                                                = 3
};

/// Enum /Script/FSD.EBulletMode
/// Size: 0x02
enum class EBulletMode : uint8_t
{
	EBulletMode__EMultiTrace                                                         = 0,
	EBulletMode__ECapsule                                                            = 1
};

/// Enum /Script/FSD.ETetherMessageDirection
/// Size: 0x03
enum class ETetherMessageDirection : uint8_t
{
	ETetherMessageDirection__Forward                                                 = 0,
	ETetherMessageDirection__Backward                                                = 1,
	ETetherMessageDirection__Both                                                    = 2
};

/// Enum /Script/FSD.ETetherConnectionMode
/// Size: 0x04
enum class ETetherConnectionMode : uint32_t
{
	ETetherConnectionMode__Both                                                      = 0,
	ETetherConnectionMode__FrontOnly                                                 = 1,
	ETetherConnectionMode__BackOnly                                                  = 2,
	ETetherConnectionMode__None                                                      = 3
};

/// Enum /Script/FSD.EThrowableInput
/// Size: 0x02
enum class EThrowableInput : uint8_t
{
	EThrowableInput__LeftButton                                                      = 0,
	EThrowableInput__RightButton                                                     = 1
};

/// Enum /Script/FSD.EExitTrackMode
/// Size: 0x05
enum class EExitTrackMode : uint8_t
{
	EExitTrackMode__None                                                             = 0,
	EExitTrackMode__StopInPlace                                                      = 1,
	EExitTrackMode__JumpInPlace                                                      = 2,
	EExitTrackMode__JumpInCamDir                                                     = 3,
	EExitTrackMode__JumpInTrackDir                                                   = 4
};

/// Enum /Script/FSD.ETreasureType
/// Size: 0x04
enum class ETreasureType : uint8_t
{
	ETreasureType__WeaponSkin                                                        = 0,
	ETreasureType__VictoryPose                                                       = 1,
	ETreasureType__PickaxePart                                                       = 2,
	ETreasureType__VanityItem                                                        = 3
};

/// Enum /Script/FSD.ECleanedStatus
/// Size: 0x02
enum class ECleanedStatus : uint8_t
{
	EInfected                                                                        = 0,
	EVacuumed                                                                        = 1
};

/// Enum /Script/FSD.EHeadVanityType
/// Size: 0x05
enum class EHeadVanityType : uint8_t
{
	EHeadVanityType__HairOnly                                                        = 0,
	EHeadVanityType__HeadGearOnly                                                    = 1,
	EHeadVanityType__HeadGearOnly_UseArmorMaterial                                   = 2,
	EHeadVanityType__HairAndHeadGear                                                 = 3,
	EHeadVanityType__HairAndHeadGear_UseArmorMaterial                                = 4
};

/// Enum /Script/FSD.EArmorSetLegs
/// Size: 0x09
enum class EArmorSetLegs : uint8_t
{
	EArmorSetLegs__Invalid                                                           = 0,
	EArmorSetLegs__LeftUpperLeg                                                      = 1,
	EArmorSetLegs__LeftLowerLeg                                                      = 2,
	EArmorSetLegs__LeftFoot                                                          = 3,
	EArmorSetLegs__LeftToe                                                           = 4,
	EArmorSetLegs__RightUpperLeg                                                     = 5,
	EArmorSetLegs__RightLowerLeg                                                     = 6,
	EArmorSetLegs__RightFoot                                                         = 7,
	EArmorSetLegs__RightToe                                                          = 8
};

/// Enum /Script/FSD.EArmorSetTorso
/// Size: 0x18
enum class EArmorSetTorso : uint8_t
{
	EArmorSetTorso__Invalid                                                          = 0,
	EArmorSetTorso__UpperTorso                                                       = 1,
	EArmorSetTorso__MiddleTorso                                                      = 2,
	EArmorSetTorso__LowerTorso                                                       = 3,
	EArmorSetTorso__UpperBack                                                        = 4,
	EArmorSetTorso__MiddleBack                                                       = 5,
	EArmorSetTorso__LowerBack                                                        = 6,
	EArmorSetTorso__LeftHip                                                          = 7,
	EArmorSetTorso__RightHip                                                         = 8,
	EArmorSetTorso__FrontHip                                                         = 9,
	EArmorSetTorso__LeftUpperLeg                                                     = 10,
	EArmorSetTorso__LeftLowerLeg                                                     = 11,
	EArmorSetTorso__LeftFoot                                                         = 12,
	EArmorSetTorso__LeftToe                                                          = 13,
	EArmorSetTorso__RightUpperLeg                                                    = 14,
	EArmorSetTorso__RightLowerLeg                                                    = 15,
	EArmorSetTorso__RightFoot                                                        = 16,
	EArmorSetTorso__RightToe                                                         = 17
};

/// Enum /Script/FSD.EArmorSetArms
/// Size: 0x13
enum class EArmorSetArms : uint8_t
{
	EArmorSetArms__Invalid                                                           = 0,
	EArmorSetArms__LeftShoulder                                                      = 1,
	EArmorSetArms__RightShoulder                                                     = 2,
	EArmorSetArms__LeftUpperArm                                                      = 3,
	EArmorSetArms__LeftLowerArm1                                                     = 4,
	EArmorSetArms__LeftLowerArm2                                                     = 5,
	EArmorSetArms__LeftHand                                                          = 6,
	EArmorSetArms__LeftHandAttach                                                    = 7,
	EArmorSetArms__RightUpperArm                                                     = 8,
	EArmorSetArms__RightLowerArm1                                                    = 9,
	EArmorSetArms__RightLowerArm2                                                    = 10,
	EArmorSetArms__RightHand                                                         = 11,
	EArmorSetArms__RightHandAttach                                                   = 12
};

/// Enum /Script/FSD.ECharacterHeadMesh
/// Size: 0x08
enum class ECharacterHeadMesh : uint8_t
{
	ECharacterHeadMesh__Full                                                         = 0,
	ECharacterHeadMesh__ThichNeckOnly                                                = 1,
	ECharacterHeadMesh__ThinNeckOnly                                                 = 2,
	ECharacterHeadMesh__None                                                         = 3,
	ECharacterHeadMesh__FlatEars                                                     = 4,
	ECharacterHeadMesh__FaceOnly                                                     = 5,
	ECharacterHeadMesh__EyesOnly                                                     = 6,
	ECharacterHeadMesh__Masks                                                        = 7
};

/// Enum /Script/FSD.EArmorMeshType
/// Size: 0x05
enum class EArmorMeshType : uint8_t
{
	EArmorMeshType__None                                                             = 0,
	EArmorMeshType__Default                                                          = 1,
	EArmorMeshType__DefaultBeardCompatible                                           = 2,
	EArmorMeshType__Sleeveless                                                       = 4,
	EArmorMeshType__SleevelessBeardCompatible                                        = 8
};

/// Enum /Script/FSD.EVanityAquisitionType
/// Size: 0x04
enum class EVanityAquisitionType : uint8_t
{
	EVanityAquisitionType__UnlockedFromStart                                         = 0,
	EVanityAquisitionType__Purchased                                                 = 1,
	EVanityAquisitionType__Schematic                                                 = 2,
	EVanityAquisitionType__Treasure                                                  = 3
};

/// Enum /Script/FSD.EWeakpointGlowMode
/// Size: 0x02
enum class EWeakpointGlowMode : uint8_t
{
	EWeakpointGlowMode__Set                                                          = 0,
	EWeakpointGlowMode__Additive                                                     = 1
};

/// Enum /Script/FSD.EWoodLouseState
/// Size: 0x03
enum class EWoodLouseState : uint8_t
{
	EWoodLouseState__Unfolded                                                        = 0,
	EWoodLouseState__Folded                                                          = 1,
	EWoodLouseState__Size                                                            = 2
};

